#
# PySNMP MIB module OLD-CISCO-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-SYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, Counter64, IpAddress, Gauge32, Unsigned32, Bits, MibIdentifier, ObjectIdentity, TimeTicks, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Counter64", "IpAddress", "Gauge32", "Unsigned32", "Bits", "MibIdentifier", "ObjectIdentity", "TimeTicks", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 1))
romId = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: romId.setStatus('mandatory')
if mibBuilder.loadTexts: romId.setDescription('This variable contains a printable octet string which contains the System Bootstrap description and version identification.')
whyReload = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: whyReload.setStatus('mandatory')
if mibBuilder.loadTexts: whyReload.setDescription('This variable contains a printable octet string which contains the reason why the system was last restarted.')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('This variable represents the name of the host in printable ascii characters.')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription('This variable is the domain portion of the domain name of the host.')
authAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authAddr.setStatus('mandatory')
if mibBuilder.loadTexts: authAddr.setDescription('This variable contains the last SNMP authorization failure IP address.')
bootHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootHost.setStatus('mandatory')
if mibBuilder.loadTexts: bootHost.setDescription('Contains the IP address of the host that supplied the currently running software.')
ping = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ping.setStatus('obsolete')
if mibBuilder.loadTexts: ping.setDescription('The ping mib object is obsolete as of IOS 10.2 It has been superseded by the Cisco Ping MIB')
freeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMem.setStatus('obsolete')
if mibBuilder.loadTexts: freeMem.setDescription('The freeMem mib object is obsolete as of IOS 11.1 It has been replaced with the cisco memory pool mib')
bufferElFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElFree.setDescription('Contains the number of free buffer elements.')
bufferElMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElMax.setDescription('Contains the maximum number of buffer elements.')
bufferElHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElHit.setDescription('Contains the number of buffer element hits.')
bufferElMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElMiss.setDescription('Contains the number of buffer element misses.')
bufferElCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferElCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferElCreate.setDescription('Contains the number of buffer element creates.')
bufferSmSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmSize.setDescription('Contains the size of small buffers.')
bufferSmTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmTotal.setDescription('Contains the total number of small buffers.')
bufferSmFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmFree.setDescription('Contains the number of free small buffers.')
bufferSmMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmMax.setDescription('Contains the maximum number of small buffers.')
bufferSmHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmHit.setDescription('Contains the number of small buffer hits.')
bufferSmMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmMiss.setDescription('Contains the number of small buffer misses.')
bufferSmTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmTrim.setDescription('Contains the number of small buffer trims.')
bufferSmCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferSmCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferSmCreate.setDescription('Contains the number of small buffer creates.')
bufferMdSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdSize.setDescription('Contains the size of medium buffers.')
bufferMdTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdTotal.setDescription('Contains the total number of medium buffers.')
bufferMdFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdFree.setDescription('Contains the number of free medium buffers.')
bufferMdMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdMax.setDescription('Contains the maximum number of medium buffers.')
bufferMdHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdHit.setDescription('Contains the number of medium buffer hits.')
bufferMdMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdMiss.setDescription('Contains the number of medium buffer misses.')
bufferMdTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdTrim.setDescription('Contains the number of medium buffer trims.')
bufferMdCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferMdCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferMdCreate.setDescription('Contains the number of medium buffer creates.')
bufferBgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgSize.setDescription('Contains the size of big buffers.')
bufferBgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgTotal.setDescription('Contains the total number of big buffers.')
bufferBgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgFree.setDescription('Contains the number of free big buffers.')
bufferBgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgMax.setDescription('Contains the maximum number of big buffers.')
bufferBgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgHit.setDescription('Contains the number of big buffer hits.')
bufferBgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgMiss.setDescription('Contains the number of big buffer misses.')
bufferBgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgTrim.setDescription('Contains the number of big buffer trims.')
bufferBgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferBgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferBgCreate.setDescription('Contains the number of big buffer creates.')
bufferLgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgSize.setDescription('Contains the size of large buffers.')
bufferLgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgTotal.setDescription('Contains the total number of large buffers.')
bufferLgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgFree.setDescription('Contains the number of free large buffers.')
bufferLgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgMax.setDescription('Contains the maximum number of large buffers.')
bufferLgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgHit.setDescription('Contains the number of large buffer hits.')
bufferLgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgMiss.setDescription('Contains the number of large buffer misses.')
bufferLgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgTrim.setDescription('Contains the number of large buffer trims.')
bufferLgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferLgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferLgCreate.setDescription('Contains the number of large buffer creates.')
bufferFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferFail.setStatus('mandatory')
if mibBuilder.loadTexts: bufferFail.setDescription('Count of the number of buffer allocation failures.')
bufferNoMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferNoMem.setStatus('mandatory')
if mibBuilder.loadTexts: bufferNoMem.setDescription('Count of the number of buffer create failures due to no free memory.')
netConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 48), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigAddr.setDescription('Holds the address of the host that supplied the network-confg file.')
netConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigName.setDescription('Holds the name of the network configuration file.')
netConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 50), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: netConfigSet.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigSet.setDescription('Cause the loading of a new network-confg file using TFTP.')
hostConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 51), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigAddr.setStatus('obsolete')
if mibBuilder.loadTexts: hostConfigAddr.setDescription('Contains the address of the host that provided the host-config file.')
hostConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigName.setStatus('obsolete')
if mibBuilder.loadTexts: hostConfigName.setDescription('Contains the name of the last configured host-confg file.')
hostConfigSet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 53), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: hostConfigSet.setStatus('obsolete')
if mibBuilder.loadTexts: hostConfigSet.setDescription('Cause the loading of a new host-confg file using TFTP.')
writeMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 54), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeMem.setStatus('mandatory')
if mibBuilder.loadTexts: writeMem.setDescription('Write configuration into non-volatile memory / erase config memory if 0.')
writeNet = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 55), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: writeNet.setStatus('mandatory')
if mibBuilder.loadTexts: writeNet.setDescription('Write configuration to host using TFTP.')
busyPer = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busyPer.setStatus('mandatory')
if mibBuilder.loadTexts: busyPer.setDescription('CPU busy percentage in the last 5 second period. Not the last 5 realtime seconds but the last 5 second period in the scheduler.')
avgBusy1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBusy1.setStatus('mandatory')
if mibBuilder.loadTexts: avgBusy1.setDescription('1 minute exponentially-decayed moving average of the CPU busy percentage.')
avgBusy5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBusy5.setStatus('mandatory')
if mibBuilder.loadTexts: avgBusy5.setDescription('5 minute exponentially-decayed moving average of the CPU busy percentage.')
idleCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleCount.setStatus('mandatory')
if mibBuilder.loadTexts: idleCount.setDescription('cisco internal variable. not to be used')
idleWired = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idleWired.setStatus('mandatory')
if mibBuilder.loadTexts: idleWired.setDescription('cisco internal variable. not to be used')
ciscoContactInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoContactInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ciscoContactInfo.setDescription("cisco's name and address")
bufferHgSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgSize.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgSize.setDescription('Contains the size of huge buffers.')
bufferHgTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTotal.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgTotal.setDescription('Contains the total number of huge buffers.')
bufferHgFree = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgFree.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgFree.setDescription('Contains the number of free huge buffers.')
bufferHgMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMax.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgMax.setDescription('Contains the maximum number of huge buffers.')
bufferHgHit = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgHit.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgHit.setDescription('Contains the number of huge buffer hits.')
bufferHgMiss = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgMiss.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgMiss.setDescription('Contains the number of huge buffer misses.')
bufferHgTrim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgTrim.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgTrim.setDescription('Contains the number of huge buffer trims.')
bufferHgCreate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bufferHgCreate.setStatus('mandatory')
if mibBuilder.loadTexts: bufferHgCreate.setDescription('Contains the number of huge buffer creates.')
netConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: netConfigProto.setDescription('Holds the protocol that supplied the network-confg file.')
hostConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: hostConfigProto.setDescription('Holds the protocol that supplied the host- confg file.')
sysConfigAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 72), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigAddr.setDescription('Holds the address of the host that supplied the system boot image.')
sysConfigName = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigName.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigName.setDescription('Holds the name of the system boot image.')
sysConfigProto = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigProto.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfigProto.setDescription('Holds the protocol that supplied the system boot image.')
sysClearARP = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 75), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearARP.setStatus('mandatory')
if mibBuilder.loadTexts: sysClearARP.setDescription('Perform a clearing of the entire ARP cache and invalidation of route caches.')
sysClearInt = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 76), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysClearInt.setStatus('mandatory')
if mibBuilder.loadTexts: sysClearInt.setDescription('Clear interface given IfIndex as value.')
envPresent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPresent.setStatus('mandatory')
if mibBuilder.loadTexts: envPresent.setDescription('Is there an environmental monitor card in this box?, 0 - No, 1-AGS card present, wrong firmware, 2-AGS CARD present, firmware ok, 3-7000 support')
envTestPt1Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1Descr.setDescription('Description of the test point 1. Typically ambient air or the temperature of air entering the router')
envTestPt1Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1Measure.setDescription('Current value of test point 1. Typically a temperature in centigrade.')
envTestPt2Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2Descr.setDescription('Description of the test point 2. Typically airflow or the temperature of air leaving the router')
envTestPt2Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2Measure.setDescription('Current value of test point 2. Typically a temperature in centigrade.')
envTestPt3Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3Descr.setDescription('Description of the test point 3. Typically +5 volt')
envTestPt3Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3Measure.setDescription('Current value of test point 3. Typically the value in millivolts of the +5v supply')
envTestPt4Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4Descr.setDescription('Description of the test point 4. Typically +12 volt')
envTestPt4Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4Measure.setDescription('Current value of test point 4. Typically the value in millivolts of the +12v supply')
envTestPt5Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5Descr.setDescription('Description of the test point 5. Typically -12 volt')
envTestPt5Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5Measure.setDescription('Current value of test point 5. Typically the value in millivolts of the -12v supply')
envTestPt6Descr = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Descr.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6Descr.setDescription('Description of the test point 6. Typically -5 volt')
envTestPt6Measure = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6Measure.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6Measure.setDescription('Current value of test point 6. Typically the value in millivolts of the -5v supply')
envTestPt1MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1MarginVal.setDescription('Value at which the router will shutdown. Typically the ambient air temperature that will shut the router down. (e.g. 43)')
envTestPt2MarginVal = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2MarginVal.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2MarginVal.setDescription('Value at which the router will shutdown. Typically the airflow air temperature that will shut the router down. (e.g. 58)')
envTestPt3MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically +5 volt')
envTestPt4MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically +12 volt')
envTestPt5MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 15%) typically -12 volt')
envTestPt6MarginPercent = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6MarginPercent.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6MarginPercent.setDescription('+/- Percentage that will shut the router down, (e.g. 10%) typically -5 volt')
envTestPt1last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1last.setDescription('Value of TestPt1 when last shutdown occurred.')
envTestPt2last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2last.setDescription('Value of TestPt2 when last shutdown occurred.')
envTestPt3last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3last.setDescription('Value of TestPt3 when last shutdown occurred.')
envTestPt4last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4last.setDescription('Value of TestPt4 when last shutdown occurred.')
envTestPt5last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5last.setDescription('Value of TestPt5 when last shutdown occurred.')
envTestPt6last = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6last.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6last.setDescription('Value of TestPt6 when last shutdown occurred.')
envTestPt1warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt1warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt1warn.setDescription('Is this test point at a warning level?')
envTestPt2warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt2warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt2warn.setDescription('Is this test point at a warning level?')
envTestPt3warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt3warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt3warn.setDescription('Is this test point at a warning level?')
envTestPt4warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt4warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt4warn.setDescription('Is this test point at a warning level?')
envTestPt5warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 106), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt5warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt5warn.setDescription('Is this test point at a warning level?')
envTestPt6warn = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("noWarning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTestPt6warn.setStatus('mandatory')
if mibBuilder.loadTexts: envTestPt6warn.setDescription('Is this test point at a warning level?')
envFirmVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFirmVersion.setStatus('mandatory')
if mibBuilder.loadTexts: envFirmVersion.setDescription('Description of Environmental Card firmware')
envTechnicianID = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTechnicianID.setStatus('mandatory')
if mibBuilder.loadTexts: envTechnicianID.setDescription('Technician ID')
envType = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envType.setStatus('mandatory')
if mibBuilder.loadTexts: envType.setDescription('The type of environmental card')
envBurnDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envBurnDate.setStatus('mandatory')
if mibBuilder.loadTexts: envBurnDate.setDescription('The calibration / burn in date')
envSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 1, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: envSerialNumber.setDescription('Serial Number of environmental monitor card')
mibBuilder.exportSymbols("OLD-CISCO-SYS-MIB", envTestPt5last=envTestPt5last, hostConfigName=hostConfigName, freeMem=freeMem, bufferBgMax=bufferBgMax, netConfigName=netConfigName, envTestPt6Descr=envTestPt6Descr, bufferSmMax=bufferSmMax, envTestPt5MarginPercent=envTestPt5MarginPercent, bufferMdSize=bufferMdSize, bufferMdFree=bufferMdFree, bufferNoMem=bufferNoMem, sysConfigAddr=sysConfigAddr, bufferSmCreate=bufferSmCreate, bufferElMiss=bufferElMiss, envTestPt2Descr=envTestPt2Descr, envTestPt2last=envTestPt2last, hostConfigAddr=hostConfigAddr, envTestPt5warn=envTestPt5warn, writeMem=writeMem, bufferMdTrim=bufferMdTrim, bufferBgSize=bufferBgSize, bufferHgTotal=bufferHgTotal, bufferLgFree=bufferLgFree, bufferMdTotal=bufferMdTotal, envTestPt1Measure=envTestPt1Measure, bufferHgSize=bufferHgSize, envSerialNumber=envSerialNumber, envTestPt3warn=envTestPt3warn, sysClearARP=sysClearARP, envTestPt1Descr=envTestPt1Descr, bufferBgFree=bufferBgFree, bufferLgHit=bufferLgHit, envTestPt3Measure=envTestPt3Measure, authAddr=authAddr, envTestPt6warn=envTestPt6warn, bufferMdCreate=bufferMdCreate, bufferHgTrim=bufferHgTrim, hostName=hostName, bufferLgSize=bufferLgSize, writeNet=writeNet, lsystem=lsystem, envTestPt3MarginPercent=envTestPt3MarginPercent, romId=romId, avgBusy1=avgBusy1, envTestPt4MarginPercent=envTestPt4MarginPercent, envTechnicianID=envTechnicianID, bufferLgMiss=bufferLgMiss, bufferElFree=bufferElFree, bufferLgCreate=bufferLgCreate, envTestPt1MarginVal=envTestPt1MarginVal, envTestPt3last=envTestPt3last, envPresent=envPresent, bufferHgMiss=bufferHgMiss, bufferBgCreate=bufferBgCreate, bufferBgTotal=bufferBgTotal, busyPer=busyPer, envTestPt6last=envTestPt6last, bufferHgHit=bufferHgHit, envBurnDate=envBurnDate, netConfigSet=netConfigSet, bufferMdMiss=bufferMdMiss, bufferFail=bufferFail, hostConfigProto=hostConfigProto, bufferHgMax=bufferHgMax, envTestPt4Measure=envTestPt4Measure, bufferBgMiss=bufferBgMiss, envTestPt2warn=envTestPt2warn, bufferSmTrim=bufferSmTrim, envTestPt3Descr=envTestPt3Descr, sysConfigName=sysConfigName, bufferMdMax=bufferMdMax, bootHost=bootHost, bufferSmHit=bufferSmHit, bufferElMax=bufferElMax, envTestPt1last=envTestPt1last, bufferElCreate=bufferElCreate, netConfigProto=netConfigProto, ping=ping, bufferSmMiss=bufferSmMiss, envTestPt6Measure=envTestPt6Measure, envTestPt2MarginVal=envTestPt2MarginVal, bufferLgTrim=bufferLgTrim, envTestPt5Descr=envTestPt5Descr, sysClearInt=sysClearInt, bufferHgFree=bufferHgFree, bufferLgTotal=bufferLgTotal, bufferBgHit=bufferBgHit, envTestPt6MarginPercent=envTestPt6MarginPercent, idleCount=idleCount, hostConfigSet=hostConfigSet, bufferHgCreate=bufferHgCreate, domainName=domainName, bufferSmFree=bufferSmFree, idleWired=idleWired, envType=envType, envFirmVersion=envFirmVersion, sysConfigProto=sysConfigProto, envTestPt4last=envTestPt4last, avgBusy5=avgBusy5, ciscoContactInfo=ciscoContactInfo, envTestPt5Measure=envTestPt5Measure, envTestPt4warn=envTestPt4warn, envTestPt2Measure=envTestPt2Measure, bufferElHit=bufferElHit, netConfigAddr=netConfigAddr, envTestPt4Descr=envTestPt4Descr, bufferLgMax=bufferLgMax, bufferBgTrim=bufferBgTrim, whyReload=whyReload, envTestPt1warn=envTestPt1warn, bufferSmTotal=bufferSmTotal, bufferSmSize=bufferSmSize, bufferMdHit=bufferMdHit)
