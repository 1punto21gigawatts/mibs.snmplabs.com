#
# PySNMP MIB module DLINK-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:49:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
AgentNotifyLevel, dlink_common_mgmt = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, MibIdentifier, ObjectIdentity, Counter32, NotificationType, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "MibIdentifier", "ObjectIdentity", "Counter32", "NotificationType", "Bits", "TimeTicks", "Counter64")
TextualConvention, TruthValue, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "MacAddress", "RowStatus")
agentGeneralMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 1))
if mibBuilder.loadTexts: agentGeneralMgmt.setLastUpdated('0801290000Z')
if mibBuilder.loadTexts: agentGeneralMgmt.setOrganization('D-Link, Inc.')
if mibBuilder.loadTexts: agentGeneralMgmt.setContactInfo(' D-Link Customer Service Postal: No. 20,Park Ave, II, Science-based Industrial Park, Hsinchu, taiwan, R.O.C. Tel: 886-3-577-9966 E-mail: ')
if mibBuilder.loadTexts: agentGeneralMgmt.setDescription('The Structure of Common Management Information for the D-Link enterprise.')
agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 1))
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('current')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of agentMibCapabilityDescr entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of the MIB specified in this entry.')
agentStatusConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusConsoleInUse.setStatus('current')
if mibBuilder.loadTexts: agentStatusConsoleInUse.setDescription('This indicates whether the console is currently in-use.')
agentStatusSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("proceeding", 2), ("completed", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentStatusSaveCfg.setDescription('This indicates the status of the device configuration. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. proceeding(2) - the device configuration is being currently saved into the NV-RAM. completed(3) V all of the device configuration parameters have been saved into NV-RAM. failed(4) - The process to save device configuration has failed.')
agentStatusFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("in-process", 2), ("invalid-file", 3), ("violation", 4), ("file-not-found", 5), ("disk-full", 6), ("complete", 7), ("time-out", 8), ("not-format", 9), ("memory-full", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusFileTransfer.setStatus('current')
if mibBuilder.loadTexts: agentStatusFileTransfer.setDescription("The status of the firmware download control. If the value is 'other', this means the firmware has not been updated since the device started up.")
agentCPUutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6))
agentCPUutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setStatus('current')
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setDescription('The unit of time is 5 seconds. The value will be between 0% (idle) and 100% (very busy).')
agentCPUutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setStatus('current')
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setDescription('The unit of time is 1 minute. The value will be between 0% (idle) and 100% (very busy).')
agentCPUutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setStatus('current')
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setDescription('The unit of time is 5 minutes. The value will be between 0% (idle) and 100% (very busy).')
agentPORTutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7), )
if mibBuilder.loadTexts: agentPORTutilizationTable.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationTable.setDescription("The table specifies the port's utilization function.")
agentPORTutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "agentPORTutilizationProtIndex"))
if mibBuilder.loadTexts: agentPORTutilizationEntry.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationEntry.setDescription("A list of information about the port's utilization function.")
agentPORTutilizationProtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationProtIndex.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationProtIndex.setDescription("This object indicates the module's port number.")
agentPORTutilizationTX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationTX.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationTX.setDescription('The real-time gauges of transmitted frames on the specific port.')
agentPORTutilizationRX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationRX.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationRX.setDescription('The real-time gauges of recieved frames on the specific port.')
agentPORTutilizationUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationUtil.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationUtil.setDescription('The real-time percentage of the port statistics.')
agentDRAMutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9), )
if mibBuilder.loadTexts: agentDRAMutilizationTable.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationTable.setDescription('Information about DRAM memory.')
agentDRAMutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "agentDRAMutilizationUnitID"))
if mibBuilder.loadTexts: agentDRAMutilizationEntry.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationEntry.setDescription('A list of information about DRAM memory.')
agentDRAMutilizationUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilizationUnitID.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationUnitID.setDescription('Specifies the unit ID. If the ID equals zero, it means the current device.')
agentDRAMutilizationTotalDRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 2), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilizationTotalDRAM.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationTotalDRAM.setDescription('The size of the total DRAM memory.')
agentDRAMutilizationUsedDRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 3), Integer32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilizationUsedDRAM.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilizationUsedDRAM.setDescription('The size of the used DRAM memory.')
agentDRAMutilization = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDRAMutilization.setStatus('current')
if mibBuilder.loadTexts: agentDRAMutilization.setDescription('The percentage of used DRAM memory of the total DRAM memory available. The value will be between 0%(idle) and 100%(very busy).')
agentStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proceeding", 1), ("completed", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusReset.setStatus('current')
if mibBuilder.loadTexts: agentStatusReset.setDescription("This indicates the status of 'agentReset'.")
agentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentSerialNumber.setDescription('A text string containing the serial number of this device.')
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2))
agentBscSwFileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1), )
if mibBuilder.loadTexts: agentBscSwFileTable.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileTable.setDescription('A list of MIB basic config entries that support file update by this agent.')
agentBscSwFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "agentBscSwFileIndex"))
if mibBuilder.loadTexts: agentBscSwFileEntry.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileEntry.setDescription('A basic configuration entry contains objects describing a particular MIB supported by this agent.')
agentBscSwFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBscSwFileIndex.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileIndex.setDescription('The table index for the file entry.')
agentBscSwFileDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileDscr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileDscr.setDescription('The description for the purpose of the software file in this entry. Note: For systems which do not support change of this object, setting values to this object will cause the system to return a bad-value error message. ')
agentBscSwFileAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileAddr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileAddr.setDescription('The IP address where the file to be downloaded is located, or the IP address where the file will be uploaded to.')
agentBscSwFileTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileTransferType.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileTransferType.setDescription('The channel through which the file will be downloaded or uploaded. Note: For systems which do not support all channels, setting values to the unsupported channel will cause the system to return a bad-value error message. ')
agentBscSwFile = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFile.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFile.setDescription('The name of the file to be downloaded from the TFTP server, or to be uploaded to.')
agentBscSwFileLocateId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLocateId.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileLocateId.setDescription('This object describes the type of the file. runtime-code(1), log-file(2), cfg-file(3) Note: For a system which does not support change of this object, setting a value to this object will cause the system to return a bad-value error message. ')
agentBscSwFileLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLoadType.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileLoadType.setDescription('This object allows the user to select the download or upload function for the file. Note: For a system which does not support change of this object, setting a value to this object will cause the system to return a bad-value error message. ')
agentBscSwFileCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("start", 3), ("delete", 4), ("config-as-bootup-fw", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileCtrl.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileCtrl.setDescription('This object allows the user to download runtime software. The setting will take effect when the system restarts. See Note (1) below Note: For systems which do not support change of this object to some value, setting these values causes the system to return bad-value error messages. start - start to action. delete(4) - delete the firmware by indicated firmware ID. config-as-bootup-fw(5) - configured as bootup firmware by indicated firmware(ID).')
agentBscSwFileBIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileBIncrement.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileBIncrement.setDescription('The object indicates whether the previous configuration will be valid or not after downloading the configuration file. True: keep valid False: erase.')
agentMultiImageCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMultiImageCtrlID.setStatus('current')
if mibBuilder.loadTexts: agentMultiImageCtrlID.setDescription('The section ID of the firmware image.')
agentFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("start-and-reset", 3), ("noaction", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: agentFileTransfer.setDescription('This object will execute the download or upload action. If start(2), it will begin to download/upload, but no reset follows. If start-and-reset(3), then the reset will activate after download or upload. No action if (4). Note: Because these functions will be limited by the system support, some of the selected items will be invalid. When the user selects one of the items, it will respond with bad-value status.')
agentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("warm-start", 3), ("no-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemReset.setStatus('deprecated')
if mibBuilder.loadTexts: agentSystemReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(4) has no effect. Setting this object to cold-start(2) or warm-start(3) will reset the agent. The agent always returns no-reset(4) when this object is read.')
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3), ("notAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('current')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('This object indicates the RS-232C mode when the device has restarted.')
agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-115200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setStatus('obsolete')
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setDescription('This object allows the user to the specify out-of-band baud rate. It will take effect when the system is restarted. Note: Because these functions will be limited by the system support, some of the selected items will be invalid. When the user selects one of the items, it will respond with a bad-value status. ')
agentSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("set", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentSaveCfg.setDescription("As the object is set to 'set(3)', the current device configuration will be saved into to NV-RAM.")
swMultiImageInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7), )
if mibBuilder.loadTexts: swMultiImageInfoTable.setStatus('current')
if mibBuilder.loadTexts: swMultiImageInfoTable.setDescription('')
swMultiImageInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "swMultiImageInfoID"))
if mibBuilder.loadTexts: swMultiImageInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swMultiImageInfoEntry.setDescription('A list of information about multiple image management.')
swMultiImageInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageInfoID.setStatus('current')
if mibBuilder.loadTexts: swMultiImageInfoID.setDescription('The section ID of the firmware image.')
swMultiImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageVersion.setStatus('current')
if mibBuilder.loadTexts: swMultiImageVersion.setDescription('The record of the downloaded firmware version.')
swMultiImageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageSize.setStatus('current')
if mibBuilder.loadTexts: swMultiImageSize.setDescription('The record of the downloaded firmware size.')
swMultiImageUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageUpdateTime.setStatus('current')
if mibBuilder.loadTexts: swMultiImageUpdateTime.setDescription('The record of the firmware updated time.')
swMultiImageFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageFrom.setStatus('current')
if mibBuilder.loadTexts: swMultiImageFrom.setDescription('The record of the IP address of the TFTP server.')
swMultiImageSendUser = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMultiImageSendUser.setStatus('current')
if mibBuilder.loadTexts: swMultiImageSendUser.setDescription('The record of the user who downloaded the firmware.')
agentTrustHostMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10))
agentTrustHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1), )
if mibBuilder.loadTexts: agentTrustHostTable.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostTable.setDescription('This table contains trusted host information.')
agentTrustHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "agentTrustHostIndex"))
if mibBuilder.loadTexts: agentTrustHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostEntry.setDescription('A list of information about trusted host.')
agentTrustHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrustHostIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIndex.setDescription('The index of the trusted host entry.')
agentTrustHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIPAddress.setDescription('Specifies the IP address of the trusted host.')
agentTrustHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostRowStatus.setDescription('Indicates the status of this entry. When creating a trusted host entry, the IP address should be set, too.')
agentTrustHostIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostIPSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIPSubnetMask.setDescription('Specifies the IP subnet mask of the trusted host.')
agentTrustHostForSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostForSNMP.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostForSNMP.setDescription('Specifies the trusted host for SNMP.')
agentTrustHostForTELNET = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostForTELNET.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostForTELNET.setDescription('Specifies the trusted host for TELNET.')
agentTrustHostForSSH = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostForSSH.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostForSSH.setDescription('Specifies the trusted host for SSH.')
agentTrustHostForHTTP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostForHTTP.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostForHTTP.setDescription('Specifies the trusted host for HTTP.')
agentTrustHostForHTTPS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostForHTTPS.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostForHTTPS.setDescription('Specifies the trusted host for HTTPS.')
agentFDBMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11))
agentFDBClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFDBClearAllState.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearAllState.setDescription('Used to clear all FDB entries.')
agentARPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12))
agentARPClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentARPClearAllState.setStatus('current')
if mibBuilder.loadTexts: agentARPClearAllState.setDescription('Used to clear all ARP entries.')
agentGratuitousARPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2))
agentGratuitousARPSendIpifStatusUpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPSendIpifStatusUpState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPSendIpifStatusUpState.setDescription("It is used to enable/disable sending of gratuitous ARP request packets while IPIF interface come up. This is used to automatically announce the interface's IP address to other nodes. By default, the state is enabled, and only one ARP packet will be broadcast.")
agentGratuitousARPSendDupIpDetectedState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPSendDupIpDetectedState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPSendDupIpDetectedState.setDescription("It is used to enable/disable sending of gratuitous ARP request packets while a duplicate IP is detected. By default, the state is enabled. The duplicate IP detected means that the system received a ARP request packet that is sent by an IP address that matches the system's own IP address. In this case, the system knows that somebody out there is using an IP address that is in conflict with the system. In order to reclaim the correct host of this IP address, the system can send out the gratuitous ARP request packet for this duplicate IP address.")
agentGratuitousARPLearningState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPLearningState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPLearningState.setDescription("It is used to enable/disable learning of an ARP entry in the ARP cache based on the received gratuitous ARP packet. If the switch receives a gratuitous ARP request/reply packet and the sender's IP address is in its ARP table, it should update the ARP entry. By default, the state is disabled.")
agentGratuitousARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4), )
if mibBuilder.loadTexts: agentGratuitousARPTable.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPTable.setDescription('Gratuitous ARP Table Information.')
agentGratuitousARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1), ).setIndexNames((0, "DLINK-AGENT-MIB", "agentGratuitousARPInterfaceName"))
if mibBuilder.loadTexts: agentGratuitousARPEntry.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPEntry.setDescription('A list of information from the Gratuitous ARP Table.')
agentGratuitousARPInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGratuitousARPInterfaceName.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPInterfaceName.setDescription('The name of the IP interface.')
agentGratuitousARPPeriodicalSendInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPPeriodicalSendInterval.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPPeriodicalSendInterval.setDescription('It is used to configure the interval for the periodic sending of gratuitous ARP request packets. 0 means not send gratuitous ARP periodically.')
agentGratuitousARPTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPTrapState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPTrapState.setDescription('It indicates the state of the gratuitous ARP trap. The switch can trap the IP conflict event to inform the administrator. By default, the trap is disabled.')
agentGratuitousARPLogState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentGratuitousARPLogState.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPLogState.setDescription('It indicates the state of the gratuitous Log trap. The switch can log the IP conflict event to inform the administrator. By default, the event log is enabled.')
agentReboot = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReboot.setStatus('current')
if mibBuilder.loadTexts: agentReboot.setDescription('Used to restart the switch.')
agentReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("config", 2), ("system", 3), ("reset", 4), ("system-exclude-vlan", 5), ("system-exclude-ip", 6), ("system-exclude-vlan-ip", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentReset.setStatus('current')
if mibBuilder.loadTexts: agentReset.setDescription('Used to reset all switch parameters. none(1) : No action. This is the default value of this object. config(2): All parameters are reset to default settings, but the device will neither save nor reboot. system(3): All parameters are reset to default settings. The switch will then do a factory reset, save, and reboot. reset(4) : All parameters will be reset to default settings except IP address, user account, and history log, but the device will neither save nor reboot. system-exlude-vlan(5) : All parameters are reset to default settings except VLAN. The switch will then save its settings and reboot. system-_exlude-ip(6) : All parameters are reset to default settings except IP address. The switch will then save its settings and reboot. system-exlude-vlan-ip(7): All parameters are reset to default settings except VLAN and IP address. The switch will then save its settings and reboot. ')
agentSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapState.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapState.setDescription('This object indicates the state of snmp trap is enabled or disabled.')
agentTrustHostDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrustHostDelAllState.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostDelAllState.setDescription('Used to delete all trusted host entries.')
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 3))
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('current')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpTftpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTftpServerAddr.setStatus('obsolete')
if mibBuilder.loadTexts: agentIpTftpServerAddr.setDescription('The IP Address of the TFTP server.')
agentIpGetIpFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFrom.setStatus('current')
if mibBuilder.loadTexts: agentIpGetIpFrom.setDescription('This object indicates whether the agent get its system IP address from BOOTP/DHCP server at start up.')
agentIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpAutoconfig.setStatus('current')
if mibBuilder.loadTexts: agentIpAutoconfig.setDescription('')
agentNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 4))
agentNotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 1))
agentNotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2))
agentNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 0))
systemTrapsSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTrapsSeverity.setStatus('current')
if mibBuilder.loadTexts: systemTrapsSeverity.setDescription('Indicates the level of system severity control. The system has a severity level control and each trap should be associated with a severity control. When a trap event occurs and its severity is higher than the system severity control level, the trap works as defined. If the event severity is lower than the system severity control level, the event is ignored as if it did not occur.')
systemLogsSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogsSeverity.setStatus('current')
if mibBuilder.loadTexts: systemLogsSeverity.setDescription('Indicates the level of system severity control. The system has a severity level control and each log should be associated with a severity control. When a log event occurs and its severity is higher than the system severity control level, the log works as defined. If the event severity is lower than the system severity control level, the event is ignored as if it did not occur.')
agentGratuitousARPTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 0, 5)).setObjects(("DLINK-AGENT-MIB", "agentGratuitousARPIpAddr"), ("DLINK-AGENT-MIB", "agentGratuitousARPMacAddr"), ("DLINK-AGENT-MIB", "agentGratuitousARPPortNumber"), ("DLINK-AGENT-MIB", "agentGratuitousARPInterfaceName"))
if mibBuilder.loadTexts: agentGratuitousARPTrap.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPTrap.setDescription('The trap is sent when there is an IP address conflict.')
notificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1))
agentGratuitousARPIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentGratuitousARPIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPIpAddr.setDescription('Duplicate IP address with the switch.')
agentGratuitousARPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentGratuitousARPMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPMacAddr.setDescription('The MAC address of the device which has the duplicate IP address.')
agentGratuitousARPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentGratuitousARPPortNumber.setStatus('current')
if mibBuilder.loadTexts: agentGratuitousARPPortNumber.setDescription('It indicates the portNum with a string, For example, if the device is in standalone mode, and the port number is 23, the string should be 23. If the device is in stack mode, and the unit ID is 2, and the port number is 3, the string should be 2:3. ')
mibBuilder.exportSymbols("DLINK-AGENT-MIB", agentMibCapabilityType=agentMibCapabilityType, agentDRAMutilizationUsedDRAM=agentDRAMutilizationUsedDRAM, agentPORTutilizationEntry=agentPORTutilizationEntry, agentStatusFileTransfer=agentStatusFileTransfer, agentTrustHostForHTTP=agentTrustHostForHTTP, agentTrustHostDelAllState=agentTrustHostDelAllState, agentIpProtoConfig=agentIpProtoConfig, agentPORTutilizationRX=agentPORTutilizationRX, agentDRAMutilization=agentDRAMutilization, agentGratuitousARPPeriodicalSendInterval=agentGratuitousARPPeriodicalSendInterval, agentGratuitousARPTrapState=agentGratuitousARPTrapState, agentTrustHostForTELNET=agentTrustHostForTELNET, agentTrustHostRowStatus=agentTrustHostRowStatus, agentGratuitousARPSendDupIpDetectedState=agentGratuitousARPSendDupIpDetectedState, agentCPUutilizationIn5min=agentCPUutilizationIn5min, agentCPUutilizationIn5sec=agentCPUutilizationIn5sec, agentFDBMgmt=agentFDBMgmt, agentTrustHostForSNMP=agentTrustHostForSNMP, agentNotify=agentNotify, notificationBidings=notificationBidings, agentTrustHostIndex=agentTrustHostIndex, agentReboot=agentReboot, swMultiImageVersion=swMultiImageVersion, agentGratuitousARPSendIpifStatusUpState=agentGratuitousARPSendIpifStatusUpState, agentBscSwFileDscr=agentBscSwFileDscr, agentNotifMgmt=agentNotifMgmt, agentIpTftpServerAddr=agentIpTftpServerAddr, agentBscSwFileIndex=agentBscSwFileIndex, agentBscSwFileAddr=agentBscSwFileAddr, swMultiImageSize=swMultiImageSize, agentGratuitousARPTable=agentGratuitousARPTable, agentMgmtProtocolCapability=agentMgmtProtocolCapability, agentPORTutilizationTable=agentPORTutilizationTable, agentGratuitousARPLogState=agentGratuitousARPLogState, agentOutOfBandBaudRateConfig=agentOutOfBandBaudRateConfig, agentGratuitousARPLearningState=agentGratuitousARPLearningState, agentBasicConfig=agentBasicConfig, agentReset=agentReset, agentNotifyPrefix=agentNotifyPrefix, systemLogsSeverity=systemLogsSeverity, agentBscSwFile=agentBscSwFile, agentTrustHostEntry=agentTrustHostEntry, agentMultiImageCtrlID=agentMultiImageCtrlID, agentDRAMutilizationEntry=agentDRAMutilizationEntry, agentGratuitousARPTrap=agentGratuitousARPTrap, agentStatusReset=agentStatusReset, agentIpGetIpFrom=agentIpGetIpFrom, agentIpAutoconfig=agentIpAutoconfig, agentNotifFirmware=agentNotifFirmware, agentSnmpTrapState=agentSnmpTrapState, agentStatusSaveCfg=agentStatusSaveCfg, agentGratuitousARPEntry=agentGratuitousARPEntry, agentStatusConsoleInUse=agentStatusConsoleInUse, agentMibCapabilityIndex=agentMibCapabilityIndex, agentIpNumOfIf=agentIpNumOfIf, swMultiImageUpdateTime=swMultiImageUpdateTime, PYSNMP_MODULE_ID=agentGeneralMgmt, agentBscSwFileEntry=agentBscSwFileEntry, agentARPMgmt=agentARPMgmt, agentSerialNumber=agentSerialNumber, agentPORTutilizationUtil=agentPORTutilizationUtil, agentMibCapabilityTable=agentMibCapabilityTable, systemTrapsSeverity=systemTrapsSeverity, agentDRAMutilizationTable=agentDRAMutilizationTable, agentGratuitousARPPortNumber=agentGratuitousARPPortNumber, agentTrustHostForHTTPS=agentTrustHostForHTTPS, agentDRAMutilizationTotalDRAM=agentDRAMutilizationTotalDRAM, agentGeneralMgmt=agentGeneralMgmt, swMultiImageInfoTable=swMultiImageInfoTable, agentMibCapabilityDescr=agentMibCapabilityDescr, agentBasicInfo=agentBasicInfo, agentRs232PortConfig=agentRs232PortConfig, agentBscSwFileLoadType=agentBscSwFileLoadType, agentTrustHostMgmt=agentTrustHostMgmt, agentCPUutilization=agentCPUutilization, agentARPClearAllState=agentARPClearAllState, agentSaveCfg=agentSaveCfg, agentBscSwFileTransferType=agentBscSwFileTransferType, agentPORTutilizationProtIndex=agentPORTutilizationProtIndex, swMultiImageInfoEntry=swMultiImageInfoEntry, swMultiImageSendUser=swMultiImageSendUser, agentSystemReset=agentSystemReset, agentGratuitousARPIpAddr=agentGratuitousARPIpAddr, agentMibCapabilityVersion=agentMibCapabilityVersion, agentBscSwFileTable=agentBscSwFileTable, agentDRAMutilizationUnitID=agentDRAMutilizationUnitID, agentMibCapabilityEntry=agentMibCapabilityEntry, agentTrustHostForSSH=agentTrustHostForSSH, agentGratuitousARPMacAddr=agentGratuitousARPMacAddr, agentTrustHostIPSubnetMask=agentTrustHostIPSubnetMask, agentFileTransfer=agentFileTransfer, agentBscSwFileBIncrement=agentBscSwFileBIncrement, swMultiImageInfoID=swMultiImageInfoID, agentPORTutilizationTX=agentPORTutilizationTX, agentTrustHostIPAddress=agentTrustHostIPAddress, agentBscSwFileLocateId=agentBscSwFileLocateId, agentFDBClearAllState=agentFDBClearAllState, swMultiImageFrom=swMultiImageFrom, agentGratuitousARPMgmt=agentGratuitousARPMgmt, agentGratuitousARPInterfaceName=agentGratuitousARPInterfaceName, agentBscSwFileCtrl=agentBscSwFileCtrl, agentCPUutilizationIn1min=agentCPUutilizationIn1min, agentTrustHostTable=agentTrustHostTable)
