#
# PySNMP MIB module BREEZECOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BREEZECOM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, MibIdentifier, iso, ObjectIdentity, NotificationType, Gauge32, Counter32, TimeTicks, NotificationType, enterprises, IpAddress, Bits, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "MibIdentifier", "iso", "ObjectIdentity", "NotificationType", "Gauge32", "Counter32", "TimeTicks", "NotificationType", "enterprises", "IpAddress", "Bits", "Integer32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

breezecom = MibIdentifier((1, 3, 6, 1, 4, 1, 710))
breezecomPrvRev = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3))
breezecomOID = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4))
breezecomAP10 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 1))
breezecomWB10 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 2))
breezecomSA10 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 3))
breezecomSA40 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 4, 4))
brznetmib = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2))
brzSys = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1))
sysCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1))
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
if mibBuilder.loadTexts: sysReset.setDescription('Setting the value of this attribute to ON is interpreted as a reset command for the system. ')
sysSetDefaults = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSetDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: sysSetDefaults.setDescription('Setting the value of this attribute to ON will cause the system to set the NVRAM parameters to the factory default values. These values will become active after the next system reset ')
sysResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: sysResetCounters.setDescription('Setting the value of this attribute to ON will cause the system to clear the performance counters.')
sysTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapEnable.setDescription('Setting the value of this attribute to OFF will disable the system from sending TRAPs. ')
sysTrapCounter = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapCounter.setStatus('mandatory')
if mibBuilder.loadTexts: sysTrapCounter.setDescription('This attribute counts the total number of traps generated by the device, since initialization. ')
sysCarrierSense = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCarrierSense.setStatus('mandatory')
if mibBuilder.loadTexts: sysCarrierSense.setDescription('This attribute defines the carrier sense absolute threshold')
sysDeltaCarrierSense = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDeltaCarrierSense.setStatus('mandatory')
if mibBuilder.loadTexts: sysDeltaCarrierSense.setDescription('This attribute defines the carrier sense differential threshold')
sysPartialDefaults = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPartialDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: sysPartialDefaults.setDescription('Setting the value of this attribute to ON will cause the system to set the partial NVRAM parameters to the factory default values. These values will become active after the next system reset ')
sysRunFromNonActiveCode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRunFromNonActiveCode.setStatus('mandatory')
if mibBuilder.loadTexts: sysRunFromNonActiveCode.setDescription('This attribute make you run from non active code. Automatic switch is done if the non active code is valid. To activate set to On. If the switch succeed no response will be sent to the SNMP browser.')
accessRights = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10))
sysNoiseFloor = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNoiseFloor.setStatus('mandatory')
if mibBuilder.loadTexts: sysNoiseFloor.setDescription('This attribute defines the low RSSI threshold in DBM units. Allowed range is from -120 to -50 dbm.')
sysExternalAmplifier = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExternalAmplifier.setStatus('mandatory')
if mibBuilder.loadTexts: sysExternalAmplifier.setDescription('This attribute is set to 1 when external amplifier is connected to the device and set to 0 when device is connected to anntena.')
sysDisplayAccessRights = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("user", 0), ("installer", 1), ("authorized-technician", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDisplayAccessRights.setStatus('mandatory')
if mibBuilder.loadTexts: sysDisplayAccessRights.setDescription(' This attribute Display the access rights of that station.')
sysChangeRightsToUSER = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unchanged", 0), ("change", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeRightsToUSER.setStatus('mandatory')
if mibBuilder.loadTexts: sysChangeRightsToUSER.setDescription(' This attribute let you change the access rights of that station to USER.')
sysChangeRightsToINSTALLER = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeRightsToINSTALLER.setStatus('mandatory')
if mibBuilder.loadTexts: sysChangeRightsToINSTALLER.setDescription(' This attribute let you change the access rights of that station to INSTALLER. Type the Installer password for the desired access right.')
sysChangeRightsToTECHNICIAN = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeRightsToTECHNICIAN.setStatus('mandatory')
if mibBuilder.loadTexts: sysChangeRightsToTECHNICIAN.setDescription(' This attribute let you change the access rights of that station to AUTHORIZED TECHNICIAN. Type the Technician password for the desired access right.')
sysChangeInstallerPassword = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysChangeInstallerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: sysChangeInstallerPassword.setDescription(' This attribute let you change the Installer Password of that station. Type the new password, maximum 8 characters.')
sysParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2))
brzHWMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzHWMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: brzHWMacAddress.setDescription('The Hardware MAC address of the device.')
brzApplTunneling = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipx", 0), ("both", 1), ("none", 2), ("apple-talk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzApplTunneling.setStatus('mandatory')
if mibBuilder.loadTexts: brzApplTunneling.setDescription('This attribute specifies the device tunneling mode, as follows: ipx - The device will enable IPX tunneling only. apple-talk - The device will enable AppleTalk tunneling only. none - The device will disable tunneling. both - The device will enable only IPX and AppleTalk tunneling.')
brzPositiveBrg = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("reject-unknown", 1), ("forward-unknown", 2), ("intelligent", 3), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPositiveBrg.setStatus('mandatory')
if mibBuilder.loadTexts: brzPositiveBrg.setDescription('This attribute specifies the Wired to Wireless LAN bridging mode at the AP, as follows: reject-unknown - The AP forwards to the Wireless LAN only frames that are destined to associated stations. forward-unknown - The AP forwards to the Wireless LAN frames destined to associated AND unknown addresses. This value should be used only for Wireless Bridge installations. intelligent - If connected to a wireless bridge, the AP automatically activates the Forward-Unknown option. na - A not applicable value, for non-AP devices.')
brzIpFilter = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzIpFilter.setStatus('mandatory')
if mibBuilder.loadTexts: brzIpFilter.setDescription('Setting the value of this attribute to ON will cause the system to filter all non-IP traffic to the Wireless LAN. This should be used on environments where only IP (and ARP) traffic is permitted.')
brzTranslationMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzTranslationMode.setStatus('mandatory')
if mibBuilder.loadTexts: brzTranslationMode.setDescription('When this attribute is set to ON, data frames are being translated for the Wireless LAN transmission. If it is set to OFF, tunneling of data frames apply. All devices within the same Wireless LAN network, must have the same Translation Mode assigned.')
brzWIXSupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWIXSupport.setStatus('mandatory')
if mibBuilder.loadTexts: brzWIXSupport.setDescription('This attribute applies to installations with collocated APs. When it is set to ON, a load balancing algorithm is activated, resulting with balanced Basic Service Sets (cells). This option may be set only at some of the stations in the network.')
brzWlanNetID = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanNetID.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanNetID.setDescription('This attribute identifies the Wireless LAN network name (Extended Service Set ID) for that device. Stations are not allowed to associate to APs with different Net IDs.')
brzAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzAuthenticationType.setStatus('mandatory')
if mibBuilder.loadTexts: brzAuthenticationType.setDescription('This attribute indicates the authentication algorithm used during the authentication sequence. The value of this attribute is one of the following: 1 - Open System, 2 - Shared Key, 20 - Special Authentication Algorithm (#0), 21 - Special Authentication Algorithm (#1), 22 - Special Authentication Algorithm (#2).')
brzWlanRTNetID = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 31)).setFixedLength(31)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzWlanRTNetID.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanRTNetID.setDescription('This attribute identifies the run-time Wireless LAN network name (Extended Service Set ID) for that device. Stations are not allowed to associate to APs with different Net IDs.')
brzApRedundancySupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzApRedundancySupport.setStatus('mandatory')
if mibBuilder.loadTexts: brzApRedundancySupport.setDescription('Setting the value of this attribute to ON will cause the Access-Point to discontinue sending beacons to the Wireless LAN after no multicast or unicast frames for the cell arrive from the Ethernet during a period of 100 seconds. This option is available ONLY on AP (na value assigned in non-AP devices).')
brzWlanRelayUnicast = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanRelayUnicast.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanRelayUnicast.setDescription("This attribute enables the relaying of unicast frames on the WLAN within the BSS. Setting this attribute to OFF means that unicast frames received from the WLAN by the AP can only be passed to the Distribution System. Applicable only in AP's.")
brzWlanRelayBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanRelayBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanRelayBroadcast.setDescription("This attribute enables the relaying of broadcast frames on the WLAN within the BSS. Setting this attribute to OFF means that broadcast frames received from the WLAN by the AP can only be passed to the Distribution System. Applicable only in AP's.")
brzApRedundancyLimit = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzApRedundancyLimit.setStatus('mandatory')
if mibBuilder.loadTexts: brzApRedundancyLimit.setDescription('This attribute sets the time until an Access-Point discontinues sending beacons to the Wireless LAN when no multicast or unicast frames for the cell arrive from the Ethernet. This option is available ONLY on AP (na value assigned in non-AP devices).')
brzStaNumForLargeCW = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzStaNumForLargeCW.setStatus('mandatory')
if mibBuilder.loadTexts: brzStaNumForLargeCW.setDescription('This attribute sets the minimum number of stations in this cell that will cause this unit to use large CW, else this unit will use the default CW. (The value is in the range of 1-120)')
brzPowerMngMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPowerMngMode.setStatus('mandatory')
if mibBuilder.loadTexts: brzPowerMngMode.setDescription('This attribute describes the current power management mode of the station. The allowed values are ACTIVE (for normal mode of operation), and POWER SAVE. An STA will always return an ACTIVE value.')
brzACKDelayed = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzACKDelayed.setStatus('mandatory')
if mibBuilder.loadTexts: brzACKDelayed.setDescription('This attribute applies to installations with collocated APs. When it is set to ON, a load balancing algorithm is activated, resulting with balanced Basic Service Sets (cells). This option may be set only at some of the stations in the network.')
brzDTIMPperiod = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzDTIMPperiod.setStatus('mandatory')
if mibBuilder.loadTexts: brzDTIMPperiod.setDescription("This attribute defines the rate of DTIM frames. The value is expressed in Beacon Intervals. This attribute is applicable only in AP's.")
brzPowerMngBitTestMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPowerMngBitTestMode.setStatus('mandatory')
if mibBuilder.loadTexts: brzPowerMngBitTestMode.setDescription('This attribute describes the current power management bit test mode of the AP. The allowed values are DISABLED (for normal mode of operation), and ENABLED.')
brzBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzBeaconInterval.setStatus('mandatory')
if mibBuilder.loadTexts: brzBeaconInterval.setDescription(" This attribute defines the rate of Beacon frames. The value is expressed in Dwells. This attribute is applicable only in AP's.")
brzPowerSaveSupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enabled-with-pm-bit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPowerSaveSupport.setStatus('mandatory')
if mibBuilder.loadTexts: brzPowerSaveSupport.setDescription(" This attribute defines the power save support. 0 - Power Save support disabled 1 - Power Save support enabled 2 - Enable Power Save support with PM bit test This attribute is applicable only in AP's.")
brzWlanAssocAge = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanAssocAge.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanAssocAge.setDescription(' This attribute defines the Association Aging Period.')
brzEnableVoice = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzEnableVoice.setStatus('mandatory')
if mibBuilder.loadTexts: brzEnableVoice.setDescription(" This attribute Enables voice priority over other transmissions. This attribute is applicable only in AP's.")
brzNonActiveCodeState = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzNonActiveCodeState.setStatus('mandatory')
if mibBuilder.loadTexts: brzNonActiveCodeState.setDescription('This attribute displays the current non active code state. WARNING: Activate this attribute will cause substantial degradation in station throughput, also answer is delayed!!!')
brzDisplayNonActiveCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzDisplayNonActiveCodeVersion.setStatus('mandatory')
if mibBuilder.loadTexts: brzDisplayNonActiveCodeVersion.setDescription(' This attribute displays the active code version and the non active code version.')
brzIntelligentBridgingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 1, 2, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzIntelligentBridgingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: brzIntelligentBridgingPeriod.setDescription(' This attribute defines the Intelligent Bridging Period in seconds.')
ipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 2))
trapHostsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1), )
if mibBuilder.loadTexts: trapHostsTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapHostsTable.setDescription('A list of trap-hosts entries.')
trapHostsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1), ).setIndexNames((0, "BREEZECOM-MIB", "trapHostsIndex"))
if mibBuilder.loadTexts: trapHostsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapHostsEntry.setDescription('A trap-receiving host entry, containing trap-host objects for a particular host.')
trapHostsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapHostsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapHostsIndex.setDescription('A unique value for each trap-host. Its value ranges between 1 and 3')
trapIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapIPaddress.setDescription('The IP address of the host to be sent all traps')
trapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: trapCommunity.setDescription('The community of the host to be sent all traps')
ipAddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddr.setDescription('The IP address of this device, used to access the device through any of its LAN Ports (Ethernet or WLAN).')
maskIP = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maskIP.setStatus('mandatory')
if mibBuilder.loadTexts: maskIP.setDescription('The IP Network mask used by the IP entity when accessing devices through any of its LAN Ports (Ethernet or WLAN).')
readCommunity = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: readCommunity.setDescription('The device read community. If updated, it will be used after the next reset.')
writeCommunity = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: writeCommunity.setDescription('The device write community. If updated, it will be used after the next reset.')
gatewayIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: gatewayIPaddr.setDescription('Gateway default IP address.')
brzIPStack = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzIPStack.setStatus('mandatory')
if mibBuilder.loadTexts: brzIPStack.setDescription(' This attribute defines whether to use IP stack or not.')
brzWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3))
brzWlanParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1))
brzMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: brzMaxRate.setDescription('This attribute indicates the rate (in Mbits per second) at which data will be transmitted across the medium. The default value of this attribute shall be 3.')
brzMobilLvl = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzMobilLvl.setStatus('mandatory')
if mibBuilder.loadTexts: brzMobilLvl.setDescription('This attribute indicates the expected mobility level of the system. The default value of this attribute is stationary.')
brzAvrgRssi = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzAvrgRssi.setStatus('mandatory')
if mibBuilder.loadTexts: brzAvrgRssi.setDescription('A value representing the average Signal Strength for packets received from the current AP. This attribute is applicable only for a station (An AP will always return a value of 255).')
brzWlanProtocol = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanProtocol.setDescription('This attribute specifies the MAC/PHY protocol, utilized by this system. This attribute is not write accessible for regular users.')
brzWlanTrapThreashold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzWlanTrapThreashold.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanTrapThreashold.setDescription('This attribute specifies a threshold value, for sending the WlanStatusTRAP. When the Wireless LAN quality drops below (or goes above) this value, a trap will be issued.')
brzWlanQuality = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10))).clone(namedValues=NamedValues(("excellent", 1), ("good", 2), ("medium", 3), ("bad", 4), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzWlanQuality.setStatus('mandatory')
if mibBuilder.loadTexts: brzWlanQuality.setDescription('A measure for quality (and noise level) of the Wireless LAN.')
knownAPsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7), )
if mibBuilder.loadTexts: knownAPsTable.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsTable.setDescription('A table of identities of the most recently known Access Points, and their signal quality.')
knownAPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1), ).setIndexNames((0, "BREEZECOM-MIB", "knownAPsIndex"))
if mibBuilder.loadTexts: knownAPsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsEntry.setDescription('An entry in the Known APs table.')
knownAPsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsIndex.setDescription('A unique value, representing the index of the AP in the Known APs table')
knownAPsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownAPsValue.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsValue.setDescription('This attributes specifies the address of a recently known AP. The default value of this attribute shall be null (an empty entry).')
knownAPsQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("poor", 1), ("good", 2), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsQuality.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsQuality.setDescription('This attribute specifies the current reception quality of frames, transmitted by that AP. At a station, a GOOD value indicates that the station can join that AP.')
knownAPsAvrgRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsAvrgRssi.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsAvrgRssi.setDescription('A value representing the average Signal Strength for packets received from that AP in RSSI units.')
knownAPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: knownAPsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsStatus.setDescription('The validity of the current entry, either invalid or valid.')
knownAPsLoadStations = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsLoadStations.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsLoadStations.setDescription('A value representing the number of stations associated to that AP.')
knownAPsGoodBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsGoodBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsGoodBeacons.setDescription('A value representing the number of beacons received with Strength more then join level from that AP.')
knownAPsTotalBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsTotalBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsTotalBeacons.setDescription('A value representing the total number of beacons (good and bad) received from that AP.')
knownAPsAvrgDbm = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: knownAPsAvrgDbm.setStatus('mandatory')
if mibBuilder.loadTexts: knownAPsAvrgDbm.setDescription('A value representing the average Signal Strength for packets received from that AP in DBN units.')
brzLastBeacon = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzLastBeacon.setStatus('mandatory')
if mibBuilder.loadTexts: brzLastBeacon.setDescription('A value representing last dwell to receive beacon from that AP.')
brzBadBeacons = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzBadBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: brzBadBeacons.setDescription('A value representing the number of beacons received with Strength less then join level from that AP.')
brzLoadStations = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzLoadStations.setStatus('mandatory')
if mibBuilder.loadTexts: brzLoadStations.setDescription('A value representing the number of stations associated to that AP.')
brzAvrgDBm = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzAvrgDBm.setStatus('mandatory')
if mibBuilder.loadTexts: brzAvrgDBm.setDescription('A value representing the average Signal Strength for packets received from the current AP. This attribute is applicable only for a station (An AP will always return a value of -255).')
brzAP = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2))
bssInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1))
bssNumOfStations = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStations.setStatus('mandatory')
if mibBuilder.loadTexts: bssNumOfStations.setDescription('This attribute specifies the number of devices, that are currently associated with this AP.')
bssNumOfStationsPeak = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStationsPeak.setStatus('mandatory')
if mibBuilder.loadTexts: bssNumOfStationsPeak.setDescription('This attribute contains the maximum value that bssNumOfStations has reached.')
bssCollectPerStationInfo = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bssCollectPerStationInfo.setStatus('mandatory')
if mibBuilder.loadTexts: bssCollectPerStationInfo.setDescription('When this attribute is set to ON, the AP accumulates Wireless Link statistics per each station. This option is available only for the AP. At stations it is always assigned with na (Not Applicable) value. WARNING: Setting this attribute to ON can cause substantial degradation in cell throughput!!!')
bssNumOfBeaconSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfBeaconSent.setStatus('mandatory')
if mibBuilder.loadTexts: bssNumOfBeaconSent.setDescription('This attribute contains the total beacons sent counter.')
bssNumOfBeaconLost = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfBeaconLost.setStatus('mandatory')
if mibBuilder.loadTexts: bssNumOfBeaconLost.setDescription('This attribute contains the total beacons lost counter.')
bssNumOfStationsAuthenticated = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStationsAuthenticated.setStatus('mandatory')
if mibBuilder.loadTexts: bssNumOfStationsAuthenticated.setDescription('This attribute specifies the number of devices, that are currently Authenticated with this AP.')
bssNumOfStationsAuthenticatedPeak = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bssNumOfStationsAuthenticatedPeak.setStatus('mandatory')
if mibBuilder.loadTexts: bssNumOfStationsAuthenticatedPeak.setDescription('This attribute contains the maximum value that bssNumOfStationsAuthenticated has reached.')
bssApAdb = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2))
adbTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1), )
if mibBuilder.loadTexts: adbTable.setStatus('mandatory')
if mibBuilder.loadTexts: adbTable.setDescription('A table of the stations associated.')
adbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1), ).setIndexNames((0, "BREEZECOM-MIB", "stAddress"))
if mibBuilder.loadTexts: adbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adbEntry.setDescription('An entry in ADB table.')
stAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stAddress.setStatus('mandatory')
if mibBuilder.loadTexts: stAddress.setDescription('The MAC Address of the station represented by this entry in the Association Data Base')
stCFMode = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stCFMode.setStatus('mandatory')
if mibBuilder.loadTexts: stCFMode.setDescription('This attribute is set to ON if the station is in the Contention Free Polling list of the AP.')
stMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMaxRate.setStatus('mandatory')
if mibBuilder.loadTexts: stMaxRate.setDescription('This attribute indicates the maximum rate (in Mbits per second) at which that station transmits data across the Wireless medium.')
stCurTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stCurTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: stCurTxRate.setDescription('The rate currently used by the AP to transmit packets to this station')
stRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRssi.setStatus('mandatory')
if mibBuilder.loadTexts: stRssi.setDescription('A value representing the average Signal Strength for packets received from that station in RSSI units. This attribute is being updated only if sysCollectPerStationInfo is set to ON.')
stPMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("power-saved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPMMode.setStatus('mandatory')
if mibBuilder.loadTexts: stPMMode.setDescription('The current Power Management mode of this station Power saving mode enables WLAN units (such as laptops or hand-held devices) to conserve battery power. To enable this feature, first enable power saving for the AP, and then enable power saving in the SA-PCR Card.')
stTxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments.setStatus('mandatory')
if mibBuilder.loadTexts: stTxFragments.setDescription('This attribute counts the total number of fragments (including retransmissions), that were transmitted to that station over the Wireless LAN. It is updated only if sysCollectPerStationInfo is set to ON.')
stTxFragments1M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments1M.setStatus('mandatory')
if mibBuilder.loadTexts: stTxFragments1M.setDescription('This attribute counts the total number of fragments (including retransmissions), that were transmitted to that station over the Wireless LAN in 1Mbps. It is updated only if sysCollectPerStationInfo is set to ON.')
stTxFragments2M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments2M.setStatus('mandatory')
if mibBuilder.loadTexts: stTxFragments2M.setDescription('This attribute counts the total number of fragments (including retransmissions), that were transmitted to that station over the Wireless LAN in 2Mbps. It is updated only if sysCollectPerStationInfo is set to ON.')
stTxFragments3M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxFragments3M.setStatus('mandatory')
if mibBuilder.loadTexts: stTxFragments3M.setDescription('This attribute counts the total number of fragments (including retransmissions), that were transmitted to that station over the Wireless LAN in 3Mbps. It is updated only if sysCollectPerStationInfo is set to ON.')
stTxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxRetry.setStatus('mandatory')
if mibBuilder.loadTexts: stTxRetry.setDescription('This attribute counts the total number of retransmissions to that station, over the Wireless LAN. It is updated only if sysCollectPerStationInfo is set to ON.')
stTxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxDroppedPackets.setStatus('mandatory')
if mibBuilder.loadTexts: stTxDroppedPackets.setDescription('This attribute counts the number of transmit frames (data or management) to this station, that were dropped because of too many retransmissions. It is updated only if sysCollectPerStationInfo is set to ON.')
stRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRxFragments.setStatus('mandatory')
if mibBuilder.loadTexts: stRxFragments.setDescription('This attribute counts the total number of fragments (data and management) that have been received successfully from that station, through the Wireless LAN. It is updated only if sysCollectPerStationInfo is set to ON.')
stWlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("poor", 1), ("good", 2), ("unknown", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stWlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: stWlanStatus.setDescription('This attribute specifies the current reception quality of frames, transmitted by that station.')
stResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: stResetCounters.setDescription('Setting the value of this attribute to ON, will clear the station counters at the AP (clear the counters in that adbEntry). Warning: Setting the value of this attribute to ON may cause momentary degradation in performance')
stType = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sa-10", 1), ("wb-10", 2), ("sa-40", 3), ("sa-pc", 4), ("breeze-new", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stType.setStatus('mandatory')
if mibBuilder.loadTexts: stType.setDescription('This attribute identifies the device type of the station.')
stTxRetryPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxRetryPercent.setStatus('mandatory')
if mibBuilder.loadTexts: stTxRetryPercent.setDescription('This attribute calculate the retransmitted percentage, that was retransmitted to that station over the Wireless LAN.')
stReTxFragments1M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stReTxFragments1M.setStatus('mandatory')
if mibBuilder.loadTexts: stReTxFragments1M.setDescription('This attribute counts the total number of fragments, that was retransmitted to that station over the Wireless LAN in 1Mbps. It is updated only if sysCollectPerStationInfo is set to ON.')
stReTxFragments2M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stReTxFragments2M.setStatus('mandatory')
if mibBuilder.loadTexts: stReTxFragments2M.setDescription('This attribute counts the total number of fragments, that was retransmitted to that station over the Wireless LAN in 2Mbps. It is updated only if sysCollectPerStationInfo is set to ON.')
stReTxFragments3M = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stReTxFragments3M.setStatus('mandatory')
if mibBuilder.loadTexts: stReTxFragments3M.setDescription('This attribute counts the total number of fragments, that was retransmitted to that station over the Wireless LAN in 2Mbps. It is updated only if sysCollectPerStationInfo is set to ON.')
stDbm = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 2, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stDbm.setStatus('mandatory')
if mibBuilder.loadTexts: stDbm.setDescription('A value representing the average Signal Strength for packets received from that station in DBM units. This attribute is being updated only if sysCollectPerStationInfo is set to ON.')
brzSTA = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3))
brzCurrentAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzCurrentAPMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: brzCurrentAPMacAddress.setDescription('Hardware MAC address of the AP currently associated with. Available ONLY in station.')
brzLastAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzLastAPMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: brzLastAPMacAddress.setDescription('The Hardware MAC address of the last AP that the station was associated with. Available ONLY in stations.')
brzPreferredAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzPreferredAPMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: brzPreferredAPMacAddress.setDescription('The Hardware MAC address of the preferred AP, to which the station should associate when ever possible. Null value here indicates no preferences. Available ONLY in stations.')
brzRoamToAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamToAPMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: brzRoamToAPMacAddress.setDescription('Setting this attribute to a specific AP MAC address, will cause the station to roam immediately to that AP, if possible. Available ONLY for stations.')
brzCFMode = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzCFMode.setStatus('mandatory')
if mibBuilder.loadTexts: brzCFMode.setDescription("This attribute is set to ON if the station required Contention Free services from the AP (hence it is in the AP's Contention Free list). This option is available ONLY on stations. A Not Applicable value is returned for all APs.")
brzTx1MBitRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTx1MBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: brzTx1MBitRate.setDescription('Total transmitted frames in 1 MBit rate.')
brzTx2MBitRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTx2MBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: brzTx2MBitRate.setDescription('Total transmitted frames in 2 MBit rate.')
brzTx3MBitRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTx3MBitRate.setStatus('mandatory')
if mibBuilder.loadTexts: brzTx3MBitRate.setDescription('Total transmitted frames in 3 MBit rate.')
brzTotalRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 3, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTotalRetx.setStatus('mandatory')
if mibBuilder.loadTexts: brzTotalRetx.setDescription('Total Retransmitted frames including all rates.')
brzRoamParams = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4))
brzRoamDecisionWin = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamDecisionWin.setStatus('mandatory')
if mibBuilder.loadTexts: brzRoamDecisionWin.setDescription('This parameter defines a minimum number of RSSI samples which is required to make a decision about the current WLAN channel quality. A new RSSI sample arrives with each incoming frame. Available ONLY in stations.')
brzRoamDecisionNumerator = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamDecisionNumerator.setStatus('mandatory')
if mibBuilder.loadTexts: brzRoamDecisionNumerator.setDescription('This parameter defines a maximum number of RSSI samples that is allowed to be below brzRoamDecisionRSSIThreshold, among a number equal to brzRoamDecisionWin of the last arrived samples. If a number of bad samples (i.e. below brzRoamDecisionRSSIThreshold) exceeds one, which is defined by this parameter, the channel is considered as bad. Available ONLY in stations.')
brzRoamDecisionRSSIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzRoamDecisionRSSIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: brzRoamDecisionRSSIThreshold.setDescription('If an RSSI sample is bellow the value which is defined by this parameter the sample is considered as bad. Available ONLY in stations.')
brzJoinDecisionRSSIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzJoinDecisionRSSIThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: brzJoinDecisionRSSIThreshold.setDescription("A station will join a new AP only if the AP transmits with an RSSI quality above the value which is defined by this parameter. Available ONLY in stations. In AP's, this is the threshold for sending Bad WLAN Conditions traps. If a station associated with the AP is heard at an RSII level below this threshold, a Bad WLAN Conditions trap is sent by the AP.")
brzNeighboringBeacons = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNeighboringBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: brzNeighboringBeacons.setDescription("This parameters defines once in how many dwell times the AP will send a neighboring beacon. Available ONLY in AP's.")
brzNumberOfProbeResponses = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNumberOfProbeResponses.setStatus('mandatory')
if mibBuilder.loadTexts: brzNumberOfProbeResponses.setDescription('If a number of good RSSI samples coming from a neighbor is greater than or equal to this parameter the neighbor might be selected for joining.')
brzNumberOfBeaconsForDisconnect = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNumberOfBeaconsForDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: brzNumberOfBeaconsForDisconnect.setDescription('This parameter defines a maximum number of consecutive not arrived Beacons that is allowed before a disconnect decision. Available ONLY in stations.')
brzMaxNumberOfScanning = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzMaxNumberOfScanning.setStatus('mandatory')
if mibBuilder.loadTexts: brzMaxNumberOfScanning.setDescription('This parameter defines a maximum number of scanning Attempts to perform before system reset. Zero is value for non reset. Available ONLY in stations.')
brzNeighboringBeaconRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 3, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brzNeighboringBeaconRate.setStatus('mandatory')
if mibBuilder.loadTexts: brzNeighboringBeaconRate.setDescription("This parameter defines the Neighboring Beacon Rate in dwells. Zero is value for non Neighboring Beacons. Available ONLY in AP's.")
brzCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4))
brzDSCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1))
brzRxFromDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxFromDS.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxFromDS.setDescription('This attribute counts the total number of frames that have been received successfully from the Wired Distribution system.')
brzRxBadFromDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxBadFromDS.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxBadFromDS.setDescription('This attribute counts the number errored frames, received from the Wired Distribution system.')
brzRxOctetsFromDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxOctetsFromDS.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxOctetsFromDS.setDescription('This attribute counts the total number of octets that have been received successfully from the Wired Distribution system.')
brzTxToDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxToDS.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxToDS.setDescription('This attribute counts the total number of frames that have been transmitted to the Wired Distribution system.')
brzMissedFrames = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzMissedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: brzMissedFrames.setDescription('This attribute counts the total number of missed frames that have missed the transmission to the Ethernet LAN.')
brzTxOctetsToDS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxOctetsToDS.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxOctetsToDS.setDescription('This attribute counts the total number of octets that have been transmitted successfully to the Wired Distribution system.')
brzRxOctetsForwardToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxOctetsForwardToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxOctetsForwardToWlan.setDescription('This attribute counts the total number of octets that have been transmitted successfully to the Wireless LAN.')
brzRxForwardToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxForwardToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxForwardToWlan.setDescription('This attribute counts the total number of packets that have been transmitted successfully to the Wireless LAN.')
brzWlanCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2))
brzTxWlanCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1))
brzTxPacketsToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxPacketsToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxPacketsToWlan.setDescription('This attribute counts the total number of frames (data and management) that have been transmitted to the Wireless LAN.')
brzTxMSDUToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxMSDUToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxMSDUToWlan.setDescription('This attribute counts the total number of frames (data frames) that have been transmitted to the Wireless LAN.')
brzDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: brzDiscarded.setDescription('This attribute counts the number of data frames, that were internally discarded in the system, instead of being transmitted over the Wireless LAN. High values of this counter indicate either very high traffic volume, or a noisy environment that prevents Wireless transmissions.')
brzTxFragToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxFragToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxFragToWlan.setDescription('This attribute counts the total number of fragments (data and management) that have been transmitted to the Wireless LAN.')
brzRetryOnWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryOnWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRetryOnWlan.setDescription('This attribute counts the total number of retransmitted fragments, on the Wireless LAN.')
brzFailedCountOnWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzFailedCountOnWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzFailedCountOnWlan.setDescription('This attribute counts the number of frames that were dropped (not transmitted), due to the number of retransmits attempts exceeding the RetryMax value.')
brzRetryOnWlanPercent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryOnWlanPercent.setStatus('mandatory')
if mibBuilder.loadTexts: brzRetryOnWlanPercent.setDescription('This attribute calculates the percentage of number frames (to the data and management) that have been transmitted successfully Wireless LAN.')
brzRetryTxDataToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryTxDataToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRetryTxDataToWlan.setDescription('This attribute counts the total number of data frames that have been retransmitted to the Wireless LAN.')
brzRetryTxDataToWlanPercent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRetryTxDataToWlanPercent.setStatus('mandatory')
if mibBuilder.loadTexts: brzRetryTxDataToWlanPercent.setDescription('This attribute calculates the percentage of data frames that have been transmitted successfully to the Wireless LAN.')
brzTotalTxPacketsToWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTotalTxPacketsToWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzTotalTxPacketsToWlan.setDescription('This attribute counts the total number frames (data and management) that have been transmitted to the Wireless LAN.')
brzTxErrTransmitions = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15))
brzTxErrorAckTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorAckTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxErrorAckTimeOut.setDescription('This attribute counts the total number of acknowledge timeouts on the Wireless LAN.')
brzTxErrorAckCRC = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorAckCRC.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxErrorAckCRC.setDescription('This attribute counts the total number of acknowledge CRC Errors on the Wireless LAN.')
brzTxErrorNoTimeUntilHop = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorNoTimeUntilHop.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxErrorNoTimeUntilHop.setDescription('This attribute counts the total number of timeouts caused of on time until end of hop on the Wireless Cell.')
brzTxErrorUnderRunAndCTS = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorUnderRunAndCTS.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxErrorUnderRunAndCTS.setDescription('This attribute counts the total number of errors caused by HW problems (Under Run).')
brzTxErrorAbort = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorAbort.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxErrorAbort.setDescription('This attribute counts the total number of errors caused by frame abortion from Boori.')
brzTxErrorFrameReceived = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 1, 15, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTxErrorFrameReceived.setStatus('mandatory')
if mibBuilder.loadTexts: brzTxErrorFrameReceived.setDescription('This attribute counts the total number of errors caused by frame failure on the Wireless LAN.')
brzRxWlanCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2))
brzRxPacketsFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxPacketsFromWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxPacketsFromWlan.setDescription('This attribute counts the total number of frames (data and management) that have been received successfully from the Wireless LAN.')
brzRxMSDUFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxMSDUFromWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxMSDUFromWlan.setDescription('This attribute counts the total number of MSDUs (data frames) that have been received successfully from the Wireless LAN.')
brzRxFragFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxFragFromWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxFragFromWlan.setDescription('This attribute counts the number of fragments (data and management), that have been received successfully from the Wireless LAN.')
brzRxBadFragFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxBadFragFromWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxBadFragFromWlan.setDescription('This counter is incremented when an error is detected in a fragment, received from the Wireless LAN.')
brzRxDuplicateFragFromWlan = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzRxDuplicateFragFromWlan.setStatus('mandatory')
if mibBuilder.loadTexts: brzRxDuplicateFragFromWlan.setDescription('This counter is incremented when a duplicated fragment is received from the Wireless LAN.')
freqStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6), )
if mibBuilder.loadTexts: freqStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: freqStatisticsTable.setDescription('A table for the traffic statistics of each frequency.')
freqStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1), ).setIndexNames((0, "BREEZECOM-MIB", "freqStatisticsIndex"))
if mibBuilder.loadTexts: freqStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: freqStatisticsEntry.setDescription('An entry in the Frequencies Statistics table.')
freqStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freqStatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: freqStatisticsIndex.setDescription('A unique value, representing the index of the frequency in the hopping sequence table')
freqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freqNo.setStatus('mandatory')
if mibBuilder.loadTexts: freqNo.setDescription('This attributes specifies the channel number of the frequency, for which this entry accumulates the statistics.')
freqTotalReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 2, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freqTotalReceived.setStatus('mandatory')
if mibBuilder.loadTexts: freqTotalReceived.setDescription('This attribute counts the total number of frames (data and management) that have been received successfully from the Wireless LAN, in that specific frequency.')
brzRoamCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 3))
brzNumOfReassocRequests = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzNumOfReassocRequests.setStatus('mandatory')
if mibBuilder.loadTexts: brzNumOfReassocRequests.setDescription('For an AP: The number of Associations and ReAssociations requests, received since the last reset of the AP. This counter is useful for getting information about mobility activity on the BSS. For a Station: The number of Associations and ReAssociation requests issued by the station since the last reset.')
brzMngCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4))
brzMngAP = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1))
probeResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeResponseSent.setStatus('mandatory')
if mibBuilder.loadTexts: probeResponseSent.setDescription('For an AP: Number of Probe response that sent.')
probeResponseLost = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeResponseLost.setStatus('mandatory')
if mibBuilder.loadTexts: probeResponseLost.setDescription('For an AP: Number of Probe response that got lost.')
probeResponseSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeResponseSentRetx.setStatus('mandatory')
if mibBuilder.loadTexts: probeResponseSentRetx.setDescription('For an AP: Number of retransmitted Probe response frames that sent.')
probeRequestRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probeRequestRecive.setStatus('mandatory')
if mibBuilder.loadTexts: probeRequestRecive.setDescription('For an AP: Number of Probe request frames that has received.')
assocResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponseSent.setStatus('mandatory')
if mibBuilder.loadTexts: assocResponseSent.setDescription('For an AP: Number of Association response frames that sent.')
assocResponseLost = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponseLost.setStatus('mandatory')
if mibBuilder.loadTexts: assocResponseLost.setDescription('For an AP: Number of Association response frames that got lost.')
assocResponseSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponseSentRetx.setStatus('mandatory')
if mibBuilder.loadTexts: assocResponseSentRetx.setDescription('For an AP: Number of retransmitted Association response frames that sent.')
assocRequestRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRequestRecive.setStatus('mandatory')
if mibBuilder.loadTexts: assocRequestRecive.setDescription('For an AP: Number of Association request frames that has received.')
reAssocRequestRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reAssocRequestRecive.setStatus('mandatory')
if mibBuilder.loadTexts: reAssocRequestRecive.setDescription('For an AP: Number of ReAssociation request frames that has received.')
brzMngSAWB = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2))
probRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probRequestSent.setStatus('mandatory')
if mibBuilder.loadTexts: probRequestSent.setDescription('For WB or SA: Number of Probe request frames that sent.')
probResponceRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probResponceRecive.setStatus('mandatory')
if mibBuilder.loadTexts: probResponceRecive.setDescription('For WB or SA: Number of received Probe response frames.')
authRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authRequestSent.setStatus('mandatory')
if mibBuilder.loadTexts: authRequestSent.setDescription('For WB or SA: Number of Authentication request frames that sent.')
authRequestSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authRequestSentRetx.setStatus('mandatory')
if mibBuilder.loadTexts: authRequestSentRetx.setDescription('For WB or SA: Number of Retransmitted Authentication request frames that sent.')
authResponceRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authResponceRecive.setStatus('mandatory')
if mibBuilder.loadTexts: authResponceRecive.setDescription('For WB or SA: Number of received Authentication response frames.')
assocRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRequestSent.setStatus('mandatory')
if mibBuilder.loadTexts: assocRequestSent.setDescription('For WB or SA: Number of Association request frames that sent.')
assocRequestSentRetx = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocRequestSentRetx.setStatus('mandatory')
if mibBuilder.loadTexts: assocRequestSentRetx.setDescription('For WB or SA: Number of Retransmitted Association request frames that sent.')
assocResponceRecive = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 4, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assocResponceRecive.setStatus('mandatory')
if mibBuilder.loadTexts: assocResponceRecive.setDescription('For WB or SA: Number of received Association response frames.')
brzPSCnt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5))
pSFreeEntries = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSFreeEntries.setStatus('mandatory')
if mibBuilder.loadTexts: pSFreeEntries.setDescription('For an AP: Number of station free entries.')
pSInternallydiscarded = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSInternallydiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pSInternallydiscarded.setDescription('For an AP: Number of Internally Discarded frames.')
pSstations = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSstations.setStatus('mandatory')
if mibBuilder.loadTexts: pSstations.setDescription('For an AP: Number of power saved station connected to this AP.')
pSPowerSavingAged = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pSPowerSavingAged.setStatus('mandatory')
if mibBuilder.loadTexts: pSPowerSavingAged.setDescription('For an AP: Number of frames that were not transmitted due to the end of aging time.')
powreStationsTable = MibTable((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5), )
if mibBuilder.loadTexts: powreStationsTable.setStatus('mandatory')
if mibBuilder.loadTexts: powreStationsTable.setDescription('A list of trap-hosts entries.')
powreStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1), ).setIndexNames((0, "BREEZECOM-MIB", "powerSaveIndex"))
if mibBuilder.loadTexts: powreStationsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: powreStationsEntry.setDescription('A trap-receiving host entry, containing trap-host objects for a particular host.')
powerSaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: powerSaveIndex.setDescription('A unique value, representing the index of the frequency in the hopping sequence table')
powerSaveStationID = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveStationID.setStatus('mandatory')
if mibBuilder.loadTexts: powerSaveStationID.setDescription('The identifier numerator of the Station in the AP. Note : ID zero is Broadcast.')
powerSaveBuffered = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveBuffered.setStatus('mandatory')
if mibBuilder.loadTexts: powerSaveBuffered.setDescription('This attributes specifies how many messages are waiting to that Station in the AP buffers')
powerSaveAged = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveAged.setStatus('mandatory')
if mibBuilder.loadTexts: powerSaveAged.setDescription('This attributes specifies how many Stations were deleted after long time of waiting')
powerSaveSent = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveSent.setStatus('mandatory')
if mibBuilder.loadTexts: powerSaveSent.setDescription('This attributes specifies how many messages were sent to that station')
powerSaveQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 710, 3, 2, 4, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSaveQueueFull.setStatus('mandatory')
if mibBuilder.loadTexts: powerSaveQueueFull.setDescription('This attributes specifies how many messages were discarded because the queue to that station was full')
brzTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 5))
brzTrapAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapAPMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapAPMacAddr.setDescription('The MAC address of an AP')
brzTrapSTAMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapSTAMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapSTAMacAddr.setDescription('The MAC address of a station device')
brzTrapMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapMacAddress.setDescription('A STA or AP MAC address')
brzTrapRssiQuality = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapRssiQuality.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapRssiQuality.setDescription('The RSSI level of the signal received from the Access Point')
brzTrapLastRssiQuality = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapLastRssiQuality.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapLastRssiQuality.setDescription('The RSSI level of the signal received from the previous Access Point')
brzTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapIndex.setDescription('Index number for future trap implementation ')
brzTrapText = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapText.setDescription('Textual string for future trap implementation ')
brzTrapToggle = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapToggle.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapToggle.setDescription('A general ON/OFF toggle value, for the traps.')
brzTrapSTAType = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sa10", 1), ("wb10", 2), ("sa40", 3), ("sa-pc", 4), ("breeze-new", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brzTrapSTAType.setStatus('mandatory')
if mibBuilder.loadTexts: brzTrapSTAType.setDescription('This attribute identifies the device type of the station.')
brzAProamingIn = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,1)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"), ("BREEZECOM-MIB", "brzTrapSTAType"))
if mibBuilder.loadTexts: brzAProamingIn.setDescription('A trap indicating that a station has roamed into this AP. It contains the MAC address of the associated station and the device type of that station.')
brzAPassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,2)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
if mibBuilder.loadTexts: brzAPassociated.setDescription('An AP trap indicating that a new station was associated with this AP. It contains the MAC address of the associated station.')
brzAPdisassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,3)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
if mibBuilder.loadTexts: brzAPdisassociated.setDescription('An AP trap indicating that the station dis-associated itself from the AP. The trap contains the MAC address of the disassociated station.')
brzAPaging = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,4)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
if mibBuilder.loadTexts: brzAPaging.setDescription('An AP trap indicating that the station association was aged out, and removed from that AP. The trap contains the MAC address of the aging station')
brzAProamedOut = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,5)).setObjects(("BREEZECOM-MIB", "brzTrapSTAMacAddr"))
if mibBuilder.loadTexts: brzAProamedOut.setDescription('An AP trap indicating that a given station has roamed out from this AP. The trap contains the MAC address of the roamed out station')
brzAPWlanStatusap = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
if mibBuilder.loadTexts: brzAPWlanStatusap.setDescription('An AP trap, indicating a change in the Wireless media conditions. An ON value is sent when the Wireless LAN quality drops below the brzWlanTrapThreashold value. A trap with an OFF value is sent if the quality improves, exceeding the brzWlanTrapThreashold value. The Wireless LAN quality value is also being sent.')
brzWlanStatusOfStation = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,8)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
if mibBuilder.loadTexts: brzWlanStatusOfStation.setDescription('An AP trap, indicating a change in the quality of the Wireless connection, with a specific (associated) station. An ON value indicates a specially bad connection, and an OFF value is sent if the quality improves, exceeding a predetermined threshold value. The brzTrapMacAddress contains the MAC address of the applicable station.')
brzGeneralAP = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 1) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
if mibBuilder.loadTexts: brzGeneralAP.setDescription('An AP general purpose trap, for future trap implementation.')
brzWBassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 2) + (0,6)).setObjects(("BREEZECOM-MIB", "brzLastAPMacAddress"), ("BREEZECOM-MIB", "brzTrapAPMacAddr"), ("BREEZECOM-MIB", "brzTrapLastRssiQuality"), ("BREEZECOM-MIB", "brzTrapRssiQuality"))
if mibBuilder.loadTexts: brzWBassociated.setDescription(' A WB trap, indicating that the station became associated-with, or has roamed-to, another AP. The trap contains the MAC address and the average RSSI level of the new AP. If the station was roaming, the MAC address of the old AP, and the RSSI level prior to roaming, is also provided (for an association, the second address will appear as all-zeros).')
brzWBWlanStatus = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 2) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
if mibBuilder.loadTexts: brzWBWlanStatus.setDescription('A WB trap, indicating a change in the Wireless media conditions. An ON value is sent when the Wireless LAN quality drops below the brzWlanTrapThreashold value. A trap with an OFF value is sent if the quality improves, exceeding the brzWlanTrapThreashold value. The Wireless LAN quality value is also being sent.')
brzGeneralWB = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 2) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
if mibBuilder.loadTexts: brzGeneralWB.setDescription('A WB general purpose trap, for future trap implementation.')
brzSTAassociated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 3) + (0,6)).setObjects(("BREEZECOM-MIB", "brzLastAPMacAddress"), ("BREEZECOM-MIB", "brzTrapAPMacAddr"), ("BREEZECOM-MIB", "brzTrapLastRssiQuality"), ("BREEZECOM-MIB", "brzTrapRssiQuality"))
if mibBuilder.loadTexts: brzSTAassociated.setDescription(' A station trap, indicating that the station became associated-with, or has roamed-to, another AP. The trap contains the MAC address and the average RSSI level of the new AP. If the station was roaming, the MAC address of the old AP, and the RSSI level prior to roaming, is also provided (for an association, the second address will appear as all-zeros).')
brzSTAWlanStatus = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 3) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
if mibBuilder.loadTexts: brzSTAWlanStatus.setDescription('A STA trap, indicating a change in the Wireless media conditions. An ON value is sent when the Wireless LAN quality drops below the brzWlanTrapThreashold value. A trap with an OFF value is sent if the quality improves, exceeding the brzWlanTrapThreashold value. The Wireless LAN quality value is also being sent.')
brzGeneralSTA = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 3) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
if mibBuilder.loadTexts: brzGeneralSTA.setDescription('A STA general purpose trap, for future trap implementation.')
brzSA40associated = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 4) + (0,6)).setObjects(("BREEZECOM-MIB", "brzLastAPMacAddress"), ("BREEZECOM-MIB", "brzTrapAPMacAddr"), ("BREEZECOM-MIB", "brzTrapLastRssiQuality"), ("BREEZECOM-MIB", "brzTrapRssiQuality"))
if mibBuilder.loadTexts: brzSA40associated.setDescription(' A SA-40 trap, indicating that the station became associated-with, or has roamed-to, another AP. The trap contains the MAC address and the average RSSI level of the new AP. If the station was roaming, the MAC address of the old AP, and the RSSI level prior to roaming, is also provided (for an association, the second address will appear as all-zeros).')
brzSA40WlanStatus = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 4) + (0,7)).setObjects(("BREEZECOM-MIB", "brzTrapToggle"), ("BREEZECOM-MIB", "brzTrapMacAddress"))
if mibBuilder.loadTexts: brzSA40WlanStatus.setDescription('SA-40 trap, indicating a change in the Wireless media conditions. An ON value is sent when the Wireless LAN quality drops below the brzWlanTrapThreashold value. A trap with an OFF value is sent if the quality improves, exceeding the brzWlanTrapThreashold value. The Wireless LAN quality value is also being sent.')
brzGeneralSA40 = NotificationType((1, 3, 6, 1, 4, 1, 710, 4, 4) + (0,9)).setObjects(("BREEZECOM-MIB", "brzTrapIndex"), ("BREEZECOM-MIB", "brzTrapText"))
if mibBuilder.loadTexts: brzGeneralSA40.setDescription('SA-40 general purpose trap, for future trap implementation.')
brzdot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6))
dot11smt = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1))
dot11DefaultWEPKeys = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3))
dot11DefaultWEPKey1 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey1.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DefaultWEPKey1.setDescription('This attribute indicates the WEP secret key value corresponding to KeyID 1. The WEP secret key is logically WRITE-ONLY. Attempts to read this attribute shall return a string of asterisks (enter exactly 10 Hex-Decimal digits).')
dot11DefaultWEPKey2 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey2.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DefaultWEPKey2.setDescription('This attribute indicates the WEP secret key value corresponding to KeyID 2. The WEP secret key is logically WRITE-ONLY. Attempts to read this attribute shall return a string of asterisks (enter exactly 10 Hex-Decimal digits).')
dot11DefaultWEPKey3 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey3.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DefaultWEPKey3.setDescription('This attribute indicates the WEP secret key value corresponding to KeyID 3. The WEP secret key is logically WRITE-ONLY. Attempts to read this attribute shall return a string of asterisks (enter exactly 10 Hex-Decimal digits).')
dot11DefaultWEPKey4 = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DefaultWEPKey4.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DefaultWEPKey4.setDescription('This attribute indicates the WEP secret key value corresponding to KeyID 4. The WEP secret key is logically WRITE-ONLY. Attempts to read this attribute shall return a string of asterisks (enter exactly 10 Hex-Decimal digits).')
dot11PrivacyGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6))
dot11Preauthentication = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Preauthentication.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Preauthentication.setDescription('This attribute, when true, enables Preauthentication algorithm.')
dot11PrivacyOptionImplemented = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PrivacyOptionImplemented.setStatus('mandatory')
if mibBuilder.loadTexts: dot11PrivacyOptionImplemented.setDescription('This attribute, when true, shall indicate that the 802.11 WEP option is implemented.')
dot11PrivacyInvoke = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11PrivacyInvoke.setStatus('mandatory')
if mibBuilder.loadTexts: dot11PrivacyInvoke.setDescription('This attribute indicates if a special mechanism is invoked, to protect the Wireless LAN transmissions. The value is one of the following: 1 - Standard WEP, 2 - No Encryption, 20 - Special Encryption (#0), 21 - Special Encryption (#1), 22 - Special Encryption (#2)')
dot11WEPDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WEPDefaultKeyID.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WEPDefaultKeyID.setDescription('This attribute shall indicate the use of the first, second, third or fourth DefaultWEPKey when set to values of one, two, three or four.')
dot11mac = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2))
dot11OperationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1))
dot11MaxMulticastRate = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MaxMulticastRate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MaxMulticastRate.setDescription('This attribute indicates the basic rate for multicast frames.')
dot11DwellTime = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DwellTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DwellTime.setDescription("This attribute indicates the dwell time in Kilo-microsecond Allowed Values for version 5.x.x and higher are between 19..390. For older versions values are between 1 - 3. This attribute is available only in AP's.")
dot11RTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RTSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RTSThreshold.setDescription('This attribute indicates the number of bytes in an MPDU (frame), above which an RTS/CTS handshake will be performed. Setting this attribute to be larger than the maximum frame size, will prevent the RTS/CTS handshake for frames transmitted by this station.')
dot11ShortRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ShortRetryLimit.setDescription('This attribute indicates the number of retransmission attempts made, before a failure condition is indicated. Values between 0..20 .')
dot11DwellRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DwellRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DwellRetryLimit.setDescription('This attribute indicates the number of retransmission attempts made in several Dwells, before a failure condition is indicated. Values between 0..9 .')
dot11FragmentationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FragmentationThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dot11FragmentationThreshold.setDescription('This attribute specifies the current maximum size, in octets, of the MPDU that will be delivered to the PHY. A frame will be broken into fragments if its size exceeds the value of this attribute, after adding MAC header and tailors. The value is one of the following: 1 - 560 octets, 2 - 800 octets, 3 - 1518 octets.')
dot11ShortRetryLimitForVoice = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ShortRetryLimitForVoice.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ShortRetryLimitForVoice.setDescription("This attribute indicates the number of retransmission for voice attempts made, before a failure condition is indicated. Values between 0..9 . This option is only for AP's.")
dot11DwellRetryLimitForVoice = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DwellRetryLimitForVoice.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DwellRetryLimitForVoice.setDescription("This attribute indicates the number of retransmission for voice attempts made in several Dwells, before a failure condition is indicated. Values between 0..5 . This option is only for AP's.")
dot11res = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3))
dot11resAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8))
dot11ResourceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2))
dot11CurrentStationStatus = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11CurrentStationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentStationStatus.setDescription("This attribute identifies the current Station Wlan status. This attribute is not available in AP's.")
dot11TotalNumberOfAssocSinceLastReset = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TotalNumberOfAssocSinceLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TotalNumberOfAssocSinceLastReset.setDescription('This attribute identifies how many time the device Associated since startup.')
dot11manufacturerName = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerName.setStatus('mandatory')
if mibBuilder.loadTexts: dot11manufacturerName.setDescription('This attribute identifies the manufacturer of the resource.')
dot11manufacturerProductName = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductName.setStatus('mandatory')
if mibBuilder.loadTexts: dot11manufacturerProductName.setDescription('This attribute identifies the manufacturer product name of the resource.')
dot11manufacturerProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 3, 8, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11manufacturerProductVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dot11manufacturerProductVersion.setDescription("This attribute identifies the manufacturer's product version of the resource.")
dot11phy = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4))
dot11PhyOperationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 1))
dot11CurrentRegDomain = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 48, 49, 50, 55, 56, 64, 65, 72, 73, 96))).clone(namedValues=NamedValues(("ethairnet", 0), ("usa", 16), ("canada", 32), ("europe", 48), ("spain", 49), ("france", 50), ("europe-dd", 55), ("netherlands", 56), ("japan", 64), ("korea", 65), ("israel", 72), ("australia", 73), ("proprietary", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentRegDomain.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentRegDomain.setDescription('This attribute specifies the regularity domain, for the radio operation of this device. This integer contains an 8 bit value, as defined below: 00h - EthAirNet, 10h - USA, 20h - Canada, 30h - Europe, 31h - Spain, 32h - France, 37h - Europe Double Deviation, 38h - Netherlands, 40h - Japan, 41h - Korea, 48h - Israel, 49h - Australia, 60h - Proprietary. ')
dot11PhyAntennaGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 3))
dot11CurrentTxAntenna = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxAntenna.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentTxAntenna.setDescription('This attribute specifies the current antenna being used to transmit. The value is one of the following: 0 - Intelligent antennas selection, 1 - Transmitting only with antenna 1, 2 - Transmitting always with antenna 2.')
dot11PhyTxPwrGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 4))
dot11CurrentTxPwrLvl = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentTxPwrLvl.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentTxPwrLvl.setDescription('This attribute specifies the power level, currently being used to transmit data. The value is one of the following: 0 - Low, or 1 - High. ')
dot11PhyFHSSGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5))
dot11CurrentDwellTime = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentDwellTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentDwellTime.setDescription('This attribute specifies the current time, in Kilo-microseconds, that the radio operates on a single channel. The value is from 19 - 390. The same Dwell Time value should be assigned to all the devices within the same Wireless LAN network.')
dot11CurrentSet = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentSet.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentSet.setDescription('This attribute represents the current set of patterns that the device is using to determine the hop sequence. The range of values is 1 to 3, and the default is 1.')
dot11CurrentPattern = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CurrentPattern.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CurrentPattern.setDescription('This attribute represents the current pattern that the device is using to determine the hop sequence.')
dot11MultySupport = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 5))
dot11MultyRateSupport = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultyRateSupport.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MultyRateSupport.setDescription('This attribute indicates the multi cast rate support.')
dot11MultyRateDecisionWindow = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MultyRateDecisionWindow.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MultyRateDecisionWindow.setDescription('This attribute indicates the multi cast rate decision window size.')
dot11Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 6))
dot11WaitforAssociationAddress = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("use-mine", 0), ("get-from-ethernet", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WaitforAssociationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WaitforAssociationAddress.setDescription('This attribute indicates the station mac-address. 0 - Use mine 1 - Wait for update via Ethernet Available only for Stations.')
dot11JapanCallSign = MibScalar((1, 3, 6, 1, 4, 1, 710, 3, 2, 6, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11JapanCallSign.setStatus('mandatory')
if mibBuilder.loadTexts: dot11JapanCallSign.setDescription('This attribute indicates the Japan call sign string. Available only for Japan Standard.')
mibBuilder.exportSymbols("BREEZECOM-MIB", sysSetDefaults=sysSetDefaults, brzIpFilter=brzIpFilter, readCommunity=readCommunity, knownAPsStatus=knownAPsStatus, brzAProamedOut=brzAProamedOut, dot11PhyAntennaGrp=dot11PhyAntennaGrp, brzApRedundancyLimit=brzApRedundancyLimit, brzMngCnt=brzMngCnt, brzRoamParams=brzRoamParams, brzPowerMngMode=brzPowerMngMode, brzSys=brzSys, powerSaveStationID=powerSaveStationID, dot11JapanCallSign=dot11JapanCallSign, dot11PrivacyOptionImplemented=dot11PrivacyOptionImplemented, brzRxFragFromWlan=brzRxFragFromWlan, stDbm=stDbm, adbTable=adbTable, brzSTAassociated=brzSTAassociated, assocResponseSentRetx=assocResponseSentRetx, brzWlanRTNetID=brzWlanRTNetID, brzBeaconInterval=brzBeaconInterval, stTxRetryPercent=stTxRetryPercent, brzJoinDecisionRSSIThreshold=brzJoinDecisionRSSIThreshold, dot11ShortRetryLimitForVoice=dot11ShortRetryLimitForVoice, sysChangeRightsToUSER=sysChangeRightsToUSER, stReTxFragments2M=stReTxFragments2M, brzRxBadFragFromWlan=brzRxBadFragFromWlan, dot11manufacturerProductName=dot11manufacturerProductName, brzNumOfReassocRequests=brzNumOfReassocRequests, probeResponseLost=probeResponseLost, dot11PhyTxPwrGrp=dot11PhyTxPwrGrp, brzTrapSTAMacAddr=brzTrapSTAMacAddr, dot11MultySupport=dot11MultySupport, probResponceRecive=probResponceRecive, brzRetryOnWlan=brzRetryOnWlan, brzWlanRelayBroadcast=brzWlanRelayBroadcast, brzRoamToAPMacAddress=brzRoamToAPMacAddress, breezecomWB10=breezecomWB10, sysChangeRightsToINSTALLER=sysChangeRightsToINSTALLER, stCurTxRate=stCurTxRate, dot11PrivacyGrp=dot11PrivacyGrp, trapHostsIndex=trapHostsIndex, brzLastBeacon=brzLastBeacon, dot11manufacturerProductVersion=dot11manufacturerProductVersion, sysRunFromNonActiveCode=sysRunFromNonActiveCode, brzRoamDecisionWin=brzRoamDecisionWin, dot11phy=dot11phy, brzLoadStations=brzLoadStations, assocResponseSent=assocResponseSent, brzWlanNetID=brzWlanNetID, brzAvrgDBm=brzAvrgDBm, brzDisplayNonActiveCodeVersion=brzDisplayNonActiveCodeVersion, brzRoamDecisionRSSIThreshold=brzRoamDecisionRSSIThreshold, brzTxWlanCnt=brzTxWlanCnt, bssNumOfStations=bssNumOfStations, writeCommunity=writeCommunity, brzRxBadFromDS=brzRxBadFromDS, brzTxErrorUnderRunAndCTS=brzTxErrorUnderRunAndCTS, brzTxOctetsToDS=brzTxOctetsToDS, dot11MaxMulticastRate=dot11MaxMulticastRate, brzRxPacketsFromWlan=brzRxPacketsFromWlan, stType=stType, brzACKDelayed=brzACKDelayed, bssNumOfStationsPeak=bssNumOfStationsPeak, brzAPWlanStatusap=brzAPWlanStatusap, breezecom=breezecom, brzTxErrorAckCRC=brzTxErrorAckCRC, breezecomAP10=breezecomAP10, freqNo=freqNo, sysDisplayAccessRights=sysDisplayAccessRights, sysReset=sysReset, authResponceRecive=authResponceRecive, assocRequestSentRetx=assocRequestSentRetx, brzTotalRetx=brzTotalRetx, brzAProamingIn=brzAProamingIn, brzTrapSTAType=brzTrapSTAType, stReTxFragments3M=stReTxFragments3M, stWlanStatus=stWlanStatus, brzRoamDecisionNumerator=brzRoamDecisionNumerator, dot11OperationGrp=dot11OperationGrp, brzWlanProtocol=brzWlanProtocol, brzTxToDS=brzTxToDS, powerSaveAged=powerSaveAged, brzWlanTrapThreashold=brzWlanTrapThreashold, stReTxFragments1M=stReTxFragments1M, pSstations=pSstations, brzPositiveBrg=brzPositiveBrg, dot11CurrentRegDomain=dot11CurrentRegDomain, brzTxErrorNoTimeUntilHop=brzTxErrorNoTimeUntilHop, accessRights=accessRights, brzAPdisassociated=brzAPdisassociated, dot11PhyFHSSGrp=dot11PhyFHSSGrp, ipParams=ipParams, knownAPsValue=knownAPsValue, brzRxDuplicateFragFromWlan=brzRxDuplicateFragFromWlan, brzWlanRelayUnicast=brzWlanRelayUnicast, brzRetryTxDataToWlan=brzRetryTxDataToWlan, brzRxOctetsFromDS=brzRxOctetsFromDS, stTxFragments=stTxFragments, brzGeneralWB=brzGeneralWB, brzRetryOnWlanPercent=brzRetryOnWlanPercent, knownAPsTotalBeacons=knownAPsTotalBeacons, brzRxForwardToWlan=brzRxForwardToWlan, dot11CurrentTxAntenna=dot11CurrentTxAntenna, assocRequestSent=assocRequestSent, brzGeneralAP=brzGeneralAP, brzPSCnt=brzPSCnt, stResetCounters=stResetCounters, bssNumOfStationsAuthenticatedPeak=bssNumOfStationsAuthenticatedPeak, dot11RTSThreshold=dot11RTSThreshold, trapCommunity=trapCommunity, brzNumberOfBeaconsForDisconnect=brzNumberOfBeaconsForDisconnect, dot11resAttribute=dot11resAttribute, brzTrapMacAddress=brzTrapMacAddress, brzWlan=brzWlan, pSFreeEntries=pSFreeEntries, dot11MultyRateDecisionWindow=dot11MultyRateDecisionWindow, bssApAdb=bssApAdb, brzDSCnt=brzDSCnt, stTxFragments3M=stTxFragments3M, stPMMode=stPMMode, brzWBWlanStatus=brzWBWlanStatus, brzTrapIndex=brzTrapIndex, brzApplTunneling=brzApplTunneling, brzEnableVoice=brzEnableVoice, brzAPaging=brzAPaging, knownAPsEntry=knownAPsEntry, authRequestSent=authRequestSent, stCFMode=stCFMode, pSPowerSavingAged=pSPowerSavingAged, powerSaveIndex=powerSaveIndex, brzHWMacAddress=brzHWMacAddress, brzCFMode=brzCFMode, brzWlanCnt=brzWlanCnt, stTxRetry=stTxRetry, maskIP=maskIP, brzTrapLastRssiQuality=brzTrapLastRssiQuality, brzSTAWlanStatus=brzSTAWlanStatus, brzSA40WlanStatus=brzSA40WlanStatus, brzRetryTxDataToWlanPercent=brzRetryTxDataToWlanPercent, brzWlanQuality=brzWlanQuality, stTxFragments1M=stTxFragments1M, brzWBassociated=brzWBassociated, dot11WaitforAssociationAddress=dot11WaitforAssociationAddress, reAssocRequestRecive=reAssocRequestRecive, brzTxFragToWlan=brzTxFragToWlan, brzMaxRate=brzMaxRate, sysNoiseFloor=sysNoiseFloor, brzTx2MBitRate=brzTx2MBitRate, brzCnt=brzCnt, brzdot11=brzdot11, brzMngSAWB=brzMngSAWB, freqStatisticsTable=freqStatisticsTable, sysResetCounters=sysResetCounters, sysChangeRightsToTECHNICIAN=sysChangeRightsToTECHNICIAN, brzMngAP=brzMngAP, dot11manufacturerName=dot11manufacturerName, dot11DefaultWEPKey2=dot11DefaultWEPKey2, brzWlanParams=brzWlanParams, brzTrapToggle=brzTrapToggle, dot11ResourceInfo=dot11ResourceInfo, stTxFragments2M=stTxFragments2M, dot11CurrentTxPwrLvl=dot11CurrentTxPwrLvl, brzTotalTxPacketsToWlan=brzTotalTxPacketsToWlan, brzStaNumForLargeCW=brzStaNumForLargeCW, brzTx3MBitRate=brzTx3MBitRate, brzIPStack=brzIPStack, breezecomSA10=breezecomSA10, brzPowerSaveSupport=brzPowerSaveSupport, brzLastAPMacAddress=brzLastAPMacAddress, brzTxMSDUToWlan=brzTxMSDUToWlan, assocResponseLost=assocResponseLost, bssInfo=bssInfo, brzGeneralSA40=brzGeneralSA40, dot11DwellRetryLimitForVoice=dot11DwellRetryLimitForVoice, brzTxErrorFrameReceived=brzTxErrorFrameReceived, sysParams=sysParams, freqStatisticsEntry=freqStatisticsEntry, pSInternallydiscarded=pSInternallydiscarded, brzRxOctetsForwardToWlan=brzRxOctetsForwardToWlan, brzFailedCountOnWlan=brzFailedCountOnWlan, brzGeneralSTA=brzGeneralSTA, dot11PhyOperationGrp=dot11PhyOperationGrp, brzDTIMPperiod=brzDTIMPperiod, dot11DefaultWEPKey4=dot11DefaultWEPKey4, dot11ShortRetryLimit=dot11ShortRetryLimit, brzTraps=brzTraps, stRssi=stRssi, brzTrapText=brzTrapText, sysTrapCounter=sysTrapCounter, adbEntry=adbEntry, dot11DefaultWEPKeys=dot11DefaultWEPKeys, dot11mac=dot11mac, powreStationsEntry=powreStationsEntry, brzNeighboringBeaconRate=brzNeighboringBeaconRate, brznetmib=brznetmib, brzTranslationMode=brzTranslationMode, brzAvrgRssi=brzAvrgRssi, sysExternalAmplifier=sysExternalAmplifier, sysCarrierSense=sysCarrierSense, bssCollectPerStationInfo=bssCollectPerStationInfo, dot11CurrentSet=dot11CurrentSet, dot11WEPDefaultKeyID=dot11WEPDefaultKeyID, brzWlanAssocAge=brzWlanAssocAge, knownAPsGoodBeacons=knownAPsGoodBeacons, sysTrapEnable=sysTrapEnable, breezecomSA40=breezecomSA40, powreStationsTable=powreStationsTable, sysPartialDefaults=sysPartialDefaults, brzTrapAPMacAddr=brzTrapAPMacAddr, brzNumberOfProbeResponses=brzNumberOfProbeResponses, brzTxErrorAckTimeOut=brzTxErrorAckTimeOut, probeResponseSentRetx=probeResponseSentRetx, trapHostsTable=trapHostsTable, dot11DefaultWEPKey1=dot11DefaultWEPKey1, brzSTA=brzSTA, dot11TotalNumberOfAssocSinceLastReset=dot11TotalNumberOfAssocSinceLastReset, dot11res=dot11res, assocResponceRecive=assocResponceRecive, knownAPsIndex=knownAPsIndex, dot11DwellTime=dot11DwellTime, dot11CurrentPattern=dot11CurrentPattern, brzDiscarded=brzDiscarded, brzNeighboringBeacons=brzNeighboringBeacons, brzMaxNumberOfScanning=brzMaxNumberOfScanning, brzAPassociated=brzAPassociated, breezecomPrvRev=breezecomPrvRev, brzPowerMngBitTestMode=brzPowerMngBitTestMode, stAddress=stAddress, dot11CurrentDwellTime=dot11CurrentDwellTime, knownAPsLoadStations=knownAPsLoadStations, trapIPaddress=trapIPaddress, freqTotalReceived=freqTotalReceived, assocRequestRecive=assocRequestRecive, powerSaveSent=powerSaveSent, brzMissedFrames=brzMissedFrames, dot11FragmentationThreshold=dot11FragmentationThreshold, stTxDroppedPackets=stTxDroppedPackets, knownAPsQuality=knownAPsQuality, brzTxPacketsToWlan=brzTxPacketsToWlan, dot11CurrentStationStatus=dot11CurrentStationStatus, brzMobilLvl=brzMobilLvl, dot11Maintenance=dot11Maintenance, dot11smt=dot11smt, powerSaveQueueFull=powerSaveQueueFull, dot11DwellRetryLimit=dot11DwellRetryLimit, probeRequestRecive=probeRequestRecive, bssNumOfStationsAuthenticated=bssNumOfStationsAuthenticated, brzRxWlanCnt=brzRxWlanCnt, brzRoamCnt=brzRoamCnt, brzWIXSupport=brzWIXSupport, probeResponseSent=probeResponseSent, dot11Preauthentication=dot11Preauthentication, knownAPsAvrgDbm=knownAPsAvrgDbm)
mibBuilder.exportSymbols("BREEZECOM-MIB", probRequestSent=probRequestSent, knownAPsAvrgRssi=knownAPsAvrgRssi, powerSaveBuffered=powerSaveBuffered, brzTxErrTransmitions=brzTxErrTransmitions, brzWlanStatusOfStation=brzWlanStatusOfStation, stRxFragments=stRxFragments, freqStatisticsIndex=freqStatisticsIndex, brzTrapRssiQuality=brzTrapRssiQuality, sysDeltaCarrierSense=sysDeltaCarrierSense, sysChangeInstallerPassword=sysChangeInstallerPassword, brzAP=brzAP, bssNumOfBeaconLost=bssNumOfBeaconLost, brzApRedundancySupport=brzApRedundancySupport, brzNonActiveCodeState=brzNonActiveCodeState, sysCmd=sysCmd, brzTx1MBitRate=brzTx1MBitRate, breezecomOID=breezecomOID, brzTxErrorAbort=brzTxErrorAbort, dot11DefaultWEPKey3=dot11DefaultWEPKey3, brzRxMSDUFromWlan=brzRxMSDUFromWlan, authRequestSentRetx=authRequestSentRetx, brzAuthenticationType=brzAuthenticationType, dot11MultyRateSupport=dot11MultyRateSupport, brzBadBeacons=brzBadBeacons, bssNumOfBeaconSent=bssNumOfBeaconSent, brzRxFromDS=brzRxFromDS, stMaxRate=stMaxRate, MacAddress=MacAddress, gatewayIPaddr=gatewayIPaddr, brzCurrentAPMacAddress=brzCurrentAPMacAddress, ipAddr=ipAddr, brzPreferredAPMacAddress=brzPreferredAPMacAddress, brzSA40associated=brzSA40associated, dot11PrivacyInvoke=dot11PrivacyInvoke, trapHostsEntry=trapHostsEntry, knownAPsTable=knownAPsTable, brzIntelligentBridgingPeriod=brzIntelligentBridgingPeriod)
