#
# PySNMP MIB module CISCO-STACKWISE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-STACKWISE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Integer32, ObjectIdentity, TimeTicks, Counter32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter64, ModuleIdentity, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ObjectIdentity", "TimeTicks", "Counter32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter64", "ModuleIdentity", "IpAddress", "Unsigned32")
DisplayString, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "MacAddress")
ciscoStackWiseMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 500))
ciscoStackWiseMIB.setRevisions(('2016-04-16 00:00', '2015-11-24 00:00', '2011-12-12 00:00', '2010-02-01 00:00', '2008-06-10 00:00', '2005-10-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoStackWiseMIB.setRevisionsDescriptions(('Added following objects in cswGlobals - cswStackDomainNum - cswStackType - cswStackBandWidth Created following tables - cswDistrStackLinkInfoTable -cswDistrStackPhyPortInfoTable Added cswStatusGroupRev2 Deprecated cswStatusGroupRev1 Added cswDistrStackLinkStatusGroup Added cswDistrStackPhyPortStatusGroup Added cswStackWiseMIBComplianceRev4 MIB COMPLIANCE Deprecated cswStackWiseMIBComplianceRev3 MIB COMPLIANCE.', 'Added following Objects in cswSwitchInfoTable - cswSwitchPowerAllocated Added following OBJECT-GROUP - cswStackPowerAllocatedGroup Deprecated cswStackWiseMIBComplianceRev2 MODULE-COMPLIANCE. Added cswStackWiseMIBComplianceRev3 MODULE-COMPLIANCE.', "Modified 'cswSwitchRole' object.", 'Added cswStackPowerStatusGroup, cswStackPowerSwitchStatusGroup, cswStackPowerPortStatusGroup, cswStatusGroupRev1 and cswStackPowerNotificationGroup. Deprecated cswStackWiseMIBCompliance compliance statement. Added cswStackWiseMIBComplianceRev1 compliance statement. Deprecated cswStatusGroup because we deprecated cswEnableStackNotifications', "Modified 'cswSwitchState' object.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoStackWiseMIB.setLastUpdated('201604160000Z')
if mibBuilder.loadTexts: ciscoStackWiseMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoStackWiseMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dsbu@cisco.com')
if mibBuilder.loadTexts: ciscoStackWiseMIB.setDescription('This MIB module contain a collection of managed objects that apply to network devices supporting the Cisco StackWise(TM) technology. The StackWise technology provides a method for collectively utilizing a stack of switches to create a single switching unit. The data stack is used for switching data packets and, in power stack, switches are connected by special stack power cables to share power. Moreover, stackwise is the concept for combining multiple systems to give an impression of a single system so that is why both power stack and data stack are supported by single MIB. Terminology: Stack - A collection of switches connected by the Cisco StackWise technology. Master - The switch that is managing the stack. Member - A switch in the stack that is NOT the stack master. Ring - Components that makes up the connections between the switches in order to create a stack. Stackport - A special physical connector used by the ring. It is possible for a switch have more than one stackport. SDM - Switch Database Management. Stack Power - A collection of switches connected by special stack power cables to share the power of inter-connected power supplies across all switches requiring power. Stack Power is managed by a single data stack. Jack-Jack - It is a device that provides the Power Shelf capabilities required for Stack Power on the high-end. POE - Power Over Ethernet FEP - Front End Power Supply SOC - Sustained Overload Condition GLS - Graceful Load Shedding ILS - Immediate Load Shedding SRLS - System Ring Load Shedding SSLS - System Star Load Shedding')
class CswPowerStackMode(TextualConvention, Integer32):
    description = 'This textual convention is used to describe the mode of the power stack. Since the power stack could only run in either power sharing or redundant mode so this TC will also have only following valid values, powerSharing(1) :When a power stack is running in power sharing mode then all the power supplies in the power stack contributes towards the global power budget of the stack. redundant(2) :If the user wants the power stack to run in redundant mode then we will take the capacity of the largest power supply in the power stack out of power stack global power budget pool. powerSharingStrict(3):This mode is same as power sharing mode but, in this mode, the available power will always be more than the used power. redundantStrict(4) :This mode is same as redundant mode but, in this mode, the available power will always be more than the used power.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("powerSharing", 1), ("redundant", 2), ("powerSharingStrict", 3), ("redundantStrict", 4))

class CswPowerStackType(TextualConvention, Integer32):
    description = 'This textual conventions is used to describe the type of the power stack. Since the power stack could only be configured in a ring or star topology so this TC will have only following valid values, ring(1): The power stack has been formed by connecting the switches in ring topology. star(2): The power stack has been formed by connecting the switches in star topology.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ring", 1), ("star", 2))

ciscoStackWiseMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 0))
ciscoStackWiseMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1))
ciscoStackWiseMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 2))
cswGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1))
cswStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2))
cswStackPowerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3))
class CswSwitchNumber(TextualConvention, Unsigned32):
    description = 'A unique value, greater than zero, for each switch in a group of stackable switches.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CswSwitchNumberOrZero(TextualConvention, Unsigned32):
    description = 'A unique value, greater than or equal to zero, for each switch in a group of stackable switches. A value of zero means that the switch number can not be determined. The value of zero is not unique.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class CswSwitchPriority(TextualConvention, Unsigned32):
    description = 'A value, greater than or equal to zero, that defines the priority of a switch in a group of stackable switches. The higher the value, the higher the priority.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

cswMaxSwitchNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 1), CswSwitchNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswMaxSwitchNum.setStatus('current')
if mibBuilder.loadTexts: cswMaxSwitchNum.setDescription('The maximum number of switches that can be configured on this stack. This is also the maximum value that can be set by the cswSwitchNumNextReload object.')
cswMaxSwitchConfigPriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 2), CswSwitchPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswMaxSwitchConfigPriority.setStatus('current')
if mibBuilder.loadTexts: cswMaxSwitchConfigPriority.setDescription('The maximum configurable priority for a switch in this stack. Highest value equals highest priority. This is the highest value that can be set by the cswSwitchSwPriority object.')
cswRingRedundant = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswRingRedundant.setStatus('current')
if mibBuilder.loadTexts: cswRingRedundant.setDescription("A value of 'true' is returned when the stackports are connected in such a way that it forms a redundant ring.")
cswStackPowerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1), )
if mibBuilder.loadTexts: cswStackPowerInfoTable.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerInfoTable.setDescription('This table holds the information about all the power stacks in a single data stack.')
cswStackPowerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-STACKWISE-MIB", "cswStackPowerStackNumber"))
if mibBuilder.loadTexts: cswStackPowerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerInfoEntry.setDescription('An entry in the cswStackPowerInfoTable for each of the power stacks in a single data stack. This entry contains information regarding the power stack.')
cswStackPowerStackNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cswStackPowerStackNumber.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerStackNumber.setDescription('A unique value, greater than zero, to identify a power stack.')
cswStackPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 2), CswPowerStackMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerMode.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerMode.setDescription('This object specifies the information about the mode of the power stack. Power-sharing mode: All of the input power can be used for loads, and the total available power appears as one huge power supply. The power budget includes all power from all supplies. No power is set aside for power supply failures, so if a power supply fails, load shedding (shutting down of powered devices or switches) might occur. This is the default. Redundant mode: The largest power supply is removed from the power pool to be used as backup power in case one of the other power supplies fails. The available power budget is the total power minus the largest power supply. This reduces the available power in the pool for switches and powered devices to draw from, but in case of a failure or an extreme power load, there is less chance of having to shut down switches or powered devices. This is the recommended operating mode if your system has enough power. In addition, you can configure each mode to run a strict power budget or a non-strict (loose) power budget. If the mode is strict, the stack power needs cannot exceed the available power. When the power budgeted to devices reaches the maximum available PoE power, power is denied to the next device seeking power. In this mode the stack never goes into an over-budgeted power mode. When the mode is non-strict, budgeted power is allowed to exceed available power. This is normally not a problem because most devices do not run at full power and the chances of all powered devices in the stack requiring maximum power at the same time is small.')
cswStackPowerMasterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerMasterMacAddress.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerMasterMacAddress.setDescription('This object indicates the Mac address of the power stack master.')
cswStackPowerMasterSwitchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerMasterSwitchNum.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerMasterSwitchNum.setDescription('This object indicates the switch number of the power stack master. The value of this object would be zero if the power stack master is not part of this data stack.')
cswStackPowerNumMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerNumMembers.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerNumMembers.setDescription('This object indicates the number of members in the power stack.')
cswStackPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 6), CswPowerStackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerType.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerType.setDescription('This object indicates the topology of the power stack, that is, whether the switch is running in RING or STAR topology.')
cswStackPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 1, 1, 7), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerName.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerName.setDescription('This object specifies a unique name of this power stack. A zero-length string indicates no name is assigned.')
cswStackPowerPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2), )
if mibBuilder.loadTexts: cswStackPowerPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortInfoTable.setDescription('This table contains information about the stack power ports. There exists an entry in this table for each physical stack power port.')
cswStackPowerPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-STACKWISE-MIB", "cswStackPowerPortIndex"))
if mibBuilder.loadTexts: cswStackPowerPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortInfoEntry.setDescription('A conceptual row in the cswStackPowerPortInfoTable. This entry contains information about a power stack port.')
cswStackPowerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cswStackPowerPortIndex.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortIndex.setDescription('A unique value, greater than zero, for each stack power port.')
cswStackPowerPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortOperStatus.setDescription('This object is used to either set or unset the operational status of the stack port. This object will have following valid values, enabled(1) : The port is enabled disabled(2) : The port is forced down')
cswStackPowerPortNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortNeighborMacAddress.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortNeighborMacAddress.setDescription("This objects indicates the port neighbor's Mac Address.")
cswStackPowerPortNeighborSwitchNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 4), CswSwitchNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortNeighborSwitchNum.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortNeighborSwitchNum.setDescription("This objects indicates the port neighbor's switch number. If either there is no switch connected or the neighbor is not Jack-Jack then the value of this object is going to be 0.")
cswStackPowerPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortLinkStatus.setDescription('This object is used to describe the link status of the stack port. This object will have following valid values, up(1) : The port is connected and operational down(2): The port is either forced down or not connected')
cswStackPowerPortOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 6), Unsigned32()).setUnits('Amperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswStackPowerPortOverCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortOverCurrentThreshold.setDescription('This object is used to retrieve the over current threshold. The stack power cables are limited to carry current up to the limit retrieved by this object. The stack power cables would not be able to function properly if either the input or output current goes beyond the threshold retrieved by this object.')
cswStackPowerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 3, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPowerPortName.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortName.setDescription('This object specifies a unique name of the stack power port as shown on the face plate of the system. A zero-length string indicates no name is assigned.')
cswEnableStackNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswEnableStackNotifications.setStatus('deprecated')
if mibBuilder.loadTexts: cswEnableStackNotifications.setDescription("This object indicates whether the system generates the notifications defined in this MIB or not. A value of 'false' will prevent the notifications from being sent.")
cswEnableIndividualStackNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 5), Bits().clone(namedValues=NamedValues(("stackPortChange", 0), ("stackNewMaster", 1), ("stackMismatch", 2), ("stackRingRedundant", 3), ("stackNewMember", 4), ("stackMemberRemoved", 5), ("stackPowerLinkStatusChanged", 6), ("stackPowerPortOperStatusChanged", 7), ("stackPowerVersionMismatch", 8), ("stackPowerInvalidTopology", 9), ("stackPowerBudgetWarning", 10), ("stackPowerInvalidInputCurrent", 11), ("stackPowerInvalidOutputCurrent", 12), ("stackPowerUnderBudget", 13), ("stackPowerUnbalancedPowerSupplies", 14), ("stackPowerInsufficientPower", 15), ("stackPowerPriorityConflict", 16), ("stackPowerUnderVoltage", 17), ("stackPowerGLS", 18), ("stackPowerILS", 19), ("stackPowerSRLS", 20), ("stackPowerSSLS", 21), ("stackMemberToBeReloadedForUpgrade", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswEnableIndividualStackNotifications.setStatus('current')
if mibBuilder.loadTexts: cswEnableIndividualStackNotifications.setDescription('This object is used to enable/disable individual notifications defined in this MIB module. Turning on a particular bit would enable the corresponding trap and, similarly, turning off a particular bit would disable the corresponding trap. The following notifications are controlled by this object: stackPortChange(0): enables/disables cswStackPortChange notification. stackNewMaster(1): enables/disables cswStackNewMember notification. stackMismatch(2): enables/disables cswStackMismatch notification. stackRingRedundant(3): enables/disables cswStackRingRedundant notification. stackNewMember(4): enables/disables cswStackNewMember notification. stackMemberRemoved(5): enables/disables cswStackMemberRemoved notification. stackPowerLinkStatusChanged(6): enables/disables cswStackPowerPortLinkStatusChanged notification. stackPowerPortOperStatusChanged(7): enables/disables cswStackPowerPortOperStatusChanged notification. stackPowerVersionMismatch(8): enables/disables cswStackPowerVersionMismatch notification. stackPowerInvalidTopology(9): enables/disables cswStackPowerInvalidTopology notification stackPowerBudgetWarning(10): enables/disables cswStackPowerBudgetWarning notification. stackPowerInvalidInputCurrent(11): enables/disables cswStackPowerInvalidInputCurrent notification. stackPowerInvalidOutputCurrent(12): enables/disables cswStackPowerInvalidOutputCurrent notification. stackPowerUnderBudget(13): enables/disables cswStackPowerUnderBudget notification. stackPowerUnbalancedPowerSupplies(14): enables/disables cswStackPowerUnbalancedPowerSupplies notification. stackPowerInsufficientPower(15): enables/disables cswStackPowerInsufficientPower notification. stackPowerPriorityConflict(16): enables/disables cswStackPowerPriorityConflict notification. stackPowerUnderVoltage(17): enables/disables cswStackPowerUnderVoltage notification. stackPowerGLS(18): enables/disables cswStackPowerGLS notification. stackPowerILS(19): enables/disabled cswStackPowerILS notification. stackPowerSRLS(20): enables/disables cswStackPowerSRLS notification. stackPowerSSLS(21): enables/disables cswStackPowerSSLS notification. stackMemberToBeReloadedForUpgrade(22): enables/disables cswStackMemberToBeReloadedForUpgrade notification.')
cswStackDomainNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackDomainNum.setStatus('current')
if mibBuilder.loadTexts: cswStackDomainNum.setDescription('This object indicates distributed domain of the switch.Only Switches with the same domain number can be in the same dist ributed domain.0 means no switch domain configured.')
cswStackType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackType.setStatus('current')
if mibBuilder.loadTexts: cswStackType.setDescription('This object indicates type of switch stack. value of Switch virtual domain determines if switch is distributed or conventional stack. 0 means stack is conventional back side stack.')
cswStackBandWidth = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackBandWidth.setStatus('current')
if mibBuilder.loadTexts: cswStackBandWidth.setDescription('This object indicates stack bandwidth.')
cswSwitchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1), )
if mibBuilder.loadTexts: cswSwitchInfoTable.setStatus('current')
if mibBuilder.loadTexts: cswSwitchInfoTable.setDescription("This table contains information specific to switches in a stack. Every switch with an entry in the entPhysicalTable (ENTITY-MIB) whose entPhysicalClass is 'chassis' will have an entry in this table.")
cswSwitchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cswSwitchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cswSwitchInfoEntry.setDescription('A conceptual row in the cswSwitchInfoTable describing a switch information.')
cswSwitchNumCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 1), CswSwitchNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchNumCurrent.setStatus('current')
if mibBuilder.loadTexts: cswSwitchNumCurrent.setDescription("This object contains the current switch identification number. This number should match any logical labeling on the switch. For example, a switch whose interfaces are labeled 'interface #3' this value should be 3.")
cswSwitchNumNextReload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 2), CswSwitchNumberOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchNumNextReload.setStatus('current')
if mibBuilder.loadTexts: cswSwitchNumNextReload.setDescription("This object contains the cswSwitchNumCurrent to be used at next reload. The maximum value for this object is defined by the cswMaxSwitchNum object. Note: This object will contain 0 and cannot be set if the cswSwitchState value is other than 'ready'.")
cswSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("member", 2), ("notMember", 3), ("standby", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchRole.setStatus('current')
if mibBuilder.loadTexts: cswSwitchRole.setDescription('This object describes the function of the switch: master - stack master. member - active member of the stack. notMember - none-active stack member, see cswSwitchState for status. standby - stack standby switch.')
cswSwitchSwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 4), CswSwitchPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchSwPriority.setStatus('current')
if mibBuilder.loadTexts: cswSwitchSwPriority.setDescription("A number containing the priority of a switch. The switch with the highest priority will become the master. The maximum value for this object is defined by the cswMaxSwitchConfigPriority object. If after a reload the value of cswMaxSwitchConfigPriority changes to a smaller value, and the value of cswSwitchSwPriority has been previously set to a value greater or equal to the new cswMaxSwitchConfigPriority, then the SNMP agent must set cswSwitchSwPriority to the new cswMaxSwitchConfigPriority. Note: This object will contain the value of 0 if the cswSwitchState value is other than 'ready'.")
cswSwitchHwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 5), CswSwitchPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchHwPriority.setStatus('current')
if mibBuilder.loadTexts: cswSwitchHwPriority.setDescription("This object contains the hardware priority of a switch. If two or more entries in this table have the same cswSwitchSwPriority value during the master election time, the switch with the highest cswSwitchHwPriority will become the master. Note: This object will contain the value of 0 if the cswSwitchState value is other than 'ready'.")
cswSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("waiting", 1), ("progressing", 2), ("added", 3), ("ready", 4), ("sdmMismatch", 5), ("verMismatch", 6), ("featureMismatch", 7), ("newMasterInit", 8), ("provisioned", 9), ("invalid", 10), ("removed", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchState.setStatus('current')
if mibBuilder.loadTexts: cswSwitchState.setDescription("The current state of a switch: waiting - Waiting for a limited time on other switches in the stack to come online. progressing - Master election or mismatch checks in progress. added - The switch is added to the stack. ready - The switch is operational. sdmMismatch - The SDM template configured on the master is not supported by the new member. verMismatch - The operating system version running on the master is different from the operating system version running on this member. featureMismatch - Some of the features configured on the master are not supported on this member. newMasterInit - Waiting for the new master to finish initialization after master switchover (Master Re-Init). provisioned - The switch is not an active member of the stack. invalid - The switch's state machine is in an invalid state. removed - The switch is removed from the stack.")
cswSwitchMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchMacAddress.setStatus('current')
if mibBuilder.loadTexts: cswSwitchMacAddress.setDescription("The MAC address of the switch. Note: This object will contain the value of 0000:0000:0000 if the cswSwitchState value is other than 'ready'.")
cswSwitchSoftwareImage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchSoftwareImage.setStatus('current')
if mibBuilder.loadTexts: cswSwitchSoftwareImage.setDescription("The software image type running on the switch. Note: This object will contain an empty string if the cswSwitchState value is other than 'ready'.")
cswSwitchPowerBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 9), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchPowerBudget.setStatus('current')
if mibBuilder.loadTexts: cswSwitchPowerBudget.setDescription('This object indicates the power budget of the switch.')
cswSwitchPowerCommited = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 10), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchPowerCommited.setStatus('current')
if mibBuilder.loadTexts: cswSwitchPowerCommited.setDescription('This object indicates the power committed to the POE devices connected to the switch.')
cswSwitchSystemPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchSystemPowerPriority.setStatus('current')
if mibBuilder.loadTexts: cswSwitchSystemPowerPriority.setDescription("This specifies the system's power priority. In case of a power failure then the system with the highest system priority will be brought down last.")
cswSwitchPoeDevicesLowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchPoeDevicesLowPriority.setStatus('current')
if mibBuilder.loadTexts: cswSwitchPoeDevicesLowPriority.setDescription("This object specifies the priority of the system's low priority POE devices.")
cswSwitchPoeDevicesHighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cswSwitchPoeDevicesHighPriority.setStatus('current')
if mibBuilder.loadTexts: cswSwitchPoeDevicesHighPriority.setDescription("This object specifies the priority of the system's high priority POE devices. In order to avoid losing the high priority POE devices before the low priority POE devices, this object's value must be greater than value of cswSwitchPoeDevicesLowPriority.")
cswSwitchPowerAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 1, 1, 14), Unsigned32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cswSwitchPowerAllocated.setStatus('current')
if mibBuilder.loadTexts: cswSwitchPowerAllocated.setDescription('This object indicates the power committed to the POE devices connected to the switch.')
cswStackPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2), )
if mibBuilder.loadTexts: cswStackPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: cswStackPortInfoTable.setDescription('This table contains stackport specific information. There exists an entry in this table for every physical stack port that have an entry in the ifTable (IF-MIB).')
cswStackPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cswStackPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cswStackPortInfoEntry.setDescription('A conceptual row in the cswStackPortInfoTable. An entry contains information about a stackport.')
cswStackPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("forcedDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: cswStackPortOperStatus.setDescription('The state of the stackport. up - Connected and operational. down - Not connected to a neighboring switch or administrative down. forcedDown - Shut down by stack manager due to mismatch or stackport errors.')
cswStackPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 2, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswStackPortNeighbor.setStatus('current')
if mibBuilder.loadTexts: cswStackPortNeighbor.setDescription("This object contains the value of the entPhysicalIndex of the switch's chassis to which this stackport is connected to. If the stackport is not connected, the value 0 is returned.")
cswDistrStackLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3), )
if mibBuilder.loadTexts: cswDistrStackLinkInfoTable.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackLinkInfoTable.setDescription('Distributed Stack Link Information.')
cswDistrStackLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-STACKWISE-MIB", "cswDSLindex"))
if mibBuilder.loadTexts: cswDistrStackLinkInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackLinkInfoEntry.setDescription('An Entry containing information about DSL link.')
cswDSLindex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: cswDSLindex.setStatus('current')
if mibBuilder.loadTexts: cswDSLindex.setDescription('This is index of the distributed stack link with respect to each interface port')
cswDistrStackLinkBundleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackLinkBundleOperStatus.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackLinkBundleOperStatus.setDescription('The state of the stackLink. up - Connected and operational. down - Not connected or administrative down.')
cswDistrStackPhyPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4), )
if mibBuilder.loadTexts: cswDistrStackPhyPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPortInfoTable.setDescription('This table contains objects for Distributed stack Link information Table.')
cswDistrStackPhyPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-STACKWISE-MIB", "cswDSLindex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cswDistrStackPhyPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPortInfoEntry.setDescription('An Entry containing information about stack port that is part of Distributed Stack Link.')
cswDistrStackPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPort.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPort.setDescription('This object indicates the name of distributed stack port.')
cswDistrStackPhyPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPortOperStatus.setDescription('The state of the distributed stackport. up - Connected and operational. down - Not connected to a neighboring switch or administrative down.')
cswDistrStackPhyPortNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPortNbr.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPortNbr.setDescription("This object indicates the name of distributed stack port's neighbor.")
cswDistrStackPhyPortNbrsw = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 500, 1, 2, 4, 1, 4), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cswDistrStackPhyPortNbrsw.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPortNbrsw.setDescription("This object indicates the EntPhysicalIndex of the distributed stack port's neigbor switch.")
cswMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0))
cswStackPortChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-STACKWISE-MIB", "cswStackPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPortChange.setStatus('current')
if mibBuilder.loadTexts: cswStackPortChange.setDescription('This notification is generated when the state of a stack port has changed.')
cswStackNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 2)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackNewMaster.setStatus('current')
if mibBuilder.loadTexts: cswStackNewMaster.setDescription('This notification is generated when a new master has been elected. The notification will contain the cswSwitchNumCurrent object to indicate the new master ID.')
cswStackMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 3)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackMismatch.setStatus('current')
if mibBuilder.loadTexts: cswStackMismatch.setDescription('This notification is generated when a new member attempt to join the stack but was denied due to a mismatch. The cswSwitchState object will indicate the type of mismatch.')
cswStackRingRedundant = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 4)).setObjects(("CISCO-STACKWISE-MIB", "cswRingRedundant"))
if mibBuilder.loadTexts: cswStackRingRedundant.setStatus('current')
if mibBuilder.loadTexts: cswStackRingRedundant.setDescription('This notification is generated when the redundancy of the ring has changed.')
cswStackNewMember = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 5)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackNewMember.setStatus('current')
if mibBuilder.loadTexts: cswStackNewMember.setDescription('This notification is generated when a new member joins the stack.')
cswStackMemberRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 6)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackMemberRemoved.setStatus('current')
if mibBuilder.loadTexts: cswStackMemberRemoved.setDescription('This notification is generated when a member is removed from the stack.')
cswStackPowerPortLinkStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 7)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerPortLinkStatus"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerPortLinkStatusChanged.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortLinkStatusChanged.setDescription('This notification is generated when the link status of a stack power port is changed from up to down or down to up. This notification is for informational purposes only and no action is required. cswStackPowerPortLinkStatus indicates link status of the stack power ports. cswSwitchNumCurrent indicates the switch number of the system. cswStackPowerPortName specifies a unique name of the stack power port as shown on the face plate of the system.')
cswStackPowerPortOperStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 8)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerPortOperStatusChanged.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortOperStatusChanged.setDescription('This notification is generated when the operational status of a stack power port is changed from enabled to disabled or from disabled to enabled. This notification is for informational purposes only and no action is required. cswSwitchNumCurrent indicates the switch number of the system. cswStackPowerPortOperStatus indicates operational status of the stack power ports. cswStackPowerPortName specifies a unique name of the stack power port as shown on the face plate of the system.')
cswStackPowerVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 9)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerVersionMismatch.setDescription('This notification is generated when the major version of the stack power protocol is different from the other members of the power stack. Upon receiving this notification, the user should make sure that he/she is using the same software version on all the members of the same power stack. cswSwitchNumCurrent indicates the switch number of the system seeing the power stack version mismatch.')
cswStackPowerInvalidTopology = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 10)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerInvalidTopology.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerInvalidTopology.setDescription('This notification is generated when an invalid stack power topology is discovered by a switch. cswSwitchNumCurrent indicates the switch number of the system where the invalid topology is discovered.')
cscwStackPowerBudgetWarrning = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 11)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cscwStackPowerBudgetWarrning.setStatus('current')
if mibBuilder.loadTexts: cscwStackPowerBudgetWarrning.setDescription('This notification is generated when the switch power budget is more than 1000W above its power supplies rated power output. cswSwitchNumCurrent indicates the switch number of the system where the invalid power budget has been detected.')
cswStackPowerInvalidInputCurrent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 12)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOverCurrentThreshold"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerInvalidInputCurrent.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerInvalidInputCurrent.setDescription('This notification is generated when the input current in the stack power cable is over the limit of the threshold retrieved by the agent through cswStackPowerPortOverCurrentThreshold object. Upon receiving this notification, the user should add a power supply to the system whose switch number is generated with this notification. cswSwitchNumCurrent indicates the switch number of the system. cswStackPowerPortOverCurrentThreshold indicates the over current threshold of power stack cables. cswStackPowerPortName specifies a unique name of the stack power port as shown on the face plate of the system.')
cswStackPowerInvalidOutputCurrent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 13)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOverCurrentThreshold"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if mibBuilder.loadTexts: cswStackPowerInvalidOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerInvalidOutputCurrent.setDescription('This notification is generated when the output current in the stack power cable is over the limit of the threshold retrieved by the agent through cswStackPowerPortOverCurrentThreshold object. Upon receiving this notification, the user should remove a power supply from the system whose switch number is generated with this notification. cswSwitchNumCurrent indicates the switch number of the system. cswStackPowerPortOverCurrentThreshold indicates the over current threshold of power stack cables. cswStackPowerPortName specifies a unique name of the stack power port as shown on the face plate of the system.')
cswStackPowerUnderBudget = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 14)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerUnderBudget.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerUnderBudget.setDescription("This notification is generated when the switch's budget is less than maximum possible switch power consumption. cswSwitchNumCurrent indicates the switch number of the system that is running with the power budget less than the power consumption.")
cswStackPowerUnbalancedPowerSupplies = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 15)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if mibBuilder.loadTexts: cswStackPowerUnbalancedPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerUnbalancedPowerSupplies.setDescription('This notification is generated when the switch has no power supply but another switch in the same stack has more than one power supplies. cswStackPowerName specifies a unique name of the power stack where the unbalanced power supplies are detected.')
cswStackPowerInsufficientPower = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 16)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if mibBuilder.loadTexts: cswStackPowerInsufficientPower.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerInsufficientPower.setDescription("This notification is generated when the switch's power stack does not have enough power to bring up all the switches in the power stack. cswStackPowerName specifies a unique name of the power stack where insufficient power condition is detected.")
cswStackPowerPriorityConflict = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 17)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if mibBuilder.loadTexts: cswStackPowerPriorityConflict.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPriorityConflict.setDescription("This notification is generated when the switch's power priorities are conflicting with power priorities of another switch in the same power stack. cswStackPowerPortName specifies the unique name of the power stack where the conflicting power priorities are detected.")
cswStackPowerUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 18)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerUnderVoltage.setDescription('This notification is generated when the switch had an under voltage condition on last boot up. cswSwitchNumCurrent indicates the switch number of the system that was forced down with the under voltage condition.')
cswStackPowerGLS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 19)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerGLS.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerGLS.setDescription('This notification is generated when the switch had to shed loads based on a sustained over load (SOC) condition. cswSwitchNumCurrent indicates the switch number of the system that goes through graceful load shedding.')
cswStackPowerILS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 20)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerILS.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerILS.setDescription('This notification is generated when the switch had to shed loads based on power supply fail condition. cswSwitchNumCurrent indicates the switch number of the system that goes through immediate load shedding.')
cswStackPowerSRLS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 21)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerSRLS.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerSRLS.setDescription('This notification is generated when the switch had to shed loads based on loss of a system in ring topology. cswSwitchNumCurrent indicates the switch number of the system that detects the loss of system in ring topology.')
cswStackPowerSSLS = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 22)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackPowerSSLS.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerSSLS.setDescription('This notification is generated when the switch had to shed loads based on loss of a system in star topology. cswSwitchNumCurrent indicates the switch number of the system that detects the loss of system in star topology.')
cswStackMemberToBeReloadedForUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 500, 0, 0, 23)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"))
if mibBuilder.loadTexts: cswStackMemberToBeReloadedForUpgrade.setStatus('current')
if mibBuilder.loadTexts: cswStackMemberToBeReloadedForUpgrade.setDescription('This notification is generated when a member is to be reloaded for upgrade.')
cswStackWiseMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1))
cswStackWiseMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2))
cswStackWiseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 1)).setObjects(("CISCO-STACKWISE-MIB", "cswStatusGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBCompliance = cswStackWiseMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cswStackWiseMIBCompliance.setDescription('The compliance statement for entities that implement the CISCO-STACKWISE-MIB.')
cswStackWiseMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 2)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev1"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev1 = cswStackWiseMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cswStackWiseMIBComplianceRev1.setDescription('The compliance statements for entities described in CISCO-STACKWISE-MIB. Stack Power entities are added in this revision.')
cswStackWiseMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 3)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroupSup1"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev1"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev2 = cswStackWiseMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cswStackWiseMIBComplianceRev2.setDescription('The compliance statements for entities described in CISCO-STACKWISE-MIB. Stack Power entities are added in this revision.')
cswStackWiseMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 4)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroupSup1"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev1"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerAllocatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev3 = cswStackWiseMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cswStackWiseMIBComplianceRev3.setDescription('The compliance statements for entities described in CISCO-STACKWISE-MIB. Stack Power entities are added in this revision.')
cswStackWiseMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 1, 5)).setObjects(("CISCO-STACKWISE-MIB", "cswNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswNotificationGroupSup1"), ("CISCO-STACKWISE-MIB", "cswStatusGroupRev2"), ("CISCO-STACKWISE-MIB", "cswStackPowerEnableNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswDistrStackLinkStatusGroup"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerSwitchStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortStatusGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerNotificationGroup"), ("CISCO-STACKWISE-MIB", "cswStackPowerAllocatedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackWiseMIBComplianceRev4 = cswStackWiseMIBComplianceRev4.setStatus('current')
if mibBuilder.loadTexts: cswStackWiseMIBComplianceRev4.setDescription('The compliance statements for entities described in CISCO-STACKWISE-MIB. Stack Global entities are added in this revision.')
cswStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 1)).setObjects(("CISCO-STACKWISE-MIB", "cswMaxSwitchNum"), ("CISCO-STACKWISE-MIB", "cswMaxSwitchConfigPriority"), ("CISCO-STACKWISE-MIB", "cswRingRedundant"), ("CISCO-STACKWISE-MIB", "cswEnableStackNotifications"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswSwitchNumNextReload"), ("CISCO-STACKWISE-MIB", "cswSwitchRole"), ("CISCO-STACKWISE-MIB", "cswSwitchSwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchHwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchMacAddress"), ("CISCO-STACKWISE-MIB", "cswSwitchSoftwareImage"), ("CISCO-STACKWISE-MIB", "cswStackPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswStackPortNeighbor"), ("CISCO-STACKWISE-MIB", "cswStackPowerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStatusGroup = cswStatusGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cswStatusGroup.setDescription('A collection of objects that are used for control and status.')
cswNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 2)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPortChange"), ("CISCO-STACKWISE-MIB", "cswStackNewMaster"), ("CISCO-STACKWISE-MIB", "cswStackMismatch"), ("CISCO-STACKWISE-MIB", "cswStackRingRedundant"), ("CISCO-STACKWISE-MIB", "cswStackNewMember"), ("CISCO-STACKWISE-MIB", "cswStackMemberRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswNotificationGroup = cswNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cswNotificationGroup.setDescription('A collection of notifications that are required.')
cswStatusGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 3)).setObjects(("CISCO-STACKWISE-MIB", "cswMaxSwitchNum"), ("CISCO-STACKWISE-MIB", "cswMaxSwitchConfigPriority"), ("CISCO-STACKWISE-MIB", "cswRingRedundant"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswSwitchNumNextReload"), ("CISCO-STACKWISE-MIB", "cswSwitchRole"), ("CISCO-STACKWISE-MIB", "cswSwitchSwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchHwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchMacAddress"), ("CISCO-STACKWISE-MIB", "cswSwitchSoftwareImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStatusGroupRev1 = cswStatusGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cswStatusGroupRev1.setDescription('A collection of objects that are used for control and status.')
cswStackPowerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 4)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerMode"), ("CISCO-STACKWISE-MIB", "cswStackPowerMasterMacAddress"), ("CISCO-STACKWISE-MIB", "cswStackPowerMasterSwitchNum"), ("CISCO-STACKWISE-MIB", "cswStackPowerNumMembers"), ("CISCO-STACKWISE-MIB", "cswStackPowerType"), ("CISCO-STACKWISE-MIB", "cswStackPowerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerStatusGroup = cswStackPowerStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerStatusGroup.setDescription('A collection of stack power objects that are used for control and status of power stack.')
cswStackPowerSwitchStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 5)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchPowerBudget"), ("CISCO-STACKWISE-MIB", "cswSwitchPowerCommited"), ("CISCO-STACKWISE-MIB", "cswSwitchSystemPowerPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchPoeDevicesLowPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchPoeDevicesHighPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerSwitchStatusGroup = cswStackPowerSwitchStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerSwitchStatusGroup.setDescription('A collection of stack power objects that are used to track the stack power parameters of a switch.')
cswStackPowerPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 6)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortNeighborMacAddress"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortNeighborSwitchNum"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortLinkStatus"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOverCurrentThreshold"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerPortStatusGroup = cswStackPowerPortStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerPortStatusGroup.setDescription('A collection of objects that are used for control and status of stack power ports.')
cswStackPowerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 7)).setObjects(("CISCO-STACKWISE-MIB", "cswStackPowerPortLinkStatusChanged"), ("CISCO-STACKWISE-MIB", "cswStackPowerPortOperStatusChanged"), ("CISCO-STACKWISE-MIB", "cswStackPowerVersionMismatch"), ("CISCO-STACKWISE-MIB", "cswStackPowerInvalidTopology"), ("CISCO-STACKWISE-MIB", "cscwStackPowerBudgetWarrning"), ("CISCO-STACKWISE-MIB", "cswStackPowerInvalidInputCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerInvalidOutputCurrent"), ("CISCO-STACKWISE-MIB", "cswStackPowerUnderBudget"), ("CISCO-STACKWISE-MIB", "cswStackPowerUnbalancedPowerSupplies"), ("CISCO-STACKWISE-MIB", "cswStackPowerInsufficientPower"), ("CISCO-STACKWISE-MIB", "cswStackPowerPriorityConflict"), ("CISCO-STACKWISE-MIB", "cswStackPowerUnderVoltage"), ("CISCO-STACKWISE-MIB", "cswStackPowerGLS"), ("CISCO-STACKWISE-MIB", "cswStackPowerILS"), ("CISCO-STACKWISE-MIB", "cswStackPowerSRLS"), ("CISCO-STACKWISE-MIB", "cswStackPowerSSLS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerNotificationGroup = cswStackPowerNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerNotificationGroup.setDescription('A collection of notifications that are triggered whenever there is either a change in stack power object or an error is encountered.')
cswStackPowerEnableNotificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 8)).setObjects(("CISCO-STACKWISE-MIB", "cswEnableIndividualStackNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerEnableNotificationGroup = cswStackPowerEnableNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerEnableNotificationGroup.setDescription('This group contains the notification enable objects for this MIB.')
cswNotificationGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 9)).setObjects(("CISCO-STACKWISE-MIB", "cswStackMemberToBeReloadedForUpgrade"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswNotificationGroupSup1 = cswNotificationGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cswNotificationGroupSup1.setDescription('Additional notification required for data stack.')
cswStackPowerAllocatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 10)).setObjects(("CISCO-STACKWISE-MIB", "cswSwitchPowerAllocated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStackPowerAllocatedGroup = cswStackPowerAllocatedGroup.setStatus('current')
if mibBuilder.loadTexts: cswStackPowerAllocatedGroup.setDescription('A collection of objects providing the stack power allocation information of a switch.')
cswStatusGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 11)).setObjects(("CISCO-STACKWISE-MIB", "cswMaxSwitchNum"), ("CISCO-STACKWISE-MIB", "cswMaxSwitchConfigPriority"), ("CISCO-STACKWISE-MIB", "cswRingRedundant"), ("CISCO-STACKWISE-MIB", "cswSwitchNumCurrent"), ("CISCO-STACKWISE-MIB", "cswSwitchNumNextReload"), ("CISCO-STACKWISE-MIB", "cswSwitchRole"), ("CISCO-STACKWISE-MIB", "cswSwitchSwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchHwPriority"), ("CISCO-STACKWISE-MIB", "cswSwitchState"), ("CISCO-STACKWISE-MIB", "cswSwitchMacAddress"), ("CISCO-STACKWISE-MIB", "cswStackDomainNum"), ("CISCO-STACKWISE-MIB", "cswStackType"), ("CISCO-STACKWISE-MIB", "cswStackBandWidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswStatusGroupRev2 = cswStatusGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cswStatusGroupRev2.setDescription('A collection of objects that are used for control and status.')
cswDistrStackLinkStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 12)).setObjects(("CISCO-STACKWISE-MIB", "cswDistrStackLinkBundleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswDistrStackLinkStatusGroup = cswDistrStackLinkStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackLinkStatusGroup.setDescription('A collection object(s) for control and status of the distributed Stack Link.')
cswDistrStackPhyPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 500, 2, 2, 13)).setObjects(("CISCO-STACKWISE-MIB", "cswDistrStackPhyPort"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortOperStatus"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortNbr"), ("CISCO-STACKWISE-MIB", "cswDistrStackPhyPortNbrsw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cswDistrStackPhyPortStatusGroup = cswDistrStackPhyPortStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cswDistrStackPhyPortStatusGroup.setDescription('A collection of objects for control and status of the distributed stack port')
mibBuilder.exportSymbols("CISCO-STACKWISE-MIB", cswDistrStackPhyPort=cswDistrStackPhyPort, cswDistrStackLinkInfoTable=cswDistrStackLinkInfoTable, cswStackPowerPortInfoTable=cswStackPowerPortInfoTable, cswStackInfo=cswStackInfo, cswStatusGroupRev1=cswStatusGroupRev1, cswSwitchMacAddress=cswSwitchMacAddress, cswStackPowerSwitchStatusGroup=cswStackPowerSwitchStatusGroup, cscwStackPowerBudgetWarrning=cscwStackPowerBudgetWarrning, cswStackPowerPortOverCurrentThreshold=cswStackPowerPortOverCurrentThreshold, cswSwitchPoeDevicesHighPriority=cswSwitchPoeDevicesHighPriority, cswDSLindex=cswDSLindex, cswStackPowerStackNumber=cswStackPowerStackNumber, cswStackPowerInfo=cswStackPowerInfo, cswStackNewMember=cswStackNewMember, cswStackPowerInvalidInputCurrent=cswStackPowerInvalidInputCurrent, cswStackPowerEnableNotificationGroup=cswStackPowerEnableNotificationGroup, cswStackPowerInfoTable=cswStackPowerInfoTable, cswStackPowerInfoEntry=cswStackPowerInfoEntry, cswRingRedundant=cswRingRedundant, cswStackPowerPortLinkStatus=cswStackPowerPortLinkStatus, cswStackDomainNum=cswStackDomainNum, cswStackPowerPortNeighborMacAddress=cswStackPowerPortNeighborMacAddress, cswStackWiseMIBComplianceRev1=cswStackWiseMIBComplianceRev1, cswMaxSwitchConfigPriority=cswMaxSwitchConfigPriority, CswSwitchPriority=CswSwitchPriority, cswStackWiseMIBComplianceRev2=cswStackWiseMIBComplianceRev2, cswStackNewMaster=cswStackNewMaster, cswStackPortChange=cswStackPortChange, cswSwitchState=cswSwitchState, cswStackPowerPriorityConflict=cswStackPowerPriorityConflict, cswStackPowerName=cswStackPowerName, cswDistrStackPhyPortStatusGroup=cswDistrStackPhyPortStatusGroup, cswStackPowerUnderVoltage=cswStackPowerUnderVoltage, cswStackPowerPortInfoEntry=cswStackPowerPortInfoEntry, cswStackMemberToBeReloadedForUpgrade=cswStackMemberToBeReloadedForUpgrade, CswPowerStackType=CswPowerStackType, cswStackPortInfoTable=cswStackPortInfoTable, cswStackPowerInvalidTopology=cswStackPowerInvalidTopology, cswStackPowerPortStatusGroup=cswStackPowerPortStatusGroup, cswSwitchPowerCommited=cswSwitchPowerCommited, cswStackBandWidth=cswStackBandWidth, cswStackPowerStatusGroup=cswStackPowerStatusGroup, cswStackPowerMasterMacAddress=cswStackPowerMasterMacAddress, ciscoStackWiseMIB=ciscoStackWiseMIB, cswDistrStackPhyPortOperStatus=cswDistrStackPhyPortOperStatus, cswEnableStackNotifications=cswEnableStackNotifications, ciscoStackWiseMIBConform=ciscoStackWiseMIBConform, cswSwitchPowerAllocated=cswSwitchPowerAllocated, cswStackPowerInsufficientPower=cswStackPowerInsufficientPower, cswStackPowerPortNeighborSwitchNum=cswStackPowerPortNeighborSwitchNum, cswStackPowerPortName=cswStackPowerPortName, cswSwitchInfoTable=cswSwitchInfoTable, cswSwitchPoeDevicesLowPriority=cswSwitchPoeDevicesLowPriority, cswStackWiseMIBCompliances=cswStackWiseMIBCompliances, cswStackPowerPortIndex=cswStackPowerPortIndex, cswSwitchSwPriority=cswSwitchSwPriority, cswSwitchSoftwareImage=cswSwitchSoftwareImage, cswStackWiseMIBComplianceRev3=cswStackWiseMIBComplianceRev3, cswStackMismatch=cswStackMismatch, cswStackPowerType=cswStackPowerType, cswSwitchPowerBudget=cswSwitchPowerBudget, cswDistrStackLinkStatusGroup=cswDistrStackLinkStatusGroup, cswStackPowerVersionMismatch=cswStackPowerVersionMismatch, cswStackPowerSRLS=cswStackPowerSRLS, PYSNMP_MODULE_ID=ciscoStackWiseMIB, cswStackPowerNotificationGroup=cswStackPowerNotificationGroup, cswStatusGroup=cswStatusGroup, cswDistrStackPhyPortNbrsw=cswDistrStackPhyPortNbrsw, cswNotificationGroup=cswNotificationGroup, cswStackPowerGLS=cswStackPowerGLS, cswStackMemberRemoved=cswStackMemberRemoved, cswDistrStackLinkInfoEntry=cswDistrStackLinkInfoEntry, cswSwitchHwPriority=cswSwitchHwPriority, cswStackWiseMIBComplianceRev4=cswStackWiseMIBComplianceRev4, cswStackPowerInvalidOutputCurrent=cswStackPowerInvalidOutputCurrent, cswStackPowerPortLinkStatusChanged=cswStackPowerPortLinkStatusChanged, cswStackPowerPortOperStatus=cswStackPowerPortOperStatus, cswStackPowerUnderBudget=cswStackPowerUnderBudget, cswStackWiseMIBGroups=cswStackWiseMIBGroups, cswStackRingRedundant=cswStackRingRedundant, cswStackType=cswStackType, cswStackPortInfoEntry=cswStackPortInfoEntry, cswStackPortOperStatus=cswStackPortOperStatus, cswStackPowerPortOperStatusChanged=cswStackPowerPortOperStatusChanged, cswStackPowerILS=cswStackPowerILS, cswStackPowerAllocatedGroup=cswStackPowerAllocatedGroup, cswEnableIndividualStackNotifications=cswEnableIndividualStackNotifications, cswDistrStackPhyPortNbr=cswDistrStackPhyPortNbr, cswStatusGroupRev2=cswStatusGroupRev2, CswSwitchNumber=CswSwitchNumber, cswNotificationGroupSup1=cswNotificationGroupSup1, cswMIBNotifications=cswMIBNotifications, cswStackPowerMasterSwitchNum=cswStackPowerMasterSwitchNum, cswGlobals=cswGlobals, cswMaxSwitchNum=cswMaxSwitchNum, CswSwitchNumberOrZero=CswSwitchNumberOrZero, cswStackPowerMode=cswStackPowerMode, ciscoStackWiseMIBNotifs=ciscoStackWiseMIBNotifs, cswStackPortNeighbor=cswStackPortNeighbor, cswDistrStackPhyPortInfoEntry=cswDistrStackPhyPortInfoEntry, cswStackWiseMIBCompliance=cswStackWiseMIBCompliance, cswDistrStackPhyPortInfoTable=cswDistrStackPhyPortInfoTable, CswPowerStackMode=CswPowerStackMode, cswStackPowerSSLS=cswStackPowerSSLS, cswSwitchSystemPowerPriority=cswSwitchSystemPowerPriority, cswSwitchNumCurrent=cswSwitchNumCurrent, ciscoStackWiseMIBObjects=ciscoStackWiseMIBObjects, cswStackPowerNumMembers=cswStackPowerNumMembers, cswSwitchRole=cswSwitchRole, cswDistrStackLinkBundleOperStatus=cswDistrStackLinkBundleOperStatus, cswSwitchNumNextReload=cswSwitchNumNextReload, cswStackPowerUnbalancedPowerSupplies=cswStackPowerUnbalancedPowerSupplies, cswSwitchInfoEntry=cswSwitchInfoEntry)
