#
# PySNMP MIB module CTRON-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:30:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
nwIpClientServices, nwIpComponents, nwIpRouter, nwIpMibs = mibBuilder.importSymbols("CTRON-IP-ROUTER-MIB", "nwIpClientServices", "nwIpComponents", "nwIpRouter", "nwIpMibs")
nwRtrProtoSuites, = mibBuilder.importSymbols("ROUTER-OIDS", "nwRtrProtoSuites")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Integer32, Counter64, Counter32, NotificationType, TimeTicks, Bits, Gauge32, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Integer32", "Counter64", "Counter32", "NotificationType", "TimeTicks", "Bits", "Gauge32", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ctNat = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1))
ctNatConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1))
ctNatServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 2))
ctNatConnStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3))
ctNatPublicIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatPublicIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatPublicIfIndex.setDescription('This is the value of the MIB II ifindex which identifies the router port connected to the public network.')
ctNatPublicIP = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatPublicIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatPublicIP.setDescription('This is the IP address of the interface which is selected by ctNatPublicIfIndex.')
ctNatPublicMask = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatPublicMask.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatPublicMask.setDescription('This is the subnet mask of the interface which is selected by ctNatPublicIfIndex.')
ctNatMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatMaxConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatMaxConn.setDescription('This is the value of the maximum number of simultaneous connections allowed, using the Network Address Translator application. The default value is 200. Acceptable values are from 40 to 1000.')
ctNatTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatTcpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTcpTimeout.setDescription('This is the value in seconds after which an idle TCP connection will be deleted. The default value is 300. Acceptable values are from 60 to 3600.')
ctNatUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatUdpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatUdpTimeout.setDescription('This is the value in seconds after which an idle UDP connection will be deleted. The default value is 120. Acceptable values are from 60 to 3600.')
ctNatPktsL2I = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatPktsL2I.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatPktsL2I.setDescription('This is the number of packets which have been forwarded from the private network to the public network since the last reset.')
ctNatPktsI2L = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatPktsI2L.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatPktsI2L.setDescription('This is the number of packets which have been forwarded from the public network to the private network since the last reset.')
ctNatBytesL2I = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatBytesL2I.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatBytesL2I.setDescription('This is the number of bytes which have been forwarded from the private network to the public network since the last reset.')
ctNatBytesI2L = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatBytesI2L.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatBytesI2L.setDescription('This is the number of bytes which have been forwarded from the public network to the private network since the last reset.')
ctNatTcpConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTcpConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTcpConn.setDescription('This is the number of active TCP connections using the Network Address Translator application.')
ctNatUdpConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatUdpConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatUdpConn.setDescription('This is the number of active UDP connections using the Network Address Translator application.')
ctNatIcmpConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatIcmpConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatIcmpConn.setDescription('This is the number of active ICMP connections using the Network Address Translator application.')
ctNatRetries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatRetries.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatRetries.setDescription('This is the number of detected TCP retries in both directions since the last reset.')
ctNatBadSums = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatBadSums.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatBadSums.setDescription('This is the number of detected checksum errors in both directions since the last reset.')
ctNatTotalPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTotalPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTotalPkts.setDescription('This is the total number of packets by the application since the last reset.')
ctNatBadPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatBadPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatBadPkts.setDescription('This is the total number of packets detected with an invalid format since the last reset.')
ctNatResPkts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatResPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatResPkts.setDescription('This is the total number of packets detected with a reserved address since the last reset.')
ctNatTotTcpConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTotTcpConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTotTcpConn.setDescription('This is the number of TCP connections made using the Network Address Translator application since the last reset.')
ctNatTotUdpConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTotUdpConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTotUdpConn.setDescription('This is the number of UDP connections made using the Network Address Translator application since the last reset.')
ctNatTotIcmpConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTotIcmpConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTotIcmpConn.setDescription('This is the number of ICMP connections made using the Network Address Translator application since the last reset.')
ctNatConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22), )
if mibBuilder.loadTexts: ctNatConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConfigTable.setDescription('Information describing the configuration parameters for each instance of NAT.')
ctNatConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1), ).setIndexNames((0, "CTRON-NAT-MIB", "ctNatConfigId"))
if mibBuilder.loadTexts: ctNatConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConfigEntry.setDescription('A description of a single server entry.')
ctNatConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConfigId.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConfigId.setDescription('A unique value identifying an element in a sequence of groups which belong to the NAT configuration table.')
ctNatAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatAdminStatus.setDescription('Used to enable and disable the Network Address Translator method for this instance. This object must be set to enabled for the translation to occur on ctNatLocalIfIndex.')
ctNatOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("invalid-config", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatOperStatus.setDescription('Indicates the current operating status of the Network Address Translator feature.')
ctNatLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatLocalIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatLocalIfIndex.setDescription('This is the value of the MIB II ifindex which identifies the router port connected to the private network.')
ctNatLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatLocalIP.setDescription('This is the IP address of the interface which serves as the gateway for the private network. With ctNatLocalMask, it serves to define the subnet of the hosts on the network. The preferred address is 192.168.254.254, part of the class C net reserved by RFC1597.')
ctNatLocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 1, 22, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatLocalMask.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatLocalMask.setDescription('This is the subnet mask of the interface which serves as the gateway for the private network. With ctNatLocalIP, it serves to define the subnet of the hosts on the network. The preferred mask is 255.255.255.0, part of the class C net reserved by RFC1597.')
ctNatTotServerEntries = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTotServerEntries.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTotServerEntries.setDescription('This is the total number of server assignments.')
ctNatServerListTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 2, 2), )
if mibBuilder.loadTexts: ctNatServerListTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatServerListTable.setDescription('Information describing the configured parameters which designate a local device as a server.')
ctNatServerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 2, 2, 1), ).setIndexNames((0, "CTRON-NAT-MIB", "ctNatServerId"))
if mibBuilder.loadTexts: ctNatServerListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatServerListEntry.setDescription('A description of a single server entry.')
ctNatServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatServerId.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatServerId.setDescription('A unique value identifying an element in a sequence of groups which belong to the NAT Server List. This value ranges from 1 to 16.')
ctNatProxyServer = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctNatProxyServer.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatProxyServer.setDescription('A description of a proxy server assignment. The format is private IP address of the server, followed by the public port number, followed by the private port number, followed by the protocol to be handled by the server. The fields are delimited by commas. Each record must be 31 chars or less. Protocol choices are TCP and UDP.')
ctNatTotActiveConn = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatTotActiveConn.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatTotActiveConn.setDescription('This is the total number of active connections.')
ctNatConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2), )
if mibBuilder.loadTexts: ctNatConnStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsTable.setDescription('Information describing the configured parameters which designate a local device as a server.')
ctNatConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1), ).setIndexNames((0, "CTRON-NAT-MIB", "ctNatConnStatsID"))
if mibBuilder.loadTexts: ctNatConnStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsEntry.setDescription('A description of a single server entry.')
ctNatConnStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsID.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsID.setDescription('A unique value identifying an element in a sequence of active connections which belong to the NAT Connection Statistics Group.')
ctNatConnStatsForeignIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsForeignIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsForeignIP.setDescription('This is the IP address of the foreign host during this active connection.')
ctNatConnStatsLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsLocalIP.setDescription('This is the IP address of the local host during this active connection.')
ctNatConnStatsPublicPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsPublicPort.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsPublicPort.setDescription('This is the port number addressed by an external device. It is also substituted for the local port by NAT on outbound packets.')
ctNatConnStatsLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsLocalPort.setDescription("This is the local host's port for TCP or UDP for this active connection.")
ctNatConnStatsForeignPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsForeignPort.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsForeignPort.setDescription('This is the source port number used by the foreign host for this active connection.')
ctNatConnStatsOutgoingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsOutgoingPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsOutgoingPkts.setDescription('This is the number of packets that have been sent from the local net to the public net by this active connection.')
ctNatConnStatsOutgoingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsOutgoingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsOutgoingBytes.setDescription('This is the number of bytes that have been sent from the local net to the public net by this active connection.')
ctNatConnStatsIncomingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsIncomingPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsIncomingPkts.setDescription('This is the number of packets that have been sent from the public net to the local net by this active connection.')
ctNatConnStatsIncomingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsIncomingBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsIncomingBytes.setDescription('This is the number of bytes that have been sent from the public net to the local net by this active connection.')
ctNatConnStatsTimeSinceUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsTimeSinceUse.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsTimeSinceUse.setDescription('This is the time in seconds since the last packet was sent or received on this active connection.')
ctNatConnStatsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsProtocol.setDescription('This is the type of IP protocol used by this active connection. Options are 1 = ICMP, 6 = TCP and 17 = UDP.')
ctNatConnStatsTCPSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsTCPSeq.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsTCPSeq.setDescription('This is the last TCP sequence number of local host sent on this active connection.')
ctNatConnStatsTCPAck = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsTCPAck.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsTCPAck.setDescription('This is the last TCP acknowledgement number of local host sent on this active connection.')
ctNatConnStatsTCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsTCPState.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsTCPState.setDescription('This is the TCP connection state value on this active connection.')
ctNatConnStatsLocalRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsLocalRetrys.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsLocalRetrys.setDescription('This is the number of TCP retries by the local host on this active connection.')
ctNatConnStatsForeignRetrys = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsForeignRetrys.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsForeignRetrys.setDescription('This is the number of TCP retries by the foreign host on this active connection.')
ctNatConnStatsLocalChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsLocalChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsLocalChecksum.setDescription('This is the number of times checksum failed in a packet from the local host on this active connection.')
ctNatConnStatsForeignChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 3, 1, 2, 12, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctNatConnStatsForeignChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: ctNatConnStatsForeignChecksum.setDescription('This is the number of times checksum failed in a packet from the foreign host on this active connection.')
mibBuilder.exportSymbols("CTRON-NAT-MIB", ctNatRetries=ctNatRetries, ctNatBytesL2I=ctNatBytesL2I, ctNatServerListEntry=ctNatServerListEntry, ctNatProxyServer=ctNatProxyServer, ctNatResPkts=ctNatResPkts, ctNatBadPkts=ctNatBadPkts, ctNatConnStatsLocalRetrys=ctNatConnStatsLocalRetrys, ctNatServerListTable=ctNatServerListTable, ctNatConfigGroup=ctNatConfigGroup, ctNatConnStatsPublicPort=ctNatConnStatsPublicPort, ctNatServerGroup=ctNatServerGroup, ctNatConnStatsIncomingPkts=ctNatConnStatsIncomingPkts, ctNatConnStatsTCPSeq=ctNatConnStatsTCPSeq, ctNatTotServerEntries=ctNatTotServerEntries, ctNat=ctNat, ctNatConnStatsTimeSinceUse=ctNatConnStatsTimeSinceUse, ctNatTcpTimeout=ctNatTcpTimeout, ctNatPublicIfIndex=ctNatPublicIfIndex, ctNatConnStatsProtocol=ctNatConnStatsProtocol, ctNatLocalIfIndex=ctNatLocalIfIndex, ctNatTotTcpConn=ctNatTotTcpConn, ctNatLocalIP=ctNatLocalIP, ctNatConnStatsTable=ctNatConnStatsTable, ctNatPublicMask=ctNatPublicMask, ctNatConnStatsLocalPort=ctNatConnStatsLocalPort, ctNatPublicIP=ctNatPublicIP, ctNatTotIcmpConn=ctNatTotIcmpConn, ctNatConfigTable=ctNatConfigTable, ctNatPktsL2I=ctNatPktsL2I, ctNatConnStatsOutgoingBytes=ctNatConnStatsOutgoingBytes, ctNatConnStatsLocalChecksum=ctNatConnStatsLocalChecksum, ctNatConfigEntry=ctNatConfigEntry, ctNatLocalMask=ctNatLocalMask, ctNatOperStatus=ctNatOperStatus, ctNatBadSums=ctNatBadSums, ctNatConnStatsForeignRetrys=ctNatConnStatsForeignRetrys, ctNatConnStatsGroup=ctNatConnStatsGroup, ctNatPktsI2L=ctNatPktsI2L, ctNatConnStatsForeignPort=ctNatConnStatsForeignPort, ctNatAdminStatus=ctNatAdminStatus, ctNatTotalPkts=ctNatTotalPkts, ctNatServerId=ctNatServerId, ctNatUdpTimeout=ctNatUdpTimeout, ctNatTotUdpConn=ctNatTotUdpConn, ctNatUdpConn=ctNatUdpConn, ctNatTotActiveConn=ctNatTotActiveConn, ctNatConfigId=ctNatConfigId, ctNatConnStatsID=ctNatConnStatsID, ctNatConnStatsForeignIP=ctNatConnStatsForeignIP, ctNatConnStatsOutgoingPkts=ctNatConnStatsOutgoingPkts, ctNatTcpConn=ctNatTcpConn, ctNatConnStatsTCPState=ctNatConnStatsTCPState, ctNatBytesI2L=ctNatBytesI2L, ctNatConnStatsIncomingBytes=ctNatConnStatsIncomingBytes, ctNatConnStatsEntry=ctNatConnStatsEntry, ctNatConnStatsForeignChecksum=ctNatConnStatsForeignChecksum, ctNatConnStatsLocalIP=ctNatConnStatsLocalIP, ctNatMaxConn=ctNatMaxConn, ctNatConnStatsTCPAck=ctNatConnStatsTCPAck, ctNatIcmpConn=ctNatIcmpConn)
