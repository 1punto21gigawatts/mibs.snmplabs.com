#
# PySNMP MIB module NQA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NQA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
HWDot1agCfmIngressActionFieldValue, HWDot1agCfmRelayActionFieldValue, HWDot1agCfmEgressActionFieldValue = mibBuilder.importSymbols("HUAWEI-ETHOAM-MIB", "HWDot1agCfmIngressActionFieldValue", "HWDot1agCfmRelayActionFieldValue", "HWDot1agCfmEgressActionFieldValue")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
Dot1agCfmMaintDomainName, Dot1agCfmMaintAssocName, Dot1agCfmMepIdOrZero = mibBuilder.importSymbols("IEEE802171-CFM-MIB", "Dot1agCfmMaintDomainName", "Dot1agCfmMaintAssocName", "Dot1agCfmMepIdOrZero")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, TimeTicks, NotificationType, Integer32, NotificationGroup, ModuleIdentity, Unsigned32, mib_2, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, MibIdentifier, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "TimeTicks", "NotificationType", "Integer32", "NotificationGroup", "ModuleIdentity", "Unsigned32", "mib-2", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "MibIdentifier", "iso", "ObjectIdentity")
TimeInterval, MacAddress, TextualConvention, DateAndTime, TruthValue, RowStatus, DisplayString, StorageType, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "MacAddress", "TextualConvention", "DateAndTime", "TruthValue", "RowStatus", "DisplayString", "StorageType", "TimeStamp")
nqa = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111))
if mibBuilder.loadTexts: nqa.setLastUpdated('200601091739Z')
if mibBuilder.loadTexts: nqa.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: nqa.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: nqa.setDescription('HUAWEI service quality detect funcion.')
class NqaType(TextualConvention, Integer32):
    description = 'Select test type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))
    namedValues = NamedValues(("unknown", 0), ("tcpConnect", 1), ("udpEcho", 2), ("httpAppl", 3), ("ftpAppl", 4), ("jitterAppl", 5), ("icmpAppl", 6), ("snmpAppl", 7), ("traceRoute", 8), ("lspPing", 9), ("lspTraceRoute", 10), ("dnsAppl", 11), ("dhcpAppl", 12), ("dlswAppl", 13), ("pwe3Ping", 14), ("pwe3Tracert", 15), ("mPing", 16), ("mTracert", 17), ("macPing", 18), ("macTunnelPing", 19), ("lspJitter", 20), ("pathMtu", 21), ("icmpJitter", 22), ("pathJitter", 23), ("pppoe", 24), ("vplsmPing", 25), ("vplsmacPing", 26), ("vplsmacTrace", 27), ("vplsMTrace", 28), ("gmacping", 29), ("gmactrace", 30), ("mactrace", 31), ("vplspwping", 32), ("vplspwtrace", 33))

class EnableValue(TextualConvention, Integer32):
    description = 'Represents a boolean value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class NqaDistanceNodeType(TextualConvention, Integer32):
    description = 'Selection of destination addresses when MACPing is performed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("macAddress", 1), ("mepID", 2))

class HWLldpPortIdSubtype(TextualConvention, Integer32):
    description = 'LLDP interface ID sub type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("interfaceAlias", 1), ("portComponent", 2), ("macAddress", 3), ("networkAddress", 4), ("interfaceName", 5), ("agentCircuitId", 6), ("local", 7))

class HWLldpPortId(TextualConvention, OctetString):
    description = "This TC describes the format of a port identifier string. Objects of this type are always used with an associated LldpPortIdSubtype object, which identifies the format of the particular LldpPortId object instance. If the associated LldpPortIdSubtype object has a value of 'interfaceAlias(1)', then the octet string identifies a particular instance of the ifAlias object (defined in IETF RFC 2863). If the particular ifAlias object does not contain any values, another port identifier type should be used. If the associated LldpPortIdSubtype object has a value of 'portComponent(2)', then the octet string identifies a particular instance of the entPhysicalAlias object (defined in IETF RFC 2737) for a port or backplane component. If the associated LldpPortIdSubtype object has a value of 'macAddress(3)', then this string identifies a particular unicast source address (encoded in network byte order and IEEE 802.3 canonical bit order) associated with the port (IEEE Std 802-2001). If the associated LldpPortIdSubtype object has a value of 'networkAddress(4)', then this string identifies a network address associated with the port. The first octet contains the IANA AddressFamilyNumbers enumeration value for the specific address type, and octets 2 through N contain the networkAddress address value in network byte order. If the associated LldpPortIdSubtype object has a value of 'interfaceName(5)', then the octet string identifies a particular instance of the ifName object (defined in IETF RFC 2863). If the particular ifName object does not contain any values, another port identifier type should be used. If the associated LldpPortIdSubtype object has a value of 'agentCircuitId(6)', then this string identifies a agent-local identifier of the circuit (defined in RFC 3046). If the associated LldpPortIdSubtype object has a value of 'local(7)', then this string identifies a locally assigned port ID."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class NqaOperation(TextualConvention, Integer32):
    description = 'Paras for specified test.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("noOperation", 1), ("httpGet", 2), ("httpPost", 3), ("ftpGet", 4), ("ftpPut", 5))

nqaBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1))
nqaVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVersion.setStatus('current')
if mibBuilder.loadTexts: nqaVersion.setDescription('The NQA version (for example, 1.1). It can be used for version management.')
nqaEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 2), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaEnable.setStatus('current')
if mibBuilder.loadTexts: nqaEnable.setDescription('Indicates the switch of enabling NQA client. (The value range: enable:1; disable:2.The default value is enable(1))')
nqaReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 3), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaReset.setStatus('current')
if mibBuilder.loadTexts: nqaReset.setDescription('Clears all the enabled test configurations. (The value range: enable:1; disable:2. The default value is disable(2))')
nqaTimeOfLastSetError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaTimeOfLastSetError.setStatus('current')
if mibBuilder.loadTexts: nqaTimeOfLastSetError.setDescription('The time of the last configuration error. (0 indicates that the configuration does not fail).')
nqaLastSetError = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaLastSetError.setStatus('current')
if mibBuilder.loadTexts: nqaLastSetError.setDescription('The time of the last configuration error. (0 indicates that the configuration does not fail).')
nqaNumOfCurrentCtrlEntry = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaNumOfCurrentCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: nqaNumOfCurrentCtrlEntry.setDescription('The total number of current configuration tests.')
nqaMaxConcurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 7), Unsigned32()).setUnits('requests').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaMaxConcurrentRequests.setStatus('current')
if mibBuilder.loadTexts: nqaMaxConcurrentRequests.setDescription('The maximum number of concurrent active requests that are allowed within an agent implementation.')
nqaMaxNumOfRequests = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 8), Unsigned32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMaxNumOfRequests.setStatus('current')
if mibBuilder.loadTexts: nqaMaxNumOfRequests.setDescription('The maximum number of requests that are allowed within an agent implementation. ')
nqaJitterVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaJitterVersion.setStatus('current')
if mibBuilder.loadTexts: nqaJitterVersion.setDescription('Selects the version of jitter test. (The value range: old version:1, new version:2. The default value is old version(1))')
nqaSupportTestType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 10), Bits().clone(namedValues=NamedValues(("icmp", 0), ("tcp", 1), ("udp", 2), ("http", 3), ("ftp", 4), ("jitter", 5), ("snmp", 6), ("trace", 7), ("lspPing", 8), ("lspTrace", 9), ("dns", 10), ("dhcp", 11), ("dlsw", 12), ("pwe3Ping", 13), ("pwe3Trace", 14), ("mPing", 15), ("mTrace", 16), ("macPing", 17), ("macTunnelPing", 18), ("lspJitter", 19), ("icmpJitter", 20), ("pathJitter", 21), ("pathMtu", 22), ("pppoe", 23), ("vplsmPing", 24), ("vplsmacPing", 25), ("vplsmacTrace", 26), ("vplsMTrace", 27), ("gmacping", 28), ("gmactrace", 29), ("mactrace", 30), ("vplspwping", 31), ("vplspwtrace", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaSupportTestType.setStatus('current')
if mibBuilder.loadTexts: nqaSupportTestType.setDescription("Test type that the current device supports. Data structure of the type is in the format of bits. Each bit represents a test type. The mappings between bits and tests are as follows: icmp(0), tcp(1), udp(2), http(3), ftp(4), jitter(5), snmp(6), trace(7), lspPing(8), lspTrace(9), dns(10), dhcp(11), dlsw(12), pwe3Ping(13), pwe3Trace(14), mPing(15), mTrace(16), macPing(17), macTunnelPing(18), lspJitter(19), icmpJitter(20), pathJitter(21), pathMtu(22), pppoe(23), vplsmPing(24), vplsmacPing(25), vplsmacTrace(26), vplsMTrace(27), gmacping(28), gmactrace(29), mactrace(30), vplspwping(31), vplspwtrace(32) The value #0x00 indicates don't suppourt all testtypes.")
nqaSupportServerType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 1, 11), Bits().clone(namedValues=NamedValues(("tcpServer", 0), ("udpServer", 1), ("icmpServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaSupportServerType.setStatus('current')
if mibBuilder.loadTexts: nqaSupportServerType.setDescription("Test type that the current device supports. Data structure of the type is in the format of bits. Each bit represents a test type. tcpServer(0), udpServer(1), icmpServer(2) The value #0x00 indicates don't suppourt all servertypes.")
nqaCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2))
nqaAdminCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1), )
if mibBuilder.loadTexts: nqaAdminCtrlTable.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlTable.setDescription('A table of NQA monitoring definitions.')
nqaAdminCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"))
if mibBuilder.loadTexts: nqaAdminCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlEntry.setDescription('Defines an entry in the nqaAdminCtrlTable.')
nqaAdminCtrlOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: nqaAdminCtrlOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlOwnerIndex.setDescription("To facilitate the provisioning of access control by a security administrator using the View-Based Access Control Model for tables in which multiple users may need to independently create or modify entries, the initial index is used as an 'ownerindex'. When used in conjunction with such a security policy all entries in the table belonging to a particular user (or group) will have the same value for this initial index. For a given user's entries in a particular table, the object identifiers for the information in these entries will have the same subidentifiers (except for the 'column' subidentifier) up to the end of the encoded owner index.")
nqaAdminCtrlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: nqaAdminCtrlTestName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlTestName.setDescription('The name of a test. This is locally unique, within the scope of an nqaAdminCtrlOwnerIndex.')
nqaAdminCtrlTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlTag.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlTag.setDescription('A string which is the description of the test instance.')
nqaAdminCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 4), NqaType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlType.setDescription('The type of the test instance.')
nqaAdminCtrlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 5), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlFrequency.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlFrequency.setDescription('Specifies the interval when the test instance repeats.')
nqaAdminCtrlTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlTimeOut.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlTimeOut.setDescription('Specifies the duration to wait for the completion of test instance. The default value of DHCP-type and FTP-type test instance is 15s, The default value of PPPoE-type test instance is 30s, and that of other types is 3s.')
nqaAdminCtrlThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlThreshold1.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlThreshold1.setDescription('Represents the threshold of RTD (Round Trip Delay). If the RTT violates the threshold, the corresponding counter will increase. It applies to any type of test instance.')
nqaAdminCtrlThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 8), Integer32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlThreshold2.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlThreshold2.setDescription('Represents the threshold of OWD (One Way Delay) from source to destination. If the OWD violates the threshold, the corresponding counter will increase. It applies only to jitter-type test instances.')
nqaAdminCtrlThreshold3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 9), Integer32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlThreshold3.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlThreshold3.setDescription('Represents the threshold of OWD (One Way Delay) from destination to source. If the OWD violates the threshold, the corresponding counter will increase. It applies only to jitter-type test instances.')
nqaAdminCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAdminCtrlStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: nqaAdminCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: nqaAdminCtrlStatus.setDescription("To set the value of this object can create or delete the specified test instance and the records belonging to it. Before deleting a test instance, the custom must make sure that the status of the test instance is inactive through nqaScheduleOperStatus. The value can be set to 'CreateAndGo (4)', 'Destroy (6)' and 'Active (1)'.")
nqaAdminParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2), )
if mibBuilder.loadTexts: nqaAdminParaTable.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTable.setDescription('Set parameter for a test. ')
nqaAdminParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"))
if mibBuilder.loadTexts: nqaAdminParaEntry.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaEntry.setDescription('set parameter in the nqaAdminParaTable.')
nqaAdminParaTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 1), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTargetAddressType.setDescription('Represents the address type of destination.')
nqaAdminParaTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTargetAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTargetAddress.setDescription('Represents the address of destination.')
nqaAdminParaTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 3), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTargetPort.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTargetPort.setDescription('Represents the port number of destination.')
nqaAdminParaSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaSourceAddressType.setDescription('Represents the address type of source.')
nqaAdminParaSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaSourceAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaSourceAddress.setDescription('Represents the address of source.')
nqaAdminParaSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 6), InetPortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaSourcePort.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaSourcePort.setDescription('Represents the port number of source.')
nqaAdminParaMaxTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('time-to-live value').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMaxTtl.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMaxTtl.setDescription('Specifies the maximum value of TTL. The value cannot be set to 0 unless the test-type is pwe3ping, the lsp-version is rfc4379, and the ttl-copymode is pipe.')
nqaAdminParaInitialTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaInitialTtl.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaInitialTtl.setDescription('Specifies the initial value of TTL.')
nqaAdminParaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaStorageType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
nqaAdminParaMaxFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setUnits('timeouts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMaxFailures.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMaxFailures.setDescription('The value of this object indicates the maximum number of consecutive timeouts allowed before terminating a remote traceroute request. A value of 255 (maximum hop count/possible TTL value) indicates that the function of terminating a remote traceroute request when a specific number of successive timeouts are detected is disabled.')
nqaAdminParaDontFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDontFragment.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDontFragment.setDescription("This object enables setting of Don't Fragment (DF) flag in the IP header for a probe. Use of this object enables performing a manual PATH MTU test.")
nqaAdminParaDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 12), Unsigned32()).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDataSize.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDataSize.setDescription('The size of data field in packet.')
nqaAdminParaDataFill = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 13), OctetString().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDataFill.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDataFill.setDescription('Represents the characters used for filling the data field. This object is used together with the corresponding object, nqaAdminParaDataSize.')
nqaAdminParaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaIfIndex.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaIfIndex.setDescription('Specified the source interface or tunnel, from which probes of the test instance are sent. The object applies to DHCP, jitter, icmpjitter, ICMP, lspping or lsptrace type test instance. The value zero implies that the object is disabled.')
nqaAdminParaByPassRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaByPassRouteTable.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaByPassRouteTable.setDescription('The purpose of this object is to optionally enable bypassing the route table. If enabled, the remote host will bypass the normal routing tables and send directly to a host on an attached network. If the host is not on a directly-attached network, an error is returned. This option can be used to perform the ping/traceroute operation to a local host through an interface that has no route defined (e.g., after the interface was dropped by routed).')
nqaAdminParaMiscOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 16), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMiscOptions.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMiscOptions.setDescription('Enables an application to specify implementation dependent options.')
nqaAdminParaProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setUnits('probes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaProbeCount.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaProbeCount.setDescription('Specifies the number of packets sent by the test instance, or times of probe repeated, in which may send several packets. The second case applies to jitter-type test instances.')
nqaAdminParaTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 18), Bits().clone(namedValues=NamedValues(("probeFailure", 0), ("testFailure", 1), ("testCompletion", 2), ("overRtdThreshold", 3), ("overOwdThresholdSd", 4), ("overOwdThresholdDs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTrapGeneration.setDescription("Switch of notification. Determine whether and how to send notifications for the test instance: - probeFailure(0) - Generate a PathChange notification when the current path varies from a previously determined path. - testFailure(1) - Generate a TestFailed notification when the full path to a target can't be determined. - testCompletion(2) - Generate a TestCompleted notification when the path to a target has been determined. - overRtdThreshold(3) - Generate a Overthreshold of RTD notification when the statistic results exceed threshold. - overOwdThresholdSd(4) - Generate a Overthreshold of OWD-SD notification when the statistic results exceed threshold. - overOwdThresholdDs(5) - Generate a Overthreshold of OWD-DS notification when the statistic results exceed threshold. The value #0x00 indicates disable all notifications.")
nqaAdminParaTrapProbeFailureFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTrapProbeFailureFilter.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTrapProbeFailureFilter.setDescription('Specifies the condition when to trigger an nqaProbeFailed notification. When the number of consecutive failed probes violates the threshold indicated by nqaAdminParaTrapProbeFailureFilter, a notification will be created. This object is used together with nqaAdminParaTrapGeneration.')
nqaAdminParaTrapTestFailureFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTrapTestFailureFilter.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTrapTestFailureFilter.setDescription('Specifies the condition when to trigger an nqaTestFailed notification. When the number of failed tests violates the threshold indicated by nqaAdminParaTrapTestFailureFilter, a notification will be created. There are usually several probes in each test. This object is used together with nqaAdminParaTrapGeneration.')
nqaAdminParaDSField = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDSField.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDSField.setDescription('Specifies the Differentiated Services (DS) field in the IP packet. The DS field is defined as the Type Of Service (TOS) octet in IPv4 header or as the Traffic Class octet in IPv6 header.')
nqaAdminParaDnsServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 22), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDnsServerAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDnsServerAddressType.setDescription('Specifies the address type of DNS server.')
nqaAdminParaDnsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 23), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDnsServerAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDnsServerAddress.setDescription('Specifies the address of DNS server.')
nqaAdminParaOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 24), NqaOperation().clone('noOperation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaOperation.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaOperation.setDescription('Specifies the operation of FTP or HTTP type test instance. The operations of FTP-type test instance include get and put. The operations of HTTP-type test instance include get and post.')
nqaAdminParaHttpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaHttpVersion.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaHttpVersion.setDescription('Specifies the version of HTTP.')
nqaAdminParaHttpOperationString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaHttpOperationString.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaHttpOperationString.setDescription('A string that specifies the HTTP operation which will be sent to the HTTP server.')
nqaAdminParaTestFailurePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTestFailurePercent.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTestFailurePercent.setDescription('Specifies the scale over which the test will be regarded as failed.')
nqaAdminParaFtpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaFtpUserName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaFtpUserName.setDescription('Specifies the user name of the FTP server.')
nqaAdminParaFtpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaFtpPassword.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaFtpPassword.setDescription('Specifies the password of the user of the FTP server.')
nqaAdminParaFtpFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaFtpFilePath.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaFtpFilePath.setDescription('Specifies the full name of the file which will be transmitted by the FTP-type test instance.')
nqaAdminParaFtpFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaFtpFileSize.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaFtpFileSize.setDescription('Specifies the size that the file will be transmitted by the FTP-type test instance. It may be part of the file.')
nqaAdminParaInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setUnits('millseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaInterval.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaInterval.setDescription('Specifies the interval between two consecutive probe packets.')
nqaAdminParaNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 33), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaNumPackets.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaNumPackets.setDescription('Specifies the number of packet sent in each probe. This object is used together with nqaAdminParaProbeCount, and only apples to jitter-type test instance.')
nqaAdminParaVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaVrfName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaVrfName.setDescription('Specifies the VRF name.')
nqaAdminParaLspAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 255))).clone(namedValues=NamedValues(("ipv4", 1), ("te", 3), ("ring", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspAddressType.setDescription('Specifies the address type of LSP. The object applies to lspping, lsptrace and lspjitter type test instance.')
nqaAdminParaLspAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspAddressMask.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspAddressMask.setDescription('Specifies the address mask of LSP. The object apples to lspping, lsptrace and lspjitter type test instance.')
nqaAdminParaLspIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 37), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspIpAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspIpAddress.setDescription('IP Address filled in the ip header, must be a 127/8 address.')
nqaAdminParaLspPWE3VcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspPWE3VcId.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspPWE3VcId.setDescription('The local Pseudo wire ID in PWE3 Ping test')
nqaAdminParaLspPWE3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 17, 18, 19, 21, 64))).clone(namedValues=NamedValues(("fr", 1), ("atmAal5Sdu", 2), ("atm-cell-transport", 3), ("vlan", 4), ("ethernet", 5), ("hdlc", 6), ("ppp", 7), ("atm-nto1-vcc", 9), ("atm-nto1-vpc", 10), ("ip-layer2", 11), ("atm-1to1-vcc", 12), ("atm-1to1-vpc", 13), ("satop-e1", 17), ("satop-t1", 18), ("satop-e3", 19), ("cesopsn-basic", 21), ("ipInterworking", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspPWE3Type.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspPWE3Type.setDescription('The encapsulation type of Pseudo wire ID in the PWE3 Ping test')
nqaAdminParaLspPWE3Option = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("labelAlert", 1), ("controlWord", 2), ("normal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspPWE3Option.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspPWE3Option.setDescription('The label type of PWE3 Ping and PWE3 Tracert test.')
nqaAdminParaLspPWE3RemoteVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspPWE3RemoteVcId.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspPWE3RemoteVcId.setDescription('The remote Pseudo wire ID in PWE Ping test.')
nqaAdminParaLspPWE3RemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 42), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspPWE3RemoteAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspPWE3RemoteAddress.setDescription('The remote IP address in PWE3 Ping test.')
nqaAdminParaLspExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspExp.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspExp.setDescription('The 3bit EXP field of the MPLS echo packet label.')
nqaAdminParaLspReplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noReply", 1), ("udp", 2), ("udpRouterAlert", 3), ("levelControlChannel", 4), ("udpviaVPLS", 5))).clone('udp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspReplyMode.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspReplyMode.setDescription('ReplyMode Value Meaning ----- ------- 1 Do not reply 2 Reply via an IPv4/IPv6 UDP packet 3 Reply via an IPv4/IPv6 UDP packet with Router Alert 4 Reply via application level control channel 5 Reply via a VPLS IPv4 UDP packet')
nqaAdminParaResultRowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 45), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaResultRowMax.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaResultRowMax.setDescription('Specifies the maximum number of result records.')
nqaAdminParaHistoryRowMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 46), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaHistoryRowMax.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaHistoryRowMax.setDescription('Specifies the maximum number of history records.')
nqaAdminParaCreateHopsEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 47), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaCreateHopsEntries.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaCreateHopsEntries.setDescription("When set to 'enable (1)', the result of each hop will be kept in nqaResultsTable. The object applies to trace, pwe3trace, lsptrace, mtrace type test instance.")
nqaAdminParaLspVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ldp", 1), ("bgp", 2), ("bgpad", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspVCType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspVCType.setDescription('The type of protocol which establishes PW in the pwe3tracert test')
nqaAdminParaMTraceLastHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 49), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceLastHopAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceLastHopAddress.setDescription("The last hop router's IP address in Mtrace test.")
nqaAdminParaMTraceSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 50), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceSourceAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceSourceAddress.setDescription('The IP address of the multicast source for the path being traced in Mtrace test.')
nqaAdminParaMTraceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 51), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceGroupAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceGroupAddress.setDescription('The group address to be traced in Mtrace test, or zero if no group-specific information is desired.')
nqaAdminParaMTraceMaxTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceMaxTtl.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceMaxTtl.setDescription('The maximum number of hops that the requester wants to trace in Mtrace test.')
nqaAdminParaMTraceSendMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("multicastTree", 1), ("allRouter", 2), ("destination", 3), ("lastHop", 4))).clone('multicastTree')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceSendMode.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceSendMode.setDescription('The sending mode of the Query pamessage in Mtrace test.')
nqaAdminParaMTraceResponseTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceResponseTtl.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceResponseTtl.setDescription('The TTL at which to multicast the response in Mtrace test, if the response address is a multicast address.')
nqaAdminParaMTraceResponseAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 55), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceResponseAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceResponseAddressType.setDescription('Mtrace response address type')
nqaAdminParaMTraceResponseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 56), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMTraceResponseAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMTraceResponseAddress.setDescription('This field specifies where the completed traceroute response packet gets sent in Mtrace test. It can be a unicast address or a multicast address')
nqaAdminParaDistanceNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 57), NqaDistanceNodeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaDistanceNodeType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaDistanceNodeType.setDescription('The destination of MAC ping(mac address or rmepid).')
nqaAdminParaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 58), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMacAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMacAddress.setDescription('Mac address of the destination of MAC PING.')
nqaAdminParaRMepID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 59), Dot1agCfmMepIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaRMepID.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaRMepID.setDescription('Rmepid of the destination of MAC PING.')
nqaAdminParaMDName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMDName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMDName.setDescription('Indicate the MD name in which the MAC Ping operated.')
nqaAdminParaMAName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMAName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMAName.setDescription('Indicate the MA name in which the MAC Ping operated.')
nqaAdminParaMacTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 62), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaMacTunnelName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaMacTunnelName.setDescription('Indicate the MAC Tunnel name in which the MAC Ping operated.')
nqaAdminParaPathMtuStep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPathMtuStep.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPathMtuStep.setDescription("Specify the step of the path MTU test.If the last response was received successful,the next packet's length will add the step.")
nqaAdminParaPathMtuDiscoveryPathMtuMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48, 9198))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPathMtuDiscoveryPathMtuMax.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPathMtuDiscoveryPathMtuMax.setDescription('Specify the max value of the discovery field in the path MTU test.')
nqaAdminParaIcmpJitterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("icmpTimestamp", 1), ("icmpEcho", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaIcmpJitterMode.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaIcmpJitterMode.setDescription('Select the type of ICMP packets to be sent in ICMP jitter and path jitter test.The value can be icmpTimestamp(1) or icmpEcho(2).')
nqaAdminParaCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDefined", 1), ("g711Alaw", 2), ("g711Ulaw", 3), ("g729A", 4))).clone('notDefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaCodecType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaCodecType.setDescription('To indicate the codec type to be used with jitter probe. This is applicable only for the jitter probe.')
nqaAdminParaIcpifAdvFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaIcpifAdvFactor.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaIcpifAdvFactor.setDescription('The advantage factor depends on the type of access and how the service is to be used. This object will be used while calculating the ICPIF (Calculated Planning Impairment Factor) values. Suggestion values: |---------------------------------------------------|-------| | Service |factor | |---------------------------------------------------|-------| | conventional wire-line | 0 | |---------------------------------------------------|-------| | mobility within Building | 5 | |---------------------------------------------------|-------| | mobility within geographical area | 10 | |---------------------------------------------------|-------| | access to hard-to-reach location | 20 | |---------------------------------------------------|-------| ')
nqaAdminParaFtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaFtpMode.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaFtpMode.setDescription('To indicate the mode to be used with ftp probe. This is applicable only for the ftp probe.')
nqaAdminParaHardwareBased = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 69), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaHardwareBased.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaHardwareBased.setDescription('Indicates that the hardware is enabled to send packets. (The value range: enable:1;disable:2.The default value is disable(2))')
nqaAdminParaPppoeUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPppoeUserName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPppoeUserName.setDescription('Specifies the username of PPPoE dial-up. For jitter,icmp,traceroute, tcp,udp,ftp,dns,http probes, this parameter indicates that the probe uses PPPoE encapsulation. This parameter accepts the characters in sight only.')
nqaAdminParaPppoePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPppoePassword.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPppoePassword.setDescription('Specifies the password of PPPoE dial-up. This is applicable only for the PPPoE probe. This parameter accepts the characters in sight only.')
nqaAdminParaPppoeVlanIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPppoeVlanIf.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPppoeVlanIf.setDescription('Specifies the vlanif of PPPoE dial-up. For jitter, icmp, traceroute, tcp, udp, ftp, dns, http probes, this parameter indicates that the probe uses PPPoE encapsulation.')
nqaAdminParaPppoeAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chap", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPppoeAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPppoeAuthenticationMode.setDescription('Specifies the authentication mode of PPPoE dial-up. This is applicable only for the PPPoE probe.')
nqaAdminParaPppoeRedialUpTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPppoeRedialUpTimes.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPppoeRedialUpTimes.setDescription('Specifies the redialup times of PPPoE dial-up. This is applicable only for the PPPoE probe.')
nqaAdminParaPppoeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaPppoeInterval.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaPppoeInterval.setDescription('Specifies the redialup interval of PPPoE dial-up. This is applicable only for the PPPoE probe.')
nqaAdminParaVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaVsiName.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaVsiName.setDescription('Specify the name of the VSI(Virtual Switch Instance)')
nqaAdminParaVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 77), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaVlanId.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaVlanId.setDescription('Specify the Vlan ID')
nqaAdminParaLspTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("main", 0), ("hotstandby", 1))).clone('main')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspTunnelType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspTunnelType.setDescription('To indicate ping/trace which lsp tunnel.')
nqaAdminParaLspNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 79), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspNextHopAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspNextHopAddress.setDescription('Represents the address of nexthop.')
nqaAdminParaLspVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("draft6", 1), ("rfc4379", 2), ("ptnmode", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaLspVersion.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaLspVersion.setDescription('Specify lsp version of protocol. Draft-ietf-mpls-lsp-ping-06 protocol, RFC4379 protocol or ptn mode.')
nqaAdminParaRemoteAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 81), InetAddressType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaRemoteAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaRemoteAddressType.setDescription('Represents the address type of remote.')
nqaAdminParaRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 82), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaRemoteAddress.setDescription('Represents the address of remote.')
nqaAdminParaTimeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 2, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("us", 1), ("ms", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminParaTimeUnit.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaTimeUnit.setDescription('The unit of the timestamp, ms or us.')
nqaAdminParaExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5), )
if mibBuilder.loadTexts: nqaAdminParaExtTable.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaExtTable.setDescription('Set parameter for a test.')
nqaAdminParaExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"))
if mibBuilder.loadTexts: nqaAdminParaExtEntry.setStatus('current')
if mibBuilder.loadTexts: nqaAdminParaExtEntry.setDescription('Set parameter in the nqaAdminParaExtTable.')
nqaAdminExtPara1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara1.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara1.setDescription('This object indicates the description of the nqaAdminExtPara2 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara2.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara2.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara1 object after the test case is ascertained.')
nqaAdminExtPara3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara3.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara3.setDescription('This object indicates the description of the nqaAdminExtPara4 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara4.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara4.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara3 object after the test case is ascertained.')
nqaAdminExtPara5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara5.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara5.setDescription('This object indicates the description of the nqaAdminExtPara6 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara6.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara6.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara5 object after the test case is ascertained.')
nqaAdminExtPara7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara7.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara7.setDescription('This object indicates the description of the nqaAdminExtPara8 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara8.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara8.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara7 object after the test case is ascertained.')
nqaAdminExtPara9 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara9.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara9.setDescription('This object indicates the description of the nqaAdminExtPara10 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara10 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara10.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara10.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara9 object after the test case is ascertained.')
nqaAdminExtPara11 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara11.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara11.setDescription('This object indicates the description of the nqaAdminExtPara12 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara12 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara12.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara12.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara11 object after the test case is ascertained.')
nqaAdminExtPara13 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara13.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara13.setDescription('This object indicates the description of the nqaAdminExtPara14 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara14 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara14.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara14.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara13 object after the test case is ascertained.')
nqaAdminExtPara15 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara15.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara15.setDescription('This object indicates the description of the nqaAdminExtPara16 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara16 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara16.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara16.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara15 object after the test case is ascertained.')
nqaAdminExtPara17 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara17.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara17.setDescription('This object indicates the description of the nqaAdminExtPara18 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara18 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara18.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara18.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara17 object after the test case is ascertained.')
nqaAdminExtPara19 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara19.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara19.setDescription('This object indicates the description of the nqaAdminExtPara20 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara20 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara20.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara20.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara19 object after the test case is ascertained.')
nqaAdminExtPara21 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara21.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara21.setDescription('This object indicates the description of the nqaAdminExtPara22 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara22 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara22.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara22.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara21 object after the test case is ascertained.')
nqaAdminExtPara23 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara23.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara23.setDescription('This object indicates the description of the nqaAdminExtPara24 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara24 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara24.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara24.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara23 object after the test case is ascertained.')
nqaAdminExtPara25 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara25.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara25.setDescription('This object indicates the description of the nqaAdminExtPara26 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara26 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara26.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara26.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara25 object after the test case is ascertained.')
nqaAdminExtPara27 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara27.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara27.setDescription('This object indicates the description of the nqaAdminExtPara28 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara28 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara28.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara28.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara27 object after the test case is ascertained.')
nqaAdminExtPara29 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara29.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara29.setDescription('This object indicates the description of the nqaAdminExtPara30 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara30 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara30.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara30.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara29 object after the test case is ascertained.')
nqaAdminExtPara31 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara31.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara31.setDescription('This object indicates the description of the nqaAdminExtPara32 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara32 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara32.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara32.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara31 object after the test case is ascertained.')
nqaAdminExtPara33 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara33.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara33.setDescription('This object indicates the description of the nqaAdminExtPara34 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara34 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara34.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara34.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara33 object after the test case is ascertained.')
nqaAdminExtPara35 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara35.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara35.setDescription('This object indicates the description of the nqaAdminExtPara36 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara36 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 36), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara36.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara36.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara35 object after the test case is ascertained.')
nqaAdminExtPara37 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara37.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara37.setDescription('This object indicates the description of the nqaAdminExtPara38 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara38 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 38), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara38.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara38.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara37 object after the test case is ascertained.')
nqaAdminExtPara39 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara39.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara39.setDescription('This object indicates the description of the nqaAdminExtPara40 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara40 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 40), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara40.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara40.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara39 object after the test case is ascertained.')
nqaAdminExtPara41 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara41.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara41.setDescription('This object indicates the description of the nqaAdminExtPara42 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara42 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara42.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara42.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara41 object after the test case is ascertained.')
nqaAdminExtPara43 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 43), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara43.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara43.setDescription('This object indicates the description of the nqaAdminExtPara44 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara44 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 44), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara44.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara44.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara43 object after the test case is ascertained.')
nqaAdminExtPara45 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 45), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara45.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara45.setDescription('This object indicates the description of the nqaAdminExtPara46 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara46 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara46.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara46.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara45 object after the test case is ascertained.')
nqaAdminExtPara47 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara47.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara47.setDescription('This object indicates the description of the nqaAdminExtPara48 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara48 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 48), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara48.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara48.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara47 object after the test case is ascertained.')
nqaAdminExtPara49 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 49), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAdminExtPara49.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara49.setDescription('This object indicates the description of the nqaAdminExtPara50 object. The value is automatically assigned by the system after the type of the test case is ascertained.')
nqaAdminExtPara50 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 5, 1, 50), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaAdminExtPara50.setStatus('current')
if mibBuilder.loadTexts: nqaAdminExtPara50.setDescription('This object is a configurable NQA parameter object. Its value and meaning are assigned by the nqaAdminExtPara49 object after the test case is ascertained.')
nqaScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3), )
if mibBuilder.loadTexts: nqaScheduleTable.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleTable.setDescription('Schedule test .')
nqaScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"))
if mibBuilder.loadTexts: nqaScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleEntry.setDescription('Set start-up in the nqaAdminParaTable.')
nqaScheduleStartType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("startNow", 1), ("startAt", 2), ("startAfter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaScheduleStartType.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleStartType.setDescription('Specifies the start type of the test instance. The object is used together with nqaScheduleStartTime.')
nqaScheduleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaScheduleStartTime.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleStartTime.setDescription("Specifies the start time of the test instance. Setting the value to 0 indicates to start the test instance immediately. After configuring this object, the status of the test instance is active, and the parameters of the test instance can't be changed.")
nqaScheduleEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("endAt", 1), ("endAfter", 2), ("endLifetime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaScheduleEndType.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleEndType.setDescription('Specifies the end type of the test instance. The object is used together with nqaScheduleEndTime.')
nqaScheduleEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaScheduleEndTime.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleEndTime.setDescription('Specifies the end time of the test instance.')
nqaScheduleAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaScheduleAgeTime.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleAgeTime.setDescription('Specifies the aging time of the test instance, the time how long the test instance will be reserved in NQA, after the test instance is inactive. Setting the value to 0 indicates reserving the test instance eternally.')
nqaScheduleElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaScheduleElapsedTime.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleElapsedTime.setDescription('The elapsed time (the period of time after task dispatch).')
nqaScheduleNumOfInitiations = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaScheduleNumOfInitiations.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleNumOfInitiations.setDescription('Specifies the times that the test instance has been initialed. This object is used as the index of the result table, HTTP statistics table, jitter statistics table, FTP statistics table and history table.')
nqaScheduleLastFinishIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaScheduleLastFinishIndex.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleLastFinishIndex.setDescription('Specifies the latest finished test of the test instance, which is used as the index of the result table.')
nqaScheduleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reset", 1), ("stop", 2), ("restart", 3), ("active", 4), ("inactive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaScheduleOperStatus.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleOperStatus.setDescription("Specifies the status of dispatching operation: - reset: Clear all the records of the test instance. - stop: Stop the test instance, if it's running. - restart: Stop the test instance, if it's running, and restart the test instance immediately. - active: The test instance is running; the parameters of the test instances can't be changed. - inactive: The test instance doesn't be scheduled; the parameters of the test instances can be changed.")
nqaScheduleLastCollectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaScheduleLastCollectIndex.setStatus('current')
if mibBuilder.loadTexts: nqaScheduleLastCollectIndex.setDescription('Specifies the index of the latest collection statistics result record in the collection result table.')
nqaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4), )
if mibBuilder.loadTexts: nqaGroupTable.setStatus('current')
if mibBuilder.loadTexts: nqaGroupTable.setDescription('Set group for a test.')
nqaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"))
if mibBuilder.loadTexts: nqaGroupEntry.setStatus('current')
if mibBuilder.loadTexts: nqaGroupEntry.setDescription('Set parameters in the nqaGroupTable.')
nqaGroupStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("leader", 2), ("member", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaGroupStatusType.setStatus('current')
if mibBuilder.loadTexts: nqaGroupStatusType.setDescription('Specifies the group status of the test instance. The value can be normal (1), leader (2) or member (3).')
nqaGroupPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1, 2), Integer32().clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaGroupPeriod.setStatus('current')
if mibBuilder.loadTexts: nqaGroupPeriod.setDescription('Specifies the interval during which all members in the specified group will be executed.')
nqaGroupLeaderOwnerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaGroupLeaderOwnerIndex.setStatus('current')
if mibBuilder.loadTexts: nqaGroupLeaderOwnerIndex.setDescription('Specifies the owner index of the group leader, if the test instance is a member of the group.')
nqaGroupLeaderTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaGroupLeaderTestName.setStatus('current')
if mibBuilder.loadTexts: nqaGroupLeaderTestName.setDescription('Specifies the test name of the group leader, if the test instance is a member of the group.')
nqaGroupMemberNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaGroupMemberNum.setStatus('current')
if mibBuilder.loadTexts: nqaGroupMemberNum.setDescription('Specifies the number of member in the group.')
nqaGroupMemberFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 2, 4, 1, 6), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaGroupMemberFree.setStatus('current')
if mibBuilder.loadTexts: nqaGroupMemberFree.setDescription('Free all members in the group.')
nqaServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3))
nqaServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 1), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaServerEnable.setStatus('current')
if mibBuilder.loadTexts: nqaServerEnable.setDescription('Enables NQA server, which can be the echo server of TCP, UDP and jitter type test instance.')
nqaTcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2), )
if mibBuilder.loadTexts: nqaTcpServerTable.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerTable.setDescription('A table which contains the status of nqa tcp server configuration information.')
nqaTcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2, 1), ).setIndexNames((0, "NQA-MIB", "nqaTcpServerAddress"), (0, "NQA-MIB", "nqaTcpServerPort"), (0, "NQA-MIB", "nqaTcpServerVrfName"))
if mibBuilder.loadTexts: nqaTcpServerEntry.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerEntry.setDescription('A table which contains the status of nqa tcp server configuration information. This entry is included not only the tcp server ip address but also the tcp server tcp port. If used for VPN it is also included the VPN name.')
nqaTcpServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2, 1, 1), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaTcpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerAddressType.setDescription('Specifies the address type of TCP server.')
nqaTcpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: nqaTcpServerAddress.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerAddress.setDescription('Specifies the address of TCP server.')
nqaTcpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: nqaTcpServerPort.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerPort.setDescription('Specifies the port number on which TCP server is listening.')
nqaTcpServerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: nqaTcpServerVrfName.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerVrfName.setDescription('Specifies the VRF (VPN Routing & Forwarding) instances name of the TCP server.')
nqaTcpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaTcpServerStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: nqaTcpServerStatus.setStatus('current')
if mibBuilder.loadTexts: nqaTcpServerStatus.setDescription('Specifies the operation of the TCP server, creating or deleting.')
nqaUdpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3), )
if mibBuilder.loadTexts: nqaUdpServerTable.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerTable.setDescription('A table which contains the status of nqa udp server configuration information.')
nqaUdpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3, 1), ).setIndexNames((0, "NQA-MIB", "nqaUdpServerAddress"), (0, "NQA-MIB", "nqaUdpServerPort"), (0, "NQA-MIB", "nqaUdpServerVrfName"))
if mibBuilder.loadTexts: nqaUdpServerEntry.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerEntry.setDescription('A table which contains the status of nqa udp server configuration information. This entry is includeed not only the udp server ip address but also the udp server udp port.If used for VPN it is also included the VPN name.')
nqaUdpServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3, 1, 1), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaUdpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerAddressType.setDescription('Specifies the address type of UDP server.')
nqaUdpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: nqaUdpServerAddress.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerAddress.setDescription('Specifies the address of UDP server.')
nqaUdpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: nqaUdpServerPort.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerPort.setDescription('Specifies the port number on which UDP server is listening.')
nqaUdpServerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: nqaUdpServerVrfName.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerVrfName.setDescription('Specifies the VRF (VPN Routing & Forwarding) instances name of the UDP server.')
nqaUdpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaUdpServerStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: nqaUdpServerStatus.setStatus('current')
if mibBuilder.loadTexts: nqaUdpServerStatus.setDescription('Specifies the operation of the UDP server, creating or deleting.')
nqaIcmpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 4), )
if mibBuilder.loadTexts: nqaIcmpServerTable.setStatus('current')
if mibBuilder.loadTexts: nqaIcmpServerTable.setDescription('A table which contains the status of nqa ICMP server configuration information.')
nqaIcmpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 4, 1), ).setIndexNames((0, "NQA-MIB", "nqaIcmpServerAddress"), (0, "NQA-MIB", "nqaIcmpServerVrfName"))
if mibBuilder.loadTexts: nqaIcmpServerEntry.setStatus('current')
if mibBuilder.loadTexts: nqaIcmpServerEntry.setDescription('A table which contains the status of nqa ICMP server configuration information. This entry is included the ICMP server IP address. If used for VPN it is also included the VPN name.')
nqaIcmpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 4, 1, 1), InetAddress())
if mibBuilder.loadTexts: nqaIcmpServerAddress.setStatus('current')
if mibBuilder.loadTexts: nqaIcmpServerAddress.setDescription('Specifies the address of ICMP server.')
nqaIcmpServerVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: nqaIcmpServerVrfName.setStatus('current')
if mibBuilder.loadTexts: nqaIcmpServerVrfName.setDescription('Specifies the VRF (VPN Routing & Forwarding) instances name of the ICMP server.')
nqaIcmpServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 4, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaIcmpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaIcmpServerAddressType.setDescription('Specifies the address type of ICMP server.')
nqaIcmpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 3, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaIcmpServerStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: nqaIcmpServerStatus.setStatus('current')
if mibBuilder.loadTexts: nqaIcmpServerStatus.setDescription('Specifies the operation of the ICMP server, creating or deleting.')
nqaStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4))
nqaResultsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1), )
if mibBuilder.loadTexts: nqaResultsTable.setStatus('current')
if mibBuilder.loadTexts: nqaResultsTable.setDescription('Defines the test Results Extend Table for providing the capability of performing test operations at a remote host. The results of these operations are stored in the nqaResultsTable . The operation of this table is same as that of nqaResultsTable.')
nqaResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaResultsIndex"), (0, "NQA-MIB", "nqaResultsHopIndex"))
if mibBuilder.loadTexts: nqaResultsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaResultsEntry.setDescription('The operation of this table is same as that of nqaResultsTable.')
nqaResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaResultsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaResultsIndex.setDescription('The result table index and times of dispatching dependency tests. Each test can only reserve 5 records. The result table only contains icmp/dns/dlsw/lspPing/Traceroute/LSP Traceroute/tcp/udp/snmp/dhcp Traceroute information. ')
nqaResultsHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaResultsHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaResultsHopIndex.setDescription('The hop index. If the test type is Traceroute or LSP Traceroute, the entry only defines one hop. For other types, the default value is 1.')
nqaResultsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noResult", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaResultsCompletions.setDescription('The status of test.')
nqaResultsTestAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 4), Counter32()).setUnits('tests').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsTestAttempts.setStatus('current')
if mibBuilder.loadTexts: nqaResultsTestAttempts.setDescription('The times of executing tests, which includes the times of successful execution, failed execution and interruption (interrupted by human or system). The current number of test attempts. The value of this object MUST be started at 0.')
nqaResultsCurHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 5), Gauge32()).setUnits('hops').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsCurHopCount.setStatus('current')
if mibBuilder.loadTexts: nqaResultsCurHopCount.setDescription('It is equal to the hop count index executed by current Traceroute or LSP Traceroute tests. Ping/LSP Ping does not use this entry. The default value is 0.')
nqaResultsCurProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 6), Gauge32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsCurProbeCount.setStatus('current')
if mibBuilder.loadTexts: nqaResultsCurProbeCount.setDescription('The total count of probe packets of Traceroute or LSP Traceroute test in a hop count index.')
nqaResultsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaResultsRTDOverThresholds.setDescription('The times of successful statistics test RTD (Round Trip Delay) over the threshold.')
nqaResultsSumCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsSumCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaResultsSumCompletionTime.setDescription('The sum of RTT (response time) of all packets of each hop for executing Traceroute, LSP Traceroute tests. The sum of RTT (response time) of sent packets for executing ping, lsp ping and disman-ping tests and so on.')
nqaResultsSumCompletionTime2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsSumCompletionTime2Low.setStatus('current')
if mibBuilder.loadTexts: nqaResultsSumCompletionTime2Low.setDescription("The low order 32 bits of the accumulated squares of completion times (in milliseconds) of NQA operations which complete successfully. Low/High order is defined where the binary number will look as follows: ------------------------------------------------- | High order 32 bits | Low order 32 bits | ------------------------------------------------- For example the number 4294967296 would have all Low order bits as '0' and the rightmost High order bit will be 1 (zeros,1). ")
nqaResultsSumCompletionTime2High = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsSumCompletionTime2High.setStatus('current')
if mibBuilder.loadTexts: nqaResultsSumCompletionTime2High.setDescription('The high order 32 bits of the accumulated squares of completion times (in milliseconds) of NQA operations which complete successfully. See the nqaResultsSumCompletionTime2Low object for a definition of Low/High Order. ')
nqaResultsCompletionTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsCompletionTimeMin.setStatus('current')
if mibBuilder.loadTexts: nqaResultsCompletionTimeMin.setDescription('The minimum RTT (for Traceroute and LSP Traceroute, it is the minimum RTT among all the packet of next hop) of all packets for executing a test. ')
nqaResultsCompletionTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsCompletionTimeMax.setStatus('current')
if mibBuilder.loadTexts: nqaResultsCompletionTimeMax.setDescription('The maximum RTT (for Traceroute and LSP Traceroute, it is the maximum RTT among all the packets of next hop) of all packets in executing a test.')
nqaResultsDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsDisconnects.setStatus('current')
if mibBuilder.loadTexts: nqaResultsDisconnects.setDescription('The times of consecutive failures. For connectionless protocol type of test,this number should be zero.')
nqaResultsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaResultsTimeouts.setDescription('The number of occasions when a NQA operation was not completed before a timeout occurred, i.e. nqaAdminCtrlTimeOut was exceeded.')
nqaResultsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaResultsBusies.setDescription('The times of failure to apply resource due to the busy system. such as apply memory or create socket failure.')
nqaResultsNoConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsNoConnections.setStatus('current')
if mibBuilder.loadTexts: nqaResultsNoConnections.setDescription('The number of occasions when a NQA operation could not be initiated because the connection to the target has not been established. For all other nqaAdminCtrlType this object will remain zero. This cannot occur for connectionless protocols, but may occur for connection oriented protocols, such as TCP. Since a NQA operation was never initiated, the completion time of these operations are not accumulated, nor do they increment nqaResultsCompletions. ')
nqaResultsSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsSequenceErrors.setStatus('current')
if mibBuilder.loadTexts: nqaResultsSequenceErrors.setDescription('The number of NQA operation completions received with an unexpected sequence identifier. For all other values of nqaAdminCtrlType this object will remain zero. When this has occurred some of the possible reasons maybe: - a duplicate packet was received - a response was received after it had timed-out - a corrupted packet was received and was not detected ')
nqaResultsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaResultsDrops.setDescription('The times probes of the test dropped due to sending or connecting failure.')
nqaResultsAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaResultsAddressType.setDescription('The destination address type, and the value range can be unknown(0), ipv4(1) and dns(16).')
nqaResultsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsAddress.setStatus('current')
if mibBuilder.loadTexts: nqaResultsAddress.setDescription('The destination address (TraceRoute is the destination address of each hop, and ping is the destination address of tests).')
nqaResultsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 21), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaResultsProbeResponses.setDescription('Number of responses received for the corresponding test. The value of this object MUST be reported as 0 when no probe responses have been received.')
nqaResultsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 22), Counter32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaResultsSentProbes.setDescription('The value of this object reflects the number of probes sent for the corresponding test. The value of this object MUST be reported as 0 when no probes have been sent.')
nqaResultsLastGoodProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsLastGoodProbe.setStatus('current')
if mibBuilder.loadTexts: nqaResultsLastGoodProbe.setDescription('Date and time when the last response was received for a probe.')
nqaResultsLastGoodPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsLastGoodPath.setStatus('current')
if mibBuilder.loadTexts: nqaResultsLastGoodPath.setDescription('The date and time when the last complete path was determined.')
nqaResultsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noFinish", 0), ("finish", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaResultsTestFinished.setDescription('The status of test execution.')
nqaResultsRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsRttAvg.setStatus('current')
if mibBuilder.loadTexts: nqaResultsRttAvg.setDescription('The average of RTTs that were successfully measured by tests.')
nqaResultsLostPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaResultsLostPacketRatio.setStatus('current')
if mibBuilder.loadTexts: nqaResultsLostPacketRatio.setDescription('The ratio of the packets lost to all packets sent in the test.')
nqaHTTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2), )
if mibBuilder.loadTexts: nqaHTTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTable.setDescription('The statistics collection database. Defines the HTTP Operations Statistics Table for storing the statistics of a HTTP test.')
nqaHTTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaHTTPStatsIndex"))
if mibBuilder.loadTexts: nqaHTTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsEntry.setDescription('Defines an entry in the nqaHTTPStatsTable.')
nqaHTTPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaHTTPStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsIndex.setDescription('The The HTTP statistics table index and times of dispatching dependency tests.')
nqaHTTPStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noResult", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsCompletions.setDescription('The status of HTTP test.')
nqaHTTPStatsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsRTDOverThresholds.setDescription('The number of HTTP operations RTD (Round Trip Delay) that violate threshold.')
nqaHTTPStatsRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsRTTSum.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsRTTSum.setDescription('The sum of delay time of successful HTTP probes, including the sum of time of DNS query, TCP establishment and packets transmission.')
nqaHTTPStatsRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsRTTMin.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsRTTMin.setDescription('The minimum value of HTTP probe time.')
nqaHTTPStatsRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsRTTMax.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsRTTMax.setDescription('The maximum value of HTTP probe time.')
nqaHTTPStatsDNSRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsDNSRTTSum.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsDNSRTTSum.setDescription('The sum of DNS query time.')
nqaHTTPStatsDNSRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsDNSRTTMin.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsDNSRTTMin.setDescription('The minimum of DNS query time.')
nqaHTTPStatsDNSRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsDNSRTTMax.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsDNSRTTMax.setDescription('The maximum of DNS query time.')
nqaHTTPStatsTCPConnectRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectRTTSum.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectRTTSum.setDescription('The sum of TCP connection time.')
nqaHTTPStatsTCPConnectRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectRTTMin.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectRTTMin.setDescription('The minimum value of TCP connection time.')
nqaHTTPStatsTCPConnectRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectRTTMax.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectRTTMax.setDescription('The maximum value of TCP connection time.')
nqaHTTPStatsTransactionRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTransactionRTTSum.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTransactionRTTSum.setDescription('The sum of transaction time.')
nqaHTTPStatsTransactionRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTransactionRTTMin.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTransactionRTTMin.setDescription('The minimum value of transaction time.')
nqaHTTPStatsTransactionRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTransactionRTTMax.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTransactionRTTMax.setDescription('The maximum value of transaction time.')
nqaHTTPStatsMessageBodyOctetsSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsMessageBodyOctetsSum.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsMessageBodyOctetsSum.setDescription('The sum of the size of the message body received as a response to the HTTP request.')
nqaHTTPStatsDNSServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsDNSServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsDNSServerTimeouts.setDescription('The number of requests that timed out during DNS query.')
nqaHTTPStatsTCPConnectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTCPConnectTimeouts.setDescription('The number of requests that timed out during HTTP connection.')
nqaHTTPStatsTransactionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTransactionTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTransactionTimeouts.setDescription('The number of requests that timed out during HTTP transaction.')
nqaHTTPStatsDNSQueryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsDNSQueryErrors.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsDNSQueryErrors.setDescription('The number of requests that had DNS query errors.')
nqaHTTPStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsErrors.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsErrors.setDescription('The number of HTTP transaction failures.')
nqaHTTPStatsTcpConnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTcpConnErrors.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTcpConnErrors.setDescription('The number of TCP connection failures.')
nqaHTTPStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsProbeResponses.setDescription('Number of responses received for the corresponding test. The value of this object MUST be reported as 0 when no probe responses have been received.')
nqaHTTPStatsSendProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsSendProbes.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsSendProbes.setDescription('The number of sending probes.')
nqaHTTPStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsBusies.setDescription('The number of occasions when a HTTP operation could not be initiated because an internal error.')
nqaHTTPStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noFinish", 0), ("finish", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTestFinished.setDescription('The status of test execution.')
nqaHTTPStatsRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsRttAvg.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsRttAvg.setDescription('The average of RTTs that were successfully measured by tests.')
nqaHTTPStatsLostPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHTTPStatsLostPacketRatio.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsLostPacketRatio.setDescription('The ratio of the packets lost to all packets sent in the test.')
nqaJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3), )
if mibBuilder.loadTexts: nqaJitterStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsTable.setDescription('A table which contains the status of latest Jitter operation.')
nqaJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaJitterStatsIndex"))
if mibBuilder.loadTexts: nqaJitterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsEntry.setDescription('A table which contains the status of latest Jitter operation. This entry is created only if the nqaAdminCtrlType is jitterAppl.')
nqaJitterStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaJitterStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsIndex.setDescription('The third index of jitter statistics table.')
nqaJitterStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noResult", 0), ("success", 1), ("failure", 2), ("negotiateFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsCompletions.setDescription('The result of the test, which value can be noResult (0), success (1), failure (2) or negotiateFailed (3). If the test is still running, the value will be noResult (0).')
nqaJitterStatsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTDOverThresholds.setDescription('The number of tests that violate RTD (Round Trip Delay) threshold.')
nqaJitterStatsNumOfRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsNumOfRTT.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsNumOfRTT.setDescription('The number of RTTs that are successfully measured by tests.')
nqaJitterStatsRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTTSum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTTSum.setDescription('The sum of RTTs that are successfully measured.')
nqaJitterStatsRTTSum2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTTSum2Low.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTTSum2Low.setDescription('The sum of squares of RTTs that are successfully measured by tests (low order 32 bits).')
nqaJitterStatsRTTSum2High = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTTSum2High.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTTSum2High.setDescription('The sum of squares of RTTs that are successfully measured by tests (high order 32 bits).')
nqaJitterStatsRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTTMin.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTTMin.setDescription('The minimum of RTTs that were successfully measured by tests.')
nqaJitterStatsRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTTMax.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTTMax.setDescription('The maximum of RTTs that were successfully measured by tests.')
nqaJitterStatsMinOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMinOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMinOfPositivesSD.setDescription('The minimum of absolute value of all positive jitter values from source to destination.')
nqaJitterStatsMaxOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMaxOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMaxOfPositivesSD.setDescription('The maximum of absolute value of all positive jitter values from source to destination.')
nqaJitterStatsNumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsNumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsNumOfPositivesSD.setDescription('The number of all positive jitter values from source to destination.')
nqaJitterStatsSumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSumOfPositivesSD.setDescription('The sum of absolute value of all positive jitter values from source to destination.')
nqaJitterStatsSum2OfPositivesSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesSDLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesSDLow.setDescription('The sum of squares of absolute value of all positive jitter values from source to destination (low order 32 bits).')
nqaJitterStatsSum2OfPositivesSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesSDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesSDHigh.setDescription('The sum of squares of absolute value of all positive jitter values from source to destination (high order 32 bits).')
nqaJitterStatsMinOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMinOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMinOfNegativesSD.setDescription('The minimum of absolute value of all negative jitter values from source to destination.')
nqaJitterStatsMaxOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMaxOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMaxOfNegativesSD.setDescription('The maximum of absolute value of all negative jitter values from source to destination.')
nqaJitterStatsNumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsNumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsNumOfNegativesSD.setDescription('The number of all negative jitter values from source to destination.')
nqaJitterStatsSumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSumOfNegativesSD.setDescription('The sum of absolute value of all negative jitter values from source to destination.')
nqaJitterStatsSum2OfNegativesSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesSDLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesSDLow.setDescription('The sum of squares of absolute value of all negative values from source to destination (low order 32 bits).')
nqaJitterStatsSum2OfNegativesSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesSDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesSDHigh.setDescription('The sum of squares of absolute value of all negative values from source to destination (high order 32 bits).')
nqaJitterStatsMinOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMinOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMinOfPositivesDS.setDescription('The minimum of absolute value of all positive jitter values from destination to source.')
nqaJitterStatsMaxOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMaxOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMaxOfPositivesDS.setDescription('The maximum of absolute value of all positive jitter values from destination to source.')
nqaJitterStatsNumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsNumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsNumOfPositivesDS.setDescription('The number of all positive jitter values from destination to source.')
nqaJitterStatsSumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSumOfPositivesDS.setDescription('The sum of absolute value of all positive jitter values from destination to source.')
nqaJitterStatsSum2OfPositivesDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesDSLow.setDescription('The sum of squares of absolute value of all positive jitter values from destination to source (low order 32 bits).')
nqaJitterStatsSum2OfPositivesDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfPositivesDSHigh.setDescription('The sum of squares of absolute value of all positive jitter values from destination to source (high order 32 bits).')
nqaJitterStatsMinOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMinOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMinOfNegativesDS.setDescription('The minimum of absolute value of all negative jitter values from destination to source.')
nqaJitterStatsMaxOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMaxOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMaxOfNegativesDS.setDescription('The maximum of absolute value of all negative jitter values from destination to source.')
nqaJitterStatsNumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsNumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsNumOfNegativesDS.setDescription('The number of all negative jitter values from destination to source.')
nqaJitterStatsSumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSumOfNegativesDS.setDescription('The sum of absolute value of all negative jitter values from destination to source.')
nqaJitterStatsSum2OfNegativesDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesDSLow.setDescription('The sum of squares of absolute value of all negative values from destination to source (low order 32 bits).')
nqaJitterStatsSum2OfNegativesDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2OfNegativesDSHigh.setDescription('The sum of squares of absolute value of all negative values from destination to source (high order 32 bits).')
nqaJitterStatsPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPacketLossSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPacketLossSD.setDescription('The number of packets lost when sent from source to destination.')
nqaJitterStatsPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPacketLossDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPacketLossDS.setDescription('The number of packets lost when sent from destination to source.')
nqaJitterStatsPacketOutOfSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPacketOutOfSequences.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPacketOutOfSequences.setDescription('The number of packets arrived out of sequence.')
nqaJitterStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsErrors.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsErrors.setDescription('The number of errors occurred in the test.')
nqaJitterStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsBusies.setDescription("The number of occasions when a test couldn't be initialized because the previous test has not completed.")
nqaJitterStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsTimeouts.setDescription('The number of responses arrived over the time.')
nqaJitterStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsProbeResponses.setDescription('The number of responses from echo-server for the packets sent by the test.')
nqaJitterStatsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSentProbes.setDescription('The number of packets sent in the test.')
nqaJitterStatsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsDrops.setDescription('The number of packets that were sent failed in the test.')
nqaJitterStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noFinish", 0), ("finish", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsTestFinished.setDescription('The status of the test, which value can be noFinish (0) or finish (1).')
nqaJitterStatsMaxDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 44), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMaxDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMaxDelaySD.setDescription('The maximum of all OWD (One Way Delay) from source to destination.')
nqaJitterStatsMaxDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 45), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMaxDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMaxDelayDS.setDescription('The maximum of all OWD (One Way Delay) from destination to source.')
nqaJitterStatsRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsRTTAvg.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTTAvg.setDescription('The average of RTTs that were successfully measured by tests.')
nqaJitterStatsPacketLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPacketLossRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPacketLossRatio.setDescription('The ratio of the packets lost to all packets sent in the test.')
nqaJitterStatsAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsAvgJitter.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsAvgJitter.setDescription('The average of jitter values that were successfully measured by tests.')
nqaJitterStatsAvgJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsAvgJitterSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsAvgJitterSD.setDescription('The average of jitter values from source to destination that were successfully measured by tests.')
nqaJitterStatsAvgJitterDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsAvgJitterDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsAvgJitterDS.setDescription('The average of jitter values from destination to source that were successfully measured by tests.')
nqaJitterStatsJitterOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsJitterOut.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsJitterOut.setDescription('Jitter (RFC1889) at responder.')
nqaJitterStatsJitterIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsJitterIn.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsJitterIn.setDescription('Jitter (RFC1889) at sender.')
nqaJitterStatsOWDOverThresholdsSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsOWDOverThresholdsSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOWDOverThresholdsSD.setDescription('The number of tests that violate OWD (One Way Delay) threshold from source to destination.')
nqaJitterStatsPktLossUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPktLossUnknown.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPktLossUnknown.setDescription("The number of packets lost for which we can't determine the direction.")
nqaJitterStatsNumOfOWD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsNumOfOWD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsNumOfOWD.setDescription('The number of OWDs that were successfully measured by tests.')
nqaJitterStatsOWSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsOWSumSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOWSumSD.setDescription('The sum of OWDs that were successfully measured by tests from source to destination.')
nqaJitterStatsOWSumDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsOWSumDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOWSumDS.setDescription('The sum of OWDs that were successfully measured by tests from destination to source.')
nqaJitterStatsOWDOverThresholdsDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsOWDOverThresholdsDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOWDOverThresholdsDS.setDescription('The number of tests that violate OWD (One Way Delay) threshold from destination to source.')
nqaJitterStatsOperOfIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsOperOfIcpif.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOperOfIcpif.setDescription('The ICPIF (Calculated Planning Impairment Factor) value for the latest jitter test.')
nqaJitterStatsOperOfMos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsOperOfMos.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOperOfMos.setDescription('The MOS (Mean Opinion Score) value for the latest jitter test. ')
nqaJitterStatsMinDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMinDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMinDelaySD.setDescription('The minimum of all one way time from source to destination.')
nqaJitterStatsSum2DelaySDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2DelaySDLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2DelaySDLow.setDescription('The low order 32 bits of the sum of squares of one way time from source to destination.')
nqaJitterStatsSum2DelaySDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2DelaySDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2DelaySDHigh.setDescription('The high order 32 bits of the sum of squares of one way time from source to destination.')
nqaJitterStatsMinDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsMinDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsMinDelayDS.setDescription('The minimum of all one way time from destination to source.')
nqaJitterStatsSum2DelayDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2DelayDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2DelayDSLow.setDescription('The low order 32 bits of the sum of squares of one way time from destination to source.')
nqaJitterStatsSum2DelayDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsSum2DelayDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsSum2DelayDSHigh.setDescription('The low order 32 bits of the sum of squares of one way time from destination to source.')
nqaJitterStatsTimeUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("us", 1), ("ms", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsTimeUnit.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsTimeUnit.setDescription('The unit of the timestamp, ms or us.')
nqaJitterStatsAvgDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsAvgDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsAvgDelaySD.setDescription('The average of one way time from source to destination.')
nqaJitterStatsAvgDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsAvgDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsAvgDelayDS.setDescription('The average of one way time from destination to source.')
nqaJitterStatsPktRewriteNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPktRewriteNum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPktRewriteNum.setDescription('The number of packets have been rewrited.')
nqaJitterStatsPktRewriteRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPktRewriteRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPktRewriteRatio.setDescription('The ratio of packets have been rewrited.')
nqaJitterStatsPktDisorderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPktDisorderNum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPktDisorderNum.setDescription('The number of packets have been disordered.')
nqaJitterStatsPktDisorderRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsPktDisorderRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsPktDisorderRatio.setDescription('The ratio of packets have been disordered.')
nqaJitterStatsFragPktDisorderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsFragPktDisorderNum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsFragPktDisorderNum.setDescription('The number of packets whose fragments have been disordered.')
nqaJitterStatsFragPktDisorderRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 3, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterStatsFragPktDisorderRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsFragPktDisorderRatio.setDescription('The ratio of packets whose fragments have been disordered.')
nqaFTPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4), )
if mibBuilder.loadTexts: nqaFTPStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsTable.setDescription('The statistics collection database. Defines the FTP Operations Statistics Table for storing the statistics of a FTP test. ')
nqaFTPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaFTPStatsIndex"))
if mibBuilder.loadTexts: nqaFTPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsEntry.setDescription('Defines an entry in the nqaFTPStatsTable. ')
nqaFTPStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaFTPStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsIndex.setDescription('FTP statistics table index and times of dispatching dependency tests.')
nqaFTPStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noResult", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsCompletions.setDescription('The status of FTP test.')
nqaFTPStatsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsRTDOverThresholds.setDescription('The times of successful statistics test RTD (Round Trip Delay) over the threshold.')
nqaFTPStatsCtrlConnMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsCtrlConnMaxTime.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsCtrlConnMaxTime.setDescription('The maximum value of the control connection time.')
nqaFTPStatsCtrlConnMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsCtrlConnMinTime.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsCtrlConnMinTime.setDescription('The minimum value of the control connection time.')
nqaFTPStatsCtrlConnAveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsCtrlConnAveTime.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsCtrlConnAveTime.setDescription('The average value of the control connection time.')
nqaFTPStatsDataConnMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsDataConnMaxTime.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsDataConnMaxTime.setDescription('The maximum value of the data connection time.')
nqaFTPStatsDataConnMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsDataConnMinTime.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsDataConnMinTime.setDescription('The minimum value of the data connection time.')
nqaFTPStatsDataConnAveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsDataConnAveTime.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsDataConnAveTime.setDescription('The average value of the data connection time.')
nqaFTPStatsConnectSumTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsConnectSumTimeMax.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsConnectSumTimeMax.setDescription('The maximum value of the FTP probe time.')
nqaFTPStatsConnectSumTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsConnectSumTimeMin.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsConnectSumTimeMin.setDescription('The mininum value of the FTP probe time.')
nqaFTPStatsConnectSumTimeAve = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsConnectSumTimeAve.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsConnectSumTimeAve.setDescription('The average value of the FTP probe time.')
nqaFTPStatsMessageBodyOctetsSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsMessageBodyOctetsSum.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsMessageBodyOctetsSum.setDescription('The accumulated octets of a FTP test.')
nqaFTPStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsErrors.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsErrors.setDescription('The number of some other errors.')
nqaFTPStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsTimeouts.setDescription('The number of occasions when a FTP operation was not completed before a timeout occurred, i.e. nqaAdminCtrlTimeOut was exceeded.')
nqaFTPStatsDiscontinued = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsDiscontinued.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsDiscontinued.setDescription('The number of occasions when a FTP test was interrupted by the user.')
nqaFTPStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsProbeResponses.setDescription('Number of responses received for the corresponding test. The value of this object MUST be reported as 0 when no probe responses have been received.')
nqaFTPStatsSendProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsSendProbes.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsSendProbes.setDescription('The number of sending probe')
nqaFTPStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noFinish", 0), ("finish", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsTestFinished.setDescription('The status of test execution.')
nqaFTPStatsRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsRttAvg.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsRttAvg.setDescription('The average of RTTs that were successfully measured by tests.')
nqaFTPStatsLostPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 4, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFTPStatsLostPacketRatio.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsLostPacketRatio.setDescription('The ratio of the packets lost to all packets sent in the test.')
nqaMpingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5), )
if mibBuilder.loadTexts: nqaMpingStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsTable.setDescription('The statistics collection database. Defines the Mping Operations Statistics Table for storing the statistics of a Mping test.')
nqaMpingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaMpingStatsIndex"), (0, "NQA-MIB", "nqaMpingStatsReceiverIndex"))
if mibBuilder.loadTexts: nqaMpingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsEntry.setDescription('Defines an entry in the nqaMpingStatsTable.')
nqaMpingStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMpingStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsIndex.setDescription('The index of mping statistics table, and the times of dispatching dependency tests.')
nqaMpingStatsReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMpingStatsReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsReceiverIndex.setDescription('The index of receiver ,that received the mping request packet and response the reply packet .')
nqaMpingStatsTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsTargetAddressType.setDescription('The destination address type, and the value range can be unknown(0), ipv4(1) and dns(16).')
nqaMpingStatsTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsTargetAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsTargetAddress.setDescription('The destination address .')
nqaMpingStatsReceiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsReceiverAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsReceiverAddress.setDescription('The address of mping receiver')
nqaMpingStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noResult", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsCompletions.setDescription('The status of test.')
nqaMpingStatsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsRTDOverThresholds.setDescription('The times of successful statistics test RTD (Round Trip Delay) over the threshold.')
nqaMpingStatsSumCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsSumCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsSumCompletionTime.setDescription('The sum of RTT (response time) of sent packets.')
nqaMpingStatsSumCompletionTime2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsSumCompletionTime2Low.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsSumCompletionTime2Low.setDescription('The low order 32 bits of the sum of squares of RTT (response time) for each packet of test execution. ')
nqaMpingStatsSumCompletionTime2High = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsSumCompletionTime2High.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsSumCompletionTime2High.setDescription('The high order 32 bits of the sum of squares of RTT (response time) for each packet of test execution. ')
nqaMpingStatsCompletionTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsCompletionTimeMin.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsCompletionTimeMin.setDescription('The minimum RTT of all packets for executing a test. ')
nqaMpingStatsCompletionTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsCompletionTimeMax.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsCompletionTimeMax.setDescription('The maximum RTT of all packets in executing a test. ')
nqaMpingStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsTimeouts.setDescription('The number of occasions when a NQA operation was not completed before a timeout occurred, i.e. nqaAdminCtrlTimeOut was exceeded.')
nqaMpingStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsBusies.setDescription('The times of failure to apply resource due to the busy system. such as apply memory or create socket failure.')
nqaMpingStatsSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsSequenceErrors.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsSequenceErrors.setDescription('The times that sequence error happends.')
nqaMpingStatsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsDrops.setDescription('The times probes of the test dropped due to sending or connecting failure . ')
nqaMpingStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsProbeResponses.setDescription('The number of received reponse packets.')
nqaMpingStatsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsSentProbes.setDescription('The number of sent packets.')
nqaMpingStatsLastGoodProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsLastGoodProbe.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsLastGoodProbe.setDescription('Date and time when the last response was received for a probe.')
nqaMpingStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFinish", 1), ("finish", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsTestFinished.setDescription('The status of test execution.')
nqaMpingStatsReceiverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsReceiverCount.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsReceiverCount.setDescription('The current serial number of receivers.')
nqaMpingStatsLastFibHit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsLastFibHit.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsLastFibHit.setDescription('Whether the fib is hit on the device when receiving the last packet.')
nqaMpingStatsRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsRttAvg.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsRttAvg.setDescription('The average of RTTs that were successfully measured by tests.')
nqaMpingStatsLostPacketRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 5, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingStatsLostPacketRatio.setStatus('current')
if mibBuilder.loadTexts: nqaMpingStatsLostPacketRatio.setDescription('The ratio of the packets lost to all packets sent in the test.')
nqaMtracertStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6), )
if mibBuilder.loadTexts: nqaMtracertStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsTable.setDescription('The statistics collection database. Defines the Mping Operations Statistics Table for storing the statistics of a Mping test.')
nqaMtracertStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaMtracertStatsIndex"), (0, "NQA-MIB", "nqaMtracertStatsHopIndex"))
if mibBuilder.loadTexts: nqaMtracertStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsEntry.setDescription('The operation of this table is same as that of nqaResultsTable.')
nqaMtracertStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMtracertStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsIndex.setDescription('The index of mping statistics table, and the times of dispatching dependency tests.')
nqaMtracertStatsHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaMtracertStatsHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsHopIndex.setDescription('The index of Mtracert hop ')
nqaMtracertStatsAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsAddressType.setDescription('The destination address type, and the value range can be unknown(0), ipv4(1) and dns(16).')
nqaMtracertStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsAddress.setDescription('The destination address (TraceRoute is the source address of the last valuable response package).')
nqaMtracertStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noResult", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsCompletions.setDescription('The status of test.')
nqaMtracertStatsCurHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsCurHopCount.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsCurHopCount.setDescription('It is equal to the hop count index executed by current tests. The default value is 0.')
nqaMtracertStatsCurProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsCurProbeCount.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsCurProbeCount.setDescription('The total count of probe packets in a hop count index.')
nqaMtracertStatsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsRTDOverThresholds.setDescription('The times of successful statistics test RTD (Round Trip Delay) over the threshold.')
nqaMtracertStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsTimeouts.setDescription('The number of occasions when a NQA operation was not completed before a timeout occurred, i.e. nqaAdminCtrlTimeOut was exceeded.')
nqaMtracertStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsBusies.setDescription('The times of failure to apply resource due to the busy system. such as apply memory or create socket failure.')
nqaMtracertStatsSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsSequenceErrors.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsSequenceErrors.setDescription('The times that sequence error happends.')
nqaMtracertStatsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsDrops.setDescription('The times probes of the test dropped due to sending or connecting failure . ')
nqaMtracertStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsProbeResponses.setDescription('The number of received reponse packets.')
nqaMtracertStatsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsSentProbes.setDescription('The number of sent packets.')
nqaMtracertStatsLastGoodProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsLastGoodProbe.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsLastGoodProbe.setDescription('Date and time when the last response was received for a probe.')
nqaMtracertStatsLastGoodPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsLastGoodPath.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsLastGoodPath.setDescription('The date and time when the last complete path was determined.')
nqaMtracertStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noFinish", 1), ("finish", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsTestFinished.setDescription('The status of test execution.')
nqaMtracertStatsCurPathTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsCurPathTTL.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsCurPathTTL.setDescription('The TTL(time to live) of the current path. ')
nqaMtracertStatsMaxPathTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsMaxPathTTL.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsMaxPathTTL.setDescription('The maximum TTL(time to live) of the path. ')
nqaMtracertStatsInPkgLossRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsInPkgLossRate.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsInPkgLossRate.setDescription('The loss rate of the incoming packets.')
nqaMtracertStatsSGPkgLossRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsSGPkgLossRate.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsSGPkgLossRate.setDescription('The loss rate of the packets from source to multicast group.')
nqaMtracertStatsInPkgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsInPkgRate.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsInPkgRate.setDescription('The rate of incoming packets.')
nqaMtracertStatsOutPkgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsOutPkgRate.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsOutPkgRate.setDescription('The rate of outgoing packets.')
nqaMtracertStatsTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 6, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertStatsTimeDelay.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertStatsTimeDelay.setDescription('The time delay of packets from hop to hop.')
nqaPathMtuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7), )
if mibBuilder.loadTexts: nqaPathMtuStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsTable.setDescription('The statistics collection database. Defines the path MTU Operations Statistics Table for storing the statistics of a path MTU test.')
nqaPathMtuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaPathMtuStatsIndex"))
if mibBuilder.loadTexts: nqaPathMtuStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsEntry.setDescription('Defines an entry in the nqaPathMtuStatsTable.')
nqaPathMtuStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaPathMtuStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsIndex.setDescription('The index of path MTU statistics table, and the times of dispatching dependency tests.')
nqaPathMtuStatsAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsAddressType.setDescription('The destination address type, and the value range can be unknown(0), ipv4(1) and dns(16).')
nqaPathMtuStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsAddress.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsAddress.setDescription('The destination address. It is the source address of the ICMP echo reply packet.')
nqaPathMtuStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noResult", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsCompletions.setDescription('The status of test.')
nqaPathMtuStatsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsSentProbes.setDescription('The number of sent packets.')
nqaPathMtuStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsProbeResponses.setDescription('The number of received reponse packets.')
nqaPathMtuStatsDiscoveryPathMtuMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsDiscoveryPathMtuMin.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsDiscoveryPathMtuMin.setDescription('The initial length of packet in the path MTU test. It is the minimal length of a ICMP packet.')
nqaPathMtuStatsDiscoveryPathMtuMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsDiscoveryPathMtuMax.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsDiscoveryPathMtuMax.setDescription('The maximal length of packet in the path MTU test. It is the maximal MTU of local out-interface.')
nqaPathMtuStatsOptimumFirstStep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsOptimumFirstStep.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsOptimumFirstStep.setDescription('The optimum first step of the path MTU test. It will take effect if the specified step is lower than it.')
nqaPathMtuStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsBusies.setDescription('The times of failure to apply resource due to the busy system. such as apply memory or create socket failure.')
nqaPathMtuStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsTimeouts.setDescription('The number of occasions when a NQA operation was not completed before a timeout occurred, i.e. nqaAdminCtrlTimeOut was exceeded.')
nqaPathMtuStatsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsDrops.setDescription('The times probes of the test dropped due to sending or connecting failure.')
nqaPathMtuStatsPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsPathMtu.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsPathMtu.setDescription('The value of current path MTU.')
nqaPathMtuStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nofinish", 0), ("finish", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathMtuStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaPathMtuStatsTestFinished.setDescription('The status of test execution.')
nqaPathJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8), )
if mibBuilder.loadTexts: nqaPathJitterStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsTable.setDescription('A table which contains the status of latest path jitter operation.')
nqaPathJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaPathJitterStatsIndex"), (0, "NQA-MIB", "nqaPathJitterStatsHopIndex"))
if mibBuilder.loadTexts: nqaPathJitterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsEntry.setDescription('A table which contains the status of latest path jitter operation. This entry is created only if the nqaAdminCtrlType is path jitter.')
nqaPathJitterStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaPathJitterStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsIndex.setDescription('The index of path jitter statistics table, and the times of dispatching dependency tests.')
nqaPathJitterStatsHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaPathJitterStatsHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsHopIndex.setDescription('The index of path jitter hop.')
nqaPathJitterStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noResult", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsCompletions.setDescription('The status of path jitter test.')
nqaPathJitterStatsAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsAddressType.setDescription('The destination address type in a hop of path jitter test, and the value range can be unknown(0), ipv4(1) and dns(16).')
nqaPathJitterStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsAddress.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsAddress.setDescription('The destination address in a hop of path jitter test.')
nqaPathJitterStatsRtdOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRtdOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRtdOverThresholds.setDescription("The times of successful executions who's RTD over the threshold in a hop of path jitter test.")
nqaPathJitterStatsNumOfRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfRtt.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfRtt.setDescription('The times that statistics RTT successfully in a hop of path jitter test.')
nqaPathJitterStatsRttSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRttSum.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRttSum.setDescription('The sum of RTTs in a hop of path jitter test.')
nqaPathJitterStatsRttSum2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRttSum2Low.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRttSum2Low.setDescription("The low order 32 bits of RTT's square sum that successfully measured in a hop of path jitter test.")
nqaPathJitterStatsRttSum2High = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRttSum2High.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRttSum2High.setDescription("The high order 32 bits of RTT's square sum that successfully measured in a hop of path jitter test.")
nqaPathJitterStatsRttMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRttMin.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRttMin.setDescription('The minimum of RTTs that successfully measured in a hop of path jitter test.')
nqaPathJitterStatsRttMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRttMax.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRttMax.setDescription('The maximum of RTTs that successfully measured in a hop of path jitter test.')
nqaPathJitterStatsMinOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfPositivesSD.setDescription('The minimum of positive values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsMaxOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfPositivesSD.setDescription('The maximum of positive values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsNumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfPositivesSD.setDescription('The number of positive values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsSumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfPositivesSD.setDescription('The sum of positive values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsSum2OfPositivesSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesSDLow.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesSDLow.setDescription('The low order 32 bits of square sum of positive values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsSum2OfPositivesSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesSDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesSDHigh.setDescription('The high order 32 bits of square sum of positive values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsMinOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfNegativesSD.setDescription('The minimum of negative values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsMaxOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfNegativesSD.setDescription('The maximum of negative values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsNumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfNegativesSD.setDescription('The number of negative values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsSumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfNegativesSD.setDescription('The sum of negative values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsSum2OfNegativesSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesSDLow.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesSDLow.setDescription('The low order 32 bits of square sum of negative values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsSum2OfNegativesSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesSDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesSDHigh.setDescription('The high order 32 bits of square sum of negative values of jitter that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsMinOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfPositivesDS.setDescription('The minimum of positive values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsMaxOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfPositivesDS.setDescription('The maximum of positive values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsNumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfPositivesDS.setDescription('The number of positive values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsSumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfPositivesDS.setDescription('The sum of positive values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsSum2OfPositivesDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesDSLow.setDescription('The low order 32 bits of square sum of positive values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsSum2OfPositivesDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfPositivesDSHigh.setDescription('The high order 32 bits of square sum of positive values of jitter that measured from packetssent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsMinOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMinOfNegativesDS.setDescription('The minimum of negative values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsMaxOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMaxOfNegativesDS.setDescription('The maximum of negative values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsNumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfNegativesDS.setDescription('The number of negative values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsSumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSumOfNegativesDS.setDescription('The sum of negative values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsSum2OfNegativesDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesDSLow.setDescription('The low order 32 bits of square sum of negative values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsSum2OfNegativesDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSum2OfNegativesDSHigh.setDescription('The high order 32 bits of square sum of negative values of jitter that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsPacketLossSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsPacketLossSD.setDescription('The number of dropped packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsPacketLossDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsPacketLossDS.setDescription('The number of dropped packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsPacketOutOfSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsPacketOutOfSequences.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsPacketOutOfSequences.setDescription('The number of packets that return out of sequence.')
nqaPathJitterStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsErrors.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsErrors.setDescription('The number of some other errors type.')
nqaPathJitterStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsBusies.setDescription('The number of occasions when a path jitter operation could not be initiated because an internal error.')
nqaPathJitterStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsTimeouts.setDescription('The number of occasions when a NQA operation was not completed before a timeout occurred, i.e. nqaAdminCtrlTimeOut was exceeded.')
nqaPathJitterStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsProbeResponses.setDescription('The number of responses received for the corresponding test. The value of this object MUST be reported as 0 when no probe responses have been received.')
nqaPathJitterStatsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsSentProbes.setDescription('The value of this object reflects the number of packets sent for the corresponding test. The value of this object MUST be reported as 0 when no probes have been sent.')
nqaPathJitterStatsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsDrops.setDescription('The times probes of the test dropped due to sending failure.')
nqaPathJitterStatsTestFinished = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noFinish", 0), ("finish", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsTestFinished.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsTestFinished.setDescription('The status of test execution.')
nqaPathJitterStatsMaxDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 47), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMaxDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMaxDelaySD.setDescription('The maximum of all OWD (One Way Delay) that measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsMaxDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 48), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsMaxDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsMaxDelayDS.setDescription('The maximum of all OWD (One Way Delay) that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsRttAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsRttAvg.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsRttAvg.setDescription('The average of RTTs that were successfully measured in a hop of path jitter test.')
nqaPathJitterStatsPacketLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsPacketLossRatio.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsPacketLossRatio.setDescription('The ratio of the packets lost to all packets sent in a hop of path jitter test.')
nqaPathJitterStatsAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsAvgJitter.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsAvgJitter.setDescription('The average of jitter values that were successfully measured in a hop of path jitter test.')
nqaPathJitterStatsAvgJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsAvgJitterSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsAvgJitterSD.setDescription('The average value of jitters that measured from packets sent from sourse to destination in a hop of path jitter test.')
nqaPathJitterStatsAvgJitterDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsAvgJitterDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsAvgJitterDS.setDescription('The average value of jitters that measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsJitterOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsJitterOut.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsJitterOut.setDescription('jitter (RFC1889) at responder.')
nqaPathJitterStatsJitterIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 55), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsJitterIn.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsJitterIn.setDescription('Jitter (RFC1889) at sender.')
nqaPathJitterStatsOwdOverThresholdsSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsOwdOverThresholdsSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsOwdOverThresholdsSD.setDescription('The number of tests that violate OWD (One Way Delay) threshold from source to destination in a hop of path jitter test.')
nqaPathJitterStatsPktLossUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsPktLossUnknown.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsPktLossUnknown.setDescription("The number of lost packets for which we can't determine the direction in a hop of path jitter test.")
nqaPathJitterStatsNumOfOwd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfOwd.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsNumOfOwd.setDescription('The number of OWDs that were successfully measured in a hop of path jitter test.')
nqaPathJitterStatsOwdSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsOwdSumSD.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsOwdSumSD.setDescription('The sum of OWDs that were successfully measured from packets sent from source to destination in a hop of path jitter test.')
nqaPathJitterStatsOwdSumDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsOwdSumDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsOwdSumDS.setDescription('The sum of OWDs that were successfully measured from packets sent from destination to source in a hop of path jitter test.')
nqaPathJitterStatsOwdOverThresholdsDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 8, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPathJitterStatsOwdOverThresholdsDS.setStatus('current')
if mibBuilder.loadTexts: nqaPathJitterStatsOwdOverThresholdsDS.setDescription('The number of tests that violate OWD (One Way Delay) threshold from destination to source in a hop of path jitter test.')
nqaPppoeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9), )
if mibBuilder.loadTexts: nqaPppoeStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsTable.setDescription('A table which contains the rolling accumulated history of the PPPoE operation.')
nqaPppoeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaPppoeStatsIndex"), (0, "NQA-MIB", "nqaPppoeRedialIndex"))
if mibBuilder.loadTexts: nqaPppoeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsEntry.setDescription('A table which contains the rolling accumulated history of the PPPoE operation. This entry is created only if the nqaAdminCtrlType is pppoe.')
nqaPppoeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaPppoeStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsIndex.setDescription('The index of PPPoE statistics table, and the executing times of dispatching dependency tests.')
nqaPppoeRedialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaPppoeRedialIndex.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeRedialIndex.setDescription('The index of PPPoE statistics table, and the redialing times of dispatching dependency tests.')
nqaPppoeStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dialupSuccess", 1), ("dialupFail", 2), ("stop", 3), ("exceptionStop", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsCompletions.setDescription('The status of PPPoE operation.')
nqaPppoeStatsCurrentPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discovery", 1), ("lcp", 2), ("authorization", 3), ("ncp", 4), ("online", 5), ("stop", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeStatsCurrentPhase.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsCurrentPhase.setDescription('The current phase of PPPoE operation.')
nqaPppoeStatsErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("other", 1), ("timeout", 2), ("paramNegotiateFail", 3), ("userAuthenticationFail", 4), ("peerDownRequest", 5), ("noError", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeStatsErrorMessage.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsErrorMessage.setDescription('The error message result of PPPoE operation.')
nqaPppoeDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeDiscoveryTimeout.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeDiscoveryTimeout.setDescription('The time for discovery of PPPoE operation.')
nqaPppoeLcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeLcpTimeout.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeLcpTimeout.setDescription('The time for lcp negotiate of PPPoE operation.')
nqaPppoeAuthorizationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeAuthorizationTimeout.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeAuthorizationTimeout.setDescription('The time for authentication of PPPoE operation.')
nqaPppoeNcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeNcpTimeout.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeNcpTimeout.setDescription('The time for ncp negotiate of PPPoE operation.')
nqaPppoeConnectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeConnectionTime.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeConnectionTime.setDescription('The time for connection of PPPoE operation.')
nqaPppoeClientSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeClientSessionId.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeClientSessionId.setDescription('The client sessionID of PPPoE operation.')
nqaPppoeClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeClientIpAddress.setDescription('The client ip address of PPPoE operation.')
nqaPppoeGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 4, 9, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaPppoeGatewayIpAddress.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeGatewayIpAddress.setDescription('The gateway ip address of PPPoE operation.')
nqaHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5))
nqaHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1), )
if mibBuilder.loadTexts: nqaHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryTable.setDescription('Defines the Remote Operations test History Table for storing the results of a test operation.')
nqaHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaHistoryIndex"), (0, "NQA-MIB", "nqaHistoryHopIndex"), (0, "NQA-MIB", "nqaHistoryProbeIndex"))
if mibBuilder.loadTexts: nqaHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryEntry.setDescription('Defines a table for storing the results of a test operation. Entries in this table are limited by the value of the corresponding nqaAdminParaHistoryRowMax.')
nqaHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryIndex.setDescription('The history table index and times for dispatching dependency tests.')
nqaHistoryHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaHistoryHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryHopIndex.setDescription('The hop index. If the test type is Traceroute or LSP Traceroute, the entry only defines one hop. For other types, the default value is 1.')
nqaHistoryProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaHistoryProbeIndex.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryProbeIndex.setDescription('The probe index of tests.')
nqaHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHistoryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryTimeStamp.setDescription('The start time stamp of a probe.')
nqaHistoryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHistoryAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryAddressType.setDescription('The address type of history records.')
nqaHistoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHistoryAddress.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryAddress.setDescription('The destination address of tests. For Traceroute, it is the destination address of each hop. ')
nqaHistoryCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHistoryCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryCompletionTime.setDescription('The amount of time measured in milliseconds from when a probe was sent to when its response was received or when it timed out. The value of this object is reported as 0 when it is not possible to transmit a probe.')
nqaHistoryFinishState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("drop", 3), ("busy", 4), ("overThreshold", 5), ("disconnected", 6), ("noConnected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHistoryFinishState.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryFinishState.setDescription('The result of a test operation made by a remote host for a particular probe.')
nqaHistoryLastRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaHistoryLastRC.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryLastRC.setDescription('The last implementation method specific reply code received. If the ICMP Echo capability is being used then a successful probe ends when an ICMP response is received that contains the code ICMP_ECHOREPLY(0). The ICMP responses are defined normally in the ip_icmp include file.')
nqaMpingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2), )
if mibBuilder.loadTexts: nqaMpingHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryTable.setDescription('Defines the Remote Operations Mping test History Table for storing the results of a test operation.')
nqaMpingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaMpingHistoryIndex"), (0, "NQA-MIB", "nqaMpingHistoryReceiverIndex"), (0, "NQA-MIB", "nqaMpingHistoryResponseIndex"))
if mibBuilder.loadTexts: nqaMpingHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryEntry.setDescription('Defines a table for storing the results of a test operation. Entries in this table are limited by the value of the corresponding nqaAdminParaHistoryRowMax.')
nqaMpingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMpingHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryIndex.setDescription('The Mping history table index and times for dispatching dependency tests.')
nqaMpingHistoryReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMpingHistoryReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryReceiverIndex.setDescription('The index of receiver ,that received mping request packets and response reply packets .')
nqaMpingHistoryResponseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMpingHistoryResponseIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryResponseIndex.setDescription('The index of response packets send by receiver')
nqaMpingHistoryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryAddressType.setDescription('The address type of history records.')
nqaMpingHistoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryAddress.setDescription('The destination address of tests. ')
nqaMpingHistoryReceiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryReceiverAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryReceiverAddress.setDescription('The source address of response package of tests. ')
nqaMpingHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryTimeStamp.setDescription('The start time stamp of a probe.')
nqaMpingHistoryCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 8), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryCompletionTime.setDescription('The completion time of a probe in milliseconds.')
nqaMpingHistoryFinishState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("drop", 3), ("busy", 4), ("overThreshold", 5), ("disconnected", 6), ("noConnected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryFinishState.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryFinishState.setDescription('The result of a test operation made by a remote host for a particular probe.')
nqaMpingHistoryLastRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryLastRC.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryLastRC.setDescription('The last reply code received.')
nqaMpingHistoryFibHit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMpingHistoryFibHit.setStatus('current')
if mibBuilder.loadTexts: nqaMpingHistoryFibHit.setDescription('Whether the fib is hit on the device which received the packet.')
nqaMtracertHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3), )
if mibBuilder.loadTexts: nqaMtracertHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryTable.setDescription('Defines the Remote MtracertOperations test History Table for storing the results of a test operation.')
nqaMtracertHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaMtracertHistoryIndex"), (0, "NQA-MIB", "nqaMtracertHistoryHopIndex"))
if mibBuilder.loadTexts: nqaMtracertHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryEntry.setDescription('Defines a table for storing the results of a test operation. Entries in this table are limited by the value of the corresponding nqaAdminParaHistoryRowMax.')
nqaMtracertHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMtracertHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryIndex.setDescription('The Mtracert history table index and times for dispatching dependency tests.')
nqaMtracertHistoryHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaMtracertHistoryHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryHopIndex.setDescription('The index of Mtracert hop. ')
nqaMtracertHistoryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryAddressType.setDescription('The address type of history records.')
nqaMtracertHistoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryAddress.setDescription('The destination address of tests. For Traceroute, it is the destination address of each hop. ')
nqaMtracertHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryTimeStamp.setDescription('The start time stamp of a probe.')
nqaMtracertHistoryCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 6), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryCompletionTime.setDescription('The amount of time measured in milliseconds from when a probe was sent to when its response was received or when it timed out. The value of this object is reported as 0 when it is not possible to transmit a probe.')
nqaMtracertHistoryLastRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryLastRC.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryLastRC.setDescription('The last implementation method specific reply code received. If the ICMP Echo capability is being used then a successful probe ends when an ICMP response is received that contains the code ICMP_ECHOREPLY(0). The ICMP responses are defined normally in the ip_icmp include file.')
nqaMtracertHistoryCurQueryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("maxHops", 1), ("hopByHop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryCurQueryMode.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryCurQueryMode.setDescription('The current query mode.')
nqaMtracertHistoryQueryArrivalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryQueryArrivalTime.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryQueryArrivalTime.setDescription('The Query Arrival Time is a 32-bit NTP timestamp specifying the arrival time of the traceroute request packet at this router.')
nqaMtracertHistoryIncomingIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryIncomingIfAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryIncomingIfAddress.setDescription('This field specifies the address of the interface on which packets from this source and group are expected to arrive, or 0 if unknown.')
nqaMtracertHistoryOutgoingIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryOutgoingIfAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryOutgoingIfAddress.setDescription('This field specifies the address of the interface on which packets from this source and group flow to the specified destination, or 0 if unknown.')
nqaMtracertHistoryPreHopRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryPreHopRouterAddress.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryPreHopRouterAddress.setDescription('This field specifies the router from which this router expects packets from this source. ')
nqaMtracertHistoryInputPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryInputPacketCount.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryInputPacketCount.setDescription('This field contains the number of multicast packets received for all groups and sources on the incoming interface, or 0xffffffff if no count can be reported. This counter should have the same value as ifInMulticastPkts from the IF-MIB for this interface.')
nqaMtracertHistoryOutputPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryOutputPacketCount.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryOutputPacketCount.setDescription('This field contains the number of multicast packets that have been transmitted or queued for transmission for all groups and sources on the outgoing interface, or 0xffffffff if no count can be reported. This counter should have the same value as ifOutMulti-castPkts from the IF-MIB for this interface.')
nqaMtracertHistoryTotalSGPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryTotalSGPacketCount.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryTotalSGPacketCount.setDescription('This field counts the number of packets from the specified source forwarded by this router to the specified group, or 0xffffffff if no count can be reported. This counter should have the same value as ipMRoutePkts from the IPMROUTE-STD-MIB for this forwarding entry.')
nqaMtracertHistoryRtgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("dvmrp", 1), ("mospf", 2), ("pim", 3), ("cbt", 4), ("pimUsingSpecRteTab", 5), ("pimUsingStaticRte", 6), ("dvmrpUsingStaticRte", 7), ("pimUsingMBGPRte", 8), ("cbtUsingSpecRteTab", 9), ("cbtUsingStaticRte", 10), ("pimUsingState", 11), ("unknownProtocol", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryRtgProtocol.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryRtgProtocol.setDescription('This field describes the routing protocol in use between this router and the previous-hop router.')
nqaMtracertHistoryFwdTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryFwdTTL.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryFwdTTL.setDescription('This field contains the TTL that a packet is required to have before it will be forwarded over the outgoing interface.')
nqaMtracertHistoryFwdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 130, 131, 132, 255))).clone(namedValues=NamedValues(("noError", 1), ("wrongIf", 2), ("pruneSent", 3), ("pruneRCVD", 4), ("scoped", 5), ("noRoute", 6), ("wrongLastHop", 7), ("notForwarding", 8), ("reachedRP", 9), ("noMulticast", 11), ("infoHidden", 12), ("noSpace", 130), ("oldRouter", 131), ("adminProhib", 132), ("unknownError", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistoryFwdCode.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistoryFwdCode.setDescription('This field contains a forwarding information/error code. noError(1): No error wrongIf(2): Traceroute request arrived on an interface to which this router would not forward for this source,group,destination. pruneSent(3): This router has sent a prune upstream which applies to the source and group in the tracer- oute request. pruneRCVD(4): This router has stopped forwarding for this source and group in response to a request from the next hop router. scoped(5): The group is subject to administrative scoping at this hop. noRoute(6): This router has no route for the source or group and no way to determine a potential route. wrongLastHop(7): This router is not the proper last-hop router. notForwarding(8):This router is not forwarding this source,group out the outgoing interface for an unspecified reason. reachedRP(9): Reached Rendez-vous Point or Core rpfIf(10): Traceroute request arrived on the expected RPF interface for this source,group. noMulticast(11): Traceroute request arrived on an interface which is not enabled for multicast. infoHidden(12): One or more hops have been hidden from this trace. noSpace(13): There was not enough room to insert another response data block in the packet. oldRouter(14): The previous hop router does not understand traceroute requests. adminProhib(15): Traceroute is administratively prohibited. ')
nqaMtracertHistroyFinishState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("busy", 3), ("drop", 4), ("overThreshold", 5), ("disconnected", 6), ("noConnected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMtracertHistroyFinishState.setStatus('current')
if mibBuilder.loadTexts: nqaMtracertHistroyFinishState.setDescription('The finish state of a probe.')
nqaVplsMacTracertHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4), )
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryTable.setDescription('Defines the VPLS mac trace Operations test History Table for storing the results of a test operation.')
nqaVplsMacTracertHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryIndex"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryHopIndex"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryResponseIndex"))
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryEntry.setDescription('Defines a table for storing the results of a test operation. Entries in this table are limited by the value of the corresponding nqaAdminParaHistoryRowMax.')
nqaVplsMacTracertHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryIndex.setDescription('The VPLS mac trace history table index and times for dispatching dependency tests.')
nqaVplsMacTracertHistoryHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryHopIndex.setDescription('The index of VPLS mac trace hop. ')
nqaVplsMacTracertHistoryResponseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryResponseIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryResponseIndex.setDescription('The index of VPLS mac trace reply packet per hop.')
nqaVplsMacTracertHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryTimeStamp.setDescription('The start time stamp of a probe.')
nqaVplsMacTracertHistoryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryAddressType.setDescription('The address type of history records.')
nqaVplsMacTracertHistoryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryAddress.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryAddress.setDescription('The destination address of tests. For Traceroute, it is the destination address of each hop. ')
nqaVplsMacTracertHistoryCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryCompletionTime.setDescription('The completion time of a probe in milliseconds. The amount of time measured in milliseconds from when a probe was sent to when its response was received or when it timed out. The value of this object is reported as 0 when it is not possible to transmit a probe.')
nqaVplsMacTracertHistoryFinishState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("drop", 3), ("busy", 4), ("overThreshold", 5), ("disconnected", 6), ("noConnected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryFinishState.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryFinishState.setDescription('The finish state of a probe.')
nqaVplsMacTracertHistoryHitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryHitFlag.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryHitFlag.setDescription('Hit Flag.')
nqaVplsMacTracertHistoryDSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSCount.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSCount.setDescription('The count of Downstreams.')
nqaVplsMacTracertHistorySuccessPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistorySuccessPathNode.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistorySuccessPathNode.setDescription('This object indicates whether it is a node along the path that passes the Trace test. By default, the value is false, indicating that the object is not a node along the path that passes the Trace test.')
nqaVplsMacTracertHistoryDSTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 5), )
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSTable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSTable.setDescription('Defines the VPLS mac trace Operations test History Downstreanm Table for storing the results of a test operation.')
nqaVplsMacTracertHistoryDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 5, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryIndex"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryHopIndex"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryResponseIndex"), (0, "NQA-MIB", "nqaVplsMacTracertHistoryDSIndex"))
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSEntry.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSEntry.setDescription('Defines a table for storing the results of a test operation. Entries in this table are limited by the value of the corresponding nqaAdminParaHistoryRowMax.')
nqaVplsMacTracertHistoryDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSIndex.setDescription('The VPLS mac trace history DS table index.')
nqaVplsMacTracertHistoryDSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSAddress.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMacTracertHistoryDSAddress.setDescription('DS address.')
nqaVplsMTraceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6), )
if mibBuilder.loadTexts: nqaVplsMTraceHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryTable.setDescription('Defines the remote vpls multicast trace operations test history table for storing the results of a test operation.')
nqaVplsMTraceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaVplsMTraceHistoryIndex"), (0, "NQA-MIB", "nqaVplsMTraceHistoryHopIndex"), (0, "NQA-MIB", "nqaVplsMTraceHistoryResponseIndex"))
if mibBuilder.loadTexts: nqaVplsMTraceHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryEntry.setDescription('Defines a table for storing the results of a test operation. Entries in this table are limited by the value of the corresponding nqaAdminParaHistoryRowMax.')
nqaVplsMTraceHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIndex.setDescription('The vpls multicast trace history table index and times for dispatching dependency tests.')
nqaVplsMTraceHistoryHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: nqaVplsMTraceHistoryHopIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryHopIndex.setDescription('The index of vpls multicast trace hop. ')
nqaVplsMTraceHistoryResponseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaVplsMTraceHistoryResponseIndex.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryResponseIndex.setDescription('The index of vpls multicast trace responser. ')
nqaVplsMTraceHistoryResponserAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryResponserAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryResponserAddressType.setDescription("The type of history record's Responser address.")
nqaVplsMTraceHistoryResponserAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryResponserAddress.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryResponserAddress.setDescription('The Responser address of tests.')
nqaVplsMTraceHistoryUpStreamAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryUpStreamAddressType.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryUpStreamAddressType.setDescription("The type of history records' last hop address.")
nqaVplsMTraceHistoryUpStreamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryUpStreamAddress.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryUpStreamAddress.setDescription('The last hop address of tests.')
nqaVplsMTraceHistoryReceivedTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('time-to-live value').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryReceivedTtl.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryReceivedTtl.setDescription('The value of ttl in the received packet.')
nqaVplsMTraceHistoryIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPVersion.setDescription('The IGMP protocol version.')
nqaVplsMTraceHistoryIGMPSnpgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 10), EnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPSnpgEnable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPSnpgEnable.setDescription('The IGMP snooping enable state.')
nqaVplsMTraceHistoryIGMPProxyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 11), EnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPProxyEnable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPProxyEnable.setDescription('The IGMP proxy enable switch.')
nqaVplsMTraceHistoryIGMPRouterPortLearningEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 12), EnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPRouterPortLearningEnable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryIGMPRouterPortLearningEnable.setDescription('The IGMP router port learning enable switch.')
nqaVplsMTraceHistoryRequireRouterAlertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 13), EnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRequireRouterAlertEnable.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRequireRouterAlertEnable.setDescription('The route alert requirement enable switch.')
nqaVplsMTraceHistoryForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryForwardMode.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryForwardMode.setDescription('The forward mode value.')
nqaVplsMTraceHistoryHitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryHitFlag.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryHitFlag.setDescription('Whether the fib is hit on the device which received the packet.')
nqaVplsMTraceHistoryPWExist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryPWExist.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryPWExist.setDescription('Whether the forward PW is exist.')
nqaVplsMTraceHistoryGroupPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryGroupPolicy.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryGroupPolicy.setDescription('The ACL judge result.')
nqaVplsMTraceHistoryCACExist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryCACExist.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryCACExist.setDescription('Whether the connection admission control comfiguration of current VSI is exist.')
nqaVplsMTraceHistoryRcvQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRcvQueryCount.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRcvQueryCount.setDescription('The received query packet number for current IGMP version of current VSI.')
nqaVplsMTraceHistoryRcvReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRcvReportCount.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRcvReportCount.setDescription('The received report packet number for current IGMP version of current VSI.')
nqaVplsMTraceHistoryRcvLeaveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRcvLeaveCount.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryRcvLeaveCount.setDescription('The received leave packet number for current IGMP version of current VSI.')
nqaVplsMTraceHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryTimeStamp.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryTimeStamp.setDescription('The start time stamp of a probe.')
nqaVplsMTraceHistoryCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 23), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryCompletionTime.setDescription('The amount of time measured in milliseconds from when a probe was sent to when its response was received or when it timed out. The value of this object is reported as 0 when it is not possible to transmit a probe.')
nqaVplsMTraceHistoryLastRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryLastRC.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryLastRC.setDescription('The last implementation method specific reply code received.')
nqaVplsMTraceHistoryLastRSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryLastRSC.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryLastRSC.setDescription('The last implementation method specific reply sub code received.')
nqaVplsMTraceHistoryFinishState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("drop", 3), ("busy", 4), ("overThreshold", 5), ("disconnected", 6), ("noConnected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistoryFinishState.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistoryFinishState.setDescription('The finish state of a probe.')
nqaVplsMTraceHistorySuccessPathNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onPath", 1), ("notonPath", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaVplsMTraceHistorySuccessPathNode.setStatus('current')
if mibBuilder.loadTexts: nqaVplsMTraceHistorySuccessPathNode.setDescription('Whether the response router is on the path of a probe. The default value is notonPath(2).')
nqaMacTraceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7), )
if mibBuilder.loadTexts: nqaMacTraceHistoryTable.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryTable.setDescription('This object defines a list of historical MAC trace test instances for storing the running results of test instances.')
nqaMacTraceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaMacTraceHistoryIndex"), (0, "NQA-MIB", "nqaMacTraceHistoryReceiveOrder"))
if mibBuilder.loadTexts: nqaMacTraceHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryEntry.setDescription('This object defines a table for storing the running results of test instances. The number of entries in this table is limited by the value of nqaAdminParaHistoryRowMax. ')
nqaMacTraceHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMacTraceHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryIndex.setDescription('The object indicates the index of the MAC tract history table and the number of times for dispatching dependency tests.')
nqaMacTraceHistoryReceiveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaMacTraceHistoryReceiveOrder.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryReceiveOrder.setDescription('This object indicates the sequence in which LTRs are received.')
nqaMacTraceHistoryTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryTTL.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryTTL.setDescription('This object indicates the TTL of the LTR.')
nqaMacTraceHistorySeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistorySeqNumber.setReference('802.1ag clause 12.14.7.5')
if mibBuilder.loadTexts: nqaMacTraceHistorySeqNumber.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistorySeqNumber.setDescription('This object indicates the sequence number of the LTR.')
nqaMacTraceHistoryCompletionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 5), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryCompletionTime.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryCompletionTime.setDescription('This object indicates the RTT (ms) of the response packet.')
nqaMacTraceHistoryForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryForwarded.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryForwarded.setDescription('This object indicates whether the device that sends LTRs continues to forward LTMs.')
nqaMacTraceHistoryTerminalMep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryTerminalMep.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryTerminalMep.setDescription('This object indicates whether the LTR is sent by an MEP.')
nqaMacTraceHistoryRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 8), HWDot1agCfmRelayActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryRelayAction.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryRelayAction.setDescription('This object indicates the value of the Relay Action field in the LTR.')
nqaMacTraceHistoryIngressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 9), HWDot1agCfmIngressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryIngressAction.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryIngressAction.setDescription('This object indicates the value of the Ingress Action field in the LTR.')
nqaMacTraceHistoryIngressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryIngressMac.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryIngressMac.setDescription('This object indicates the physical MAC address carried in the ingress MAC address field in the LTR.')
nqaMacTraceHistoryIngressIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryIngressIfName.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryIngressIfName.setDescription('This object indicates the name of the inbound interface of the LTR.')
nqaMacTraceHistoryEgressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 12), HWDot1agCfmEgressActionFieldValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryEgressAction.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryEgressAction.setDescription('This object indicates the value of the Egress Action field in the LTR.')
nqaMacTraceHistoryEgressMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryEgressMac.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryEgressMac.setDescription('This object indicates the MAC address in the Egress MAC address field of the LTR.')
nqaMacTraceHistoryEgressIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 5, 7, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMacTraceHistoryEgressIfName.setStatus('current')
if mibBuilder.loadTexts: nqaMacTraceHistoryEgressIfName.setDescription('This object indicates the name of the interface that forwards the LTR.')
nqaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6))
nqaResultsProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 1)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaResultsAddressType"), ("NQA-MIB", "nqaResultsAddress"), ("NQA-MIB", "nqaResultsCompletionTimeMin"), ("NQA-MIB", "nqaResultsCompletionTimeMax"), ("NQA-MIB", "nqaResultsSumCompletionTime"), ("NQA-MIB", "nqaResultsProbeResponses"), ("NQA-MIB", "nqaResultsSentProbes"), ("NQA-MIB", "nqaResultsSumCompletionTime2Low"), ("NQA-MIB", "nqaResultsSumCompletionTime2High"), ("NQA-MIB", "nqaResultsLastGoodProbe"), ("NQA-MIB", "nqaResultsLastGoodPath"))
if mibBuilder.loadTexts: nqaResultsProbeFailed.setStatus('current')
if mibBuilder.loadTexts: nqaResultsProbeFailed.setDescription('Generated when a probe failure is detected when the corresponding nqaAdminParaTrapGeneration object is set to probeFailure(0) subject to the value of nqaAdminParaTrapProbeFailureFilter. The object nqaAdminParaTrapProbeFailureFilter can be used to specify the number of successive probe failures that are required before this notification can be generated.(except for HTTP or Jitter or FTP)')
nqaResultsTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 2)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaResultsAddressType"), ("NQA-MIB", "nqaResultsAddress"), ("NQA-MIB", "nqaResultsCompletionTimeMin"), ("NQA-MIB", "nqaResultsCompletionTimeMax"), ("NQA-MIB", "nqaResultsSumCompletionTime"), ("NQA-MIB", "nqaResultsProbeResponses"), ("NQA-MIB", "nqaResultsSentProbes"), ("NQA-MIB", "nqaResultsSumCompletionTime2Low"), ("NQA-MIB", "nqaResultsSumCompletionTime2High"), ("NQA-MIB", "nqaResultsLastGoodProbe"), ("NQA-MIB", "nqaResultsLastGoodPath"))
if mibBuilder.loadTexts: nqaResultsTestFailed.setStatus('current')
if mibBuilder.loadTexts: nqaResultsTestFailed.setDescription('Generated when a nqa test is determined to have failed when the corresponding nqaAdminParaTrapGeneration object is set to testFailure(1). In this instance nqaAdminParaTrapTestFailureFilter should specify the number of probes in a test required to have failed in order to consider the test as failed. (Except for HTTP or Jitter or FTP)')
nqaResultsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 3)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaResultsAddressType"), ("NQA-MIB", "nqaResultsAddress"), ("NQA-MIB", "nqaResultsCompletionTimeMin"), ("NQA-MIB", "nqaResultsCompletionTimeMax"), ("NQA-MIB", "nqaResultsSumCompletionTime"), ("NQA-MIB", "nqaResultsProbeResponses"), ("NQA-MIB", "nqaResultsSentProbes"), ("NQA-MIB", "nqaResultsSumCompletionTime2Low"), ("NQA-MIB", "nqaResultsSumCompletionTime2High"), ("NQA-MIB", "nqaResultsLastGoodProbe"), ("NQA-MIB", "nqaResultsLastGoodPath"))
if mibBuilder.loadTexts: nqaResultsTestCompleted.setStatus('current')
if mibBuilder.loadTexts: nqaResultsTestCompleted.setDescription('Generated at the completion of a nqa test when the corresponding nqaAdminParaTrapGeneration object is set to testCompletion(2).(except for HTTP or Jitter or FTP)')
nqaResultsThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 4)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaResultsAddressType"), ("NQA-MIB", "nqaResultsAddress"), ("NQA-MIB", "nqaAdminCtrlThreshold1"), ("NQA-MIB", "nqaResultsCompletionTimeMax"), ("NQA-MIB", "nqaResultsRTDOverThresholds"))
if mibBuilder.loadTexts: nqaResultsThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: nqaResultsThresholdNotification.setDescription('If the time of executing tests exceeds the nqaAdminCtrlThreshold1, the system sends trap information.(except for HTTP or Jitter or FTP)')
nqaHTTPStatsProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 5)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaHTTPStatsDNSRTTSum"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTSum"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTSum"), ("NQA-MIB", "nqaHTTPStatsDNSServerTimeouts"), ("NQA-MIB", "nqaHTTPStatsTCPConnectTimeouts"), ("NQA-MIB", "nqaHTTPStatsTransactionTimeouts"), ("NQA-MIB", "nqaHTTPStatsDNSQueryErrors"), ("NQA-MIB", "nqaHTTPStatsTcpConnErrors"), ("NQA-MIB", "nqaHTTPStatsErrors"), ("NQA-MIB", "nqaHTTPStatsProbeResponses"), ("NQA-MIB", "nqaHTTPStatsSendProbes"))
if mibBuilder.loadTexts: nqaHTTPStatsProbeFailed.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsProbeFailed.setDescription('Generated when a probe failure is detected when the corresponding nqaAdminParaTrapGeneration object is set to probeFailure(0) subject to the value of nqaAdminParaTrapProbeFailureFilter. The object nqaAdminParaTrapProbeFailureFilter can be used to specify the number of successive probe failures that are required before this notification can be generated.(Only for HTTP)')
nqaHTTPStatsTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 6)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaHTTPStatsDNSRTTSum"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTSum"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTSum"), ("NQA-MIB", "nqaHTTPStatsDNSServerTimeouts"), ("NQA-MIB", "nqaHTTPStatsTCPConnectTimeouts"), ("NQA-MIB", "nqaHTTPStatsTransactionTimeouts"), ("NQA-MIB", "nqaHTTPStatsDNSQueryErrors"), ("NQA-MIB", "nqaHTTPStatsTcpConnErrors"), ("NQA-MIB", "nqaHTTPStatsErrors"), ("NQA-MIB", "nqaHTTPStatsProbeResponses"), ("NQA-MIB", "nqaHTTPStatsSendProbes"))
if mibBuilder.loadTexts: nqaHTTPStatsTestFailed.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTestFailed.setDescription('Generated when a HTTP test is determined to have failed when the corresponding nqaAdminParaTrapGeneration object is set to testFailure(1). In this instance nqaAdminParaTrapTestFailureFilter should specify the number of probes in a test required to have failed in order to consider the test as failed.(Only for HTTP)')
nqaHTTPStatsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 7)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaHTTPStatsDNSRTTSum"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTSum"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTSum"), ("NQA-MIB", "nqaHTTPStatsDNSServerTimeouts"), ("NQA-MIB", "nqaHTTPStatsTCPConnectTimeouts"), ("NQA-MIB", "nqaHTTPStatsTransactionTimeouts"), ("NQA-MIB", "nqaHTTPStatsDNSQueryErrors"), ("NQA-MIB", "nqaHTTPStatsTcpConnErrors"), ("NQA-MIB", "nqaHTTPStatsErrors"), ("NQA-MIB", "nqaHTTPStatsProbeResponses"), ("NQA-MIB", "nqaHTTPStatsSendProbes"))
if mibBuilder.loadTexts: nqaHTTPStatsTestCompleted.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsTestCompleted.setDescription('Generated at the completion of a HTTP test when the corresponding nqaAdminParaTrapGeneration object is set to testCompletion(2).')
nqaHTTPStatsThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 8)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminCtrlThreshold1"), ("NQA-MIB", "nqaAdminCtrlThreshold2"), ("NQA-MIB", "nqaAdminCtrlThreshold3"), ("NQA-MIB", "nqaHTTPStatsDNSRTTMax"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTMax"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTMax"), ("NQA-MIB", "nqaHTTPStatsRTDOverThresholds"))
if mibBuilder.loadTexts: nqaHTTPStatsThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: nqaHTTPStatsThresholdNotification.setDescription('If the time of executing tests exceeds the nqaAdminCtrlThreshold1 or nqaAdminCtrlThreshold2 or nqaAdminCtrlThreshold3, the system sends trap information.(Only for HTTP)')
nqaJitterStatsProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 9)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaJitterStatsRTTSum"), ("NQA-MIB", "nqaJitterStatsRTTSum2Low"), ("NQA-MIB", "nqaJitterStatsRTTSum2High"), ("NQA-MIB", "nqaJitterStatsRTTMin"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsPacketOutOfSequences"), ("NQA-MIB", "nqaJitterStatsErrors"), ("NQA-MIB", "nqaJitterStatsBusies"), ("NQA-MIB", "nqaJitterStatsTimeouts"), ("NQA-MIB", "nqaJitterStatsDrops"), ("NQA-MIB", "nqaJitterStatsProbeResponses"), ("NQA-MIB", "nqaJitterStatsSentProbes"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsJitterOut"), ("NQA-MIB", "nqaJitterStatsJitterIn"), ("NQA-MIB", "nqaJitterStatsOWSumSD"), ("NQA-MIB", "nqaJitterStatsOWSumDS"))
if mibBuilder.loadTexts: nqaJitterStatsProbeFailed.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsProbeFailed.setDescription('Generated when a probe failure is detected when the corresponding nqaAdminParaTrapGeneration object is set to probeFailure(0) subject to the value of nqaAdminParaTrapProbeFailureFilter. The object nqaAdminParaTrapProbeFailureFilter can be used to specify the number of successive probe failures that are required before this notification can be generated.(Only for Jitter)')
nqaJitterStatsTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 10)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaJitterStatsRTTSum"), ("NQA-MIB", "nqaJitterStatsRTTSum2Low"), ("NQA-MIB", "nqaJitterStatsRTTSum2High"), ("NQA-MIB", "nqaJitterStatsRTTMin"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsPacketOutOfSequences"), ("NQA-MIB", "nqaJitterStatsErrors"), ("NQA-MIB", "nqaJitterStatsBusies"), ("NQA-MIB", "nqaJitterStatsTimeouts"), ("NQA-MIB", "nqaJitterStatsDrops"), ("NQA-MIB", "nqaJitterStatsProbeResponses"), ("NQA-MIB", "nqaJitterStatsSentProbes"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsJitterOut"), ("NQA-MIB", "nqaJitterStatsJitterIn"), ("NQA-MIB", "nqaJitterStatsOWSumSD"), ("NQA-MIB", "nqaJitterStatsOWSumDS"))
if mibBuilder.loadTexts: nqaJitterStatsTestFailed.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsTestFailed.setDescription('Generated when a Jitter test is determined to have failed when the corresponding nqaAdminParaTrapGeneration object is set to testFailure(1). In this instance nqaAdminParaTrapTestFailureFilter should specify the number of probes in a test required to have failed in order to consider the test as failed.(Only for Jitter)')
nqaJitterStatsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 11)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaJitterStatsRTTSum"), ("NQA-MIB", "nqaJitterStatsRTTSum2Low"), ("NQA-MIB", "nqaJitterStatsRTTSum2High"), ("NQA-MIB", "nqaJitterStatsRTTMin"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsPacketOutOfSequences"), ("NQA-MIB", "nqaJitterStatsErrors"), ("NQA-MIB", "nqaJitterStatsBusies"), ("NQA-MIB", "nqaJitterStatsTimeouts"), ("NQA-MIB", "nqaJitterStatsDrops"), ("NQA-MIB", "nqaJitterStatsProbeResponses"), ("NQA-MIB", "nqaJitterStatsSentProbes"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsJitterOut"), ("NQA-MIB", "nqaJitterStatsJitterIn"), ("NQA-MIB", "nqaJitterStatsOWSumSD"), ("NQA-MIB", "nqaJitterStatsOWSumDS"))
if mibBuilder.loadTexts: nqaJitterStatsTestCompleted.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsTestCompleted.setDescription('Generated at the completion of a Jitter test when the corresponding nqaAdminParaTrapGeneration object is set to testCompletion(2). (Only for Jitter)')
nqaFTPStatsProbeFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 12)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaFTPStatsCtrlConnMaxTime"), ("NQA-MIB", "nqaFTPStatsDataConnMaxTime"), ("NQA-MIB", "nqaFTPStatsConnectSumTimeMax"), ("NQA-MIB", "nqaFTPStatsErrors"), ("NQA-MIB", "nqaFTPStatsTimeouts"), ("NQA-MIB", "nqaFTPStatsProbeResponses"), ("NQA-MIB", "nqaFTPStatsSendProbes"))
if mibBuilder.loadTexts: nqaFTPStatsProbeFailed.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsProbeFailed.setDescription('Generated when a probe failure is detected when the corresponding nqaAdminParaTrapGeneration object is set to probeFailure(0) subject to the value of nqaAdminParaTrapProbeFailureFilter. The object nqaAdminParaTrapProbeFailureFilter can be used to specify the number of successive probe failures that are required before this notification can be generated.(Only for FTP)')
nqaFTPStatsTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 13)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaFTPStatsCtrlConnMaxTime"), ("NQA-MIB", "nqaFTPStatsDataConnMaxTime"), ("NQA-MIB", "nqaFTPStatsConnectSumTimeMax"), ("NQA-MIB", "nqaFTPStatsErrors"), ("NQA-MIB", "nqaFTPStatsTimeouts"), ("NQA-MIB", "nqaFTPStatsProbeResponses"), ("NQA-MIB", "nqaFTPStatsSendProbes"))
if mibBuilder.loadTexts: nqaFTPStatsTestFailed.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsTestFailed.setDescription('Generated when a FTP test is determined to have failed when the corresponding nqaAdminParaTrapGeneration object is set to testFailure(1). In this instance nqaAdminParaTrapTestFailureFilter should specify the number of probes in a test required to have failed in order to consider the test as failed.(Only for FTP)')
nqaFTPStatsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 14)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaFTPStatsCtrlConnMaxTime"), ("NQA-MIB", "nqaFTPStatsDataConnMaxTime"), ("NQA-MIB", "nqaFTPStatsConnectSumTimeMax"), ("NQA-MIB", "nqaFTPStatsErrors"), ("NQA-MIB", "nqaFTPStatsTimeouts"), ("NQA-MIB", "nqaFTPStatsProbeResponses"), ("NQA-MIB", "nqaFTPStatsSendProbes"))
if mibBuilder.loadTexts: nqaFTPStatsTestCompleted.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsTestCompleted.setDescription('Generated at the completion of a FTP test when the corresponding nqaAdminParaTrapGeneration object is set to testCompletion(2). (Only for FTP)')
nqaFTPStatsThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 15)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminCtrlThreshold1"), ("NQA-MIB", "nqaAdminCtrlThreshold2"), ("NQA-MIB", "nqaFTPStatsCtrlConnMaxTime"), ("NQA-MIB", "nqaFTPStatsDataConnMaxTime"), ("NQA-MIB", "nqaFTPStatsRTDOverThresholds"))
if mibBuilder.loadTexts: nqaFTPStatsThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: nqaFTPStatsThresholdNotification.setDescription('If the time of executing tests exceeds the nqaAdminCtrlThreshold1 or nqaAdminCtrlThreshold2, the system sends trap information.(Only for FTP)')
nqaJitterStatsRTDThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 16)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminCtrlThreshold1"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsRTDOverThresholds"))
if mibBuilder.loadTexts: nqaJitterStatsRTDThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsRTDThresholdNotification.setDescription('If the time of executing tests exceeds the nqaAdminCtrlThreshold1, the system sends trap information. (Only for jitter)')
nqaJitterStatsOWDThresholdNotificationSD = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 17)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminCtrlThreshold2"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsOWDOverThresholdsSD"))
if mibBuilder.loadTexts: nqaJitterStatsOWDThresholdNotificationSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOWDThresholdNotificationSD.setDescription('If the time of executing tests exceeds the nqaAdminCtrlThreshold2 the system sends trap information. (Only for jitter)')
nqaJitterStatsOWDThresholdNotificationDS = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 18)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminCtrlThreshold3"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsOWDOverThresholdsDS"))
if mibBuilder.loadTexts: nqaJitterStatsOWDThresholdNotificationDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterStatsOWDThresholdNotificationDS.setDescription('If the time of executing tests exceeds the nqaAdminCtrlThreshold3 the system sends trap information. (Only for jitter)')
nqaNegotiateFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 19)).setObjects(("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminParaTargetPort"), ("NQA-MIB", "nqaAdminParaVrfName"))
if mibBuilder.loadTexts: nqaNegotiateFailed.setStatus('current')
if mibBuilder.loadTexts: nqaNegotiateFailed.setDescription('If negotiation between client and server failed,the system sends trap information.')
nqaRisingAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 20)).setObjects(("NQA-MIB", "nqaAlarmVariable"), ("NQA-MIB", "nqaAlarmSampleType"), ("NQA-MIB", "nqaAlarmValue"), ("NQA-MIB", "nqaAlarmRisingThreshold"), ("NQA-MIB", "nqaAlarmDescription"))
if mibBuilder.loadTexts: nqaRisingAlarmNotification.setStatus('current')
if mibBuilder.loadTexts: nqaRisingAlarmNotification.setDescription('Sending trap messages when the value of the monitored object exceeds nqaAlarmUpperThreshold.')
nqaFallingAlarmNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 21)).setObjects(("NQA-MIB", "nqaAlarmVariable"), ("NQA-MIB", "nqaAlarmSampleType"), ("NQA-MIB", "nqaAlarmValue"), ("NQA-MIB", "nqaAlarmFallingThreshold"), ("NQA-MIB", "nqaAlarmDescription"))
if mibBuilder.loadTexts: nqaFallingAlarmNotification.setStatus('current')
if mibBuilder.loadTexts: nqaFallingAlarmNotification.setDescription('Sending trap messages when the value of the monitored object is under nqaAlarmLowerThreshold.')
nqaFtpSaveRecordNotification = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 22)).setObjects(("NQA-MIB", "nqaFtpSaveRecordLastFileName"))
if mibBuilder.loadTexts: nqaFtpSaveRecordNotification.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordNotification.setDescription('Sending trap messages when saving a test result to the FTP server is completed.')
nqaPppoeStatsTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 23)).setObjects(("NQA-MIB", "nqaPppoeStatsCompletions"), ("NQA-MIB", "nqaPppoeStatsCurrentPhase"), ("NQA-MIB", "nqaPppoeStatsErrorMessage"), ("NQA-MIB", "nqaPppoeDiscoveryTimeout"), ("NQA-MIB", "nqaPppoeLcpTimeout"), ("NQA-MIB", "nqaPppoeAuthorizationTimeout"), ("NQA-MIB", "nqaPppoeNcpTimeout"), ("NQA-MIB", "nqaPppoeConnectionTime"), ("NQA-MIB", "nqaPppoeClientSessionId"), ("NQA-MIB", "nqaPppoeClientIpAddress"), ("NQA-MIB", "nqaPppoeGatewayIpAddress"))
if mibBuilder.loadTexts: nqaPppoeStatsTestFailed.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsTestFailed.setDescription('Generated when a PPPoE test is determined to have failed when the corresponding nqaAdminParaTrapGeneration object is set to testFailure(1). (Only for PPPoE))')
nqaPppoeStatsTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 6, 24)).setObjects(("NQA-MIB", "nqaPppoeStatsCompletions"), ("NQA-MIB", "nqaPppoeStatsCurrentPhase"), ("NQA-MIB", "nqaPppoeStatsErrorMessage"), ("NQA-MIB", "nqaPppoeDiscoveryTimeout"), ("NQA-MIB", "nqaPppoeLcpTimeout"), ("NQA-MIB", "nqaPppoeAuthorizationTimeout"), ("NQA-MIB", "nqaPppoeNcpTimeout"), ("NQA-MIB", "nqaPppoeConnectionTime"), ("NQA-MIB", "nqaPppoeClientSessionId"), ("NQA-MIB", "nqaPppoeClientIpAddress"), ("NQA-MIB", "nqaPppoeGatewayIpAddress"))
if mibBuilder.loadTexts: nqaPppoeStatsTestCompleted.setStatus('current')
if mibBuilder.loadTexts: nqaPppoeStatsTestCompleted.setDescription('Generated at the completion of a PPPoE test when the corresponding nqaAdminParaTrapGeneration object is set to testCompletion(2). (Only for PPPoE)')
nqaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7))
nqaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1))
nqaBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 1)).setObjects(("NQA-MIB", "nqaVersion"), ("NQA-MIB", "nqaReset"), ("NQA-MIB", "nqaTimeOfLastSetError"), ("NQA-MIB", "nqaLastSetError"), ("NQA-MIB", "nqaEnable"), ("NQA-MIB", "nqaNumOfCurrentCtrlEntry"), ("NQA-MIB", "nqaMaxConcurrentRequests"), ("NQA-MIB", "nqaMaxNumOfRequests"), ("NQA-MIB", "nqaJitterVersion"), ("NQA-MIB", "nqaSupportTestType"), ("NQA-MIB", "nqaSupportServerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaBaseGroup = nqaBaseGroup.setStatus('current')
if mibBuilder.loadTexts: nqaBaseGroup.setDescription('Description.')
nqaAdminGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 2)).setObjects(("NQA-MIB", "nqaAdminCtrlTag"), ("NQA-MIB", "nqaAdminCtrlType"), ("NQA-MIB", "nqaAdminCtrlFrequency"), ("NQA-MIB", "nqaAdminCtrlTimeOut"), ("NQA-MIB", "nqaAdminCtrlThreshold1"), ("NQA-MIB", "nqaAdminCtrlThreshold2"), ("NQA-MIB", "nqaAdminCtrlThreshold3"), ("NQA-MIB", "nqaAdminCtrlStatus"), ("NQA-MIB", "nqaAdminParaTargetAddressType"), ("NQA-MIB", "nqaAdminParaTargetAddress"), ("NQA-MIB", "nqaAdminParaTargetPort"), ("NQA-MIB", "nqaAdminParaSourceAddressType"), ("NQA-MIB", "nqaAdminParaSourceAddress"), ("NQA-MIB", "nqaAdminParaSourcePort"), ("NQA-MIB", "nqaAdminParaMaxTtl"), ("NQA-MIB", "nqaAdminParaInitialTtl"), ("NQA-MIB", "nqaAdminParaStorageType"), ("NQA-MIB", "nqaAdminParaMaxFailures"), ("NQA-MIB", "nqaAdminParaDontFragment"), ("NQA-MIB", "nqaAdminParaDataSize"), ("NQA-MIB", "nqaAdminParaDataFill"), ("NQA-MIB", "nqaAdminParaIfIndex"), ("NQA-MIB", "nqaAdminParaByPassRouteTable"), ("NQA-MIB", "nqaAdminParaMiscOptions"), ("NQA-MIB", "nqaAdminParaProbeCount"), ("NQA-MIB", "nqaAdminParaTrapGeneration"), ("NQA-MIB", "nqaAdminParaTrapProbeFailureFilter"), ("NQA-MIB", "nqaAdminParaTrapTestFailureFilter"), ("NQA-MIB", "nqaAdminParaDSField"), ("NQA-MIB", "nqaAdminParaDnsServerAddressType"), ("NQA-MIB", "nqaAdminParaDnsServerAddress"), ("NQA-MIB", "nqaAdminParaOperation"), ("NQA-MIB", "nqaAdminParaHttpVersion"), ("NQA-MIB", "nqaAdminParaHttpOperationString"), ("NQA-MIB", "nqaAdminParaTestFailurePercent"), ("NQA-MIB", "nqaAdminParaFtpUserName"), ("NQA-MIB", "nqaAdminParaFtpPassword"), ("NQA-MIB", "nqaAdminParaFtpFilePath"), ("NQA-MIB", "nqaAdminParaFtpFileSize"), ("NQA-MIB", "nqaAdminParaInterval"), ("NQA-MIB", "nqaAdminParaNumPackets"), ("NQA-MIB", "nqaAdminParaVrfName"), ("NQA-MIB", "nqaAdminParaLspAddressType"), ("NQA-MIB", "nqaAdminParaLspAddressMask"), ("NQA-MIB", "nqaAdminParaLspIpAddress"), ("NQA-MIB", "nqaAdminParaLspPWE3VcId"), ("NQA-MIB", "nqaAdminParaLspPWE3Type"), ("NQA-MIB", "nqaAdminParaLspPWE3Option"), ("NQA-MIB", "nqaAdminParaLspPWE3RemoteVcId"), ("NQA-MIB", "nqaAdminParaLspPWE3RemoteAddress"), ("NQA-MIB", "nqaAdminParaLspExp"), ("NQA-MIB", "nqaAdminParaLspReplyMode"), ("NQA-MIB", "nqaAdminParaResultRowMax"), ("NQA-MIB", "nqaAdminParaHistoryRowMax"), ("NQA-MIB", "nqaAdminParaCreateHopsEntries"), ("NQA-MIB", "nqaAdminParaLspVCType"), ("NQA-MIB", "nqaAdminParaMTraceLastHopAddress"), ("NQA-MIB", "nqaAdminParaMTraceSourceAddress"), ("NQA-MIB", "nqaAdminParaMTraceGroupAddress"), ("NQA-MIB", "nqaAdminParaMTraceMaxTtl"), ("NQA-MIB", "nqaAdminParaMTraceSendMode"), ("NQA-MIB", "nqaAdminParaMTraceResponseTtl"), ("NQA-MIB", "nqaAdminParaMTraceResponseAddressType"), ("NQA-MIB", "nqaAdminParaMTraceResponseAddress"), ("NQA-MIB", "nqaAdminParaDistanceNodeType"), ("NQA-MIB", "nqaAdminParaMacAddress"), ("NQA-MIB", "nqaAdminParaRMepID"), ("NQA-MIB", "nqaAdminParaMDName"), ("NQA-MIB", "nqaAdminParaMAName"), ("NQA-MIB", "nqaAdminParaMacTunnelName"), ("NQA-MIB", "nqaAdminParaCodecType"), ("NQA-MIB", "nqaAdminParaIcpifAdvFactor"), ("NQA-MIB", "nqaAdminParaFtpMode"), ("NQA-MIB", "nqaScheduleStartType"), ("NQA-MIB", "nqaScheduleStartTime"), ("NQA-MIB", "nqaScheduleEndType"), ("NQA-MIB", "nqaScheduleEndTime"), ("NQA-MIB", "nqaScheduleAgeTime"), ("NQA-MIB", "nqaScheduleNumOfInitiations"), ("NQA-MIB", "nqaAdminParaIcmpJitterMode"), ("NQA-MIB", "nqaAdminParaPathMtuDiscoveryPathMtuMax"), ("NQA-MIB", "nqaAdminParaPathMtuStep"), ("NQA-MIB", "nqaScheduleOperStatus"), ("NQA-MIB", "nqaScheduleElapsedTime"), ("NQA-MIB", "nqaScheduleLastFinishIndex"), ("NQA-MIB", "nqaScheduleLastCollectIndex"), ("NQA-MIB", "nqaGroupStatusType"), ("NQA-MIB", "nqaGroupPeriod"), ("NQA-MIB", "nqaGroupLeaderOwnerIndex"), ("NQA-MIB", "nqaGroupLeaderTestName"), ("NQA-MIB", "nqaGroupMemberNum"), ("NQA-MIB", "nqaGroupMemberFree"), ("NQA-MIB", "nqaAdminParaHardwareBased"), ("NQA-MIB", "nqaAdminParaPppoeUserName"), ("NQA-MIB", "nqaAdminParaPppoePassword"), ("NQA-MIB", "nqaAdminParaPppoeVlanIf"), ("NQA-MIB", "nqaAdminParaPppoeAuthenticationMode"), ("NQA-MIB", "nqaAdminParaPppoeRedialUpTimes"), ("NQA-MIB", "nqaAdminParaPppoeInterval"), ("NQA-MIB", "nqaAdminParaVsiName"), ("NQA-MIB", "nqaAdminParaVlanId"), ("NQA-MIB", "nqaAdminParaLspTunnelType"), ("NQA-MIB", "nqaAdminParaLspNextHopAddress"), ("NQA-MIB", "nqaAdminParaLspVersion"), ("NQA-MIB", "nqaAdminParaRemoteAddressType"), ("NQA-MIB", "nqaAdminParaRemoteAddress"), ("NQA-MIB", "nqaAdminParaTimeUnit"), ("NQA-MIB", "nqaAdminExtPara1"), ("NQA-MIB", "nqaAdminExtPara2"), ("NQA-MIB", "nqaAdminExtPara3"), ("NQA-MIB", "nqaAdminExtPara4"), ("NQA-MIB", "nqaAdminExtPara5"), ("NQA-MIB", "nqaAdminExtPara6"), ("NQA-MIB", "nqaAdminExtPara7"), ("NQA-MIB", "nqaAdminExtPara8"), ("NQA-MIB", "nqaAdminExtPara9"), ("NQA-MIB", "nqaAdminExtPara10"), ("NQA-MIB", "nqaAdminExtPara11"), ("NQA-MIB", "nqaAdminExtPara12"), ("NQA-MIB", "nqaAdminExtPara13"), ("NQA-MIB", "nqaAdminExtPara14"), ("NQA-MIB", "nqaAdminExtPara15"), ("NQA-MIB", "nqaAdminExtPara16"), ("NQA-MIB", "nqaAdminExtPara17"), ("NQA-MIB", "nqaAdminExtPara18"), ("NQA-MIB", "nqaAdminExtPara19"), ("NQA-MIB", "nqaAdminExtPara20"), ("NQA-MIB", "nqaAdminExtPara21"), ("NQA-MIB", "nqaAdminExtPara22"), ("NQA-MIB", "nqaAdminExtPara23"), ("NQA-MIB", "nqaAdminExtPara24"), ("NQA-MIB", "nqaAdminExtPara25"), ("NQA-MIB", "nqaAdminExtPara26"), ("NQA-MIB", "nqaAdminExtPara27"), ("NQA-MIB", "nqaAdminExtPara28"), ("NQA-MIB", "nqaAdminExtPara29"), ("NQA-MIB", "nqaAdminExtPara30"), ("NQA-MIB", "nqaAdminExtPara31"), ("NQA-MIB", "nqaAdminExtPara32"), ("NQA-MIB", "nqaAdminExtPara33"), ("NQA-MIB", "nqaAdminExtPara34"), ("NQA-MIB", "nqaAdminExtPara35"), ("NQA-MIB", "nqaAdminExtPara36"), ("NQA-MIB", "nqaAdminExtPara37"), ("NQA-MIB", "nqaAdminExtPara38"), ("NQA-MIB", "nqaAdminExtPara39"), ("NQA-MIB", "nqaAdminExtPara40"), ("NQA-MIB", "nqaAdminExtPara41"), ("NQA-MIB", "nqaAdminExtPara42"), ("NQA-MIB", "nqaAdminExtPara43"), ("NQA-MIB", "nqaAdminExtPara44"), ("NQA-MIB", "nqaAdminExtPara45"), ("NQA-MIB", "nqaAdminExtPara46"), ("NQA-MIB", "nqaAdminExtPara47"), ("NQA-MIB", "nqaAdminExtPara48"), ("NQA-MIB", "nqaAdminExtPara49"), ("NQA-MIB", "nqaAdminExtPara50"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaAdminGroup = nqaAdminGroup.setStatus('current')
if mibBuilder.loadTexts: nqaAdminGroup.setDescription('Description.')
nqaServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 3)).setObjects(("NQA-MIB", "nqaTcpServerAddressType"), ("NQA-MIB", "nqaTcpServerStatus"), ("NQA-MIB", "nqaUdpServerAddressType"), ("NQA-MIB", "nqaUdpServerStatus"), ("NQA-MIB", "nqaIcmpServerAddressType"), ("NQA-MIB", "nqaIcmpServerStatus"), ("NQA-MIB", "nqaServerEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaServerGroup = nqaServerGroup.setStatus('current')
if mibBuilder.loadTexts: nqaServerGroup.setDescription('Description.')
nqaStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 4))
for _nqaStatsGroup_obj in [[("NQA-MIB", "nqaResultsCompletions"), ("NQA-MIB", "nqaResultsTestAttempts"), ("NQA-MIB", "nqaResultsCurHopCount"), ("NQA-MIB", "nqaResultsCurProbeCount"), ("NQA-MIB", "nqaResultsRTDOverThresholds"), ("NQA-MIB", "nqaResultsCompletionTimeMin"), ("NQA-MIB", "nqaResultsCompletionTimeMax"), ("NQA-MIB", "nqaResultsDisconnects"), ("NQA-MIB", "nqaResultsTimeouts"), ("NQA-MIB", "nqaResultsBusies"), ("NQA-MIB", "nqaResultsNoConnections"), ("NQA-MIB", "nqaResultsSequenceErrors"), ("NQA-MIB", "nqaResultsDrops"), ("NQA-MIB", "nqaResultsAddressType"), ("NQA-MIB", "nqaResultsAddress"), ("NQA-MIB", "nqaResultsProbeResponses"), ("NQA-MIB", "nqaResultsSentProbes"), ("NQA-MIB", "nqaResultsLastGoodProbe"), ("NQA-MIB", "nqaResultsLastGoodPath"), ("NQA-MIB", "nqaResultsTestFinished"), ("NQA-MIB", "nqaHTTPStatsCompletions"), ("NQA-MIB", "nqaHTTPStatsRTDOverThresholds"), ("NQA-MIB", "nqaHTTPStatsRTTSum"), ("NQA-MIB", "nqaHTTPStatsRTTMin"), ("NQA-MIB", "nqaHTTPStatsRTTMax"), ("NQA-MIB", "nqaHTTPStatsDNSRTTSum"), ("NQA-MIB", "nqaHTTPStatsDNSRTTMin"), ("NQA-MIB", "nqaHTTPStatsDNSRTTMax"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTSum"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTMin"), ("NQA-MIB", "nqaHTTPStatsTCPConnectRTTMax"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTSum"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTMin"), ("NQA-MIB", "nqaHTTPStatsTransactionRTTMax"), ("NQA-MIB", "nqaHTTPStatsMessageBodyOctetsSum"), ("NQA-MIB", "nqaHTTPStatsDNSServerTimeouts"), ("NQA-MIB", "nqaHTTPStatsTCPConnectTimeouts"), ("NQA-MIB", "nqaHTTPStatsTransactionTimeouts"), ("NQA-MIB", "nqaHTTPStatsDNSQueryErrors"), ("NQA-MIB", "nqaHTTPStatsErrors"), ("NQA-MIB", "nqaHTTPStatsTcpConnErrors"), ("NQA-MIB", "nqaHTTPStatsProbeResponses"), ("NQA-MIB", "nqaHTTPStatsSendProbes"), ("NQA-MIB", "nqaHTTPStatsBusies"), ("NQA-MIB", "nqaHTTPStatsTestFinished"), ("NQA-MIB", "nqaJitterStatsCompletions"), ("NQA-MIB", "nqaJitterStatsRTDOverThresholds"), ("NQA-MIB", "nqaJitterStatsNumOfRTT"), ("NQA-MIB", "nqaJitterStatsRTTSum"), ("NQA-MIB", "nqaJitterStatsRTTSum2Low"), ("NQA-MIB", "nqaJitterStatsRTTSum2High"), ("NQA-MIB", "nqaJitterStatsRTTMin"), ("NQA-MIB", "nqaJitterStatsRTTMax"), ("NQA-MIB", "nqaJitterStatsMinOfPositivesSD"), ("NQA-MIB", "nqaJitterStatsMaxOfPositivesSD"), ("NQA-MIB", "nqaJitterStatsNumOfPositivesSD"), ("NQA-MIB", "nqaJitterStatsSumOfPositivesSD"), ("NQA-MIB", "nqaJitterStatsSum2OfPositivesSDLow"), ("NQA-MIB", "nqaJitterStatsSum2OfPositivesSDHigh"), ("NQA-MIB", "nqaJitterStatsMinOfNegativesSD"), ("NQA-MIB", "nqaJitterStatsMaxOfNegativesSD"), ("NQA-MIB", "nqaJitterStatsNumOfNegativesSD"), ("NQA-MIB", "nqaJitterStatsSumOfNegativesSD"), ("NQA-MIB", "nqaJitterStatsSum2OfNegativesSDLow"), ("NQA-MIB", "nqaJitterStatsSum2OfNegativesSDHigh"), ("NQA-MIB", "nqaJitterStatsMinOfPositivesDS"), ("NQA-MIB", "nqaJitterStatsMaxOfPositivesDS"), ("NQA-MIB", "nqaJitterStatsNumOfPositivesDS"), ("NQA-MIB", "nqaJitterStatsSumOfPositivesDS"), ("NQA-MIB", "nqaJitterStatsSum2OfPositivesDSLow"), ("NQA-MIB", "nqaJitterStatsSum2OfPositivesDSHigh"), ("NQA-MIB", "nqaJitterStatsMinOfNegativesDS"), ("NQA-MIB", "nqaJitterStatsMaxOfNegativesDS"), ("NQA-MIB", "nqaJitterStatsNumOfNegativesDS"), ("NQA-MIB", "nqaJitterStatsSumOfNegativesDS"), ("NQA-MIB", "nqaJitterStatsSum2OfNegativesDSLow"), ("NQA-MIB", "nqaJitterStatsSum2OfNegativesDSHigh"), ("NQA-MIB", "nqaJitterStatsPacketLossSD"), ("NQA-MIB", "nqaJitterStatsPacketLossDS"), ("NQA-MIB", "nqaJitterStatsPacketOutOfSequences"), ("NQA-MIB", "nqaJitterStatsErrors"), ("NQA-MIB", "nqaJitterStatsBusies"), ("NQA-MIB", "nqaJitterStatsTimeouts"), ("NQA-MIB", "nqaJitterStatsProbeResponses"), ("NQA-MIB", "nqaJitterStatsSentProbes"), ("NQA-MIB", "nqaJitterStatsDrops"), ("NQA-MIB", "nqaJitterStatsTestFinished"), ("NQA-MIB", "nqaJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterStatsRTTAvg"), ("NQA-MIB", "nqaJitterStatsPacketLossRatio"), ("NQA-MIB", "nqaJitterStatsAvgJitter"), ("NQA-MIB", "nqaJitterStatsAvgJitterSD"), ("NQA-MIB", "nqaJitterStatsAvgJitterDS"), ("NQA-MIB", "nqaJitterStatsJitterOut"), ("NQA-MIB", "nqaJitterStatsJitterIn"), ("NQA-MIB", "nqaJitterStatsOWDOverThresholdsSD"), ("NQA-MIB", "nqaJitterStatsOWDOverThresholdsDS"), ("NQA-MIB", "nqaJitterStatsPktLossUnknown"), ("NQA-MIB", "nqaJitterStatsNumOfOWD"), ("NQA-MIB", "nqaJitterStatsOWSumSD"), ("NQA-MIB", "nqaPathJitterStatsCompletions"), ("NQA-MIB", "nqaPathJitterStatsAddressType"), ("NQA-MIB", "nqaPathJitterStatsAddress"), ("NQA-MIB", "nqaPathJitterStatsRtdOverThresholds"), ("NQA-MIB", "nqaPathJitterStatsNumOfRtt"), ("NQA-MIB", "nqaPathJitterStatsRttSum"), ("NQA-MIB", "nqaJitterStatsOperOfIcpif"), ("NQA-MIB", "nqaJitterStatsOperOfMos"), ("NQA-MIB", "nqaJitterStatsMinDelaySD"), ("NQA-MIB", "nqaJitterStatsSum2DelaySDLow"), ("NQA-MIB", "nqaJitterStatsSum2DelaySDHigh"), ("NQA-MIB", "nqaJitterStatsMinDelayDS"), ("NQA-MIB", "nqaJitterStatsSum2DelayDSLow"), ("NQA-MIB", "nqaJitterStatsSum2DelayDSHigh"), ("NQA-MIB", "nqaJitterStatsTimeUnit"), ("NQA-MIB", "nqaJitterStatsAvgDelaySD"), ("NQA-MIB", "nqaJitterStatsAvgDelayDS"), ("NQA-MIB", "nqaJitterStatsPktRewriteNum"), ("NQA-MIB", "nqaJitterStatsPktRewriteRatio"), ("NQA-MIB", "nqaJitterStatsPktDisorderNum"), ("NQA-MIB", "nqaJitterStatsPktDisorderRatio"), ("NQA-MIB", "nqaJitterStatsFragPktDisorderNum"), ("NQA-MIB", "nqaJitterStatsFragPktDisorderRatio"), ("NQA-MIB", "nqaPathJitterStatsRttSum2Low"), ("NQA-MIB", "nqaPathJitterStatsRttSum2High"), ("NQA-MIB", "nqaPathJitterStatsRttMin"), ("NQA-MIB", "nqaPathJitterStatsRttMax"), ("NQA-MIB", "nqaPathJitterStatsMinOfPositivesSD"), ("NQA-MIB", "nqaPathJitterStatsMaxOfPositivesSD"), ("NQA-MIB", "nqaPathJitterStatsNumOfPositivesSD"), ("NQA-MIB", "nqaPathJitterStatsSumOfPositivesSD"), ("NQA-MIB", "nqaPathJitterStatsSum2OfPositivesSDLow"), ("NQA-MIB", "nqaPathJitterStatsSum2OfPositivesSDHigh"), ("NQA-MIB", "nqaPathJitterStatsMinOfNegativesSD"), ("NQA-MIB", "nqaPathJitterStatsMaxOfNegativesSD"), ("NQA-MIB", "nqaPathJitterStatsNumOfNegativesSD"), ("NQA-MIB", "nqaPathJitterStatsSumOfNegativesSD"), ("NQA-MIB", "nqaPathJitterStatsSum2OfNegativesSDLow"), ("NQA-MIB", "nqaPathJitterStatsSum2OfNegativesSDHigh"), ("NQA-MIB", "nqaPathJitterStatsMinOfPositivesDS"), ("NQA-MIB", "nqaPathJitterStatsMaxOfPositivesDS"), ("NQA-MIB", "nqaPathJitterStatsNumOfPositivesDS"), ("NQA-MIB", "nqaPathJitterStatsSumOfPositivesDS"), ("NQA-MIB", "nqaPathJitterStatsSum2OfPositivesDSLow"), ("NQA-MIB", "nqaPathJitterStatsSum2OfPositivesDSHigh"), ("NQA-MIB", "nqaPathJitterStatsMinOfNegativesDS"), ("NQA-MIB", "nqaPathJitterStatsMaxOfNegativesDS"), ("NQA-MIB", "nqaPathJitterStatsNumOfNegativesDS"), ("NQA-MIB", "nqaPathJitterStatsSumOfNegativesDS"), ("NQA-MIB", "nqaPathJitterStatsSum2OfNegativesDSLow"), ("NQA-MIB", "nqaPathJitterStatsSum2OfNegativesDSHigh"), ("NQA-MIB", "nqaPathJitterStatsPacketLossSD"), ("NQA-MIB", "nqaPathJitterStatsPacketLossDS"), ("NQA-MIB", "nqaPathJitterStatsPacketOutOfSequences"), ("NQA-MIB", "nqaPathJitterStatsErrors"), ("NQA-MIB", "nqaPathJitterStatsBusies"), ("NQA-MIB", "nqaPathJitterStatsTimeouts"), ("NQA-MIB", "nqaPathJitterStatsProbeResponses"), ("NQA-MIB", "nqaPathJitterStatsSentProbes"), ("NQA-MIB", "nqaPathJitterStatsDrops"), ("NQA-MIB", "nqaPathJitterStatsTestFinished"), ("NQA-MIB", "nqaPathJitterStatsMaxDelaySD"), ("NQA-MIB", "nqaPathJitterStatsMaxDelayDS"), ("NQA-MIB", "nqaPathJitterStatsRttAvg"), ("NQA-MIB", "nqaPathJitterStatsPacketLossRatio"), ("NQA-MIB", "nqaPathJitterStatsAvgJitter"), ("NQA-MIB", "nqaPathJitterStatsAvgJitterSD"), ("NQA-MIB", "nqaPathJitterStatsAvgJitterDS"), ("NQA-MIB", "nqaPathJitterStatsJitterOut"), ("NQA-MIB", "nqaPathJitterStatsJitterIn"), ("NQA-MIB", "nqaPathJitterStatsOwdOverThresholdsSD"), ("NQA-MIB", "nqaPathJitterStatsPktLossUnknown"), ("NQA-MIB", "nqaPathJitterStatsNumOfOwd"), ("NQA-MIB", "nqaPathJitterStatsOwdSumSD"), ("NQA-MIB", "nqaPathJitterStatsOwdSumDS"), ("NQA-MIB", "nqaPathJitterStatsOwdOverThresholdsDS"), ("NQA-MIB", "nqaPathMtuStatsAddressType"), ("NQA-MIB", "nqaPathMtuStatsAddress"), ("NQA-MIB", "nqaPathMtuStatsCompletions"), ("NQA-MIB", "nqaPathMtuStatsSentProbes"), ("NQA-MIB", "nqaPathMtuStatsDiscoveryPathMtuMin"), ("NQA-MIB", "nqaPathMtuStatsDiscoveryPathMtuMax"), ("NQA-MIB", "nqaPathMtuStatsOptimumFirstStep"), ("NQA-MIB", "nqaPathMtuStatsBusies"), ("NQA-MIB", "nqaPathMtuStatsTimeouts"), ("NQA-MIB", "nqaPathMtuStatsDrops"), ("NQA-MIB", "nqaPathMtuStatsProbeResponses"), ("NQA-MIB", "nqaPathMtuStatsPathMtu"), ("NQA-MIB", "nqaPathMtuStatsTestFinished"), ("NQA-MIB", "nqaJitterStatsOWSumDS"), ("NQA-MIB", "nqaResultsSumCompletionTime"), ("NQA-MIB", "nqaResultsSumCompletionTime2Low"), ("NQA-MIB", "nqaResultsSumCompletionTime2High"), ("NQA-MIB", "nqaFTPStatsCompletions"), ("NQA-MIB", "nqaFTPStatsRTDOverThresholds"), ("NQA-MIB", "nqaFTPStatsCtrlConnMaxTime"), ("NQA-MIB", "nqaFTPStatsCtrlConnMinTime"), ("NQA-MIB", "nqaFTPStatsCtrlConnAveTime"), ("NQA-MIB", "nqaFTPStatsDataConnMaxTime"), ("NQA-MIB", "nqaFTPStatsDataConnMinTime"), ("NQA-MIB", "nqaFTPStatsDataConnAveTime"), ("NQA-MIB", "nqaFTPStatsConnectSumTimeMax"), ("NQA-MIB", "nqaFTPStatsConnectSumTimeMin"), ("NQA-MIB", "nqaFTPStatsConnectSumTimeAve"), ("NQA-MIB", "nqaFTPStatsMessageBodyOctetsSum"), ("NQA-MIB", "nqaFTPStatsErrors"), ("NQA-MIB", "nqaFTPStatsTimeouts"), ("NQA-MIB", "nqaFTPStatsDiscontinued"), ("NQA-MIB", "nqaFTPStatsProbeResponses"), ("NQA-MIB", "nqaFTPStatsSendProbes"), ("NQA-MIB", "nqaFTPStatsTestFinished"), ("NQA-MIB", "nqaMpingStatsTargetAddressType"), ("NQA-MIB", "nqaMpingStatsTargetAddress"), ("NQA-MIB", "nqaMpingStatsReceiverAddress"), ("NQA-MIB", "nqaMpingStatsCompletions"), ("NQA-MIB", "nqaMpingStatsRTDOverThresholds"), ("NQA-MIB", "nqaMpingStatsSumCompletionTime"), ("NQA-MIB", "nqaMpingStatsSumCompletionTime2Low"), ("NQA-MIB", "nqaMpingStatsSumCompletionTime2High"), ("NQA-MIB", "nqaMpingStatsCompletionTimeMin"), ("NQA-MIB", "nqaMpingStatsCompletionTimeMax"), ("NQA-MIB", "nqaMpingStatsTimeouts"), ("NQA-MIB", "nqaMpingStatsBusies"), ("NQA-MIB", "nqaMpingStatsSequenceErrors"), ("NQA-MIB", "nqaMpingStatsDrops"), ("NQA-MIB", "nqaMpingStatsProbeResponses"), ("NQA-MIB", "nqaMpingStatsSentProbes"), ("NQA-MIB", "nqaMpingStatsLastGoodProbe"), ("NQA-MIB", "nqaMpingStatsTestFinished"), ("NQA-MIB", "nqaMpingStatsReceiverCount"), ("NQA-MIB", "nqaMpingStatsLastFibHit"), ("NQA-MIB", "nqaMpingStatsRttAvg"), ("NQA-MIB", "nqaMpingStatsLostPacketRatio"), ("NQA-MIB", "nqaMtracertStatsAddressType"), ("NQA-MIB", "nqaMtracertStatsAddress"), ("NQA-MIB", "nqaMtracertStatsCompletions"), ("NQA-MIB", "nqaMtracertStatsCurHopCount"), ("NQA-MIB", "nqaMtracertStatsCurProbeCount"), ("NQA-MIB", "nqaMtracertStatsRTDOverThresholds"), ("NQA-MIB", "nqaMtracertStatsTimeouts"), ("NQA-MIB", "nqaMtracertStatsBusies"), ("NQA-MIB", "nqaMtracertStatsSequenceErrors"), ("NQA-MIB", "nqaMtracertStatsDrops"), ("NQA-MIB", "nqaMtracertStatsProbeResponses"), ("NQA-MIB", "nqaMtracertStatsSentProbes"), ("NQA-MIB", "nqaMtracertStatsLastGoodProbe"), ("NQA-MIB", "nqaMtracertStatsLastGoodPath"), ("NQA-MIB", "nqaMtracertStatsTestFinished"), ("NQA-MIB", "nqaMtracertStatsCurPathTTL"), ("NQA-MIB", "nqaMtracertStatsMaxPathTTL"), ("NQA-MIB", "nqaMtracertStatsInPkgLossRate"), ("NQA-MIB", "nqaMtracertStatsSGPkgLossRate"), ("NQA-MIB", "nqaMtracertStatsInPkgRate"), ("NQA-MIB", "nqaMtracertStatsOutPkgRate")], [("NQA-MIB", "nqaMtracertStatsTimeDelay"), ("NQA-MIB", "nqaResultsRttAvg"), ("NQA-MIB", "nqaResultsLostPacketRatio"), ("NQA-MIB", "nqaHTTPStatsRttAvg"), ("NQA-MIB", "nqaHTTPStatsLostPacketRatio"), ("NQA-MIB", "nqaFTPStatsRttAvg"), ("NQA-MIB", "nqaFTPStatsLostPacketRatio"), ("NQA-MIB", "nqaPppoeStatsCompletions"), ("NQA-MIB", "nqaPppoeStatsCurrentPhase"), ("NQA-MIB", "nqaPppoeStatsErrorMessage"), ("NQA-MIB", "nqaPppoeDiscoveryTimeout"), ("NQA-MIB", "nqaPppoeLcpTimeout"), ("NQA-MIB", "nqaPppoeAuthorizationTimeout"), ("NQA-MIB", "nqaPppoeNcpTimeout"), ("NQA-MIB", "nqaPppoeConnectionTime"), ("NQA-MIB", "nqaPppoeClientSessionId"), ("NQA-MIB", "nqaPppoeClientIpAddress"), ("NQA-MIB", "nqaPppoeGatewayIpAddress")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        nqaStatsGroup = nqaStatsGroup.setObjects(*_nqaStatsGroup_obj)
    else:
        nqaStatsGroup = nqaStatsGroup.setObjects(*_nqaStatsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaStatsGroup = nqaStatsGroup.setStatus('current')
if mibBuilder.loadTexts: nqaStatsGroup.setDescription('Description.')
nqaHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 5)).setObjects(("NQA-MIB", "nqaHistoryTimeStamp"), ("NQA-MIB", "nqaHistoryAddressType"), ("NQA-MIB", "nqaHistoryAddress"), ("NQA-MIB", "nqaHistoryCompletionTime"), ("NQA-MIB", "nqaHistoryFinishState"), ("NQA-MIB", "nqaHistoryLastRC"), ("NQA-MIB", "nqaMpingHistoryAddressType"), ("NQA-MIB", "nqaMpingHistoryAddress"), ("NQA-MIB", "nqaMpingHistoryReceiverAddress"), ("NQA-MIB", "nqaMpingHistoryTimeStamp"), ("NQA-MIB", "nqaMpingHistoryCompletionTime"), ("NQA-MIB", "nqaMpingHistoryFinishState"), ("NQA-MIB", "nqaMpingHistoryLastRC"), ("NQA-MIB", "nqaMpingHistoryFibHit"), ("NQA-MIB", "nqaMtracertHistoryAddressType"), ("NQA-MIB", "nqaMtracertHistoryAddress"), ("NQA-MIB", "nqaMtracertHistoryTimeStamp"), ("NQA-MIB", "nqaMtracertHistoryCompletionTime"), ("NQA-MIB", "nqaMtracertHistoryLastRC"), ("NQA-MIB", "nqaMtracertHistoryCurQueryMode"), ("NQA-MIB", "nqaMtracertHistoryQueryArrivalTime"), ("NQA-MIB", "nqaMtracertHistoryIncomingIfAddress"), ("NQA-MIB", "nqaMtracertHistoryOutgoingIfAddress"), ("NQA-MIB", "nqaMtracertHistoryPreHopRouterAddress"), ("NQA-MIB", "nqaMtracertHistoryInputPacketCount"), ("NQA-MIB", "nqaMtracertHistoryOutputPacketCount"), ("NQA-MIB", "nqaMtracertHistoryTotalSGPacketCount"), ("NQA-MIB", "nqaMtracertHistoryRtgProtocol"), ("NQA-MIB", "nqaMtracertHistoryFwdTTL"), ("NQA-MIB", "nqaMtracertHistoryFwdCode"), ("NQA-MIB", "nqaMtracertHistroyFinishState"), ("NQA-MIB", "nqaVplsMacTracertHistoryTimeStamp"), ("NQA-MIB", "nqaVplsMacTracertHistoryAddressType"), ("NQA-MIB", "nqaVplsMacTracertHistoryAddress"), ("NQA-MIB", "nqaVplsMacTracertHistoryCompletionTime"), ("NQA-MIB", "nqaVplsMacTracertHistoryFinishState"), ("NQA-MIB", "nqaVplsMacTracertHistoryHitFlag"), ("NQA-MIB", "nqaVplsMacTracertHistoryDSCount"), ("NQA-MIB", "nqaVplsMacTracertHistorySuccessPathNode"), ("NQA-MIB", "nqaVplsMacTracertHistoryDSAddress"), ("NQA-MIB", "nqaVplsMTraceHistoryResponserAddressType"), ("NQA-MIB", "nqaVplsMTraceHistoryResponserAddress"), ("NQA-MIB", "nqaVplsMTraceHistoryUpStreamAddressType"), ("NQA-MIB", "nqaVplsMTraceHistoryUpStreamAddress"), ("NQA-MIB", "nqaVplsMTraceHistoryReceivedTtl"), ("NQA-MIB", "nqaVplsMTraceHistoryIGMPVersion"), ("NQA-MIB", "nqaVplsMTraceHistoryIGMPSnpgEnable"), ("NQA-MIB", "nqaVplsMTraceHistoryIGMPProxyEnable"), ("NQA-MIB", "nqaVplsMTraceHistoryIGMPRouterPortLearningEnable"), ("NQA-MIB", "nqaVplsMTraceHistoryRequireRouterAlertEnable"), ("NQA-MIB", "nqaVplsMTraceHistoryForwardMode"), ("NQA-MIB", "nqaVplsMTraceHistoryHitFlag"), ("NQA-MIB", "nqaVplsMTraceHistoryPWExist"), ("NQA-MIB", "nqaVplsMTraceHistoryGroupPolicy"), ("NQA-MIB", "nqaVplsMTraceHistoryRcvQueryCount"), ("NQA-MIB", "nqaVplsMTraceHistoryRcvReportCount"), ("NQA-MIB", "nqaVplsMTraceHistoryRcvLeaveCount"), ("NQA-MIB", "nqaVplsMTraceHistoryTimeStamp"), ("NQA-MIB", "nqaVplsMTraceHistoryCompletionTime"), ("NQA-MIB", "nqaVplsMTraceHistoryLastRC"), ("NQA-MIB", "nqaVplsMTraceHistoryLastRSC"), ("NQA-MIB", "nqaVplsMTraceHistoryFinishState"), ("NQA-MIB", "nqaVplsMTraceHistorySuccessPathNode"), ("NQA-MIB", "nqaMacTraceHistoryTTL"), ("NQA-MIB", "nqaMacTraceHistorySeqNumber"), ("NQA-MIB", "nqaMacTraceHistoryForwarded"), ("NQA-MIB", "nqaMacTraceHistoryCompletionTime"), ("NQA-MIB", "nqaMacTraceHistoryTerminalMep"), ("NQA-MIB", "nqaMacTraceHistoryRelayAction"), ("NQA-MIB", "nqaMacTraceHistoryIngressAction"), ("NQA-MIB", "nqaMacTraceHistoryIngressMac"), ("NQA-MIB", "nqaMacTraceHistoryIngressIfName"), ("NQA-MIB", "nqaMacTraceHistoryEgressAction"), ("NQA-MIB", "nqaMacTraceHistoryEgressMac"), ("NQA-MIB", "nqaMacTraceHistoryEgressIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaHistoryGroup = nqaHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: nqaHistoryGroup.setDescription('Description.')
nqaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 6)).setObjects(("NQA-MIB", "nqaResultsProbeFailed"), ("NQA-MIB", "nqaResultsTestFailed"), ("NQA-MIB", "nqaResultsTestCompleted"), ("NQA-MIB", "nqaResultsThresholdNotification"), ("NQA-MIB", "nqaHTTPStatsProbeFailed"), ("NQA-MIB", "nqaHTTPStatsTestFailed"), ("NQA-MIB", "nqaHTTPStatsTestCompleted"), ("NQA-MIB", "nqaHTTPStatsThresholdNotification"), ("NQA-MIB", "nqaJitterStatsProbeFailed"), ("NQA-MIB", "nqaJitterStatsTestFailed"), ("NQA-MIB", "nqaJitterStatsTestCompleted"), ("NQA-MIB", "nqaFTPStatsProbeFailed"), ("NQA-MIB", "nqaFTPStatsTestFailed"), ("NQA-MIB", "nqaFTPStatsTestCompleted"), ("NQA-MIB", "nqaFTPStatsThresholdNotification"), ("NQA-MIB", "nqaJitterStatsRTDThresholdNotification"), ("NQA-MIB", "nqaJitterStatsOWDThresholdNotificationSD"), ("NQA-MIB", "nqaJitterStatsOWDThresholdNotificationDS"), ("NQA-MIB", "nqaNegotiateFailed"), ("NQA-MIB", "nqaRisingAlarmNotification"), ("NQA-MIB", "nqaFallingAlarmNotification"), ("NQA-MIB", "nqaFtpSaveRecordNotification"), ("NQA-MIB", "nqaPppoeStatsTestFailed"), ("NQA-MIB", "nqaPppoeStatsTestCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaNotificationsGroup = nqaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: nqaNotificationsGroup.setDescription('The notification which are required to be supported by implementations of this MIB.')
nqaCollectStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 7)).setObjects(("NQA-MIB", "nqaJitterCollectStatsCompletions"), ("NQA-MIB", "nqaJitterCollectStatsRTDOverThresholds"), ("NQA-MIB", "nqaJitterCollectStatsOWDOverThresholdsSD"), ("NQA-MIB", "nqaJitterCollectStatsOWDOverThresholdsDS"), ("NQA-MIB", "nqaJitterCollectStatsNumOfRTT"), ("NQA-MIB", "nqaJitterCollectStatsRTTSum"), ("NQA-MIB", "nqaJitterCollectStatsRTTSum2Low"), ("NQA-MIB", "nqaJitterCollectStatsRTTSum2High"), ("NQA-MIB", "nqaJitterCollectStatsRTTMin"), ("NQA-MIB", "nqaJitterCollectStatsRTTMax"), ("NQA-MIB", "nqaJitterCollectStatsMinOfPositivesSD"), ("NQA-MIB", "nqaJitterCollectStatsMaxOfPositivesSD"), ("NQA-MIB", "nqaJitterCollectStatsNumOfPositivesSD"), ("NQA-MIB", "nqaJitterCollectStatsSumOfPositivesSD"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfPositivesSDLow"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfPositivesSDHigh"), ("NQA-MIB", "nqaJitterCollectStatsMinOfNegativesSD"), ("NQA-MIB", "nqaJitterCollectStatsMaxOfNegativesSD"), ("NQA-MIB", "nqaJitterCollectStatsNumOfNegativesSD"), ("NQA-MIB", "nqaJitterCollectStatsSumOfNegativesSD"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfNegativesSDLow"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfNegativesSDHigh"), ("NQA-MIB", "nqaJitterCollectStatsMinOfPositivesDS"), ("NQA-MIB", "nqaJitterCollectStatsMaxOfPositivesDS"), ("NQA-MIB", "nqaJitterCollectStatsNumOfPositivesDS"), ("NQA-MIB", "nqaJitterCollectStatsSumOfPositivesDS"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfPositivesDSLow"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfPositivesDSHigh"), ("NQA-MIB", "nqaJitterCollectStatsMinOfNegativesDS"), ("NQA-MIB", "nqaJitterCollectStatsMaxOfNegativesDS"), ("NQA-MIB", "nqaJitterCollectStatsNumOfNegativesDS"), ("NQA-MIB", "nqaJitterCollectStatsSumOfNegativesDS"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfNegativesDSLow"), ("NQA-MIB", "nqaJitterCollectStatsSum2OfNegativesDSHigh"), ("NQA-MIB", "nqaJitterCollectStatsMaxDelaySD"), ("NQA-MIB", "nqaJitterCollectStatsMaxDelayDS"), ("NQA-MIB", "nqaJitterCollectStatsNumOfOWD"), ("NQA-MIB", "nqaJitterCollectStatsOWSumSD"), ("NQA-MIB", "nqaJitterCollectStatsOWSumDS"), ("NQA-MIB", "nqaJitterCollectStatsPacketLossSD"), ("NQA-MIB", "nqaJitterCollectStatsPacketLossDS"), ("NQA-MIB", "nqaJitterCollectStatsPacketLossUnknown"), ("NQA-MIB", "nqaJitterCollectStatsPacketOutOfSequences"), ("NQA-MIB", "nqaJitterCollectStatsPacketLossRatio"), ("NQA-MIB", "nqaJitterCollectStatsErrors"), ("NQA-MIB", "nqaJitterCollectStatsBusies"), ("NQA-MIB", "nqaJitterCollectStatsTimeouts"), ("NQA-MIB", "nqaJitterCollectStatsProbeResponses"), ("NQA-MIB", "nqaJitterCollectStatsSentProbes"), ("NQA-MIB", "nqaJitterCollectStatsDrops"), ("NQA-MIB", "nqaJitterCollectStatsRTTAvg"), ("NQA-MIB", "nqaJitterCollectStatsAvgJitter"), ("NQA-MIB", "nqaJitterCollectStatsAvgJitterSD"), ("NQA-MIB", "nqaJitterCollectStatsAvgJitterDS"), ("NQA-MIB", "nqaJitterCollectStatsJitterOut"), ("NQA-MIB", "nqaJitterCollectStatsJitterIn"), ("NQA-MIB", "nqaJitterCollectStatsMinDelaySD"), ("NQA-MIB", "nqaJitterCollectStatsMinDelayDS"), ("NQA-MIB", "nqaJitterCollectStatsAvgDelaySD"), ("NQA-MIB", "nqaJitterCollectStatsAvgDelayDS"), ("NQA-MIB", "nqaJitterCollectStatsPktRewriteNum"), ("NQA-MIB", "nqaJitterCollectStatsPktRewriteRatio"), ("NQA-MIB", "nqaJitterCollectStatsPktDisorderNum"), ("NQA-MIB", "nqaJitterCollectStatsPktDisorderRatio"), ("NQA-MIB", "nqaJitterCollectStatsFragPktDisorderNum"), ("NQA-MIB", "nqaJitterCollectStatsFragPktDisorderRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaCollectStatsGroup = nqaCollectStatsGroup.setStatus('current')
if mibBuilder.loadTexts: nqaCollectStatsGroup.setDescription('Description.')
nqaAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 8)).setObjects(("NQA-MIB", "nqaMaxAlarmNum"), ("NQA-MIB", "nqaMaxEventNum"), ("NQA-MIB", "nqaAlarmVariable"), ("NQA-MIB", "nqaAlarmSampleType"), ("NQA-MIB", "nqaAlarmValue"), ("NQA-MIB", "nqaAlarmStartUpNqaAlarm"), ("NQA-MIB", "nqaAlarmRisingThreshold"), ("NQA-MIB", "nqaAlarmDescription"), ("NQA-MIB", "nqaAlarmFallingThreshold"), ("NQA-MIB", "nqaAlarmRisingEventIndex"), ("NQA-MIB", "nqaAlarmFallingEventIndex"), ("NQA-MIB", "nqaAlarmStatus"), ("NQA-MIB", "nqaEventDescription"), ("NQA-MIB", "nqaEventAdminName"), ("NQA-MIB", "nqaEventOperationTag"), ("NQA-MIB", "nqaEventType"), ("NQA-MIB", "nqaEventStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaAlarmGroup = nqaAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmGroup.setDescription('Description.')
nqaFtpSaveRecordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 1, 9)).setObjects(("NQA-MIB", "nqaFtpSaveRecordEnable"), ("NQA-MIB", "nqaFtpSaveRecordIpAddr"), ("NQA-MIB", "nqaFtpSaveRecordVrfName"), ("NQA-MIB", "nqaFtpSaveRecordUserName"), ("NQA-MIB", "nqaFtpSaveRecordPassword"), ("NQA-MIB", "nqaFtpSaveRecordFileName"), ("NQA-MIB", "nqaFtpSaveRecordItemNum"), ("NQA-MIB", "nqaFtpSaveRecordTime"), ("NQA-MIB", "nqaFtpSaveRecordNotificationEnable"), ("NQA-MIB", "nqaFtpSaveRecordLastFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaFtpSaveRecordGroup = nqaFtpSaveRecordGroup.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordGroup.setDescription('Description.')
nqaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 2))
nqaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 7, 2, 1)).setObjects(("NQA-MIB", "nqaBaseGroup"), ("NQA-MIB", "nqaAdminGroup"), ("NQA-MIB", "nqaStatsGroup"), ("NQA-MIB", "nqaAlarmGroup"), ("NQA-MIB", "nqaFtpSaveRecordGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nqaCompliance = nqaCompliance.setStatus('current')
if mibBuilder.loadTexts: nqaCompliance.setDescription('Description.')
nqaCollectStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8))
nqaJitterCollectStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1), )
if mibBuilder.loadTexts: nqaJitterCollectStatsTable.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsTable.setDescription('A table which contains the rolling accumulated history of the Jitter operation.')
nqaJitterCollectStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaJitterCollectStatsIndex"))
if mibBuilder.loadTexts: nqaJitterCollectStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsEntry.setDescription('A table which contains the rolling accumulated history of the Jitter operation. This entry is created only if the nqaAdminCtrlType is jitterAppl.')
nqaJitterCollectStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: nqaJitterCollectStatsIndex.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsIndex.setDescription('The third index of jitter collection statistics table.')
nqaJitterCollectStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsCompletions.setDescription('The number of the tests that have completed successfully.')
nqaJitterCollectStatsRTDOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTDOverThresholds.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTDOverThresholds.setDescription('The number of tests that violate RTD (Round Trip Delay) threshold.')
nqaJitterCollectStatsOWDOverThresholdsSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsOWDOverThresholdsSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsOWDOverThresholdsSD.setDescription('The number of tests that violate OWD (One Way Delay) threshold from source to destination.')
nqaJitterCollectStatsOWDOverThresholdsDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsOWDOverThresholdsDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsOWDOverThresholdsDS.setDescription('The number of tests that violate OWD (One Way Delay) threshold from destination to source.')
nqaJitterCollectStatsNumOfRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfRTT.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfRTT.setDescription('The number of RTTs that are successfully measured by tests.')
nqaJitterCollectStatsRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTSum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTSum.setDescription('The sum of RTTs that are successfully measured.')
nqaJitterCollectStatsRTTSum2Low = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTSum2Low.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTSum2Low.setDescription('The sum of squares of RTTs that are successfully measured by tests (low order 32 bits).')
nqaJitterCollectStatsRTTSum2High = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTSum2High.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTSum2High.setDescription('The sum of squares of RTTs that are successfully measured by tests (high order 32 bits).')
nqaJitterCollectStatsRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTMin.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTMin.setDescription('The minimum of RTTs that were successfully measured by tests.')
nqaJitterCollectStatsRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTMax.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTMax.setDescription('The maximum of RTTs that were successfully measured by tests.')
nqaJitterCollectStatsMinOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfPositivesSD.setDescription('The minimum of absolute value of all positive jitter values from source to destination.')
nqaJitterCollectStatsMaxOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfPositivesSD.setDescription('The maximum of absolute value of all positive jitter values from source to destination.')
nqaJitterCollectStatsNumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfPositivesSD.setDescription('The number of all positive jitter values from source to destination.')
nqaJitterCollectStatsSumOfPositivesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfPositivesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfPositivesSD.setDescription('The sum of absolute value of all positive jitter values from source to destination.')
nqaJitterCollectStatsSum2OfPositivesSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesSDLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesSDLow.setDescription('The sum of squares of absolute value of all positive jitter values from source to destination (low order 32 bits).')
nqaJitterCollectStatsSum2OfPositivesSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesSDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesSDHigh.setDescription('The sum of squares of absolute value of all positive jitter values from source to destination (high order 32 bits).')
nqaJitterCollectStatsMinOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfNegativesSD.setDescription('The minimum of absolute value of all negative jitter values from source to destination.')
nqaJitterCollectStatsMaxOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfNegativesSD.setDescription('The maximum of absolute value of all negative jitter values from source to destination.')
nqaJitterCollectStatsNumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfNegativesSD.setDescription('The number of all negative jitter values from source to destination.')
nqaJitterCollectStatsSumOfNegativesSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfNegativesSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfNegativesSD.setDescription('The sum of absolute value of all negative jitter values from source to destination.')
nqaJitterCollectStatsSum2OfNegativesSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesSDLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesSDLow.setDescription('The sum of squares of absolute value of all negative values from source to destination (low order 32 bits).')
nqaJitterCollectStatsSum2OfNegativesSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesSDHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesSDHigh.setDescription('The sum of squares of absolute value of all negative values from source to destination (high order 32 bits).')
nqaJitterCollectStatsMinOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfPositivesDS.setDescription('The minimum of absolute value of all positive jitter values from destination to source.')
nqaJitterCollectStatsMaxOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfPositivesDS.setDescription('The maximum of absolute value of all positive jitter values from destination to source.')
nqaJitterCollectStatsNumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfPositivesDS.setDescription('The number of all positive jitter values from destination to source.')
nqaJitterCollectStatsSumOfPositivesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfPositivesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfPositivesDS.setDescription('The sum of absolute value of all positive jitter values from destination to source.')
nqaJitterCollectStatsSum2OfPositivesDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesDSLow.setDescription('The sum of squares of absolute value of all positive jitter values from destination to source (low order 32 bits).')
nqaJitterCollectStatsSum2OfPositivesDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfPositivesDSHigh.setDescription('The sum of squares of absolute value of all positive jitter values from destination to source (high order 32 bits).')
nqaJitterCollectStatsMinOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMinOfNegativesDS.setDescription('The minimum of absolute value of all negative jitter values from destination to source.')
nqaJitterCollectStatsMaxOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxOfNegativesDS.setDescription('The maximum of absolute value of all negative jitter values from destination to source.')
nqaJitterCollectStatsNumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfNegativesDS.setDescription('The number of all negative jitter values from destination to source.')
nqaJitterCollectStatsSumOfNegativesDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfNegativesDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSumOfNegativesDS.setDescription('The sum of absolute value of all negative jitter values from destination to source.')
nqaJitterCollectStatsSum2OfNegativesDSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesDSLow.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesDSLow.setDescription('The sum of squares of absolute value of all negative values from destination to source (low order 32 bits).')
nqaJitterCollectStatsSum2OfNegativesDSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesDSHigh.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSum2OfNegativesDSHigh.setDescription('The sum of squares of absolute value of all negative values from destination to source (high order 32 bits).')
nqaJitterCollectStatsMaxDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 36), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxDelaySD.setDescription('The maximum of all OWD (One Way Delay) from source to destination.')
nqaJitterCollectStatsMaxDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 37), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMaxDelayDS.setDescription('The maximum of all OWD (One Way Delay) from destination to source.')
nqaJitterCollectStatsNumOfOWD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfOWD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsNumOfOWD.setDescription('The number of OWDs that were successfully measured by tests.')
nqaJitterCollectStatsOWSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsOWSumSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsOWSumSD.setDescription('The sum of OWDs that were successfully measured by tests from source to destination.')
nqaJitterCollectStatsOWSumDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsOWSumDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsOWSumDS.setDescription('The sum of OWDs that were successfully measured by tests from destination to source.')
nqaJitterCollectStatsPacketLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossSD.setDescription('The number of packets lost when sent from source to destination.')
nqaJitterCollectStatsPacketLossDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossDS.setDescription('The number of packets lost when sent from destination to source.')
nqaJitterCollectStatsPacketLossUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossUnknown.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossUnknown.setDescription("The number of packets lost for which we can't determine the direction.")
nqaJitterCollectStatsPacketOutOfSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketOutOfSequences.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketOutOfSequences.setDescription('The number of packets arrived out of sequence.')
nqaJitterCollectStatsPacketLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPacketLossRatio.setDescription('The ratio of the packets lost to all packets sent in the test.')
nqaJitterCollectStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsErrors.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsErrors.setDescription('The number of errors occurred in the test.')
nqaJitterCollectStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsBusies.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsBusies.setDescription("The number of occasions when a test couldn't be initialized because the previous test has not completed.")
nqaJitterCollectStatsTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsTimeouts.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsTimeouts.setDescription('The number of responses arrived over the time.')
nqaJitterCollectStatsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsProbeResponses.setDescription('The number of responses from echo-server for the packets sent by the test.')
nqaJitterCollectStatsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsSentProbes.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsSentProbes.setDescription('The number of packets sent in the test.')
nqaJitterCollectStatsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsDrops.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsDrops.setDescription('The number of packets that were sent failed in the test.')
nqaJitterCollectStatsRTTAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTAvg.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsRTTAvg.setDescription('The average of RTTs that were successfully measured by tests.')
nqaJitterCollectStatsAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgJitter.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgJitter.setDescription('The average of jitter values that were successfully measured by tests.')
nqaJitterCollectStatsAvgJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgJitterSD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgJitterSD.setDescription('The average of jitter values from source to destination that were successfully measured by tests.')
nqaJitterCollectStatsAvgJitterDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgJitterDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgJitterDS.setDescription('The average of jitter values from destination to source that were successfully measured by tests.')
nqaJitterCollectStatsJitterOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 56), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsJitterOut.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsJitterOut.setDescription('Jitter (RFC1889) at responder.')
nqaJitterCollectStatsJitterIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 57), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsJitterIn.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsJitterIn.setDescription('Jitter (RFC1889) at sender.')
nqaJitterCollectStatsMinDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 58), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMinDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMinDelaySD.setDescription('The minimum of all OWD (One Way Delay) from source to destination.')
nqaJitterCollectStatsMinDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 59), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsMinDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsMinDelayDS.setDescription('The minimum of all OWD (One Way Delay) from destination to source.')
nqaJitterCollectStatsAvgDelaySD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 60), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgDelaySD.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgDelaySD.setDescription('The average of all OWD (One Way Delay) from source to destination.')
nqaJitterCollectStatsAvgDelayDS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 61), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgDelayDS.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsAvgDelayDS.setDescription('The average of all OWD (One Way Delay) from destination to source.')
nqaJitterCollectStatsPktRewriteNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPktRewriteNum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPktRewriteNum.setDescription('The number of all the packets have been rewrited.')
nqaJitterCollectStatsPktRewriteRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPktRewriteRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPktRewriteRatio.setDescription('The ratio of all the packets have been rewrited.')
nqaJitterCollectStatsPktDisorderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPktDisorderNum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPktDisorderNum.setDescription('The number of all the packets have been disordered.')
nqaJitterCollectStatsPktDisorderRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsPktDisorderRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsPktDisorderRatio.setDescription('The ratio of all the packets have been disordered.')
nqaJitterCollectStatsFragPktDisorderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsFragPktDisorderNum.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsFragPktDisorderNum.setDescription('The number of all the packets whose fragments have been disordered.')
nqaJitterCollectStatsFragPktDisorderRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 8, 1, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaJitterCollectStatsFragPktDisorderRatio.setStatus('current')
if mibBuilder.loadTexts: nqaJitterCollectStatsFragPktDisorderRatio.setDescription('The ratio of all the packets whose fragments have been disordered.')
nqaAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9))
nqaMaxAlarmNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMaxAlarmNum.setStatus('current')
if mibBuilder.loadTexts: nqaMaxAlarmNum.setDescription('Maximum number of alarms.')
nqaMaxEventNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaMaxEventNum.setStatus('current')
if mibBuilder.loadTexts: nqaMaxEventNum.setDescription('Maximum number of events that alarms can trigger.')
nqaAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3), )
if mibBuilder.loadTexts: nqaAlarmTable.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmTable.setDescription('A list of alarm entries.')
nqaAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1), ).setIndexNames((0, "NQA-MIB", "nqaAdminCtrlOwnerIndex"), (0, "NQA-MIB", "nqaAdminCtrlTestName"), (0, "NQA-MIB", "nqaAlarmIndex"))
if mibBuilder.loadTexts: nqaAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmEntry.setDescription('A list of parameters that set up a periodic checking for alarm conditions.')
nqaAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nqaAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmIndex.setDescription('Uniquely identifies a row in the nqaAlarmTable.')
nqaAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rttAvg", 1), ("lostPacketRatio", 2), ("packetLossSd", 3), ("packetLossDs", 4), ("jitterRavg", 5), ("jitterSdAvg", 6), ("jitterDsAvg", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmVariable.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmVariable.setDescription('The type of the particular variable to be sampled.')
nqaAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delta", 1), ("absolute", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmSampleType.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmSampleType.setDescription('delta(1): relative value absolute(2): absolute value Relative value: indicates the relative value to the last sampling. Currently, only absolute(2) is supported.')
nqaAlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaAlarmValue.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmValue.setDescription('The actual value of the monitored object is compared with the upper limit and lower limit.')
nqaAlarmStartUpNqaAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("risingAlarm", 1), ("fallingAlarm", 2), ("risingOrFallingAlarm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmStartUpNqaAlarm.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmStartUpNqaAlarm.setDescription('The alarm that may be sent when this entry is first set to valid. If the first sample after this entry becomes valid is greater than or equal to the risingThreshold and alarmStartupAlarm is equal to risingAlarm(1) or risingOrFallingAlarm(3), then a single rising alarm will be generated. If the first sample after this entry becomes valid is less than or equal to the fallingThreshold and alarmStartupAlarm is equal to fallingAlarm(2) or risingOrFallingAlarm(3), then a single falling alarm will be generated.')
nqaAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmRisingThreshold.setDescription('Set the upper limit of the alarm.')
nqaAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmFallingThreshold.setDescription('Set the lower limit of the alarm.')
nqaAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmRisingEventIndex.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmRisingEventIndex.setDescription('Index of the event triggered when the node value exceeds the upper limit.')
nqaAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmFallingEventIndex.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmFallingEventIndex.setDescription('Index of the event triggered when the node value is under the lower limit.')
nqaAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmDescription.setDescription('Alarm Description.')
nqaAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nqaAlarmStatus.setDescription('The status of the alarm row.')
nqaEventTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4), )
if mibBuilder.loadTexts: nqaEventTable.setStatus('current')
if mibBuilder.loadTexts: nqaEventTable.setDescription('A list of events to be generated.')
nqaEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1), ).setIndexNames((0, "NQA-MIB", "nqaEventIndex"))
if mibBuilder.loadTexts: nqaEventEntry.setStatus('current')
if mibBuilder.loadTexts: nqaEventEntry.setDescription('A set of parameters that describe an event to be generated when certain conditions are met. ')
nqaEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: nqaEventIndex.setStatus('current')
if mibBuilder.loadTexts: nqaEventIndex.setDescription('Uniquely identifies a row in the nqaEventTable.')
nqaEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("trap", 3), ("logAndTrap", 4), ("linkage", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaEventType.setStatus('current')
if mibBuilder.loadTexts: nqaEventType.setDescription('Event type, that is, behaviors for processing events: none(1): no behavior log(2): keeping logs trap(3): sending trap messages logandtrap(4): keeping logs and sending trap messages linkage(5): start the linkaged test-instance.')
nqaEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaEventDescription.setStatus('current')
if mibBuilder.loadTexts: nqaEventDescription.setDescription('Event description.')
nqaEventAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaEventAdminName.setStatus('current')
if mibBuilder.loadTexts: nqaEventAdminName.setDescription('Administrator name of event test instance.')
nqaEventOperationTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaEventOperationTag.setStatus('current')
if mibBuilder.loadTexts: nqaEventOperationTag.setDescription('Operation tag of event test instance.')
nqaEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 9, 4, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nqaEventStatus.setStatus('current')
if mibBuilder.loadTexts: nqaEventStatus.setDescription('The status of the event row.')
nqaSaveRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10))
nqaFtpSaveRecordEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordEnable.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordEnable.setDescription('Identifies whether saving test results to the FTP server through FTP is enabled. enable(1) disable(2) By default, the value is disable(2).')
nqaFtpSaveRecordIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordIpAddr.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordIpAddr.setDescription('Set the IP address of the FTP server to which test results are saved.')
nqaFtpSaveRecordVrfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordVrfName.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordVrfName.setDescription('Set the name of the VRF instance for the FTP server to which test results are saved.')
nqaFtpSaveRecordUserName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordUserName.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordUserName.setDescription('Set the user name of the FTP server to which test results are saved.')
nqaFtpSaveRecordPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordPassword.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordPassword.setDescription('Set the password used when the test results are saved to the FTP server.')
nqaFtpSaveRecordFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordFileName.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordFileName.setDescription('Set the file name of used by the FTP server to save test results.')
nqaFtpSaveRecordItemNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordItemNum.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordItemNum.setDescription('The value of this object identifies the number of NQA test results that can be saved in a file created on the FTP server. The default value is 100000.')
nqaFtpSaveRecordTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordTime.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordTime.setDescription('The value of this object identifies the duration that NQA test results can be saved in a file created on the FTP server. The default duration is 60 minutes.')
nqaFtpSaveRecordNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nqaFtpSaveRecordNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordNotificationEnable.setDescription('Set whether to send trap messages when saving test results to the FTP server is completed. By default, the value is disable(2).')
nqaFtpSaveRecordLastFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 111, 10, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 220))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nqaFtpSaveRecordLastFileName.setStatus('current')
if mibBuilder.loadTexts: nqaFtpSaveRecordLastFileName.setDescription('Set the name of the file used to save the last test record to the FTP server.')
mibBuilder.exportSymbols("NQA-MIB", nqaAdminExtPara25=nqaAdminExtPara25, nqaAdminParaTargetAddressType=nqaAdminParaTargetAddressType, nqaMpingStatsReceiverCount=nqaMpingStatsReceiverCount, nqaJitterCollectStatsMinDelayDS=nqaJitterCollectStatsMinDelayDS, nqaFTPStatsEntry=nqaFTPStatsEntry, nqaJitterCollectStatsMinOfNegativesSD=nqaJitterCollectStatsMinOfNegativesSD, nqaJitterCollectStatsAvgJitter=nqaJitterCollectStatsAvgJitter, nqaAdminExtPara2=nqaAdminExtPara2, nqaHTTPStatsDNSQueryErrors=nqaHTTPStatsDNSQueryErrors, nqaAdminParaDataFill=nqaAdminParaDataFill, nqaVplsMTraceHistoryPWExist=nqaVplsMTraceHistoryPWExist, nqaResultsSumCompletionTime2High=nqaResultsSumCompletionTime2High, nqaMtracertStatsSGPkgLossRate=nqaMtracertStatsSGPkgLossRate, nqaAdminParaLspPWE3RemoteAddress=nqaAdminParaLspPWE3RemoteAddress, nqaMtracertHistoryTimeStamp=nqaMtracertHistoryTimeStamp, nqaAdminParaInitialTtl=nqaAdminParaInitialTtl, nqaPathJitterStatsSumOfNegativesDS=nqaPathJitterStatsSumOfNegativesDS, nqaNotifications=nqaNotifications, nqaJitterCollectStatsFragPktDisorderNum=nqaJitterCollectStatsFragPktDisorderNum, nqaPppoeRedialIndex=nqaPppoeRedialIndex, nqaAdminParaTimeUnit=nqaAdminParaTimeUnit, nqaMpingStatsRTDOverThresholds=nqaMpingStatsRTDOverThresholds, nqaPathJitterStatsProbeResponses=nqaPathJitterStatsProbeResponses, nqaAdminExtPara10=nqaAdminExtPara10, nqaScheduleElapsedTime=nqaScheduleElapsedTime, nqaAdminGroup=nqaAdminGroup, nqaJitterStatsMaxOfPositivesDS=nqaJitterStatsMaxOfPositivesDS, nqaJitterStatsTestFailed=nqaJitterStatsTestFailed, nqaJitterStatsSum2OfPositivesSDLow=nqaJitterStatsSum2OfPositivesSDLow, nqaResultsAddress=nqaResultsAddress, nqaVplsMTraceHistoryForwardMode=nqaVplsMTraceHistoryForwardMode, nqaAlarmRisingThreshold=nqaAlarmRisingThreshold, nqaScheduleOperStatus=nqaScheduleOperStatus, nqaResultsCompletionTimeMin=nqaResultsCompletionTimeMin, nqaHTTPStatsTable=nqaHTTPStatsTable, nqaPppoeClientSessionId=nqaPppoeClientSessionId, nqaHTTPStatsTCPConnectTimeouts=nqaHTTPStatsTCPConnectTimeouts, nqaAlarmFallingEventIndex=nqaAlarmFallingEventIndex, nqaPathJitterStatsMaxOfNegativesDS=nqaPathJitterStatsMaxOfNegativesDS, nqaAdminCtrlTestName=nqaAdminCtrlTestName, nqaJitterStatsSum2DelaySDHigh=nqaJitterStatsSum2DelaySDHigh, nqaHTTPStatsLostPacketRatio=nqaHTTPStatsLostPacketRatio, nqaMtracertHistoryOutputPacketCount=nqaMtracertHistoryOutputPacketCount, nqaFTPStatsSendProbes=nqaFTPStatsSendProbes, nqaMaxAlarmNum=nqaMaxAlarmNum, nqaVplsMTraceHistorySuccessPathNode=nqaVplsMTraceHistorySuccessPathNode, nqaHTTPStatsRTTSum=nqaHTTPStatsRTTSum, nqaFTPStatsTestFinished=nqaFTPStatsTestFinished, nqaPathMtuStatsSentProbes=nqaPathMtuStatsSentProbes, nqaAdminExtPara19=nqaAdminExtPara19, nqaResultsTable=nqaResultsTable, nqaAdminParaLspNextHopAddress=nqaAdminParaLspNextHopAddress, nqaHistoryLastRC=nqaHistoryLastRC, nqaAdminExtPara12=nqaAdminExtPara12, nqaScheduleTable=nqaScheduleTable, nqaScheduleLastCollectIndex=nqaScheduleLastCollectIndex, nqaPathMtuStatsAddress=nqaPathMtuStatsAddress, nqaTimeOfLastSetError=nqaTimeOfLastSetError, nqaIcmpServerEntry=nqaIcmpServerEntry, nqaServerGroup=nqaServerGroup, nqaAdminParaDataSize=nqaAdminParaDataSize, nqaScheduleStartType=nqaScheduleStartType, nqaMacTraceHistoryEgressMac=nqaMacTraceHistoryEgressMac, NqaOperation=NqaOperation, nqaJitterStatsRTTAvg=nqaJitterStatsRTTAvg, EnableValue=EnableValue, nqaAdminParaMTraceSourceAddress=nqaAdminParaMTraceSourceAddress, nqaJitterCollectStatsMaxDelayDS=nqaJitterCollectStatsMaxDelayDS, nqaJitterStatsRTDOverThresholds=nqaJitterStatsRTDOverThresholds, nqaMtracertStatsDrops=nqaMtracertStatsDrops, nqaPathJitterStatsSumOfNegativesSD=nqaPathJitterStatsSumOfNegativesSD, nqaResultsSentProbes=nqaResultsSentProbes, nqaResultsTestFinished=nqaResultsTestFinished, nqaBaseGroup=nqaBaseGroup, nqaMpingHistoryEntry=nqaMpingHistoryEntry, nqaAdminExtPara23=nqaAdminExtPara23, nqaAdminParaTargetPort=nqaAdminParaTargetPort, nqaJitterCollectStatsAvgDelayDS=nqaJitterCollectStatsAvgDelayDS, nqaMpingStatsRttAvg=nqaMpingStatsRttAvg, nqaAdminCtrlThreshold3=nqaAdminCtrlThreshold3, nqaAdminParaDSField=nqaAdminParaDSField, nqaAdminParaDistanceNodeType=nqaAdminParaDistanceNodeType, nqaJitterStatsPacketLossDS=nqaJitterStatsPacketLossDS, nqaTcpServerTable=nqaTcpServerTable, nqaPppoeLcpTimeout=nqaPppoeLcpTimeout, nqaHistoryAddressType=nqaHistoryAddressType, nqaMtracertHistoryCompletionTime=nqaMtracertHistoryCompletionTime, nqaVplsMTraceHistoryIndex=nqaVplsMTraceHistoryIndex, PYSNMP_MODULE_ID=nqa, nqaJitterStatsMinDelayDS=nqaJitterStatsMinDelayDS, nqaPathMtuStatsDrops=nqaPathMtuStatsDrops, nqaJitterStatsJitterOut=nqaJitterStatsJitterOut, nqaPathJitterStatsSum2OfPositivesSDLow=nqaPathJitterStatsSum2OfPositivesSDLow, nqaFTPStatsTable=nqaFTPStatsTable, nqaAlarmStatus=nqaAlarmStatus, nqaJitterStatsSum2OfPositivesDSLow=nqaJitterStatsSum2OfPositivesDSLow, nqaAdminParaRMepID=nqaAdminParaRMepID, nqaHTTPStatsTransactionRTTMin=nqaHTTPStatsTransactionRTTMin, nqaEventAdminName=nqaEventAdminName, nqaGroupStatusType=nqaGroupStatusType, nqaPathJitterStatsMinOfNegativesDS=nqaPathJitterStatsMinOfNegativesDS, nqaFTPStatsTestCompleted=nqaFTPStatsTestCompleted, nqaTcpServerEntry=nqaTcpServerEntry, nqaAdminParaVlanId=nqaAdminParaVlanId, nqaJitterCollectStatsSumOfPositivesDS=nqaJitterCollectStatsSumOfPositivesDS, nqaAdminParaLspExp=nqaAdminParaLspExp, nqaHistoryProbeIndex=nqaHistoryProbeIndex, nqaAlarm=nqaAlarm, nqaAdminParaTrapProbeFailureFilter=nqaAdminParaTrapProbeFailureFilter, nqaPathJitterStatsPacketOutOfSequences=nqaPathJitterStatsPacketOutOfSequences, nqaJitterCollectStatsDrops=nqaJitterCollectStatsDrops, nqaJitterCollectStatsTable=nqaJitterCollectStatsTable, nqaJitterCollectStatsPacketLossDS=nqaJitterCollectStatsPacketLossDS, nqaSupportServerType=nqaSupportServerType, nqaMpingStatsSequenceErrors=nqaMpingStatsSequenceErrors, nqaVplsMacTracertHistorySuccessPathNode=nqaVplsMacTracertHistorySuccessPathNode, nqaJitterStatsJitterIn=nqaJitterStatsJitterIn, nqaPathMtuStatsProbeResponses=nqaPathMtuStatsProbeResponses, nqaPathJitterStatsRttMin=nqaPathJitterStatsRttMin, nqaAdminParaRemoteAddressType=nqaAdminParaRemoteAddressType, nqaIcmpServerAddress=nqaIcmpServerAddress, nqaPathJitterStatsMaxOfPositivesSD=nqaPathJitterStatsMaxOfPositivesSD, nqaPathJitterStatsRtdOverThresholds=nqaPathJitterStatsRtdOverThresholds, nqaJitterStatsSum2OfNegativesDSHigh=nqaJitterStatsSum2OfNegativesDSHigh, nqaAdminParaMTraceGroupAddress=nqaAdminParaMTraceGroupAddress, nqaResultsHopIndex=nqaResultsHopIndex, nqaJitterCollectStatsRTTMax=nqaJitterCollectStatsRTTMax, nqaAdminExtPara50=nqaAdminExtPara50, nqaJitterStatsAvgJitter=nqaJitterStatsAvgJitter, nqaPathJitterStatsErrors=nqaPathJitterStatsErrors, nqaSaveRecord=nqaSaveRecord, nqaJitterStatsMaxOfNegativesSD=nqaJitterStatsMaxOfNegativesSD, nqaMpingStatsReceiverIndex=nqaMpingStatsReceiverIndex, nqaJitterStatsOWDThresholdNotificationSD=nqaJitterStatsOWDThresholdNotificationSD, nqaMtracertHistoryIndex=nqaMtracertHistoryIndex, nqaJitterStatsNumOfRTT=nqaJitterStatsNumOfRTT, nqaFtpSaveRecordFileName=nqaFtpSaveRecordFileName, nqaPathJitterStatsSum2OfNegativesDSLow=nqaPathJitterStatsSum2OfNegativesDSLow, nqaJitterStatsOWSumSD=nqaJitterStatsOWSumSD, nqaFTPStatsErrors=nqaFTPStatsErrors, nqaJitterCollectStatsNumOfPositivesDS=nqaJitterCollectStatsNumOfPositivesDS, nqaAdminCtrlOwnerIndex=nqaAdminCtrlOwnerIndex, nqaJitterCollectStatsOWDOverThresholdsSD=nqaJitterCollectStatsOWDOverThresholdsSD, nqaFtpSaveRecordVrfName=nqaFtpSaveRecordVrfName, nqaAdminCtrlEntry=nqaAdminCtrlEntry, nqaMtracertHistoryLastRC=nqaMtracertHistoryLastRC, nqaMpingHistoryFibHit=nqaMpingHistoryFibHit, nqaMpingHistoryResponseIndex=nqaMpingHistoryResponseIndex, nqaJitterCollectStatsMaxOfPositivesSD=nqaJitterCollectStatsMaxOfPositivesSD, nqaNumOfCurrentCtrlEntry=nqaNumOfCurrentCtrlEntry, nqaAdminExtPara44=nqaAdminExtPara44, NqaType=NqaType, nqaPathMtuStatsDiscoveryPathMtuMin=nqaPathMtuStatsDiscoveryPathMtuMin, nqaPathJitterStatsSum2OfPositivesDSLow=nqaPathJitterStatsSum2OfPositivesDSLow, nqaMpingHistoryTable=nqaMpingHistoryTable, nqaAdminParaExtEntry=nqaAdminParaExtEntry, nqaJitterStatsRTTSum2Low=nqaJitterStatsRTTSum2Low, nqaPathJitterStatsRttAvg=nqaPathJitterStatsRttAvg, nqaVplsMTraceHistoryRcvLeaveCount=nqaVplsMTraceHistoryRcvLeaveCount, nqaPppoeDiscoveryTimeout=nqaPppoeDiscoveryTimeout, nqaJitterStatsSum2OfNegativesDSLow=nqaJitterStatsSum2OfNegativesDSLow, nqaVplsMacTracertHistoryDSTable=nqaVplsMacTracertHistoryDSTable, nqaJitterCollectStatsOWDOverThresholdsDS=nqaJitterCollectStatsOWDOverThresholdsDS, nqaJitterCollectStatsMaxOfNegativesSD=nqaJitterCollectStatsMaxOfNegativesSD, nqaMpingHistoryAddressType=nqaMpingHistoryAddressType, nqaPathJitterStatsOwdSumDS=nqaPathJitterStatsOwdSumDS, nqaJitterCollectStatsMaxOfPositivesDS=nqaJitterCollectStatsMaxOfPositivesDS, nqaAdminParaTestFailurePercent=nqaAdminParaTestFailurePercent, nqaMacTraceHistoryIngressMac=nqaMacTraceHistoryIngressMac, nqaJitterCollectStatsErrors=nqaJitterCollectStatsErrors, nqaAdminExtPara1=nqaAdminExtPara1, nqaBase=nqaBase, nqaJitterStatsErrors=nqaJitterStatsErrors, nqaCtrl=nqaCtrl, nqaPathMtuStatsTestFinished=nqaPathMtuStatsTestFinished, nqaJitterStatsPktRewriteRatio=nqaJitterStatsPktRewriteRatio, nqaPathMtuStatsAddressType=nqaPathMtuStatsAddressType, nqaHTTPStatsIndex=nqaHTTPStatsIndex, nqaMpingHistoryFinishState=nqaMpingHistoryFinishState, nqaJitterCollectStatsSum2OfNegativesSDLow=nqaJitterCollectStatsSum2OfNegativesSDLow, nqaJitterCollectStatsNumOfOWD=nqaJitterCollectStatsNumOfOWD, nqaJitterStatsSum2DelayDSHigh=nqaJitterStatsSum2DelayDSHigh, nqaAdminParaCreateHopsEntries=nqaAdminParaCreateHopsEntries, nqaAdminExtPara37=nqaAdminExtPara37, nqaJitterStatsOperOfIcpif=nqaJitterStatsOperOfIcpif, nqaPathJitterStatsNumOfNegativesSD=nqaPathJitterStatsNumOfNegativesSD, nqaHTTPStatsEntry=nqaHTTPStatsEntry, nqaAdminParaIfIndex=nqaAdminParaIfIndex, HWLldpPortIdSubtype=HWLldpPortIdSubtype, nqaAdminParaMaxFailures=nqaAdminParaMaxFailures, nqaJitterStatsSumOfNegativesDS=nqaJitterStatsSumOfNegativesDS, nqaUdpServerVrfName=nqaUdpServerVrfName, nqaAdminExtPara46=nqaAdminExtPara46, nqaAdminExtPara18=nqaAdminExtPara18, nqaPathMtuStatsOptimumFirstStep=nqaPathMtuStatsOptimumFirstStep, nqaCompliances=nqaCompliances, nqaJitterCollectStatsSum2OfPositivesSDLow=nqaJitterCollectStatsSum2OfPositivesSDLow, nqaJitterStatsOWDOverThresholdsDS=nqaJitterStatsOWDOverThresholdsDS, nqaJitterStatsSum2OfNegativesSDLow=nqaJitterStatsSum2OfNegativesSDLow, nqaAlarmVariable=nqaAlarmVariable, nqaPathJitterStatsMinOfNegativesSD=nqaPathJitterStatsMinOfNegativesSD, nqaIcmpServerStatus=nqaIcmpServerStatus, nqaGroupTable=nqaGroupTable, nqaVplsMTraceHistoryCompletionTime=nqaVplsMTraceHistoryCompletionTime, nqaJitterCollectStatsSum2OfNegativesDSHigh=nqaJitterCollectStatsSum2OfNegativesDSHigh, nqaPathJitterStatsAddress=nqaPathJitterStatsAddress, nqaResultsAddressType=nqaResultsAddressType, nqaUdpServerAddress=nqaUdpServerAddress, nqaJitterStatsMinOfPositivesDS=nqaJitterStatsMinOfPositivesDS, nqaJitterStatsMaxDelaySD=nqaJitterStatsMaxDelaySD, nqaMtracertStatsInPkgLossRate=nqaMtracertStatsInPkgLossRate, nqaMtracertStatsOutPkgRate=nqaMtracertStatsOutPkgRate, nqaGroupLeaderOwnerIndex=nqaGroupLeaderOwnerIndex, nqaPathMtuStatsTable=nqaPathMtuStatsTable, nqaReset=nqaReset, nqaAdminExtPara3=nqaAdminExtPara3, nqaFTPStatsIndex=nqaFTPStatsIndex, nqaAdminExtPara20=nqaAdminExtPara20, nqaPathJitterStatsSentProbes=nqaPathJitterStatsSentProbes, nqaMaxNumOfRequests=nqaMaxNumOfRequests, nqaJitterStatsPktLossUnknown=nqaJitterStatsPktLossUnknown, nqaVplsMTraceHistoryHopIndex=nqaVplsMTraceHistoryHopIndex, nqaPathJitterStatsMinOfPositivesDS=nqaPathJitterStatsMinOfPositivesDS, nqaAdminExtPara29=nqaAdminExtPara29, nqaJitterStatsRTTMax=nqaJitterStatsRTTMax, nqaVplsMacTracertHistoryDSCount=nqaVplsMacTracertHistoryDSCount, nqaResultsThresholdNotification=nqaResultsThresholdNotification, nqaAdminExtPara21=nqaAdminExtPara21, nqaHTTPStatsTestCompleted=nqaHTTPStatsTestCompleted, nqaPppoeAuthorizationTimeout=nqaPppoeAuthorizationTimeout, nqaAdminExtPara16=nqaAdminExtPara16, nqaJitterStatsSumOfNegativesSD=nqaJitterStatsSumOfNegativesSD, nqaResultsCompletionTimeMax=nqaResultsCompletionTimeMax, nqaResultsNoConnections=nqaResultsNoConnections, nqaJitterCollectStatsFragPktDisorderRatio=nqaJitterCollectStatsFragPktDisorderRatio, nqaAdminParaTrapTestFailureFilter=nqaAdminParaTrapTestFailureFilter, nqaAdminParaDontFragment=nqaAdminParaDontFragment, nqaPathJitterStatsOwdSumSD=nqaPathJitterStatsOwdSumSD, nqaEnable=nqaEnable, nqaPathJitterStatsTimeouts=nqaPathJitterStatsTimeouts, nqaVplsMacTracertHistoryHopIndex=nqaVplsMacTracertHistoryHopIndex, nqaAdminParaIcpifAdvFactor=nqaAdminParaIcpifAdvFactor, nqaJitterCollectStatsPacketLossUnknown=nqaJitterCollectStatsPacketLossUnknown, nqaEventStatus=nqaEventStatus, nqaVplsMTraceHistoryIGMPProxyEnable=nqaVplsMTraceHistoryIGMPProxyEnable, nqaFtpSaveRecordUserName=nqaFtpSaveRecordUserName, nqaJitterStatsPacketLossRatio=nqaJitterStatsPacketLossRatio, nqaResultsTestCompleted=nqaResultsTestCompleted, nqaMacTraceHistoryTable=nqaMacTraceHistoryTable, nqaPathMtuStatsDiscoveryPathMtuMax=nqaPathMtuStatsDiscoveryPathMtuMax, nqaTcpServerAddress=nqaTcpServerAddress, nqaAdminCtrlStatus=nqaAdminCtrlStatus, nqaMacTraceHistoryIngressAction=nqaMacTraceHistoryIngressAction, nqaResultsRTDOverThresholds=nqaResultsRTDOverThresholds)
mibBuilder.exportSymbols("NQA-MIB", nqaMacTraceHistoryEgressAction=nqaMacTraceHistoryEgressAction, nqaMtracertStatsRTDOverThresholds=nqaMtracertStatsRTDOverThresholds, nqaPathJitterStatsMinOfPositivesSD=nqaPathJitterStatsMinOfPositivesSD, HWLldpPortId=HWLldpPortId, nqaPppoeConnectionTime=nqaPppoeConnectionTime, nqaFTPStatsCompletions=nqaFTPStatsCompletions, nqaMtracertStatsTable=nqaMtracertStatsTable, nqaHTTPStatsTCPConnectRTTMin=nqaHTTPStatsTCPConnectRTTMin, nqaVplsMTraceHistoryHitFlag=nqaVplsMTraceHistoryHitFlag, nqaMpingStatsTimeouts=nqaMpingStatsTimeouts, nqaAdminParaLspTunnelType=nqaAdminParaLspTunnelType, nqaAdminExtPara47=nqaAdminExtPara47, nqaPathMtuStatsIndex=nqaPathMtuStatsIndex, nqaMpingStatsIndex=nqaMpingStatsIndex, nqaHistoryAddress=nqaHistoryAddress, nqaJitterStatsSumOfPositivesDS=nqaJitterStatsSumOfPositivesDS, nqaResultsIndex=nqaResultsIndex, nqaAdminCtrlTable=nqaAdminCtrlTable, nqaAdminParaMAName=nqaAdminParaMAName, nqaAdminParaDnsServerAddress=nqaAdminParaDnsServerAddress, nqaScheduleStartTime=nqaScheduleStartTime, nqaAdminParaLspAddressType=nqaAdminParaLspAddressType, nqaAdminParaMTraceSendMode=nqaAdminParaMTraceSendMode, nqaAlarmGroup=nqaAlarmGroup, nqaVplsMacTracertHistoryAddress=nqaVplsMacTracertHistoryAddress, nqaJitterCollectStatsSum2OfPositivesDSLow=nqaJitterCollectStatsSum2OfPositivesDSLow, nqaHTTPStatsDNSRTTMax=nqaHTTPStatsDNSRTTMax, nqaMacTraceHistoryIngressIfName=nqaMacTraceHistoryIngressIfName, nqaFTPStatsCtrlConnMaxTime=nqaFTPStatsCtrlConnMaxTime, nqaVplsMTraceHistoryResponserAddress=nqaVplsMTraceHistoryResponserAddress, nqaMpingStatsCompletionTimeMin=nqaMpingStatsCompletionTimeMin, nqaFTPStatsConnectSumTimeMin=nqaFTPStatsConnectSumTimeMin, nqaMtracertStatsInPkgRate=nqaMtracertStatsInPkgRate, nqaJitterCollectStatsSum2OfNegativesDSLow=nqaJitterCollectStatsSum2OfNegativesDSLow, nqaVplsMTraceHistoryEntry=nqaVplsMTraceHistoryEntry, nqaIcmpServerAddressType=nqaIcmpServerAddressType, nqaJitterStatsSentProbes=nqaJitterStatsSentProbes, nqaMtracertStatsIndex=nqaMtracertStatsIndex, nqaPathJitterStatsOwdOverThresholdsDS=nqaPathJitterStatsOwdOverThresholdsDS, nqaIcmpServerTable=nqaIcmpServerTable, nqaMpingHistoryCompletionTime=nqaMpingHistoryCompletionTime, nqaPathJitterStatsMaxOfNegativesSD=nqaPathJitterStatsMaxOfNegativesSD, nqaJitterCollectStatsRTTSum=nqaJitterCollectStatsRTTSum, nqaScheduleEndType=nqaScheduleEndType, nqaAdminParaTable=nqaAdminParaTable, nqaVplsMacTracertHistoryCompletionTime=nqaVplsMacTracertHistoryCompletionTime, nqaAdminExtPara6=nqaAdminExtPara6, nqaAdminParaSourcePort=nqaAdminParaSourcePort, nqaJitterStatsNumOfPositivesSD=nqaJitterStatsNumOfPositivesSD, nqaMpingStatsSumCompletionTime=nqaMpingStatsSumCompletionTime, nqaMtracertStatsBusies=nqaMtracertStatsBusies, nqaPathJitterStatsSumOfPositivesSD=nqaPathJitterStatsSumOfPositivesSD, nqaJitterStatsMaxOfPositivesSD=nqaJitterStatsMaxOfPositivesSD, nqaPathJitterStatsJitterIn=nqaPathJitterStatsJitterIn, nqaMpingStatsLastFibHit=nqaMpingStatsLastFibHit, nqaFtpSaveRecordEnable=nqaFtpSaveRecordEnable, nqaAdminParaLspPWE3RemoteVcId=nqaAdminParaLspPWE3RemoteVcId, nqaFTPStatsDataConnMaxTime=nqaFTPStatsDataConnMaxTime, nqaFTPStatsThresholdNotification=nqaFTPStatsThresholdNotification, nqaCompliance=nqaCompliance, nqaEventOperationTag=nqaEventOperationTag, nqaJitterCollectStatsAvgJitterSD=nqaJitterCollectStatsAvgJitterSD, nqaFTPStatsCtrlConnAveTime=nqaFTPStatsCtrlConnAveTime, nqaJitterStatsTimeUnit=nqaJitterStatsTimeUnit, nqaVplsMacTracertHistoryAddressType=nqaVplsMacTracertHistoryAddressType, nqaAdminExtPara45=nqaAdminExtPara45, nqaConformance=nqaConformance, nqaAdminParaLspVCType=nqaAdminParaLspVCType, nqaJitterStatsMaxOfNegativesDS=nqaJitterStatsMaxOfNegativesDS, nqaFTPStatsConnectSumTimeMax=nqaFTPStatsConnectSumTimeMax, nqaFtpSaveRecordGroup=nqaFtpSaveRecordGroup, nqaVplsMTraceHistoryIGMPSnpgEnable=nqaVplsMTraceHistoryIGMPSnpgEnable, nqaJitterStatsProbeFailed=nqaJitterStatsProbeFailed, nqaAlarmFallingThreshold=nqaAlarmFallingThreshold, nqaEventType=nqaEventType, nqaHTTPStatsDNSRTTMin=nqaHTTPStatsDNSRTTMin, nqaAdminExtPara11=nqaAdminExtPara11, nqaAdminParaLspPWE3Option=nqaAdminParaLspPWE3Option, nqaHTTPStatsDNSServerTimeouts=nqaHTTPStatsDNSServerTimeouts, nqaFTPStatsProbeResponses=nqaFTPStatsProbeResponses, nqaJitterCollectStatsPktRewriteNum=nqaJitterCollectStatsPktRewriteNum, nqaUdpServerStatus=nqaUdpServerStatus, nqaJitterStatsFragPktDisorderNum=nqaJitterStatsFragPktDisorderNum, nqaGroupPeriod=nqaGroupPeriod, nqaAdminParaTrapGeneration=nqaAdminParaTrapGeneration, nqaAdminParaFtpPassword=nqaAdminParaFtpPassword, nqaJitterCollectStatsEntry=nqaJitterCollectStatsEntry, nqaJitterStatsRTTSum=nqaJitterStatsRTTSum, nqaJitterStatsAvgDelayDS=nqaJitterStatsAvgDelayDS, nqaAdminParaPppoePassword=nqaAdminParaPppoePassword, nqaMtracertStatsAddressType=nqaMtracertStatsAddressType, nqaAdminExtPara38=nqaAdminExtPara38, nqaPppoeClientIpAddress=nqaPppoeClientIpAddress, nqaStats=nqaStats, nqaMtracertStatsSentProbes=nqaMtracertStatsSentProbes, nqaHTTPStatsTransactionTimeouts=nqaHTTPStatsTransactionTimeouts, nqaPathJitterStatsDrops=nqaPathJitterStatsDrops, nqaJitterCollectStatsSum2OfNegativesSDHigh=nqaJitterCollectStatsSum2OfNegativesSDHigh, nqaMacTraceHistoryRelayAction=nqaMacTraceHistoryRelayAction, nqaJitterCollectStatsCompletions=nqaJitterCollectStatsCompletions, nqaAdminExtPara49=nqaAdminExtPara49, nqaMpingHistoryIndex=nqaMpingHistoryIndex, nqaAdminParaPathMtuStep=nqaAdminParaPathMtuStep, nqaMpingStatsCompletions=nqaMpingStatsCompletions, nqaAdminParaFtpMode=nqaAdminParaFtpMode, nqaJitterStatsNumOfNegativesSD=nqaJitterStatsNumOfNegativesSD, nqaPathJitterStatsPktLossUnknown=nqaPathJitterStatsPktLossUnknown, nqaJitterStatsNumOfNegativesDS=nqaJitterStatsNumOfNegativesDS, nqaMpingStatsEntry=nqaMpingStatsEntry, nqaAdminParaExtTable=nqaAdminParaExtTable, nqaPathJitterStatsSum2OfNegativesDSHigh=nqaPathJitterStatsSum2OfNegativesDSHigh, nqaHTTPStatsTcpConnErrors=nqaHTTPStatsTcpConnErrors, nqaMpingStatsReceiverAddress=nqaMpingStatsReceiverAddress, nqaAdminExtPara13=nqaAdminExtPara13, nqaVplsMTraceHistoryResponseIndex=nqaVplsMTraceHistoryResponseIndex, nqaResultsDisconnects=nqaResultsDisconnects, nqaResultsRttAvg=nqaResultsRttAvg, nqaMtracertStatsCurHopCount=nqaMtracertStatsCurHopCount, nqaVplsMacTracertHistoryEntry=nqaVplsMacTracertHistoryEntry, nqaMtracertStatsEntry=nqaMtracertStatsEntry, nqaFtpSaveRecordItemNum=nqaFtpSaveRecordItemNum, nqaAdminParaPppoeAuthenticationMode=nqaAdminParaPppoeAuthenticationMode, nqaAdminCtrlFrequency=nqaAdminCtrlFrequency, nqaHTTPStatsTestFinished=nqaHTTPStatsTestFinished, nqaAdminParaMTraceResponseAddressType=nqaAdminParaMTraceResponseAddressType, nqaPppoeStatsTestCompleted=nqaPppoeStatsTestCompleted, nqaJitterCollectStatsPktDisorderNum=nqaJitterCollectStatsPktDisorderNum, nqaJitterCollectStatsSumOfNegativesDS=nqaJitterCollectStatsSumOfNegativesDS, nqaJitterStatsRTDThresholdNotification=nqaJitterStatsRTDThresholdNotification, nqaHTTPStatsTCPConnectRTTSum=nqaHTTPStatsTCPConnectRTTSum, nqaAlarmTable=nqaAlarmTable, nqaAdminParaDnsServerAddressType=nqaAdminParaDnsServerAddressType, nqaJitterStatsSum2DelaySDLow=nqaJitterStatsSum2DelaySDLow, nqaJitterCollectStatsProbeResponses=nqaJitterCollectStatsProbeResponses, nqaMtracertHistoryAddressType=nqaMtracertHistoryAddressType, NqaDistanceNodeType=NqaDistanceNodeType, nqaJitterStatsMinDelaySD=nqaJitterStatsMinDelaySD, nqaFTPStatsConnectSumTimeAve=nqaFTPStatsConnectSumTimeAve, nqaMtracertStatsTimeDelay=nqaMtracertStatsTimeDelay, nqaAlarmSampleType=nqaAlarmSampleType, nqaJitterStatsMinOfNegativesDS=nqaJitterStatsMinOfNegativesDS, nqaAdminParaSourceAddressType=nqaAdminParaSourceAddressType, nqaJitterStatsSumOfPositivesSD=nqaJitterStatsSumOfPositivesSD, nqaMpingStatsLastGoodProbe=nqaMpingStatsLastGoodProbe, nqaHistoryIndex=nqaHistoryIndex, nqaMtracertHistoryInputPacketCount=nqaMtracertHistoryInputPacketCount, nqaResultsDrops=nqaResultsDrops, nqaJitterStatsMinOfPositivesSD=nqaJitterStatsMinOfPositivesSD, nqaHTTPStatsDNSRTTSum=nqaHTTPStatsDNSRTTSum, nqaVplsMacTracertHistoryDSEntry=nqaVplsMacTracertHistoryDSEntry, nqaVplsMTraceHistoryIGMPRouterPortLearningEnable=nqaVplsMTraceHistoryIGMPRouterPortLearningEnable, nqaResultsSequenceErrors=nqaResultsSequenceErrors, nqaHTTPStatsProbeResponses=nqaHTTPStatsProbeResponses, nqaPppoeStatsTable=nqaPppoeStatsTable, nqaMpingStatsCompletionTimeMax=nqaMpingStatsCompletionTimeMax, nqaJitterCollectStatsAvgDelaySD=nqaJitterCollectStatsAvgDelaySD, nqaJitterCollectStatsRTTSum2Low=nqaJitterCollectStatsRTTSum2Low, nqaMtracertHistoryHopIndex=nqaMtracertHistoryHopIndex, nqaMaxEventNum=nqaMaxEventNum, nqaMacTraceHistoryReceiveOrder=nqaMacTraceHistoryReceiveOrder, nqaPathJitterStatsMaxOfPositivesDS=nqaPathJitterStatsMaxOfPositivesDS, nqaVplsMacTracertHistoryTimeStamp=nqaVplsMacTracertHistoryTimeStamp, nqaPathJitterStatsSum2OfPositivesSDHigh=nqaPathJitterStatsSum2OfPositivesSDHigh, nqaJitterCollectStatsIndex=nqaJitterCollectStatsIndex, nqaJitterCollectStatsSumOfNegativesSD=nqaJitterCollectStatsSumOfNegativesSD, nqaPathJitterStatsPacketLossSD=nqaPathJitterStatsPacketLossSD, nqaVplsMTraceHistoryUpStreamAddressType=nqaVplsMTraceHistoryUpStreamAddressType, nqaMpingStatsSentProbes=nqaMpingStatsSentProbes, nqaAdminExtPara31=nqaAdminExtPara31, nqaMtracertHistoryAddress=nqaMtracertHistoryAddress, nqaJitterStatsIndex=nqaJitterStatsIndex, nqaJitterStatsPktDisorderNum=nqaJitterStatsPktDisorderNum, nqaHistoryHopIndex=nqaHistoryHopIndex, nqaFTPStatsDataConnMinTime=nqaFTPStatsDataConnMinTime, nqaJitterCollectStatsSum2OfPositivesSDHigh=nqaJitterCollectStatsSum2OfPositivesSDHigh, nqaMtracertStatsCurProbeCount=nqaMtracertStatsCurProbeCount, nqaPathJitterStatsPacketLossRatio=nqaPathJitterStatsPacketLossRatio, nqaPathJitterStatsNumOfOwd=nqaPathJitterStatsNumOfOwd, nqaJitterCollectStatsNumOfNegativesSD=nqaJitterCollectStatsNumOfNegativesSD, nqaHTTPStatsErrors=nqaHTTPStatsErrors, nqaScheduleNumOfInitiations=nqaScheduleNumOfInitiations, nqaAdminExtPara41=nqaAdminExtPara41, nqaUdpServerTable=nqaUdpServerTable, nqaHTTPStatsTCPConnectRTTMax=nqaHTTPStatsTCPConnectRTTMax, nqaJitterCollectStatsNumOfNegativesDS=nqaJitterCollectStatsNumOfNegativesDS, nqaJitterStatsSum2DelayDSLow=nqaJitterStatsSum2DelayDSLow, nqaPathJitterStatsBusies=nqaPathJitterStatsBusies, nqaAdminParaCodecType=nqaAdminParaCodecType, nqaJitterCollectStatsRTTAvg=nqaJitterCollectStatsRTTAvg, nqaMpingStatsSumCompletionTime2Low=nqaMpingStatsSumCompletionTime2Low, nqaVplsMacTracertHistoryDSAddress=nqaVplsMacTracertHistoryDSAddress, nqaMtracertStatsProbeResponses=nqaMtracertStatsProbeResponses, nqaHTTPStatsTransactionRTTSum=nqaHTTPStatsTransactionRTTSum, nqaJitterStatsAvgDelaySD=nqaJitterStatsAvgDelaySD, nqaPathJitterStatsCompletions=nqaPathJitterStatsCompletions, nqaPathJitterStatsNumOfRtt=nqaPathJitterStatsNumOfRtt, nqaPppoeGatewayIpAddress=nqaPppoeGatewayIpAddress, nqaVplsMacTracertHistoryDSIndex=nqaVplsMacTracertHistoryDSIndex, nqaAdminParaMDName=nqaAdminParaMDName, nqaMpingStatsProbeResponses=nqaMpingStatsProbeResponses, nqaVplsMTraceHistoryTable=nqaVplsMTraceHistoryTable, nqaJitterCollectStatsRTDOverThresholds=nqaJitterCollectStatsRTDOverThresholds, nqaMacTraceHistoryEntry=nqaMacTraceHistoryEntry, nqaFtpSaveRecordIpAddr=nqaFtpSaveRecordIpAddr, nqaPathMtuStatsEntry=nqaPathMtuStatsEntry, nqaMtracertStatsCompletions=nqaMtracertStatsCompletions, nqaHistoryFinishState=nqaHistoryFinishState, nqaMpingHistoryAddress=nqaMpingHistoryAddress, nqaMtracertHistoryIncomingIfAddress=nqaMtracertHistoryIncomingIfAddress, nqaServerEnable=nqaServerEnable, nqaPathJitterStatsRttSum2High=nqaPathJitterStatsRttSum2High, nqaMacTraceHistorySeqNumber=nqaMacTraceHistorySeqNumber, nqaPathMtuStatsPathMtu=nqaPathMtuStatsPathMtu, nqaResultsTestAttempts=nqaResultsTestAttempts, nqaHistoryCompletionTime=nqaHistoryCompletionTime, nqaMtracertHistoryTable=nqaMtracertHistoryTable, nqaAdminParaLspReplyMode=nqaAdminParaLspReplyMode, nqaEventIndex=nqaEventIndex, nqaPathJitterStatsOwdOverThresholdsSD=nqaPathJitterStatsOwdOverThresholdsSD, nqaAdminParaFtpUserName=nqaAdminParaFtpUserName, nqaAlarmValue=nqaAlarmValue, nqaVplsMTraceHistoryFinishState=nqaVplsMTraceHistoryFinishState, nqaJitterStatsMaxDelayDS=nqaJitterStatsMaxDelayDS, nqaPathJitterStatsHopIndex=nqaPathJitterStatsHopIndex, nqaIcmpServerVrfName=nqaIcmpServerVrfName, nqaVplsMTraceHistoryLastRSC=nqaVplsMTraceHistoryLastRSC, nqaJitterStatsTestFinished=nqaJitterStatsTestFinished, nqaJitterStatsRTTMin=nqaJitterStatsRTTMin, nqaPppoeStatsEntry=nqaPppoeStatsEntry, nqaAdminExtPara17=nqaAdminExtPara17, nqaAdminExtPara33=nqaAdminExtPara33, nqaServer=nqaServer, nqaFtpSaveRecordTime=nqaFtpSaveRecordTime, nqaAdminExtPara48=nqaAdminExtPara48, nqaJitterCollectStatsMaxDelaySD=nqaJitterCollectStatsMaxDelaySD, nqaFTPStatsMessageBodyOctetsSum=nqaFTPStatsMessageBodyOctetsSum, nqaAdminExtPara22=nqaAdminExtPara22, nqaMtracertStatsHopIndex=nqaMtracertStatsHopIndex, nqaMtracertStatsLastGoodPath=nqaMtracertStatsLastGoodPath, nqaAdminExtPara35=nqaAdminExtPara35, nqaGroupMemberNum=nqaGroupMemberNum, nqaStatsGroup=nqaStatsGroup, nqaHTTPStatsRTDOverThresholds=nqaHTTPStatsRTDOverThresholds, nqaVplsMTraceHistoryResponserAddressType=nqaVplsMTraceHistoryResponserAddressType, nqaPathJitterStatsAvgJitterDS=nqaPathJitterStatsAvgJitterDS, nqaMtracertHistoryPreHopRouterAddress=nqaMtracertHistoryPreHopRouterAddress, nqaAdminParaHardwareBased=nqaAdminParaHardwareBased, nqaResultsCurHopCount=nqaResultsCurHopCount, nqaGroupLeaderTestName=nqaGroupLeaderTestName, nqaScheduleLastFinishIndex=nqaScheduleLastFinishIndex, nqaResultsTestFailed=nqaResultsTestFailed, nqaAlarmEntry=nqaAlarmEntry, nqaHTTPStatsSendProbes=nqaHTTPStatsSendProbes, nqaJitterStatsPktRewriteNum=nqaJitterStatsPktRewriteNum)
mibBuilder.exportSymbols("NQA-MIB", nqaResultsProbeResponses=nqaResultsProbeResponses, nqaMpingStatsTestFinished=nqaMpingStatsTestFinished, nqaHTTPStatsRttAvg=nqaHTTPStatsRttAvg, nqaJitterCollectStatsPktDisorderRatio=nqaJitterCollectStatsPktDisorderRatio, nqaFTPStatsRttAvg=nqaFTPStatsRttAvg, nqaAdminParaPppoeRedialUpTimes=nqaAdminParaPppoeRedialUpTimes, nqaEventEntry=nqaEventEntry, nqaAdminExtPara42=nqaAdminExtPara42, nqaAdminParaHttpOperationString=nqaAdminParaHttpOperationString, nqaResultsLastGoodProbe=nqaResultsLastGoodProbe, nqaRisingAlarmNotification=nqaRisingAlarmNotification, nqaAdminParaMacAddress=nqaAdminParaMacAddress, nqaAdminExtPara34=nqaAdminExtPara34, nqaPppoeStatsTestFailed=nqaPppoeStatsTestFailed, nqaAdminParaResultRowMax=nqaAdminParaResultRowMax, nqaMtracertHistoryFwdCode=nqaMtracertHistoryFwdCode, nqaAdminParaPppoeVlanIf=nqaAdminParaPppoeVlanIf, nqaJitterStatsOperOfMos=nqaJitterStatsOperOfMos, nqaMacTraceHistoryEgressIfName=nqaMacTraceHistoryEgressIfName, nqaAlarmDescription=nqaAlarmDescription, nqaAdminParaByPassRouteTable=nqaAdminParaByPassRouteTable, nqaMtracertHistoryOutgoingIfAddress=nqaMtracertHistoryOutgoingIfAddress, nqaMaxConcurrentRequests=nqaMaxConcurrentRequests, nqaJitterCollectStatsPacketLossSD=nqaJitterCollectStatsPacketLossSD, nqaVplsMTraceHistoryRcvReportCount=nqaVplsMTraceHistoryRcvReportCount, nqaPathMtuStatsBusies=nqaPathMtuStatsBusies, nqaScheduleEndTime=nqaScheduleEndTime, nqaHistoryTable=nqaHistoryTable, nqaAdminParaLspPWE3Type=nqaAdminParaLspPWE3Type, nqaAdminExtPara8=nqaAdminExtPara8, nqaAdminExtPara5=nqaAdminExtPara5, nqaPppoeStatsCurrentPhase=nqaPppoeStatsCurrentPhase, nqaJitterStatsNumOfPositivesDS=nqaJitterStatsNumOfPositivesDS, nqaJitterStatsPacketLossSD=nqaJitterStatsPacketLossSD, nqaAdminParaLspVersion=nqaAdminParaLspVersion, nqaHistory=nqaHistory, nqaMtracertHistoryTotalSGPacketCount=nqaMtracertHistoryTotalSGPacketCount, nqaJitterStatsSum2OfPositivesDSHigh=nqaJitterStatsSum2OfPositivesDSHigh, nqaJitterCollectStatsMaxOfNegativesDS=nqaJitterCollectStatsMaxOfNegativesDS, nqaAdminParaOperation=nqaAdminParaOperation, nqaAdminParaFtpFileSize=nqaAdminParaFtpFileSize, nqaFtpSaveRecordNotificationEnable=nqaFtpSaveRecordNotificationEnable, nqaJitterCollectStatsPacketOutOfSequences=nqaJitterCollectStatsPacketOutOfSequences, nqaEventTable=nqaEventTable, nqaAdminParaMTraceMaxTtl=nqaAdminParaMTraceMaxTtl, nqaHistoryGroup=nqaHistoryGroup, nqaJitterCollectStatsSumOfPositivesSD=nqaJitterCollectStatsSumOfPositivesSD, nqaMpingStatsTargetAddressType=nqaMpingStatsTargetAddressType, nqaPathJitterStatsRttMax=nqaPathJitterStatsRttMax, nqaPathJitterStatsNumOfPositivesDS=nqaPathJitterStatsNumOfPositivesDS, nqaJitterStatsEntry=nqaJitterStatsEntry, nqaVplsMTraceHistoryTimeStamp=nqaVplsMTraceHistoryTimeStamp, nqaFTPStatsProbeFailed=nqaFTPStatsProbeFailed, nqaGroupEntry=nqaGroupEntry, nqaJitterStatsOWDThresholdNotificationDS=nqaJitterStatsOWDThresholdNotificationDS, nqaAdminCtrlTimeOut=nqaAdminCtrlTimeOut, nqaNegotiateFailed=nqaNegotiateFailed, nqaAdminParaEntry=nqaAdminParaEntry, nqaPppoeNcpTimeout=nqaPppoeNcpTimeout, nqaMpingHistoryReceiverIndex=nqaMpingHistoryReceiverIndex, nqaAdminExtPara28=nqaAdminExtPara28, nqaFTPStatsRTDOverThresholds=nqaFTPStatsRTDOverThresholds, nqaAdminParaMaxTtl=nqaAdminParaMaxTtl, nqaResultsCurProbeCount=nqaResultsCurProbeCount, nqaJitterCollectStatsMinOfNegativesDS=nqaJitterCollectStatsMinOfNegativesDS, nqaAdminParaMTraceResponseTtl=nqaAdminParaMTraceResponseTtl, nqaPathJitterStatsAvgJitter=nqaPathJitterStatsAvgJitter, nqaAdminParaLspPWE3VcId=nqaAdminParaLspPWE3VcId, nqaAdminParaMTraceLastHopAddress=nqaAdminParaMTraceLastHopAddress, nqaVplsMacTracertHistoryHitFlag=nqaVplsMacTracertHistoryHitFlag, nqaJitterCollectStatsPktRewriteRatio=nqaJitterCollectStatsPktRewriteRatio, nqaPathMtuStatsTimeouts=nqaPathMtuStatsTimeouts, nqaUdpServerEntry=nqaUdpServerEntry, nqaMpingStatsTargetAddress=nqaMpingStatsTargetAddress, nqaPathJitterStatsMaxDelayDS=nqaPathJitterStatsMaxDelayDS, nqaPathMtuStatsCompletions=nqaPathMtuStatsCompletions, nqaVplsMacTracertHistoryIndex=nqaVplsMacTracertHistoryIndex, nqaPathJitterStatsSum2OfNegativesSDHigh=nqaPathJitterStatsSum2OfNegativesSDHigh, nqaFTPStatsTimeouts=nqaFTPStatsTimeouts, nqaAlarmIndex=nqaAlarmIndex, nqaScheduleAgeTime=nqaScheduleAgeTime, nqaNotificationsGroup=nqaNotificationsGroup, nqaAdminCtrlTag=nqaAdminCtrlTag, nqaPppoeStatsCompletions=nqaPppoeStatsCompletions, nqaAdminParaInterval=nqaAdminParaInterval, nqaLastSetError=nqaLastSetError, nqaJitterCollectStatsJitterIn=nqaJitterCollectStatsJitterIn, nqaPathJitterStatsSum2OfNegativesSDLow=nqaPathJitterStatsSum2OfNegativesSDLow, nqaJitterCollectStatsNumOfPositivesSD=nqaJitterCollectStatsNumOfPositivesSD, nqaJitterCollectStatsPacketLossRatio=nqaJitterCollectStatsPacketLossRatio, nqaJitterStatsTimeouts=nqaJitterStatsTimeouts, nqaMacTraceHistoryForwarded=nqaMacTraceHistoryForwarded, nqaTcpServerPort=nqaTcpServerPort, nqaResultsEntry=nqaResultsEntry, nqaResultsLostPacketRatio=nqaResultsLostPacketRatio, nqaMtracertStatsAddress=nqaMtracertStatsAddress, nqaPathJitterStatsIndex=nqaPathJitterStatsIndex, nqaPathJitterStatsNumOfPositivesSD=nqaPathJitterStatsNumOfPositivesSD, nqaHistoryTimeStamp=nqaHistoryTimeStamp, nqaJitterStatsOWDOverThresholdsSD=nqaJitterStatsOWDOverThresholdsSD, nqaJitterCollectStatsSum2OfPositivesDSHigh=nqaJitterCollectStatsSum2OfPositivesDSHigh, nqaAdminParaTargetAddress=nqaAdminParaTargetAddress, nqaJitterCollectStatsOWSumSD=nqaJitterCollectStatsOWSumSD, nqaMacTraceHistoryCompletionTime=nqaMacTraceHistoryCompletionTime, nqaFTPStatsDiscontinued=nqaFTPStatsDiscontinued, nqaJitterCollectStatsNumOfRTT=nqaJitterCollectStatsNumOfRTT, nqaPppoeStatsIndex=nqaPppoeStatsIndex, nqaFtpSaveRecordPassword=nqaFtpSaveRecordPassword, nqaMtracertHistoryEntry=nqaMtracertHistoryEntry, nqaScheduleEntry=nqaScheduleEntry, nqaPathJitterStatsTable=nqaPathJitterStatsTable, nqaAdminParaProbeCount=nqaAdminParaProbeCount, nqaAdminParaVrfName=nqaAdminParaVrfName, nqaAdminParaMacTunnelName=nqaAdminParaMacTunnelName, nqaJitterStatsSum2OfNegativesSDHigh=nqaJitterStatsSum2OfNegativesSDHigh, nqaAdminExtPara27=nqaAdminExtPara27, nqaMpingStatsDrops=nqaMpingStatsDrops, nqaFTPStatsTestFailed=nqaFTPStatsTestFailed, nqaAdminExtPara40=nqaAdminExtPara40, nqaAdminExtPara36=nqaAdminExtPara36, nqaHTTPStatsBusies=nqaHTTPStatsBusies, nqaHTTPStatsTransactionRTTMax=nqaHTTPStatsTransactionRTTMax, nqaHTTPStatsMessageBodyOctetsSum=nqaHTTPStatsMessageBodyOctetsSum, nqaJitterStatsPktDisorderRatio=nqaJitterStatsPktDisorderRatio, nqaMpingHistoryReceiverAddress=nqaMpingHistoryReceiverAddress, nqaCollectStatsGroup=nqaCollectStatsGroup, nqaEventDescription=nqaEventDescription, nqaAdminParaPppoeUserName=nqaAdminParaPppoeUserName, nqaPathJitterStatsEntry=nqaPathJitterStatsEntry, nqaJitterStatsRTTSum2High=nqaJitterStatsRTTSum2High, nqaJitterCollectStatsRTTMin=nqaJitterCollectStatsRTTMin, nqaMpingHistoryTimeStamp=nqaMpingHistoryTimeStamp, nqaJitterStatsOWSumDS=nqaJitterStatsOWSumDS, nqaPathJitterStatsNumOfNegativesDS=nqaPathJitterStatsNumOfNegativesDS, nqaHTTPStatsProbeFailed=nqaHTTPStatsProbeFailed, nqaAdminExtPara7=nqaAdminExtPara7, nqaJitterCollectStatsOWSumDS=nqaJitterCollectStatsOWSumDS, nqaVplsMacTracertHistoryFinishState=nqaVplsMacTracertHistoryFinishState, nqaUdpServerPort=nqaUdpServerPort, nqaAdminParaRemoteAddress=nqaAdminParaRemoteAddress, nqaJitterStatsTestCompleted=nqaJitterStatsTestCompleted, nqaMtracertStatsSequenceErrors=nqaMtracertStatsSequenceErrors, nqaJitterStatsAvgJitterSD=nqaJitterStatsAvgJitterSD, nqaMtracertHistoryCurQueryMode=nqaMtracertHistoryCurQueryMode, nqaSupportTestType=nqaSupportTestType, nqaJitterStatsNumOfOWD=nqaJitterStatsNumOfOWD, nqaCollectStats=nqaCollectStats, nqaAdminParaIcmpJitterMode=nqaAdminParaIcmpJitterMode, nqaJitterStatsMinOfNegativesSD=nqaJitterStatsMinOfNegativesSD, nqaAdminExtPara43=nqaAdminExtPara43, nqaVplsMacTracertHistoryTable=nqaVplsMacTracertHistoryTable, nqaMtracertStatsMaxPathTTL=nqaMtracertStatsMaxPathTTL, nqaAdminCtrlType=nqaAdminCtrlType, nqaResultsCompletions=nqaResultsCompletions, nqaAdminExtPara14=nqaAdminExtPara14, nqaAdminExtPara30=nqaAdminExtPara30, nqaJitterCollectStatsMinDelaySD=nqaJitterCollectStatsMinDelaySD, nqaAdminParaVsiName=nqaAdminParaVsiName, nqaJitterStatsPacketOutOfSequences=nqaJitterStatsPacketOutOfSequences, nqaJitterStatsSum2OfPositivesSDHigh=nqaJitterStatsSum2OfPositivesSDHigh, nqaPathJitterStatsRttSum2Low=nqaPathJitterStatsRttSum2Low, nqaMtracertHistoryFwdTTL=nqaMtracertHistoryFwdTTL, nqaAdminExtPara39=nqaAdminExtPara39, nqaVplsMacTracertHistoryResponseIndex=nqaVplsMacTracertHistoryResponseIndex, nqaAdminParaMTraceResponseAddress=nqaAdminParaMTraceResponseAddress, nqaFallingAlarmNotification=nqaFallingAlarmNotification, nqaResultsSumCompletionTime2Low=nqaResultsSumCompletionTime2Low, nqaPathJitterStatsRttSum=nqaPathJitterStatsRttSum, nqaAdminCtrlThreshold1=nqaAdminCtrlThreshold1, nqaMtracertStatsLastGoodProbe=nqaMtracertStatsLastGoodProbe, nqaMacTraceHistoryTerminalMep=nqaMacTraceHistoryTerminalMep, nqaAdminCtrlThreshold2=nqaAdminCtrlThreshold2, nqaVplsMTraceHistoryUpStreamAddress=nqaVplsMTraceHistoryUpStreamAddress, nqaJitterCollectStatsRTTSum2High=nqaJitterCollectStatsRTTSum2High, nqaPathJitterStatsPacketLossDS=nqaPathJitterStatsPacketLossDS, nqaPathJitterStatsSumOfPositivesDS=nqaPathJitterStatsSumOfPositivesDS, nqaFTPStatsLostPacketRatio=nqaFTPStatsLostPacketRatio, nqaAdminExtPara26=nqaAdminExtPara26, nqaFTPStatsDataConnAveTime=nqaFTPStatsDataConnAveTime, nqaFtpSaveRecordNotification=nqaFtpSaveRecordNotification, nqaAdminParaStorageType=nqaAdminParaStorageType, nqaAlarmStartUpNqaAlarm=nqaAlarmStartUpNqaAlarm, nqaAdminParaLspAddressMask=nqaAdminParaLspAddressMask, nqaResultsSumCompletionTime=nqaResultsSumCompletionTime, nqaAdminParaHistoryRowMax=nqaAdminParaHistoryRowMax, nqaHTTPStatsCompletions=nqaHTTPStatsCompletions, nqaHTTPStatsRTTMax=nqaHTTPStatsRTTMax, nqaMtracertHistoryRtgProtocol=nqaMtracertHistoryRtgProtocol, nqa=nqa, nqaAdminParaFtpFilePath=nqaAdminParaFtpFilePath, nqaAdminParaSourceAddress=nqaAdminParaSourceAddress, nqaTcpServerAddressType=nqaTcpServerAddressType, nqaVplsMTraceHistoryReceivedTtl=nqaVplsMTraceHistoryReceivedTtl, nqaJitterStatsFragPktDisorderRatio=nqaJitterStatsFragPktDisorderRatio, nqaAdminExtPara24=nqaAdminExtPara24, nqaAdminParaNumPackets=nqaAdminParaNumPackets, nqaMpingHistoryLastRC=nqaMpingHistoryLastRC, nqaResultsTimeouts=nqaResultsTimeouts, nqaMtracertStatsTimeouts=nqaMtracertStatsTimeouts, nqaVersion=nqaVersion, nqaMpingStatsSumCompletionTime2High=nqaMpingStatsSumCompletionTime2High, nqaJitterCollectStatsJitterOut=nqaJitterCollectStatsJitterOut, nqaAdminExtPara32=nqaAdminExtPara32, nqaVplsMTraceHistoryGroupPolicy=nqaVplsMTraceHistoryGroupPolicy, nqaAdminParaLspIpAddress=nqaAdminParaLspIpAddress, nqaAdminExtPara15=nqaAdminExtPara15, nqaGroupMemberFree=nqaGroupMemberFree, nqaJitterCollectStatsTimeouts=nqaJitterCollectStatsTimeouts, nqaVplsMTraceHistoryLastRC=nqaVplsMTraceHistoryLastRC, nqaHTTPStatsThresholdNotification=nqaHTTPStatsThresholdNotification, nqaAdminExtPara9=nqaAdminExtPara9, nqaPathJitterStatsMaxDelaySD=nqaPathJitterStatsMaxDelaySD, nqaHistoryEntry=nqaHistoryEntry, nqaJitterCollectStatsMinOfPositivesSD=nqaJitterCollectStatsMinOfPositivesSD, nqaVplsMTraceHistoryIGMPVersion=nqaVplsMTraceHistoryIGMPVersion, nqaAdminParaPathMtuDiscoveryPathMtuMax=nqaAdminParaPathMtuDiscoveryPathMtuMax, nqaMtracertStatsCurPathTTL=nqaMtracertStatsCurPathTTL, nqaAlarmRisingEventIndex=nqaAlarmRisingEventIndex, nqaPathJitterStatsAvgJitterSD=nqaPathJitterStatsAvgJitterSD, nqaMtracertHistoryQueryArrivalTime=nqaMtracertHistoryQueryArrivalTime, nqaResultsBusies=nqaResultsBusies, nqaJitterStatsTable=nqaJitterStatsTable, nqaJitterStatsBusies=nqaJitterStatsBusies, nqaPathJitterStatsAddressType=nqaPathJitterStatsAddressType, nqaAdminExtPara4=nqaAdminExtPara4, nqaMpingStatsTable=nqaMpingStatsTable, nqaVplsMTraceHistoryRequireRouterAlertEnable=nqaVplsMTraceHistoryRequireRouterAlertEnable, nqaJitterStatsDrops=nqaJitterStatsDrops, nqaVplsMTraceHistoryRcvQueryCount=nqaVplsMTraceHistoryRcvQueryCount, nqaPathJitterStatsSum2OfPositivesDSHigh=nqaPathJitterStatsSum2OfPositivesDSHigh, nqaJitterCollectStatsBusies=nqaJitterCollectStatsBusies, nqaMpingStatsLostPacketRatio=nqaMpingStatsLostPacketRatio, nqaJitterVersion=nqaJitterVersion, nqaJitterCollectStatsAvgJitterDS=nqaJitterCollectStatsAvgJitterDS, nqaJitterCollectStatsMinOfPositivesDS=nqaJitterCollectStatsMinOfPositivesDS, nqaGroups=nqaGroups, nqaJitterStatsAvgJitterDS=nqaJitterStatsAvgJitterDS, nqaMtracertHistroyFinishState=nqaMtracertHistroyFinishState, nqaMacTraceHistoryTTL=nqaMacTraceHistoryTTL, nqaMtracertStatsTestFinished=nqaMtracertStatsTestFinished, nqaHTTPStatsRTTMin=nqaHTTPStatsRTTMin, nqaJitterStatsCompletions=nqaJitterStatsCompletions, nqaResultsProbeFailed=nqaResultsProbeFailed, nqaFTPStatsCtrlConnMinTime=nqaFTPStatsCtrlConnMinTime, nqaTcpServerStatus=nqaTcpServerStatus, nqaJitterCollectStatsSentProbes=nqaJitterCollectStatsSentProbes, nqaResultsLastGoodPath=nqaResultsLastGoodPath, nqaAdminParaPppoeInterval=nqaAdminParaPppoeInterval, nqaPppoeStatsErrorMessage=nqaPppoeStatsErrorMessage, nqaTcpServerVrfName=nqaTcpServerVrfName, nqaPathJitterStatsJitterOut=nqaPathJitterStatsJitterOut, nqaHTTPStatsTestFailed=nqaHTTPStatsTestFailed, nqaAdminParaMiscOptions=nqaAdminParaMiscOptions, nqaJitterStatsProbeResponses=nqaJitterStatsProbeResponses)
mibBuilder.exportSymbols("NQA-MIB", nqaVplsMTraceHistoryCACExist=nqaVplsMTraceHistoryCACExist, nqaFtpSaveRecordLastFileName=nqaFtpSaveRecordLastFileName, nqaMacTraceHistoryIndex=nqaMacTraceHistoryIndex, nqaPathJitterStatsTestFinished=nqaPathJitterStatsTestFinished, nqaMpingStatsBusies=nqaMpingStatsBusies, nqaUdpServerAddressType=nqaUdpServerAddressType, nqaAdminParaHttpVersion=nqaAdminParaHttpVersion)
