#
# PySNMP MIB module ZYXEL-SUBNET-BASED-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-SUBNET-BASED-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Counter64, NotificationType, Bits, Unsigned32, IpAddress, ModuleIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Counter64", "NotificationType", "Bits", "Unsigned32", "IpAddress", "ModuleIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelSubnetBasedVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80))
if mibBuilder.loadTexts: zyxelSubnetBasedVlan.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelSubnetBasedVlan.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelSubnetBasedVlan.setContactInfo('')
if mibBuilder.loadTexts: zyxelSubnetBasedVlan.setDescription('The subtree for subnet-based VLAN')
zyxelSubnetBasedVlanSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1))
zySubnetBasedVlanState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySubnetBasedVlanState.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanState.setDescription('Enable/Disable subnet-based VLAN feature on the switch.')
zySubnetBasedVlanDhcpVlanOverrideState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySubnetBasedVlanDhcpVlanOverrideState.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanDhcpVlanOverrideState.setDescription(' Enable/Disable DHCP VLAN override to force the DHCP clients in this IP subnet to obtain their IP address through the DHCP VLAN.')
zySubnetBasedVlanMaxNumberOfVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zySubnetBasedVlanMaxNumberOfVlans.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanMaxNumberOfVlans.setDescription(' The maximum number of subnet bsed VLAN that can be created')
zyxelSubnetBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4), )
if mibBuilder.loadTexts: zyxelSubnetBasedVlanTable.setStatus('current')
if mibBuilder.loadTexts: zyxelSubnetBasedVlanTable.setDescription('The table cantains subnet based VLAN configuration.')
zyxelSubnetBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1), ).setIndexNames((0, "ZYXEL-SUBNET-BASED-VLAN-MIB", "zySubnetBasedVlanSourceIpAddress"), (0, "ZYXEL-SUBNET-BASED-VLAN-MIB", "zySubnetBasedVlanSourceMaskBits"))
if mibBuilder.loadTexts: zyxelSubnetBasedVlanEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelSubnetBasedVlanEntry.setDescription('An entry cantains subnet based VLAN configuration.')
zySubnetBasedVlanSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: zySubnetBasedVlanSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanSourceIpAddress.setDescription('Enter the source ip adress of the subnet for which you want to configure this subnet based VLAN')
zySubnetBasedVlanSourceMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: zySubnetBasedVlanSourceMaskBits.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanSourceMaskBits.setDescription("Enter the bit number of the subnet mask. To find the bit number, convert the subnet mask to binary format and add all the 1's in binary.")
zySubnetBasedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySubnetBasedVlanName.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanName.setDescription('Name to identify this subnet based VLAN.')
zySubnetBasedVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySubnetBasedVlanVid.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanVid.setDescription('ID of a VLAN with which the untagged frames from the IP subnet specified in this subnet based VLAN are tagged. This must be an existing VLAN which you defined.')
zySubnetBasedVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zySubnetBasedVlanPriority.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanPriority.setDescription('Priority level that the switch assigns to frames belonging to this VLAN.')
zySubnetBasedVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 80, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zySubnetBasedVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: zySubnetBasedVlanRowStatus.setDescription('This object allows entries to be created and deleted from the subnet based VLAN table.')
mibBuilder.exportSymbols("ZYXEL-SUBNET-BASED-VLAN-MIB", PYSNMP_MODULE_ID=zyxelSubnetBasedVlan, zySubnetBasedVlanRowStatus=zySubnetBasedVlanRowStatus, zySubnetBasedVlanMaxNumberOfVlans=zySubnetBasedVlanMaxNumberOfVlans, zySubnetBasedVlanSourceIpAddress=zySubnetBasedVlanSourceIpAddress, zyxelSubnetBasedVlanSetup=zyxelSubnetBasedVlanSetup, zyxelSubnetBasedVlanEntry=zyxelSubnetBasedVlanEntry, zySubnetBasedVlanName=zySubnetBasedVlanName, zySubnetBasedVlanState=zySubnetBasedVlanState, zySubnetBasedVlanDhcpVlanOverrideState=zySubnetBasedVlanDhcpVlanOverrideState, zyxelSubnetBasedVlanTable=zyxelSubnetBasedVlanTable, zyxelSubnetBasedVlan=zyxelSubnetBasedVlan, zySubnetBasedVlanPriority=zySubnetBasedVlanPriority, zySubnetBasedVlanVid=zySubnetBasedVlanVid, zySubnetBasedVlanSourceMaskBits=zySubnetBasedVlanSourceMaskBits)
