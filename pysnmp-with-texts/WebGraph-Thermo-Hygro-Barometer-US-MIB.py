#
# PySNMP MIB module WebGraph-Thermo-Hygro-Barometer-US-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WebGraph-Thermo-Hygro-Barometer-US-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, IpAddress, ObjectIdentity, NotificationType, enterprises, MibIdentifier, Counter64, Bits, Gauge32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "IpAddress", "ObjectIdentity", "NotificationType", "enterprises", "MibIdentifier", "Counter64", "Bits", "Gauge32", "NotificationType", "ModuleIdentity")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
wut = MibIdentifier((1, 3, 6, 1, 4, 1, 5040))
wtComServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1))
wtWebio = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2))
wtWebGraphThermoBaro = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37))
wtWebGraphThermoBaroTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1))
wtWebGraphThermoBaroSessCntrl = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 2))
wtWebGraphThermoBaroConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3))
wtWebGraphThermoBaroDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 4))
wtWebGraphThermoBaroDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1))
wtWebGraphThermoBaroPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2))
wtWebGraphThermoBaroManufact = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3))
wtWebGraphThermoBaroText = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 1))
wtWebGraphThermoBaroTimeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2))
wtWebGraphThermoBaroBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3))
wtWebGraphThermoBaroDatalogger = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 4))
wtWebGraphThermoBaroAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5))
wtWebGraphThermoBaroGraphics = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6))
wtWebGraphThermoBaroTimeZone = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1))
wtWebGraphThermoBaroTimeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 2))
wtWebGraphThermoBaroDeviceClock = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 3))
wtWebGraphThermoBaroNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1))
wtWebGraphThermoBaroHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 2))
wtWebGraphThermoBaroMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3))
wtWebGraphThermoBaroSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4))
wtWebGraphThermoBaroUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 5))
wtWebGraphThermoBaroSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 6))
wtWebGraphThermoBaroFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7))
wtWebGraphThermoBaroRSS = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8))
wtWebGraphThermoBaroLanguage = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 9))
wtWebGraphThermoBaroGraphicsBase = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1))
wtWebGraphThermoBaroGraphicsSelect = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2))
wtWebGraphThermoBaroGraphicsScale = MibIdentifier((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3))
wtWebGraphThermoBaroSensors = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensors.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensors.setDescription('Number of sensors')
wtWebGraphThermoBaroSensorTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 2), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorTable.setDescription('List of sensors.')
wtWebGraphThermoBaroSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 2, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroSensorNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorEntry.setDescription('List of sensor numbers.')
wtWebGraphThermoBaroSensorNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorNo.setDescription('Sensor number.')
wtWebGraphThermoBaroTempValueTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 3), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValueTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValueTable.setDescription('List of measurement values corresponding to the channel numbers.')
wtWebGraphThermoBaroTempValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 3, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroSensorNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValueEntry.setDescription('Measurement values of the sensors.')
wtWebGraphThermoBaroTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValue.setDescription('Measurement value of the sensor, ASCII, 5 characters in length.')
wtWebGraphThermoBaroBinaryTempValueTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 4), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroBinaryTempValueTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroBinaryTempValueTable.setDescription('List of binary measurement values corresponding to the channel numbers.')
wtWebGraphThermoBaroBinaryTempValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 4, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroSensorNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroBinaryTempValueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroBinaryTempValueEntry.setDescription('Binary measurement values of the sensors.')
wtWebGraphThermoBaroBinaryTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroBinaryTempValue.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroBinaryTempValue.setDescription('Binary measurement value of the sensor in 1/10 degrees Celsius or 1/10 per cent, signed number, 0x4FFF6 indicates an invalid measured value.')
wtWebGraphThermoBaroTempValuePktTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 8), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValuePktTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValuePktTable.setDescription('List of measurement values corresponding to the channel numbers.')
wtWebGraphThermoBaroTempValuePktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 8, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroSensorNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValuePktEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValuePktEntry.setDescription('Measurement values of the sensors.')
wtWebGraphThermoBaroTempValuePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 1, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValuePkt.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTempValuePkt.setDescription('Measurement value of the sensor, ASCII, 5 characters in length, delimeter is decimal point.')
wtWebGraphThermoBaroSessCntrlPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlPassword.setDescription('Entering this password opens a session which is ended by writing a 1 to wtWebGraphThermoBaroSessCntrlLogout. When read this variable provides a string of length zero.')
wtWebGraphThermoBaroSessCntrlConfigMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroSessCntrl-NoSession", 0), ("wtWebGraphThermoBaroSessCntrl-Session", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlConfigMode.setDescription('When the device is in SNMP configuration mode, the value 1 is returned, otherwise 0. If the read value is 0 even though the password was written, the device is already in config mode and the variables can only be read.')
wtWebGraphThermoBaroSessCntrlLogout = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlLogout.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlLogout.setDescription('If the device is in configuration mode and the session was opened by this SNMP Manager, writing a 1 to this variable will end the session and all parameters are stored. Writing a 2 discards all entries again. When read this variable provides the value 0.')
wtWebGraphThermoBaroSessCntrlAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlAdminPassword.setDescription('This password protects access to the variables with administrator rights. It can only be changed by the administrator. If no password was assigned, the valid password is public.')
wtWebGraphThermoBaroSessCntrlConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 2, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlConfigPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSessCntrlConfigPassword.setDescription('This password protects access to the variables with configurator rights. It can be changed by the administrator and by the configurator. If no password was assigned, the valid password is public. When read this variable provides a null-pointer.')
wtWebGraphThermoBaroDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceName.setDescription('Name of the Webio, which is user definable.')
wtWebGraphThermoBaroDeviceText = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceText.setDescription('Description of the Webio, which is user definable.')
wtWebGraphThermoBaroDeviceLocation = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceLocation.setDescription('Description of the location of the Webio, which is user definable.')
wtWebGraphThermoBaroDeviceContact = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceContact.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDeviceContact.setDescription('Contact address of the system operator of the Webio, which is user definable.')
wtWebGraphThermoBaroTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTzOffsetHrs.setDescription('Offset hours for the time zone (winter time) with respect to UTC.')
wtWebGraphThermoBaroTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTzOffsetMin.setDescription('Offset minutes for the time zone (winter time) with respect to UTC.')
wtWebGraphThermoBaroTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Timezone')
wtWebGraphThermoBaroStTzOffsetHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzOffsetHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzOffsetHrs.setDescription('Offset hours of the time zone (summer time) with respect to UTC.')
wtWebGraphThermoBaroStTzOffsetMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzOffsetMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzOffsetMin.setDescription('Offset minutes of the time zone (summer time) with respect to UTC.')
wtWebGraphThermoBaroStTzEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Summertime')
wtWebGraphThermoBaroStTzStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroStartMonth-January", 1), ("wtWebGraphThermoBaroStartMonth-February", 2), ("wtWebGraphThermoBaroStartMonth-March", 3), ("wtWebGraphThermoBaroStartMonth-April", 4), ("wtWebGraphThermoBaroStartMonth-May", 5), ("wtWebGraphThermoBaroStartMonth-June", 6), ("wtWebGraphThermoBaroStartMonth-July", 7), ("wtWebGraphThermoBaroStartMonth-August", 8), ("wtWebGraphThermoBaroStartMonth-September", 9), ("wtWebGraphThermoBaroStartMonth-October", 10), ("wtWebGraphThermoBaroStartMonth-November", 11), ("wtWebGraphThermoBaroStartMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartMonth.setDescription('Month in which the change is made from winter time to summer time.')
wtWebGraphThermoBaroStTzStartMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroStartMode-first", 1), ("wtWebGraphThermoBaroStartMode-second", 2), ("wtWebGraphThermoBaroStartMode-third", 3), ("wtWebGraphThermoBaroStartMode-fourth", 4), ("wtWebGraphThermoBaroStartMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartMode.setDescription('Mode of the day of the week for which the change is made from winter time to summer time.')
wtWebGraphThermoBaroStTzStartWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroStartWday-Sunday", 1), ("wtWebGraphThermoBaroStartWday-Monday", 2), ("wtWebGraphThermoBaroStartWday-Tuesday", 3), ("wtWebGraphThermoBaroStartWday-Thursday", 4), ("wtWebGraphThermoBaroStartWday-Wednesday", 5), ("wtWebGraphThermoBaroStartWday-Friday", 6), ("wtWebGraphThermoBaroStartWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartWday.setDescription('Day of the week on which the change is made from winter time to summer time')
wtWebGraphThermoBaroStTzStartHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartHrs.setDescription('Hour in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebGraphThermoBaroStTzStartMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStartMin.setDescription('Minute in which the time zone is changed from winter to summer time with respect to UTC.')
wtWebGraphThermoBaroStTzStopMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroStopMonth-January", 1), ("wtWebGraphThermoBaroStopMonth-February", 2), ("wtWebGraphThermoBaroStopMonth-March", 3), ("wtWebGraphThermoBaroStopMonth-April", 4), ("wtWebGraphThermoBaroStopMonth-May", 5), ("wtWebGraphThermoBaroStopMonth-June", 6), ("wtWebGraphThermoBaroStopMonth-July", 7), ("wtWebGraphThermoBaroStopMonth-August", 8), ("wtWebGraphThermoBaroStopMonth-September", 9), ("wtWebGraphThermoBaroStopMonth-October", 10), ("wtWebGraphThermoBaroStopMonth-November", 11), ("wtWebGraphThermoBaroStopMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopMonth.setDescription('Month in which the change is made from summer time to winter time.')
wtWebGraphThermoBaroStTzStopMode = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroStopMode-first", 1), ("wtWebGraphThermoBaroStopMode-second", 2), ("wtWebGraphThermoBaroStopMode-third", 3), ("wtWebGraphThermoBaroStopMode-fourth", 4), ("wtWebGraphThermoBaroStopMode-last", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopMode.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopMode.setDescription('Mode of the week day on which the change is made from summer time to winter time.')
wtWebGraphThermoBaroStTzStopWday = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroStopWday-Sunday", 1), ("wtWebGraphThermoBaroStopWday-Monday", 2), ("wtWebGraphThermoBaroStopWday-Tuesday", 3), ("wtWebGraphThermoBaroStopWday-Thursday", 4), ("wtWebGraphThermoBaroStopWday-Wednesday", 5), ("wtWebGraphThermoBaroStopWday-Friday", 6), ("wtWebGraphThermoBaroStopWday-Saturday", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopWday.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopWday.setDescription('Day of the week on which the change is made from summer time to winter time.')
wtWebGraphThermoBaroStTzStopHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopHrs.setDescription('Hour at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebGraphThermoBaroStTzStopMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStTzStopMin.setDescription('Minute at which the time zone is changed from summer to winter time with respect to UTC.')
wtWebGraphThermoBaroTimeServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTimeServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTimeServer1.setDescription('IP address or name of the 1st time server in ASCII')
wtWebGraphThermoBaroTimeServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTimeServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTimeServer2.setDescription('IP address or name of the 2nd time server in ASCII')
wtWebGraphThermoBaroTsEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTsEnable.setDescription('Binary coded conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Apply Time Server')
wtWebGraphThermoBaroTsSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroTsSyncTime.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroTsSyncTime.setDescription('Daily synchronisation time with the time server (hour: 0-23).')
wtWebGraphThermoBaroClockHrs = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockHrs.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockHrs.setDescription('Clock hours taking into account the time zone settings.')
wtWebGraphThermoBaroClockMin = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockMin.setDescription('Clock minutes taking into account the time zone settings.')
wtWebGraphThermoBaroClockDay = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockDay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockDay.setDescription('Date: Day of the month, taking into account the time zone settings.')
wtWebGraphThermoBaroClockMonth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroClockMonth-January", 1), ("wtWebGraphThermoBaroClockMonth-February", 2), ("wtWebGraphThermoBaroClockMonth-March", 3), ("wtWebGraphThermoBaroClockMonth-April", 4), ("wtWebGraphThermoBaroClockMonth-May", 5), ("wtWebGraphThermoBaroClockMonth-June", 6), ("wtWebGraphThermoBaroClockMonth-July", 7), ("wtWebGraphThermoBaroClockMonth-August", 8), ("wtWebGraphThermoBaroClockMonth-September", 9), ("wtWebGraphThermoBaroClockMonth-October", 10), ("wtWebGraphThermoBaroClockMonth-November", 11), ("wtWebGraphThermoBaroClockMonth-December", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockMonth.setDescription('Date: Month, taking into account the time zone settings.')
wtWebGraphThermoBaroClockYear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockYear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroClockYear.setDescription('Date: Year, taking into account the time zone settings.')
wtWebGraphThermoBaroIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroIpAddress.setDescription('IP address of the Webio')
wtWebGraphThermoBaroSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSubnetMask.setDescription('Subnet mask of the Webio')
wtWebGraphThermoBaroGateway = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGateway.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGateway.setDescription('Gateway of the Webio')
wtWebGraphThermoBaroDnsServer1 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDnsServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDnsServer1.setDescription('IP address of the 1st DNS server in ASCII')
wtWebGraphThermoBaroDnsServer2 = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDnsServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDnsServer2.setDescription('IP address of the 2nd DNS server in ASCII')
wtWebGraphThermoBaroAddConfig = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAddConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAddConfig.setDescription('Additional configuration (1=ON): Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: DHCP disable Bit 0: BOOTP disable ')
wtWebGraphThermoBaroStartup = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroStartup.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroStartup.setDescription('Binary coded start page: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1: Index.htm Bit 2: Home.htm Bit 3: User.htm Only one page may be selected at a time.')
wtWebGraphThermoBaroGetHeaderEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGetHeaderEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGetHeaderEnable.setDescription('If these bits are set, every answer of a short form GET question will be lead by the IP-address and name of the device and/or a HTTP header: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-6: unused Bit 1 : GET HTTP enable Bit 0 : GET Header enable')
wtWebGraphThermoBaroHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroHttpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroHttpPort.setDescription('Definition of the standard HTML port (Default: 80).')
wtWebGraphThermoBaroMailAdName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAdName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAdName.setDescription('Device name for mail administration.')
wtWebGraphThermoBaroMailReply = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailReply.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailReply.setDescription('Reply address for the mail server.')
wtWebGraphThermoBaroMailServer = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailServer.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailServer.setDescription('Name or IP address of the mail server.')
wtWebioAn1MailEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebioAn1MailEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebioAn1MailEnable.setDescription('Set this bit to enable the sending of mails: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Mail enable')
wtWebGraphThermoBaroMailAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAuthentication.setDescription('Selection of the authentication modi: The OCTETS are interpreted bit-by-bit, with each bit corresponding to an output. Bit 0 corresponds to the LSB. OCTET 1: unused OCTET 2: unused OCTET 3: unused OCTET 4: Bit 3-7: unused Bit 2 : POP3 before SMTP Bit 1 : ESMTP, authentication Bit 0 : SMTP, no authentication')
wtWebGraphThermoBaroMailAuthUser = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAuthUser.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAuthUser.setDescription('Name of the user to be authenticated.')
wtWebGraphThermoBaroMailAuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailAuthPassword.setDescription('Authentication password.')
wtWebGraphThermoBaroMailPop3Server = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 3, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailPop3Server.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMailPop3Server.setDescription('Name or Ip-address of the POP3 Servers.')
wtWebGraphThermoBaroSnmpCommunityStringRead = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpCommunityStringRead.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpCommunityStringRead.setDescription('Community string read only')
wtWebGraphThermoBaroSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpCommunityStringReadWrite.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpCommunityStringReadWrite.setDescription('Community string read / write')
wtWebGraphThermoBaroSystemTrapManagerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSystemTrapManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSystemTrapManagerIP.setDescription('Name or IP address of the TCP server which accepts the system trap.')
wtWebGraphThermoBaroSystemTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSystemTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSystemTrapEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2-7: unused')
wtWebGraphThermoBaroSnmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpEnable.setDescription('Set bit 0 to enable SNMP. If disabled, the device did not respond to any SNMP requests. Bit 1 decided wether the community string of read operations is compared with the system password or not: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : SNMP enable')
wtWebGraphThermoBaroSnmpCommunityStringTrap = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 4, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpCommunityStringTrap.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSnmpCommunityStringTrap.setDescription('Community string send within traps.')
wtWebGraphThermoBaroUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroUdpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroUdpPort.setDescription('Udp port to which the Udp queries ( short form GET requests) can be sent. This port number must be unique within the device.')
wtWebGraphThermoBaroUdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroUdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroUdpEnable.setDescription('Set this bit to enable UDP support: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : UDP enable')
wtWebGraphThermoBaroSyslogServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogServerIP.setDescription('Name or IP address of the Syslog server, which accepts the Syslog messgaes.')
wtWebGraphThermoBaroSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogServerPort.setDescription('Portnumber of the Syslog servers, default 514.')
wtWebGraphThermoBaroSyslogSystemMessagesEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogSystemMessagesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogSystemMessagesEnable.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: ColdStart Bit 1: WarmStart Bit 2: Diag Messages Bit 3-7: unused')
wtWebGraphThermoBaroSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSyslogEnable.setDescription('Set bit 0to enable Syslog: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : Syslog enable')
wtWebGraphThermoBaroFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPServerIP.setDescription('Name or IP address of the FTP server, which accepts the FTP messages.')
wtWebGraphThermoBaroFTPServerControlPort = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPServerControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPServerControlPort.setDescription('Portnumber of the control port of the FTP server, default 21.')
wtWebGraphThermoBaroFTPUserName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPUserName.setDescription('FTP Loggin: user name.')
wtWebGraphThermoBaroFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPPassword.setDescription('FTP Loggin: user password.')
wtWebGraphThermoBaroFTPAccount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPAccount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPAccount.setDescription('FTP Loggin: name of account.')
wtWebGraphThermoBaroFTPOption = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPOption.setDescription('Bit 0 switches the FTP Server in Passiv-Mode, the Client controls the data connection on its own: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : PASV enable')
wtWebGraphThermoBaroFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 7, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroFTPEnable.setDescription('Set Bit 0 to enable FTP: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 1-7: unused Bit 0 : FTP enable')
wtWebGraphThermoBaroLanguageSelect = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 9, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroLanguageSelect.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroLanguageSelect.setDescription('Sprachauswahl: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 2-7: unused Bit 1 : englisch Bit 0 : german')
wtWebGraphThermoBaroLoggerTimebase = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wtWebGraphThermoBaroDatalogger-1Min", 1), ("wtWebGraphThermoBaroDatalogger-5Min", 2), ("wtWebGraphThermoBaroDatalogger-15Min", 3), ("wtWebGraphThermoBaroDatalogger-60Min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroLoggerTimebase.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroLoggerTimebase.setDescription('Time base of the data logger')
wtWebGraphThermoBaroLoggerSensorSel = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroLoggerSensorSel.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroLoggerSensorSel.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphThermoBaroRSSChannelTitle = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelTitle.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelTitle.setDescription('Name of the RSS Feed.')
wtWebGraphThermoBaroRSSChannelLink = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelLink.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelLink.setDescription('Link of the RSS Feed.')
wtWebGraphThermoBaroRSSChannelDescription = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelDescription.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelDescription.setDescription('Description of the RSS Feed.')
wtWebGraphThermoBaroRSSChannelImage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelImage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelImage.setDescription('Link of a picture, which will be shown at the headline of the output window.')
wtWebGraphThermoBaroRSSChannelImageTitle = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelImageTitle.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelImageTitle.setDescription('Alias Name of the picture.')
wtWebGraphThermoBaroRSSChannelImageLink = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelImageLink.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelImageLink.setDescription('Link, which can be selected by clicking on the picture.')
wtWebGraphThermoBaroRSSChannelItemTitle = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemTitle.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemTitle.setDescription('Title of the RSS Feed.')
wtWebGraphThermoBaroRSSChannelItemLink = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemLink.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemLink.setDescription('Link of the RSS Feed.')
wtWebGraphThermoBaroRSSChannelItemDescription = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemDescription.setDescription('Text of the RSS Feed.')
wtWebGraphThermoBaroRSSChannelItemQuantity = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 3, 8, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemQuantity.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroRSSChannelItemQuantity.setDescription('Number of lines.')
wtWebGraphThermoBaroAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmCount.setDescription('Number of independent alarms.')
wtWebGraphThermoBaroAlarmIfTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 2), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmIfTable.setDescription('List of alarm indices.')
wtWebGraphThermoBaroAlarmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 2, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmIfEntry.setDescription('Numbers of the alarms.')
wtWebGraphThermoBaroAlarmNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmNo.setDescription('Alarm number.')
wtWebGraphThermoBaroAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTable.setDescription('List of settings depending on the alarm number.')
wtWebGraphThermoBaroAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmEntry.setDescription('Alarm parameters of the individual alarms.')
wtWebGraphThermoBaroAlarmTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTrigger.setDescription('Binary coded trigger conditions: Octet 1: unused Octet 2: unused Octet 3: Bit 0: Timer Bit 1: ColdStart Bit 2: WarmStart Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2-7: unused')
wtWebGraphThermoBaroAlarmMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMin.setDescription('Minimum temperature in degrees with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMax.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMax.setDescription('Maximum temperature in degrees with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmHysteresis.setDescription('Temperature changes of this size clears the alarm state (MAX-hyst, MIN+hyst.) , in degrees with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmDelay.setDescription('Alarm will be delayed by setting this time while stable alarm condition occur (time in minutes).')
wtWebGraphThermoBaroAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmInterval.setDescription('Send interval for alarm messages.')
wtWebGraphThermoBaroAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmEnable.setDescription('Binary coded alarm enable: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Mail Enable Bit 1: SNMP Trap enable Bit 2: TCP Client enable Bit 3: Syslog enable Bit 4: FTP enable')
wtWebGraphThermoBaroAlarmEMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmEMailAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmEMailAddr.setDescription('E-Mail address for sending the alarm mail to.')
wtWebGraphThermoBaroAlarmMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMailSubject.setDescription('Subject line for alarm mail.')
wtWebGraphThermoBaroAlarmMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMailText.setDescription('Alarm mail text: <Tn> provides the current temperature; n = 1..8. <Z> provides the current time.')
wtWebGraphThermoBaroAlarmManagerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmManagerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmManagerIP.setDescription('Name or IP address of the SNMP Manager which accepts the trap.')
wtWebGraphThermoBaroAlarmTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTrapText.setDescription('This text is sent in the trap body.')
wtWebGraphThermoBaroAlarmMailOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMailOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmMailOptions.setDescription('Binary coded options: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Attach Thermo.csv Enable Bit 1 : CSV-Data_since_last_report Bit 2-7: unused')
wtWebGraphThermoBaroAlarmTcpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTcpIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTcpIpAddr.setDescription('Name or IP address of the TCP server which accepts the trap.')
wtWebGraphThermoBaroAlarmTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTcpPort.setDescription('Port number of the TCP server which accepts the trap.')
wtWebGraphThermoBaroAlarmTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTcpText.setDescription('This text is sent in the TCP trap body.')
wtWebGraphThermoBaroAlarmClearMailSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearMailSubject.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearMailSubject.setDescription('Subject line for alarm clear mail.')
wtWebGraphThermoBaroAlarmClearMailText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearMailText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearMailText.setDescription('Alarm clear mail text: <Tn> provides the current temperature; n = 1..8. <Z> provides the current time.')
wtWebGraphThermoBaroAlarmClearTrapText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearTrapText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearTrapText.setDescription('This text is sent in the trap body.')
wtWebGraphThermoBaroAlarmClearTcpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearTcpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmClearTcpText.setDescription('This text is sent in the TCP trap body.')
wtWebGraphThermoBaroAlarmDeltaTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmDeltaTemp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmDeltaTemp.setDescription('Maximum rate of change degrees/min with maximum 2 decimal places. Compared with the average of a period of 5 minutes.')
wtWebGraphThermoBaroAlarmRHMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmRHMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmRHMin.setDescription('Minimum rel. Humidity in percent with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmRHMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 23), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmRHMax.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmRHMax.setDescription('Maximum rel.Humidity in percent with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmRHHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmRHHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmRHHysteresis.setDescription('Hysterese rel. Humidity in percent with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmAHMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 25), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmAHMin.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmAHMin.setDescription('Minimum abs. Humidity in g/(m*m*m) with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmAHMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmAHMax.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmAHMax.setDescription('Maximum abs. Humidity in g/(m*m*m) with maximum 2 decimal places.')
wtWebGraphThermoBaroAlarmSyslogIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogIpAddr.setDescription('IP address of the syslog server to which the Webio device should send syslog messages.')
wtWebGraphThermoBaroAlarmSyslogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogPort.setDescription('Port number of the syslog server to which the Webio device should send syslog messages.')
wtWebGraphThermoBaroAlarmSyslogText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebGraphThermoBaroAlarmSyslogClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 30), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmSyslogClearText.setDescription('Every message starts with the priority key, a time stamp and the host ip address, according RFC3164. This text appears in the following syslog message body.')
wtWebGraphThermoBaroAlarmFtpDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpDataPort.setDescription('Local data port: 1..65535 or AUTO: the next free port will be assigned.')
wtWebGraphThermoBaroAlarmFtpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 32), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpFileName.setDescription('Name of the file including path informations.')
wtWebGraphThermoBaroAlarmFtpText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 33), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpText.setDescription('Message text to store on the FTP server.')
wtWebGraphThermoBaroAlarmFtpClearText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpClearText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpClearText.setDescription('Alarm clear message to store on the FTP server.')
wtWebGraphThermoBaroAlarmFtpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpOption.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmFtpOption.setDescription('Binary coded options, select only one option at the same time: STORE = replace file APPEND = append message at the end of the file Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : STORE Bit 1 : APPEND Bit 2-7: unused')
wtWebGraphThermoBaroAlarmTimerCron = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 36), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTimerCron.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmTimerCron.setDescription('This entry contains 5 space or tab seperated text fields for time trigger definition. Each field must match with the actual time to trigger a message, weekday and day of month are interpreted separatley. 1: Minutes Range 0-59 2. Hours Range 0-23, 0 is midnight 3: Day of month Range 1-31 4: Month Range 1-12 5: Weekday Range 0-6, 0 is sunday Syntax for every field: - an asterix (*) enables every possible setting of a field - single numbers seperated by commas - a partition within the allowed range (1-5) - step size within an partition of the allowed range (0-59/2: every second minute).')
wtWebGraphThermoBaroAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 39), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmName.setDescription('Alert name')
wtWebGraphThermoBaroAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 5, 3, 1, 40), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmActive.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlarmActive.setDescription('Alert active 1 = ON 0 = OFF')
wtWebGraphThermoBaroGraphicsBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseEnable.setDescription('Defines the viewing options of the graphic: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Auto scroll enable Bit 1 : Show table Bit 2 : Show graph Bit 3 : Show control buttons Bit 4 : Show config menu Bit 5-7: unused')
wtWebGraphThermoBaroGraphicsBaseWidth = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseWidth.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseWidth.setDescription('Defines the width of the graphic in pixels.')
wtWebGraphThermoBaroGraphicsBaseHeight = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseHeight.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseHeight.setDescription('Defines the height of the graphic in pixels.')
wtWebGraphThermoBaroGraphicsBaseFrameColor = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseFrameColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseFrameColor.setDescription('Frame color definition in RGB.')
wtWebGraphThermoBaroGraphicsBaseBackgroundColor = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseBackgroundColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBaseBackgroundColor.setDescription('Background color definition in RGB.')
wtWebGraphThermoBaroGraphicsBasePollingrate = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBasePollingrate.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsBasePollingrate.setDescription('Defines the pollingrate in seconds, which defines the refreshing intervall of the graphic.')
wtWebGraphThermoBaroGraphicsSelectDisplaySensorSel = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSelectDisplaySensorSel.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSelectDisplaySensorSel.setDescription('Binary coded sensor selection: only selected sensors will be shown in the graphical presentation: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2: Sensor 3 Bit 3-7: unused')
wtWebGraphThermoBaroGraphicsSelectDisplayShowExtrem = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSelectDisplayShowExtrem.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSelectDisplayShowExtrem.setDescription('Binary coded sensor selection: only selected sensors will be shown with minima and maxima: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0: Sensor 1 Bit 1: Sensor 2 Bit 2: Sensor 3 Bit 3-7: unused')
wtWebGraphThermoBaroSensorColorTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2, 3), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorColorTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorColorTable.setDescription('List of sensor colors for the praphical presentation.')
wtWebGraphThermoBaroSensorColorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2, 3, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroSensorNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorColorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroSensorColorEntry.setDescription('Numbers of the sensors.')
wtWebGraphThermoBaroGraphicsSensorColor = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSensorColor.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSensorColor.setDescription('Color of the sensors at the praphical presention.')
wtWebGraphThermoBaroGraphicsSelectScale = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 2, 3, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSelectScale.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsSelectScale.setDescription('Assignes one of 4 scales to a sensor: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Use Scale 1 Bit 1 : Use Scale 2 Bit 2 : Use Scale 3 Bit 3-7: unused')
wtWebGraphThermoBaroGraphicsScaleAutoScaleEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScaleAutoScaleEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScaleAutoScaleEnable.setDescription('Select the Auto Scale Mode: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Scale 1 Auto scale enable Bit 1 : Scale 2 Auto scale enable Bit 2 : Scale 3 Auto scale enable Bit 3-7: unused')
wtWebGraphThermoBaroGraphicsScaleAutoFitEnable = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScaleAutoFitEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScaleAutoFitEnable.setDescription('Select the Auto Fit Mode:: Octet 1: unused Octet 2: unused Octet 3: unused Octet 4: Bit 0 : Scale 1 Auto fit enable Bit 1 : Scale 2 Auto fit enable Bit 2 : Scale 3 Auto fit enable Bit 3-7: unused')
wtWebGraphThermoBaroGraphicsScale1Min = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale1Min.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale1Min.setDescription('Scale 1: Minimum.')
wtWebGraphThermoBaroGraphicsScale2Min = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale2Min.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale2Min.setDescription('Scale 2: Minimum.')
wtWebGraphThermoBaroGraphicsScale3Min = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale3Min.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale3Min.setDescription('Scale 3: Minimum.')
wtWebGraphThermoBaroGraphicsScale4Min = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale4Min.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale4Min.setDescription('Scale 4: Minimum.')
wtWebGraphThermoBaroGraphicsScale1Max = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale1Max.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale1Max.setDescription('Scale 1: Maximum.')
wtWebGraphThermoBaroGraphicsScale2Max = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale2Max.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale2Max.setDescription('Scale 2: Maximum.')
wtWebGraphThermoBaroGraphicsScale3Max = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale3Max.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale3Max.setDescription('Scale 3: Maximum.')
wtWebGraphThermoBaroGraphicsScale4Max = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale4Max.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale4Max.setDescription('Scale 4: Maximum.')
wtWebGraphThermoBaroGraphicsScale1Unit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale1Unit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale1Unit.setDescription('Scale 1: Unit.')
wtWebGraphThermoBaroGraphicsScale2Unit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale2Unit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale2Unit.setDescription('Scale 2: Unit.')
wtWebGraphThermoBaroGraphicsScale3Unit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale3Unit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale3Unit.setDescription('Scale 3: Unit.')
wtWebGraphThermoBaroGraphicsScale4Unit = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 1, 6, 3, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale4Unit.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroGraphicsScale4Unit.setDescription('Scale 4: Unit.')
wtWebGraphThermoBaroPortTable = MibTable((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1), )
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortTable.setDescription('List of settings depending on the sensor number.')
wtWebGraphThermoBaroPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1), ).setIndexNames((0, "WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroSensorNo"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortEntry.setDescription('Sensor parameters for the individual sensors.')
wtWebGraphThermoBaroPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortName.setDescription('Name of the sensor.')
wtWebGraphThermoBaroPortText = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortText.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortText.setDescription('Description of the sensor.')
wtWebGraphThermoBaroPortOffset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortOffset1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortOffset1.setDescription('Offset calibration: Offset in degrees with maximum 2 decimal places at temperature 1.')
wtWebGraphThermoBaroPortTemperature1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortTemperature1.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortTemperature1.setDescription('Offset calibration: Reference temperature 1 in degrees with maximum 2 decimal places.')
wtWebGraphThermoBaroPortOffset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortOffset2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortOffset2.setDescription('Offset calibration: Offset in degrees with maximum 2 decimal places at temperature 2.')
wtWebGraphThermoBaroPortTemperature2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortTemperature2.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortTemperature2.setDescription('Offset calibration: Reference temperature 1 in degrees with maximum 2 decimal places.')
wtWebGraphThermoBaroPortComment = MibTableColumn((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortComment.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortComment.setDescription('Offset calibration: informations of date, name of operator, reference devices.')
wtWebGraphThermoBaroPortAltidude = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortAltidude.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroPortAltidude.setDescription('Altidude oh the Sensor over mean sea level (MSL).')
wtWebGraphThermoBaroMfName = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfName.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfName.setDescription('Manufacturer company name')
wtWebGraphThermoBaroMfAddr = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfAddr.setDescription('Manufacturer address.')
wtWebGraphThermoBaroMfHotline = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfHotline.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfHotline.setDescription('Manufacturer hotline.')
wtWebGraphThermoBaroMfInternet = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfInternet.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfInternet.setDescription('Manufacturer Internet address.')
wtWebGraphThermoBaroMfDeviceTyp = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfDeviceTyp.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfDeviceTyp.setDescription('Manufacturer device name (model number).')
wtWebGraphThermoBaroMfOrderNo = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 3, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfOrderNo.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroMfOrderNo.setDescription('Manufacturer part number.')
wtWebGraphThermoBaroDiagErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorCount.setDescription('Number of entries in the error memory.')
wtWebGraphThermoBaroDiagBinaryError = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 4, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagBinaryError.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagBinaryError.setDescription('Error causes coded bit-by-bit.')
wtWebGraphThermoBaroDiagErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorIndex.setDescription('The value of this variable is used as an index to read an error massege from wtWebGraphThermoBaroDiagErrorMessage. Errors are numbered from 1 to wtWebGraphThermoBaroDiagErrorCount. Writing a valid value into this variable, making the appropriate message readable from wtWebGraphThermoBaroDiagErrorMessage.')
wtWebGraphThermoBaroDiagErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 4, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorMessage.setDescription('Using wtWebGraphThermoBaroDiagErrorIndex as an index, the appropriate message is available.')
wtWebGraphThermoBaroDiagErrorClear = MibScalar((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37, 4, 5), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorClear.setStatus('mandatory')
if mibBuilder.loadTexts: wtWebGraphThermoBaroDiagErrorClear.setDescription('Writing 1 into this variable clears all diagnosis messages.')
wtWebGraphThermoBaroAlert1 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,31)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert1.setDescription('This SNMP trap is generated when Alarm 1 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert2 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,32)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert2.setDescription('This SNMP trap is generated when Alarm 2 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert3 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,33)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert3.setDescription('This SNMP trap is generated when Alarm 3 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert4 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,34)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert4.setDescription('This SNMP trap is generated when Alarm 4 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert5 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,35)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert5.setDescription('This SNMP trap is generated when Alarm 5 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert6 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,36)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert6.setDescription('This SNMP trap is generated when Alarm 6 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert7 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,37)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert7.setDescription('This SNMP trap is generated when Alarm 7 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert8 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,38)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert8.setDescription('This SNMP trap is generated when Alarm 8 was triggered, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert9 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,91)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert9.setDescription('This SNMP trap is generated when Alarm 1 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert10 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,92)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert10.setDescription('This SNMP trap is generated when Alarm 2 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert11 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,93)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert11.setDescription('This SNMP trap is generated when Alarm 3 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert12 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,94)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert12.setDescription('This SNMP trap is generated when Alarm 4 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert13 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,95)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert13.setDescription('This SNMP trap is generated when Alarm 5 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert14 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,96)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert14.setDescription('This SNMP trap is generated when Alarm 6 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert15 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,97)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert15.setDescription('This SNMP trap is generated when Alarm 7 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlert16 = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,98)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroAlarmClearTrapText"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlert16.setDescription('This SNMP trap is generated when Alarm 8 was cleared, SNMP trap enable is set and SNMP is enabled.')
wtWebGraphThermoBaroAlertDiag = NotificationType((1, 3, 6, 1, 4, 1, 5040, 1, 2, 37) + (0,110)).setObjects(("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroDiagErrorIndex"), ("WebGraph-Thermo-Hygro-Barometer-US-MIB", "wtWebGraphThermoBaroDiagErrorMessage"))
if mibBuilder.loadTexts: wtWebGraphThermoBaroAlertDiag.setDescription('This SNMP trap is generated when a diagnosis/error message was triggered, SNMP trap enable is set and SNMP is enabled.')
mibBuilder.exportSymbols("WebGraph-Thermo-Hygro-Barometer-US-MIB", wtWebGraphThermoBaroSyslogServerIP=wtWebGraphThermoBaroSyslogServerIP, wtWebGraphThermoBaroSessCntrlConfigPassword=wtWebGraphThermoBaroSessCntrlConfigPassword, wtWebGraphThermoBaroUdpPort=wtWebGraphThermoBaroUdpPort, wtWebGraphThermoBaroGateway=wtWebGraphThermoBaroGateway, wtWebGraphThermoBaroAlarmFtpOption=wtWebGraphThermoBaroAlarmFtpOption, wtWebGraphThermoBaroGraphicsScale3Max=wtWebGraphThermoBaroGraphicsScale3Max, wtWebGraphThermoBaroAlarmClearMailSubject=wtWebGraphThermoBaroAlarmClearMailSubject, wtWebGraphThermoBaroAlert10=wtWebGraphThermoBaroAlert10, wtWebio=wtWebio, wtWebGraphThermoBaroSessCntrlAdminPassword=wtWebGraphThermoBaroSessCntrlAdminPassword, wtWebGraphThermoBaroGraphicsBaseEnable=wtWebGraphThermoBaroGraphicsBaseEnable, wtWebGraphThermoBaroSensorNo=wtWebGraphThermoBaroSensorNo, wtWebGraphThermoBaroRSSChannelTitle=wtWebGraphThermoBaroRSSChannelTitle, wtWebGraphThermoBaroUDP=wtWebGraphThermoBaroUDP, wtWebGraphThermoBaroTimeServer=wtWebGraphThermoBaroTimeServer, wtWebGraphThermoBaroAlert7=wtWebGraphThermoBaroAlert7, wtWebGraphThermoBaroFTPPassword=wtWebGraphThermoBaroFTPPassword, wtWebGraphThermoBaroAlarmTcpText=wtWebGraphThermoBaroAlarmTcpText, wtWebGraphThermoBaroGetHeaderEnable=wtWebGraphThermoBaroGetHeaderEnable, wtWebGraphThermoBaroStartup=wtWebGraphThermoBaroStartup, wtWebGraphThermoBaroClockDay=wtWebGraphThermoBaroClockDay, wtWebGraphThermoBaroStTzStartMode=wtWebGraphThermoBaroStTzStartMode, wtWebGraphThermoBaroHTTP=wtWebGraphThermoBaroHTTP, wtWebGraphThermoBaroAlert2=wtWebGraphThermoBaroAlert2, wtWebGraphThermoBaroAlarmTable=wtWebGraphThermoBaroAlarmTable, wtWebGraphThermoBaroDeviceText=wtWebGraphThermoBaroDeviceText, wtWebGraphThermoBaroAlarmFtpDataPort=wtWebGraphThermoBaroAlarmFtpDataPort, wtWebGraphThermoBaroStTzStartHrs=wtWebGraphThermoBaroStTzStartHrs, wtWebGraphThermoBaroGraphicsSelectDisplaySensorSel=wtWebGraphThermoBaroGraphicsSelectDisplaySensorSel, wtWebGraphThermoBaroAlarmFtpText=wtWebGraphThermoBaroAlarmFtpText, wtWebGraphThermoBaroGraphics=wtWebGraphThermoBaroGraphics, wtWebGraphThermoBaroTempValue=wtWebGraphThermoBaroTempValue, wtWebGraphThermoBaroDnsServer1=wtWebGraphThermoBaroDnsServer1, wtWebGraphThermoBaroFTPUserName=wtWebGraphThermoBaroFTPUserName, wtWebGraphThermoBaroMailAuthUser=wtWebGraphThermoBaroMailAuthUser, wtWebGraphThermoBaroAlarmAHMax=wtWebGraphThermoBaroAlarmAHMax, wtWebGraphThermoBaroAlertDiag=wtWebGraphThermoBaroAlertDiag, wtWebGraphThermoBaroGraphicsScale2Max=wtWebGraphThermoBaroGraphicsScale2Max, wtWebGraphThermoBaroStTzStopMonth=wtWebGraphThermoBaroStTzStopMonth, wtWebGraphThermoBaroClockHrs=wtWebGraphThermoBaroClockHrs, wtWebGraphThermoBaroStTzOffsetHrs=wtWebGraphThermoBaroStTzOffsetHrs, wtWebGraphThermoBaroAlarmManagerIP=wtWebGraphThermoBaroAlarmManagerIP, wtWebGraphThermoBaroTzEnable=wtWebGraphThermoBaroTzEnable, wtWebGraphThermoBaroDnsServer2=wtWebGraphThermoBaroDnsServer2, wtWebGraphThermoBaroTempValueTable=wtWebGraphThermoBaroTempValueTable, wtWebGraphThermoBaroRSSChannelLink=wtWebGraphThermoBaroRSSChannelLink, wtWebGraphThermoBaroAlarmActive=wtWebGraphThermoBaroAlarmActive, wtWebGraphThermoBaroGraphicsScale1Min=wtWebGraphThermoBaroGraphicsScale1Min, wtWebGraphThermoBaroMfDeviceTyp=wtWebGraphThermoBaroMfDeviceTyp, wtWebGraphThermoBaroRSSChannelImageLink=wtWebGraphThermoBaroRSSChannelImageLink, wtWebGraphThermoBaroDeviceLocation=wtWebGraphThermoBaroDeviceLocation, wtWebGraphThermoBaroAlarmSyslogText=wtWebGraphThermoBaroAlarmSyslogText, wtWebGraphThermoBaroTzOffsetMin=wtWebGraphThermoBaroTzOffsetMin, wtWebGraphThermoBaroGraphicsBaseFrameColor=wtWebGraphThermoBaroGraphicsBaseFrameColor, wtWebGraphThermoBaroTempValuePkt=wtWebGraphThermoBaroTempValuePkt, wtWebGraphThermoBaroSensors=wtWebGraphThermoBaroSensors, wtWebGraphThermoBaroAlarmMin=wtWebGraphThermoBaroAlarmMin, wtWebGraphThermoBaroGraphicsSelectDisplayShowExtrem=wtWebGraphThermoBaroGraphicsSelectDisplayShowExtrem, wtWebGraphThermoBaroPortOffset2=wtWebGraphThermoBaroPortOffset2, wtWebGraphThermoBaroMfAddr=wtWebGraphThermoBaroMfAddr, wtWebGraphThermoBaroAlert12=wtWebGraphThermoBaroAlert12, wtWebGraphThermoBaroTsEnable=wtWebGraphThermoBaroTsEnable, wtWebGraphThermoBaroGraphicsScale4Max=wtWebGraphThermoBaroGraphicsScale4Max, wtWebGraphThermoBaroGraphicsBasePollingrate=wtWebGraphThermoBaroGraphicsBasePollingrate, wtWebGraphThermoBaroGraphicsScale1Max=wtWebGraphThermoBaroGraphicsScale1Max, wtWebGraphThermoBaroClockMin=wtWebGraphThermoBaroClockMin, wtWebGraphThermoBaroMailAuthPassword=wtWebGraphThermoBaroMailAuthPassword, wtWebGraphThermoBaroGraphicsScaleAutoScaleEnable=wtWebGraphThermoBaroGraphicsScaleAutoScaleEnable, wtWebGraphThermoBaro=wtWebGraphThermoBaro, wtWebGraphThermoBaroAlarmEnable=wtWebGraphThermoBaroAlarmEnable, wtWebGraphThermoBaroAlarmTcpPort=wtWebGraphThermoBaroAlarmTcpPort, wtWebGraphThermoBaroGraphicsBaseBackgroundColor=wtWebGraphThermoBaroGraphicsBaseBackgroundColor, wtWebGraphThermoBaroAlarmTcpIpAddr=wtWebGraphThermoBaroAlarmTcpIpAddr, wtWebGraphThermoBaroMfHotline=wtWebGraphThermoBaroMfHotline, wtComServer=wtComServer, wtWebGraphThermoBaroTzOffsetHrs=wtWebGraphThermoBaroTzOffsetHrs, wtWebGraphThermoBaroAlert13=wtWebGraphThermoBaroAlert13, wtWebGraphThermoBaroLanguageSelect=wtWebGraphThermoBaroLanguageSelect, wut=wut, wtWebGraphThermoBaroSyslogEnable=wtWebGraphThermoBaroSyslogEnable, wtWebGraphThermoBaroMfName=wtWebGraphThermoBaroMfName, wtWebGraphThermoBaroDiagErrorIndex=wtWebGraphThermoBaroDiagErrorIndex, wtWebGraphThermoBaroPortComment=wtWebGraphThermoBaroPortComment, wtWebGraphThermoBaroDeviceClock=wtWebGraphThermoBaroDeviceClock, wtWebGraphThermoBaroAlarmInterval=wtWebGraphThermoBaroAlarmInterval, wtWebGraphThermoBaroText=wtWebGraphThermoBaroText, wtWebGraphThermoBaroAlarmRHHysteresis=wtWebGraphThermoBaroAlarmRHHysteresis, wtWebGraphThermoBaroLoggerSensorSel=wtWebGraphThermoBaroLoggerSensorSel, wtWebGraphThermoBaroGraphicsBaseWidth=wtWebGraphThermoBaroGraphicsBaseWidth, wtWebGraphThermoBaroPortTable=wtWebGraphThermoBaroPortTable, wtWebGraphThermoBaroSyslog=wtWebGraphThermoBaroSyslog, wtWebGraphThermoBaroAlarmDeltaTemp=wtWebGraphThermoBaroAlarmDeltaTemp, wtWebGraphThermoBaroRSSChannelItemTitle=wtWebGraphThermoBaroRSSChannelItemTitle, wtWebGraphThermoBaroAlarm=wtWebGraphThermoBaroAlarm, wtWebGraphThermoBaroAlert8=wtWebGraphThermoBaroAlert8, wtWebGraphThermoBaroRSSChannelItemLink=wtWebGraphThermoBaroRSSChannelItemLink, wtWebGraphThermoBaroMfOrderNo=wtWebGraphThermoBaroMfOrderNo, wtWebGraphThermoBaroSnmpCommunityStringRead=wtWebGraphThermoBaroSnmpCommunityStringRead, wtWebGraphThermoBaroGraphicsScale4Min=wtWebGraphThermoBaroGraphicsScale4Min, wtWebGraphThermoBaroGraphicsBaseHeight=wtWebGraphThermoBaroGraphicsBaseHeight, wtWebGraphThermoBaroGraphicsScale3Unit=wtWebGraphThermoBaroGraphicsScale3Unit, wtWebGraphThermoBaroMailAdName=wtWebGraphThermoBaroMailAdName, wtWebGraphThermoBaroFTPEnable=wtWebGraphThermoBaroFTPEnable, wtWebGraphThermoBaroDiagErrorCount=wtWebGraphThermoBaroDiagErrorCount, wtWebGraphThermoBaroSystemTrapManagerIP=wtWebGraphThermoBaroSystemTrapManagerIP, wtWebGraphThermoBaroHttpPort=wtWebGraphThermoBaroHttpPort, wtWebGraphThermoBaroAlarmTimerCron=wtWebGraphThermoBaroAlarmTimerCron, wtWebGraphThermoBaroAlarmSyslogPort=wtWebGraphThermoBaroAlarmSyslogPort, wtWebGraphThermoBaroTimeServer1=wtWebGraphThermoBaroTimeServer1, wtWebGraphThermoBaroNetwork=wtWebGraphThermoBaroNetwork, wtWebGraphThermoBaroAlarmMax=wtWebGraphThermoBaroAlarmMax, wtWebGraphThermoBaroTempValuePktTable=wtWebGraphThermoBaroTempValuePktTable, wtWebGraphThermoBaroBinaryTempValue=wtWebGraphThermoBaroBinaryTempValue, wtWebGraphThermoBaroTemp=wtWebGraphThermoBaroTemp, wtWebGraphThermoBaroAlarmFtpClearText=wtWebGraphThermoBaroAlarmFtpClearText, wtWebGraphThermoBaroTempValuePktEntry=wtWebGraphThermoBaroTempValuePktEntry, wtWebioAn1MailEnable=wtWebioAn1MailEnable, wtWebGraphThermoBaroRSSChannelDescription=wtWebGraphThermoBaroRSSChannelDescription, wtWebGraphThermoBaroSubnetMask=wtWebGraphThermoBaroSubnetMask, wtWebGraphThermoBaroSystemTrapEnable=wtWebGraphThermoBaroSystemTrapEnable, wtWebGraphThermoBaroDeviceName=wtWebGraphThermoBaroDeviceName, wtWebGraphThermoBaroAlarmTrapText=wtWebGraphThermoBaroAlarmTrapText, wtWebGraphThermoBaroAlarmClearTcpText=wtWebGraphThermoBaroAlarmClearTcpText, wtWebGraphThermoBaroPortTemperature1=wtWebGraphThermoBaroPortTemperature1, wtWebGraphThermoBaroAlert4=wtWebGraphThermoBaroAlert4, wtWebGraphThermoBaroFTP=wtWebGraphThermoBaroFTP, wtWebGraphThermoBaroLanguage=wtWebGraphThermoBaroLanguage, wtWebGraphThermoBaroDiagErrorMessage=wtWebGraphThermoBaroDiagErrorMessage, wtWebGraphThermoBaroPortText=wtWebGraphThermoBaroPortText, wtWebGraphThermoBaroDeviceContact=wtWebGraphThermoBaroDeviceContact, wtWebGraphThermoBaroAlert5=wtWebGraphThermoBaroAlert5, wtWebGraphThermoBaroSessCntrlPassword=wtWebGraphThermoBaroSessCntrlPassword, wtWebGraphThermoBaroFTPServerControlPort=wtWebGraphThermoBaroFTPServerControlPort, wtWebGraphThermoBaroUdpEnable=wtWebGraphThermoBaroUdpEnable, wtWebGraphThermoBaroSensorColorEntry=wtWebGraphThermoBaroSensorColorEntry, wtWebGraphThermoBaroAlert1=wtWebGraphThermoBaroAlert1, wtWebGraphThermoBaroAlarmSyslogClearText=wtWebGraphThermoBaroAlarmSyslogClearText, wtWebGraphThermoBaroTimeDate=wtWebGraphThermoBaroTimeDate, wtWebGraphThermoBaroMailServer=wtWebGraphThermoBaroMailServer, wtWebGraphThermoBaroSnmpEnable=wtWebGraphThermoBaroSnmpEnable, wtWebGraphThermoBaroTempValueEntry=wtWebGraphThermoBaroTempValueEntry, wtWebGraphThermoBaroPortTemperature2=wtWebGraphThermoBaroPortTemperature2, wtWebGraphThermoBaroDiagErrorClear=wtWebGraphThermoBaroDiagErrorClear, wtWebGraphThermoBaroGraphicsBase=wtWebGraphThermoBaroGraphicsBase, wtWebGraphThermoBaroAlarmNo=wtWebGraphThermoBaroAlarmNo, wtWebGraphThermoBaroBinaryTempValueTable=wtWebGraphThermoBaroBinaryTempValueTable, wtWebGraphThermoBaroClockMonth=wtWebGraphThermoBaroClockMonth, wtWebGraphThermoBaroAlarmSyslogIpAddr=wtWebGraphThermoBaroAlarmSyslogIpAddr, wtWebGraphThermoBaroDevice=wtWebGraphThermoBaroDevice, wtWebGraphThermoBaroGraphicsScale3Min=wtWebGraphThermoBaroGraphicsScale3Min, wtWebGraphThermoBaroTsSyncTime=wtWebGraphThermoBaroTsSyncTime, wtWebGraphThermoBaroSessCntrl=wtWebGraphThermoBaroSessCntrl, wtWebGraphThermoBaroRSSChannelImageTitle=wtWebGraphThermoBaroRSSChannelImageTitle, wtWebGraphThermoBaroPortEntry=wtWebGraphThermoBaroPortEntry, wtWebGraphThermoBaroMfInternet=wtWebGraphThermoBaroMfInternet, wtWebGraphThermoBaroPortOffset1=wtWebGraphThermoBaroPortOffset1, wtWebGraphThermoBaroPortAltidude=wtWebGraphThermoBaroPortAltidude, wtWebGraphThermoBaroAlarmTrigger=wtWebGraphThermoBaroAlarmTrigger, wtWebGraphThermoBaroStTzEnable=wtWebGraphThermoBaroStTzEnable, wtWebGraphThermoBaroSyslogSystemMessagesEnable=wtWebGraphThermoBaroSyslogSystemMessagesEnable, wtWebGraphThermoBaroAlarmClearTrapText=wtWebGraphThermoBaroAlarmClearTrapText, wtWebGraphThermoBaroTimeZone=wtWebGraphThermoBaroTimeZone, wtWebGraphThermoBaroMailPop3Server=wtWebGraphThermoBaroMailPop3Server, wtWebGraphThermoBaroAlarmClearMailText=wtWebGraphThermoBaroAlarmClearMailText, wtWebGraphThermoBaroMailReply=wtWebGraphThermoBaroMailReply, wtWebGraphThermoBaroGraphicsSelect=wtWebGraphThermoBaroGraphicsSelect, wtWebGraphThermoBaroBinaryTempValueEntry=wtWebGraphThermoBaroBinaryTempValueEntry, wtWebGraphThermoBaroStTzStartMin=wtWebGraphThermoBaroStTzStartMin, wtWebGraphThermoBaroStTzStartWday=wtWebGraphThermoBaroStTzStartWday, wtWebGraphThermoBaroAlarmEMailAddr=wtWebGraphThermoBaroAlarmEMailAddr, wtWebGraphThermoBaroGraphicsScaleAutoFitEnable=wtWebGraphThermoBaroGraphicsScaleAutoFitEnable, wtWebGraphThermoBaroGraphicsScale1Unit=wtWebGraphThermoBaroGraphicsScale1Unit, wtWebGraphThermoBaroAlert14=wtWebGraphThermoBaroAlert14, wtWebGraphThermoBaroGraphicsScale2Min=wtWebGraphThermoBaroGraphicsScale2Min, wtWebGraphThermoBaroFTPAccount=wtWebGraphThermoBaroFTPAccount, wtWebGraphThermoBaroAlert3=wtWebGraphThermoBaroAlert3, wtWebGraphThermoBaroDiagBinaryError=wtWebGraphThermoBaroDiagBinaryError, wtWebGraphThermoBaroAlarmRHMin=wtWebGraphThermoBaroAlarmRHMin, wtWebGraphThermoBaroAlert15=wtWebGraphThermoBaroAlert15, wtWebGraphThermoBaroAlarmFtpFileName=wtWebGraphThermoBaroAlarmFtpFileName, wtWebGraphThermoBaroAlert11=wtWebGraphThermoBaroAlert11, wtWebGraphThermoBaroRSSChannelItemQuantity=wtWebGraphThermoBaroRSSChannelItemQuantity, wtWebGraphThermoBaroStTzOffsetMin=wtWebGraphThermoBaroStTzOffsetMin, wtWebGraphThermoBaroAddConfig=wtWebGraphThermoBaroAddConfig, wtWebGraphThermoBaroManufact=wtWebGraphThermoBaroManufact, wtWebGraphThermoBaroSessCntrlConfigMode=wtWebGraphThermoBaroSessCntrlConfigMode, wtWebGraphThermoBaroSyslogServerPort=wtWebGraphThermoBaroSyslogServerPort, wtWebGraphThermoBaroRSSChannelImage=wtWebGraphThermoBaroRSSChannelImage, wtWebGraphThermoBaroSNMP=wtWebGraphThermoBaroSNMP, wtWebGraphThermoBaroGraphicsScale2Unit=wtWebGraphThermoBaroGraphicsScale2Unit, wtWebGraphThermoBaroGraphicsSelectScale=wtWebGraphThermoBaroGraphicsSelectScale, wtWebGraphThermoBaroSensorEntry=wtWebGraphThermoBaroSensorEntry, wtWebGraphThermoBaroDiag=wtWebGraphThermoBaroDiag, wtWebGraphThermoBaroIpAddress=wtWebGraphThermoBaroIpAddress, wtWebGraphThermoBaroSnmpCommunityStringTrap=wtWebGraphThermoBaroSnmpCommunityStringTrap, wtWebGraphThermoBaroRSS=wtWebGraphThermoBaroRSS, wtWebGraphThermoBaroAlarmDelay=wtWebGraphThermoBaroAlarmDelay, wtWebGraphThermoBaroGraphicsScale=wtWebGraphThermoBaroGraphicsScale, wtWebGraphThermoBaroAlarmMailText=wtWebGraphThermoBaroAlarmMailText, wtWebGraphThermoBaroMail=wtWebGraphThermoBaroMail, wtWebGraphThermoBaroAlert6=wtWebGraphThermoBaroAlert6, wtWebGraphThermoBaroFTPServerIP=wtWebGraphThermoBaroFTPServerIP, wtWebGraphThermoBaroRSSChannelItemDescription=wtWebGraphThermoBaroRSSChannelItemDescription, wtWebGraphThermoBaroAlarmCount=wtWebGraphThermoBaroAlarmCount, wtWebGraphThermoBaroAlarmMailSubject=wtWebGraphThermoBaroAlarmMailSubject, wtWebGraphThermoBaroGraphicsSensorColor=wtWebGraphThermoBaroGraphicsSensorColor, wtWebGraphThermoBaroDatalogger=wtWebGraphThermoBaroDatalogger, wtWebGraphThermoBaroTimeServer2=wtWebGraphThermoBaroTimeServer2, wtWebGraphThermoBaroAlarmIfEntry=wtWebGraphThermoBaroAlarmIfEntry, wtWebGraphThermoBaroFTPOption=wtWebGraphThermoBaroFTPOption, wtWebGraphThermoBaroAlarmName=wtWebGraphThermoBaroAlarmName, wtWebGraphThermoBaroStTzStopMin=wtWebGraphThermoBaroStTzStopMin, wtWebGraphThermoBaroAlert9=wtWebGraphThermoBaroAlert9, wtWebGraphThermoBaroAlert16=wtWebGraphThermoBaroAlert16, wtWebGraphThermoBaroAlarmMailOptions=wtWebGraphThermoBaroAlarmMailOptions, wtWebGraphThermoBaroConfig=wtWebGraphThermoBaroConfig, wtWebGraphThermoBaroStTzStopHrs=wtWebGraphThermoBaroStTzStopHrs, wtWebGraphThermoBaroSnmpCommunityStringReadWrite=wtWebGraphThermoBaroSnmpCommunityStringReadWrite, wtWebGraphThermoBaroPorts=wtWebGraphThermoBaroPorts, wtWebGraphThermoBaroStTzStopMode=wtWebGraphThermoBaroStTzStopMode, wtWebGraphThermoBaroStTzStopWday=wtWebGraphThermoBaroStTzStopWday, wtWebGraphThermoBaroAlarmHysteresis=wtWebGraphThermoBaroAlarmHysteresis, wtWebGraphThermoBaroAlarmAHMin=wtWebGraphThermoBaroAlarmAHMin, wtWebGraphThermoBaroClockYear=wtWebGraphThermoBaroClockYear, wtWebGraphThermoBaroSessCntrlLogout=wtWebGraphThermoBaroSessCntrlLogout, wtWebGraphThermoBaroBasic=wtWebGraphThermoBaroBasic, wtWebGraphThermoBaroAlarmIfTable=wtWebGraphThermoBaroAlarmIfTable, wtWebGraphThermoBaroAlarmRHMax=wtWebGraphThermoBaroAlarmRHMax, wtWebGraphThermoBaroPortName=wtWebGraphThermoBaroPortName, wtWebGraphThermoBaroStTzStartMonth=wtWebGraphThermoBaroStTzStartMonth, wtWebGraphThermoBaroSensorTable=wtWebGraphThermoBaroSensorTable, wtWebGraphThermoBaroAlarmEntry=wtWebGraphThermoBaroAlarmEntry, wtWebGraphThermoBaroSensorColorTable=wtWebGraphThermoBaroSensorColorTable, wtWebGraphThermoBaroLoggerTimebase=wtWebGraphThermoBaroLoggerTimebase, wtWebGraphThermoBaroGraphicsScale4Unit=wtWebGraphThermoBaroGraphicsScale4Unit, wtWebGraphThermoBaroMailAuthentication=wtWebGraphThermoBaroMailAuthentication)
