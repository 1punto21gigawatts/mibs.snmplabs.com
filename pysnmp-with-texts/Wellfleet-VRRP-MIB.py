#
# PySNMP MIB module Wellfleet-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-VRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Integer32, Unsigned32, IpAddress, TimeTicks, ObjectIdentity, Bits, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Integer32", "Unsigned32", "IpAddress", "TimeTicks", "ObjectIdentity", "Bits", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
wfVrrpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfVrrpGroup")
wfVrrpAdminTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1), )
if mibBuilder.loadTexts: wfVrrpAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminTable.setDescription('Configuration information.')
wfVrrpAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1), ).setIndexNames((0, "Wellfleet-VRRP-MIB", "wfVrrpAdminPrimaryIpAddr"), (0, "Wellfleet-VRRP-MIB", "wfVrrpAdminVrId"))
if mibBuilder.loadTexts: wfVrrpAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminEntry.setDescription(' VRRP the operational characteristics of a virtual router.')
wfVrrpAdminDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminDelete.setDescription('Delete/Create parameter.')
wfVrrpAdminDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminDisable.setDescription('Enable/Disable parameter.')
wfVrrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("down", 4))).clone('initialize')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminState.setDescription('The current state of the VRRP router with respect to this virtual router.')
wfVrrpAdminPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpAdminPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminPrimaryIpAddr.setDescription("The master router's real (primary) IP address. This is the IP address listed as the source in VRRP advertisements received by this virtual router.")
wfVrrpAdminVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpAdminVrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminVrId.setDescription('This object contains the Virtual Router Identifier (VRID). In addition to being part of the index for this table, it is used to calculate the MAC address.')
wfVrrpAdminIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminIpAddr.setDescription('The IP address that is associated with this virtual router.')
wfVrrpAdminVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpAdminVirtualMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminVirtualMacAddr.setDescription("The virtual MAC address of the virtual router. This is derived as follows: 00-00-5E-00-01-<VRID>. Where the first three octets consist of the IANA's OUI, the next two octets indicate the address block of the VRRP protocol, and the remaining octets consist of the VRID. Although this object can be derived from the 'wfVrrpAdminVrId' object, it is included here, for completeness.")
wfVrrpAdminPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminPriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminPriority.setDescription('This object specifies the priority for the virtual router with respect to other virtual routers that are backing up a set of IP addresses. Higher values imply higher priority. A priority of 255 is used for the router that owns the associated IP address(es), i.e., is backing up IP addresses which are primary.')
wfVrrpAdminAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminAdvertisementInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminAdvertisementInterval.setDescription('This is the time interval, in seconds, between sending advertisement. Only the Master sends VRRP advertisements.')
wfVrrpAdminCriticalIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminCriticalIpInterface.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminCriticalIpInterface.setDescription('The IP address of an interface on the Router that will cauase the shutdown event.')
wfVrrpAdminIPXBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminIPXBackup.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminIPXBackup.setDescription('Enable/Disable IPX backup.')
wfVrrpAdminIGMPBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminIGMPBackup.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminIGMPBackup.setDescription('Enable/Disable IGMP backup.')
wfVrrpAdminTokenRingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminTokenRingAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminTokenRingAddress.setDescription('Source MAC Address for VRRP when running over Token Ring.')
wfVrrpAdminPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminPreemptMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminPreemptMode.setDescription('Preempt Mode.')
wfVrrpAdminMasterPingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVrrpAdminMasterPingEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpAdminMasterPingEnable.setDescription('a VRRP router is called Owner if it has the virtual IP address configured as one of its real interface address(es). According to the RFC 2338, if the Master is not the Owner of the virtual IP address, it must not accept packets addressed to the virtual IP address. This mib is added to make the virtual IP address pingable even if the Master is not the Owner.It defines whether Non-Owner Master responds to the virtual IP address ping or not.')
wfVrrpRouterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2), )
if mibBuilder.loadTexts: wfVrrpRouterStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpRouterStatsTable.setDescription('Table of virtual router statistics.')
wfVrrpRouterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1), ).setIndexNames((0, "Wellfleet-VRRP-MIB", "wfVrrpStatsPrimaryIpAddr"), (0, "Wellfleet-VRRP-MIB", "wfVrrpStatsVrId"))
if mibBuilder.loadTexts: wfVrrpRouterStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpRouterStatsEntry.setDescription('An entry in the table, containing statistics information about a given virtual router.')
wfVrrpStatsPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsPrimaryIpAddr.setDescription("The master router's real (primary) IP address. This is the IP address listed as the source in VRRP advertisements received by this virtual router.")
wfVrrpStatsVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsVrId.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsVrId.setDescription('This object contains the Virtual Router Identifier (VRID). In addition to being part of the index for this table, it is used to calculate the MAC address.')
wfVrrpStatsMasterTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsMasterTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsMasterTransitions.setDescription("The total number of times that this virtual router's state has transitioned from BACKUP to MASTER.")
wfVrrpStatsInAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsInAdvertisements.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsInAdvertisements.setDescription('The total number of VRRP advertisements received by this virtual router.')
wfVrrpStatsChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsChecksumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsChecksumErrors.setDescription('The total number of VRRP packets received with an invalid checksum value.')
wfVrrpStatsVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsVersionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsVersionErrors.setDescription('The total number of VRRP packets received with an invalid version number.')
wfVrrpStatsVrIdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsVrIdErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsVrIdErrors.setDescription('The total number of VRRP packets received with an invalid VRID for this virtual router.')
wfVrrpStatsAdvertiseIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsAdvertiseIntervalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsAdvertiseIntervalErrors.setDescription('The total number of VRRP advertisement packets received for which the advertisement interval is different than the one configured for the local virtual router.')
wfVrrpStatsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsIpTtlErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsIpTtlErrors.setDescription('The total number of VRRP packets received by the router with IP TTL (Time-To-Live) not equal to 255.')
wfVrrpStatsInPriorityZeroAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsInPriorityZeroAdvertisements.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsInPriorityZeroAdvertisements.setDescription("The total number of VRRP packets received by the virtual router with a priority of '0'.")
wfVrrpStatsOutPriorityZeroAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsOutPriorityZeroAdvertisements.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsOutPriorityZeroAdvertisements.setDescription("The total number of VRRP packets sent by the virtual router with a priority of '0'.")
wfVrrpStatsInInvalidTypeAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsInInvalidTypeAdvertisements.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsInInvalidTypeAdvertisements.setDescription("The total number of VRRP packets received by the virtual router with an invalid value in the 'type' field.")
wfVrrpStatsUnknownTypeAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 25, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVrrpStatsUnknownTypeAdvertisements.setStatus('mandatory')
if mibBuilder.loadTexts: wfVrrpStatsUnknownTypeAdvertisements.setDescription('The total number of VRRP packets received by the router with an invalid value in the VRRP type field.')
mibBuilder.exportSymbols("Wellfleet-VRRP-MIB", wfVrrpAdminIPXBackup=wfVrrpAdminIPXBackup, wfVrrpStatsUnknownTypeAdvertisements=wfVrrpStatsUnknownTypeAdvertisements, wfVrrpAdminTable=wfVrrpAdminTable, wfVrrpRouterStatsTable=wfVrrpRouterStatsTable, wfVrrpStatsIpTtlErrors=wfVrrpStatsIpTtlErrors, wfVrrpStatsInAdvertisements=wfVrrpStatsInAdvertisements, wfVrrpRouterStatsEntry=wfVrrpRouterStatsEntry, wfVrrpAdminPrimaryIpAddr=wfVrrpAdminPrimaryIpAddr, wfVrrpAdminCriticalIpInterface=wfVrrpAdminCriticalIpInterface, wfVrrpAdminVrId=wfVrrpAdminVrId, wfVrrpStatsMasterTransitions=wfVrrpStatsMasterTransitions, wfVrrpAdminEntry=wfVrrpAdminEntry, wfVrrpAdminIpAddr=wfVrrpAdminIpAddr, wfVrrpStatsInPriorityZeroAdvertisements=wfVrrpStatsInPriorityZeroAdvertisements, wfVrrpAdminMasterPingEnable=wfVrrpAdminMasterPingEnable, wfVrrpStatsVrId=wfVrrpStatsVrId, wfVrrpAdminDelete=wfVrrpAdminDelete, wfVrrpStatsVrIdErrors=wfVrrpStatsVrIdErrors, wfVrrpAdminAdvertisementInterval=wfVrrpAdminAdvertisementInterval, wfVrrpAdminVirtualMacAddr=wfVrrpAdminVirtualMacAddr, wfVrrpAdminTokenRingAddress=wfVrrpAdminTokenRingAddress, wfVrrpStatsPrimaryIpAddr=wfVrrpStatsPrimaryIpAddr, wfVrrpAdminDisable=wfVrrpAdminDisable, wfVrrpAdminIGMPBackup=wfVrrpAdminIGMPBackup, wfVrrpStatsChecksumErrors=wfVrrpStatsChecksumErrors, wfVrrpAdminPreemptMode=wfVrrpAdminPreemptMode, wfVrrpStatsInInvalidTypeAdvertisements=wfVrrpStatsInInvalidTypeAdvertisements, wfVrrpAdminPriority=wfVrrpAdminPriority, wfVrrpStatsAdvertiseIntervalErrors=wfVrrpStatsAdvertiseIntervalErrors, wfVrrpStatsOutPriorityZeroAdvertisements=wfVrrpStatsOutPriorityZeroAdvertisements, wfVrrpAdminState=wfVrrpAdminState, wfVrrpStatsVersionErrors=wfVrrpStatsVersionErrors)
