#
# PySNMP MIB module COMTEK-VMS-NM-SYSMGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMTEK-VMS-NM-SYSMGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, iso, Counter32, Counter64, Unsigned32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, Integer32, ObjectIdentity, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "iso", "Counter32", "Counter64", "Unsigned32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "Integer32", "ObjectIdentity", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
comtek = MibIdentifier((1, 3, 6, 1, 4, 1, 597))
comtekVms = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4))
comtekVmsNMSysMgrMib = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3))
comtekVmsNMVmsMonMib = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15))
sResources = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1))
sProcesses = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 2))
sTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 3))
sErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 4))
sCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 5))
sSyi = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1))
sCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2))
sDsk = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3))
sShd = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4))
sQue = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5))
sProcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1))
sCritInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2))
sHwErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1))
sSwErrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2))
sSyiNodeName = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiNodeName.setDescription('The name of the node.')
sSyiHwName = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiHwName.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiHwName.setDescription('The hardware model name.')
sSyiBootTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(23, 23)).setFixedLength(23)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiBootTime.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiBootTime.setDescription('The date and time when the system was booted. This value is in the form dd-mmm-yyyy hh:mm:ss.cc.')
sSyiVersion = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiVersion.setDescription('The software version number of the OpenVMS operating system running on the node.')
sSyiMemSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiMemSize.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiMemSize.setDescription('The total number of pages of physical memory in the system configuration. This value is static.')
sSyiAvailCpuCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiAvailCpuCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiAvailCpuCnt.setDescription('The number of CPUs which were available at system bootstrap. This value is static.')
sSyiActiveCpuCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiActiveCpuCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiActiveCpuCnt.setDescription('Number of active CPUs.')
sSyiPgSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiPgSize.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiPgSize.setDescription('The number of pages in the currently installed page files.')
sSyiPgFree = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiPgFree.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiPgFree.setDescription('The number of free pages in the currently installed page files.')
sSyiPgUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiPgUsedPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiPgUsedPercent.setDescription('The percent full of the currently installed page files.')
sSyiSwpSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiSwpSize.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiSwpSize.setDescription('The number of pages in the currently installed swapping files.')
sSyiSwpFree = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiSwpFree.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiSwpFree.setDescription('The number of free pages in the currently installed swapping files.')
sSyiSwpUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiSwpUsedPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiSwpUsedPercent.setDescription('The percent full of the currently installed swapping files.')
sSyiCpuPgSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiCpuPgSize.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiCpuPgSize.setDescription('The number of CPU-specific bytes per page in the system. On VAX systems, this value is always 512. On Alpha systems, CPU page size varies from system to system.')
sSyiTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiTime.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiTime.setDescription('Subagent up time (sCfgUpTime) when system information (sSyi) was last gathered. sCfgSysInfoTimer controls how often system statistics are gathered.')
sSyiMemFreePg = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiMemFreePg.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiMemFreePg.setDescription('Number of free pages of physical memory on the system.')
sSyiMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSyiMemUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sSyiMemUsed.setDescription('Physical memory percentage used.')
sCpuPercentUsed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCpuPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sCpuPercentUsed.setDescription('The percent utilization of all CPUs, i.e., the percent of time the combined CPUs were not idle during the last one minute interval.')
sIntPercentUsed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntPercentUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sIntPercentUsed.setDescription('The percent of time the combined CPUs spent in interrupt mode during the last one minute interval.')
sCpuTicks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCpuTicks.setStatus('mandatory')
if mibBuilder.loadTexts: sCpuTicks.setDescription('Number of interval timer ticks that have occurred since the last time CPU statistics were gathered (approximately one minute). This value is the sum of the one minute mode tick counters. This number has been normalized to account for all active CPUs on the system. This value may be used with the one minute CPU mode times to determine the percent of time spent in each CPU mode.')
sCpuLoadOneMinute = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4))
sKernelOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sKernelOne.setStatus('mandatory')
if mibBuilder.loadTexts: sKernelOne.setDescription('Time in Kernel mode for all CPUs during the last one minute interval. This value indicates the number of ticks in kernel mode on the kernel stack, when no spinlock busy wait is active.')
sExecOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sExecOne.setStatus('mandatory')
if mibBuilder.loadTexts: sExecOne.setDescription('Number of interval timer ticks in Executive mode for all CPUs during the last one minute interval.')
sSuprOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSuprOne.setStatus('mandatory')
if mibBuilder.loadTexts: sSuprOne.setDescription('Number of interval timer ticks in Supervisor mode for all CPUs during the last one minute interval.')
sUserOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUserOne.setStatus('mandatory')
if mibBuilder.loadTexts: sUserOne.setDescription('Number of interval timer ticks in User mode for all CPUs during the last one minute interval.')
sIntrOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntrOne.setStatus('mandatory')
if mibBuilder.loadTexts: sIntrOne.setDescription('Time in Interrupt mode for all CPUs during the last one minute interval. This value indicates the number of interval timer ticks in Kernel mode on the Interrupt stack.')
sCompOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCompOne.setStatus('mandatory')
if mibBuilder.loadTexts: sCompOne.setDescription('Number of interval timer ticks in Compatibility mode for all CPUs during the last one minute interval.')
sSpinOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSpinOne.setStatus('mandatory')
if mibBuilder.loadTexts: sSpinOne.setDescription('Number of interval timer ticks in mpsynch mode (i.e., Kernel mode on kernel or interrupt stack, when spinlock busy wait is active) for all CPUs during the last one minute interval.')
sNullOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNullOne.setStatus('mandatory')
if mibBuilder.loadTexts: sNullOne.setDescription('CPU idle time for all CPUs during the last one minute interval. This value is measured in interval timer ticks.')
sCpuLoadFiveMinute = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5))
sKernelFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sKernelFive.setStatus('mandatory')
if mibBuilder.loadTexts: sKernelFive.setDescription('Number of ticks spent in Kernel mode during the past five minutes.')
sExecFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sExecFive.setStatus('mandatory')
if mibBuilder.loadTexts: sExecFive.setDescription('Number of ticks spent in Executive mode during the past five minutes.')
sSuprFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSuprFive.setStatus('mandatory')
if mibBuilder.loadTexts: sSuprFive.setDescription('Number of ticks spent in Supervisor mode during the past five minutes.')
sUserFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUserFive.setStatus('mandatory')
if mibBuilder.loadTexts: sUserFive.setDescription('Number of ticks spent in User mode during the past five minutes.')
sIntrFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntrFive.setStatus('mandatory')
if mibBuilder.loadTexts: sIntrFive.setDescription('Number of ticks spent in Interrupt mode during the past five minutes.')
sCompFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCompFive.setStatus('mandatory')
if mibBuilder.loadTexts: sCompFive.setDescription('Number of ticks spent in Compatibility mode during the past five minutes.')
sSpinFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSpinFive.setStatus('mandatory')
if mibBuilder.loadTexts: sSpinFive.setDescription('Number of ticks spent in Spin mode during the past five minutes.')
sNullFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNullFive.setStatus('mandatory')
if mibBuilder.loadTexts: sNullFive.setDescription('Number of ticks the CPUs were idle during the past five minutes.')
sCpuLoadFifteenMinute = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6))
sKernelFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sKernelFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sKernelFifteen.setDescription('Number of ticks spent in Kernel mode during the past fifteen minutes.')
sExecFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sExecFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sExecFifteen.setDescription('Number of ticks spent in Executive mode during the past fifteen minutes.')
sSuprFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSuprFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sSuprFifteen.setDescription('Number of ticks spent in Supervisor mode during the past fifteen minutes.')
sUserFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sUserFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sUserFifteen.setDescription('Number of ticks spent in User mode during the past fifteen minutes.')
sIntrFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sIntrFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sIntrFifteen.setDescription('Number of ticks spent in Interrupt mode during the past fifteen minutes.')
sCompFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCompFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sCompFifteen.setDescription('Number of ticks spent in Compatibility mode during the past fifteen minutes.')
sSpinFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSpinFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sSpinFifteen.setDescription('Number of ticks spent in Spin mode during the past fifteen minutes.')
sNullFifteen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNullFifteen.setStatus('mandatory')
if mibBuilder.loadTexts: sNullFifteen.setDescription('Number of ticks the CPUs were idle during the past fifteen minutes.')
sDskTblCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTblCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTblCnt.setDescription('Number of entries in the disk table.')
sDskTblTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTblTime.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTblTime.setDescription('Subagent up time (sCfgUpTime) when disk statistics (sDskTbl) were last gathered. sCfgDskTimer controls how often disk statistics are gathered.')
sDskTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3), )
if mibBuilder.loadTexts: sDskTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTbl.setDescription('Table of disk information.')
sDskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sDskIndex"))
if mibBuilder.loadTexts: sDskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sDskEntry.setDescription('A row in the disk table.')
sDskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sDskIndex.setDescription('Location in the disk table.')
sDskName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskName.setStatus('mandatory')
if mibBuilder.loadTexts: sDskName.setDescription('Device name.')
sDskUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskUsedPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sDskUsedPercent.setDescription('The disk percent full.')
sDskOps = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskOps.setStatus('mandatory')
if mibBuilder.loadTexts: sDskOps.setDescription('The average number of disk operations per second during the last disk statistics update interval. (The disk statistics update frequency is determined by the variable sCfgDskTimer.)')
sDskMountCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskMountCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sDskMountCnt.setDescription('The mount count for the volume.')
sDskRefCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskRefCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sDskRefCnt.setDescription('The number of channels assigned to the device.')
sDskTransCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTransCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTransCnt.setDescription('The transaction count for the volume.')
sDskMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskMediaName.setStatus('mandatory')
if mibBuilder.loadTexts: sDskMediaName.setDescription('The name of the volume type.')
sDskOpCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskOpCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sDskOpCnt.setDescription('The operation count for the volume.')
sDskFreeBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskFreeBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: sDskFreeBlocks.setDescription('The number of free blocks on the disk.')
sDskMaxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskMaxBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: sDskMaxBlocks.setDescription('The maximum number of blocks on the volume.')
sDskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sDskStatus.setDescription('The device unit status for the physical disk or virtual disk. This value is a bit vector which, when set, corresponds to the following states: Bit Description 0 TIM (time-out is enabled) 1 INT (Interrupt is expected) 2 ERLOGIP (Error log in progress on unit) 3 CANCEL (I/O on unit is canceled) 4 ONLINE (Unit is online) 5 POWER (Power failed while unit busy) 6 TIMOUT (Unit timed out) 7 INTTYPE (Receiver interrupt) 8 BSY (Unit is busy) 9 MOUNTING (Device is being mounted) 10 DEADMO (Deallocate at dismount) 11 VALID (Volume is software valid) 12 UNLOAD (Unload volume at dismount) 13 TEMPLATE (Template UCB) 14 MNTVERIP (Mount verification is in progress) 15 WRONGVOL (Wrong volume detected during mount verification) 16 DELETEUCB (Delete this UCB when reference count equals 0) 17 LCL_VALID (Volume is valid on local node) 18 SUPMVMSG (Suppress mount verification messages if they indicate success) 19 MNTVERPEND (Mount verification is pending on the device and the device is busy) 20 DISMOUNT (Dismount in progress) 21 CLUTRAN (VAXcluster state transition in progress) 22 WRTLOCKMV (Write-locked mount verification in progress) 23 SVPN_END (Last byte used from page is mapped by a system virtual page number ) 24 ALTBSY (Unit is busy via an alternate startup path) 25 SNAPSHOT (Restart verification is in progress) A sDskStatus trap message is sent when a device transitions into the POWER, TIMOUT, or MNTVERIP state.')
sDskDevChar = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskDevChar.setStatus('mandatory')
if mibBuilder.loadTexts: sDskDevChar.setDescription('The disk device-independent characteristics of the disk. This value is a bit vector which, when set, corresponds to the following characteristic: Bit Description 0 REC (Device is record oriented) 1 CCL (Device is a carriage control device) 2 TRM (Device is a terminal) 3 DIR (Device is directory structured) 4 SDI (Device is single-directory structured) 5 SQD (Device is sequential and block oriented) 6 SPL (Device is being spooled) 7 OPR (Device is an operator) 8 RCT (Disk contains Revector Cache Table. This bit is set for every DAA disk) 13 NET (Device is a network device) 14 FOD (Device is files oriented) 15 DUA (Device is dual ported) 16 SHR (Device is shareable) 17 GEN (Device is a generic device) 18 AVL (Device is available for use) 19 MNT (Device is mounted) 20 MBX (Device is a mailbox) 21 DMT (Device is marked for dismount) 22 ELG (Device has error logging enabled) 23 ALL (Device is allocated) 24 FOR (Device is mounted foreign) 25 SWL (Devoce is software write locked) 26 IDV (Device can provide input) 27 ODV (Device can provide output) 28 RND (Device allows random access) 29 RTM (Device is a real-time device) 30 RCK (Device has read-checking enabled) 31 WCK (Device has write-checking enabled)')
sDskLogVolName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskLogVolName.setStatus('mandatory')
if mibBuilder.loadTexts: sDskLogVolName.setDescription('The logical name of the volume or volume set.')
sDskTrapPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTrapPercent.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTrapPercent.setDescription('The percentage of disk space utilization at which excessive disk utilization (sDskFull) traps begin to be sent for this disk. A value of 0 indicates that either a disk block free count is being used for this disk (see sDskTrapBlocks), or the system default disk use limit (identified by sCfgDskLimit), or the system default disk minimum free block limit (identified by sCfgDskMinFreeBlks) for the system is being used. Disks which have a specific usage limit set are contained in the critical disk file. See sCfgCritDsk for more information about this file.')
sDskTrapBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTrapBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTrapBlocks.setDescription('The minimum number of free disk blocks required for this disk. If the actual number of free blocks on the disk drops below this level, disk utilization (sDskFull) traps begin to be sent for this disk. A value of 0 indicates that either a percent full is being used for this disk (see sDskTrapPercent) or the system default disk use limit (identified by sCfgDskLimit), or the system default disk minimum free block limit (identified by sCfgDskMinFreeBlks) for the system is being used. Disks which have a specific usage limit set are contained in the critical disk file. See sCfgCritDsk for more information about this file.')
sDskShdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskShdCount.setStatus('mandatory')
if mibBuilder.loadTexts: sDskShdCount.setDescription('The number of shadow set members that make up this virtual unit. If this number is zero, then this is not a virtual disk. This number indicates the number of shadow set entries that will be found in the (sShdTbl) for this disk.')
sDskTrapOpSec = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskTrapOpSec.setStatus('mandatory')
if mibBuilder.loadTexts: sDskTrapOpSec.setDescription('The number of operations per second at which excessive disk (sDskOpSec) traps begin to be sent for this disk. A value of 0 indicates that the system default disk operations per second limit (identified by sCfgDskOps), is being used. Disks which have a specific limit set are contained in the critical disk file. If both this value and sCfgDskOps are zero, disk operations per second traps are disabled. See sCfgCritDsk for more information about the critical disk file.')
sDskQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: sDskQueueLength.setDescription('I/O queue length for this disk.')
sDskRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDskRemote.setStatus('mandatory')
if mibBuilder.loadTexts: sDskRemote.setDescription('A value of true(1) indicates that the device is a remote device; a value of false(2) indicates that it is not a remote device. A remote device is a device that is not directly connected to the local node, but instead is visible through the VMScluster system.')
sShdTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: sShdTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sShdTbl.setDescription('Table of shadow set information.')
sShdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sDskIndex"), (0, "COMTEK-VMS-NM-SYSMGR-MIB", "sShdIndex"))
if mibBuilder.loadTexts: sShdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sShdEntry.setDescription('A row in the shadow table. The combination of the sDskIndex and sShdIndex indices relates each shadow set table entry (sShdEntry) to its virtual unit entry in the disk table (sDskTbl).')
sShdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sShdIndex.setDescription('Location in the shadow set table.')
sShdName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdName.setStatus('mandatory')
if mibBuilder.loadTexts: sShdName.setDescription('Device name of the shadow set disk.')
sShdFail = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdFail.setStatus('mandatory')
if mibBuilder.loadTexts: sShdFail.setDescription('Indicator for shadow set member failure. A value of true(1) indicates that this member has failed out of the shadow set. ')
sShdCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdCopy.setStatus('mandatory')
if mibBuilder.loadTexts: sShdCopy.setDescription('Indicator for shadow set catch-up copying. A value of true(1) indicates that this member is in a catch-up copy state.')
sShdMerge = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sShdMerge.setStatus('mandatory')
if mibBuilder.loadTexts: sShdMerge.setDescription('Indicator for shadow set member merge. A value of true(1) indicates that this member is in a merge state.')
sQueCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sQueCnt.setDescription('Number of queues currently being monitored. This number is the number of queue names found in the sCfgQueFile file.')
sQueTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTime.setStatus('mandatory')
if mibBuilder.loadTexts: sQueTime.setDescription('Subagent up time (sCfgUpTime) when queue statistics (sQTbl) were last gathered. sCfgQueTimer controls how often queue statistics are gathered.')
sQTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3), )
if mibBuilder.loadTexts: sQTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sQTbl.setDescription('Table of queue information.')
sQTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQIndex"))
if mibBuilder.loadTexts: sQTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sQTblEntry.setDescription('A row in the queue table.')
sQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sQIndex.setDescription('Location in the queue table.')
sQName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQName.setStatus('mandatory')
if mibBuilder.loadTexts: sQName.setDescription('Name of the queue.')
sQMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sQMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: sQMonitor.setDescription('Indicates if the queue and its entries are currently being monitored. A value of true(1) indicates that this queue and its entries are currently being monitored. A value of false(2) indicates that monitoring is currently disabled on this queue and its entries.')
sQStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sQStatus.setDescription('Queue status indicates the current settings of the queue status flags. This value is a bit vector which, when set, corresponds to the following characteristic: Bit Description 0 Queue is aligning 1 Queue is idle: no jobs executing and none available for execution 2 Lowercase device 3 Queue is doing /OPERATOR (intentionally not documented) 4 Queue is paused 5 Queue is pausing 6 Remote device 7 Incomplete remote request to reset (OBSOLETE) 8 Queue is resuming from paused state 9 /DEVICE=SERVER or reported to be a served queue by the symbiont 10 Device is stalled 11 Queue is starting 12 Queue is stopped 13 Queue is stopping 14 Device is unavailable 15 Queue is closed 16 Queue is executing as many jobs as it is capable of executing 17 Queue does not yet exist in db or is being removed from db 18 At least one job is executing, but the queue is capable of executing more 19 Queue is not able to accept or process jobs; its QSIs are inactive 20 AUTOSTART queue explicitly stopped 21 Queue will be stopped when work currently in progress has completed')
sQEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryCount.setStatus('mandatory')
if mibBuilder.loadTexts: sQEntryCount.setDescription('Number of current queue entries. This number also identifies the number of rows in the sQEntryTbl for this queue.')
sQEntryTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4), )
if mibBuilder.loadTexts: sQEntryTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sQEntryTbl.setDescription('Table of queue entry information.')
sQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQIndex"), (0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQEntryNum"))
if mibBuilder.loadTexts: sQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sQEntry.setDescription('A row in the queue entry table.')
sQEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryNum.setStatus('mandatory')
if mibBuilder.loadTexts: sQEntryNum.setDescription('The queue entry number of this job.')
sQEntryJobname = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryJobname.setStatus('mandatory')
if mibBuilder.loadTexts: sQEntryJobname.setDescription('The job name of this queue entry.')
sQEntryJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQEntryJobStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sQEntryJobStatus.setDescription('Queue status indicates the current settings of the queue status flags. This value is a bit vector which, when set, corresponds to the following characteristic: Bit Description 0 Job is aborting 1 Job is executing 2 Job is holding for /HOLD 3 Job is inaccessible 4 Job was refused by symbiont 5 Job will requeue after abort (intentionally not documented) 6 Job started execution at least once (intentionally not documented) 7 Job was retained by /RETAIN 8 Job is starting 9 Job is holding for /AFTER 10 Job is suspended by STOP/QUEUE command 11 Job is pending 12 Job does not yet exist in db or is being removed from db 13 Current job on stalled queue 14 Job was processed by the symbiont but further processing is necessary 15 Job has been completely processed')
sQueBatch = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5))
sQueBatchPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchPending.setStatus('mandatory')
if mibBuilder.loadTexts: sQueBatchPending.setDescription('Number of pending jobs in the batch queue.')
sQueBatchExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchExecuting.setStatus('mandatory')
if mibBuilder.loadTexts: sQueBatchExecuting.setDescription('Number of executing jobs in the batch queue.')
sQueBatchTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchTimed.setStatus('mandatory')
if mibBuilder.loadTexts: sQueBatchTimed.setDescription('Number of timed jobs in the batch queue.')
sQueBatchHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchHolding.setStatus('mandatory')
if mibBuilder.loadTexts: sQueBatchHolding.setDescription('Number of holding jobs in the batch queue.')
sQueBatchRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueBatchRetained.setStatus('mandatory')
if mibBuilder.loadTexts: sQueBatchRetained.setDescription('Number of retained jobs in the batch queue.')
sQueGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6))
sQueGenericPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericPending.setStatus('mandatory')
if mibBuilder.loadTexts: sQueGenericPending.setDescription('Number of pending jobs in generic queues.')
sQueGenericExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericExecuting.setStatus('mandatory')
if mibBuilder.loadTexts: sQueGenericExecuting.setDescription('Number of executing jobs in generic queues.')
sQueGenericTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericTimed.setStatus('mandatory')
if mibBuilder.loadTexts: sQueGenericTimed.setDescription('Number of timed jobs in generic queues.')
sQueGenericHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericHolding.setStatus('mandatory')
if mibBuilder.loadTexts: sQueGenericHolding.setDescription('Number of holding jobs in generic queues.')
sQueGenericRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueGenericRetained.setStatus('mandatory')
if mibBuilder.loadTexts: sQueGenericRetained.setDescription('Number of retained jobs in generic queues.')
sQuePrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7))
sQuePrinterPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterPending.setStatus('mandatory')
if mibBuilder.loadTexts: sQuePrinterPending.setDescription('Number of pending jobs in printer queues.')
sQuePrinterExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterExecuting.setStatus('mandatory')
if mibBuilder.loadTexts: sQuePrinterExecuting.setDescription('Number of executing jobs in printer queues.')
sQuePrinterTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterTimed.setStatus('mandatory')
if mibBuilder.loadTexts: sQuePrinterTimed.setDescription('Number of timed jobs in printer queues.')
sQuePrinterHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterHolding.setStatus('mandatory')
if mibBuilder.loadTexts: sQuePrinterHolding.setDescription('Number of holding jobs in printer queues.')
sQuePrinterRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQuePrinterRetained.setStatus('mandatory')
if mibBuilder.loadTexts: sQuePrinterRetained.setDescription('Number of retained jobs in printer queues.')
sQueServer = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8))
sQueServerPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerPending.setStatus('mandatory')
if mibBuilder.loadTexts: sQueServerPending.setDescription('Number of pending jobs in server queues.')
sQueServerExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerExecuting.setStatus('mandatory')
if mibBuilder.loadTexts: sQueServerExecuting.setDescription('Number of executing jobs in server queues.')
sQueServerTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerTimed.setStatus('mandatory')
if mibBuilder.loadTexts: sQueServerTimed.setDescription('Number of timed jobs in server queues.')
sQueServerHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerHolding.setStatus('mandatory')
if mibBuilder.loadTexts: sQueServerHolding.setDescription('Number of holding jobs in server queues.')
sQueServerRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueServerRetained.setStatus('mandatory')
if mibBuilder.loadTexts: sQueServerRetained.setDescription('Number of retained jobs in server queues.')
sQueSymbiont = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9))
sQueSymbiontPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontPending.setStatus('mandatory')
if mibBuilder.loadTexts: sQueSymbiontPending.setDescription('Number of pending jobs in symbiont queues.')
sQueSymbiontExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontExecuting.setStatus('mandatory')
if mibBuilder.loadTexts: sQueSymbiontExecuting.setDescription('Number of executing jobs in symbiont queues.')
sQueSymbiontTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontTimed.setStatus('mandatory')
if mibBuilder.loadTexts: sQueSymbiontTimed.setDescription('Number of timed jobs in symbiont queues.')
sQueSymbiontHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontHolding.setStatus('mandatory')
if mibBuilder.loadTexts: sQueSymbiontHolding.setDescription('Number of holding jobs in symbiont queues.')
sQueSymbiontRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueSymbiontRetained.setStatus('mandatory')
if mibBuilder.loadTexts: sQueSymbiontRetained.setDescription('Number of retained jobs in symbiont queues.')
sQueTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10))
sQueTerminalPending = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalPending.setStatus('mandatory')
if mibBuilder.loadTexts: sQueTerminalPending.setDescription('Number of pending jobs in terminal queues.')
sQueTerminalExecuting = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalExecuting.setStatus('mandatory')
if mibBuilder.loadTexts: sQueTerminalExecuting.setDescription('Number of executing jobs in terminal queues.')
sQueTerminalTimed = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalTimed.setStatus('mandatory')
if mibBuilder.loadTexts: sQueTerminalTimed.setDescription('Number of timed jobs in terminal queues.')
sQueTerminalHolding = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalHolding.setStatus('mandatory')
if mibBuilder.loadTexts: sQueTerminalHolding.setDescription('Number of holding jobs in terminal queues.')
sQueTerminalRetained = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQueTerminalRetained.setStatus('mandatory')
if mibBuilder.loadTexts: sQueTerminalRetained.setDescription('Number of retained jobs in terminal queues.')
sQMan = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11))
sQManCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManCount.setStatus('mandatory')
if mibBuilder.loadTexts: sQManCount.setDescription('Number of entries in the queue manager table.')
sQManTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2), )
if mibBuilder.loadTexts: sQManTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sQManTbl.setDescription('Table of queue manager information.')
sQManTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sQManIndex"))
if mibBuilder.loadTexts: sQManTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sQManTblEntry.setDescription('A row in the queue manager table.')
sQManIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sQManIndex.setDescription('Location in the queue manager table.')
sQManName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManName.setStatus('mandatory')
if mibBuilder.loadTexts: sQManName.setDescription('Name of the queue manager.')
sQManStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 1, 5, 11, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sQManStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sQManStatus.setDescription('Queue manager status indicates the current settings of the queue manger status flags. This value is a bit vector which, when set, corresponds to the following characteristic: Bit Description 0 Start pending 1 Starting 2 Running 3 Failover 4 Stopping 5 Stopped')
sPsCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sPsCnt.setDescription('Number of processes currently running of the system.')
sPsTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsTime.setStatus('mandatory')
if mibBuilder.loadTexts: sPsTime.setDescription('Subagent up time (sCfgUpTime) when process statistics (sPsTbl) were last gathered. sCfgPsTimer controls how often process statistics are gathered.')
sPsTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3), )
if mibBuilder.loadTexts: sPsTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sPsTbl.setDescription('Table of process information.')
sPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sPsPID"))
if mibBuilder.loadTexts: sPsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sPsEntry.setDescription('A row in the process table.')
sPsPID = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPID.setStatus('mandatory')
if mibBuilder.loadTexts: sPsPID.setDescription('The VMS process identification (PID) of the process.')
sPsProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsProcName.setStatus('mandatory')
if mibBuilder.loadTexts: sPsProcName.setDescription('The process name.')
sPsState = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("colpg", 1), ("mwait", 2), ("cef", 3), ("pfw", 4), ("lef", 5), ("lefo", 6), ("hib", 7), ("hibo", 8), ("susp", 9), ("suspo", 10), ("fpg", 11), ("com", 12), ("como", 13), ("cur", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsState.setStatus('mandatory')
if mibBuilder.loadTexts: sPsState.setDescription('The state of the process.')
sPsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPriority.setStatus('mandatory')
if mibBuilder.loadTexts: sPsPriority.setDescription('The current priority of the process.')
sPsDirectIO = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsDirectIO.setStatus('mandatory')
if mibBuilder.loadTexts: sPsDirectIO.setDescription('The count of the direct I/O operations performed by this process. If sCfgAllPsData is set to no(2), this value may be zero.')
sPsCpuTime = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCpuTime.setStatus('mandatory')
if mibBuilder.loadTexts: sPsCpuTime.setDescription("The process' accumulated CPU time. If sCfgAllPsData is set to no(2), this value may be zero.")
sPsPgFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPgFaults.setStatus('mandatory')
if mibBuilder.loadTexts: sPsPgFaults.setDescription('The total number of page faults incurred by the process. If sCfgAllPsData is set to no(2), this value may be zero.')
sPsWorkSetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsWorkSetSize.setStatus('mandatory')
if mibBuilder.loadTexts: sPsWorkSetSize.setDescription('The current working set size (in pages) of the process. If sCfgAllPsData is set to no(2), this value may be zero.')
sPsUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsUsername.setStatus('mandatory')
if mibBuilder.loadTexts: sPsUsername.setDescription('The owner username of the process. This string is always blank padded to a length of 12 characters.')
sPsPhysTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPhysTerm.setStatus('mandatory')
if mibBuilder.loadTexts: sPsPhysTerm.setDescription('The physical device name of the terminal associated with the process.')
sPsImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsImageName.setStatus('mandatory')
if mibBuilder.loadTexts: sPsImageName.setDescription('The directory specification and image file name. If sCfgAllPsData is set to no(2), this value may be zero.')
sPsLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsLoginTime.setStatus('mandatory')
if mibBuilder.loadTexts: sPsLoginTime.setDescription('The time at which the process was created. This value is in dd-mmm-yyyy hh:mm:ss.cc format. If sCfgAllPsData is set to no(2), this value may be zero.')
sPsPgTblCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsPgTblCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sPsPgTblCnt.setDescription('The number of pages the process has in its working set.')
sPsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("network", 2), ("batch", 3), ("interactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsMode.setStatus('mandatory')
if mibBuilder.loadTexts: sPsMode.setDescription('The mode of the process.')
sPsRWState = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 18, 19))).clone(namedValues=NamedValues(("astwait", 1), ("mailbox", 2), ("npdynmem", 3), ("pgfile", 4), ("pgdynmem", 5), ("mplempty", 11), ("mpwbusy", 12), ("scs", 13), ("clustran", 14), ("cpucap", 15), ("clusrv", 16), ("psxfrk", 18), ("mutex", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsRWState.setStatus('mandatory')
if mibBuilder.loadTexts: sPsRWState.setDescription('The resource wait state of the process. This variable is only meaningful when a process is in the MWAIT state (i.e., when sPsState is set to MWAIT(2)), otherwise this variable contains no data. The above listed resource wait states have the following meanings: AST - AST wait MBX - Mailbox full NPG - Nonpaged dynamic memory PFF - Page file full PAG - Paged dynamic memory MPE - Modified page list empty MPB - Modified page writer busy SCS - Distributed lock manager wait CLU - VMScluster transition CAP - CPU capability CSV - VMScluster server process PSXFRK - POSIX fork creation MUTEX - Locked resource')
sPsCOMQueue = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCOMQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sPsCOMQueue.setDescription('Number of processes that are waiting to compute, i.e., the number of processes with a sPsState of COM.')
sPsCOMOQueue = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsCOMOQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sPsCOMOQueue.setDescription('Number of outswapped processes that are waiting to compute, i.e., the number of processes with a sPsState of COMO.')
sPsOther = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsOther.setStatus('mandatory')
if mibBuilder.loadTexts: sPsOther.setDescription('Count of other mode processes i.e., those processes that are not network, batch or interactive.')
sPsNetwork = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: sPsNetwork.setDescription('Count of network processes.')
sPsBatch = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsBatch.setStatus('mandatory')
if mibBuilder.loadTexts: sPsBatch.setDescription('Count of batch processes.')
sPsInteractive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsInteractive.setStatus('mandatory')
if mibBuilder.loadTexts: sPsInteractive.setDescription('Count of Interactive processes.')
sPsAvailProcSlots = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPsAvailProcSlots.setStatus('mandatory')
if mibBuilder.loadTexts: sPsAvailProcSlots.setDescription('Count of Available Process Slots.')
sCritCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sCritCnt.setDescription('Number of critical process table entries.')
sCritTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritTime.setStatus('mandatory')
if mibBuilder.loadTexts: sCritTime.setDescription('Subagent up time (sCfgUpTime) when critical process statistics (sCritTbl) were last gathered. sCfgCritTimer specifies how often critical process statistics are gathered.')
sCritTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3), )
if mibBuilder.loadTexts: sCritTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sCritTbl.setDescription('Table of critical process information.')
sCritEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sCritIndex"))
if mibBuilder.loadTexts: sCritEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sCritEntry.setDescription('A row in the critical process table.')
sCritIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sCritIndex.setDescription('Location in the critical process table.')
sCritName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritName.setStatus('mandatory')
if mibBuilder.loadTexts: sCritName.setDescription('Name of a critical process. Critical process names may contain * and % wildcard characters.')
sCritReqCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritReqCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sCritReqCnt.setDescription('Minimum number of copies of this process required to be running on the system.')
sCritCurCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCritCurCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sCritCurCnt.setDescription('The current number of copies of this process running on the system.')
sTrapNextSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapNextSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: sTrapNextSeqNum.setDescription('The next sequence number in the trap table. When this variable is sent as part of a trap, it identifies the sequence number assigned to that trap. This is a 32-bit value and will wrap after 4294967295.')
sTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: sTrapTime.setDescription('Subagent up time (sCfgUpTime) when the trap was created.')
sTrapResendSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sTrapResendSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: sTrapResendSeqNum.setDescription('Sequence number of a trap message to be resent to the manager. Setting this variable to a trap sequence number causes the specified trap message to be resent. If the set-request contains a number that is not available (the number of items retained in the trap table is dependent on the value of sCfgTrapTblSize), an error indicator will be returned.')
sTrapLastSeqNumSent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapLastSeqNumSent.setStatus('mandatory')
if mibBuilder.loadTexts: sTrapLastSeqNumSent.setDescription('Sequence number of the last trap sent. This value may be compared to sTrapNextSeqNum to determine if a backlog of traps exists. If this value is one less than sTrapNextSeqNum, then no backlog exists. A backlog of traps may exist if more traps are generated per second than may be sent (as specified by the variable sCfgMaxTrapSec).')
sTrapLostCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sTrapLostCount.setStatus('mandatory')
if mibBuilder.loadTexts: sTrapLostCount.setDescription('This variable indicates the number of traps that have been lost. A trap is considered to be lost if it is overwritten in the internal trap table before it is sent to the NMS. This may occur if the trap table is not large enough (see sCfgTrapTblSize) to hold all of unsent traps. How quickly traps are sent to the NMS is governed by the sCfgMaxTrapSec variable. To prevent trap loss, set these two variables so that the trap backlog does not overflow the trap table and so that traps do not flood the network.')
sHwErrDeviceCnt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrDeviceCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrDeviceCnt.setDescription('Number of devices reporting errors.')
sHwErrTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrTime.setDescription('Subagent up time (sCfgUpTime) when hardware error statistics were last gathered.')
sHwErrTbl = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3), )
if mibBuilder.loadTexts: sHwErrTbl.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrTbl.setDescription('Table of hardware errors.')
sHwErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "sHwErrIndex"))
if mibBuilder.loadTexts: sHwErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrEntry.setDescription('A row in the hardware error table.')
sHwErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrIndex.setDescription('Location in the hardware error table.')
sHwErrDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrDeviceName.setDescription('Name of the device.')
sHwErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrCnt.setDescription('Number of errors reported by the device since last reboot of the system.')
sHwErrLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sHwErrLastTime.setStatus('mandatory')
if mibBuilder.loadTexts: sHwErrLastTime.setDescription('sCfgUpTime when the latest error was detected by the NM*SysMgr Subagent.')
sSwErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sSwErrStatus.setDescription('The latest software status code.')
sSwErrFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrFile.setStatus('mandatory')
if mibBuilder.loadTexts: sSwErrFile.setDescription('The file name of the software element which generated the latest software status code.')
sSwErrLineNum = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: sSwErrLineNum.setDescription('The line number in the file which generated the latest software status code.')
sSwErrLastTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrLastTime.setStatus('mandatory')
if mibBuilder.loadTexts: sSwErrLastTime.setDescription('sCfgUpTime when the most recent software status code was generated.')
sSwErrMessage = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sSwErrMessage.setStatus('mandatory')
if mibBuilder.loadTexts: sSwErrMessage.setDescription('Description of the latest software error.')
sOpcomOne = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomOne.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomOne.setDescription('The first 255 characters of the text of the most recent message in the operator log. For opcom messages that exceed 255 characters, the remainder of the message will be contained in sOpcomTwo, sOpcomThree, sOpcomFour, sOpcomFive, sOpcomSix, and sOpcomSeven depending on the length of the message. All operator log messages are sent as sOpcomMessage traps and retained in the internal trap table. To retrieve a previous message, resend the trap (see sTrapResendSeqNum).')
sOpcomTwo = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomTwo.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomTwo.setDescription('Part 2 of an opcom message.')
sOpcomThree = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomThree.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomThree.setDescription('Part 3 of an opcom message.')
sOpcomFour = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomFour.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomFour.setDescription('Part 4 of an opcom message.')
sOpcomFive = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomFive.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomFive.setDescription('Part 5 of an opcom message.')
sOpcomReplyId = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplyId.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomReplyId.setDescription('Request number to be associated with the operator reply. This number identifies a previous Opcom request. This variable is reset to zero when a reply is successfully sent. (See sOpcomReplySend.)')
sOpcomReplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noStatus", 1), ("blankTape", 2), ("initializeTape", 3), ("requestComplete", 4), ("requestPending", 5), ("requestAborted", 6))).clone('noStatus')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomReplyStatus.setDescription('Completion status to accompany opcom reply. This variable is reset to noStatus when a reply is successfully sent. (See sOpcomReplySend.)')
sOpcomReplyText = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplyText.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomReplyText.setDescription('Text to be sent for an operator reply message. This variable is reset to null when a reply is successfully sent. (See sOpcomReplySend.)')
sOpcomReplySend = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sOpcomReplySend.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomReplySend.setDescription('Flag which is used to trigger sending of an operator reply message. To send an operator reply, set the sOpcomReplyId, sOpcomReplyStatus, and sOpcomReplyText variables and then set the sOpcomReplySend to true. All opcom reply variables will be reset following a successful send.')
sOpcomSix = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomSix.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomSix.setDescription('Part 6 of an opcom message.')
sOpcomSeven = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sOpcomSeven.setStatus('mandatory')
if mibBuilder.loadTexts: sOpcomSeven.setDescription('Part 7 of an opcom message.')
sCfgFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgFile.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgFile.setDescription('Name of the file currently being used for NM*SysMgr initialization parameters. This file is identified by the logical name COMTEK$SYSMGR_CONFIG. Changing this variable redefines the COMTEK$SYSMGR_CONFIG logical name. NM*SysMgr must be reinitialized (by setting the variable sCfgReinitSubagent to true) before the new configuration file is used. If a set-request is performed on this variable and the specified file name does not exist, is not accessible by the subagent, or contains invalid data, the file name is not changed, and an error is returned, and a sSwErr trap is generated describing the error. Set-requests: Take effect only after reinitialization (sCfgReinitSubagent) NOTE: To make changes to this value permanent across system reboots, the definition of this logical name must also be changed in the system startup procedures.')
sCfgLogFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgLogFile.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgLogFile.setDescription('Name of the log file currently being used by NM*SysMgr. If this process is run interactively, this variable will have the value SYS$OUTPUT: (standard output).')
sCfgCritFile = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritFile.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCritFile.setDescription('Name of the file currently being used to identify critical processes. This file is associated with the logical name COMTEK$SYSMGR_CRITPROC. Changing this variable redefines the COMTEK$SYSMGR_CRITPROC logical name. NM*SysMgr must be reinitialized (by setting the variable sCfgReinitSubagent to true) before the new critical process file is used. If a set-request is performed on this variable and the specified file name does not exist, is not accessible by the subagent, or contains invalid data, the file name is not changed, an error is returned, and a sSwErr trap is generated describing the error. Set-requests: Take effect only after reinitialization (sCfgReinitSubagent) NOTE: To make changes to this value permanent across system reboots, the definition of this logical name must also be changed in the system startup procedures.')
sCfgReinitSubagent = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgReinitSubagent.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgReinitSubagent.setDescription('Flag which may be set to force the NM*SysMgr Subagent to reinitialize. Reinitialization involves resetting the process configuration using the parameters contained in the sCfgFile and resetting the critical process, critical disk, and critical queue data as specified in the sCfgCritFile, sCfgCritDsk, and sCfgCritQue files and sending the sWarmStart trap.')
sCfgTraps = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgTraps.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgTraps.setDescription('Flag which determines if any trap messages are sent to the NM*Master Agent. Setting this variable to disabled(2) disables all traps from being sent. Configuration Variable: Traps Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgHwErrTraps = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgHwErrTraps.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgHwErrTraps.setDescription('Flag which determines if hardware error traps (sHwErr) should be sent. Setting this variable to enabled(1) causes a trap to be sent for every error detected. Setting this variable to disabled(2) disables hardware error traps from being sent. Configuration Variable: HwErrTrap Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgCpuLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCpuLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCpuLimit.setDescription('The percentage of CPU utilization at which excessive CPU utilization (sCpuUsage) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: CpuUtil Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgIntLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgIntLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgIntLimit.setDescription('The percentage of interrupt CPU utilization at which excessive interrupt utilization (sIntUsage) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: IntUtil Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgDskOps = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 9), Integer32().clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskOps.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgDskOps.setDescription('The threshold at which excessive disk busy traps (sDskOpSec) begin to be sent. This value is expressed in terms of disk operations (reads and writes) per second. At expiration of each sCfgDskTimer interval, the number of disk operations during the intervening interval is computed. A trap is sent if the number of operations during that interval exceeds the this limit. A value of 0 disables disk busy traps. Different thresholds may be set on individual disks by specifying an OpSec limit in the critical disk file. Configuration Variable: DskOps Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgDskLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgDskLimit.setDescription('The percentage of disk space utilization at which excessive disk utilization (sDskFull) traps begin to be sent. If this variable is set to a value other than zero, it is used to determine when to send sDskFull traps for disks not specified in the critical disk table (see sCfgCritDsk). This value and sCfgDskMinFreeBlks are mutually exclusive, i.e., only one of these values is in effect at any given time. If neither value is specified in the configuration file, then the default value of sCfgDskLimit is used for disk monitoring and sCfgDskMinFreeBlks is set to zero. To disable default disk full monitoring, both of these values must be zero. Set-requests to this value will fail unless sCfgDskMinFreeBlks is set to zero. Configuration Variable: DskUse Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgPgLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgPgLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgPgLimit.setDescription('The percentage of page file utilization at which excessive page file utilization (sPgFull) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: PgUse Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgSwpLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgSwpLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgSwpLimit.setDescription('The percentage of swap file utilization at which excessive swap file utilization (sSwpFull) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: SwpUse Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgPsTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 13), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgPsTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgPsTimer.setDescription('The number of minutes between updates of the process statistics table (sPsTbl) data. A value of 0 disables gathering of process related data. Configuration Variable: PsTimer Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgDskTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 14), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgDskTimer.setDescription('The number of minutes between updates of the disk table (sDskTbl) data. A value of 0 disables gathering of disk related data. Configuration Variable: DskTimer Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgHwErrTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 15), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgHwErrTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgHwErrTimer.setDescription('The number of minutes between updates of the hardware error table (sHwErrTbl) data. A value of 0 disables gathering of hardware error data. Configuration Variable: HwErrTimer Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgSysInfoTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgSysInfoTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgSysInfoTimer.setDescription('The number of minutes between updates of the system information (sSyi) data. A value of 0 disables gathering of system information data. Configuration Variable: SysInfoTimer Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgCritTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 17), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCritTimer.setDescription('The number of minutes between critical process table (sCritTbl) updates. A value of 0 disables critical process missing processing. Configuration Variable: CritTimer Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgDskAlarm = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 18), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgDskAlarm.setDescription('The number of minutes between repeat traps for disk (sDskFull), page file (sPgFull), or swap file full (sSwpFull) conditions. A value of 0 causes only the initial instance of the disk, page file, or swap file full condition to trigger a trap. Configuration Variable: RptDskAlarm Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgCritAlarm = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 19), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCritAlarm.setDescription('The number of minutes between repeat traps for a given critical process missing condition. Setting this variable to 0 causes only the first instance to generate a trap. Configuration Variable: RptCritAlarm Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgTrapTblSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 5000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgTrapTblSize.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgTrapTblSize.setDescription("The maximum number of traps to be retained. Traps that are retained may be resent (see sTrapResendSeqNum) unless too many subsequent traps have been generated. This variable controls how many traps are retained in NM*SysMgr's internal trap table. Configuration Variable: TrapTableSize Set-Requests: Take effect immediately Changes to this value are written to the sCfgFile.")
sCfgHostName = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('localhost')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgHostName.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgHostName.setDescription('The name of the host that the subagent is communicating with. This is the host name where the NM*Master Agent resides. This variable is not currently used. Configuration Variable: Host')
sCfgAllPsData = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgAllPsData.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgAllPsData.setDescription('This variable controls the amount of data that is available in the process statistics table (sPsTbl). If this flag is set to no(2), only the process statistics that are contained in the process control block (PCB) or job information block (JIB) for each process are available (data in the process header (PHD) may also be available). Setting this flag to yes makes all statistics in the sPsTbl available but incurs an additional performance overhead (to retrieve out swapped processes and deliver kernel mode ASTs to all processes). Configuration variable: AllPsData Set-requests: Take effect immediately. Changes to this value are written to the sCfgFile.')
sCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgTimeout.setDescription('This variable identifies the time-out value that is to be used by the subagent during subtree registration. If this value is set to zero, the default value (saDefaultTimeout) contained in the NM*Master Agent will be used. If the value specified exceeds the current maximum that NM*Master will permit (saMaxTimeout), the maximum value will be used. This value is specified in seconds. Configuration Variable: Timeout')
sCfgOpcomSecurity = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomSecurity.setDescription('Flag which determines if the opcom security messages are to be sent as opcom traps. Setting this variable to enabled(1) causes opcom trap messages to be sent for security messages. Configuration Variable: OpcomSecurity Set-requests: Take effect at next process start-up Changes to this value are written to the tCfgFile.')
sCfgControlTermProc = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgControlTermProc.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgControlTermProc.setDescription('Flag which may be used to disable process termination by the sCfgTermProc variable. Setting this variable to enabled(1) allows the sCfgTermProc variable to be set to true(1) to terminate the NM*SysMgr process. Setting this variable to disabled(2) prevents the sCfgTermProc variable from being set. Configuration Variable: ControlTermProc')
sCfgTermProc = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgTermProc.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgTermProc.setDescription('Flag which may be used to shutdown the NM*SysMgr process. Setting this flag to true causes the NM*SysMgr process to respond to the set-request, send the sTermProc trap, close the connection to the NM*Master Agent, and shutdown. If the sCfgControlTermProc flag state is disabled(2), the sCfgTermProc variable can not be set. Set-requests: Take effect immediately if sCfgControlTermProc is enabled(2)')
sCfgVersion = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgVersion.setDescription('Current version of the NM*SysMgr Subagent software.')
sCfgUpTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sCfgUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgUpTime.setDescription('Subagent up time.')
sCfgMaxTrapSec = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgMaxTrapSec.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgMaxTrapSec.setDescription('This value specifies the maximum number of traps per second that may be sent. A value of zero disables trap throttling, allowing all traps to be sent as they are generated. It is recommended that this value and sCfgTrapTblSize be tuned to each operational environment. Configuration Variable: MaxTrapSec Set-requests: Take effect immediately. Changes to this value are written to the sCfgFile.')
sCfgCritDsk = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritDsk.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCritDsk.setDescription('Name of the file currently being used to identify critical disk space and operations per second trap thresholds for individual disks. This file contains: disk name (required) percent full or number of free blocks (optional) operations per second (optional) The disk name may take the form of a physical disk name (including the leading underscore (_) and trailing colon (:)), a logical volume name, or, for shadowed disks, the name of the virtual unit. If two entries specify the same disk (one by physical name and the other by logical volume name), only the entry for the physcial disk name will be used for that disk. Once the disk usage exceeds the specified percent full or the number of free blocks drops below the specified free disk blocks, disk full (sDskFull) traps will begin to be sent. Disk busy (sDskOpSec) traps are sent if the number of operations per second exceeds the limit specified for this disk. The following are valid entries in the critical disk file: _ALPHA$DKA0:,blocks=652829 disk$alphasys,percent=99,ops=120 _DSA1:,ops=300 This file is associated with the system logical name COMTEK$SYSMGR_CRITDSK. Changing this variable redefines the COMTEK$SYSMGR_CRITDSK logical name. NM*SysMgr must be reinitialized (by setting the variable sCfgReinitSubagent to true) before a new critical disk file is used. If a set-request is performed on this variable and the specified file name does not exist, is not accessible by the subagent, or contains invalid data, the file name is not changed, an error is returned, and a sSwErr trap is generated describing the error. Set-requests: Take effect only after reinitialization (sCfgReinitSubagent) NOTE: To make changes to this value permanent across system reboots, the definition of this logical name must also be changed in the system startup procedures.')
sCfgCritQue = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritQue.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCritQue.setDescription('Name of the file currently being used to identify queues to be monitored. This file is associated with the logical name COMTEK$SYSMGR_QUEUE. Changing this variable redefines the COMTEK$SYSMGR_QUEUE logical name. NM*SysMgr must be reinitialized (by setting the variable sCfgReinitSubagent to true) before the new queue file is used. If a set-request is performed on this variable and the specified file name does not exist, is not accessible by the subagent, or contains invalid data, the file name is not changed, an error is returned, and a sSwErr trap is generated describing the error. Set-requests: Take effect only after reinitialization (sCfgReinitSubagent) NOTE: To make changes to this value permanent across system reboots, the definition of this logical name must also be changed in the system startup procedures.')
sCfgQueTimer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 32), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgQueTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgQueTimer.setDescription('The number of minutes between updates of the queue statistics table (sQTbl) data. A value of 0 disables gathering of queue related data. Configuration Variable: QueTimer Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgDskMinFreeBlks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgDskMinFreeBlks.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgDskMinFreeBlks.setDescription('The minimum number of disk blocks that must be free on a disk. When the number of free blocks on a disk drops below this level, excessive disk utilization (sDskFull) traps begin to be sent. If this variable is set to a value other than zero, it is used to determine when to send sDskFull traps for disks not specified in the critical disk table (see sCfgCritDsk). This value and sCfgDskLimit are mutually exclusive, i.e., only one of these values is in effect at any given time. If neither value is specified in the configuration file, then the default value of sCfgDskLimit is used for disk monitoring and sCfgDskMinFreeBlks is set to zero. To disable default disk full monitoring, both of these values must be zero. Set-requests to this value will fail unless sCfgDskLimit is set to zero. Configuration Variable: DskMinFreeBlks Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgMemLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgMemLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgMemLimit.setDescription('The percentage of physical memory utilization at which excessive memory utilization (sMemFull) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: MemUse Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgCOMQueueLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 35), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCOMQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCOMQueueLimit.setDescription('The number of processes in COM state at which excessive compute queue (sCOMQue) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: COMQueue Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgCOMOQueueLimit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 36), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCOMOQueueLimit.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCOMOQueueLimit.setDescription('The number of processes in COMO state at which excessive outswapped compute queue (sCOMOQue) traps begin to be sent. A value of 0 disables these traps. Configuration Variable: COMOQueue Set-requests: Take effect immediately Changes to this value are written to the sCfgFile.')
sCfgOpcomCards = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomCards.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomCards.setDescription('Flag which determines if NM*SysMgr will receive opcom CARDS class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving CARDS opcom messages. Configuration Variable: Cards Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomCentral = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomCentral.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomCentral.setDescription('Flag which determines if NM*SysMgr will receive opcom CENTRAL class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving CENTRAL opcom messages. Configuration Variable: Central Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomCluster = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomCluster.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomCluster.setDescription('Flag which determines if NM*SysMgr will receive opcom CLUSTERclass messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving CLUSTER opcom messages. Configuration Variable: Cluster Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomDevices = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomDevices.setDescription('Flag which determines if NM*SysMgr will receive opcom DEVICES class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving DEVICES opcom messages. Configuration Variable: Devices Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomDisks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomDisks.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomDisks.setDescription('Flag which determines if NM*SysMgr will receive opcom DISKS class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving DISKS opcom messages. Configuration Variable: Disks Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomLicense = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomLicense.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomLicense.setDescription('Flag which determines if NM*SysMgr will receive opcom LICENSE class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving LICENSE opcom messages. Configuration Variable: License Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomNetwork = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomNetwork.setDescription('Flag which determines if NM*SysMgr will receive opcom NETWORK class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving NETWORK opcom messages. Configuration Variable: Network Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper1 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper1.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper1.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER1 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER1 opcom messages. Configuration Variable: Oper1 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper2 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper2.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper2.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER2 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER2 opcom messages. Configuration Variable: Oper2 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper3 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper3.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper3.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER3 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER3 opcom messages. Configuration Variable: Oper3 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper4 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper4.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper4.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER4 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER4 opcom messages. Configuration Variable: Oper4 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper5 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper5.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper5.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER5 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER5 opcom messages. Configuration Variable: Oper5 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper6 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper6.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper6.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER6 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER6 opcom messages. Configuration Variable: Oper6 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper7 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper7.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper7.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER7 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER7 opcom messages. Configuration Variable: Oper7 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper8 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper8.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper8.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER8 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER8 opcom messages. Configuration Variable: Oper8 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper9 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper9.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper9.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER9 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER9 opcom messages. Configuration Variable: Oper9 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper10 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper10.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper10.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER10 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER10 opcom messages. Configuration Variable: Oper10 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper11 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper11.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper11.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER11 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER11 opcom messages. Configuration Variable: Oper11 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomOper12 = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomOper12.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomOper12.setDescription('Flag which determines if NM*SysMgr will receive opcom OPER12 class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving OPER12 opcom messages. Configuration Variable: Oper12 Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomPrinter = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomPrinter.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomPrinter.setDescription('Flag which determines if NM*SysMgr will receive opcom PRINTER class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving PRINTER opcom messages. Configuration Variable: Printer Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomTapes = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomTapes.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomTapes.setDescription('Flag which determines if NM*SysMgr will receive opcom TAPES class messages. Setting this variable to disabled(2) disables NM*SysMgr from receiving TAPES opcom messages. Configuration Variable: Tapes Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgOpcomFilter = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dropMatch", 1), ("keepMatch", 2))).clone('dropMatch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgOpcomFilter.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgOpcomFilter.setDescription('Flag which determines if NM*SysMgr will drop opcom messages that match filter criteria or drop all opcom messages except those that match filter criteria. Configuration Variable: Filter Set-requests: Take effect on next process start-up Changes to this value are written to the sCfgFile.')
sCfgLocalDisksOnly = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgLocalDisksOnly.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgLocalDisksOnly.setDescription('Flag which may be used to instruct NM*SysMgr to gather disk statistics either on all available disks or only on local disks. A disk is considered to be local if the variable sDskRemote for the disk is FALSE(2), indicating that the disk is not remote. If this flag is set to TRUE(1), the disk table (sDskTbl) will only contain data on local disks. If this flag is set to FALSE(2), the disk table (sDskTbl) will contain data on all available disks. Configuration Variable: LocalDisksOnly Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
sCfgCritDisksOnly = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 3, 5, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sCfgCritDisksOnly.setStatus('mandatory')
if mibBuilder.loadTexts: sCfgCritDisksOnly.setDescription('Flag which may be used to instruct NM*SysMgr to gather disk statistics either on all available disks or only on disks listed in the Critical Disk file (COMTEK$SYSMGR_CRITDSK). If this flag is set to TRUE(1), the disk table (sDskTbl) will only contain data on disks listed in the Critical Disk file. If this flag is set to FALSE(2), the disk table (sDskTbl) will contain data on all available disks. Configuration Variable: CritDisksOnly Set-requests: Take effect on next timer expiration Changes to this value are written to the sCfgFile.')
vmsModes = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 1))
vmsModeUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeUpdateTime.setDescription('Time when CPU mode statistics were last gathered.')
vmsModeUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsModeUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeUpdateInterval.setDescription('How often CPU mode statistics are to be gathered. A value of 0 disables gathering of CPU mode statistics. This value is expressed in minutes.')
vmsModeCpuCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeCpuCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeCpuCount.setDescription('Number of entries in the CPU Mode table (i.e., the number of CPUs being monitored).')
vmsModeTable = MibTable((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4), )
if mibBuilder.loadTexts: vmsModeTable.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeTable.setDescription('Table description. ')
vmsModeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1), ).setIndexNames((0, "COMTEK-VMS-NM-SYSMGR-MIB", "vmsModeCpuId"))
if mibBuilder.loadTexts: vmsModeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeTableEntry.setDescription('Row in table description. ')
vmsModeCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeCpuId.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeCpuId.setDescription('CPU ID for mode data in this row in the mode table.')
vmsModeKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeKernel.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeKernel.setDescription('Number of clock ticks this CPU has spent in kernel mode (excluding interrupt stack time) since the system was booted.')
vmsModeExec = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeExec.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeExec.setDescription('Number of clock ticks this CPU has spent in Executive mode since the system was booted.')
vmsModeSuper = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeSuper.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeSuper.setDescription('Number of clock ticks this CPU has spent in Supervisor mode since the system was booted.')
vmsModeUser = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeUser.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeUser.setDescription('Number of clock ticks this CPU has spent in User mode (excluding compatibility-mode time) since the system was booted.')
vmsModeInter = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeInter.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeInter.setDescription('Number of clock ticks (10-millisecond units) this CPU has spent on the Interrupt stack since the system was booted.')
vmsModeMPSync = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeMPSync.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeMPSync.setDescription('Number of clock ticks this CPU has spent synchronizing multiple CPUs since the system was booted.')
vmsModeCompat = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeCompat.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeCompat.setDescription('Number of clock ticks this CPU has spent in Compatibility mode since the system was booted.')
vmsModeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsModeIdle.setStatus('mandatory')
if mibBuilder.loadTexts: vmsModeIdle.setDescription('Number of clock ticks this CPU has spent executing the NULL process since the system was booted.')
vmsTotalModes = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5))
vmsTotalKernel = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalKernel.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalKernel.setDescription('Total number of clock ticks all CPUs have spent in kernel mode (excluding interrupt stack time) since the system was booted.')
vmsTotalExec = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalExec.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalExec.setDescription('Total clock ticks all CPUs have spent in Executive mode since the system was booted.')
vmsTotalSuper = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalSuper.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalSuper.setDescription('Total clock ticks all CPUs have spent in Supervisor mode since the system was booted.')
vmsTotalUser = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalUser.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalUser.setDescription('Total clock ticks all CPUs have spent in User mode (excluding compatibility-mode time) since the system was booted.')
vmsTotalInter = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalInter.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalInter.setDescription('Total clock ticks (10-millisecond units) all CPUs have spent on the Interrupt stack since the system was booted.')
vmsTotalMPSync = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalMPSync.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalMPSync.setDescription('Total clock ticks all CPUs have spent synchronizing multiple CPUs since the system was booted.')
vmsTotalComp = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalComp.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalComp.setDescription('Total clock ticks all CPUs have spent in Compatibility mode since the system was booted.')
vmsTotalIdle = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsTotalIdle.setStatus('mandatory')
if mibBuilder.loadTexts: vmsTotalIdle.setDescription('Total clock ticks all CPUs have spent executing the NULL process since the system was booted.')
vmsFile = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 2))
vmsFileUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileUpdateTime.setDescription('Time when File System statistics were last updated. ')
vmsFileUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsFileUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileUpdateInterval.setDescription('How often File System statistics are to be gathered. A value of 0 disables gathering of File System statistics. This value is expressed in minutes. ')
vmsFileDirFCBHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirFCBHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileDirFCBHit.setDescription('Count of hits on directory FCB cache.')
vmsFileDirFCBAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirFCBAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileDirFCBAttempt.setDescription('Count of attempts on directory FCB cache.')
vmsFileDirDataHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirDataHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileDirDataHit.setDescription('Count of hits on directory data cache.')
vmsFileDirDataAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileDirDataAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileDirDataAttempt.setDescription('Count of attempts on directory data cache.')
vmsFileFileHdrHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileHdrHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileFileHdrHit.setDescription('Count of hits on file header cache.')
vmsFileFileHdrAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileHdrAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileFileHdrAttempt.setDescription('Count of attempts on file header cache.')
vmsFileFileIdHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileIdHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileFileIdHit.setDescription('Count of hits on file ID cache.')
vmsFileFileIdAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileFileIdAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileFileIdAttempt.setDescription('Count of attempts on file ID cache.')
vmsFileExtentHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileExtentHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileExtentHit.setDescription('Count of hits on extent cache.')
vmsFileExtentAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileExtentAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileExtentAttempt.setDescription('Count of attempts on extent cache.')
vmsFileQuotaHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileQuotaHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileQuotaHit.setDescription('Count of hits on quota cache.')
vmsFileQuotaAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileQuotaAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileQuotaAttempt.setDescription('Count of attempts on quota cache.')
vmsFileBitmapHit = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileBitmapHit.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileBitmapHit.setDescription('Count of hits on storage bitmap cache.')
vmsFileBitmapAttempt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFileBitmapAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFileBitmapAttempt.setDescription('Count of attempts on storage bitmap cache.')
vmsFcp = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 3))
vmsFcpUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpUpdateTime.setDescription('Time when FCP statistics were last updated. ')
vmsFcpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsFcpUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpUpdateInterval.setDescription('How often FCP statistics are to be gathered. A value of 0 disables gathering of File System statistics. This value is expressed in minutes. ')
vmsFcpFCPCall = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpFCPCall.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpFCPCall.setDescription('Count of QIO requests received by the file system.')
vmsFcpAllocation = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpAllocation.setDescription('Count of QIO requests that caused allocation of disk space.')
vmsFcpCreate = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpCreate.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpCreate.setDescription('Count of new files created.')
vmsFcpDiskRead = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpDiskRead.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpDiskRead.setDescription('Count of read I/O operations from the disk by the file system.')
vmsFcpDiskWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpDiskWrite.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpDiskWrite.setDescription('Count of write I/O operations to the disk by the file system.')
vmsFcpVolumeLockWait = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpVolumeLockWait.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpVolumeLockWait.setDescription('Number of times a wait state was entered by the XQP due to volume lock contention.')
vmsFcpCPUTick = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpCPUTick.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpCPUTick.setDescription('Count of clock ticks (10-millisecond units) of CPU time used by the file system.')
vmsFcpPageFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpPageFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpPageFault.setDescription('Count of page faults for the file system.')
vmsFcpWindowTurn = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpWindowTurn.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpWindowTurn.setDescription('Count of file-map window misses.')
vmsFcpLookup = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpLookup.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpLookup.setDescription('Count of file name lookup operations in file directories.')
vmsFcpOpen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpOpen.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpOpen.setDescription('Count of files opened.')
vmsFcpErase = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsFcpErase.setStatus('mandatory')
if mibBuilder.loadTexts: vmsFcpErase.setDescription('Count of erase I/O operations issued.')
vmsIo = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 4))
vmsIoUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoUpdateTime.setDescription('Time when I/O statistics were last updated.')
vmsIoUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsIoUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoUpdateInterval.setDescription('How often I/O statistics are to be gathered. A value of 0 disables gathering of I/O statistics. This value is expressed in minutes. ')
vmsIoDirectIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoDirectIO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoDirectIO.setDescription('Count of direct I/O operations.')
vmsIoBufferedIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoBufferedIO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoBufferedIO.setDescription('Count of buffered I/O operations.')
vmsIoMailboxWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoMailboxWrite.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoMailboxWrite.setDescription('Count of write-to-mailbox requests.')
vmsIoSplitTransfer = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoSplitTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoSplitTransfer.setDescription('Count of split transfers.')
vmsIoLogNameTranslation = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoLogNameTranslation.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoLogNameTranslation.setDescription('Count of logical name translations.')
vmsIoFileOpen = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoFileOpen.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoFileOpen.setDescription('Count of files opened .')
vmsIoPageFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoPageFault.setDescription('Count of page faults for all working sets .')
vmsIoPageRead = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageRead.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoPageRead.setDescription('Count of pages read from disk as a result of page faults.')
vmsIoPageReadIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageReadIO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoPageReadIO.setDescription('Count of read I/O operations from disk as a result of page faults.')
vmsIoPageWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageWrite.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoPageWrite.setDescription('Count of pages written to the page file.')
vmsIoPageWriteIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoPageWriteIO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoPageWriteIO.setDescription('Count of write I/O operations to the page file.')
vmsIoInswap = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoInswap.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoInswap.setDescription('Count of working sets read into memory from the swap file.')
vmsIoFreePageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoFreePageCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoFreePageCount.setDescription('Number of pages currently on free-page list.')
vmsIoModifiedPageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsIoModifiedPageCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsIoModifiedPageCount.setDescription('Number of pages currently on modified-page list.')
vmsPage = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 5))
vmsPageUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageUpdateTime.setDescription('Time when page statistics were last updated.')
vmsPageUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsPageUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageUpdateInterval.setDescription('How often Page statistics are to be gathered. A value of 0 disables gathering of Page statistics. This value is expressed in minutes. ')
vmsPageFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageFault.setDescription('Count of page faults for all working sets.')
vmsPageRead = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageRead.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageRead.setDescription('Count of pages read from disk as a result of page faults.')
vmsPageReadIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageReadIO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageReadIO.setDescription('Count of read I/Os as a result of operations from disk page faults.')
vmsPageWrite = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageWrite.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageWrite.setDescription('Count of pages written to the page file.')
vmsPageWriteIO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageWriteIO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageWriteIO.setDescription('Count of write I/O operations to the page file.')
vmsPageFreeListFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageFreeListFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageFreeListFault.setDescription('Count of pages read from the free list as a result of page faults.')
vmsPageModListFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageModListFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageModListFault.setDescription('Count of pages read from the modified list as a result of page faults.')
vmsPageDemandZeroFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageDemandZeroFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageDemandZeroFault.setDescription('Count of zero-filled pages allocated as a result of faults.')
vmsPageGlobalValidFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageGlobalValidFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageGlobalValidFault.setDescription('Count of page faults for which the reference page was found to be valid in the system global page tables.')
vmsPageWrtInProgressFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageWrtInProgressFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageWrtInProgressFault.setDescription('Count of pages read that were in the process of being written back to disk when faulted.')
vmsPageSystemFault = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageSystemFault.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageSystemFault.setDescription('Count of page faults for which the referenced page is in system space.')
vmsPageFreePageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageFreePageCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageFreePageCount.setDescription('Number of pages currently on free-page list.')
vmsPageModifiedPageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsPageModifiedPageCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsPageModifiedPageCount.setDescription('Number of pages currently on modified-page.')
vmsDecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 6))
vmsDecnetUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetUpdateTime.setDescription('Time when DECnet statistics were last gathered.')
vmsDecnetUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsDecnetUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetUpdateInterval.setDescription('How often DECnet statistics are to be gathered. A value of 0 disables gathering of DECnet statistics. This value is expressed in minutes. ')
vmsDecnetArriveLocalPkt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetArriveLocalPkt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetArriveLocalPkt.setDescription('Count of arriving local packets.')
vmsDecnetDepartLocalPkt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetDepartLocalPkt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetDepartLocalPkt.setDescription('Count of departing local packets.')
vmsDecnetArriveTransPkt = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetArriveTransPkt.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetArriveTransPkt.setDescription('Count of arriving transit packets.')
vmsDecnetTransCongestLoss = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetTransCongestLoss.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetTransCongestLoss.setDescription('Count of packets lost because of transit congestion.')
vmsDecnetReceiveBufFail = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDecnetReceiveBufFail.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDecnetReceiveBufFail.setDescription('Count of receiver buffer failures .')
vmsStates = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 7))
vmsStatesUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesUpdateTime.setDescription('Time when Process State data was last updated.')
vmsStatesUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsStatesUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesUpdateInterval.setDescription('How often Process State data are to be gathered. A value of 0 disables gathering of Process State statistics. This value is expressed in minutes. ')
vmsStatesCOLPG = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCOLPG.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesCOLPG.setDescription('Number of processes in Collided Page Wait State (COLPG).')
vmsStatesMWAIT = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesMWAIT.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesMWAIT.setDescription('Number of processes in Miscellaneous Resource Wait State (MWAIT).')
vmsStatesCEF = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCEF.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesCEF.setDescription('Number of processes in Common Event Flag Wait State (CEF).')
vmsStatesPFW = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesPFW.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesPFW.setDescription('Number of processes in Page Fault Wait State (PFW).')
vmsStatesLEF = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesLEF.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesLEF.setDescription('Number of processes in Local Event Flag Wait State (LEF).')
vmsStatesLEFO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesLEFO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesLEFO.setDescription('Number of Outswapped processes in Local Event Flag Wait State (LEFO).')
vmsStatesHIB = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesHIB.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesHIB.setDescription('Number of processes in Hibernate State (HIB).')
vmsStatesHIBO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesHIBO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesHIBO.setDescription('Number of Outswapped processes in Hibernate State (HIBO).')
vmsStatesSUSP = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesSUSP.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesSUSP.setDescription('Number of processes in Suspended State (SUSP).')
vmsStatesSUSPO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesSUSPO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesSUSPO.setDescription('Number of Outswapped processes in Suspended State (SUSPO).')
vmsStatesFPG = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesFPG.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesFPG.setDescription('Number of processes in Free Page Wait State (FPG).')
vmsStatesCOM = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCOM.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesCOM.setDescription('Number of processes in Compute State (COM).')
vmsStatesCOMO = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCOMO.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesCOMO.setDescription('Number of Outswapped processes in Compute State (COMO).')
vmsStatesCUR = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 7, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsStatesCUR.setStatus('mandatory')
if mibBuilder.loadTexts: vmsStatesCUR.setDescription('Number of current processes (CUR).')
vmsCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 8))
vmsClusterUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterUpdateTime.setDescription('Time when cluster statistics were last updated. ')
vmsClusterUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsClusterUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterUpdateInterval.setDescription('How often cluster statistics are to be gathered. A value of 0 disables gathering of cluster statistics. This value is expressed in minutes. ')
vmsClusterCpuBusy = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterCpuBusy.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterCpuBusy.setDescription('Count of clock ticks (10-millisecond units) spent in all CPU modes since system was booted.')
vmsClusterFreeListSize = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterFreeListSize.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterFreeListSize.setDescription('Number of pages currently on the free list.')
vmsClusterTotalLocks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterTotalLocks.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterTotalLocks.setDescription('Total of all incoming, outgoing, and local ENQs, DEQs, and conversions.')
vmsClusterNewEnqLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterNewEnqLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterNewEnqLocal.setDescription('Count of new lock requests that originate and are performed on the system.')
vmsClusterNewEnqIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterNewEnqIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterNewEnqIncoming.setDescription('Count of new lock requests that originate on other systems and are performed on this system (incoming).')
vmsClusterNewEnqOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterNewEnqOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterNewEnqOutgoing.setDescription('Count of new lock requests that originate on this system and are performed on other systems (outgoing).')
vmsClusterEnqConversionsLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterEnqConversionsLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterEnqConversionsLocal.setDescription('Count of lock conversion requests (local).')
vmsClusterEnqConversionsIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterEnqConversionsIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterEnqConversionsIncoming.setDescription('Count of lock conversion requests (incoming).')
vmsClusterEnqConversionsOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterEnqConversionsOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterEnqConversionsOutgoing.setDescription('Count of lock conversion requests (outgoing).')
vmsClusterDeqLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterDeqLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterDeqLocal.setDescription('Count of unlock requests (local).')
vmsClusterDeqIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterDeqIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterDeqIncoming.setDescription('Count of unlock requests (incoming).')
vmsClusterDeqOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 8, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsClusterDeqOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsClusterDeqOutgoing.setDescription('Count of unlock requests (outgoing).')
vmsMscp = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 9))
vmsMscpUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpUpdateTime.setDescription('Time when MSCP Server statistics were last updated. ')
vmsMscpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsMscpUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpUpdateInterval.setDescription('How often MSCP Server statistics are to be gathered. A value of 0 disables gathering of mscp statistics. This value is expressed in minutes. ')
vmsMscpRequests = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpRequests.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpRequests.setDescription('Count of requests for I/O transfers by remote processors.')
vmsMscpReads = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpReads.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpReads.setDescription('Count of requests for Read I/O transfers by remote processors.')
vmsMscpWrites = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpWrites.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpWrites.setDescription('Count of requests for Write I/O transfers by remote processors.')
vmsMscpFragments = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpFragments.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpFragments.setDescription('Count of extra fragments issued by the server.')
vmsMscpSplits = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpSplits.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpSplits.setDescription('Count of fragmented requests issued by the server.')
vmsMscpBufferWaits = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscpBufferWaits.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscpBufferWaits.setDescription('Count of requests that had to wait for MSCP buffer memory.')
vmsMscp1BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp1BlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp1BlockIOs.setDescription('Count of I/O requests with a length of one block.')
vmsMscp2_3BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 10), Counter32()).setLabel("vmsMscp2-3BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp2_3BlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp2_3BlockIOs.setDescription('Count of I/O requests with a length of 2 to 3 blocks.')
vmsMscp4_7BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 11), Counter32()).setLabel("vmsMscp4-7BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp4_7BlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp4_7BlockIOs.setDescription('Count of I/O requests with a length of 4 to 7 blocks.')
vmsMscp8_15BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 12), Counter32()).setLabel("vmsMscp8-15BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp8_15BlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp8_15BlockIOs.setDescription('Count of I/O requests with a length of 8 to 15 blocks.')
vmsMscp16_31BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 13), Counter32()).setLabel("vmsMscp16-31BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp16_31BlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp16_31BlockIOs.setDescription('Count of I/O requests with a length of 16 to 31 blocks.')
vmsMscp32_63BlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 14), Counter32()).setLabel("vmsMscp32-63BlockIOs").setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp32_63BlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp32_63BlockIOs.setDescription('Count of I/O requests with a length of 32 to 63 blocks.')
vmsMscp64andOverBlockIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsMscp64andOverBlockIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsMscp64andOverBlockIOs.setDescription('Count of I/O requests with a length equal to or greater than 64 blocks.')
vmsLock = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 10))
vmsLockUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockUpdateTime.setDescription('Time when Lock statistics were last updated. ')
vmsLockUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsLockUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockUpdateInterval.setDescription('How often Lock statistics are to be gathered. A value of 0 disables gathering of lock statistics. This value is expressed in minutes. ')
vmsLockNewEnqs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockNewEnqs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockNewEnqs.setDescription('Count of new ENQ (lock) requests.')
vmsLockConvertedEnqs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockConvertedEnqs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockConvertedEnqs.setDescription('Count of converted ENQ (lock) requests.')
vmsLockDeqs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockDeqs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockDeqs.setDescription('Count of DEQ (unlock) requests.')
vmsLockBlockingASTs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockBlockingASTs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockBlockingASTs.setDescription('Count of blocking ASTs queued.')
vmsLockEnqWaits = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockEnqWaits.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockEnqWaits.setDescription('Count of times a lock could not be granted immediately and waited.')
vmsLockEnqsNotQueued = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockEnqsNotQueued.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockEnqsNotQueued.setDescription('Count of times a lock could not be granted immediately and got an error status instead of waiting.')
vmsLockDeadlockSearches = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockDeadlockSearches.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockDeadlockSearches.setDescription('Count of times that a deadlock search was performed.')
vmsLockDeadlocksFound = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockDeadlocksFound.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockDeadlocksFound.setDescription('Count of times that a deadlock was found.')
vmsLockCurrentLocks = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockCurrentLocks.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockCurrentLocks.setDescription('Number of locks currently in the system.')
vmsLockCurrentResources = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsLockCurrentResources.setStatus('mandatory')
if mibBuilder.loadTexts: vmsLockCurrentResources.setDescription('Number of resources currently in the system.')
vmsDlock = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 11))
vmsDlockUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockUpdateTime.setDescription('Time when Distributed Lock statistics were last updated. ')
vmsDlockUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsDlockUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockUpdateInterval.setDescription('How often Lock statistics are to be gathered. A value of 0 disables gathering of dlock statistics. This value is expressed in minutes. ')
vmsDlockNewLocksLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockNewLocksLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockNewLocksLocal.setDescription('Count of new lock requests that originate and are performed on this system (local).')
vmsDlockNewLocksIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockNewLocksIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockNewLocksIncoming.setDescription('Count of new lock requests originating on another system and performed on this system (incoming).')
vmsDlockNewLocksOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockNewLocksOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockNewLocksOutgoing.setDescription('Count of new lock requests originating on this system and performed on another system (outgoing).')
vmsDlockLockConversionsLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockLockConversionsLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockLockConversionsLocal.setDescription('Count of lock conversion requests (local).')
vmsDlockLockConversionsIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockLockConversionsIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockLockConversionsIncoming.setDescription('Count of lock conversion requests (incoming).')
vmsDlockLockConversionsOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockLockConversionsOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockLockConversionsOutgoing.setDescription('Count of lock conversion requests (outgoing).')
vmsDlockUnlocksLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUnlocksLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockUnlocksLocal.setDescription('Count of unlock requests (local).')
vmsDlockUnlocksIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUnlocksIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockUnlocksIncoming.setDescription('Count of unlock requests (incoming).')
vmsDlockUnlocksOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockUnlocksOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockUnlocksOutgoing.setDescription('Count of unlock requests (outgoing).')
vmsDlockBlockingASTsLocal = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockBlockingASTsLocal.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockBlockingASTsLocal.setDescription('Count of lock manager blocking ASTs (local).')
vmsDlockBlockingASTsIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockBlockingASTsIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockBlockingASTsIncoming.setDescription('Count of lock manager blocking ASTs (incoming).')
vmsDlockBlockingASTsOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockBlockingASTsOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockBlockingASTsOutgoing.setDescription('Count of lock manager blocking ASTs (outgoing).')
vmsDlockDirFuncIncoming = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockDirFuncIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockDirFuncIncoming.setDescription('Count of directory functions (incoming).')
vmsDlockDirFuncOutgoing = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockDirFuncOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockDirFuncOutgoing.setDescription('Count of directory functions (outgoing).')
vmsDlockDeadlockMessage = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsDlockDeadlockMessage.setStatus('mandatory')
if mibBuilder.loadTexts: vmsDlockDeadlockMessage.setDescription('Count of incoming and outgoing lock manager messages required for deadlock detection.')
vmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 597, 4, 15, 12))
vmsSystemUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemUpdateTime.setDescription('Time when system statistics were last updated. ')
vmsSystemUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 2), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmsSystemUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemUpdateInterval.setDescription('How often system statistics are to be gathered. A value of 0 disables gathering of system statistics. This value is expressed in minutes. ')
vmsSystemCpuBusy = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemCpuBusy.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemCpuBusy.setDescription('Count of clock ticks (10-millisecond units) spent in all CPU modes since system was booted.')
vmsSystemOtherStates = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemOtherStates.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemOtherStates.setDescription('Number of processes in states other than LEF, LEFO, HIB, HIBO, COM, COMO, PFW, and MWAIT.')
vmsSystemProcessCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemProcessCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemProcessCount.setDescription('Number of processes in the system.')
vmsSystemPageFaults = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemPageFaults.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemPageFaults.setDescription('Count of page faults for all working sets.')
vmsSystemReadIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemReadIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemReadIOs.setDescription('Count of read I/Os resulting from disk page faults.')
vmsSystemFreePageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemFreePageCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemFreePageCount.setDescription('Number of pages currently on free-page list.')
vmsSystemModifiedPageCount = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemModifiedPageCount.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemModifiedPageCount.setDescription('Number of pages currently on modified-page list.')
vmsSystemDirectIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemDirectIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemDirectIOs.setDescription('Count of direct I/O operations.')
vmsSystemBufferedIOs = MibScalar((1, 3, 6, 1, 4, 1, 597, 4, 15, 12, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmsSystemBufferedIOs.setStatus('mandatory')
if mibBuilder.loadTexts: vmsSystemBufferedIOs.setDescription('Count of buffered I/O operations.')
mibBuilder.exportSymbols("COMTEK-VMS-NM-SYSMGR-MIB", sQEntryNum=sQEntryNum, sCfgOpcomOper9=sCfgOpcomOper9, sDskTbl=sDskTbl, sCfgOpcomOper2=sCfgOpcomOper2, sCfgHwErrTimer=sCfgHwErrTimer, sDskTrapBlocks=sDskTrapBlocks, sCfgTrapTblSize=sCfgTrapTblSize, sCfgOpcomOper1=sCfgOpcomOper1, sDskTrapOpSec=sDskTrapOpSec, sPsPriority=sPsPriority, sCfgSwpLimit=sCfgSwpLimit, vmsLockEnqsNotQueued=vmsLockEnqsNotQueued, sQManIndex=sQManIndex, vmsModeCompat=vmsModeCompat, sKernelOne=sKernelOne, vmsMscp64andOverBlockIOs=vmsMscp64andOverBlockIOs, sQueBatch=sQueBatch, sSuprOne=sSuprOne, vmsModeTable=vmsModeTable, sCfgLocalDisksOnly=sCfgLocalDisksOnly, sDsk=sDsk, sSwErrInfo=sSwErrInfo, sQueSymbiont=sQueSymbiont, sCfgOpcomLicense=sCfgOpcomLicense, sPsCOMOQueue=sPsCOMOQueue, sQTblEntry=sQTblEntry, sCfgTimeout=sCfgTimeout, sCfgOpcomOper4=sCfgOpcomOper4, sCfgOpcomOper8=sCfgOpcomOper8, vmsPageFreeListFault=vmsPageFreeListFault, vmsFcpErase=vmsFcpErase, sCfgMemLimit=sCfgMemLimit, vmsModeMPSync=vmsModeMPSync, sQueServer=sQueServer, sQueGenericTimed=sQueGenericTimed, sCfgTraps=sCfgTraps, vmsFileQuotaHit=vmsFileQuotaHit, sHwErrDeviceName=sHwErrDeviceName, sSyiAvailCpuCnt=sSyiAvailCpuCnt, vmsSystemProcessCount=vmsSystemProcessCount, sCfgFile=sCfgFile, sOpcomThree=sOpcomThree, sShdCopy=sShdCopy, sHwErrCnt=sHwErrCnt, sDskTblTime=sDskTblTime, sQTbl=sQTbl, sQueGenericExecuting=sQueGenericExecuting, sHwErrDeviceCnt=sHwErrDeviceCnt, sSyiTime=sSyiTime, sQIndex=sQIndex, sIntrFifteen=sIntrFifteen, sCpuLoadOneMinute=sCpuLoadOneMinute, sCompFive=sCompFive, sCritTbl=sCritTbl, sOpcomReplyId=sOpcomReplyId, sPsNetwork=sPsNetwork, vmsClusterDeqIncoming=vmsClusterDeqIncoming, vmsPageRead=vmsPageRead, sSyiCpuPgSize=sSyiCpuPgSize, vmsSystemDirectIOs=vmsSystemDirectIOs, vmsIoPageWriteIO=vmsIoPageWriteIO, vmsPageWrtInProgressFault=vmsPageWrtInProgressFault, sDskOpCnt=sDskOpCnt, vmsDlockDirFuncIncoming=vmsDlockDirFuncIncoming, vmsPageSystemFault=vmsPageSystemFault, sCpuTicks=sCpuTicks, sPsPgFaults=sPsPgFaults, sCfgPsTimer=sCfgPsTimer, sCfgOpcomDisks=sCfgOpcomDisks, sQEntryJobStatus=sQEntryJobStatus, sQueSymbiontTimed=sQueSymbiontTimed, sSwErrLastTime=sSwErrLastTime, vmsFcp=vmsFcp, sIntrFive=sIntrFive, sQuePrinterTimed=sQuePrinterTimed, vmsMscp2_3BlockIOs=vmsMscp2_3BlockIOs, vmsIoSplitTransfer=vmsIoSplitTransfer, vmsMscpBufferWaits=vmsMscpBufferWaits, sQueSymbiontExecuting=sQueSymbiontExecuting, sOpcomReplySend=sOpcomReplySend, vmsModeUpdateTime=vmsModeUpdateTime, sSpinFifteen=sSpinFifteen, vmsDecnetArriveLocalPkt=vmsDecnetArriveLocalPkt, sSyiVersion=sSyiVersion, sDskDevChar=sDskDevChar, vmsFileFileHdrAttempt=vmsFileFileHdrAttempt, vmsFcpVolumeLockWait=vmsFcpVolumeLockWait, vmsIoDirectIO=vmsIoDirectIO, vmsTotalSuper=vmsTotalSuper, sOpcomTwo=sOpcomTwo, sCfgOpcomFilter=sCfgOpcomFilter, sPsRWState=sPsRWState, sPsPID=sPsPID, sCfgCritFile=sCfgCritFile, vmsSystemUpdateInterval=vmsSystemUpdateInterval, sCfgUpTime=sCfgUpTime, sTrapInfo=sTrapInfo, vmsSystemBufferedIOs=vmsSystemBufferedIOs, sQuePrinterHolding=sQuePrinterHolding, sPsEntry=sPsEntry, sQuePrinterRetained=sQuePrinterRetained, sPsDirectIO=sPsDirectIO, vmsClusterUpdateInterval=vmsClusterUpdateInterval, sCfgControlTermProc=sCfgControlTermProc, sShdEntry=sShdEntry, sSyiActiveCpuCnt=sSyiActiveCpuCnt, vmsSystemCpuBusy=vmsSystemCpuBusy, sCfgOpcomOper7=sCfgOpcomOper7, sCpuPercentUsed=sCpuPercentUsed, sQMan=sQMan, sDskName=sDskName, vmsModeSuper=vmsModeSuper, vmsMscp16_31BlockIOs=vmsMscp16_31BlockIOs, sCfgHwErrTraps=sCfgHwErrTraps, sDskQueueLength=sDskQueueLength, sQueSymbiontRetained=sQueSymbiontRetained, vmsMscpFragments=vmsMscpFragments, sUserFifteen=sUserFifteen, sQuePrinterExecuting=sQuePrinterExecuting, sQStatus=sQStatus, sKernelFifteen=sKernelFifteen, sHwErrInfo=sHwErrInfo, vmsIo=vmsIo, vmsDecnet=vmsDecnet, vmsPageReadIO=vmsPageReadIO, sQueServerHolding=sQueServerHolding, sUserOne=sUserOne, sQManTblEntry=sQManTblEntry, sSwErrLineNum=sSwErrLineNum, sSwErrFile=sSwErrFile, sDskTblCnt=sDskTblCnt, sQName=sQName, vmsFileQuotaAttempt=vmsFileQuotaAttempt, vmsDlockLockConversionsLocal=vmsDlockLockConversionsLocal, vmsLockNewEnqs=vmsLockNewEnqs, sQue=sQue, vmsDlockNewLocksLocal=vmsDlockNewLocksLocal, sCfgPgLimit=sCfgPgLimit, sCfgMaxTrapSec=sCfgMaxTrapSec, vmsDecnetTransCongestLoss=vmsDecnetTransCongestLoss, sSuprFifteen=sSuprFifteen, sResources=sResources, vmsTotalInter=vmsTotalInter, vmsLockConvertedEnqs=vmsLockConvertedEnqs, vmsStatesUpdateTime=vmsStatesUpdateTime, sQueTerminal=sQueTerminal, sCfgDskOps=sCfgDskOps, vmsMscp8_15BlockIOs=vmsMscp8_15BlockIOs, vmsDlockLockConversionsOutgoing=vmsDlockLockConversionsOutgoing, vmsFileUpdateInterval=vmsFileUpdateInterval, sExecFive=sExecFive, vmsIoModifiedPageCount=vmsIoModifiedPageCount, sDskTrapPercent=sDskTrapPercent, vmsPageGlobalValidFault=vmsPageGlobalValidFault, sQueCnt=sQueCnt, sDskRefCnt=sDskRefCnt, vmsFileFileIdHit=vmsFileFileIdHit, vmsDecnetUpdateInterval=vmsDecnetUpdateInterval, vmsFcpOpen=vmsFcpOpen, sDskFreeBlocks=sDskFreeBlocks, sPsImageName=sPsImageName, vmsSystemModifiedPageCount=vmsSystemModifiedPageCount, vmsFcpWindowTurn=vmsFcpWindowTurn, sDskTransCnt=sDskTransCnt, vmsModes=vmsModes, comtekVmsNMVmsMonMib=comtekVmsNMVmsMonMib, vmsPageDemandZeroFault=vmsPageDemandZeroFault, sCfgOpcomCards=sCfgOpcomCards, sCfgOpcomOper10=sCfgOpcomOper10, vmsPageUpdateTime=vmsPageUpdateTime, sShdMerge=sShdMerge, sCfgOpcomOper3=sCfgOpcomOper3, sSyiMemUsed=sSyiMemUsed, sCfgQueTimer=sCfgQueTimer, sCfgOpcomDevices=sCfgOpcomDevices, sTrapLostCount=sTrapLostCount, vmsCluster=vmsCluster, sNullFive=sNullFive, sTrapTime=sTrapTime, vmsFcpDiskWrite=vmsFcpDiskWrite, vmsFcpCreate=vmsFcpCreate, vmsPageFault=vmsPageFault, sIntPercentUsed=sIntPercentUsed, sCritCnt=sCritCnt, vmsIoFreePageCount=vmsIoFreePageCount, sCfgDskMinFreeBlks=sCfgDskMinFreeBlks, sSyiPgFree=sSyiPgFree, sCompOne=sCompOne, sCfgIntLimit=sCfgIntLimit, sPsLoginTime=sPsLoginTime, vmsSystemOtherStates=vmsSystemOtherStates, vmsTotalKernel=vmsTotalKernel, sSwErrMessage=sSwErrMessage, vmsFileDirDataHit=vmsFileDirDataHit, vmsFileBitmapHit=vmsFileBitmapHit, sSuprFive=sSuprFive, sQueBatchExecuting=sQueBatchExecuting, sHwErrLastTime=sHwErrLastTime, vmsIoPageReadIO=vmsIoPageReadIO, sCompFifteen=sCompFifteen, sCfgCritDisksOnly=sCfgCritDisksOnly, sKernelFive=sKernelFive, sCfgOpcomCluster=sCfgOpcomCluster, sQEntryJobname=sQEntryJobname, sCritTime=sCritTime, sExecOne=sExecOne, sSyiMemSize=sSyiMemSize, sQueBatchPending=sQueBatchPending, sQuePrinter=sQuePrinter, sPsUsername=sPsUsername, vmsClusterFreeListSize=vmsClusterFreeListSize, sCfgOpcomSecurity=sCfgOpcomSecurity, sQueBatchTimed=sQueBatchTimed, sCfgOpcomTapes=sCfgOpcomTapes, vmsFcpAllocation=vmsFcpAllocation, vmsStatesUpdateInterval=vmsStatesUpdateInterval, vmsStatesPFW=vmsStatesPFW, sCfgDskTimer=sCfgDskTimer, sShdTbl=sShdTbl, vmsTotalExec=vmsTotalExec, vmsSystem=vmsSystem, sCfgCritTimer=sCfgCritTimer, vmsDlockNewLocksIncoming=vmsDlockNewLocksIncoming, vmsStatesCEF=vmsStatesCEF, sCfgHostName=sCfgHostName, sHwErrEntry=sHwErrEntry, sQEntryCount=sQEntryCount, sQueGeneric=sQueGeneric, sCfgOpcomNetwork=sCfgOpcomNetwork, sCfgOpcomOper11=sCfgOpcomOper11, vmsStates=vmsStates, sProcesses=sProcesses, vmsLockCurrentResources=vmsLockCurrentResources, vmsMscpReads=vmsMscpReads, sCfgCritDsk=sCfgCritDsk, vmsClusterCpuBusy=vmsClusterCpuBusy, vmsDecnetUpdateTime=vmsDecnetUpdateTime, sOpcomReplyText=sOpcomReplyText, vmsModeUpdateInterval=vmsModeUpdateInterval, vmsModeUser=vmsModeUser, sProcInfo=sProcInfo, sHwErrTbl=sHwErrTbl, sCfgCpuLimit=sCfgCpuLimit, vmsClusterEnqConversionsLocal=vmsClusterEnqConversionsLocal, sQuePrinterPending=sQuePrinterPending, sSpinFive=sSpinFive, vmsMscp=vmsMscp, sQueBatchHolding=sQueBatchHolding, sDskUsedPercent=sDskUsedPercent, sShdFail=sShdFail, vmsFileUpdateTime=vmsFileUpdateTime, vmsSystemReadIOs=vmsSystemReadIOs, vmsLockDeadlockSearches=vmsLockDeadlockSearches, sCritEntry=sCritEntry)
mibBuilder.exportSymbols("COMTEK-VMS-NM-SYSMGR-MIB", vmsTotalUser=vmsTotalUser, vmsMscpWrites=vmsMscpWrites, sSyiPgSize=sSyiPgSize, vmsMscpUpdateInterval=vmsMscpUpdateInterval, sPsState=sPsState, comtek=comtek, vmsDlockBlockingASTsOutgoing=vmsDlockBlockingASTsOutgoing, vmsDlockNewLocksOutgoing=vmsDlockNewLocksOutgoing, vmsFileDirFCBHit=vmsFileDirFCBHit, vmsMscp4_7BlockIOs=vmsMscp4_7BlockIOs, vmsStatesCOM=vmsStatesCOM, sIntrOne=sIntrOne, vmsPage=vmsPage, sCritIndex=sCritIndex, sErrInfo=sErrInfo, vmsClusterEnqConversionsIncoming=vmsClusterEnqConversionsIncoming, sCfgCOMQueueLimit=sCfgCOMQueueLimit, vmsStatesCOLPG=vmsStatesCOLPG, vmsModeIdle=vmsModeIdle, sHwErrTime=sHwErrTime, vmsPageFreePageCount=vmsPageFreePageCount, sSyiNodeName=sSyiNodeName, sShdName=sShdName, sPsCnt=sPsCnt, sNullFifteen=sNullFifteen, sDskStatus=sDskStatus, vmsFileFileHdrHit=vmsFileFileHdrHit, vmsIoPageRead=vmsIoPageRead, sQManCount=sQManCount, vmsIoMailboxWrite=vmsIoMailboxWrite, vmsLockUpdateInterval=vmsLockUpdateInterval, vmsDlockDirFuncOutgoing=vmsDlockDirFuncOutgoing, vmsModeKernel=vmsModeKernel, vmsDecnetDepartLocalPkt=vmsDecnetDepartLocalPkt, vmsFcpPageFault=vmsFcpPageFault, vmsLockEnqWaits=vmsLockEnqWaits, sShd=sShd, sOpcomSix=sOpcomSix, sCfgLogFile=sCfgLogFile, sCpuLoadFifteenMinute=sCpuLoadFifteenMinute, sQueTerminalRetained=sQueTerminalRetained, vmsModeCpuId=vmsModeCpuId, sExecFifteen=sExecFifteen, vmsPageWrite=vmsPageWrite, sDskLogVolName=sDskLogVolName, sHwErrIndex=sHwErrIndex, sCpuLoadFiveMinute=sCpuLoadFiveMinute, sQMonitor=sQMonitor, vmsStatesSUSP=vmsStatesSUSP, vmsIoBufferedIO=vmsIoBufferedIO, vmsClusterDeqOutgoing=vmsClusterDeqOutgoing, vmsFileBitmapAttempt=vmsFileBitmapAttempt, sQueServerTimed=sQueServerTimed, sPsBatch=sPsBatch, vmsDlockBlockingASTsLocal=vmsDlockBlockingASTsLocal, sQManTbl=sQManTbl, vmsDlockDeadlockMessage=vmsDlockDeadlockMessage, vmsDecnetArriveTransPkt=vmsDecnetArriveTransPkt, sDskMaxBlocks=sDskMaxBlocks, sQueServerExecuting=sQueServerExecuting, vmsIoLogNameTranslation=vmsIoLogNameTranslation, vmsMscpUpdateTime=vmsMscpUpdateTime, vmsTotalModes=vmsTotalModes, vmsStatesMWAIT=vmsStatesMWAIT, vmsDlockUpdateTime=vmsDlockUpdateTime, vmsDlockUnlocksOutgoing=vmsDlockUnlocksOutgoing, sCfg=sCfg, sCpu=sCpu, vmsClusterNewEnqOutgoing=vmsClusterNewEnqOutgoing, sCfgDskLimit=sCfgDskLimit, sTrapResendSeqNum=sTrapResendSeqNum, vmsFileExtentHit=vmsFileExtentHit, sCfgVersion=sCfgVersion, sCfgDskAlarm=sCfgDskAlarm, sQueGenericPending=sQueGenericPending, sQueSymbiontPending=sQueSymbiontPending, sSyiMemFreePg=sSyiMemFreePg, sPsPgTblCnt=sPsPgTblCnt, vmsPageUpdateInterval=vmsPageUpdateInterval, vmsModeCpuCount=vmsModeCpuCount, vmsFcpLookup=vmsFcpLookup, sPsCOMQueue=sPsCOMQueue, sQManName=sQManName, vmsClusterNewEnqLocal=vmsClusterNewEnqLocal, sDskShdCount=sDskShdCount, sPsTime=sPsTime, vmsClusterNewEnqIncoming=vmsClusterNewEnqIncoming, sShdIndex=sShdIndex, vmsFcpUpdateInterval=vmsFcpUpdateInterval, sSyiBootTime=sSyiBootTime, vmsLockCurrentLocks=vmsLockCurrentLocks, sOpcomFour=sOpcomFour, sPsProcName=sPsProcName, sSyiSwpUsedPercent=sSyiSwpUsedPercent, vmsLockDeqs=vmsLockDeqs, vmsDlockBlockingASTsIncoming=vmsDlockBlockingASTsIncoming, sQManStatus=sQManStatus, sQueTerminalPending=sQueTerminalPending, sOpcomOne=sOpcomOne, vmsStatesLEFO=vmsStatesLEFO, sNullOne=sNullOne, sCfgTermProc=sCfgTermProc, vmsMscp1BlockIOs=vmsMscp1BlockIOs, vmsModeTableEntry=vmsModeTableEntry, vmsClusterTotalLocks=vmsClusterTotalLocks, sSyi=sSyi, vmsIoFileOpen=vmsIoFileOpen, vmsLockUpdateTime=vmsLockUpdateTime, sSyiPgUsedPercent=sSyiPgUsedPercent, sQueTerminalHolding=sQueTerminalHolding, sTrapLastSeqNumSent=sTrapLastSeqNumSent, vmsStatesHIB=vmsStatesHIB, sOpcomSeven=sOpcomSeven, vmsSystemFreePageCount=vmsSystemFreePageCount, vmsFcpFCPCall=vmsFcpFCPCall, vmsTotalIdle=vmsTotalIdle, vmsModeInter=vmsModeInter, sSpinOne=sSpinOne, vmsFcpUpdateTime=vmsFcpUpdateTime, sDskMediaName=sDskMediaName, sCfgOpcomPrinter=sCfgOpcomPrinter, vmsTotalComp=vmsTotalComp, sCritName=sCritName, vmsDlockUnlocksLocal=vmsDlockUnlocksLocal, vmsLockBlockingASTs=vmsLockBlockingASTs, vmsTotalMPSync=vmsTotalMPSync, sQueGenericHolding=sQueGenericHolding, vmsDlockUpdateInterval=vmsDlockUpdateInterval, sCfgOpcomOper12=sCfgOpcomOper12, vmsDecnetReceiveBufFail=vmsDecnetReceiveBufFail, sQEntryTbl=sQEntryTbl, sCfgCritQue=sCfgCritQue, vmsPageWriteIO=vmsPageWriteIO, vmsStatesSUSPO=vmsStatesSUSPO, vmsIoUpdateTime=vmsIoUpdateTime, vmsFileFileIdAttempt=vmsFileFileIdAttempt, vmsStatesCUR=vmsStatesCUR, sPsPhysTerm=sPsPhysTerm, sCfgOpcomCentral=sCfgOpcomCentral, vmsDlockUnlocksIncoming=vmsDlockUnlocksIncoming, sCfgSysInfoTimer=sCfgSysInfoTimer, sDskRemote=sDskRemote, sDskEntry=sDskEntry, sPsTbl=sPsTbl, vmsFcpCPUTick=vmsFcpCPUTick, vmsIoPageFault=vmsIoPageFault, sQueGenericRetained=sQueGenericRetained, vmsPageModifiedPageCount=vmsPageModifiedPageCount, sSyiSwpFree=sSyiSwpFree, vmsSystemUpdateTime=vmsSystemUpdateTime, sQueTime=sQueTime, sCfgCOMOQueueLimit=sCfgCOMOQueueLimit, vmsLockDeadlocksFound=vmsLockDeadlocksFound, vmsDlock=vmsDlock, sDskMountCnt=sDskMountCnt, vmsClusterEnqConversionsOutgoing=vmsClusterEnqConversionsOutgoing, sCfgOpcomOper5=sCfgOpcomOper5, sPsInteractive=sPsInteractive, vmsFileDirFCBAttempt=vmsFileDirFCBAttempt, sCfgCritAlarm=sCfgCritAlarm, sSyiSwpSize=sSyiSwpSize, vmsFcpDiskRead=vmsFcpDiskRead, sQueServerRetained=sQueServerRetained, sQEntry=sQEntry, sCfgAllPsData=sCfgAllPsData, sQueTerminalTimed=sQueTerminalTimed, comtekVms=comtekVms, sQueBatchRetained=sQueBatchRetained, vmsClusterUpdateTime=vmsClusterUpdateTime, sUserFive=sUserFive, vmsStatesLEF=vmsStatesLEF, vmsFileDirDataAttempt=vmsFileDirDataAttempt, vmsPageModListFault=vmsPageModListFault, comtekVmsNMSysMgrMib=comtekVmsNMSysMgrMib, sQueServerPending=sQueServerPending, sOpcomReplyStatus=sOpcomReplyStatus, vmsFile=vmsFile, sSyiHwName=sSyiHwName, sCfgReinitSubagent=sCfgReinitSubagent, sCfgOpcomOper6=sCfgOpcomOper6, vmsClusterDeqLocal=vmsClusterDeqLocal, vmsMscpRequests=vmsMscpRequests, sQueTerminalExecuting=sQueTerminalExecuting, sPsAvailProcSlots=sPsAvailProcSlots, sSwErrStatus=sSwErrStatus, sCritInfo=sCritInfo, sCritReqCnt=sCritReqCnt, sOpcomFive=sOpcomFive, sPsCpuTime=sPsCpuTime, vmsSystemPageFaults=vmsSystemPageFaults, sPsOther=sPsOther, sPsWorkSetSize=sPsWorkSetSize, vmsStatesHIBO=vmsStatesHIBO, sPsMode=sPsMode, vmsIoPageWrite=vmsIoPageWrite, vmsMscp32_63BlockIOs=vmsMscp32_63BlockIOs, sTrapNextSeqNum=sTrapNextSeqNum, vmsMscpSplits=vmsMscpSplits, sDskOps=sDskOps, vmsLock=vmsLock, vmsStatesFPG=vmsStatesFPG, sDskIndex=sDskIndex, vmsFileExtentAttempt=vmsFileExtentAttempt, sCritCurCnt=sCritCurCnt, vmsIoInswap=vmsIoInswap, vmsDlockLockConversionsIncoming=vmsDlockLockConversionsIncoming, vmsStatesCOMO=vmsStatesCOMO, sQueSymbiontHolding=sQueSymbiontHolding, vmsModeExec=vmsModeExec, vmsIoUpdateInterval=vmsIoUpdateInterval)
