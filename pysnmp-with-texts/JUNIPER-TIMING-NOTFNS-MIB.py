#
# PySNMP MIB module JUNIPER-TIMING-NOTFNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-TIMING-NOTFNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, ifOperStatus = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifOperStatus")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
jnxTimingNotfnsMIBRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxTimingNotfnsMIBRoot")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, Gauge32, Counter64, TimeTicks, IpAddress, ModuleIdentity, Integer32, NotificationType, Counter32, Bits, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "Gauge32", "Counter64", "TimeTicks", "IpAddress", "ModuleIdentity", "Integer32", "NotificationType", "Counter32", "Bits", "MibIdentifier", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxTimingNotfnsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1))
jnxTimingNotfnsMIB.setRevisions(('2015-10-14 00:00', '2013-03-15 15:41',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setRevisionsDescriptions(('Modifed jnxClksyncQualityCode to include the list of possible values (similar to G.781 standard)', 'Initial Version',))
if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setLastUpdated('201304220930Z')
if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxTimingNotfnsMIB.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for alarms from the router chassis box.")
jnxTimingFaults = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1))
jnxTimingEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2))
jnxTimingNotfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3))
jnxTimingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4))
class JnxPtpClockIdTC(TextualConvention, OctetString):
    description = 'Clock Identifier.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class JnxPtpPhaseOffsetTC(TextualConvention, Integer32):
    description = 'Phase Offset.'
    status = 'current'
    displayHint = 'd-9'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1000)

jnxClksyncState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("set", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncState.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncState.setDescription('Fault status.')
jnxClksyncIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 2), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncIfIndex.setDescription('Snmp ifIndex of member interface.')
jnxClksyncIntfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncIntfName.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncIntfName.setDescription('Interface name.')
jnxAcbFpgaRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxAcbFpgaRevMajor.setStatus('current')
if mibBuilder.loadTexts: jnxAcbFpgaRevMajor.setDescription('Major version information.')
jnxAcbFpgaRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxAcbFpgaRevMinor.setStatus('current')
if mibBuilder.loadTexts: jnxAcbFpgaRevMinor.setDescription('Minor version information.')
jnxBootCpldFpgaRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxBootCpldFpgaRevMajor.setStatus('current')
if mibBuilder.loadTexts: jnxBootCpldFpgaRevMajor.setDescription('Major version information.')
jnxBootCpldFpgaRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxBootCpldFpgaRevMinor.setStatus('current')
if mibBuilder.loadTexts: jnxBootCpldFpgaRevMinor.setDescription('Minor version information.')
jnxClksyncQualityCode = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 11, 15, 1, 0, 7, 16, 13, 10, 12, 14, 17))).clone(namedValues=NamedValues(("prc", 2), ("ssu-a", 4), ("ssu-b", 8), ("sec", 11), ("dnu", 15), ("prs", 1), ("stu", 0), ("st2", 7), ("tnc", 16), ("st3e", 13), ("st3", 10), ("smc", 12), ("st4", 14), ("dus", 17)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncQualityCode.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncQualityCode.setDescription('SSM/ESMC quality levels.')
jnxClksyncDpllState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("lock-acq", 0), ("locked", 1), ("holder", 2), ("freerun", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncDpllState.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncDpllState.setDescription('BITS/SyncE DPLL states.')
jnxPtpServoState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 0), ("free-run", 1), ("holdover", 2), ("acquiring", 3), ("freq-locked", 4), ("phase-aligned", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpServoState.setStatus('current')
if mibBuilder.loadTexts: jnxPtpServoState.setDescription('PTP servo states.')
jnxPtpClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpClass.setStatus('current')
if mibBuilder.loadTexts: jnxPtpClass.setDescription('PTP clock status.')
jnxPtpAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpAccuracy.setStatus('current')
if mibBuilder.loadTexts: jnxPtpAccuracy.setDescription('PTP clock accuracy.')
jnxPtpGmId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 13), JnxPtpClockIdTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpGmId.setStatus('current')
if mibBuilder.loadTexts: jnxPtpGmId.setDescription('PTP Grand Master clock-id.')
jnxPtpGmIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 14), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpGmIpAddr.setStatus('current')
if mibBuilder.loadTexts: jnxPtpGmIpAddr.setDescription('PTP Grand Master stream ip-address.')
jnxClkStreamHandle = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClkStreamHandle.setStatus('current')
if mibBuilder.loadTexts: jnxClkStreamHandle.setDescription('PTP clock accuracy.')
jnxRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 16), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: jnxRemoteIpAddr.setDescription("PTP clock stream's remote ip-address.")
jnxClksyncHybridState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 0), ("freq-acq", 1), ("freqLck-phaseAcq1", 2), ("freqLck-phaseAcq2", 3), ("freqLck-phaseAcq3", 4), ("freq-phase-lck", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncHybridState.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncHybridState.setDescription('hybrid states.')
jnxPtpPhaseOffset = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 18), JnxPtpPhaseOffsetTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpPhaseOffset.setStatus('current')
if mibBuilder.loadTexts: jnxPtpPhaseOffset.setDescription('Phase Offset.')
jnxClksyncQualityCodeStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncQualityCodeStr.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncQualityCodeStr.setDescription('SSM/ESMC quality levels in string format.')
jnxClksyncDpllStateStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncDpllStateStr.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncDpllStateStr.setDescription('Dpll state in string format.')
jnxPtpServoStateStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 21), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPtpServoStateStr.setStatus('current')
if mibBuilder.loadTexts: jnxPtpServoStateStr.setDescription('PTP servo states in string format.')
jnxClksyncHybridStateStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 22), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncHybridStateStr.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncHybridStateStr.setDescription('hybrid states in string format.')
jnxClksyncColorStr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 3, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxClksyncColorStr.setStatus('current')
if mibBuilder.loadTexts: jnxClksyncColorStr.setDescription('Color of the LED unit.')
jnxTimingFaultLOSSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOSSet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultLOSSet.setDescription('A trap which signifies that Loss Of Signal has been detected. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 2)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOSClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultLOSClear.setDescription('A trap which signifies that Loss Of Signal has been cleared. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultEFDSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 3)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultEFDSet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultEFDSet.setDescription('A trap which signifies Exceeded frequency deviation. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultEFDClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 4)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultEFDClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultEFDClear.setDescription('A trap which signifies Exceeded frequency deviation cleared. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultLOESMCSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 5)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOESMCSet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultLOESMCSet.setDescription('A trap which signifies Loss of ESMC. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultLOESMCClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 6)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLOESMCClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultLOESMCClear.setDescription('A trap which signifies Loss of ESMC. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultQLFailSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 7)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultQLFailSet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultQLFailSet.setDescription('A trap which signifies ESMC/SSM Quality Level failed. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultQLFailClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 8)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultQLFailClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultQLFailClear.setDescription('A trap which signifies ESMC/SSM Quality Level failed. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultLTISet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 9)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLTISet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultLTISet.setDescription('A trap which signifies Loss of timing information. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultLTIClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 10)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultLTIClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultLTIClear.setDescription('A trap which signifies Loss of timing information. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingFaultAcbcFpgaVerNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 11)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMinor"))
if mibBuilder.loadTexts: jnxTimingFaultAcbcFpgaVerNotCompatible.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultAcbcFpgaVerNotCompatible.setDescription('A trap which signifies ACBC FPGA version is not compatible. jnxBootCpldFpgaRevMajor indicates the current ACBC FPGA Major revision jnxBootCpldFpgaRevMinor indicates the current ACBC FPGA Minor revision.')
jnxTimingFaultBootCpldVerNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 12)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMinor"))
if mibBuilder.loadTexts: jnxTimingFaultBootCpldVerNotCompatible.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultBootCpldVerNotCompatible.setDescription('A trap which signifies Boot-cpld version is not compatible. jnxClksyncVersion indicates the current Boot-cpld version.')
jnxTimingFaultPriSrcFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 13)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultPriSrcFailed.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultPriSrcFailed.setDescription('A trap which signifies Primary source failed (Whenever PFM/CFM/SCM error occurs). jnxClksyncIfIndex is the Primary source interface index jnxClksyncIntfName is the Primary source interface name.')
jnxTimingFaultSecSrcFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 14)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingFaultSecSrcFailed.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultSecSrcFailed.setDescription('A trap which signifies Secondary source failed (Whenever PFM/CFM/SCM error occurs). jnxClksyncIfIndex is the Secondary source interface index jnxClksyncIntfName is the Secondary source interface name.')
jnxTimingFaultPtpUniNegRateRejectSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 15)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClkStreamHandle"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxRemoteIpAddr"))
if mibBuilder.loadTexts: jnxTimingFaultPtpUniNegRateRejectSet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultPtpUniNegRateRejectSet.setDescription("A trap which signifies: When acting as MASTER - Failing/rejecting clients for signaling messages When acting as SLAVE - Failing or receiving rejection for signaling messages jnxClkStreamHandle is the clock stream handle jnxRemoteIpAddr is the clock stream's remote ip-address.")
jnxTimingFaultPtpUniNegRateRejectClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 16)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClkStreamHandle"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxRemoteIpAddr"))
if mibBuilder.loadTexts: jnxTimingFaultPtpUniNegRateRejectClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingFaultPtpUniNegRateRejectClear.setDescription("A trap which signifies: When acting as MASTER - Failing/rejecting clients for signaling messages When acting as SLAVE - Failing or receiving rejection for signaling messages jnxClkStreamHandle is the clock stream handle jnxRemoteIpAddr is the clock stream's remote ip-address.")
jnxTimingEventPriSrcRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventPriSrcRecovered.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventPriSrcRecovered.setDescription('A trap which signifies Primary source recovered. jnxClksyncIfIndex is the Primary source interface index jnxClksyncIntfName is the Primary source interface name.')
jnxTimingEventSecSrcRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 2)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSecSrcRecovered.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSecSrcRecovered.setDescription('A trap which signifies Secondary source recovered. jnxClksyncIfIndex is the Secondary source interface index jnxClksyncIntfName is the Secondary source interface name.')
jnxTimingEventPriRefChanged = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 3)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventPriRefChanged.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventPriRefChanged.setDescription('A trap which signifies Primary reference changed (Ifd name change or change from synce to BITS/external interface etc). jnxClksyncIfIndex is the Primary reference interface index jnxClksyncIntfName is the Primary reference interface name.')
jnxTimingEventSecRefChanged = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 4)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSecRefChanged.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSecRefChanged.setDescription('A trap which signifies Secondary reference changed (Ifd name change or change from synce to BITS/external interface etc). jnxClksyncIfIndex is the Secondary reference interface index jnxClksyncIntfName is the Secondary reference interface name.')
jnxTimingEventQLChangedRx = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 5)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCode"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCodeStr"))
if mibBuilder.loadTexts: jnxTimingEventQLChangedRx.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventQLChangedRx.setDescription('A trap which signifies RX SSM/ESMC quality level changed. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name jnxClksyncQualityCode is the SSM/ESMC quality level jnxClksyncQualityCodeStr is the SSM/ESMC quality level in string format.')
jnxTimingEventQLChangedTx = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 6)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCode"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCodeStr"))
if mibBuilder.loadTexts: jnxTimingEventQLChangedTx.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventQLChangedTx.setDescription('A trap which signifies TX SSM/ESMC quality level changed. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name jnxClksyncQualityCode is the SSM/ESMC quality level jnxClksyncQualityCodeStr is the SSM/ESMC quality level in string format.')
jnxTimingEventSynceHldovrToLck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 7)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSynceHldovrToLck.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSynceHldovrToLck.setDescription('A trap which signifies SyncE Holdover to Locked EEC state. jnxClksyncIfIndex is the SyncE interface index jnxClksyncIntfName is the SyncE interface name.')
jnxTimingEventSynceLckToHldovr = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 8)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSynceLckToHldovr.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSynceLckToHldovr.setDescription('A trap which signifies SyncE Locked to Holdover EEC state. jnxClksyncIfIndex is the SyncE interface index jnxClksyncIntfName is the SyncE interface name.')
jnxTimingEventDpllStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 9)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"))
if mibBuilder.loadTexts: jnxTimingEventDpllStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventDpllStatus.setDescription('A trap which signifies that DPLL state change (unknown, lock_acq, locked, holder, freerun). jnxClksyncDpllState indicates the Dpll status jnxClksyncDpllStateStr indicates the Dpll status in string format.')
jnxTimingEventSynceDpllStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 10)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"))
if mibBuilder.loadTexts: jnxTimingEventSynceDpllStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSynceDpllStatus.setDescription('A trap which signifies that Synce DPLL state change (unknown, lock_acq, locked, holder, freerun). jnxClksyncIfIndex is the interface index from which Frequency is derived jnxClksyncIntfName is the interface name from which Frequency is derived jnxClksyncDpllState indicates the Dpll status jnxClksyncDpllStateStr indicates the Dpll status in string format.')
jnxTimingEventBitsDpllStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 11)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"))
if mibBuilder.loadTexts: jnxTimingEventBitsDpllStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventBitsDpllStatus.setDescription('A trap which signifies that Synce DPLL state change (unknown, lock_acq, locked, holder, freerun). jnxClksyncIfIndex is the interface index from which Frequency is derived jnxClksyncIntfName is the interface name from which Frequency is derived jnxClksyncDpllState indicates the Dpll status jnxClksyncDpllStateStr indicates the Dpll status in string format.')
jnxTimingEventPtpServoStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 12)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoStateStr"))
if mibBuilder.loadTexts: jnxTimingEventPtpServoStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventPtpServoStatus.setDescription('A trap which signifies that PTP servo state (Init, Acquiring, PhaseAligned, FreeRun, Holdover). jnxPtpServoState indicates the ptp servo status jnxPtpServoStateStr indicates the ptp servo status in string format.')
jnxTimingEventPtpGMClockClassChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 13)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpClass"))
if mibBuilder.loadTexts: jnxTimingEventPtpGMClockClassChange.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventPtpGMClockClassChange.setDescription('A trap which signifies PTP clock class changes. jnxPtpGmId indicates the ptp Grand Master clock-id jnxPtpClass indicates the ptp Grand Master clock status.')
jnxTimingEventPtpGMClockAccuracyChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 14)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpAccuracy"))
if mibBuilder.loadTexts: jnxTimingEventPtpGMClockAccuracyChange.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventPtpGMClockAccuracyChange.setDescription('A trap which signifies PTP clock accuracy changes. jnxPtpGmId indicates the ptp Grand Master clock-id jnxPtpAccuracy indicates the ptp Grand Master clock accuracy.')
jnxTimingEventPtpGMChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 15)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"))
if mibBuilder.loadTexts: jnxTimingEventPtpGMChange.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventPtpGMChange.setDescription('A trap which signifies PTP Grand Master changes. jnxPtpGmId indicates the ptp Grand Master clock-id.')
jnxTimingEventHybridStatus = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 16)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridStateStr"))
if mibBuilder.loadTexts: jnxTimingEventHybridStatus.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventHybridStatus.setDescription('A trap which signifies that Hybrid state (Init, FreqAcq, FreqLckPhaseAcq, FreqPhaseLck). jnxClksyncHybridState indicates the hybrid status jnxClksyncHybridStateStr indicates the hybrid status in string format.')
jnxTimingEventSquelchSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 17)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSquelchSet.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSquelchSet.setDescription('A trap which signifies that interface status changed to squelched. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingEventSquelchClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 1, 18)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"))
if mibBuilder.loadTexts: jnxTimingEventSquelchClear.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventSquelchClear.setDescription('A trap which signifies that interface status changed to active. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name.')
jnxTimingEventLedColorChange = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 2, 19)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncColorStr"))
if mibBuilder.loadTexts: jnxTimingEventLedColorChange.setStatus('current')
if mibBuilder.loadTexts: jnxTimingEventLedColorChange.setDescription('A trap which signifies TX SSM/ESMC quality level changed. jnxClksyncIfIndex is the interface index jnxClksyncIntfName is the interface name jnxClksyncColorStr is the color of the LED unit.')
jnxTimingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 1))
jnxTimingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2))
jnxTimingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 1, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingObjectsGroup"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingNotfnFaultsGroup"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingNotfnEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingCompliance = jnxTimingCompliance.setStatus('current')
if mibBuilder.loadTexts: jnxTimingCompliance.setDescription('The compliance statement for systems supporting the Timing Notification MIB.')
jnxTimingObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2, 1)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIfIndex"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncIntfName"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxAcbFpgaRevMinor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMajor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxBootCpldFpgaRevMinor"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCode"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpClass"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpAccuracy"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmId"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpGmIpAddr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClkStreamHandle"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxRemoteIpAddr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridState"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpPhaseOffset"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncQualityCodeStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncDpllStateStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxPtpServoStateStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncHybridStateStr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxClksyncColorStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingObjectsGroup = jnxTimingObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxTimingObjectsGroup.setDescription('Timing objects group.')
jnxTimingNotfnFaultsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2, 2)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOSSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOSClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultEFDSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultEFDClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOESMCSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLOESMCClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultQLFailSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultQLFailClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLTISet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultLTIClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultAcbcFpgaVerNotCompatible"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultBootCpldVerNotCompatible"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultPriSrcFailed"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultSecSrcFailed"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultPtpUniNegRateRejectSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingFaultPtpUniNegRateRejectClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingNotfnFaultsGroup = jnxTimingNotfnFaultsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxTimingNotfnFaultsGroup.setDescription('Timing defects notification group.')
jnxTimingNotfnEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 3, 75, 1, 4, 2, 3)).setObjects(("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPriSrcRecovered"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSecSrcRecovered"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPriRefChanged"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSecRefChanged"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventQLChangedRx"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventQLChangedTx"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSynceHldovrToLck"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSynceLckToHldovr"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventDpllStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSynceDpllStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventBitsDpllStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpServoStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpGMClockClassChange"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpGMClockAccuracyChange"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventPtpGMChange"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventHybridStatus"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSquelchSet"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventSquelchClear"), ("JUNIPER-TIMING-NOTFNS-MIB", "jnxTimingEventLedColorChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxTimingNotfnEventsGroup = jnxTimingNotfnEventsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxTimingNotfnEventsGroup.setDescription('Timing events notification group.')
mibBuilder.exportSymbols("JUNIPER-TIMING-NOTFNS-MIB", jnxTimingEventSynceDpllStatus=jnxTimingEventSynceDpllStatus, jnxClksyncQualityCodeStr=jnxClksyncQualityCodeStr, jnxClkStreamHandle=jnxClkStreamHandle, jnxTimingEventPtpServoStatus=jnxTimingEventPtpServoStatus, jnxTimingGroups=jnxTimingGroups, jnxTimingEventQLChangedTx=jnxTimingEventQLChangedTx, jnxPtpClass=jnxPtpClass, jnxTimingFaultLOSClear=jnxTimingFaultLOSClear, jnxTimingFaultEFDClear=jnxTimingFaultEFDClear, jnxPtpGmIpAddr=jnxPtpGmIpAddr, jnxClksyncDpllStateStr=jnxClksyncDpllStateStr, jnxTimingNotfnEventsGroup=jnxTimingNotfnEventsGroup, jnxClksyncHybridState=jnxClksyncHybridState, jnxTimingEvents=jnxTimingEvents, jnxTimingFaults=jnxTimingFaults, JnxPtpClockIdTC=JnxPtpClockIdTC, jnxTimingFaultPriSrcFailed=jnxTimingFaultPriSrcFailed, jnxTimingEventQLChangedRx=jnxTimingEventQLChangedRx, jnxClksyncIfIndex=jnxClksyncIfIndex, jnxBootCpldFpgaRevMajor=jnxBootCpldFpgaRevMajor, jnxPtpAccuracy=jnxPtpAccuracy, jnxTimingObjectsGroup=jnxTimingObjectsGroup, jnxTimingFaultBootCpldVerNotCompatible=jnxTimingFaultBootCpldVerNotCompatible, jnxTimingFaultLOESMCSet=jnxTimingFaultLOESMCSet, jnxTimingFaultLOSSet=jnxTimingFaultLOSSet, jnxTimingFaultQLFailSet=jnxTimingFaultQLFailSet, jnxTimingEventPtpGMClockAccuracyChange=jnxTimingEventPtpGMClockAccuracyChange, jnxTimingEventSynceLckToHldovr=jnxTimingEventSynceLckToHldovr, jnxTimingNotfnsMIB=jnxTimingNotfnsMIB, jnxTimingFaultPtpUniNegRateRejectClear=jnxTimingFaultPtpUniNegRateRejectClear, jnxTimingEventPriRefChanged=jnxTimingEventPriRefChanged, jnxAcbFpgaRevMinor=jnxAcbFpgaRevMinor, jnxTimingFaultQLFailClear=jnxTimingFaultQLFailClear, jnxTimingEventSquelchClear=jnxTimingEventSquelchClear, jnxClksyncIntfName=jnxClksyncIntfName, jnxTimingEventSynceHldovrToLck=jnxTimingEventSynceHldovrToLck, jnxTimingNotfObjects=jnxTimingNotfObjects, jnxClksyncQualityCode=jnxClksyncQualityCode, jnxTimingFaultLOESMCClear=jnxTimingFaultLOESMCClear, jnxTimingEventSquelchSet=jnxTimingEventSquelchSet, jnxClksyncColorStr=jnxClksyncColorStr, jnxTimingFaultAcbcFpgaVerNotCompatible=jnxTimingFaultAcbcFpgaVerNotCompatible, jnxTimingEventPtpGMChange=jnxTimingEventPtpGMChange, jnxTimingConformance=jnxTimingConformance, jnxClksyncDpllState=jnxClksyncDpllState, PYSNMP_MODULE_ID=jnxTimingNotfnsMIB, jnxBootCpldFpgaRevMinor=jnxBootCpldFpgaRevMinor, jnxPtpPhaseOffset=jnxPtpPhaseOffset, jnxTimingFaultSecSrcFailed=jnxTimingFaultSecSrcFailed, jnxTimingEventPtpGMClockClassChange=jnxTimingEventPtpGMClockClassChange, jnxTimingCompliance=jnxTimingCompliance, jnxTimingFaultLTISet=jnxTimingFaultLTISet, jnxClksyncHybridStateStr=jnxClksyncHybridStateStr, jnxTimingEventSecSrcRecovered=jnxTimingEventSecSrcRecovered, jnxRemoteIpAddr=jnxRemoteIpAddr, jnxTimingEventSecRefChanged=jnxTimingEventSecRefChanged, jnxTimingEventHybridStatus=jnxTimingEventHybridStatus, jnxTimingFaultPtpUniNegRateRejectSet=jnxTimingFaultPtpUniNegRateRejectSet, jnxTimingEventLedColorChange=jnxTimingEventLedColorChange, jnxTimingFaultEFDSet=jnxTimingFaultEFDSet, JnxPtpPhaseOffsetTC=JnxPtpPhaseOffsetTC, jnxTimingCompliances=jnxTimingCompliances, jnxTimingEventDpllStatus=jnxTimingEventDpllStatus, jnxPtpServoState=jnxPtpServoState, jnxTimingEventPriSrcRecovered=jnxTimingEventPriSrcRecovered, jnxTimingFaultLTIClear=jnxTimingFaultLTIClear, jnxTimingNotfnFaultsGroup=jnxTimingNotfnFaultsGroup, jnxAcbFpgaRevMajor=jnxAcbFpgaRevMajor, jnxPtpServoStateStr=jnxPtpServoStateStr, jnxPtpGmId=jnxPtpGmId, jnxTimingEventBitsDpllStatus=jnxTimingEventBitsDpllStatus, jnxClksyncState=jnxClksyncState)
