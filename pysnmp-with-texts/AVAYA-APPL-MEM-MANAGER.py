#
# PySNMP MIB module AVAYA-APPL-MEM-MANAGER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAYA-APPL-MEM-MANAGER
# Produced by pysmi-0.3.4 at Wed May  1 11:32:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
avGatewayMibs, = mibBuilder.importSymbols("AVAYAGEN-MIB", "avGatewayMibs")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Bits, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, NotificationType, MibIdentifier, Unsigned32, ObjectIdentity, enterprises, Integer32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "NotificationType", "MibIdentifier", "Unsigned32", "ObjectIdentity", "enterprises", "Integer32", "iso", "ModuleIdentity")
TextualConvention, RowStatus, DateAndTime, TruthValue, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DateAndTime", "TruthValue", "DisplayString", "TimeInterval")
avApplMemManager = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3))
if mibBuilder.loadTexts: avApplMemManager.setLastUpdated('200410201534Z')
if mibBuilder.loadTexts: avApplMemManager.setOrganization('Avaya')
if mibBuilder.loadTexts: avApplMemManager.setContactInfo(' Avaya Customer Services Postal: Avaya, Inc. 211 Mt Airy Rd. Basking Ridge, NJ 07920 USA Tel: +1 908 953 6000 WWW: http://www.avaya.com ')
if mibBuilder.loadTexts: avApplMemManager.setDescription(" This module define the application memory manager. I.e. definition of the size in memory for specific applications as TFTP, SNIFFER, etc. For each application the user can configure the size it takes in RAM, NVRAM, etc. Copyright notice: This AVAYA SNMP Management Information Base Specification (Specification) embodies AVAYA confidential and Proprietary intellectual property. AVAYA retains all Title and ownership in the Specification, including any revisionsIt is AVAYA's intent to encourage the widespread use of this Specification in connection with the management of AVAYA products. AVAYA grants vendors, end-users, and other interested parties a non-exclusive license to use this Specification in connection with the management of AVAYA products.This Specification is supplied 'as is', and AVAYA makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification. ")
avApplMemManagerGenConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 1))
avApplMemManagerTotalRamSize = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avApplMemManagerTotalRamSize.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerTotalRamSize.setDescription('The total max size allowable of the Memory in KBytes.')
avApplMemManagerTotalNvRamSize = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avApplMemManagerTotalNvRamSize.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerTotalNvRamSize.setDescription('The total max size allowable of the Memory in KBytes.')
avApplMemManagerTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2), )
if mibBuilder.loadTexts: avApplMemManagerTable.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerTable.setDescription('Table of different application and their memory allocation in the RAM and NvRAM.')
avApplMemManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1), ).setIndexNames((0, "AVAYA-APPL-MEM-MANAGER", "avApplMemManagerId"), (0, "AVAYA-APPL-MEM-MANAGER", "avApplMemManagerType"))
if mibBuilder.loadTexts: avApplMemManagerEntry.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerEntry.setDescription('An entry in the table, containing data about application and its memory type.')
avApplMemManagerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avApplMemManagerId.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerId.setDescription('Index of the application. SNIFFER application index is 1. TFTP server application index is 2.')
avApplMemManagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avApplMemManagerType.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerType.setDescription('The Type of the memory that the application use. 1 - NvRAM, 2 - RAM.')
avApplMemManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avApplMemManagerName.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerName.setDescription("The name of the application. For Sniffer application 'SNIFFER'. For TFTP Server Application 'TFTP Server'. ")
avApplMemManagerSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avApplMemManagerSize.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerSize.setDescription('The size of the Memory in KBytes for specific application and memory type.')
avApplMemManagerMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avApplMemManagerMinSize.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerMinSize.setDescription('The Min size allowable of the Memory in KBytes for specific application and memory type.')
avApplMemManagerMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 6, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avApplMemManagerMaxSize.setStatus('current')
if mibBuilder.loadTexts: avApplMemManagerMaxSize.setDescription('The max size allowable of the Memory in KBytes for specific application and memory type.')
mibBuilder.exportSymbols("AVAYA-APPL-MEM-MANAGER", avApplMemManagerId=avApplMemManagerId, avApplMemManagerName=avApplMemManagerName, avApplMemManagerMaxSize=avApplMemManagerMaxSize, avApplMemManager=avApplMemManager, avApplMemManagerTable=avApplMemManagerTable, avApplMemManagerSize=avApplMemManagerSize, avApplMemManagerGenConfig=avApplMemManagerGenConfig, PYSNMP_MODULE_ID=avApplMemManager, avApplMemManagerType=avApplMemManagerType, avApplMemManagerMinSize=avApplMemManagerMinSize, avApplMemManagerTotalNvRamSize=avApplMemManagerTotalNvRamSize, avApplMemManagerTotalRamSize=avApplMemManagerTotalRamSize, avApplMemManagerEntry=avApplMemManagerEntry)
