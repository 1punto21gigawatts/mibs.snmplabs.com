#
# PySNMP MIB module ASCEND-MIBINTEGRITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBINTEGRITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Integer32, Counter32, NotificationType, IpAddress, TimeTicks, Counter64, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter32", "NotificationType", "IpAddress", "TimeTicks", "Counter64", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "MibIdentifier", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibsystemIntegrityProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 81))
mibsystemIntegrityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 81, 1), )
if mibBuilder.loadTexts: mibsystemIntegrityProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemIntegrityProfileTable.setDescription('A list of mibsystemIntegrityProfile profile entries.')
mibsystemIntegrityProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 81, 1, 1), ).setIndexNames((0, "ASCEND-MIBINTEGRITY-MIB", "systemIntegrityProfile-Index-o"))
if mibBuilder.loadTexts: mibsystemIntegrityProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemIntegrityProfileEntry.setDescription('A mibsystemIntegrityProfile entry containing objects that maps to the parameters of mibsystemIntegrityProfile profile.')
systemIntegrityProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 1, 1, 1), Integer32()).setLabel("systemIntegrityProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIntegrityProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_Index_o.setDescription('')
systemIntegrityProfile_EnableCentralizedDetection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemIntegrityProfile-EnableCentralizedDetection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_EnableCentralizedDetection.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_EnableCentralizedDetection.setDescription('Master can also do cetralized integrity for the whole system on the top of all cards doing their own distributed integrity testing. The recommended value is no. By default all LIMs do correction every few hours and that should be enough for LIMs.')
systemIntegrityProfile_RatioCentralizedDetection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 1, 1, 3), Integer32()).setLabel("systemIntegrityProfile-RatioCentralizedDetection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_RatioCentralizedDetection.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_RatioCentralizedDetection.setDescription('If centralized detection is enabled then the ratio of problem detection between the Master and all other cards. For example if ratio is 5 then master CM would do 5 self tests before triggering centralized LIM test.')
systemIntegrityProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("systemIntegrityProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_Action_o.setDescription('')
mibsystemIntegrityProfile_IntegrityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 81, 2), ).setLabel("mibsystemIntegrityProfile-IntegrityConfigTable")
if mibBuilder.loadTexts: mibsystemIntegrityProfile_IntegrityConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemIntegrityProfile_IntegrityConfigTable.setDescription('A list of mibsystemIntegrityProfile__integrity_config profile entries.')
mibsystemIntegrityProfile_IntegrityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1), ).setLabel("mibsystemIntegrityProfile-IntegrityConfigEntry").setIndexNames((0, "ASCEND-MIBINTEGRITY-MIB", "systemIntegrityProfile-IntegrityConfig-Index-o"), (0, "ASCEND-MIBINTEGRITY-MIB", "systemIntegrityProfile-IntegrityConfig-Index1-o"))
if mibBuilder.loadTexts: mibsystemIntegrityProfile_IntegrityConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibsystemIntegrityProfile_IntegrityConfigEntry.setDescription('A mibsystemIntegrityProfile__integrity_config entry containing objects that maps to the parameters of mibsystemIntegrityProfile__integrity_config profile.')
systemIntegrityProfile_IntegrityConfig_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 1), Integer32()).setLabel("systemIntegrityProfile-IntegrityConfig-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_Index_o.setDescription('')
systemIntegrityProfile_IntegrityConfig_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 2), Integer32()).setLabel("systemIntegrityProfile-IntegrityConfig-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_Index1_o.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_Index1_o.setDescription('')
systemIntegrityProfile_IntegrityConfig_EnableContinuousDetection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemIntegrityProfile-IntegrityConfig-EnableContinuousDetection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_EnableContinuousDetection.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_EnableContinuousDetection.setDescription('MAGIC testing, detection and correction enabled in continous mode? It is recommended yes for the CMs and no for all LIMs.')
systemIntegrityProfile_IntegrityConfig_DetectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 4), Integer32()).setLabel("systemIntegrityProfile-IntegrityConfig-DetectionInterval").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_DetectionInterval.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_DetectionInterval.setDescription('Detection interval in miliseconds for continuous detection. The system tries to detect any abnormality at defined miliseconds interval. The recommended value is 100 ms for CMs.')
systemIntegrityProfile_IntegrityConfig_OnlyOneCorrection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemIntegrityProfile-IntegrityConfig-OnlyOneCorrection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_OnlyOneCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_OnlyOneCorrection.setDescription('If yes then apply MAGIC correction only once. If no then apply MAGIC correction multiple times in a row. Only one correction is recommended.')
systemIntegrityProfile_IntegrityConfig_CorrectionFactor = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 6), Integer32()).setLabel("systemIntegrityProfile-IntegrityConfig-CorrectionFactor").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_CorrectionFactor.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_CorrectionFactor.setDescription('MAGIC correction factor. How many detection of problems result in to a correction. The system keeps history of past 20 tests. If correction-factor is 1 then only one failure out of past 20 tests would result in a correction. If correction-factor is 5 then 5 failure out of 20 would result in a correction.')
systemIntegrityProfile_IntegrityConfig_AutoCorrectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("systemIntegrityProfile-IntegrityConfig-AutoCorrectionEnable").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_AutoCorrectionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_AutoCorrectionEnable.setDescription('If auto correction is enabled for this card or not. Applicable only for LIM cards. LIM tries to correct problem every few hours automatically.')
systemIntegrityProfile_IntegrityConfig_IntervalAutoCorrection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 81, 2, 1, 8), Integer32()).setLabel("systemIntegrityProfile-IntegrityConfig-IntervalAutoCorrection").setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_IntervalAutoCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: systemIntegrityProfile_IntegrityConfig_IntervalAutoCorrection.setDescription('All slot cards (LIM) automatically tries to correct themselves at specified interval in mili seconds. Some LIMs are capable of doing detection before correction. Those LIMs would try to detect the problem and then correct it.')
mibBuilder.exportSymbols("ASCEND-MIBINTEGRITY-MIB", systemIntegrityProfile_RatioCentralizedDetection=systemIntegrityProfile_RatioCentralizedDetection, systemIntegrityProfile_IntegrityConfig_AutoCorrectionEnable=systemIntegrityProfile_IntegrityConfig_AutoCorrectionEnable, systemIntegrityProfile_IntegrityConfig_OnlyOneCorrection=systemIntegrityProfile_IntegrityConfig_OnlyOneCorrection, mibsystemIntegrityProfileEntry=mibsystemIntegrityProfileEntry, systemIntegrityProfile_IntegrityConfig_Index1_o=systemIntegrityProfile_IntegrityConfig_Index1_o, mibsystemIntegrityProfile_IntegrityConfigEntry=mibsystemIntegrityProfile_IntegrityConfigEntry, systemIntegrityProfile_IntegrityConfig_Index_o=systemIntegrityProfile_IntegrityConfig_Index_o, systemIntegrityProfile_Index_o=systemIntegrityProfile_Index_o, systemIntegrityProfile_EnableCentralizedDetection=systemIntegrityProfile_EnableCentralizedDetection, mibsystemIntegrityProfileTable=mibsystemIntegrityProfileTable, systemIntegrityProfile_Action_o=systemIntegrityProfile_Action_o, systemIntegrityProfile_IntegrityConfig_DetectionInterval=systemIntegrityProfile_IntegrityConfig_DetectionInterval, systemIntegrityProfile_IntegrityConfig_EnableContinuousDetection=systemIntegrityProfile_IntegrityConfig_EnableContinuousDetection, mibsystemIntegrityProfile=mibsystemIntegrityProfile, systemIntegrityProfile_IntegrityConfig_CorrectionFactor=systemIntegrityProfile_IntegrityConfig_CorrectionFactor, mibsystemIntegrityProfile_IntegrityConfigTable=mibsystemIntegrityProfile_IntegrityConfigTable, systemIntegrityProfile_IntegrityConfig_IntervalAutoCorrection=systemIntegrityProfile_IntegrityConfig_IntervalAutoCorrection, DisplayString=DisplayString)
