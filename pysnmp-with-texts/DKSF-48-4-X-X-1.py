#
# PySNMP MIB module DKSF-48-4-X-X-1 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DKSF-48-4-X-X-1
# Produced by pysmi-0.3.4 at Wed May  1 12:47:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
ObjectIdentity, MibIdentifier, NotificationType, Counter32, Bits, Unsigned32, Gauge32, TimeTicks, enterprises, iso, ModuleIdentity, IpAddress, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "NotificationType", "Counter32", "Bits", "Unsigned32", "Gauge32", "TimeTicks", "enterprises", "iso", "ModuleIdentity", "IpAddress", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue")
netPing8Pwr = ModuleIdentity((1, 3, 6, 1, 4, 1, 25728, 48))
netPing8Pwr.setRevisions(('2015-08-13 00:00', '2015-06-18 00:00', '2015-05-28 00:00', '2015-05-06 00:00', '2015-03-26 00:00', '2013-11-01 00:00', '2013-04-11 00:00', '2012-05-31 00:00', '2012-04-17 00:00', '2012-03-23 00:00', '2011-09-23 00:00', '2011-03-24 00:00', '2010-10-14 00:00', '2010-09-20 00:00', '2010-05-31 00:00', '2010-04-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netPing8Pwr.setRevisionsDescriptions(('npRelayFlip variable added', 'npIr branch added', 'npGsmSendSms variable added', 'npRelHumidity, npSmoke branches added', 'npRelayMode values redefined', 'New npRelay branch; npPwr branch is reduced. npRelayMode value for logic changed from 4 to 5', 'partial rewrite for DKSF 48', 'npPwrRelayState branch was added', 'npReboot branch was added', 'Minor changes to IR module for IRC-TRv2', '4 IO lines, Identification is changed from DKSF 52.4 to DKSF 52.5', 'npIoPulseCounter, npIoSinglePulseDuration, npIoSinglePulseStart is added Identification is changed from DKSF 52.3 to DKSF 52.4', 'IR module support', 'dksf 52.3 subversion', 'dksf 51.3 subversion', 'SMIv2-style rewrite',))
if mibBuilder.loadTexts: netPing8Pwr.setLastUpdated('201508130000Z')
if mibBuilder.loadTexts: netPing8Pwr.setOrganization('Alentis Electronics')
if mibBuilder.loadTexts: netPing8Pwr.setContactInfo('developers@netping.ru')
if mibBuilder.loadTexts: netPing8Pwr.setDescription('Generic MIB for NetPing remote sensing and control')
lightcom = MibIdentifier((1, 3, 6, 1, 4, 1, 25728))
npRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 5500))
npRelayTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 5500, 5), )
if mibBuilder.loadTexts: npRelayTable.setStatus('current')
if mibBuilder.loadTexts: npRelayTable.setDescription('Watchdog and outlet/relay control table')
npRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1), ).setIndexNames((0, "DKSF-48-4-X-X-1", "npRelayN"))
if mibBuilder.loadTexts: npRelayEntry.setStatus('current')
if mibBuilder.loadTexts: npRelayEntry.setDescription('Relay/outlet table row')
npRelayN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayN.setStatus('current')
if mibBuilder.loadTexts: npRelayN.setDescription('The N of output relay')
npRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("watchdog", 2), ("schedule", 3), ("scheduleAndWatchdog", 4), ("logic", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npRelayMode.setStatus('current')
if mibBuilder.loadTexts: npRelayMode.setDescription('Control of relay: 0 - manual off 1 - manual on 2 - watchdog 3 - schedule 4 - both schedule and watchdog (while switched on by schedule) 5 - logic')
npRelayStartReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npRelayStartReset.setStatus('current')
if mibBuilder.loadTexts: npRelayStartReset.setDescription('Write 1 to start reset (switch relay off for some time)')
npRelayMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayMemo.setStatus('current')
if mibBuilder.loadTexts: npRelayMemo.setDescription('Relay memo')
npRelayFlip = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("flip", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayFlip.setStatus('current')
if mibBuilder.loadTexts: npRelayFlip.setDescription('Write -1 to flip between manual on and manual off states of relay')
npRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayState.setStatus('current')
if mibBuilder.loadTexts: npRelayState.setDescription('Actual relay state at the moment, regardless of source of control. 0 - relay is off 1 - relay is on')
npRelayPowered = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5500, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelayPowered.setStatus('current')
if mibBuilder.loadTexts: npRelayPowered.setDescription('AC presence on output. 0 - no AC dew to relay switched off or no ac on input 1 - AC is present')
npPwr = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 5800))
npPwrTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 5800, 3), )
if mibBuilder.loadTexts: npPwrTable.setStatus('current')
if mibBuilder.loadTexts: npPwrTable.setDescription('Watchdog and outlet/relay control table')
npPwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1), ).setIndexNames((0, "DKSF-48-4-X-X-1", "npPwrChannelN"))
if mibBuilder.loadTexts: npPwrEntry.setStatus('current')
if mibBuilder.loadTexts: npPwrEntry.setDescription('Watchdog control table row')
npPwrChannelN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrChannelN.setStatus('current')
if mibBuilder.loadTexts: npPwrChannelN.setDescription('The id of watchdog/power channel')
npPwrStartReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrStartReset.setStatus('obsolete')
if mibBuilder.loadTexts: npPwrStartReset.setDescription('Deprecated in current FW version: Write 1 to start forced reset. On read: 0 - normal operation 1 - reset is active 2 - reboot pause is active or watchdog is inactive')
npPwrResetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npPwrResetsCounter.setStatus('current')
if mibBuilder.loadTexts: npPwrResetsCounter.setDescription('Counter of watchdog resets Write 0 to clear.')
npPwrRepeatingResetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrRepeatingResetsCounter.setStatus('current')
if mibBuilder.loadTexts: npPwrRepeatingResetsCounter.setDescription('Counter of continous failed watchdog resets')
npPwrMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 5800, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npPwrMemo.setStatus('current')
if mibBuilder.loadTexts: npPwrMemo.setDescription('Watchdog channel memo')
npSmoke = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8200))
npSmokeTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8200, 1), )
if mibBuilder.loadTexts: npSmokeTable.setStatus('current')
if mibBuilder.loadTexts: npSmokeTable.setDescription('Smoke Sensors Table')
npSmokeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1), ).setIndexNames((0, "DKSF-48-4-X-X-1", "npSmokeSensorN"))
if mibBuilder.loadTexts: npSmokeEntry.setStatus('current')
if mibBuilder.loadTexts: npSmokeEntry.setDescription('Smoke Sensors Table Row')
npSmokeSensorN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeSensorN.setStatus('current')
if mibBuilder.loadTexts: npSmokeSensorN.setDescription('The id of 1Wire Smoke sensor, 1 to 4')
npSmokeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1), ("off", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeStatus.setStatus('current')
if mibBuilder.loadTexts: npSmokeStatus.setDescription('Status of Smoke sensor')
npSmokePower = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSmokePower.setStatus('current')
if mibBuilder.loadTexts: npSmokePower.setDescription('Controls power on Smoke sensor current loop')
npSmokeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSmokeReset.setStatus('current')
if mibBuilder.loadTexts: npSmokeReset.setDescription('Write 1 to switch off for approx. 10s to reset sensor')
npSmokeMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8200, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeMemo.setStatus('current')
if mibBuilder.loadTexts: npSmokeMemo.setDescription('Smoke sensor memo')
npSmokeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8200, 2))
npSmokeTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 0))
npSmokeTrapSensorN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeTrapSensorN.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrapSensorN.setDescription('The id of 1Wire Smoke sensor, 1 to 4')
npSmokeTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1), ("off", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeTrapStatus.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrapStatus.setDescription('New status of Smoke sensor')
npSmokeTrapMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSmokeTrapMemo.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrapMemo.setDescription('Smoke sensor memo')
npSmokeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8200, 2, 0, 1)).setObjects(("DKSF-48-4-X-X-1", "npSmokeTrapSensorN"), ("DKSF-48-4-X-X-1", "npSmokeTrapStatus"), ("DKSF-48-4-X-X-1", "npSmokeTrapMemo"))
if mibBuilder.loadTexts: npSmokeTrap.setStatus('current')
if mibBuilder.loadTexts: npSmokeTrap.setDescription('Status of 1W Smoke sensor has changed')
npThermo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800))
npThermoTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8800, 1), )
if mibBuilder.loadTexts: npThermoTable.setStatus('current')
if mibBuilder.loadTexts: npThermoTable.setDescription('Thermo Sensors Table')
npThermoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1), ).setIndexNames((0, "DKSF-48-4-X-X-1", "npThermoSensorN"))
if mibBuilder.loadTexts: npThermoEntry.setStatus('current')
if mibBuilder.loadTexts: npThermoEntry.setDescription('Thermo Sensors Table Row')
npThermoSensorN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoSensorN.setStatus('current')
if mibBuilder.loadTexts: npThermoSensorN.setDescription('The id of temperature sensor, 1 to 8')
npThermoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoValue.setStatus('current')
if mibBuilder.loadTexts: npThermoValue.setDescription('Temperature, deg.C')
npThermoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("failed", 0), ("low", 1), ("norm", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoStatus.setStatus('current')
if mibBuilder.loadTexts: npThermoStatus.setDescription('Temperature status (0=fault, 1=underheat, 2=normal, 3=overheat)')
npThermoLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoLow.setStatus('current')
if mibBuilder.loadTexts: npThermoLow.setDescription('Bottom margin of normal temperature range, deg.C')
npThermoHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoHigh.setStatus('current')
if mibBuilder.loadTexts: npThermoHigh.setDescription('Top margin of normal temperature range, deg.C')
npThermoMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8800, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoMemo.setStatus('current')
if mibBuilder.loadTexts: npThermoMemo.setDescription('T channel memo')
npThermoTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800, 2))
npThermoTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 0))
npThermoTrapSensorN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapSensorN.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapSensorN.setDescription('The id of temperature sensor, 1 to 8')
npThermoTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapValue.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapValue.setDescription('Temperature, deg.C')
npThermoTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("failed", 0), ("low", 1), ("norm", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapStatus.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapStatus.setDescription('Temperature status (0=fault, 1=underheat, 2=normal, 3=overheat)')
npThermoTrapLow = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapLow.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapLow.setDescription('Bottom margin of normal temperature range, deg.C')
npThermoTrapHigh = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 280))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapHigh.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapHigh.setDescription('Top margin of normal temperature range, deg.C')
npThermoTrapMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npThermoTrapMemo.setStatus('current')
if mibBuilder.loadTexts: npThermoTrapMemo.setDescription('T channel memo')
npThermoTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8800, 2, 0, 1)).setObjects(("DKSF-48-4-X-X-1", "npThermoTrapSensorN"), ("DKSF-48-4-X-X-1", "npThermoTrapValue"), ("DKSF-48-4-X-X-1", "npThermoTrapStatus"), ("DKSF-48-4-X-X-1", "npThermoTrapLow"), ("DKSF-48-4-X-X-1", "npThermoTrapHigh"), ("DKSF-48-4-X-X-1", "npThermoTrapMemo"))
if mibBuilder.loadTexts: npThermoTrap.setStatus('current')
if mibBuilder.loadTexts: npThermoTrap.setDescription('Status of Thermo sensor is changed (crossing of normal temp. range)')
npIo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900))
npIoTable = MibTable((1, 3, 6, 1, 4, 1, 25728, 8900, 1), )
if mibBuilder.loadTexts: npIoTable.setStatus('current')
if mibBuilder.loadTexts: npIoTable.setDescription('Digital Input/output Table')
npIoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1), ).setIndexNames((0, "DKSF-48-4-X-X-1", "npIoLineN"))
if mibBuilder.loadTexts: npIoEntry.setStatus('current')
if mibBuilder.loadTexts: npIoEntry.setDescription('Digital Input/output Table Row')
npIoLineN = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoLineN.setStatus('current')
if mibBuilder.loadTexts: npIoLineN.setDescription('Number of IO line, from 1 to max supported')
npIoLevelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoLevelIn.setStatus('current')
if mibBuilder.loadTexts: npIoLevelIn.setDescription('Input level, 0 or 1')
npIoLevelOut = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoLevelOut.setStatus('current')
if mibBuilder.loadTexts: npIoLevelOut.setDescription('Output level, 0 or 1')
npIoMemo = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoMemo.setStatus('current')
if mibBuilder.loadTexts: npIoMemo.setDescription('IO line memo')
npIoPulseCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoPulseCounter.setStatus('current')
if mibBuilder.loadTexts: npIoPulseCounter.setDescription('Pulse Counter on IO input line (counts positive fronts) Write 0 to reset.')
npIoSinglePulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoSinglePulseDuration.setStatus('current')
if mibBuilder.loadTexts: npIoSinglePulseDuration.setDescription('Set duration of single pulse on IO output line, 100ms to 25500ms, min. step is 100ms')
npIoSinglePulseStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25728, 8900, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIoSinglePulseStart.setStatus('current')
if mibBuilder.loadTexts: npIoSinglePulseStart.setDescription('Write 1 to start single pulse on IO output. Output will be inverted for time, specified by npIoSinglePulseDuration')
npIoTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900, 2))
npIoTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 0))
npIoTrapLineN = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapLineN.setStatus('current')
if mibBuilder.loadTexts: npIoTrapLineN.setDescription('Trap data, Number of IO line')
npIoTrapLevelIn = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapLevelIn.setStatus('current')
if mibBuilder.loadTexts: npIoTrapLevelIn.setDescription('Trap data, new Input level, 0 or 1')
npIoTrapMemo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIoTrapMemo.setStatus('current')
if mibBuilder.loadTexts: npIoTrapMemo.setDescription('Trap data, IO line memo')
npIoTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8900, 2, 0, 1)).setObjects(("DKSF-48-4-X-X-1", "npIoTrapLineN"), ("DKSF-48-4-X-X-1", "npIoTrapLevelIn"), ("DKSF-48-4-X-X-1", "npIoTrapMemo"))
if mibBuilder.loadTexts: npIoTrap.setStatus('current')
if mibBuilder.loadTexts: npIoTrap.setDescription('Input state of IO line is changed')
npRelHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400))
npRelHumSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 2))
npRelHumSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("error", 0), ("ok", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorStatus.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorStatus.setDescription("Status of the Rel.Humidity Sensor One 1=Normal, 0=Error or Sensor isn't connected")
npRelHumSensorValueH = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorValueH.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorValueH.setDescription('Relative humidity value, %')
npRelHumSensorValueT = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorValueT.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorValueT.setDescription('Sensor temperature, deg.C')
npRelHumSensorStatusH = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sensorFailed", 0), ("belowSafeRange", 1), ("inSafeRange", 2), ("aboveSafeRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorStatusH.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorStatusH.setDescription('Status of Relative Humiduty')
npRelHumSafeRangeHigh = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSafeRangeHigh.setStatus('current')
if mibBuilder.loadTexts: npRelHumSafeRangeHigh.setDescription('Relative Humidity safe range, top margin, %RH')
npRelHumSafeRangeLow = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSafeRangeLow.setStatus('current')
if mibBuilder.loadTexts: npRelHumSafeRangeLow.setDescription('Relative Humidity safe range, bottom margin, %RH')
npRelHumSensorValueT100 = MibScalar((1, 3, 6, 1, 4, 1, 25728, 8400, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npRelHumSensorValueT100.setStatus('current')
if mibBuilder.loadTexts: npRelHumSensorValueT100.setDescription('Sensor temperature, deg.C * 100 (fixed point two decimal places) Used to get access to the fractional part of T value')
npRelHumTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 9))
npRelHumTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 8400, 9, 0))
npRelHumTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 8400, 9, 0, 1)).setObjects(("DKSF-48-4-X-X-1", "npRelHumSensorStatusH"), ("DKSF-48-4-X-X-1", "npRelHumSensorValueH"), ("DKSF-48-4-X-X-1", "npRelHumSafeRangeHigh"), ("DKSF-48-4-X-X-1", "npRelHumSafeRangeLow"))
if mibBuilder.loadTexts: npRelHumTrap.setStatus('current')
if mibBuilder.loadTexts: npRelHumTrap.setDescription('Status of Relative Humidity RH sensor has changed!')
npGsm = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800))
npGsmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 1))
npGsmFailed = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("failed", 1), ("fatalError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmFailed.setStatus('current')
if mibBuilder.loadTexts: npGsmFailed.setDescription("Firmware's GSM module status")
npGsmRegistration = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("impossible", 0), ("homeNetwork", 1), ("searching", 2), ("denied", 3), ("unknown", 4), ("roaming", 5), ("infoUpdate", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmRegistration.setStatus('current')
if mibBuilder.loadTexts: npGsmRegistration.setDescription('Status of modem registration in GSM network (AT+CREG? result)')
npGsmStrength = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmStrength.setStatus('current')
if mibBuilder.loadTexts: npGsmStrength.setDescription('GSM signal strength. 0..31 = 0..100%, 99 = unknown or n/a, 255 = updating info')
npGsmSendSms = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npGsmSendSms.setStatus('current')
if mibBuilder.loadTexts: npGsmSendSms.setDescription('Send arbitrary SMS. Format: [phone_number,phone_number,...] Message One to four destination phone numbers If [] and numbers omitted, mesagge will be sent to preset numbers from SMS setup Only Latin characters allowed in message body')
npGsmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 2))
npGsmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0))
npGsmTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0, 1)).setObjects(("DKSF-48-4-X-X-1", "npGsmFailed"), ("DKSF-48-4-X-X-1", "npGsmRegistration"), ("DKSF-48-4-X-X-1", "npGsmStrength"))
if mibBuilder.loadTexts: npGsmTrap.setStatus('current')
if mibBuilder.loadTexts: npGsmTrap.setDescription('GSM modem or SMS firmware problems')
npIr = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 7900))
npIrCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 7900, 1))
npIrPlayCmd = MibScalar((1, 3, 6, 1, 4, 1, 25728, 7900, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIrPlayCmd.setStatus('current')
if mibBuilder.loadTexts: npIrPlayCmd.setDescription('Write IR command number to send IR command')
npIrReset = MibScalar((1, 3, 6, 1, 4, 1, 25728, 7900, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIrReset.setStatus('current')
if mibBuilder.loadTexts: npIrReset.setDescription('Write 1 to reset IR transiever. After reset, send IR command and check npIrStatus.')
npIrStatus = MibScalar((1, 3, 6, 1, 4, 1, 25728, 7900, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("commandCompleted", 0), ("protocolError", 1), ("commandAccepted", 2), ("errorUnknown", 16), ("errorBadNumber", 17), ("errorEmptyRecord", 18), ("errorFlashChip", 19), ("errorTimeout", 20), ("errorExtBusBusy", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIrStatus.setStatus('current')
if mibBuilder.loadTexts: npIrStatus.setDescription('IR transiever status')
npReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 911))
npSoftReboot = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSoftReboot.setStatus('current')
if mibBuilder.loadTexts: npSoftReboot.setDescription('Write 1 to reboot device after current operations completition')
npResetStack = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npResetStack.setStatus('current')
if mibBuilder.loadTexts: npResetStack.setDescription('Write 1 to re-initialize network stack')
npForcedReboot = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npForcedReboot.setStatus('current')
if mibBuilder.loadTexts: npForcedReboot.setDescription('Write 1 to immediate forced reboot')
mibBuilder.exportSymbols("DKSF-48-4-X-X-1", npResetStack=npResetStack, npIr=npIr, npIrReset=npIrReset, npGsmTraps=npGsmTraps, npSmoke=npSmoke, npThermoValue=npThermoValue, npPwrEntry=npPwrEntry, npRelHumSensor=npRelHumSensor, npIoEntry=npIoEntry, npRelayFlip=npRelayFlip, npRelHumTrapPrefix=npRelHumTrapPrefix, npIrPlayCmd=npIrPlayCmd, npGsmInfo=npGsmInfo, npPwr=npPwr, npIrStatus=npIrStatus, npThermoMemo=npThermoMemo, npThermoTrapPrefix=npThermoTrapPrefix, npThermoTraps=npThermoTraps, npIoLineN=npIoLineN, npThermoHigh=npThermoHigh, npSmokeTrapSensorN=npSmokeTrapSensorN, npGsmRegistration=npGsmRegistration, npGsmTrapPrefix=npGsmTrapPrefix, npSmokeMemo=npSmokeMemo, npSmokeTrapPrefix=npSmokeTrapPrefix, npIo=npIo, npRelHumSensorStatus=npRelHumSensorStatus, npRelHumSensorValueT=npRelHumSensorValueT, npIoTrapLineN=npIoTrapLineN, npSmokeStatus=npSmokeStatus, npRelHumSafeRangeLow=npRelHumSafeRangeLow, npIoLevelIn=npIoLevelIn, npSmokeTrapStatus=npSmokeTrapStatus, npIoTrapMemo=npIoTrapMemo, npSmokeTrapMemo=npSmokeTrapMemo, npSmokeTrap=npSmokeTrap, npRelayMemo=npRelayMemo, npRelayStartReset=npRelayStartReset, npIoTrapPrefix=npIoTrapPrefix, npPwrResetsCounter=npPwrResetsCounter, npSmokeTraps=npSmokeTraps, npRelay=npRelay, npSmokeSensorN=npSmokeSensorN, npPwrMemo=npPwrMemo, npThermoLow=npThermoLow, lightcom=lightcom, npRelHumSensorStatusH=npRelHumSensorStatusH, npRelayPowered=npRelayPowered, npIoSinglePulseStart=npIoSinglePulseStart, npThermo=npThermo, npThermoTrapValue=npThermoTrapValue, npThermoTrap=npThermoTrap, npGsmTrap=npGsmTrap, npRelHumidity=npRelHumidity, PYSNMP_MODULE_ID=netPing8Pwr, npIoTrap=npIoTrap, npRelHumSafeRangeHigh=npRelHumSafeRangeHigh, npThermoEntry=npThermoEntry, npIoLevelOut=npIoLevelOut, npIoTraps=npIoTraps, npSmokeEntry=npSmokeEntry, npThermoTrapLow=npThermoTrapLow, npIrCtrl=npIrCtrl, npIoTable=npIoTable, npThermoTrapStatus=npThermoTrapStatus, npSmokeReset=npSmokeReset, npRelayEntry=npRelayEntry, npThermoSensorN=npThermoSensorN, npThermoTrapHigh=npThermoTrapHigh, npRelHumTraps=npRelHumTraps, npGsmStrength=npGsmStrength, npPwrRepeatingResetsCounter=npPwrRepeatingResetsCounter, npThermoTrapMemo=npThermoTrapMemo, npIoMemo=npIoMemo, npIoSinglePulseDuration=npIoSinglePulseDuration, npRelayState=npRelayState, npGsm=npGsm, npThermoStatus=npThermoStatus, netPing8Pwr=netPing8Pwr, npThermoTrapSensorN=npThermoTrapSensorN, npSoftReboot=npSoftReboot, npGsmFailed=npGsmFailed, npRelayTable=npRelayTable, npGsmSendSms=npGsmSendSms, npPwrStartReset=npPwrStartReset, npPwrChannelN=npPwrChannelN, npRelayMode=npRelayMode, npSmokeTable=npSmokeTable, npForcedReboot=npForcedReboot, npReboot=npReboot, npRelayN=npRelayN, npRelHumSensorValueT100=npRelHumSensorValueT100, npRelHumSensorValueH=npRelHumSensorValueH, npPwrTable=npPwrTable, npThermoTable=npThermoTable, npRelHumTrap=npRelHumTrap, npIoPulseCounter=npIoPulseCounter, npSmokePower=npSmokePower, npIoTrapLevelIn=npIoTrapLevelIn)
