#
# PySNMP MIB module Juniper-UNI-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-UNI-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
atmfM4VcTestType, atmfM4VcTestCode, atmfM4VpTestObject, atmfM4VpTestId, atmfM4VcTestId, atmfM4VcTestObject, atmfM4VpTestCode, atmfM4VpTestType, atmfM4VpTestResult, atmfM4VcTestResult = mibBuilder.importSymbols("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestType", "atmfM4VcTestCode", "atmfM4VpTestObject", "atmfM4VpTestId", "atmfM4VcTestId", "atmfM4VcTestObject", "atmfM4VpTestCode", "atmfM4VpTestType", "atmfM4VpTestResult", "atmfM4VcTestResult")
atmVclVci, atmVclVpi, atmVplVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVclVpi", "atmVplVpi")
AtmVorXAdminStatus, AtmAddr, AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVorXAdminStatus", "AtmAddr", "AtmVpIdentifier", "AtmVcIdentifier")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniEnable, JuniInterfaceLocationType, JuniNextIfIndex, JuniInterfaceLocationValue = mibBuilder.importSymbols("Juniper-TC", "JuniEnable", "JuniInterfaceLocationType", "JuniNextIfIndex", "JuniInterfaceLocationValue")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, IpAddress, ObjectIdentity, Bits, TimeTicks, Unsigned32, Gauge32, ModuleIdentity, Counter32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "IpAddress", "ObjectIdentity", "Bits", "TimeTicks", "Unsigned32", "Gauge32", "ModuleIdentity", "Counter32", "Integer32", "iso")
DisplayString, TruthValue, TimeStamp, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "TextualConvention", "RowStatus")
juniAtmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8))
juniAtmMIB.setRevisions(('2005-11-15 11:33', '2005-08-17 17:26', '2005-02-17 23:15', '2004-12-08 15:22', '2003-12-30 15:07', '2004-02-25 20:23', '2003-09-19 22:01', '2003-07-14 15:37', '2003-01-15 19:32', '2002-08-09 14:03', '2002-08-09 13:40', '2002-01-24 14:00', '2001-12-14 18:04', '2001-11-26 16:39', '2000-11-27 19:51', '2000-08-02 00:00', '2000-05-12 00:00', '2000-01-13 00:00', '1999-08-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniAtmMIB.setRevisionsDescriptions(('Added ATM VC Class support', 'Removed support for: juniAtmIfSvcSignallingTable juniAtmIfPnniRccTable juniAtmSubIfAddress juniAtmSubIfSvcConfigTable.', 'Added the following to juniAtmCircuitOamTable: juniAtmCircuitInOamF5EndToEndLoopbackCmds juniAtmCircuitInOamF5EndToEndLoopbackRsps juniAtmCircuitInOamF5SegmentLoopbackCmds juniAtmCircuitInOamF5SegmentLoopbackRsps juniAtmCircuitOutOamF5EndToEndLoopbackCmds juniAtmCircuitOutOamF5EndToEndLoopbackRsps juniAtmCircuitOutOamF5SegmentLoopbackCmds juniAtmCircuitOutOamF5SegmentLoopbackRsps juniAtmCircuitOamUpCount juniAtmCircuitOamDownCount juniAtmCircuitOamRetryFrequency juniAtmCircuitOamAlarmDownCount juniAtmCircuitOamAlarmClearTimeout Added the following to juniAtmF4FlowOamEndToEndStatsTable: juniAtmF4FlowEndToEndInLoopbackCmds juniAtmF4FlowEndToEndInLoopbackRsps juniAtmF4FlowEndToEndOutLoopbackCmds juniAtmF4FlowEndToEndOutLoopbackRsps Added the following to juniAtmF4FlowOamSegmentStatsTable: juniAtmF4FlowSegmentInLoopbackCmds juniAtmF4FlowSegmentInLoopbackRsps juniAtmF4FlowSegmentOutLoopbackCmds juniAtmF4FlowSegmentOutLoopbackRsps', 'Added aal0 and aal5 values to juniAtmSubIfVccType enumeration. Added ATM Martini cell aggregation configuration objects. Added profile override support. Added bulk-configuration modification support.', 'Added second generation E-series platform support: Imported JuniInterfaceLocationType and JuniInterfaceLocationValue from Juniper-TC to replace JuniAtmLocationType and JuniAtmLocationValue textual conventions, respectively.', 'Added support to export the subinterface description to the line cards. Added advisory receive support for subinterfaces.', 'Added JuniAtmLocationType and JuniAtmLocationValue textual conventions. Added juniAtmSubIfLocationType and juniAtmSubIfLocationTable.', 'Added F4 flow OAM circuit support. Added ATM VP description support. Added bulk circuit configuration support. Corrected enumeration values for UNI signalling versions.', 'Replaced Unisphere names with Juniper names. Changed the juniAtmVcPingProbeCount Range to match CLI. Added null value for juniAtmSubIfVccType.', 'Added receive bandwith support to CAC. Added E164 public addressing support. Added PNNI RCC table support. Added ATM1483 interface MTU config support.', 'Added support for CAC used bandwidth. Added ATM switched virtual connection (SVC) support. Added juniAtmSubIfAddress to the juniAtmSubIfTable.', 'Added support for connection admission control (CAC).', 'Added support from ATM traffic shaping.', 'Added support for NBMA map lists. Added support for ATM ping. Changed juniAtmSubIfVccVcd and juniAtmIfIlmiVcd ranges to (0..2147483647). Added range to juniAtmIfCapabilityMaxVcd. Added rtVbr service catagory to juniAtmSubIfVccTable. Added support for OAM cell filter. Added PVC counter for reveived unknown protocol.', 'Added autoconfig value for juniAtmSubIfVccType. Added in/out summary cell counters. Added juniVpTunnelServiceCategory to juniAtmVpTunnelTable. Added support for atm interface capability traversal.', 'Added the juniAtmCircuitOamTable.', 'Added the juniAtmVpTunnelTable.', 'Added the juniAtmPvcStatisticsTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniAtmMIB.setLastUpdated('200511151133Z')
if mibBuilder.loadTexts: juniAtmMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniAtmMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniAtmMIB.setDescription('The ATM MIB for the Juniper enterprise.')
class JuniAtmNbmaMapName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'An administratively assigned map name. Represents textual information taken from the NVT ASCII character set. The name must be unique per system.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class JuniAtmNbmaMapNameOrNull(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set. See SNMPv2-TC.DisplayString DESCRIPTION for a summary.'
    description = 'An administratively assigned map name. Represents textual information taken from the NVT ASCII character set. The name must be unique per system. Differs from JuniAtmNbmaMapName in that it permits a zero-length string.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class JuniAtmLocationType(TextualConvention, Integer32):
    description = 'Obsolete description of the platform-dependent interpretation of a JuniAtmLocationValue object. This textual convention has been relpaced by Juniper-TC.JuniInterfaceLocationType.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("unknown", 0), ("slotPort", 1))

class JuniAtmLocationValue(TextualConvention, OctetString):
    description = "Obsolete value of a platform-dependent interface location, represented as an OCTET STRING. A corresponding JuniAtmLocationType object identified the mapping of octets to location elements, e.g. 'slot.port'. This textual convention has been replaced by Juniper-TC.JuniInterfaceLocationValue."
    status = 'obsolete'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

juniAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1))
juniAtmIfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1))
juniAtmAal5IfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2))
juniAtmSubIfLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3))
juniAtmNbma = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4))
juniAtmPing = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5))
juniAtmLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 6))
juniAtmVcClass = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7))
juniAtmNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 1), JuniNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in juniAtmIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
juniAtmIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2), )
if mibBuilder.loadTexts: juniAtmIfTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfTable.setDescription('This table contains entries for ATM interfaces present in the system.')
juniAtmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmIfIndex"))
if mibBuilder.loadTexts: juniAtmIfEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfEntry.setDescription('Each entry describes the characteristics of an ATM interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/juniIfTable.')
juniAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfIndex.setDescription('The ifIndex of the ATM interface. When creating entries in this table, suitable values for this object are determined by reading juniAtmNextIfIndex.')
juniAtmIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniAtmIfRowStatus juniAtmIfLowerIfIndex In addition, when creating an entry the following condition must hold: A value for juniAtmIfIndex must have been determined previously, by reading juniAtmNextIfIndex. A corresponding entry in ifTable/ifXTable/juniIfTable is created or destroyed as a result of creating/destroying an entry in this table.')
juniAtmIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfLowerIfIndex.setDescription('The ifIndex of an interface over which this ATM interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
juniAtmIfIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 4), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfIlmiVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfIlmiVpi.setDescription('The VPI of the ILMI of a major ATM interface.')
juniAtmIfIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 5), AtmVcIdentifier().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfIlmiVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfIlmiVci.setDescription('The VCI of the ILMI of a major ATM interface.')
juniAtmIfIlmiVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfIlmiVcd.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfIlmiVcd.setDescription('An integer identifier for the ILMI, used in conjunction with the command-line interface. The value must be unique among VCs configured on the same ATM interface.')
juniAtmIfIlmiPollFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfIlmiPollFrequency.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfIlmiPollFrequency.setDescription('The amount of time in seconds between successive transmissions of ILMI messages on this interface for the purpose of detecting loss of ILMI connectivity. The distinguished value zero disables ILMI connectivity procedures on this interface.')
juniAtmIfIlmiAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfIlmiAdminState.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfIlmiAdminState.setDescription('The administrative status of ILMI in the ATM interface.')
juniAtmIfUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("uniVersionAutoConfig", 0), ("version3Dot0", 1), ("version3Dot1", 2), ("version4Dot0", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfUniVersion.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfUniVersion.setDescription('Use to specify the User Network Interface (UNI) the router should use when ILMI link auto determination is unsuccesful or ILMI is disabled.')
juniAtmIfOamCellRxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oamCellAdminStateDisabled", 0), ("oamCellAdminStateEnabled", 1))).clone('oamCellAdminStateEnabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfOamCellRxAdminState.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfOamCellRxAdminState.setDescription('Use to specify the OAM Cell Receive Administrative state on this interface.')
juniAtmIfInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfInCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfInCells.setDescription('The total number of cells received on this major interface.')
juniAtmIfOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfOutCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfOutCells.setDescription('The total number of cells transmitted on this major interface.')
juniAtmIfVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 268431360))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfVcCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfVcCount.setDescription('The total number of circuits configured on this interface.')
juniAtmIfMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 14), JuniAtmNbmaMapNameOrNull()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfMapGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfMapGroup.setDescription('The NBMA map group this interface is associated with.')
juniAtmIfCacAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 15), JuniEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfCacAdminState.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCacAdminState.setDescription('The administrative staus of CAC on this ATM major interface.')
juniAtmIfCacUbrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfCacUbrWeight.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCacUbrWeight.setDescription('The bandwidth associated with every UBR and UBR with PCR connection configured on the ATM major interface. This value is used for CAC computation. The units are kilo-bits per second (kbps).')
juniAtmIfCacSubscriptionBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfCacSubscriptionBandwidth.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCacSubscriptionBandwidth.setDescription('The subscribed bandwidth of the ATM major interface. If this value is not specified or set to 0, the effective port bandwidth is used. When a Get operation is performed the current effective bandwidth is returned. The units are kilo-bits per second (kbps).')
juniAtmIfCacAvailableBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCacAvailableBandwidth.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCacAvailableBandwidth.setDescription('The available bandwidth in Tx direction of the ATM major interface. As connections are added or deleted on the interface, this value is updated. The units are kilo-bits per second (kbps).')
juniAtmIfCacAvailableBandwidthRx = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCacAvailableBandwidthRx.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfCacAvailableBandwidthRx.setDescription('The available bandwidth in Rx direction of the ATM major interface. As connections are added or deleted on the interface, this value is updated. The units are kilo-bits per second (kbps).')
juniAtmIfE164Autoconversion = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfE164Autoconversion.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfE164Autoconversion.setDescription('The status of E164 autoconversion feature in the ATM interface.')
juniAtmIfE164Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfE164Gateway.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfE164Gateway.setDescription('The status of E164 gateway feature in the ATM interface.')
juniAtmIfE164OneToOneAddrTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfE164OneToOneAddrTrans.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfE164OneToOneAddrTrans.setDescription('The status of E164 one-to-one address translation feature in the ATM interface.')
juniAtmIfOamCellFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oamCellFilterAll", 0), ("oamCellFilterAlarm", 1))).clone('oamCellFilterAll')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfOamCellFilter.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfOamCellFilter.setDescription('The type of OAM cells to discard when juniAtmIfOamCellRxAdminState is set to oamCellAdminStateDisabled. The value oamCellFilterAlarm discards received OAM AIS and RDI cells. The value oamCellFilterAll discards all received OAM cells. Note that when juniAtmIfOamCellRxAdminState is set to oamCellAdminStateEnabled, this object has no effect.')
juniAtmIfCacUsedBandwidthUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCacUsedBandwidthUpper.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCacUsedBandwidthUpper.setDescription('The most significant 32 bits of the CAC used bandwidth on the ATM major interface. The least significant 32 bits of the CAC used bandwidth are specified by juniAtmIfCacUsedBandwidthLower.')
juniAtmIfCacUsedBandwidthLower = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCacUsedBandwidthLower.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCacUsedBandwidthLower.setDescription('The least significant 32 bits of the CAC used bandwidth on the ATM major interface. The most significant 32 bits of the CAC used bandwidth are specified by juniAtmIfCacUsedBandwidthUpper.')
juniAtmIfAssociatedVcClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 2, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmIfAssociatedVcClassId.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfAssociatedVcClassId.setDescription('The integer identifier of the ATM VC class associated with this ATM interface. A value for this identifier is determined by locating or creating an ATM VC class name in the juniAtmVcClassNameTable. A value of 0 means no VC class association exists for this interface.')
juniAtmPvcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3), )
if mibBuilder.loadTexts: juniAtmPvcStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatisticsTable.setDescription('This table contains statistics for PVC entries.')
juniAtmPvcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmPvcStatsIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmPvcStatsVpi"), (0, "Juniper-UNI-ATM-MIB", "juniAtmPvcStatsVci"))
if mibBuilder.loadTexts: juniAtmPvcStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatisticsEntry.setDescription('Each entry provides statistics on an ATM PVC.')
juniAtmPvcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmPvcStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsIfIndex.setDescription('The ifIndex of the ATM interface.')
juniAtmPvcStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: juniAtmPvcStatsVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsVpi.setDescription('The VPI of the ATM VCC used by this ATM interface and PVC.')
juniAtmPvcStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: juniAtmPvcStatsVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsVci.setDescription('The VCI of the ATM VCC used by this ATM interface and PVC.')
juniAtmPvcStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInCells.setDescription('Received cells.')
juniAtmPvcStatsInCellOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInCellOctets.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInCellOctets.setDescription('Received cells octets.')
juniAtmPvcStatsInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInPackets.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInPackets.setDescription('Received AAL PDUs.')
juniAtmPvcStatsInPacketOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketOctets.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketOctets.setDescription('Received AAL PDU octets.')
juniAtmPvcStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsOutCells.setDescription('Transmitted cells.')
juniAtmPvcStatsOutCellOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsOutCellOctets.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsOutCellOctets.setDescription('Transmitted cell octets.')
juniAtmPvcStatsOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsOutPackets.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsOutPackets.setDescription('Transmitted AAL PDUs.')
juniAtmPvcStatsOutPacketOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsOutPacketOctets.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsOutPacketOctets.setDescription('Transmitted AAL PDU octets.')
juniAtmPvcStatsInCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInCellErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInCellErrors.setDescription('Received cells dropped due to errors.')
juniAtmPvcStatsinPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsinPacketErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsinPacketErrors.setDescription('Received packets dropped due to errors.')
juniAtmPvcStatsOutCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsOutCellErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsOutCellErrors.setDescription('Cells not transmitted due to errors.')
juniAtmPvcStatsOutPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsOutPacketErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsOutPacketErrors.setDescription('Packets not transmitted due to errors.')
juniAtmPvcStatsInPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketDiscards.setDescription('Received packets w/o errors discarded.')
juniAtmPvcStatsInPacketOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketOctetDiscards.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketOctetDiscards.setDescription('Received bytes w/o errors discarded.')
juniAtmPvcStatsInPacketUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketUnknownProtocol.setStatus('current')
if mibBuilder.loadTexts: juniAtmPvcStatsInPacketUnknownProtocol.setDescription('Received packets that are discarded because the interface can not discern or is not configured to support this protocol.')
juniAtmVpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4), )
if mibBuilder.loadTexts: juniAtmVpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelTable.setDescription('This table contains entries for ATM VP Tunnels present in the system.')
juniAtmVpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmVpTunnelIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmVpTunnelVpi"))
if mibBuilder.loadTexts: juniAtmVpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelEntry.setDescription('Each entry describes the characteristics of an ATM VP Tunnel.')
juniAtmVpTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmVpTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelIfIndex.setDescription('The ifIndex of the ATM interface. The value of this object is the same as the juniAtmIfIndex object in the juniAtmIfTable. Entries in this table cannot be created unless the underlying ATM interface entry is created first in the juniAtmIfTable.')
juniAtmVpTunnelVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: juniAtmVpTunnelVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelVpi.setDescription('The VPI value for this VP tunnel entry.')
juniAtmVpTunnelKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmVpTunnelKbps.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelKbps.setDescription('The tunnel rate in kilobits per second (kbps) for this entry.')
juniAtmVpTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmVpTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniAtmVpTunnelRowStatus juniAtmVpTunnelKbps In addition, when creating an entry the following condition must hold: A correponding juniAtmVpTunnelIfIndex value must have been created in the juniAtmIfTable previously.')
juniAtmVpTunnelServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrtVbr", 1), ("cbr", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmVpTunnelServiceCategory.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelServiceCategory.setDescription('The ATM service category for the tunnel.')
juniAtmIfCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5), )
if mibBuilder.loadTexts: juniAtmIfCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityTable.setDescription('This table contains entries for ATM interfaces present in the system.')
juniAtmIfCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityIndex"))
if mibBuilder.loadTexts: juniAtmIfCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityEntry.setDescription('Each entry describes the capabilities of an ATM interface. A management client can use this table to determine differences in the configurable level of support across entries in this table.')
juniAtmIfCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmIfCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityIndex.setDescription('The ifIndex of the ATM interface. The value of this object is the same as juniAtmIfIndex in the juniAtmIfTable.')
juniAtmIfCapabilityTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityTrafficShaping.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityTrafficShaping.setDescription('Indicates whether traffic shaping is supported on this interface; true(1) indicates that it is, false(2) indicates that it is not.')
juniAtmIfCapabilityOam = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityOam.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityOam.setDescription('Indicates whether OAM is supported on this interface; true(1) indicates that it is, false(2) indicates that it is not.')
juniAtmIfCapabilityDefaultVcPerVp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityDefaultVcPerVp.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityDefaultVcPerVp.setDescription('The default number of VCs per VP for this interface.')
juniAtmIfCapabilityNumVpiVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityNumVpiVciBits.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityNumVpiVciBits.setDescription('The total range of bits used for constructing VPI/VCI identifiers for this interface.')
juniAtmIfCapabilityMaxVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityMaxVcd.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityMaxVcd.setDescription('The maximum configurable value for a VCD on this interface.')
juniAtmIfCapabilityMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 7), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityMaxVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityMaxVpi.setDescription('The maximum configurable value for a VPI on this interface.')
juniAtmIfCapabilityMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 8), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityMaxVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityMaxVci.setDescription('The maximum configurable value for a VCI on this interface.')
juniAtmIfCapabilityOamCellFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmIfCapabilityOamCellFilter.setStatus('current')
if mibBuilder.loadTexts: juniAtmIfCapabilityOamCellFilter.setDescription('Indicates whether OAM cell filter is supported on this interface; true(1) indicates that it is, false(2) indicates that it is not.')
juniAtmIfSvcSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6), )
if mibBuilder.loadTexts: juniAtmIfSvcSignallingTable.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfSvcSignallingTable.setDescription('This table contains entries for extending the juniAtmIfTable for configuring signalling information for switched virtual connection (SVC).')
juniAtmIfSvcSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmIfIndex"))
if mibBuilder.loadTexts: juniAtmIfSvcSignallingEntry.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfSvcSignallingEntry.setDescription('Each entry provides configuration parameters for ATM signalling on the interface.')
juniAtmIfSvcSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 1), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfSvcSignallingVpi.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfSvcSignallingVpi.setDescription('The VPI identifier of the ATM circuit used for signalling for this interface.')
juniAtmIfSvcSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 2), AtmVcIdentifier().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfSvcSignallingVci.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfSvcSignallingVci.setDescription('The VCI identifier of the ATM circuit used for signalling for this interface.')
juniAtmIfSvcSignallingVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfSvcSignallingVcd.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfSvcSignallingVcd.setDescription('An integer identifier for the ATM circuit used for signalling on this interface.')
juniAtmIfSvcSignallingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 6, 1, 4), AtmVorXAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfSvcSignallingAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmIfSvcSignallingAdminStatus.setDescription('The administrative status of signalling on the ATM interface.')
juniAtmIfPnniRccTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 7), )
if mibBuilder.loadTexts: juniAtmIfPnniRccTable.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfPnniRccTable.setDescription('This table contains entries for extending the juniAtmIfTable for configuring PNNI RCC information.')
juniAtmIfPnniRccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 7, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmIfIndex"))
if mibBuilder.loadTexts: juniAtmIfPnniRccEntry.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfPnniRccEntry.setDescription('Each entry provides configuration parameters for PNNI RCC on the interface.')
juniAtmIfPnniRccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 7, 1, 1), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfPnniRccVpi.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfPnniRccVpi.setDescription('The VPI identifier of the ATM circuit used for PNNI RCC on this interface.')
juniAtmIfPnniRccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 7, 1, 2), AtmVcIdentifier().clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfPnniRccVci.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfPnniRccVci.setDescription('The VCI identifier of the ATM circuit used for PNNI RCC on this interface.')
juniAtmIfPnniRccVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfPnniRccVcd.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfPnniRccVcd.setDescription('An integer identifier for the ATM circuit used for PNNI RCC on this interface.')
juniAtmIfPnniRccAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 7, 1, 4), AtmVorXAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmIfPnniRccAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmIfPnniRccAdminStatus.setDescription('The administrative status of PNNI on the ATM interface.')
juniAtmOamF4FlowEndToEndCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8), )
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCfgTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCfgTable.setDescription('This table contains entries for F4 OAM end-to-end flows configured.')
juniAtmOamF4FlowEndToEndCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndVpi"))
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCfgEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCfgEntry.setDescription('Each entry provides configuration parameters for one F4 OAM end-to-end flow configured for each VPI.')
juniAtmOamF4FlowEndToEndIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndIfIndex.setDescription('The ifIndex of the ATM interface to configure the F4 OAM end-to-end flow.')
juniAtmOamF4FlowEndToEndVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndVpi.setDescription('Select the VPI for F4 OAM end-to-end flow configuration.')
juniAtmOamF4FlowEndToEndLoopbackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600)).clone(-1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndLoopbackTimer.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndLoopbackTimer.setDescription('Configure the timer for sending the F4 flow end-to-end loopback OAM cells. Setting this value will enable sending the F4 end cells on the circuit. It is not allowed to set the value to -1 and whenever it is read as -1 that means sending end loopback is not enabled. Setting the loopback timer, other than -1, will enable sending the end cells.')
juniAtmOamF4FlowEndToEndCCSink = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCCSink.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCCSink.setDescription('Enable/Disable F4 flow end-to-end continuity check sink end point for this VP.')
juniAtmOamF4FlowEndToEndCCSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCCSource.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndCCSource.setDescription('Enable/Disable F4 flow end-to-end continuity check source end point for this VP.')
juniAtmOamF4FlowEndToEndRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowEndToEndRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create/delete an entry in this table, the following entry objects MUST be explicitly configured: juniAtmOamF4FlowEndToEndRowStatus F4 OAM end loopback and CC tests are mutually exclusive, enabling one will disable the other automatically. So, it is not allowed either at the circuit creation time or after the circuit creation to issue a request to enable end-to-end loopback and CC tests simultaneouly. Enabling/disabling CC sink and source is one time operation. To re-enable either CC source and sink in way different to earlier, both has to be disabled from the previous.')
juniAtmOamF4FlowSegmentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9), )
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCfgTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCfgTable.setDescription('This table contains entries for F4 OAM Segment flows configured.')
juniAtmOamF4FlowSegmentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentVpi"))
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCfgEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCfgEntry.setDescription('Each entry provides configuration parameters for one F4 OAM Segment flow configured for each VPI.')
juniAtmOamF4FlowSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentIfIndex.setDescription('The ifIndex of the ATM interface to configure the F4 OAM segment flow.')
juniAtmOamF4FlowSegmentVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentVpi.setDescription('Select the VPI for F4 OAM segment flow configuration.')
juniAtmOamF4FlowSegmentCCSink = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCCSink.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCCSink.setDescription('Enable/Disable F4 flow segment continuity check sink end point for this VP.')
juniAtmOamF4FlowSegmentCCSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCCSource.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentCCSource.setDescription('Enable/Disable F4 flow segment continuity check source end point for this VP.')
juniAtmOamF4FlowSegmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmOamF4FlowSegmentRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create/delete an entry in this table, the following entry objects MUST be explicitly configured: juniAtmOamF4FlowSegmentRowStatus Enabling/disabling CC sink and source is one time operation. To re-enable either CC source and sink in way different to earlier, both has to be disabled from the previous. F4 OAM segment loopback test is not supported.')
juniAtmVpDescrTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 10), )
if mibBuilder.loadTexts: juniAtmVpDescrTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpDescrTable.setDescription('This table contains entries for ATM VP Description present in the system. The user can configure a description of up to 32 characters for every VP in the ATM interface. A row exists for every VP on the ATM interface. These rows get created as soon as the ATM major interface created.')
juniAtmVpDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: juniAtmVpDescrEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpDescrEntry.setDescription('Each entry contains the description of the VP.')
juniAtmVpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 10, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVpDescription.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpDescription.setDescription('The description for this VP. The default value of this object is null string.')
juniAtmF4FlowOamEndToEndStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11), )
if mibBuilder.loadTexts: juniAtmF4FlowOamEndToEndStatsTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamEndToEndStatsTable.setDescription('This table contains entries for F4 flow EndToEnd OAM circuits stats.')
juniAtmF4FlowOamEndToEndStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndVpi"))
if mibBuilder.loadTexts: juniAtmF4FlowOamEndToEndStatsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamEndToEndStatsEntry.setDescription('Each entry provides stats for one F4 OAM circuit for each VPI.')
juniAtmF4FlowInOamEndAisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 1), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndAisCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndAisCells.setDescription('Received end-to-end OAM F4 AIS cells.')
juniAtmF4FlowInOamEndRdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 2), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndRdiCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndRdiCells.setDescription('Received end-to-end OAM F4 RDI cells.')
juniAtmF4FlowInOamEndCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 3), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndCCCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndCCCells.setDescription('Received end-to-end OAM F4 CC cells.')
juniAtmF4FlowInOamEndCCActDeActCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 4), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndCCActDeActCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndCCActDeActCells.setDescription('Received end-to-end OAM F4 activation/de-activation cells.')
juniAtmF4FlowInOamEndLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 5), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamEndLoopbackCells.setDescription('Total received OAM F4 end-to-end loopback cells. Aggregate of juniAtmF4FlowEndToEndInLoopbackCmds and juniAtmF4FlowEndToEndInLoopbackRsps')
juniAtmF4FlowOutEndRdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutEndRdiCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutEndRdiCells.setDescription('Transmitted end-to-end OAM F4 RDI cells.')
juniAtmF4FlowOutEndCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 7), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutEndCCCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutEndCCCells.setDescription('Transmitted end-to-end OAM F4 CC cells.')
juniAtmF4FlowOutEndCCActDeActCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutEndCCActDeActCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutEndCCActDeActCells.setDescription('Transmitted end-to-end OAM F4 activation/de-activation cells.')
juniAtmF4FlowOutEndToEndLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutEndToEndLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutEndToEndLoopbackCells.setDescription('Total transmitted OAM F4 end-to-end loopback cells. Aggregate of juniAtmF4FlowEndToEndOutLoopbackCmds and juniAtmF4FlowEndToEndOutLoopbackRsps')
juniAtmF4FlowEndActualLoopbackFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndActualLoopbackFreq.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndActualLoopbackFreq.setDescription('Actual end-to-end loopback Frequecy calculated for OAM cells transmission.')
juniAtmF4FlowEndLastTimeChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndLastTimeChanged.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndLastTimeChanged.setDescription('Last time end-to-end F4 OAM flow got changed.')
juniAtmF4FlowOamEndVpOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vcAisState", 0), ("vcRdiState", 1), ("vcDownRetry", 2), ("vcUpRetry", 3), ("vcUp", 4), ("vcDown", 5), ("vcNotManaged", 6), ("vpAisState", 7), ("vpRdiState", 8), ("vcInVpRdiState", 9), ("vcInVpAisState", 10), ("vcSegmentAisState", 11), ("vcSegRdiState", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOamEndVpOperationState.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamEndVpOperationState.setDescription('Represents the F4 end-to-end OAM flow VP operation states. It can take one of the following operational state values: vcAisState - AIS cell received or underlying physical layer reporting transmission path AIS. vcRdiState - RDI cell received. vcDownRetry - OAM loopback failed, using retry frequency to verify that the VC is really down. vcUpRetry - OAM loopback successful, using retry frequency to verify that the VC is really up. vcUp - OAM loopback successful after up retry verification. vcDown - OAM loopback failed after down retry verification. vcNotManaged - No verification via loopback cells being performed. vpAisState - State when F4 AIS cell is received. vpRdiState - State when F4 RDI cell is received. vcInVpRdiState - The data vc is down as a result of VP failure thorugh F4 Rdi oam cell. vcInVpAisState - The data vc is down as a result of VP failure through F4 Ais oam cell. vcSegmentAisState - Segment AIS cell received. vcSegRdiState - Segment RDI cell received.')
juniAtmF4FlowOamEndVpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOamEndVpAdminState.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamEndVpAdminState.setDescription('End-to-end VP admin state.')
juniAtmF4FlowEndInOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 14), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndInOamCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndInOamCells.setDescription('Received end-to-end OAM F4 loopback cells.')
juniAtmF4FlowEndOutOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 15), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndOutOamCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndOutOamCells.setDescription('Transmitted end-to-end OAM F4 loopback cells.')
juniAtmF4FlowEndInOamCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 16), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndInOamCellsDropped.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndInOamCellsDropped.setDescription('Received end-to-end OAM cells that were dropped.')
juniAtmF4FlowEndToEndInLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 17), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndInLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndInLoopbackCmds.setDescription('Received OAM F4 end-to-end loopback commands.')
juniAtmF4FlowEndToEndInLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 18), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndInLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndInLoopbackRsps.setDescription('Received OAM F4 end-to-end loopback responses.')
juniAtmF4FlowEndToEndOutLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 19), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndOutLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndOutLoopbackCmds.setDescription('Transmitted OAM F4 end-to-end loopback commands.')
juniAtmF4FlowEndToEndOutLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 11, 1, 20), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndOutLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowEndToEndOutLoopbackRsps.setDescription('Transmitted OAM F4 end-to-end loopback responses.')
juniAtmF4FlowOamSegmentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12), )
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentStatsTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentStatsTable.setDescription('This table contains entries for F4 flow Segment OAM circuits stats.')
juniAtmF4FlowOamSegmentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentVpi"))
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentStatsEntry.setDescription('Each entry provides stats for one F4 OAM circuit for each VPI.')
juniAtmF4FlowInOamSegmentAisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 1), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentAisCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentAisCells.setDescription('Received end-to-end OAM F4 AIS cells.')
juniAtmF4FlowInOamSegmentRdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 2), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentRdiCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentRdiCells.setDescription('Received end-to-end OAM F4 RDI cells.')
juniAtmF4FlowInOamSegmentCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 3), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentCCCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentCCCells.setDescription('Received end-to-end OAM F4 CC cells.')
juniAtmF4FlowInOamSegmentCCActDeActCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 4), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentCCActDeActCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentCCActDeActCells.setDescription('Received end-to-end OAM F4 activation/de-activation cells.')
juniAtmF4FlowInOamSegmentLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 5), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowInOamSegmentLoopbackCells.setDescription('Total received OAM F4 segment loopback cells. Aggregate of juniAtmF4FlowSegmentInLoopbackCmds and juniAtmF4FlowSegmentInLoopbackRsps')
juniAtmF4FlowOutSegmentRdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 6), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentRdiCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentRdiCells.setDescription('Transmitted end-to-end OAM F4 RDI cells.')
juniAtmF4FlowOutSegmentCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 7), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentCCCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentCCCells.setDescription('Transmitted end-to-end OAM F4 CC cells.')
juniAtmF4FlowOutSegmentCCActDeActCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentCCActDeActCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentCCActDeActCells.setDescription('Transmitted end-to-end OAM F4 activation/de-activation cells.')
juniAtmF4FlowOutSegmentLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOutSegmentLoopbackCells.setDescription('Total transmitted OAM F4 segment loopback cells. Aggregate of juniAtmF4FlowSegmentOutLoopbackCmds and juniAtmF4FlowSegmentOutLoopbackRsps')
juniAtmF4FlowSegmentLastTimeChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentLastTimeChanged.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentLastTimeChanged.setDescription('Last time end-to-end F4 OAM flow got changed.')
juniAtmF4FlowOamSegmentVpOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("vcAisState", 0), ("vcRdiState", 1), ("vcDownRetry", 2), ("vcUpRetry", 3), ("vcUp", 4), ("vcDown", 5), ("vcNotManaged", 6), ("vpAisState", 7), ("vpRdiState", 8), ("vcInVpRdiState", 9), ("vcInVpAisState", 10), ("vcSegmentAisState", 11), ("vcSegRdiState", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentVpOperationState.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentVpOperationState.setDescription('Represents the F4 end-to-end OAM flow VP operation states. It can take one of the following operational state values: vcAisState - AIS cell received or underlying physical layer reporting transmission path AIS. vcRdiState - RDI cell received. vcDownRetry - OAM loopback failed, using retry frequency to verify that the VC is really down. vcUpRetry - OAM loopback successful, using retry frequency to verify that the VC is really up. vcUp - OAM loopback successful after up retry verification. vcDown - OAM loopback failed after down retry verification. vcNotManaged - No verification via loopback cells being performed. vpAisState - State when F4 AIS cell is received. vpRdiState - State when F4 RDI cell is received. vcInVpRdiState - The data vc is down as a result of VP failure thorugh F4 Rdi oam cell. vcInVpAisState - The data vc is down as a result of VP failure through F4 Ais oam cell. vcSegmentAisState - Segment AIS cell received. vcSegRdiState - Segment RDI cell received.')
juniAtmF4FlowOamSegmentVpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentVpAdminState.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowOamSegmentVpAdminState.setDescription('Segment VP admin state.')
juniAtmF4FlowSegmentInOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 13), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInOamCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInOamCells.setDescription('Received end-to-end OAM F4 loopback cells.')
juniAtmF4FlowSegmentOutOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 14), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentOutOamCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentOutOamCells.setDescription('Transmitted end-to-end OAM F4 loopback cells.')
juniAtmF4FlowSegmentInOamCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 15), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInOamCellsDropped.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInOamCellsDropped.setDescription('Received end-to-end OAM cells that were dropped.')
juniAtmF4FlowSegmentInLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 16), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInLoopbackCmds.setDescription('Received OAM F4 segment loopback commands.')
juniAtmF4FlowSegmentInLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 17), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentInLoopbackRsps.setDescription('Received OAM F4 segment loopback responses.')
juniAtmF4FlowSegmentOutLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 18), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentOutLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentOutLoopbackCmds.setDescription('Transmitted OAM F4 segment loopback commands.')
juniAtmF4FlowSegmentOutLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 12, 1, 19), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmF4FlowSegmentOutLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4FlowSegmentOutLoopbackRsps.setDescription('Transmitted OAM F4 segment loopback responses.')
juniAtmMartiniTimeoutTimerTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 13), )
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerTable.setDescription('This table contains entries for ATM Martini cell aggregation timeout detection. The user can configure timeout values for three timers. A row exists for every separate timer supported. These rows get created as soon as the ERX system comes up.')
juniAtmMartiniTimeoutTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 13, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmMartiniTimeoutTimerIndex"))
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerEntry.setDescription('Each entry contains the timeout value of ATM Martini cell aggregation timer.')
juniAtmMartiniTimeoutTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timer1", 1), ("timer2", 2), ("timer3", 3))))
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerIndex.setDescription('The ATM Martini cell aggregation timeout timer identifier.')
juniAtmMartiniTimeoutTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 4095)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerValue.setStatus('current')
if mibBuilder.loadTexts: juniAtmMartiniTimeoutTimerValue.setDescription('The ATM Martini cell aggregation timeout timer value in microseconds.')
juniAtmVpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14), )
if mibBuilder.loadTexts: juniAtmVpStatsTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsTable.setDescription('This table contains entries for ATM VP statistics present in the system. A row exists for every VP on the ATM interface. These rows get created as soon as the ATM major interface created.')
juniAtmVpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: juniAtmVpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsEntry.setDescription('Each entry contain the VP statistics.')
juniAtmVpStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmVpStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsIfIndex.setDescription('The ifIndex of the ATM interface.')
juniAtmVpStatsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: juniAtmVpStatsVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsVpi.setDescription('The VPI value of the virtual path for which statistics are retrieved.')
juniAtmVpStatsInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInCells.setDescription('Received cells.')
juniAtmVpStatsInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInPackets.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInPackets.setDescription('Received AAL5 PDUs.')
juniAtmVpStatsInPacketOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInPacketOctets.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInPacketOctets.setDescription('Received AAL5 PDU octets.')
juniAtmVpStatsOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsOutCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsOutCells.setDescription('Transmitted cells.')
juniAtmVpStatsOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsOutPackets.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsOutPackets.setDescription('Transmitted AAL5 PDUs')
juniAtmVpStatsOutPacketOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsOutPacketOctets.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsOutPacketOctets.setDescription('Transmitted AAL5 PDU octets.')
juniAtmVpStatsInPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInPacketErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInPacketErrors.setDescription('Received packets dropped due to errors.')
juniAtmVpStatsOutPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsOutPacketErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsOutPacketErrors.setDescription('Packets not transmitted due to errors.')
juniAtmVpStatsInPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInPacketDiscards.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInPacketDiscards.setDescription('Received packets without errors discarded.')
juniAtmVpStatsInPacketOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInPacketOctetDiscards.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInPacketOctetDiscards.setDescription('Received bytes without errors discarded.')
juniAtmVpStatsInPacketUnknownProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsInPacketUnknownProtocol.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsInPacketUnknownProtocol.setDescription('Received packets that are discarded because the interface can not discern or is not configured to support this protocol.')
juniAtmVpStatsCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsCrcErrors.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsCrcErrors.setDescription('Received packets that are discarded because of check sum erros')
juniAtmVpStatsSarTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsSarTimeouts.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsSarTimeouts.setDescription('Received packets that are discarded because of SAR timeout')
juniAtmVpStatsOverSizedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 1, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpStatsOverSizedPackets.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsOverSizedPackets.setDescription('Over sized packets that are received on this VP.')
juniAtmAal5NextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 1), JuniNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmAal5NextIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5NextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in juniAtmAal5IfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
juniAtmAal5IfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2), )
if mibBuilder.loadTexts: juniAtmAal5IfTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5IfTable.setDescription('This table contains entries for ATM AAL5 interfaces present in the system.')
juniAtmAal5IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmAal5IfIndex"))
if mibBuilder.loadTexts: juniAtmAal5IfEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5IfEntry.setDescription('Each entry describes the characteristics of an ATM AAL5 interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/juniIfTable.')
juniAtmAal5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmAal5IfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5IfIndex.setDescription('The ifIndex of the ATM AAL5 interface. When creating entries in this table, suitable values for this object are determined by reading juniAtmAal5NextIfIndex.')
juniAtmAal5IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmAal5IfRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5IfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniAtmAal5IfRowStatus juniAtmAal5IfLowerIfIndex In addition, when creating an entry the following condition must hold: A value for juniAtmAal5IfIndex must have been determined previously, by reading juniAtmAal5NextIfIndex. A corresponding entry in ifTable/ifXTable/juniIfTable is created or destroyed as a result of creating/destroying an entry in this table.')
juniAtmAal5IfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmAal5IfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5IfLowerIfIndex.setDescription('The ifIndex of an ATM interface over which this ATM AAL5 interface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
juniAtmBulkCircuitsNameTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 3), )
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameTable.setDescription('The entries in this table provide mappings of ATM bulk virtual circuit range names to local integer identifiers for those profiles. These integers are used as indexes into other MIB tables containing profile configuration parameters associated with the same profile name.')
juniAtmBulkCircuitsNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 3, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameAal5IfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameName"))
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameEntry.setDescription('A mapping of a ATM bulk virtual circuit range name to an integer identifier for that name.')
juniAtmBulkCircuitsNameAal5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameAal5IfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameAal5IfIndex.setDescription('The ifIndex of the ATM AAL5 interface.')
juniAtmBulkCircuitsNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameName.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameName.setDescription('The ATM bulk virtual circuit range name uniquely identifying this entry.')
juniAtmBulkCircuitsNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET. Creating an entry in this table creates corresponding entry in juniAtmBulkCircuitsIdTable. Deleting an entry in this table deletes corresponding entries in juniAtmBulkCircuitsIdTable, juniAtmBulkCircuitsTable and juniAtmProfileOverrideAssignIfCircuitTable.")
juniAtmBulkCircuitsNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameId.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsNameId.setDescription('The integer identifier associated with this ATM bulk virtual circuit range name. This value of this identifier is assigned by the device when an entry in this table is created.')
juniAtmBulkCircuitsIdTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 4), )
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdTable.setDescription('Provides inverse mapping of ATM bulk virtual circuit IDs to ATM bulk virtual circuit names.')
juniAtmBulkCircuitsIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 4, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdAal5IfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdId"))
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdEntry.setDescription('A mapping of an integer identifier to a ATM bulk virtual circuit name.')
juniAtmBulkCircuitsIdAal5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdAal5IfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdAal5IfIndex.setDescription('The ifIndex of the ATM AAL5 interface.')
juniAtmBulkCircuitsIdId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdId.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdId.setDescription('The integer identifier associated with this ATM bulk virtual circuit name.')
juniAtmBulkCircuitsIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdName.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdName.setDescription('The ATM bulk virtual circuit name having the associated identifier.')
juniAtmBulkCircuitsIdNextInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdNextInstance.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsIdNextInstance.setDescription('The next available instance value for juniAtmBulkCircuitsEntry.')
juniAtmBulkCircuitsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5), )
if mibBuilder.loadTexts: juniAtmBulkCircuitsTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsTable.setDescription('This table contains bulk virtual circuit range parameters.')
juniAtmBulkCircuitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsAal5IfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsId"), (0, "Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsInstance"))
if mibBuilder.loadTexts: juniAtmBulkCircuitsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsEntry.setDescription('Each entry describes the characteristics of VC range.')
juniAtmBulkCircuitsAal5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmBulkCircuitsAal5IfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsAal5IfIndex.setDescription('The ifIndex of the ATM AAL5 interface on which this bulk virtual circuit sub-range is created.')
juniAtmBulkCircuitsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniAtmBulkCircuitsId.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsId.setDescription('The integer identifier associated with this ATM bulk virtual circuit name.')
juniAtmBulkCircuitsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 3), Unsigned32())
if mibBuilder.loadTexts: juniAtmBulkCircuitsInstance.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsInstance.setDescription('The unique identifier of the ATM bulk virtual circuit sub-range.')
juniAtmBulkCircuitsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET. Since none of the VPI/VCI minimum and maximum values have default values, all these values must be specified before setting RowStatus to 'createAndGo'. The VPI/VCI minimum and maximum values can only be configured upon creation. Deleting an entry in this table deletes corresponding entries in juniAtmProfileOverrideAssignIfCircuitTable.")
juniAtmBulkCircuitsMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 5), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsMinVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsMinVpi.setDescription('The minimum value of VPI for this circuit sub-range. This value must be less than or equal to the value of juniAtmBulkCircuitsMaxVpi.')
juniAtmBulkCircuitsMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 6), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsMaxVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsMaxVpi.setDescription('The maximum value of VPI for this cicuit sub-range. This value must be equal to or greater than the value of juniAtmBulkCircuitsMinVpi.')
juniAtmBulkCircuitsMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 7), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsMinVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsMinVci.setDescription('The minimum value of VCI for this circuit sub-range. This value must be less than or equal to the value of juniAtmBulkCircuitsMaxVci.')
juniAtmBulkCircuitsMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 8), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsMaxVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsMaxVci.setDescription('The maximum value of VCI for this circuit sub-range. This value must be equal to or greater than the value of juniAtmBulkCircuitsMinVci.')
juniAtmBulkCircuitsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 5, 1, 9), JuniEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmBulkCircuitsAdminState.setStatus('current')
if mibBuilder.loadTexts: juniAtmBulkCircuitsAdminState.setDescription('The administrative status of this circuit sub-range.')
juniAtmProfileOverrideAssignIfCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6), )
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitTable.setDescription('Table providing overriding profile assignment to a circuit configured as part of bulk-configuration. Circuit is identified by interface index and vpi, vci. The entries in this table specify which profile to use when creating and configuring a dynamic interface above a circuit specified by vpi and vci. This entry is effective when the circuit specified by juniAtmProfileOverrideAssignIfCircuitAal5Index, juniAtmProfileOverrideAssignIfCircuitRangeId, juniAtmProfileOverrideAssignIfCircuitVpi, juniAtmProfileOverrideAssignIfCircuitVci is part of bulk-configuration.')
juniAtmProfileOverrideAssignIfCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitAal5Index"), (0, "Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitRangeId"), (0, "Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitVpi"), (0, "Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitVci"))
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitEntry.setDescription('An assignment of a profile to a circuit configured as part of bulk-configuration on an AAL5 interface.')
juniAtmProfileOverrideAssignIfCircuitAal5Index = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitAal5Index.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitAal5Index.setDescription('The ifIndex of the AAL5 interface to which the profile is assigned.')
juniAtmProfileOverrideAssignIfCircuitRangeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitRangeId.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitRangeId.setDescription('The integer identifier associated with the ATM bulk circuit configuration.')
juniAtmProfileOverrideAssignIfCircuitVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 3), AtmVpIdentifier())
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitVpi.setDescription('The VPI value of the circuit to which the profile is assigned.')
juniAtmProfileOverrideAssignIfCircuitVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 4), AtmVcIdentifier())
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitVci.setDescription('The VCI value of the circuit to which the profile is assigned.')
juniAtmProfileOverrideAssignIfCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' and 'destroy' may be SET. Since the VPI, VCI and profileId values do not have any default values, all these values must be specified before setting RowStatus to 'createAndGo'. The VPI, VCI and profileId values can only be configured upon creation. None of these values can be modified except by deleting the entry.")
juniAtmProfileOverrideAssignIfCircuitProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitProfileId.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitProfileId.setDescription('The ID of the profile assigned to the circuit configured as part of bulk-configuration. Circuit is identified by interface index and vpi, vci.')
juniAtmProfileOverrideAssignIfCircuitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitOperStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmProfileOverrideAssignIfCircuitOperStatus.setDescription('The operational status of the profile override assignment identified by this entry. It returns inactive(0), if a static ATM circuit with identical VPI/VCI values is present on the same ATM interface. In this case, this profile override will not be used to configure upper dynamic interfaces. It returns active(1), if no static ATM circuit with identical VPI/VCI values is present on the same ATM interface. In this case, this profile override will be used to configure upper dynamic interfaces.')
juniAtmSubIfNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 1), JuniNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmSubIfNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in juniAtmSubIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
juniAtmSubIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2), )
if mibBuilder.loadTexts: juniAtmSubIfTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfTable.setDescription('This table contains entries for ATM Subinterfaces present in the system.')
juniAtmSubIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfIndex"))
if mibBuilder.loadTexts: juniAtmSubIfEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfEntry.setDescription('Each entry describes the characteristics of an ATM Subinterface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/juniIfTable.')
juniAtmSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfIndex.setDescription('The ifIndex of the ATM Subinterface. When creating entries in this table, suitable values for this object are determined by reading juniAtmSubNextIfIndex.')
juniAtmSubIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniAtmSubIfRowStatus juniAtmSubIfLowerIndex In addition, when creating an entry the following condition must hold: A value for juniAtmSubIfIndex must have been determined previously, by reading juniAtmSubIfNextIfIndex. A corresponding entry in ifTable/ifXTable/juniIfTable is created or destroyed as a result of creating/destroying an entry in this table.')
juniAtmSubIfDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfDistinguisher.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfDistinguisher.setDescription('An integer identifier for the subinterface, used in conjunction with the command-line interface. It is provided here for cross-reference purposes only. The value must be unique among subinterfaces configured on the same underlying ATM adaptation layer. The upper bound for the value is further constrained to be identical with the maximum number of subinterfaces supported by the lower interface. If this object is not configured, a value will be allocated internally and can be queried after table entry creation has succeeded.')
juniAtmSubIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfLowerIfIndex.setDescription('The ifIndex of an ATM AAL5 interface over which this ATM subinterface is to be layered. A value of zero indicates no layering. An implementation may choose to require that a nonzero value be configured at entry creation.')
juniAtmSubIfNbma = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfNbma.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfNbma.setDescription('The NBMA administrative setting. Setting this value of this object to true(1) will enable multipoint access on this interface. Setting the value to false(2), will enable point to point access on this interface.')
juniAtmSubIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 6), AtmAddr().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 7), ValueSizeConstraint(20, 20), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfAddress.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfAddress.setDescription('Specifies the local ATM NSAP address of the circuit. A GET operation returns a full 20-octet NSAP. A SET operation only requires 7 octets, since the prefix can be implied.')
juniAtmSubIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(9180)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfMtu.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfMtu.setDescription('The size of the largest packet which can be sent/received on the interface, specified in octets.')
juniAtmSubIfAdvisoryRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfAdvisoryRxSpeed.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfAdvisoryRxSpeed.setDescription('Advisory receive speed, in kilobits per second (kbps), of this subinterface. This object has no impact on forwarding performance but may be used as a hint for underlying circuit receive speed.')
juniAtmSubIfMartiniMaxCellsPerPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 190)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfMartiniMaxCellsPerPacket.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfMartiniMaxCellsPerPacket.setDescription('The number of cells that can be aggregated in a single ATM Martini packet in cell-relay mode.')
juniAtmSubIfMartiniTimeoutTimerId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfMartiniTimeoutTimerId.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfMartiniTimeoutTimerId.setDescription('The timer identifier used to abandon cell aggregation when no cells are supplied for transmission in ATM Martini cell-relay mode.')
juniAtmSubIfAssociatedVcClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfAssociatedVcClassId.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfAssociatedVcClassId.setDescription('The integer identifier of the ATM VC class associated with this ATM sub interface. A value for this identifier is determined by locating or creating an ATM VC class name in the juniAtmVcClassNameTable. A value of 0 means no VC class association exists for this interface.')
juniAtmSubIfVccTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3), )
if mibBuilder.loadTexts: juniAtmSubIfVccTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTable.setDescription('This table contains entries for ATM VCCs configured on ATM subinterfaces present in the system. An implementation may constrain the number of VCCs permitted to be configured per ATM Subinterface; in particular, an implementation may restrict each ATM Subinterface to have a single VCC. Attributes in this entry can only be configured at entry creation, and remain fixed for the lifetime of the entry.')
juniAtmSubIfVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVpi"), (0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVci"))
if mibBuilder.loadTexts: juniAtmSubIfVccEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccEntry.setDescription('Each entry describes the characteristics of an ATM subinterface VCC.')
juniAtmSubIfVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: juniAtmSubIfVccVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccVpi.setDescription('The VPI of the ATM VCC used by this subinterface.')
juniAtmSubIfVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 2), AtmVcIdentifier())
if mibBuilder.loadTexts: juniAtmSubIfVccVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccVci.setDescription('The VCI of the ATM VCC used by this subinterface.')
juniAtmSubIfVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: juniAtmSubIfVccRowStatus In addition, when creating an entry the following conditions must hold: The ATM Subinterface identified by juniAtmSubIfIndex must exist. A positive value configured for juniAtmSubIfVccVcd must not already be assigned to an existing VCC. For each value of juniAtmSubIfVccServiceCategory, additional dependent objects in the entry require configuration as identified here: juniAtmSubIfVccServiceCategory Requires configuration of: ------------------------------------------------------------ ubr <none> ubrPcr juniAtmSubIfVccPcr nrtVbr juniAtmSubIfVccPcr juniAtmSubIfVccScr juniAtmSubIfVccMbs cbr juniAtmSubIfVccPcr rtVbr juniAtmSubIfVccPcr juniAtmSubIfVccScr juniAtmSubIfVccMbs ------------------------------------------------------------ Attributes in this entry can only be configured at entry creation, and remain fixed for the lifetime of the entry.')
juniAtmSubIfVccVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccVcd.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccVcd.setDescription('An integer identifier for the circuit, used in conjunction with the command-line interface. It is provided here for cross-reference purposes only. The value must be unique among VCCs configured on the same underlying ATM interface. If this object is not configured, or is configured with a value of zero, a value will be allocated internally and can be queried after table entry creation has succeeded.')
juniAtmSubIfVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1483VcMux", 0), ("rfc1483Llc", 1), ("autoconfig", 2), ("aal5", 3), ("aal0", 4))).clone('rfc1483VcMux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccType.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccType.setDescription("Specifies the encapsulation used by the circuit to carry IP datagrams. Encapsulations are as specified in RFC1483 Multiprotocol Interconnect over ATM. The 'autoconfig' value will recognize both VcMux and LLC formats. The 'aal5' and 'aal0' values are used for encapsulation methods for transport of ATM frames and cells over IP and MPLS networks when no encapsulation method is specified.")
juniAtmSubIfVccServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ubr", 0), ("ubrPcr", 1), ("nrtVbr", 2), ("cbr", 3), ("rtVbr", 4))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccServiceCategory.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccServiceCategory.setDescription('Service category for this circuit: ubr Unspecified Bit Rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-RealTime Variable Bit Rate. cbr Constant Bit Rate. rtVbr Realtime Variable Bit Rate.')
juniAtmSubIfVccPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccPcr.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccPcr.setDescription('Peak Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when juniAtmSubIfVccServiceCategory is configured to have one of the following values: ubrPcr nrtVbr cbr rtVbr ')
juniAtmSubIfVccScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccScr.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccScr.setDescription('Sustained Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when juniAtmSubIfVccServiceCategory is configured to have the following value: nrtVbr rtVbr ')
juniAtmSubIfVccMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccMbs.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccMbs.setDescription('Maximum Burst Size, in cells, of this circuit. This parameter is only required when juniAtmSubIfVccServiceCategory is configured to have the following value: nrtVbr rtVbr ')
juniAtmSubIfInverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfInverseArp.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfInverseArp.setDescription('Enables the inverse ARP protocol on this VCC; true(1) enables the protocol, false(2) disables it.')
juniAtmSubIfInverseArpRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfInverseArpRefresh.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfInverseArpRefresh.setDescription('The refresh rate in minutes between inverse ARP protocol messages.')
juniAtmSubIfVccAssociatedVcClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 3, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccAssociatedVcClassId.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccAssociatedVcClassId.setDescription('The integer identifier of the ATM VC class associated with this ATM sub interface. A value for this identifier is determined by locating or creating an ATM VC class name in the juniAtmVcClassNameTable. A value of 0 means no VC class association exists for this VC.')
juniAtmCircuitOamTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4), )
if mibBuilder.loadTexts: juniAtmCircuitOamTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamTable.setDescription('This table contains circuit OAM data for a PVC.')
juniAtmCircuitOamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmCircuitOamIfIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmCircuitOamVpi"), (0, "Juniper-UNI-ATM-MIB", "juniAtmCircuitOamVci"))
if mibBuilder.loadTexts: juniAtmCircuitOamEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamEntry.setDescription('Each entry provides OAM data on an ATM PVC.')
juniAtmCircuitOamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAtmCircuitOamIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamIfIndex.setDescription('The ifIndex of the ATM subinterface.')
juniAtmCircuitOamVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: juniAtmCircuitOamVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamVpi.setDescription('The VPI of the ATM VCC used by this ATM interface and PVC.')
juniAtmCircuitOamVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: juniAtmCircuitOamVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamVci.setDescription('The VCI of the ATM VCC used by this ATM interface and PVC.')
juniAtmCircuitOamAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oamAdminStateDisabled", 1), ("oamAdminStateEnabled", 2))).clone('oamAdminStateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamAdminStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamAdminStatus.setDescription('The administrative state of OAM for the interface identified by this entry.')
juniAtmCircuitOamLoopbackOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("oamOperStatusNotSupported", 0), ("oamOperStatusDisabled", 1), ("oamOperStatusSent", 2), ("oamOperStatusReceived", 3), ("oamOperStatusFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOamLoopbackOperStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamLoopbackOperStatus.setDescription('The operational status of OAM for the interface identified by this entry. oamOperStatusNotSupported(0) - OAM not supported on this interface oamOperStatusDisabled(1) - VC integrity disabled oamOperStatusSent(2) - Loopback sent, awaiting response oamOperStatusReceived(3) - Loopback response received, awaiting frequency oamOperStatusFailed(4) - Loopback response not received, or invalid response received')
juniAtmCircuitVcOamOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("oamVcOperStateAisState", 0), ("oamVcOperStateRdiState", 1), ("oamVcOperStateDownRetry", 2), ("oamVcOperStateUpRetry", 3), ("oamVcOperStateUp", 4), ("oamVcOperStateDown", 5), ("oamVcOperStateNotManaged", 6), ("oamVcOperStateVpAis", 7), ("oamVcOperStateVpRdi", 8), ("oamVcOperStateVcInVpRdi", 9), ("oamVcoperStateVcInVpAis", 10), ("oamVcOperStateSegAis", 11), ("oamVcOperStateSegRdi", 12), ("oamVcOperStateGenAis", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitVcOamOperStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitVcOamOperStatus.setDescription('The OAM VC operational status of this entry. oamVcOperStateAisState(0) - AIS cell received or underlying physical layer reporting transmission path AIS oamVcOperStateRdiState(1) - RDI cell received oamVcOperStateDownRetry(2) - OAM loopback failed, using retry frequency to verify that the VC is really down oamVcOperStateUpRetry(3) - OAM loopback successful, using retry frequency to verify that the VC is really up oamVcOperStateUp(4) - OAM loopback successful after up retry verification oamVcOperStateDown(5) - OAM loopback failed after down retry verification oamVcOperStateNotManaged(6)- No verification via loopback cells being performed oamVcOperStateVpAis(7) - F4 AIS cell received oamVcOperStateVpRdi(8) - F4 RDI cell received oamVcOperStateVcInVpRdi(9) - F4 RDI cell received; path failure oamVcOperStateVcInVpAis(10)- F4 AIS cell received; path failure oamVcOperStateSegAis(11) - Segment AIS cell received oamVcOperStateSegRdi(12) - Segment RDI cell received oamVcOperStateGenAis(13) - Connection failure; generating AIS cells.')
juniAtmCircuitOamLoopbackFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamLoopbackFrequency.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamLoopbackFrequency.setDescription('The OAM loopback frequency in seconds.')
juniAtmCircuitInOamF5Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 8), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5Cells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5Cells.setDescription('Received OAM F5 cells.')
juniAtmCircuitInOamCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 9), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamCellsDropped.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamCellsDropped.setDescription('Received OAM cells that were dropped.')
juniAtmCircuitOutOamF5Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 10), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5Cells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5Cells.setDescription('Transmitted OAM F5 cells.')
juniAtmCircuitInOamF5EndToEndLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 11), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5EndToEndLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5EndToEndLoopbackCells.setDescription('Total received OAM F5 end-to-end loopback cells. Aggregate of juniAtmCircuitInOamF5EndToEndLoopbackCmds and juniAtmCircuitInOamF5EndToEndLoopbackRsps')
juniAtmCircuitInOamF5SegmentLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 12), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5SegmentLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5SegmentLoopbackCells.setDescription('Total received OAM F5 segment loopback cells. Aggregate of juniAtmCircuitInOamF5SegmentLoopbackCmds and juniAtmCircuitInOamF5SegmentLoopbackRsps')
juniAtmCircuitInOamF5AisCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 13), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5AisCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5AisCells.setDescription('Received OAM F5 AIS cells.')
juniAtmCircuitInOamF5RdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 14), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5RdiCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5RdiCells.setDescription('Received OAM F5 RDI cells.')
juniAtmCircuitOutOamF5EndToEndLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 15), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5EndToEndLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5EndToEndLoopbackCells.setDescription('Total transmitted OAM F5 end-to-end loopback cells. Aggregate of juniAtmCircuitOutOamF5EndToEndLoopbackCmds and juniAtmCircuitOutOamF5EndToEndLoopbackRsps')
juniAtmCircuitOutOamF5SegmentLoopbackCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 16), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5SegmentLoopbackCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5SegmentLoopbackCells.setDescription('Total transmitted OAM F5 segment loopback cells. Aggregate of juniAtmCircuitOutOamF5SegmentLoopbackCmds and juniAtmCircuitOutOamF5SegmentLoopbackRsps')
juniAtmCircuitOutOamF5RdiCells = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 17), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5RdiCells.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5RdiCells.setDescription('Transmitted OAM F5 RDI cells.')
juniAtmCircuitInOamF5EndToEndLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 18), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5EndToEndLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5EndToEndLoopbackCmds.setDescription('Received OAM F5 end-to-end loopback commands.')
juniAtmCircuitInOamF5EndToEndLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 19), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5EndToEndLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5EndToEndLoopbackRsps.setDescription('Received OAM F5 end-to-end loopback responses.')
juniAtmCircuitInOamF5SegmentLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 20), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5SegmentLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5SegmentLoopbackCmds.setDescription('Received OAM F5 segment loopback commands.')
juniAtmCircuitInOamF5SegmentLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 21), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitInOamF5SegmentLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitInOamF5SegmentLoopbackRsps.setDescription('Received OAM F5 segment loopback responses.')
juniAtmCircuitOutOamF5EndToEndLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 22), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5EndToEndLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5EndToEndLoopbackCmds.setDescription('Transmitted OAM F5 end-to-end loopback commands.')
juniAtmCircuitOutOamF5EndToEndLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 23), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5EndToEndLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5EndToEndLoopbackRsps.setDescription('Transmitted OAM F5 end-to-end loopback responses.')
juniAtmCircuitOutOamF5SegmentLoopbackCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 24), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5SegmentLoopbackCmds.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5SegmentLoopbackCmds.setDescription('Transmitted OAM F5 segment loopback commands.')
juniAtmCircuitOutOamF5SegmentLoopbackRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 25), Counter32()).setUnits('cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5SegmentLoopbackRsps.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOutOamF5SegmentLoopbackRsps.setDescription('Transmitted OAM F5 segment loopback responses.')
juniAtmCircuitOamUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamUpCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamUpCount.setDescription('Specifies the number of successive loopback cell responses to receive before a PVC is up for connectivity verification.')
juniAtmCircuitOamDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamDownCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamDownCount.setDescription('Specifies the number of successive loopback cell responses not received before declaring a PVC down for connectivity verification.')
juniAtmCircuitOamRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamRetryFrequency.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamRetryFrequency.setDescription('Specifies the frequency (in seconds) to transmit loopback cells when verifying PVC state (up or down) for connectivity verification.')
juniAtmCircuitOamAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamAlarmDownCount.setDescription('Specifies the number of successive alarm (AIS or RDI) cells to receive before declaring a PVC down.')
juniAtmCircuitOamAlarmClearTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmCircuitOamAlarmClearTimeout.setStatus('current')
if mibBuilder.loadTexts: juniAtmCircuitOamAlarmClearTimeout.setDescription('Specifies how long to wait (in seconds) before declaring a PVC up after it has stopped receiving alarm cells.')
juniAtmSubIfVccTrafficShapingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5), )
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingTable.setDescription('This table contains entries for traffic shaping of ATM VCCs configured on ATM subinterfaces present in the system. This table augments the juniAtmSubIfVccTable only for VCCs that support traffic shapping. Attributes in this entry can only be configured at entry creation, and remain fixed for the lifetime of the entry.')
juniAtmSubIfVccTrafficShapingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1), )
juniAtmSubIfVccEntry.registerAugmentions(("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccTrafficShapingEntry"))
juniAtmSubIfVccTrafficShapingEntry.setIndexNames(*juniAtmSubIfVccEntry.getIndexNames())
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingEntry.setDescription('Each entry describes the traffic shping characteristics of an ATM subinterface VCC.')
juniAtmSubIfVccTrafficShapingCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 1), Unsigned32()).setUnits('tenths of a microsecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingCdvt.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingCdvt.setDescription('The network cell delay variation tolerance (CDVT) in tenths of a microsecond.')
juniAtmSubIfVccTrafficShapingClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingClp0.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingClp0.setDescription('Specifies whether or not only CLP0 cells are to be policed according to the traffic contract. CLP1 cells are forwarded on a best-effort basis CLP-significant model for (VBR.2, VBR.3 conformance). Applicable only for VBR circuits.')
juniAtmSubIfVccTrafficShapingTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingTagging.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingTagging.setDescription('Specifies whether or not CLP0 cells should be tagged for SCR policing (VBR.3 conformance). Applicable only for VBR circuits.')
juniAtmSubIfVccTrafficShapingPoliceObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingPoliceObserve.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingPoliceObserve.setDescription('Specifies whether of not no policing action is to be taken (note the double negative; if true(1) then no policing action will be taken; if false(2) then policing action will be taken). Regardless of the state of this object, all counters will be incremented.')
juniAtmSubIfVccTrafficShapingPacketShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingPacketShaping.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfVccTrafficShapingPacketShaping.setDescription('Specifies whether of not to shape output traffic on a packet boundary.')
juniAtmSubIfSvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6), )
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigTable.setDescription('This table contains entries for extending the juniAtmSubIfTable to configure switched virtual connection (SVC) on the subinterfaces.')
juniAtmSubIfSvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfIndex"))
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigEntry.setDescription('Each entry provides configuration parameters for an ATM SVC on the subinterface.')
juniAtmSubIfSvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
juniAtmSubIfSvcConfigDestAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 2), AtmAddr().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigDestAtmAddress.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigDestAtmAddress.setDescription('Specifies the destination ATM NSAP address of the circuit.')
juniAtmSubIfSvcConfigCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfc1483VcMux", 0), ("rfc1483Llc", 1))).clone('rfc1483VcMux')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigCircuitType.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigCircuitType.setDescription('Specifies the encapsulation used by the circuit to carry IP datagrams. Encapsulations are as specified in RFC1483 Multiprotocol Interconnect over ATM.')
juniAtmSubIfSvcConfigServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ubr", 0), ("ubrPcr", 1), ("nrtVbr", 2), ("cbr", 3), ("rtVbr", 4))).clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigServiceCategory.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigServiceCategory.setDescription('Service category for this circuit: ubr Unspecified Bit Rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-RealTime Variable Bit Rate. cbr Constant Bit Rate. rtVbr Realtime Variable Bit Rate.')
juniAtmSubIfSvcConfigPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 5), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigPcr.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigPcr.setDescription('Peak Cell Rate, in kilo-bits per second (kbps), of this circuit.')
juniAtmSubIfSvcConfigScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 6), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigScr.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigScr.setDescription('Sustained Cell Rate, in kilo-bits per second (kbps), of this circuit.')
juniAtmSubIfSvcConfigMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 7), Unsigned32()).setUnits('cells').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigMbs.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigMbs.setDescription('Maximum Burst Size, in cells, of this circuit.')
juniAtmSubIfSvcConfigCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 8), Unsigned32()).setUnits('100us').setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigCdvt.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigCdvt.setDescription('Specify the network Cell Delay Variation Tolerance.')
juniAtmSubIfSvcConfigClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigClp0.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigClp0.setDescription('Specify that only CLP0 cells are to be policed according to the traffic contract. CLP1 cells are forwarded on a best-effort basis CLP-significant model for (VBR.2, VBR.3 conformance).')
juniAtmSubIfSvcConfigTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigTagging.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigTagging.setDescription('Specify that CLP0 cells should be tagged for SCR policing (VBR.3 conformance).')
juniAtmSubIfSvcConfigObserve = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigObserve.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigObserve.setDescription('Specify that no policing action is to be taken; only counters are incremented.')
juniAtmSubIfSvcConfigPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigPacketDiscard.setStatus('deprecated')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigPacketDiscard.setDescription('Enable early packet Discard for this circuit.')
juniAtmSubIfSvcConfigDestE164Address = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 6, 1, 13), AtmAddr().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigDestE164Address.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfSvcConfigDestE164Address.setDescription('Specifies the destination ATM E164 address of the circuit.')
juniAtmSubIfDescriptionExport = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmSubIfDescriptionExport.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfDescriptionExport.setDescription('Enabling of this object will program the subinterface description down to the applicable line card. Note, the subinterface description sent down to the line card is a truncated version (32 bytes) of the ifAlias.')
juniAtmNbmaMapTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1), )
if mibBuilder.loadTexts: juniAtmNbmaMapTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapTable.setDescription('This table contains entries for ATM NBMA maps.')
juniAtmNbmaMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmNbmaMapName"), (0, "Juniper-UNI-ATM-MIB", "juniAtmNbmaMapVcd"))
if mibBuilder.loadTexts: juniAtmNbmaMapEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapEntry.setDescription('Each entry describes the characteristics of an ATM NBMA map.')
juniAtmNbmaMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 1), JuniAtmNbmaMapName())
if mibBuilder.loadTexts: juniAtmNbmaMapName.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapName.setDescription('The NBMA map name.')
juniAtmNbmaMapVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: juniAtmNbmaMapVcd.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapVcd.setDescription('An integer identifier for the ATM circuit, used in conjunction with the command-line interface. The value must be unique among VCs configured on the same ATM interface.')
juniAtmNbmaMapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmNbmaMapIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapIpAddress.setDescription('The IP address associated with this entry.')
juniAtmNbmaMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 4), AtmVpIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmNbmaMapVpi.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapVpi.setDescription('The VPI identifier of the ATM circuit.')
juniAtmNbmaMapVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 5), AtmVcIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmNbmaMapVci.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapVci.setDescription('The VCI identifier of the ATM circuit.')
juniAtmNbmaMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmNbmaMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapIfIndex.setDescription('The ifIndex of the ATM major interface associated with this entry. The value of this object will be zero when the map is not applied to an interface. ')
juniAtmNbmaMapBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmNbmaMapBroadcast.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapBroadcast.setDescription('The broadcast enable/disable setting for this entry. The value true(1) enable broadcast support; disable(2) disabled broadcast support for this entry.')
juniAtmNbmaMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmNbmaMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy Additional notes to aid the network manager: - NBMA maps are not supported on dynamic interface. - NBMA maps can only be applied to a single major ATM interface at a time. - NBMA maps cannot be deleted unless the map is removed from the ATM interface (juniAtmNbmaMapIfIndex = 0). - The values of juniAtmNbmaMapVpi, juniAtmNbmaMapVci and juniAtmNbmaMapIfIndex are zero until the map is applied to a major ATM interface. - To create an entry in this table, the following objects must be present in the set PDU: juniAtmNbmaMapIpAddress juniAtmNbmaMapBroadcast juniAtmNbmaMapRowStatus - Once created, only the following objects can be modified: juniAtmNbmaMapBroadcast ')
juniAtmNbmaMapListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2), )
if mibBuilder.loadTexts: juniAtmNbmaMapListTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapListTable.setDescription('This table contains entries for ATM NBMA map lists.')
juniAtmNbmaMapListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2, 1), ).setIndexNames((1, "Juniper-UNI-ATM-MIB", "juniAtmNbmaMapListName"))
if mibBuilder.loadTexts: juniAtmNbmaMapListEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapListEntry.setDescription('Each entry describes the characteristics of an ATM NBMA map.')
juniAtmNbmaMapListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2, 1, 1), JuniAtmNbmaMapName())
if mibBuilder.loadTexts: juniAtmNbmaMapListName.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapListName.setDescription('The NBMA Map List name.')
juniAtmNbmaMapListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmNbmaMapListRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy ')
juniAtmPingTestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 1))
juniAtmPingTestOamSeg = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 1, 1))
if mibBuilder.loadTexts: juniAtmPingTestOamSeg.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestOamSeg.setDescription('This identifies an OAM Ping (multiple loopbacks) Test on a VPL, VPC, VCL, or VCC termination point, using segment OAM cells. The test type must have appended to it a code that uniquely identifies an intermediate point responsible for looping back each cell. If this is absent, the loopbacks are performed at the end of the segment or connection. E.g., the OID { juniAtmPingTestOamSeg 5 } identifies that the loopbacks should be performed at the intermediate point labeled 5.')
juniAtmPingTestOamE2E = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 1, 2))
if mibBuilder.loadTexts: juniAtmPingTestOamE2E.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestOamE2E.setDescription('This identifies an OAM Ping (multiple loopbacks) Test on a VPL, VPC, VCL, or VCC termination point, using end-to-end OAM cells.')
juniAtmVpPingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2), )
if mibBuilder.loadTexts: juniAtmVpPingTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingTable.setDescription('This table contains entries for extending the ATM-FORUM-SNMP-M4-MIB atmM4VpTestTable to do ping (multiple loopback) type testing.')
juniAtmVpPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestObject"))
if mibBuilder.loadTexts: juniAtmVpPingEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingEntry.setDescription('Each entry describes the characteristics, status and results of the most recent ATM ping test.')
juniAtmVpPingProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(5)).setUnits('probes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVpPingProbeCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingProbeCount.setDescription('The number of ping probes (OAM cells) to be sent to complete the test.')
juniAtmVpPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVpPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingTimeOut.setDescription('Specifies the time-out value, in seconds, for a remote ping operation.')
juniAtmVpPingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 3), Bits().clone(namedValues=NamedValues(("testCompletion", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVpPingCtlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingCtlTrapGeneration.setDescription('The value of this object determines when and if to generate a notification for this entry: testCompletion(0) - Generate a juniPingTestCompleted notification. The value of this object defaults to zero, indicating that no notification has been selected.')
juniAtmVpPingSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 4), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpPingSentProbes.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingSentProbes.setDescription('The number of ping probes (OAM cells) that have been sent thus far for this test. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1).')
juniAtmVpPingProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 5), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpPingProbeResponses.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingProbeResponses.setDescription('The number of ping responses that have been received thus far for this test. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1).')
juniAtmVpPingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpPingStartTime.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingStartTime.setDescription('The time (sysUpTime) when the test started.')
juniAtmVpPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingMinRtt.setDescription('The shortest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
juniAtmVpPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingMaxRtt.setDescription('The longest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
juniAtmVpPingAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 2, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVpPingAverageRtt.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingAverageRtt.setDescription('The average round-trip-time (RTT) for all the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VpTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
juniAtmVcPingTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3), )
if mibBuilder.loadTexts: juniAtmVcPingTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingTable.setDescription('This table contains entries for extending the ATM-FORUM-SNMP-M4-MIB atmM4VcTestTable to do ping (multiple loopback) type testing.')
juniAtmVcPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestObject"))
if mibBuilder.loadTexts: juniAtmVcPingEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingEntry.setDescription('Each entry describes the characteristics, status and results of the most recent ATM ping test.')
juniAtmVcPingProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(5)).setUnits('probes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcPingProbeCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingProbeCount.setDescription('The number of ping probes (OAM cells) to be sent to complete the test.')
juniAtmVcPingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcPingTimeOut.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingTimeOut.setDescription('Specifies the time-out value, in seconds, for a remote ping operation.')
juniAtmVcPingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 3), Bits().clone(namedValues=NamedValues(("testCompletion", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcPingCtlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingCtlTrapGeneration.setDescription('The value of this object determines when and if to generate a notification for this entry: testCompletion(0) - Generate a juniPingTestCompleted notification. The value of this object defaults to zero, indicating that no notification has been selected.')
juniAtmVcPingSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 4), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcPingSentProbes.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingSentProbes.setDescription('The number of ping probes (OAM cells) that have been sent thus far for this test. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1).')
juniAtmVcPingProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 5), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcPingProbeResponses.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingProbeResponses.setDescription('The number of ping responses that have been received thus far for this test. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1).')
juniAtmVcPingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcPingStartTime.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingStartTime.setDescription('The time (sysUpTime) when the test started.')
juniAtmVcPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingMinRtt.setDescription('The shortest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
juniAtmVcPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingMaxRtt.setDescription('The longest round-trip-time (RTT) for the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
juniAtmVcPingAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 3, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcPingAverageRtt.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingAverageRtt.setDescription('The average round-trip-time (RTT) for all the pings that have received responses. The value of this object MUST be set to zero when the atmfM4VcTestStatus object transitions from notInUse(0) to inUse(1). A value of zero for this object implies that no ping responses have been received for the current test.')
juniAtmPingTestCode = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4))
juniAtmPingTestCodeOamDisabled = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4, 1))
if mibBuilder.loadTexts: juniAtmPingTestCodeOamDisabled.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestCodeOamDisabled.setDescription('This test code indicates that the ATM ping operation cannot be initiated or is aborted because the juniAtmIfOamCellRxAdminState is set to disabled.')
juniAtmPingTestCodeCircuitDown = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4, 2))
if mibBuilder.loadTexts: juniAtmPingTestCodeCircuitDown.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestCodeCircuitDown.setDescription('This test code indicates that the ATM ping operation cannot be initiated or is aborted because the operational status of the ATM circuit is down.')
juniAtmPingTestCodeStopped = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4, 3))
if mibBuilder.loadTexts: juniAtmPingTestCodeStopped.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestCodeStopped.setDescription('This test code indicates that the ATM ping operation is administratively stopped by an External Management.')
juniAtmPingTestCodeOamVcOperState = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4, 4))
if mibBuilder.loadTexts: juniAtmPingTestCodeOamVcOperState.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestCodeOamVcOperState.setDescription('This test code indicates that the ATM ping operation cannot be initiated or is aborted because the circuit is down because of a OAM fault condition. This is possible if juniAtmCircuitVcOamOperStatus is one of the following: oamVcOperStateAisState(0) - AIS cell received or underlying physical layer reporting transmission path AIS. oamVcOperStateRdiState(1) - RDI cell received.')
juniAtmPingTestCodeMaxPingCountReached = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4, 5))
if mibBuilder.loadTexts: juniAtmPingTestCodeMaxPingCountReached.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestCodeMaxPingCountReached.setDescription('This test code indicates that the ping operation cannot be initiated as the maximum number of ping possible on this interfaces exceeds the allowable limit.')
juniAtmPingTestCodeInvalidParams = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 5, 4, 6))
if mibBuilder.loadTexts: juniAtmPingTestCodeInvalidParams.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTestCodeInvalidParams.setDescription('This Test Code identities the Ping operation cannot be initiated as one or more of the Ping Parameters is Invalid.')
juniAtmSubIfLocationType = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 6, 1), JuniInterfaceLocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmSubIfLocationType.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfLocationType.setDescription("Describes the interpretation of JuniInterfaceLocationValue object values into platform-dependent interface location components, e.g., 'slot.port' on an ERX.")
juniAtmSubIfLocationTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 6, 2), )
if mibBuilder.loadTexts: juniAtmSubIfLocationTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfLocationTable.setDescription('The entries in this table report the ifIndex of ATM Subinterfaces by location.')
juniAtmSubIfLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 6, 2, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfLocationIndex"), (0, "Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"))
if mibBuilder.loadTexts: juniAtmSubIfLocationEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfLocationEntry.setDescription('A specification of ATM subinterfaces by location.')
juniAtmSubIfLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 6, 2, 1, 1), JuniInterfaceLocationValue())
if mibBuilder.loadTexts: juniAtmSubIfLocationIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfLocationIndex.setDescription('The value of a platform interface location.')
juniAtmSubIfLocationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 6, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmSubIfLocationIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfLocationIfIndex.setDescription('The ifIndex value of this subinterface.')
juniAtmVcClassNameTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 1), )
if mibBuilder.loadTexts: juniAtmVcClassNameTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassNameTable.setDescription('The entries in this table provide mappings of ATM VC class names to local integer identifiers. These integers are used as indexes into other MIB tables containing ATM VC attributes associated with the same VC class name.')
juniAtmVcClassNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 1, 1), ).setIndexNames((1, "Juniper-UNI-ATM-MIB", "juniAtmVcClassName"))
if mibBuilder.loadTexts: juniAtmVcClassNameEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassNameEntry.setDescription('A mapping of ATM VC class name to an integer identifier for the ATM VC class.')
juniAtmVcClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcClassName.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassName.setDescription('The ATM VC class name uniquely identifying this entry.')
juniAtmVcClassNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAtmVcClassNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassNameRowStatus.setDescription("Controls creation/deletion of entries in this table. Only the values 'createAndGo' ,'destroy', 'active' and 'notInService' may be SET. The SNMP manager would set the row status to notInService before making any VC class attribute changes explained in juniAtmVcClassTable. Once the VC class attribute changes are complete, the SNMP manager would set the row status to active, upon which the VC class attribute changes would be committed. Any ATM VC class attribute changes that are made when the row status is 'active' are committed right away.")
juniAtmVcClassNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcClassNameId.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassNameId.setDescription('The integer identifier associated with this VC class name. The value of this identifier is assigned by the device when an entry in this table is created.')
juniAtmVcClassIdTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 2), )
if mibBuilder.loadTexts: juniAtmVcClassIdTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassIdTable.setDescription('Provides inverse mapping of ATM VC class IDs to ATM VC class names.')
juniAtmVcClassIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 2, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmVcClassIdId"))
if mibBuilder.loadTexts: juniAtmVcClassIdEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassIdEntry.setDescription('A mapping of an integer identifier to an ATM VC class name.')
juniAtmVcClassIdId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAtmVcClassIdId.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassIdId.setDescription('The integer identifier associated with this ATM VC class name.')
juniAtmVcClassIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAtmVcClassIdName.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassIdName.setDescription('The ATM VC class name having the associated identifier.')
juniAtmVcClassTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3), )
if mibBuilder.loadTexts: juniAtmVcClassTable.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassTable.setDescription('This table contains Juniper ATM VC Class entries which can be used to specify the ATM PVC attributes either at creation or modification time. A row in this table with default values is created when an entry in juniAtmVcClassNameTable is created.')
juniAtmVcClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1), ).setIndexNames((0, "Juniper-UNI-ATM-MIB", "juniAtmVcClassId"))
if mibBuilder.loadTexts: juniAtmVcClassEntry.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassEntry.setDescription('Each entry contains the attributes of the ATM VC which would be applied to the VC either at creation or modification time when this ATM VC class is associated to it.')
juniAtmVcClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniAtmVcClassId.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassId.setDescription('The integer identifier associated with this ATM VC class. A value for this identifier is determined by locating or creating an ATM VC class name in the juniAtmVcClassNameTable.')
juniAtmVcClassVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("rfc1483VcMux", 0), ("rfc1483Llc", 1), ("autoconfig", 2), ("aal5", 3), ("aal0", 4))).clone('rfc1483VcMux')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccType.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccType.setDescription("Specifies the encapsulation used by the circuit to carry IP datagrams. Encapsulations are as specified in RFC1483 Multiprotocol Interconnect over ATM. The 'autoconfig' value will recognize both VC Mux and LLC formats. The 'aal5' and 'aal0' values are used for encapsulation methods for transport of ATM frames and cells over IP and MPLS networks when no encapsulation method is specified.")
juniAtmVcClassVccServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ubr", 0), ("ubrPcr", 1), ("nrtVbr", 2), ("cbr", 3), ("rtVbr", 4))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccServiceCategory.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccServiceCategory.setDescription('Service category for this circuit: ubr Unspecified Bit Rate (best effort). ubrPcr Unspecified Bit Rate with Peak Cell Rate limit. nrtVbr Non-RealTime Variable Bit Rate. cbr Constant Bit Rate. rtVbr Realtime Variable Bit Rate.')
juniAtmVcClassVccPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccPcr.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccPcr.setDescription('Peak Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when juniAtmVcClassVccServiceCategory is configured to have one of the following values: ubrPcr nrtVbr cbr rtVbr ')
juniAtmVcClassVccScr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccScr.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccScr.setDescription('Sustained Cell Rate, in kilobits per second (kbps), of this circuit. This parameter is only required when juniAtmVcClassVccServiceCategory is configured to have the following value: nrtVbr rtVbr ')
juniAtmVcClassVccMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccMbs.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccMbs.setDescription('Maximum Burst Size, in cells, of this circuit. This parameter is only required when juniAtmVcClassVccServiceCategory is configured to have the following value: nrtVbr rtVbr ')
juniAtmVcClassVccOamAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oamAdminStateDisabled", 1), ("oamAdminStateEnabled", 2))).clone('oamAdminStateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamAdminStatus.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamAdminStatus.setDescription('The OAM VC integrity administrative state of the ATM VC associated with this class.')
juniAtmVcClassVccOamLoopbackFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamLoopbackFrequency.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamLoopbackFrequency.setDescription('The OAM loopback frequency in seconds.')
juniAtmVcClassVccOamUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamUpCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamUpCount.setDescription('Specifies the number of successive loopback cell responses to receive before the ATM VC associated with this class is declared up for connectivity verification.')
juniAtmVcClassVccOamDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamDownCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamDownCount.setDescription('Specifies the number of successive loopback cell responses not received before declaring the ATM VC associated with this class as down for connectivity verification.')
juniAtmVcClassVccOamRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamRetryFrequency.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamRetryFrequency.setDescription('Specifies the frequency (in seconds) to transmit loopback cells when verifying the ATM VC operational state associated with this class (up or down) for connectivity verification.')
juniAtmVcClassVccOamAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('cells').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamAlarmDownCount.setDescription('Specifies the number of successive alarm (AIS or RDI) cells to receive before declaring the ATM VC associated with class as down.')
juniAtmVcClassVccOamAlarmClearTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccOamAlarmClearTimeout.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccOamAlarmClearTimeout.setDescription('Specifies how long to wait (in seconds) before declaring the ATM VC associated with class as up after it has stopped receiving alarm cells.')
juniAtmVcClassVccInverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccInverseArp.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccInverseArp.setDescription('Enables the inverse ARP protocol on the ATM VC associated with this class; true(1) enables the protocol, false(2) disables it.')
juniAtmVcClassVccInverseArpRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 1, 7, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAtmVcClassVccInverseArpRefresh.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassVccInverseArpRefresh.setDescription('The refresh rate in minutes between inverse ARP protocol messages.')
juniAtmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3))
juniAtmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3, 0))
juniAtmVpPingTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3, 0, 1)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestResult"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingProbeCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingSentProbes"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingProbeResponses"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingMinRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingMaxRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingAverageRtt"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VpTestCode"))
if mibBuilder.loadTexts: juniAtmVpPingTestCompleted.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingTestCompleted.setDescription('Generated at the completion of a AtmfM4VpTest when the corresponding juniAtmVpPingCtlTrapGeneration object has the testCompletion(0) bit set.')
juniAtmVcPingTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 3, 0, 2)).setObjects(("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestId"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestType"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestResult"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingProbeCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingSentProbes"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingProbeResponses"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingMinRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingMaxRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingAverageRtt"), ("ATM-FORUM-SNMP-M4-MIB", "atmfM4VcTestCode"))
if mibBuilder.loadTexts: juniAtmVcPingTestCompleted.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingTestCompleted.setDescription('Generated at the completion of a AtmfM4VcTest when the corresponding juniAtmVcPingCtlTrapGeneration object has the testCompletion(0) bit set.')
juniAtmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4))
juniAtmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1))
juniAtmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2))
juniAtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 1)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance = juniAtmCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when support was added for NBMA map lists and ATM ping.')
juniAtmCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 2)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance2 = juniAtmCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance2.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when support was added for traffic shapping on VCC subinterfaces.')
juniAtmCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 3)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance3 = juniAtmCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance3.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when support was added for connection admission control (CAC).')
juniAtmCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 4)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup3"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance4 = juniAtmCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance4.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when ATM SVC, CAC used bandwidth and sub-interface address objects were added.')
juniAtmCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 5)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup4"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup3"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance5 = juniAtmCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance5.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when CAC recieve bandwith and E164 public addressing support was added.')
juniAtmCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 6)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup5"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup4"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance6 = juniAtmCompliance6.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance6.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when F4 flow OAM circuit config and stats tables were added to the Juniper ATM MIB.')
juniAtmCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 7)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup6"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup4"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance7 = juniAtmCompliance7.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance7.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when the juniAtmLocationGroup was added.')
juniAtmCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 8)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup6"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup4"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance8 = juniAtmCompliance8.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance8.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when support was added to export the subinterface description to the line cards.')
juniAtmCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 9)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup6"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup5"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance9 = juniAtmCompliance9.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance9.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement was obsoleted when the juniAtmMartiniGroup was added.')
juniAtmCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 10)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup6"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup5"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmMartiniGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance10 = juniAtmCompliance10.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance10.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when juniAtmIfCacAvailableBandwidthRx, juniAtmIfE164Autoconversion, juniAtmIfE164Gateway, and juniAtmIfE164OneToOneAddrTrans were deprecated.')
juniAtmCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 11)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup7"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup5"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmMartiniGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance11 = juniAtmCompliance11.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance11.setDescription('Obsolete compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when juniAtmGroup8 was added.')
juniAtmCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 12)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup8"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup5"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmMartiniGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance12 = juniAtmCompliance12.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance12.setDescription('The compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when juniAtmVpStatsGroup was added.')
juniAtmCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 13)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup8"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup6"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmMartiniGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance13 = juniAtmCompliance13.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmCompliance13.setDescription('The compliance statement for entities which implement the Juniper ATM MIB. This statement became obsolete when SVC support was removed.')
juniAtmCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 1, 14)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmGroup9"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5Group"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfGroup7"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingControlGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPingTrapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmSvcGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmF4OamCircuitGroup2"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmTrafficShapingGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmPnniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmLocationGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmMartiniGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmCompliance14 = juniAtmCompliance14.setStatus('current')
if mibBuilder.loadTexts: juniAtmCompliance14.setDescription('The compliance statement for entities which implement the Juniper ATM MIB.')
juniAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 1)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup = juniAtmGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product. This group became obsolete when the juniAtmIfMapGroup object was added.')
juniAtmAal5Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 2)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmAal5NextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5IfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmAal5IfLowerIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmAal5Group = juniAtmAal5Group.setStatus('current')
if mibBuilder.loadTexts: juniAtmAal5Group.setDescription('A collection of objects providing management of AAL5 interfaces in a Juniper product.')
juniAtmSubIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 3)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup = juniAtmSubIfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfGroup.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Juniper product. This group became obsolete when juniAtmSubIfNbma, juniAtmSubIfInverseArp, and juniAtmSubIfInverseArpRefresh were added.')
juniAtmVpTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 4)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelKbps"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmVpTunnelServiceCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmVpTunnelGroup = juniAtmVpTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpTunnelGroup.setDescription('A collection of objects providing management of VP tunnels in a Juniper product.')
juniAtmNbmaMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 5)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapIpAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapVci"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapBroadcast"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmNbmaMapListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmNbmaMapGroup = juniAtmNbmaMapGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmNbmaMapGroup.setDescription('A collection of object providing management of NBMA in a Juniper product.')
juniAtmSubIfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 6)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfNbma"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArpRefresh"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup2 = juniAtmSubIfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfGroup2.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Juniper product. This group became obsolete when juniAtmSubIfAddress was added.')
juniAtmVpPingControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 7)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmVpPingProbeCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingTimeOut"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingCtlTrapGeneration"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingSentProbes"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingProbeResponses"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingStartTime"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingMinRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingMaxRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVpPingAverageRtt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmVpPingControlGroup = juniAtmVpPingControlGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpPingControlGroup.setDescription('A collection of object providing management of ATM VPL Ping testing in a Juniper product.')
juniAtmVcPingControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 8)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmVcPingProbeCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingTimeOut"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingCtlTrapGeneration"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingSentProbes"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingProbeResponses"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingStartTime"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingMinRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingMaxRtt"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingAverageRtt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmVcPingControlGroup = juniAtmVcPingControlGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcPingControlGroup.setDescription('A collection of object providing management of ATM VCL Ping testing in a Juniper product.')
juniAtmPingTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 9)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmVpPingTestCompleted"), ("Juniper-UNI-ATM-MIB", "juniAtmVcPingTestCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmPingTrapGroup = juniAtmPingTrapGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmPingTrapGroup.setDescription('A collection of notifications supporting ATM Ping testing in a Juniper product.')
juniAtmGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 10)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellFilter"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOamCellFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup2 = juniAtmGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup2.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product. This group became obsolete when support was added for connection admission control (CAC).')
juniAtmTrafficShapingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 11)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccTrafficShapingCdvt"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccTrafficShapingClp0"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccTrafficShapingTagging"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccTrafficShapingPoliceObserve"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccTrafficShapingPacketShaping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmTrafficShapingGroup = juniAtmTrafficShapingGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmTrafficShapingGroup.setDescription('A collection of objects providing management of ATM traffic shaping in a Juniper product.')
juniAtmGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 12)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellFilter"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOamCellFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup3 = juniAtmGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup3.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product. This group became obsolete when support was added for connection admission control (CAC) used bandwidth.')
juniAtmGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 13)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellFilter"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUsedBandwidthUpper"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUsedBandwidthLower"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOamCellFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup4 = juniAtmGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup4.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product. This group became obsolete when CAC recieve bandwith and E164 public addressing objects were added.')
juniAtmSvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 14)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigDestAtmAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigCircuitType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigCdvt"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigClp0"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigTagging"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigObserve"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigPacketDiscard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSvcGroup = juniAtmSvcGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSvcGroup.setDescription('Obsolete collection of objects providing management of ATM SVC interfaces in a Juniper product. This group became obsolete when E164 public addressing support was added.')
juniAtmSubIfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 15)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfNbma"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArpRefresh"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup3 = juniAtmSubIfGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfGroup3.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Juniper product. This group became obsolete when juniAtmSubIfMtu was added.')
juniAtmGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 16)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidthRx"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164Autoconversion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164Gateway"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164OneToOneAddrTrans"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup5 = juniAtmGroup5.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup5.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product. This group became obsolete when ATM VP description support was added.')
juniAtmSvcGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 17)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfSvcSignallingAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigDestAtmAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigCircuitType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigClp0"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigTagging"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigPacketDiscard"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfSvcConfigDestE164Address"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSvcGroup2 = juniAtmSvcGroup2.setStatus('current')
if mibBuilder.loadTexts: juniAtmSvcGroup2.setDescription('A collection of objects providing management of ATM SVC interfaces in a Juniper product.')
juniAtmPnniGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 18)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmIfPnniRccVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfPnniRccVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfPnniRccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfPnniRccAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmPnniGroup = juniAtmPnniGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmPnniGroup.setDescription('A collection of objects providing management of PNNI Routing Control Channels in a Juniper product.')
juniAtmSubIfGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 19)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfNbma"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfMtu"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArpRefresh"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup4 = juniAtmSubIfGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfGroup4.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Juniper product. This group became obsolete when support was added to export the subinterface description to the line cards.')
juniAtmF4OamCircuitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 20)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndLoopbackTimer"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndCCSink"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndCCSource"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentCCSink"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentCCSource"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndAisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndActualLoopbackFreq"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndLastTimeChanged"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamEndVpOperationState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamEndVpAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndInOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndOutOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentAisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentLastTimeChanged"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamSegmentVpOperationState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamSegmentVpAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentInOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentOutOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentInOamCellsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmF4OamCircuitGroup = juniAtmF4OamCircuitGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmF4OamCircuitGroup.setDescription('Obsolete collection of objects providing management of ATM F4 flow OAM circuits in a Juniper product.')
juniAtmGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 21)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidthRx"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164Autoconversion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164Gateway"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164OneToOneAddrTrans"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmVpDescription"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameId"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdName"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdNextInstance"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup6 = juniAtmGroup6.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup6.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product. This group became obsolete when bulk-configuration profile override support was added.')
juniAtmLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 22)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfLocationType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLocationIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmLocationGroup = juniAtmLocationGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmLocationGroup.setDescription('A collection of objects providing interface location information in a Juniper product.')
juniAtmSubIfGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 23)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfNbma"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfMtu"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAdvisoryRxSpeed"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArpRefresh"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDescriptionExport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup5 = juniAtmSubIfGroup5.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfGroup5.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Juniper product.')
juniAtmMartiniGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 24)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmMartiniTimeoutTimerValue"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfMartiniMaxCellsPerPacket"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfMartiniTimeoutTimerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmMartiniGroup = juniAtmMartiniGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmMartiniGroup.setDescription('A collection of objects providing ATM Martini cell aggregation configuration.')
juniAtmGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 25)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidthRx"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164Autoconversion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164Gateway"), ("Juniper-UNI-ATM-MIB", "juniAtmIfE164OneToOneAddrTrans"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmVpDescription"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameId"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdName"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdNextInstance"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitProfileId"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup7 = juniAtmGroup7.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup7.setDescription('Obsolete collection of objects providing management of ATM interfaces in a Juniper product.')
juniAtmGroup8 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 26)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmVpDescription"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameId"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdName"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdNextInstance"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitProfileId"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup8 = juniAtmGroup8.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmGroup8.setDescription('A collection of objects providing management of ATM interfaces in a Juniper product.')
juniAtmVpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 27)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsCrcErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsSarTimeouts"), ("Juniper-UNI-ATM-MIB", "juniAtmVpStatsOverSizedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmVpStatsGroup = juniAtmVpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmVpStatsGroup.setDescription('A collection of objects providing ATM VP level statistics.')
juniAtmSubIfGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 28)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfNbma"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfMtu"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAdvisoryRxSpeed"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArpRefresh"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamUpCount"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamDownCount"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamRetryFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAlarmDownCount"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAlarmClearTimeout"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDescriptionExport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup6 = juniAtmSubIfGroup6.setStatus('obsolete')
if mibBuilder.loadTexts: juniAtmSubIfGroup6.setDescription('Obsolete collection of objects providing management of ATM subinterfaces in a Juniper product. This group became obsolete when ATM SVC support was removed.')
juniAtmF4OamCircuitGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 29)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndLoopbackTimer"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndCCSink"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndCCSource"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowEndToEndRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentCCSink"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentCCSource"), ("Juniper-UNI-ATM-MIB", "juniAtmOamF4FlowSegmentRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndAisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutEndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndActualLoopbackFreq"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndLastTimeChanged"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamEndVpOperationState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamEndVpAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndInOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndOutOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentAisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowInOamSegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentRdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentCCCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentCCActDeActCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOutSegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentLastTimeChanged"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamSegmentVpOperationState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowOamSegmentVpAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentInOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentOutOamCells"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndToEndInLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndToEndInLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentInLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentInLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndToEndOutLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowEndToEndOutLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentOutLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmF4FlowSegmentOutLoopbackRsps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmF4OamCircuitGroup2 = juniAtmF4OamCircuitGroup2.setStatus('current')
if mibBuilder.loadTexts: juniAtmF4OamCircuitGroup2.setDescription('A collection of objects providing management of ATM F4 flow OAM circuits in a Juniper product.')
juniAtmGroup9 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 30)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVci"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiPollFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmIfIlmiAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfUniVersion"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOamCellRxAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmIfVcCount"), ("Juniper-UNI-ATM-MIB", "juniAtmIfMapGroup"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacUbrWeight"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacSubscriptionBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCacAvailableBandwidth"), ("Juniper-UNI-ATM-MIB", "juniAtmIfAssociatedVcClassId"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCells"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPackets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketOctets"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsinPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutCellErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsOutPacketErrors"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketOctetDiscards"), ("Juniper-UNI-ATM-MIB", "juniAtmPvcStatsInPacketUnknownProtocol"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityTrafficShaping"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityOam"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityDefaultVcPerVp"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityNumVpiVciBits"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmIfCapabilityMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmVpDescription"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsNameId"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdName"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsIdNextInstance"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVpi"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMinVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsMaxVci"), ("Juniper-UNI-ATM-MIB", "juniAtmBulkCircuitsAdminState"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitProfileId"), ("Juniper-UNI-ATM-MIB", "juniAtmProfileOverrideAssignIfCircuitOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmGroup9 = juniAtmGroup9.setStatus('current')
if mibBuilder.loadTexts: juniAtmGroup9.setDescription('A collection of objects providing management of ATM interfaces in a Juniper product.')
juniAtmSubIfGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 31)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmSubIfNextIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDistinguisher"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfLowerIfIndex"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfNbma"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAddress"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfMtu"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAdvisoryRxSpeed"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfAssociatedVcClassId"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccVcd"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfInverseArpRefresh"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfVccAssociatedVcClassId"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitVcOamOperStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamCellsDropped"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5Cells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5AisCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5RdiCells"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5EndToEndLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitInOamF5SegmentLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5EndToEndLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackCmds"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOutOamF5SegmentLoopbackRsps"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamUpCount"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamDownCount"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamRetryFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAlarmDownCount"), ("Juniper-UNI-ATM-MIB", "juniAtmCircuitOamAlarmClearTimeout"), ("Juniper-UNI-ATM-MIB", "juniAtmSubIfDescriptionExport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmSubIfGroup7 = juniAtmSubIfGroup7.setStatus('current')
if mibBuilder.loadTexts: juniAtmSubIfGroup7.setDescription('A collection of objects providing management of ATM subinterfaces in a Juniper product.')
juniAtmVcClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 8, 4, 2, 32)).setObjects(("Juniper-UNI-ATM-MIB", "juniAtmVcClassName"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassNameRowStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassNameId"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassIdName"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccType"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccServiceCategory"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccPcr"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccScr"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccMbs"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamAdminStatus"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamLoopbackFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamUpCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamDownCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamRetryFrequency"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamAlarmDownCount"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccOamAlarmClearTimeout"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccInverseArp"), ("Juniper-UNI-ATM-MIB", "juniAtmVcClassVccInverseArpRefresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAtmVcClassGroup = juniAtmVcClassGroup.setStatus('current')
if mibBuilder.loadTexts: juniAtmVcClassGroup.setDescription('A collection of objects providing management of ATM VC class in a Juniper product.')
mibBuilder.exportSymbols("Juniper-UNI-ATM-MIB", juniAtmVpStatsInPacketOctets=juniAtmVpStatsInPacketOctets, juniAtmSubIfSvcConfigClp0=juniAtmSubIfSvcConfigClp0, juniAtmSubIfVccTable=juniAtmSubIfVccTable, juniAtmSubIfVccTrafficShapingClp0=juniAtmSubIfVccTrafficShapingClp0, juniAtmVpStatsSarTimeouts=juniAtmVpStatsSarTimeouts, juniAtmVcPingCtlTrapGeneration=juniAtmVcPingCtlTrapGeneration, juniAtmSubIfLocationType=juniAtmSubIfLocationType, juniAtmIfLayer=juniAtmIfLayer, juniAtmCircuitOamEntry=juniAtmCircuitOamEntry, juniAtmIfTable=juniAtmIfTable, juniAtmPvcStatsInPacketOctets=juniAtmPvcStatsInPacketOctets, juniAtmPvcStatsInPackets=juniAtmPvcStatsInPackets, juniAtmOamF4FlowSegmentVpi=juniAtmOamF4FlowSegmentVpi, juniAtmF4FlowInOamEndCCCells=juniAtmF4FlowInOamEndCCCells, juniAtmIfOamCellRxAdminState=juniAtmIfOamCellRxAdminState, juniAtmSubIfGroup6=juniAtmSubIfGroup6, juniAtmVcClassVccOamAlarmDownCount=juniAtmVcClassVccOamAlarmDownCount, juniAtmVpStatsInPacketOctetDiscards=juniAtmVpStatsInPacketOctetDiscards, juniAtmBulkCircuitsIdNextInstance=juniAtmBulkCircuitsIdNextInstance, juniAtmOamF4FlowSegmentRowStatus=juniAtmOamF4FlowSegmentRowStatus, juniAtmBulkCircuitsNameName=juniAtmBulkCircuitsNameName, juniAtmVpStatsEntry=juniAtmVpStatsEntry, juniAtmSubIfAddress=juniAtmSubIfAddress, juniAtmSubIfVccType=juniAtmSubIfVccType, juniAtmVpTunnelGroup=juniAtmVpTunnelGroup, juniAtmF4FlowOamSegmentStatsTable=juniAtmF4FlowOamSegmentStatsTable, juniAtmPingTestCodeInvalidParams=juniAtmPingTestCodeInvalidParams, juniAtmOamF4FlowSegmentCfgTable=juniAtmOamF4FlowSegmentCfgTable, juniAtmF4FlowEndOutOamCells=juniAtmF4FlowEndOutOamCells, juniAtmCircuitInOamCellsDropped=juniAtmCircuitInOamCellsDropped, juniAtmPvcStatsOutPacketOctets=juniAtmPvcStatsOutPacketOctets, juniAtmAal5Group=juniAtmAal5Group, juniAtmIfE164Autoconversion=juniAtmIfE164Autoconversion, juniAtmSubIfSvcConfigPacketDiscard=juniAtmSubIfSvcConfigPacketDiscard, juniAtmCircuitInOamF5EndToEndLoopbackRsps=juniAtmCircuitInOamF5EndToEndLoopbackRsps, juniAtmIfOutCells=juniAtmIfOutCells, juniAtmCompliance5=juniAtmCompliance5, juniAtmCircuitOamRetryFrequency=juniAtmCircuitOamRetryFrequency, juniAtmSubIfVccTrafficShapingTable=juniAtmSubIfVccTrafficShapingTable, juniAtmVcClassName=juniAtmVcClassName, juniAtmCircuitInOamF5EndToEndLoopbackCmds=juniAtmCircuitInOamF5EndToEndLoopbackCmds, juniAtmCircuitOamAdminStatus=juniAtmCircuitOamAdminStatus, juniAtmSubIfLocationEntry=juniAtmSubIfLocationEntry, juniAtmGroup4=juniAtmGroup4, juniAtmIfIlmiVpi=juniAtmIfIlmiVpi, juniAtmSubIfMartiniMaxCellsPerPacket=juniAtmSubIfMartiniMaxCellsPerPacket, juniAtmIfRowStatus=juniAtmIfRowStatus, juniAtmIfCapabilityOam=juniAtmIfCapabilityOam, juniAtmPvcStatisticsEntry=juniAtmPvcStatisticsEntry, juniAtmSubIfGroup3=juniAtmSubIfGroup3, juniAtmCircuitOutOamF5Cells=juniAtmCircuitOutOamF5Cells, juniAtmSubIfVccTrafficShapingCdvt=juniAtmSubIfVccTrafficShapingCdvt, juniAtmPingTestCodeMaxPingCountReached=juniAtmPingTestCodeMaxPingCountReached, juniAtmVpPingTable=juniAtmVpPingTable, juniAtmF4FlowSegmentInOamCellsDropped=juniAtmF4FlowSegmentInOamCellsDropped, juniAtmVpStatsIfIndex=juniAtmVpStatsIfIndex, juniAtmBulkCircuitsMaxVci=juniAtmBulkCircuitsMaxVci, juniAtmPvcStatsVpi=juniAtmPvcStatsVpi, juniAtmMartiniGroup=juniAtmMartiniGroup, juniAtmF4FlowOutSegmentLoopbackCells=juniAtmF4FlowOutSegmentLoopbackCells, juniAtmIfCacAvailableBandwidth=juniAtmIfCacAvailableBandwidth, juniAtmGroup=juniAtmGroup, juniAtmSubIfSvcConfigMbs=juniAtmSubIfSvcConfigMbs, juniAtmPvcStatsInPacketDiscards=juniAtmPvcStatsInPacketDiscards, juniAtmMIB=juniAtmMIB, juniAtmCircuitInOamF5SegmentLoopbackRsps=juniAtmCircuitInOamF5SegmentLoopbackRsps, juniAtmCircuitOamAlarmClearTimeout=juniAtmCircuitOamAlarmClearTimeout, juniAtmNbmaMapGroup=juniAtmNbmaMapGroup, juniAtmCircuitInOamF5Cells=juniAtmCircuitInOamF5Cells, juniAtmBulkCircuitsIdAal5IfIndex=juniAtmBulkCircuitsIdAal5IfIndex, juniAtmVcPingMaxRtt=juniAtmVcPingMaxRtt, juniAtmOamF4FlowSegmentIfIndex=juniAtmOamF4FlowSegmentIfIndex, juniAtmSubIfNextIfIndex=juniAtmSubIfNextIfIndex, juniAtmIfSvcSignallingVcd=juniAtmIfSvcSignallingVcd, juniAtmMartiniTimeoutTimerEntry=juniAtmMartiniTimeoutTimerEntry, juniAtmSvcGroup=juniAtmSvcGroup, juniAtmPingTestOamSeg=juniAtmPingTestOamSeg, juniAtmSubIfVccServiceCategory=juniAtmSubIfVccServiceCategory, juniAtmVcPingAverageRtt=juniAtmVcPingAverageRtt, juniAtmSubIfVccVci=juniAtmSubIfVccVci, juniAtmSubIfLayer=juniAtmSubIfLayer, juniAtmBulkCircuitsInstance=juniAtmBulkCircuitsInstance, juniAtmPvcStatsInPacketUnknownProtocol=juniAtmPvcStatsInPacketUnknownProtocol, juniAtmTrapPrefix=juniAtmTrapPrefix, juniAtmBulkCircuitsNameEntry=juniAtmBulkCircuitsNameEntry, juniAtmPvcStatsOutCellErrors=juniAtmPvcStatsOutCellErrors, juniAtmIfPnniRccAdminStatus=juniAtmIfPnniRccAdminStatus, juniAtmCircuitOamIfIndex=juniAtmCircuitOamIfIndex, juniAtmBulkCircuitsRowStatus=juniAtmBulkCircuitsRowStatus, juniAtmVpPingStartTime=juniAtmVpPingStartTime, juniAtmIfCacUsedBandwidthUpper=juniAtmIfCacUsedBandwidthUpper, juniAtmF4FlowInOamEndLoopbackCells=juniAtmF4FlowInOamEndLoopbackCells, juniAtmSubIfGroup4=juniAtmSubIfGroup4, juniAtmF4FlowSegmentLastTimeChanged=juniAtmF4FlowSegmentLastTimeChanged, juniAtmAal5IfIndex=juniAtmAal5IfIndex, juniAtmOamF4FlowEndToEndIfIndex=juniAtmOamF4FlowEndToEndIfIndex, juniAtmF4FlowOutEndToEndLoopbackCells=juniAtmF4FlowOutEndToEndLoopbackCells, juniAtmSubIfVccRowStatus=juniAtmSubIfVccRowStatus, juniAtmConformance=juniAtmConformance, juniAtmNbma=juniAtmNbma, juniAtmF4FlowOamEndVpOperationState=juniAtmF4FlowOamEndVpOperationState, juniAtmVpStatsInPacketDiscards=juniAtmVpStatsInPacketDiscards, juniAtmVpStatsInPacketErrors=juniAtmVpStatsInPacketErrors, juniAtmSubIfSvcRowStatus=juniAtmSubIfSvcRowStatus, juniAtmPvcStatsOutPacketErrors=juniAtmPvcStatsOutPacketErrors, juniAtmF4FlowEndActualLoopbackFreq=juniAtmF4FlowEndActualLoopbackFreq, juniAtmVpPingTimeOut=juniAtmVpPingTimeOut, juniAtmVcClassVccOamAdminStatus=juniAtmVcClassVccOamAdminStatus, juniAtmIfOamCellFilter=juniAtmIfOamCellFilter, juniAtmVpStatsOutPacketOctets=juniAtmVpStatsOutPacketOctets, juniAtmVpStatsOutPackets=juniAtmVpStatsOutPackets, juniAtmVpStatsVpi=juniAtmVpStatsVpi, juniAtmIfPnniRccVci=juniAtmIfPnniRccVci, JuniAtmNbmaMapName=JuniAtmNbmaMapName, juniAtmCircuitInOamF5RdiCells=juniAtmCircuitInOamF5RdiCells, juniAtmObjects=juniAtmObjects, juniAtmVpTunnelVpi=juniAtmVpTunnelVpi, juniAtmMartiniTimeoutTimerValue=juniAtmMartiniTimeoutTimerValue, juniAtmCircuitOamVpi=juniAtmCircuitOamVpi, juniAtmCompliance11=juniAtmCompliance11, juniAtmSubIfSvcConfigPcr=juniAtmSubIfSvcConfigPcr, juniAtmBulkCircuitsMaxVpi=juniAtmBulkCircuitsMaxVpi, juniAtmF4FlowOamEndToEndStatsTable=juniAtmF4FlowOamEndToEndStatsTable, juniAtmF4FlowEndInOamCells=juniAtmF4FlowEndInOamCells, juniAtmBulkCircuitsAal5IfIndex=juniAtmBulkCircuitsAal5IfIndex, juniAtmCircuitOutOamF5RdiCells=juniAtmCircuitOutOamF5RdiCells, juniAtmF4OamCircuitGroup=juniAtmF4OamCircuitGroup, juniAtmCircuitInOamF5SegmentLoopbackCells=juniAtmCircuitInOamF5SegmentLoopbackCells, juniAtmF4FlowInOamSegmentAisCells=juniAtmF4FlowInOamSegmentAisCells, juniAtmSubIfRowStatus=juniAtmSubIfRowStatus, juniAtmVcClassVccInverseArpRefresh=juniAtmVcClassVccInverseArpRefresh, juniAtmIfCapabilityTable=juniAtmIfCapabilityTable, juniAtmCircuitOamVci=juniAtmCircuitOamVci, juniAtmF4FlowSegmentOutOamCells=juniAtmF4FlowSegmentOutOamCells, juniAtmF4FlowInOamEndRdiCells=juniAtmF4FlowInOamEndRdiCells, juniAtmPvcStatsInCells=juniAtmPvcStatsInCells, juniAtmBulkCircuitsEntry=juniAtmBulkCircuitsEntry, juniAtmBulkCircuitsId=juniAtmBulkCircuitsId, juniAtmMartiniTimeoutTimerTable=juniAtmMartiniTimeoutTimerTable, juniAtmVpStatsCrcErrors=juniAtmVpStatsCrcErrors, juniAtmCircuitOamTable=juniAtmCircuitOamTable, juniAtmF4FlowSegmentInLoopbackRsps=juniAtmF4FlowSegmentInLoopbackRsps, juniAtmCircuitOutOamF5SegmentLoopbackCmds=juniAtmCircuitOutOamF5SegmentLoopbackCmds, juniAtmIfCacAvailableBandwidthRx=juniAtmIfCacAvailableBandwidthRx, juniAtmProfileOverrideAssignIfCircuitEntry=juniAtmProfileOverrideAssignIfCircuitEntry, juniAtmIfUniVersion=juniAtmIfUniVersion, juniAtmF4FlowInOamSegmentCCActDeActCells=juniAtmF4FlowInOamSegmentCCActDeActCells, juniAtmBulkCircuitsNameTable=juniAtmBulkCircuitsNameTable, juniAtmIfSvcSignallingVci=juniAtmIfSvcSignallingVci, juniAtmSubIfSvcConfigEntry=juniAtmSubIfSvcConfigEntry, JuniAtmNbmaMapNameOrNull=JuniAtmNbmaMapNameOrNull, juniAtmIfSvcSignallingVpi=juniAtmIfSvcSignallingVpi, juniAtmVcClassGroup=juniAtmVcClassGroup, juniAtmSubIfDescriptionExport=juniAtmSubIfDescriptionExport, juniAtmNbmaMapListName=juniAtmNbmaMapListName, juniAtmOamF4FlowEndToEndCfgTable=juniAtmOamF4FlowEndToEndCfgTable, juniAtmVpTunnelServiceCategory=juniAtmVpTunnelServiceCategory, juniAtmVcClass=juniAtmVcClass, juniAtmF4FlowOutSegmentCCCells=juniAtmF4FlowOutSegmentCCCells, juniAtmSubIfNbma=juniAtmSubIfNbma, juniAtmOamF4FlowEndToEndCfgEntry=juniAtmOamF4FlowEndToEndCfgEntry, juniAtmVcClassTable=juniAtmVcClassTable, juniAtmMartiniTimeoutTimerIndex=juniAtmMartiniTimeoutTimerIndex, juniAtmVcPingProbeResponses=juniAtmVcPingProbeResponses, juniAtmIfPnniRccTable=juniAtmIfPnniRccTable, juniAtmVcClassVccPcr=juniAtmVcClassVccPcr, juniAtmCircuitOutOamF5EndToEndLoopbackCells=juniAtmCircuitOutOamF5EndToEndLoopbackCells, juniAtmIfPnniRccEntry=juniAtmIfPnniRccEntry, juniAtmIfIlmiPollFrequency=juniAtmIfIlmiPollFrequency, juniAtmVpStatsInPackets=juniAtmVpStatsInPackets, juniAtmIfCapabilityOamCellFilter=juniAtmIfCapabilityOamCellFilter, juniAtmSubIfVccScr=juniAtmSubIfVccScr, juniAtmSubIfAssociatedVcClassId=juniAtmSubIfAssociatedVcClassId, juniAtmF4FlowOutSegmentCCActDeActCells=juniAtmF4FlowOutSegmentCCActDeActCells, juniAtmPvcStatsInCellErrors=juniAtmPvcStatsInCellErrors, juniAtmVcClassIdTable=juniAtmVcClassIdTable, juniAtmF4FlowOutEndRdiCells=juniAtmF4FlowOutEndRdiCells, juniAtmBulkCircuitsNameId=juniAtmBulkCircuitsNameId, juniAtmVpDescrEntry=juniAtmVpDescrEntry, juniAtmProfileOverrideAssignIfCircuitProfileId=juniAtmProfileOverrideAssignIfCircuitProfileId, juniAtmCircuitOamDownCount=juniAtmCircuitOamDownCount, juniAtmBulkCircuitsNameAal5IfIndex=juniAtmBulkCircuitsNameAal5IfIndex, juniAtmSubIfTable=juniAtmSubIfTable, juniAtmSubIfAdvisoryRxSpeed=juniAtmSubIfAdvisoryRxSpeed, juniAtmF4FlowOutEndCCActDeActCells=juniAtmF4FlowOutEndCCActDeActCells, juniAtmVpStatsInCells=juniAtmVpStatsInCells, juniAtmIfEntry=juniAtmIfEntry, juniAtmSubIfLocationIndex=juniAtmSubIfLocationIndex, juniAtmSubIfVccVpi=juniAtmSubIfVccVpi, juniAtmOamF4FlowEndToEndLoopbackTimer=juniAtmOamF4FlowEndToEndLoopbackTimer, juniAtmSubIfSvcConfigCdvt=juniAtmSubIfSvcConfigCdvt, juniAtmVcClassId=juniAtmVcClassId, juniAtmSubIfSvcConfigDestE164Address=juniAtmSubIfSvcConfigDestE164Address, juniAtmCircuitInOamF5EndToEndLoopbackCells=juniAtmCircuitInOamF5EndToEndLoopbackCells, juniAtmVcClassVccOamRetryFrequency=juniAtmVcClassVccOamRetryFrequency, juniAtmCompliance3=juniAtmCompliance3, juniAtmTraps=juniAtmTraps, juniAtmSubIfMtu=juniAtmSubIfMtu, juniAtmNbmaMapVci=juniAtmNbmaMapVci, juniAtmLocationGroup=juniAtmLocationGroup, juniAtmNbmaMapListTable=juniAtmNbmaMapListTable, juniAtmCompliance6=juniAtmCompliance6, juniAtmVpPingProbeResponses=juniAtmVpPingProbeResponses, juniAtmProfileOverrideAssignIfCircuitVpi=juniAtmProfileOverrideAssignIfCircuitVpi, juniAtmProfileOverrideAssignIfCircuitRangeId=juniAtmProfileOverrideAssignIfCircuitRangeId, juniAtmCompliance4=juniAtmCompliance4, juniAtmF4FlowSegmentOutLoopbackCmds=juniAtmF4FlowSegmentOutLoopbackCmds, juniAtmSubIfVccTrafficShapingEntry=juniAtmSubIfVccTrafficShapingEntry, juniAtmIfCacUsedBandwidthLower=juniAtmIfCacUsedBandwidthLower, juniAtmProfileOverrideAssignIfCircuitOperStatus=juniAtmProfileOverrideAssignIfCircuitOperStatus, juniAtmNbmaMapName=juniAtmNbmaMapName, juniAtmIfIlmiVcd=juniAtmIfIlmiVcd, juniAtmVcClassIdName=juniAtmVcClassIdName, juniAtmCompliance=juniAtmCompliance, juniAtmCompliance14=juniAtmCompliance14, juniAtmVpPingMinRtt=juniAtmVpPingMinRtt, juniAtmF4FlowEndLastTimeChanged=juniAtmF4FlowEndLastTimeChanged, juniAtmVcPingMinRtt=juniAtmVcPingMinRtt, juniAtmCircuitOamAlarmDownCount=juniAtmCircuitOamAlarmDownCount, juniAtmGroup7=juniAtmGroup7, juniAtmGroup5=juniAtmGroup5, juniAtmF4FlowOamSegmentVpOperationState=juniAtmF4FlowOamSegmentVpOperationState, juniAtmNbmaMapBroadcast=juniAtmNbmaMapBroadcast, juniAtmIfCacAdminState=juniAtmIfCacAdminState, juniAtmCompliances=juniAtmCompliances, juniAtmOamF4FlowSegmentCCSource=juniAtmOamF4FlowSegmentCCSource, juniAtmSubIfLocationIfIndex=juniAtmSubIfLocationIfIndex, juniAtmSubIfMartiniTimeoutTimerId=juniAtmSubIfMartiniTimeoutTimerId, juniAtmVcPingTestCompleted=juniAtmVcPingTestCompleted, juniAtmPingTrapGroup=juniAtmPingTrapGroup, juniAtmGroup6=juniAtmGroup6, PYSNMP_MODULE_ID=juniAtmMIB, juniAtmIfIndex=juniAtmIfIndex, juniAtmVcPingSentProbes=juniAtmVcPingSentProbes, juniAtmF4FlowOamSegmentVpAdminState=juniAtmF4FlowOamSegmentVpAdminState, juniAtmVpTunnelIfIndex=juniAtmVpTunnelIfIndex, juniAtmCompliance2=juniAtmCompliance2, juniAtmIfVcCount=juniAtmIfVcCount, juniAtmIfSvcSignallingTable=juniAtmIfSvcSignallingTable, juniAtmF4FlowInOamSegmentCCCells=juniAtmF4FlowInOamSegmentCCCells, juniAtmF4FlowSegmentInLoopbackCmds=juniAtmF4FlowSegmentInLoopbackCmds, juniAtmNbmaMapIpAddress=juniAtmNbmaMapIpAddress, juniAtmCircuitInOamF5AisCells=juniAtmCircuitInOamF5AisCells, juniAtmVpStatsGroup=juniAtmVpStatsGroup, juniAtmVpPingAverageRtt=juniAtmVpPingAverageRtt, juniAtmSubIfVccTrafficShapingPacketShaping=juniAtmSubIfVccTrafficShapingPacketShaping, juniAtmSubIfSvcConfigObserve=juniAtmSubIfSvcConfigObserve, juniAtmOamF4FlowEndToEndCCSource=juniAtmOamF4FlowEndToEndCCSource, juniAtmCompliance9=juniAtmCompliance9, juniAtmF4FlowEndToEndOutLoopbackCmds=juniAtmF4FlowEndToEndOutLoopbackCmds, juniAtmCompliance13=juniAtmCompliance13, juniAtmVpDescrTable=juniAtmVpDescrTable, juniAtmPvcStatsOutCells=juniAtmPvcStatsOutCells, juniAtmVpPingEntry=juniAtmVpPingEntry)
mibBuilder.exportSymbols("Juniper-UNI-ATM-MIB", juniAtmNbmaMapVpi=juniAtmNbmaMapVpi, juniAtmCircuitOutOamF5EndToEndLoopbackCmds=juniAtmCircuitOutOamF5EndToEndLoopbackCmds, juniAtmSubIfLocationTable=juniAtmSubIfLocationTable, juniAtmVcClassVccType=juniAtmVcClassVccType, juniAtmIfCacSubscriptionBandwidth=juniAtmIfCacSubscriptionBandwidth, juniAtmCircuitOamLoopbackFrequency=juniAtmCircuitOamLoopbackFrequency, juniAtmVcClassNameId=juniAtmVcClassNameId, juniAtmIfCapabilityNumVpiVciBits=juniAtmIfCapabilityNumVpiVciBits, juniAtmBulkCircuitsIdEntry=juniAtmBulkCircuitsIdEntry, juniAtmOamF4FlowEndToEndCCSink=juniAtmOamF4FlowEndToEndCCSink, juniAtmSubIfInverseArp=juniAtmSubIfInverseArp, juniAtmF4FlowOamSegmentStatsEntry=juniAtmF4FlowOamSegmentStatsEntry, juniAtmSubIfGroup=juniAtmSubIfGroup, juniAtmIfCapabilityIndex=juniAtmIfCapabilityIndex, juniAtmF4FlowOutSegmentRdiCells=juniAtmF4FlowOutSegmentRdiCells, juniAtmIfCapabilityMaxVpi=juniAtmIfCapabilityMaxVpi, juniAtmVcClassVccOamUpCount=juniAtmVcClassVccOamUpCount, juniAtmVcPingTimeOut=juniAtmVcPingTimeOut, juniAtmSubIfVccAssociatedVcClassId=juniAtmSubIfVccAssociatedVcClassId, juniAtmNbmaMapVcd=juniAtmNbmaMapVcd, juniAtmSubIfSvcConfigScr=juniAtmSubIfSvcConfigScr, juniAtmIfSvcSignallingEntry=juniAtmIfSvcSignallingEntry, juniAtmCompliance12=juniAtmCompliance12, juniAtmIfCapabilityDefaultVcPerVp=juniAtmIfCapabilityDefaultVcPerVp, juniAtmF4FlowInOamSegmentRdiCells=juniAtmF4FlowInOamSegmentRdiCells, juniAtmCircuitOutOamF5SegmentLoopbackRsps=juniAtmCircuitOutOamF5SegmentLoopbackRsps, juniAtmF4FlowOutEndCCCells=juniAtmF4FlowOutEndCCCells, juniAtmF4FlowEndToEndInLoopbackCmds=juniAtmF4FlowEndToEndInLoopbackCmds, juniAtmF4FlowSegmentOutLoopbackRsps=juniAtmF4FlowSegmentOutLoopbackRsps, juniAtmVpStatsOverSizedPackets=juniAtmVpStatsOverSizedPackets, juniAtmIfCapabilityTrafficShaping=juniAtmIfCapabilityTrafficShaping, juniAtmVcClassIdEntry=juniAtmVcClassIdEntry, juniAtmPvcStatisticsTable=juniAtmPvcStatisticsTable, juniAtmIfCacUbrWeight=juniAtmIfCacUbrWeight, juniAtmF4FlowInOamSegmentLoopbackCells=juniAtmF4FlowInOamSegmentLoopbackCells, juniAtmPingTestCodeOamDisabled=juniAtmPingTestCodeOamDisabled, juniAtmPnniGroup=juniAtmPnniGroup, juniAtmVcClassNameEntry=juniAtmVcClassNameEntry, juniAtmVcPingStartTime=juniAtmVcPingStartTime, juniAtmBulkCircuitsMinVci=juniAtmBulkCircuitsMinVci, juniAtmCompliance10=juniAtmCompliance10, juniAtmIfCapabilityMaxVci=juniAtmIfCapabilityMaxVci, juniAtmVcClassEntry=juniAtmVcClassEntry, juniAtmIfAssociatedVcClassId=juniAtmIfAssociatedVcClassId, juniAtmCircuitOamUpCount=juniAtmCircuitOamUpCount, juniAtmVcClassVccMbs=juniAtmVcClassVccMbs, juniAtmPingTestCodeCircuitDown=juniAtmPingTestCodeCircuitDown, juniAtmTrafficShapingGroup=juniAtmTrafficShapingGroup, juniAtmSubIfVccTrafficShapingPoliceObserve=juniAtmSubIfVccTrafficShapingPoliceObserve, juniAtmOamF4FlowEndToEndRowStatus=juniAtmOamF4FlowEndToEndRowStatus, juniAtmIfInCells=juniAtmIfInCells, juniAtmVcPingEntry=juniAtmVcPingEntry, juniAtmPvcStatsInCellOctets=juniAtmPvcStatsInCellOctets, juniAtmPvcStatsOutCellOctets=juniAtmPvcStatsOutCellOctets, juniAtmIfE164Gateway=juniAtmIfE164Gateway, juniAtmVpStatsTable=juniAtmVpStatsTable, juniAtmSubIfSvcConfigTable=juniAtmSubIfSvcConfigTable, juniAtmAal5IfLayer=juniAtmAal5IfLayer, juniAtmPvcStatsInPacketOctetDiscards=juniAtmPvcStatsInPacketOctetDiscards, juniAtmProfileOverrideAssignIfCircuitRowStatus=juniAtmProfileOverrideAssignIfCircuitRowStatus, juniAtmVcClassIdId=juniAtmVcClassIdId, juniAtmPing=juniAtmPing, juniAtmBulkCircuitsAdminState=juniAtmBulkCircuitsAdminState, juniAtmProfileOverrideAssignIfCircuitVci=juniAtmProfileOverrideAssignIfCircuitVci, juniAtmGroups=juniAtmGroups, juniAtmVpDescription=juniAtmVpDescription, juniAtmVpTunnelEntry=juniAtmVpTunnelEntry, juniAtmIfPnniRccVpi=juniAtmIfPnniRccVpi, juniAtmAal5IfRowStatus=juniAtmAal5IfRowStatus, juniAtmGroup3=juniAtmGroup3, juniAtmCircuitOutOamF5SegmentLoopbackCells=juniAtmCircuitOutOamF5SegmentLoopbackCells, juniAtmNbmaMapListEntry=juniAtmNbmaMapListEntry, juniAtmGroup2=juniAtmGroup2, juniAtmF4FlowInOamEndCCActDeActCells=juniAtmF4FlowInOamEndCCActDeActCells, juniAtmVcClassVccScr=juniAtmVcClassVccScr, juniAtmIfCapabilityEntry=juniAtmIfCapabilityEntry, juniAtmPingTestCodeStopped=juniAtmPingTestCodeStopped, juniAtmPingTestCodeOamVcOperState=juniAtmPingTestCodeOamVcOperState, juniAtmNbmaMapIfIndex=juniAtmNbmaMapIfIndex, juniAtmVcClassVccInverseArp=juniAtmVcClassVccInverseArp, juniAtmIfIlmiAdminState=juniAtmIfIlmiAdminState, juniAtmF4FlowInOamEndAisCells=juniAtmF4FlowInOamEndAisCells, juniAtmOamF4FlowSegmentCfgEntry=juniAtmOamF4FlowSegmentCfgEntry, juniAtmProfileOverrideAssignIfCircuitTable=juniAtmProfileOverrideAssignIfCircuitTable, juniAtmF4OamCircuitGroup2=juniAtmF4OamCircuitGroup2, juniAtmSubIfVccEntry=juniAtmSubIfVccEntry, juniAtmVcClassNameTable=juniAtmVcClassNameTable, juniAtmVpStatsInPacketUnknownProtocol=juniAtmVpStatsInPacketUnknownProtocol, juniAtmPvcStatsinPacketErrors=juniAtmPvcStatsinPacketErrors, JuniAtmLocationType=JuniAtmLocationType, juniAtmOamF4FlowEndToEndVpi=juniAtmOamF4FlowEndToEndVpi, juniAtmCircuitOamLoopbackOperStatus=juniAtmCircuitOamLoopbackOperStatus, juniAtmPingTestTypes=juniAtmPingTestTypes, juniAtmPingTestCode=juniAtmPingTestCode, juniAtmSubIfSvcConfigDestAtmAddress=juniAtmSubIfSvcConfigDestAtmAddress, juniAtmCircuitVcOamOperStatus=juniAtmCircuitVcOamOperStatus, juniAtmBulkCircuitsTable=juniAtmBulkCircuitsTable, juniAtmAal5IfLowerIfIndex=juniAtmAal5IfLowerIfIndex, juniAtmBulkCircuitsNameRowStatus=juniAtmBulkCircuitsNameRowStatus, juniAtmPvcStatsIfIndex=juniAtmPvcStatsIfIndex, juniAtmNbmaMapListRowStatus=juniAtmNbmaMapListRowStatus, juniAtmAal5NextIfIndex=juniAtmAal5NextIfIndex, juniAtmSubIfGroup7=juniAtmSubIfGroup7, juniAtmBulkCircuitsMinVpi=juniAtmBulkCircuitsMinVpi, juniAtmF4FlowEndToEndOutLoopbackRsps=juniAtmF4FlowEndToEndOutLoopbackRsps, juniAtmVcPingControlGroup=juniAtmVcPingControlGroup, juniAtmSubIfGroup2=juniAtmSubIfGroup2, juniAtmOamF4FlowSegmentCCSink=juniAtmOamF4FlowSegmentCCSink, juniAtmCompliance8=juniAtmCompliance8, juniAtmNbmaMapEntry=juniAtmNbmaMapEntry, juniAtmBulkCircuitsIdName=juniAtmBulkCircuitsIdName, juniAtmSubIfDistinguisher=juniAtmSubIfDistinguisher, juniAtmSubIfLowerIfIndex=juniAtmSubIfLowerIfIndex, juniAtmF4FlowOamEndToEndStatsEntry=juniAtmF4FlowOamEndToEndStatsEntry, juniAtmNbmaMapTable=juniAtmNbmaMapTable, juniAtmSubIfInverseArpRefresh=juniAtmSubIfInverseArpRefresh, juniAtmSubIfVccTrafficShapingTagging=juniAtmSubIfVccTrafficShapingTagging, juniAtmProfileOverrideAssignIfCircuitAal5Index=juniAtmProfileOverrideAssignIfCircuitAal5Index, juniAtmVcClassVccServiceCategory=juniAtmVcClassVccServiceCategory, juniAtmNbmaMapRowStatus=juniAtmNbmaMapRowStatus, juniAtmIfIlmiVci=juniAtmIfIlmiVci, juniAtmSubIfGroup5=juniAtmSubIfGroup5, juniAtmVcClassVccOamDownCount=juniAtmVcClassVccOamDownCount, JuniAtmLocationValue=JuniAtmLocationValue, juniAtmSubIfSvcConfigServiceCategory=juniAtmSubIfSvcConfigServiceCategory, juniAtmNextIfIndex=juniAtmNextIfIndex, juniAtmSubIfSvcConfigCircuitType=juniAtmSubIfSvcConfigCircuitType, juniAtmIfCapabilityMaxVcd=juniAtmIfCapabilityMaxVcd, juniAtmGroup8=juniAtmGroup8, juniAtmCircuitOutOamF5EndToEndLoopbackRsps=juniAtmCircuitOutOamF5EndToEndLoopbackRsps, juniAtmSubIfVccVcd=juniAtmSubIfVccVcd, juniAtmVpStatsOutCells=juniAtmVpStatsOutCells, juniAtmF4FlowSegmentInOamCells=juniAtmF4FlowSegmentInOamCells, juniAtmIfE164OneToOneAddrTrans=juniAtmIfE164OneToOneAddrTrans, juniAtmBulkCircuitsIdTable=juniAtmBulkCircuitsIdTable, juniAtmVpTunnelRowStatus=juniAtmVpTunnelRowStatus, juniAtmLocation=juniAtmLocation, juniAtmPingTestOamE2E=juniAtmPingTestOamE2E, juniAtmPvcStatsOutPackets=juniAtmPvcStatsOutPackets, juniAtmAal5IfTable=juniAtmAal5IfTable, juniAtmVcClassNameRowStatus=juniAtmVcClassNameRowStatus, juniAtmGroup9=juniAtmGroup9, juniAtmF4FlowEndToEndInLoopbackRsps=juniAtmF4FlowEndToEndInLoopbackRsps, juniAtmVcPingTable=juniAtmVcPingTable, juniAtmF4FlowOamEndVpAdminState=juniAtmF4FlowOamEndVpAdminState, juniAtmSubIfVccPcr=juniAtmSubIfVccPcr, juniAtmVpTunnelKbps=juniAtmVpTunnelKbps, juniAtmIfLowerIfIndex=juniAtmIfLowerIfIndex, juniAtmVpTunnelTable=juniAtmVpTunnelTable, juniAtmVcClassVccOamLoopbackFrequency=juniAtmVcClassVccOamLoopbackFrequency, juniAtmCompliance7=juniAtmCompliance7, juniAtmCircuitInOamF5SegmentLoopbackCmds=juniAtmCircuitInOamF5SegmentLoopbackCmds, juniAtmVpPingControlGroup=juniAtmVpPingControlGroup, juniAtmVpPingProbeCount=juniAtmVpPingProbeCount, juniAtmVpStatsOutPacketErrors=juniAtmVpStatsOutPacketErrors, juniAtmIfMapGroup=juniAtmIfMapGroup, juniAtmPvcStatsVci=juniAtmPvcStatsVci, juniAtmVcPingProbeCount=juniAtmVcPingProbeCount, juniAtmVpPingSentProbes=juniAtmVpPingSentProbes, juniAtmVcClassVccOamAlarmClearTimeout=juniAtmVcClassVccOamAlarmClearTimeout, juniAtmVpPingTestCompleted=juniAtmVpPingTestCompleted, juniAtmSubIfVccMbs=juniAtmSubIfVccMbs, juniAtmIfPnniRccVcd=juniAtmIfPnniRccVcd, juniAtmVpPingCtlTrapGeneration=juniAtmVpPingCtlTrapGeneration, juniAtmSubIfEntry=juniAtmSubIfEntry, juniAtmSubIfSvcConfigTagging=juniAtmSubIfSvcConfigTagging, juniAtmIfSvcSignallingAdminStatus=juniAtmIfSvcSignallingAdminStatus, juniAtmF4FlowEndInOamCellsDropped=juniAtmF4FlowEndInOamCellsDropped, juniAtmBulkCircuitsIdId=juniAtmBulkCircuitsIdId, juniAtmSubIfIndex=juniAtmSubIfIndex, juniAtmSvcGroup2=juniAtmSvcGroup2, juniAtmVpPingMaxRtt=juniAtmVpPingMaxRtt, juniAtmAal5IfEntry=juniAtmAal5IfEntry)
