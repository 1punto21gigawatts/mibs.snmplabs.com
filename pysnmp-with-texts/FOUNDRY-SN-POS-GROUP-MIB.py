#
# PySNMP MIB module FOUNDRY-SN-POS-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-POS-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:15:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
router, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "router")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, iso, Bits, TimeTicks, Gauge32, Counter32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "iso", "Bits", "TimeTicks", "Gauge32", "Counter32", "Unsigned32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snPOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14))
snPOS.setRevisions(('2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snPOS.setRevisionsDescriptions(('Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', '',))
if mibBuilder.loadTexts: snPOS.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: snPOS.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snPOS.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snPOS.setDescription("Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class POSStatus(TextualConvention, Integer32):
    description = ' Status Values '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

snPOSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1))
snPOSInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1), )
if mibBuilder.loadTexts: snPOSInfoTable.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoTable.setDescription('A specific snPOSInfo group consists of a number of switch ports. ')
snPOSInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-POS-GROUP-MIB", "snPOSInfoPortNum"))
if mibBuilder.loadTexts: snPOSInfoEntry.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoEntry.setDescription('An entry in the snPOSInfo table indicates the configuration on a specified port. A SNMP SET PDU for a row of the snPOSInfoTable requires the entired sequence of the MIB Objects in each snPOSInfoEntry stored in one PDU. Otherwise, GENERR return-value will be returned.')
snPOSInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSInfoPortNum.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoPortNum.setDescription('The port index. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number (slot for chassis only).')
snPOSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSIfIndex.setStatus('current')
if mibBuilder.loadTexts: snPOSIfIndex.setDescription('In order to identify a particular interface, this object shall identify the instance of the ifIndex object, defined in RFC 1213 and RFC 1573.')
snPOSDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSDescr.setStatus('current')
if mibBuilder.loadTexts: snPOSDescr.setDescription('A textual string containing the slot/port information about the interface.')
snPOSName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSName.setStatus('current')
if mibBuilder.loadTexts: snPOSName.setDescription('Port Name string.')
snPOSInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("s155000", 1), ("s622000", 2), ("other", 3), ("s2488000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoSpeed.setDescription('The speed configuration for a port. The values are: 155000 622000 2488000 ')
snPOSInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoAdminStatus.setDescription('The desired state of all ports. The testing(3) state indicates that no operational packets can be passed. (same as ifAdminStatus in MIB-II)')
snPOSInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoLinkStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. (same as ifOperStatus in MIB-II)')
snPOSInfoClock = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoClock.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoClock.setDescription('Clock default internal')
snPOSInfoLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("line", 1), ("internal", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoLoopBack.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoLoopBack.setDescription('Loop back default none')
snPOSInfoScrambleATM = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 10), POSStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoScrambleATM.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoScrambleATM.setDescription('ATM style scrambling default off')
snPOSInfoFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoFraming.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoFraming.setDescription('Framing default SONET')
snPOSInfoCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc32bits", 1), ("crc16bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoCRC.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoCRC.setDescription('CRC default 32 bit')
snPOSInfoKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoKeepAlive.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoKeepAlive.setDescription('Keep-alive default 10')
snPOSInfoFlagC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoFlagC2.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoFlagC2.setDescription('C2 flag')
snPOSInfoFlagJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoFlagJ0.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoFlagJ0.setDescription('J0 flag')
snPOSInfoFlagH1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfoFlagH1.setStatus('current')
if mibBuilder.loadTexts: snPOSInfoFlagH1.setDescription('H1 flag')
snPOSStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsInFrames.setDescription('The total number of packets received on the interface.')
snPOSStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsOutFrames.setDescription('The total number of packets transmitted out of the interface.')
snPOSStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsAlignErrors.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsAlignErrors.setDescription('dot3StatsAlignmentErrors : A count of frames received on a particular interface that are not an integral number of octets in length and do not pass the FCS check. The count represented by an instance of this object is incremented when the alignmentError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snPOSStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsFCSErrors.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsFCSErrors.setDescription('dot3StatsFCSErrors : A count of frames received on a particular interface that are an integral number of octets in length but do not pass the FCS check. The count represented by an instance of this object is incremented when the frameCheckError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snPOSStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsFrameTooLongs.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsFrameTooLongs.setDescription('dot3StatsFrameTooLongs : A count of frames received on a particular interface that exceed the maximum permitted frame size. The count represented by an instance of this object is incremented when the frameTooLong status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions obtain are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
snPOSStatsFrameTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsFrameTooShorts.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsFrameTooShorts.setDescription(' A count of frames received on a particular interface that below the minimum permitted frame size.')
snPOSStatsInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsInDiscard.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsInDiscard.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
snPOSStatsOutDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsOutDiscard.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsOutDiscard.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
snPOSInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSInOctets.setStatus('current')
if mibBuilder.loadTexts: snPOSInOctets.setDescription('The total number of octets received on the interface, including framing characters. This object is a 64-bit counter of the ifInOctets object, defined in RFC 1213. The octet string is in big-endian byte order.')
snPOSOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSOutOctets.setStatus('current')
if mibBuilder.loadTexts: snPOSOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters. This object is a 64-bit counter of the ifOutOctets object, defined in RFC 1213. The octet string is in big-endian byte order.')
snPOSStatsInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsInBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsInBitsPerSec.setDescription('The number of bits per second received on the interface over a 5 minutes interval.')
snPOSStatsOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsOutBitsPerSec.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsOutBitsPerSec.setDescription('The number of bits per second transmitted out of the interface over a 5 minutes interval.')
snPOSStatsInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsInPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsInPktsPerSec.setDescription('The number of packets per second received on the interface over a 5 minutes interval.')
snPOSStatsOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsOutPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsOutPktsPerSec.setDescription('The number of packets per second transmitted out of the interface over a 5 minutes interval.')
snPOSStatsInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsInUtilization.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsInUtilization.setDescription('The input network utilization in hundredths of a percent over a 5 minutes interval.')
snPOSStatsOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsOutUtilization.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsOutUtilization.setDescription('The output network utilization in hundredths of a percent over a 5 minutes interval.')
snPOSTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSTagType.setStatus('current')
if mibBuilder.loadTexts: snPOSTagType.setDescription('For tagged port, we could have multiple VLANs per port.')
snPOSStatsB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsB1.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsB1.setDescription('Section error monitoring.')
snPOSStatsB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsB2.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsB2.setDescription('Line error monitoring.')
snPOSStatsB3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsB3.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsB3.setDescription('Path error monitoring.')
snPOSStatsAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsAIS.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsAIS.setDescription('Alarm indication signal.')
snPOSStatsRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsRDI.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsRDI.setDescription('Remote defect indication.')
snPOSStatsLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsLOP.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsLOP.setDescription('Loss of pointer.')
snPOSStatsLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsLOF.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsLOF.setDescription('Loss of frame.')
snPOSStatsLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOSStatsLOS.setStatus('current')
if mibBuilder.loadTexts: snPOSStatsLOS.setDescription('Loss of signal.')
snPOSInfo2Table = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2), )
if mibBuilder.loadTexts: snPOSInfo2Table.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2Table.setDescription('An snPOSInfo2Table consists of a number of SnPOSInfo2Entry entries')
snPOSInfo2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snPOSInfo2Entry.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2Entry.setDescription('An entry in the snPOSInfo2Table indicates the POS configuration on a specified port')
snPOSInfo2Clock = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2Clock.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2Clock.setDescription('Clock source for the POS Interface internal(1) - internal source line (2) - clocking is derived from line')
snPOSInfo2ScrambleATM = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 2), POSStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2ScrambleATM.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2ScrambleATM.setDescription('ATM style scrambling for the POS interface disabled(0) - scrambling is disabled enabled(1) - scrambling is enabled')
snPOSInfo2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc32bits", 1), ("crc16bits", 2))).clone('crc32bits')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2CRC.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2CRC.setDescription('Length of Cyclic Redundnacy Check (CRC) on the POS interface crc32bits(1) - 32 bits crc16bits(2) - 16 buts')
snPOSInfo2KeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2KeepAlive.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2KeepAlive.setDescription('Keep-alive timer for the POS interface in seconds')
snPOSInfo2FlagC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2FlagC2.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2FlagC2.setDescription('C2 flag')
snPOSInfo2SSM = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("t1SonetPrimaryReferenceSource", 1), ("t1SonetTraceabilityUnknown", 2), ("t1SonetStratum2Traceable", 3), ("t1SonetTransitNodeClock", 4), ("t1SonetStratum3eTraceable", 5), ("t1SonetStratum3Traceable", 6), ("t1SonetMinClockTraceable", 7), ("t1SonetDus", 8), ("e1SdhTraceabilityUnknown", 9), ("e1SdhSsmTransitNodeClockG812", 10), ("e1SdhDus", 11), ("e1SdhSsmPrimaryReferenceClockG811", 12), ("e1SdhSsmLocalG812", 13), ("e1SdhSsmSyncEquipmentTimingSource", 14))).clone('t1SonetTraceabilityUnknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2SSM.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2SSM.setDescription('The S(ynchronization) S(tatus) M(essage) is sent over the SONET/SDH line to tell the other end about the quality of clock being sent over the line. t1SonetPrimaryReferenceSource(1) - SONET Primary Reference Source t1SonetTraceabilityUnknown(2} - SONET Traceability Unknown t1SonetStratum2Traceable(3) - SONET Stratum 2 Traceable t1SonetTransitNodeClock(4) - SONET Transit Node Clock t1SonetStratum3eTraceable(5) - SONET Stratum 3e Traceable t1SonetStratum3Traceable(6) - SONET Stratum 3 Traceable t1SonetMinClockTraceable(7) - SONET Minimum Clock Traceable t1SonetDus(8) - SONET Do not Use for Synchronization e1SdhTraceabilityUnknown(9) - SDH Traceability Unknown e1SdhSsmTransitNodeClockG812(10) - SDH Transit Node Clock G812 e1SdhDus(11) - SDH Do not Use for Synchronization e1SdhSsmPrimaryReferenceClockG811(12) - SDH Primary Reference Clock G811 e1SdhSsmLocalG812(13) - SDH Local G812 e1SdhSsmSyncEquipmentTimingSource(14) - SDH Synchronization Equipment Timing Source')
snPOSInfo2Encapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ppp", 1), ("hdlc", 2))).clone('ppp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2Encapsulation.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2Encapsulation.setDescription('Layer 2 encapsulation on the POS interface ppp(1) - Point to Point Protocol (PPP) hdlc(2) - Cisco High-level Data Link Control (cHDLC)')
snPOSInfo2AlarmMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2AlarmMonitoring.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2AlarmMonitoring.setDescription('Alarm Monitoring on POS interface off(0) - Alarm Monitoring is off on(1) - Alarm Montioring is on')
snPOSInfo2OverheadJ0ExpectedMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2OverheadJ0ExpectedMessage.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2OverheadJ0ExpectedMessage.setDescription('Overhead J0 Expected Message')
snPOSInfo2OverheadJ0TransmitMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2OverheadJ0TransmitMessage.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2OverheadJ0TransmitMessage.setDescription('Overhead J0 Transmit Message')
snPOSInfo2OverheadJ1ExpectedMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2OverheadJ1ExpectedMessage.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2OverheadJ1ExpectedMessage.setDescription('Overhead J1 Expected Message')
snPOSInfo2OverheadJ1MessageLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 64))).clone(namedValues=NamedValues(("s16", 16), ("s64", 64))).clone('s64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2OverheadJ1MessageLength.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2OverheadJ1MessageLength.setDescription('Overhead J1 Length of Message s16(16)...........16 bytes s64(64)............64 bytes')
snPOSInfo2OverheadJ1TransmitMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPOSInfo2OverheadJ1TransmitMessage.setStatus('current')
if mibBuilder.loadTexts: snPOSInfo2OverheadJ1TransmitMessage.setDescription('Overhead J1 Transmit Message')
snPOSPPPTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3), )
if mibBuilder.loadTexts: snPOSPPPTable.setStatus('current')
if mibBuilder.loadTexts: snPOSPPPTable.setDescription('An snPOSPPPTable consists of a number of SnPOSPPPEntry entries')
snPOSPPPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snPOSPPPEntry.setStatus('current')
if mibBuilder.loadTexts: snPOSPPPEntry.setDescription('An entry in the snPOSPPPTable indicates the PPP control protocol status on a specified port')
snPosPppLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPosPppLcp.setStatus('current')
if mibBuilder.loadTexts: snPosPppLcp.setDescription('The PPP Link Control Protocol state')
snPosPppIpCp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPosPppIpCp.setStatus('current')
if mibBuilder.loadTexts: snPosPppIpCp.setDescription('The PPP IP Control Protocol state')
snPosPppIpv6Cp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPosPppIpv6Cp.setStatus('current')
if mibBuilder.loadTexts: snPosPppIpv6Cp.setDescription('The PPP IPv6 Control Protocol state')
snPosPppOsInLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPosPppOsInLcp.setStatus('current')
if mibBuilder.loadTexts: snPosPppOsInLcp.setDescription('The PPP OSI Network Layer Control Protocol state')
snPosPppMpLscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPosPppMpLscp.setStatus('current')
if mibBuilder.loadTexts: snPosPppMpLscp.setDescription('The PPP MPLS Control Protocol state')
snPOScHDLCTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4), )
if mibBuilder.loadTexts: snPOScHDLCTable.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCTable.setDescription('An snPOScHDLCTable consists of a number of SnPOScHDLCEntry entries')
snPOScHDLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snPOScHDLCEntry.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCEntry.setDescription('An entry in snPOScHDLCEntry shows the cHDLC information on a specified port')
snPOScHDLCLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCLineState.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCLineState.setDescription('cHDLC Line State')
snPOScHDLCInLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCInLoopback.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCInLoopback.setDescription('cHDLC in loopback')
snPOScHDLCMySeq = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCMySeq.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCMySeq.setDescription('cHDLC my sequence number')
snPOScHDLCMySeqSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCMySeqSeen.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCMySeqSeen.setDescription('cHDLC my sequence number seen')
snPOScHDLCPeerSeqSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCPeerSeqSeen.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCPeerSeqSeen.setDescription('cHDLC peer sequence number seen')
snPOScHDLCUniqueSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCUniqueSent.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCUniqueSent.setDescription('cHDLC unique sent')
snPOScHDLCUniqueReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 14, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPOScHDLCUniqueReceived.setStatus('current')
if mibBuilder.loadTexts: snPOScHDLCUniqueReceived.setDescription('cHDLC unique received')
mibBuilder.exportSymbols("FOUNDRY-SN-POS-GROUP-MIB", snPOSDescr=snPOSDescr, snPOSStatsInBitsPerSec=snPOSStatsInBitsPerSec, snPOSInfo2AlarmMonitoring=snPOSInfo2AlarmMonitoring, snPOScHDLCPeerSeqSeen=snPOScHDLCPeerSeqSeen, snPOSInfoFlagH1=snPOSInfoFlagH1, snPOSStatsLOS=snPOSStatsLOS, snPOScHDLCLineState=snPOScHDLCLineState, snPOSInfoEntry=snPOSInfoEntry, snPOSInfoFlagJ0=snPOSInfoFlagJ0, snPOSStatsRDI=snPOSStatsRDI, snPOSInfoAdminStatus=snPOSInfoAdminStatus, snPOScHDLCUniqueSent=snPOScHDLCUniqueSent, snPOSStatsInPktsPerSec=snPOSStatsInPktsPerSec, snPosPppIpv6Cp=snPosPppIpv6Cp, snPOSName=snPOSName, snPOSInfo=snPOSInfo, snPOSStatsFrameTooShorts=snPOSStatsFrameTooShorts, snPOSPPPEntry=snPOSPPPEntry, snPOSTagType=snPOSTagType, snPOSStatsFrameTooLongs=snPOSStatsFrameTooLongs, POSStatus=POSStatus, snPOSStatsAIS=snPOSStatsAIS, snPOSStatsOutFrames=snPOSStatsOutFrames, snPOSInfo2OverheadJ0TransmitMessage=snPOSInfo2OverheadJ0TransmitMessage, snPOSInfoCRC=snPOSInfoCRC, snPOSInfoTable=snPOSInfoTable, PYSNMP_MODULE_ID=snPOS, snPOSInfo2OverheadJ1MessageLength=snPOSInfo2OverheadJ1MessageLength, snPOSPPPTable=snPOSPPPTable, snPosPppIpCp=snPosPppIpCp, snPOSStatsInDiscard=snPOSStatsInDiscard, snPOSStatsFCSErrors=snPOSStatsFCSErrors, snPOSInfo2Encapsulation=snPOSInfo2Encapsulation, snPOSInfoPortNum=snPOSInfoPortNum, snPOSInfo2OverheadJ1ExpectedMessage=snPOSInfo2OverheadJ1ExpectedMessage, snPosPppOsInLcp=snPosPppOsInLcp, snPosPppLcp=snPosPppLcp, snPOSInOctets=snPOSInOctets, snPOSStatsOutUtilization=snPOSStatsOutUtilization, snPOSStatsB1=snPOSStatsB1, snPosPppMpLscp=snPosPppMpLscp, snPOSStatsAlignErrors=snPOSStatsAlignErrors, snPOSStatsOutPktsPerSec=snPOSStatsOutPktsPerSec, snPOSInfo2OverheadJ0ExpectedMessage=snPOSInfo2OverheadJ0ExpectedMessage, snPOSInfo2ScrambleATM=snPOSInfo2ScrambleATM, snPOScHDLCEntry=snPOScHDLCEntry, snPOSInfo2Table=snPOSInfo2Table, snPOSInfoFraming=snPOSInfoFraming, snPOSInfo2CRC=snPOSInfo2CRC, snPOSStatsLOP=snPOSStatsLOP, snPOSOutOctets=snPOSOutOctets, snPOSStatsOutBitsPerSec=snPOSStatsOutBitsPerSec, snPOSInfoKeepAlive=snPOSInfoKeepAlive, snPOSInfo2OverheadJ1TransmitMessage=snPOSInfo2OverheadJ1TransmitMessage, snPOSStatsInFrames=snPOSStatsInFrames, snPOScHDLCInLoopback=snPOScHDLCInLoopback, snPOScHDLCMySeqSeen=snPOScHDLCMySeqSeen, snPOSStatsB2=snPOSStatsB2, snPOSInfoScrambleATM=snPOSInfoScrambleATM, snPOSInfo2Entry=snPOSInfo2Entry, snPOSStatsInUtilization=snPOSStatsInUtilization, snPOS=snPOS, snPOSIfIndex=snPOSIfIndex, snPOSInfo2KeepAlive=snPOSInfo2KeepAlive, snPOSInfo2Clock=snPOSInfo2Clock, snPOScHDLCTable=snPOScHDLCTable, snPOSInfoLoopBack=snPOSInfoLoopBack, snPOSStatsB3=snPOSStatsB3, snPOScHDLCUniqueReceived=snPOScHDLCUniqueReceived, snPOSInfoSpeed=snPOSInfoSpeed, snPOSInfoFlagC2=snPOSInfoFlagC2, snPOSInfoClock=snPOSInfoClock, snPOSStatsOutDiscard=snPOSStatsOutDiscard, snPOSInfo2FlagC2=snPOSInfo2FlagC2, snPOSStatsLOF=snPOSStatsLOF, snPOSInfo2SSM=snPOSInfo2SSM, snPOScHDLCMySeq=snPOScHDLCMySeq, snPOSInfoLinkStatus=snPOSInfoLinkStatus)
