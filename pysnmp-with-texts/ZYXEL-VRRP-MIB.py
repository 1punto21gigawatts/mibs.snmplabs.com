#
# PySNMP MIB module ZYXEL-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-VRRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, Unsigned32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, iso, IpAddress, NotificationType, ObjectIdentity, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Unsigned32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "iso", "IpAddress", "NotificationType", "ObjectIdentity", "Bits", "TimeTicks")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyRouteDomainIpAddress, zyRouteDomainIpMaskBits = mibBuilder.importSymbols("ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpAddress", "zyRouteDomainIpMaskBits")
zyxelVrrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91))
if mibBuilder.loadTexts: zyxelVrrp.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelVrrp.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelVrrp.setContactInfo('')
if mibBuilder.loadTexts: zyxelVrrp.setDescription('The subtree for Virtual Router Redundancy Protocol (VRRP)')
zyxelVrrpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1))
zyxelVrrpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2))
zyVrrpMaxNumberOfVirtualRouters = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyVrrpMaxNumberOfVirtualRouters.setStatus('current')
if mibBuilder.loadTexts: zyVrrpMaxNumberOfVirtualRouters.setDescription('The maximum number of virtual routers that can be created.')
zyxelVrrpTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2), )
if mibBuilder.loadTexts: zyxelVrrpTable.setStatus('current')
if mibBuilder.loadTexts: zyxelVrrpTable.setDescription('The table contains VRRP configuration.')
zyxelVrrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1), ).setIndexNames((0, "ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpAddress"), (0, "ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpMaskBits"), (0, "ZYXEL-VRRP-MIB", "zyVrrpVirtualId"), (0, "ZYXEL-VRRP-MIB", "zyVrrpUplinkGateway"))
if mibBuilder.loadTexts: zyxelVrrpEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelVrrpEntry.setDescription('An entry contains VRRP configuration.')
zyVrrpVirtualId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyVrrpVirtualId.setStatus('current')
if mibBuilder.loadTexts: zyVrrpVirtualId.setDescription('Enter a virtual router number for which this VRRP entry is created. You can configure up to seven virtual routers for one network.')
zyVrrpUplinkGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: zyVrrpUplinkGateway.setStatus('current')
if mibBuilder.loadTexts: zyVrrpUplinkGateway.setDescription('IP address of the uplink gateway in dotted decimal notation.')
zyVrrpPreemptState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpPreemptState.setStatus('current')
if mibBuilder.loadTexts: zyVrrpPreemptState.setDescription('Enable/Disable preempt mode')
zyVrrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpInterval.setStatus('current')
if mibBuilder.loadTexts: zyVrrpInterval.setDescription('Specify the number of seconds between hello message transmissions. The default is 1.')
zyVrrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpPriority.setStatus('current')
if mibBuilder.loadTexts: zyVrrpPriority.setDescription('Set the priority level. The number is bigger, the priority is higher.')
zyVrrpPrimaryVirtualpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpPrimaryVirtualpAddress.setStatus('current')
if mibBuilder.loadTexts: zyVrrpPrimaryVirtualpAddress.setDescription('The IP address of the primary virtual router in dotted decimal notation.')
zyVrrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpName.setStatus('current')
if mibBuilder.loadTexts: zyVrrpName.setDescription('A descriptive name for identification purposes')
zyVrrpSecondaryVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpSecondaryVirtualIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyVrrpSecondaryVirtualIpAddress.setDescription('This is optional. The IP address of a secondary virtual router in dotted decimal notation.')
zyVrrpPingState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpPingState.setStatus('current')
if mibBuilder.loadTexts: zyVrrpPingState.setDescription('Enable/Disable virtual router to response ping.')
zyVrrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyVrrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyVrrpRowStatus.setDescription('This object allows entries to be created and deleted from the VRRP table.')
zyxelVrrpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 3), )
if mibBuilder.loadTexts: zyxelVrrpDomainTable.setStatus('current')
if mibBuilder.loadTexts: zyxelVrrpDomainTable.setDescription('The table contains VRRP domain configuration.')
zyxelVrrpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 3, 1), ).setIndexNames((0, "ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpAddress"), (0, "ZYXEL-IP-FORWARD-MIB", "zyRouteDomainIpMaskBits"))
if mibBuilder.loadTexts: zyxelVrrpDomainEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelVrrpDomainEntry.setDescription('An entry contains VRRP domain configuration.')
zyVrrpDomainAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("simple", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpDomainAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: zyVrrpDomainAuthenticationType.setDescription('Select None to disable authentication. This is the default setting. Select Simple to use a simple password to authenticate VRRP packet exchanges on this interface')
zyVrrpDomainAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVrrpDomainAuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: zyVrrpDomainAuthenticationKey.setDescription('When you select simple in the authentication field, enter a password key in this field')
zyxelVrrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1), )
if mibBuilder.loadTexts: zyxelVrrpInfoTable.setStatus('current')
if mibBuilder.loadTexts: zyxelVrrpInfoTable.setDescription('The table contains VRRP information.')
zyxelVrrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1, 1), ).setIndexNames((0, "ZYXEL-VRRP-MIB", "zyVrrpInfoIpAddress"), (0, "ZYXEL-VRRP-MIB", "zyVrrpInfoIpMaskBits"), (0, "ZYXEL-VRRP-MIB", "zyVrrpInfoVirtualId"))
if mibBuilder.loadTexts: zyxelVrrpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelVrrpInfoEntry.setDescription('An entry contains VRRP information.')
zyVrrpInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyVrrpInfoIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyVrrpInfoIpAddress.setDescription('The IP address of an IP routing domain that is associated to a virtual router.')
zyVrrpInfoIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: zyVrrpInfoIpMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyVrrpInfoIpMaskBits.setDescription('The subnet mask bits of an IP routing domain that is associated to a virtual router.')
zyVrrpInfoVirtualId = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: zyVrrpInfoVirtualId.setStatus('current')
if mibBuilder.loadTexts: zyVrrpInfoVirtualId.setDescription('Display the ID number of the virtual router.')
zyVrrpInfoVirtualRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyVrrpInfoVirtualRouterStatus.setStatus('current')
if mibBuilder.loadTexts: zyVrrpInfoVirtualRouterStatus.setDescription('Display the status of the virtual router.')
zyVrrpInfoUplinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 91, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyVrrpInfoUplinkStatus.setStatus('current')
if mibBuilder.loadTexts: zyVrrpInfoUplinkStatus.setDescription('Display the status of the link between this switch and the uplink gateway.')
mibBuilder.exportSymbols("ZYXEL-VRRP-MIB", zyVrrpInfoUplinkStatus=zyVrrpInfoUplinkStatus, zyVrrpInfoVirtualId=zyVrrpInfoVirtualId, zyxelVrrpInfoTable=zyxelVrrpInfoTable, zyxelVrrpDomainTable=zyxelVrrpDomainTable, zyVrrpMaxNumberOfVirtualRouters=zyVrrpMaxNumberOfVirtualRouters, zyVrrpPrimaryVirtualpAddress=zyVrrpPrimaryVirtualpAddress, zyxelVrrpInfoEntry=zyxelVrrpInfoEntry, zyVrrpPreemptState=zyVrrpPreemptState, zyVrrpDomainAuthenticationType=zyVrrpDomainAuthenticationType, zyVrrpInfoIpMaskBits=zyVrrpInfoIpMaskBits, zyVrrpDomainAuthenticationKey=zyVrrpDomainAuthenticationKey, zyVrrpInterval=zyVrrpInterval, zyxelVrrpSetup=zyxelVrrpSetup, zyVrrpInfoIpAddress=zyVrrpInfoIpAddress, zyxelVrrpTable=zyxelVrrpTable, zyVrrpRowStatus=zyVrrpRowStatus, zyVrrpName=zyVrrpName, zyVrrpPriority=zyVrrpPriority, zyVrrpVirtualId=zyVrrpVirtualId, zyVrrpPingState=zyVrrpPingState, PYSNMP_MODULE_ID=zyxelVrrp, zyVrrpSecondaryVirtualIpAddress=zyVrrpSecondaryVirtualIpAddress, zyVrrpUplinkGateway=zyVrrpUplinkGateway, zyVrrpInfoVirtualRouterStatus=zyVrrpInfoVirtualRouterStatus, zyxelVrrpDomainEntry=zyxelVrrpDomainEntry, zyxelVrrpEntry=zyxelVrrpEntry, zyxelVrrp=zyxelVrrp, zyxelVrrpStatus=zyxelVrrpStatus)
