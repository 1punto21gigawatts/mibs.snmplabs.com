#
# PySNMP MIB module AIX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AIX1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, ModuleIdentity, Counter64, Unsigned32, ObjectIdentity, enterprises, TimeTicks, NotificationType, MibIdentifier, Bits, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ModuleIdentity", "Counter64", "Unsigned32", "ObjectIdentity", "enterprises", "TimeTicks", "NotificationType", "MibIdentifier", "Bits", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiX1 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12))
aiX1System = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 1))
aiX1Appl = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 2))
aiX1Pkt = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 3))
aiX1Frm = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 4))
aiX1Phys = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 5))
aiX1VC = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 12, 6))
ai192 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192))
ai192Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7))
ai192Ver70 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 0))
ai192Ver708 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 0, 8))
ai192Ver709 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 0, 9))
ai192Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 1))
ai192Ver710 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 1, 0))
ai192Ver711 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 1, 1))
ai192Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 2))
ai192Ver720 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 2, 0))
ai192Ver721 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 2, 1))
ai192Ver77 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 192, 7, 7))
ai196 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196))
ai196Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7))
ai196Ver70 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 0))
ai196Ver708 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 0, 8))
ai196Ver709 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 0, 9))
ai196Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 1))
ai196Ver710 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 1, 0))
ai196Ver711 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 1, 1))
ai196Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 2))
ai196Ver720 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 2, 0))
ai196Ver721 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 2, 1))
ai196Ver77 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 196, 7, 7))
class IfIndexType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aix1AdminGbufXoffThreshold = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminGbufXoffThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminGbufXoffThreshold.setDescription('The configured XOFF global flow control threshold. If zero and if aix1AdminGbufRecovThreshold is zero, the global flow control mechanism is disabled.')
aix1AdminGbufRecovThreshold = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminGbufRecovThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminGbufRecovThreshold.setDescription('The configured recovery global flow control threshold. If zero and if aix1AdminGbufXoffThreshold is zero, the global flow control mechanism is disabled.')
aix1AdminRollover = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("roll", 2))).clone('ready')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1AdminRollover.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminRollover.setDescription('This object has been depricated and remains in the MIB for backward compatibility.')
aix1Bx25AdminCallDown = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1Bx25AdminCallDown.setStatus('mandatory')
if mibBuilder.loadTexts: aix1Bx25AdminCallDown.setDescription("If set to off(2), an active BX.25 link will stay up after all calls are disconnected. If set to on(1), an active BX.25 link will drop and go into DMLOCK (see aix1Bx25AdminDMlock below) when all the link's backplane connections are terminated. This object is meaningful only when aix1ApplOperLinkMode is set to passive(2) on a given packet layer entity.")
aix1Bx25AdminDMlock = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 4294967295)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1Bx25AdminDMlock.setStatus('mandatory')
if mibBuilder.loadTexts: aix1Bx25AdminDMlock.setDescription('The number of seconds to wait after a BX.25 passive link has gone inactive before allowing an outgoing call to attempt to bring up the link. Any outgoing call attempts will be rejected until the DMLOCK timer expires and the passive link returns to the standby mode. This object is meaningful only when aix1ApplOperLinkMode is set to passive(2) on a given packet layer entity.')
aix1Bx25AdminLinkUp = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 4294967295)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1Bx25AdminLinkUp.setStatus('mandatory')
if mibBuilder.loadTexts: aix1Bx25AdminLinkUp.setDescription('The number of seconds to wait for a passive link to become active. This object is meaningful only when aix1ApplOperLinkMode is set to passive(2) on a given packet layer entity.')
aix1StatErrX25InData = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25InData.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrX25InData.setDescription('Number of data bytes from X.25 which were lost due to buffer failures.')
aix1StatErrX25OutData = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25OutData.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrX25OutData.setDescription('Number of data bytes from the FIFO which were discarded due to buffer failures.')
aix1StatErrX25OutPkt = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25OutPkt.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrX25OutPkt.setDescription('Number of messages from X.25 to GCOM which were lost due to some kind of resource failure in the GCOM library.')
aix1StatErrX25OutChoked = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrX25OutChoked.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrX25OutChoked.setDescription('Number of times a port has received a flow control stop message from GCOM(or perhaps from X.25), and thus entered the Choked state. This may not be indicative of a serious problem, but may also mean that data has been lost.')
aix1StatErrPlogCount = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrPlogCount.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrPlogCount.setDescription('Number of times an internal error routine has been called due to unexpected packets received from GCOM ( or X.25).')
aix1StatErrGfctlXoffs = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrGfctlXoffs.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrGfctlXoffs.setDescription('Number of times the global flow control mechanism attempted to back pressure data flow from the backplane.')
aix1StatErrGfctlDiscards = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrGfctlDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrGfctlDiscards.setDescription('Number of times the global flow control mechanism has detected a buffer level so low that it discarded data received from the backplane.')
aix1StatErrUwteBadTrans = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrUwteBadTrans.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrUwteBadTrans.setDescription('Number of unified window transactions with bad transaction codes received from CLC or a remote SLC. If this counter is non-zero, it indicated the presence of incompatible versions of firmware on the SLC and CLC, or a bug in either the SLC or CLC firmware.')
aix1StatErrUwteBadFlds = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrUwteBadFlds.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrUwteBadFlds.setDescription('Number of invalid fields received in unified window transactions. If this counter is non-zero, it indicates the presence of incompatible versions or a bug in either the SLC or CLC firmware.')
aix1StatErrUwteMissingFlds = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrUwteMissingFlds.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrUwteMissingFlds.setDescription('Number of required fields absent from received unified window transactions. If this counter is non-zero, it indicates the presence of incompatible versions or a bug in either the SLC or CLC firmware.')
aix1StatErrLogOutLost = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrLogOutLost.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrLogOutLost.setDescription('Number of outbound log messages discarded to avoid flooding the log. This arises because the SLC is attempting to generate log messages too frequently on a particular TDS or globally. When this occurs, the SLC will discard the log message and increment the counter. This is not a serious error, and typically occurs during periods of intense, repetitive logging activity.')
aix1StatErrVcMuxErrs = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrVcMuxErrs.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrVcMuxErrs.setDescription('Number of serious multiplexing errors which have occurred. Such an error generally involves an impossible value in an internal header or receipt of a message on the wrong internal channel.')
aix1StatErrEmptyPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatErrEmptyPktsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatErrEmptyPktsRcv.setDescription('Number of empty data packets received from the network.')
aix1StatInCharsPerSec80s = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatInCharsPerSec80s.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatInCharsPerSec80s.setDescription('The average number of data characters (characters in the data field of X.25 data packets) received from the network per second over the last 80 seconds.')
aix1StatOutCharsPerSec80s = MibScalar((1, 3, 6, 1, 4, 1, 539, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1StatOutCharsPerSec80s.setStatus('mandatory')
if mibBuilder.loadTexts: aix1StatOutCharsPerSec80s.setDescription('The average number of data characters (characters in the data field of X.25 data packets) transmitted to the network per second over the last 80 seconds.')
aix1ApplAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 2, 1), )
if mibBuilder.loadTexts: aix1ApplAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminTable.setDescription('The table of administrative elements which apply to an individual X.25 link above the packet layer.')
aix1ApplAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1ApplAdminIndex"))
if mibBuilder.loadTexts: aix1ApplAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminEntry.setDescription("The addressing information for one of this X.25 link's administrative objects.")
aix1ApplAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminIndex.setDescription('The ifIndex value of the packet layer entity associated with these application level objects.')
aix1ApplAdminLinkStart = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("started", 1), ("stopped", 2))).clone('started')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkStart.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminLinkStart.setDescription("Start or stop a link that's enabled by the standard MIB link status objects. If the link is not enabled by the standard MIB objects, a write to this object will have no effect. Stopping a link by writing to this object does not free significant resources, it just stops activity on the link.")
aix1ApplAdminLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("passive", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminLinkMode.setDescription('Determines whether link behaves as a normal X.25 link or a BX.25-style passive link. This is the most recently configured value of this attribute, and may not yet have taken effect. The current operating value is available as aix1ApplOperLinkMode.')
aix1ApplAdminResetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("resetCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminResetErrs.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminResetErrs.setDescription('Writing the value resetCounters(2) to this object resets the per-link level 1 error counters. No other writes are accepted. They are aix1PhysStatRxCRCErrors, aix1PhysStatRxAborts, aix1PhysStatRxOverruns, aix1PhysStatTxAborts, aix1PhysStatTxUnderruns.')
aix1ApplAdminXONXOFFProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminXONXOFFProto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminXONXOFFProto.setDescription('Determines whether XON/XOFF protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplAdminNMAProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminNMAProto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminNMAProto.setDescription('Determines whether NMA protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplAdminOPSINEProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminOPSINEProto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminOPSINEProto.setDescription('Determines whether OPSINE protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplAdminTL1Proto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminTL1Proto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminTL1Proto.setDescription('Determines whether TL1 protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplAdminLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkDescription.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminLinkDescription.setDescription("A descriptive string associated with this link. This provides a place for the agent to supply any descriptive information about the use or owner of the link. A zero length value indicates that the agent doesn't have any additional information.")
aix1ApplAdminLinkConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1ApplAdminLinkConnectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplAdminLinkConnectionMode.setDescription("Connect or disconnect a link that's enabled by the standard MIB linmk status objects. If the link is not enabled by the standard MIB objects, a write to this object will have no effect. Disconnecting a link by writing to this object does not free any resources, it marks the link as not connected, so that the link will not cause a level 4 (LINKDOWN) alarm to be generated.")
aix1ApplOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 2, 2), )
if mibBuilder.loadTexts: aix1ApplOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperTable.setDescription('The table of operational elements which apply to an individual X.25 link above the packet layer.')
aix1ApplOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1ApplOperIndex"))
if mibBuilder.loadTexts: aix1ApplOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperEntry.setDescription("The addressing information for one of this X.25 link's operational objects.")
aix1ApplOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperIndex.setDescription('The ifIndex value of the packet level associated with these application level objects.')
aix1ApplOperLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("passive", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperLinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperLinkMode.setDescription('Determines whether link behaves as a normal X.25 link or a BX.25-style passive link. This is the mandatory operating value of this attribute. The most recently configured value is available as aix1ApplAdminLinkMode.')
aix1ApplOperXONXOFFProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperXONXOFFProto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperXONXOFFProto.setDescription('Determines whether XON/XOFF protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplOperNMAProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperNMAProto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperNMAProto.setDescription('Determines whether NMA protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplOperOPSINEProto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperOPSINEProto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperOPSINEProto.setDescription('Determines whether OPSINE protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplOperTL1Proto = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperTL1Proto.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperTL1Proto.setDescription('Determines whether TL1 protocol processing is in effect by default on all virtual circuits on the link.')
aix1ApplOperLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperLinkDescription.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperLinkDescription.setDescription("A descriptive string associated with this link. This provides a place for the agent to supply any descriptive information about the use or owner of the link. A zero length value indicates that the agent doesn't have any additional information.")
aix1ApplOperLinkConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("reconnected", 3), ("disabled", 4), ("linkdown", 5), ("linkup", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1ApplOperLinkConnectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: aix1ApplOperLinkConnectionMode.setDescription('Determines whether the link is currently disconnected, connected or has been reconnected after it was disconnected.')
aix1PktAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 3, 1), )
if mibBuilder.loadTexts: aix1PktAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminTable.setDescription('The table of administrative elements which apply to an individual X.25 link at the packet layer.')
aix1PktAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PktAdminIndex"))
if mibBuilder.loadTexts: aix1PktAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminEntry.setDescription("The addressing information for one of this X.25 link's packet layer administrative objects.")
aix1PktAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminIndex.setDescription('The ifIndex value of the packet layer entity associated with these objects.')
aix1PktAdminConformanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccitt", 1), ("ddn", 2))).clone('ccitt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminConformanceMode.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminConformanceMode.setDescription("The configured conformance testing mode to which X.25's behavior will adhere. This value may not have taken effect. The value with which the SLC is currently operating is the value of aix1OperConformanceMode.")
aix1PktAdminDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dbitNotAllowed", 1), ("dbitAllowed", 2))).clone('dbitNotAllowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminDBit.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminDBit.setDescription('Determines whether the packet level will allow the D-bit in call setup packets.')
aix1PktAdminQBitMBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQMCheck", 1), ("qmCheck", 2))).clone('noQMCheck')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminQBitMBit.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminQBitMBit.setDescription('Determines whether the packet level will check for consistency in the use of Q and M bits, i. e. that the value of the Q-bit is the same in every packet of an M-bit sequence.')
aix1PktAdminUseRejectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPktRetrans", 1), ("pktRetrans", 2))).clone('noPktRetrans')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminUseRejectPkts.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminUseRejectPkts.setDescription('Enables and disables the use of packet retransmission. If the packet level is acting as a DTE it will send a REJ packet in response to a data packet received out of sequence. If the packet level is acting as a DCE, it will accept a REJ packet and retransmit the requested data packet(s).')
aix1PktAdminSendInitialRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialRestart", 1), ("noInitialRestart", 2))).clone('initialRestart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminSendInitialRestart.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminSendInitialRestart.setDescription('Enables and disables sending of an initial restart request packet when the link comes up.')
aix1PktAdminStdsBody = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccittPktLvl", 1), ("isoPktLvl", 2))).clone('ccittPktLvl')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminStdsBody.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminStdsBody.setDescription('Selects between ISO and CCITT packet level specifications.')
aix1PktAdminFacilChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkFacils", 1), ("noCheckFacils", 2))).clone('noCheckFacils')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminFacilChecking.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminFacilChecking.setDescription('Enables and disables packet level checking of the facilities field of call processing packets for validity.')
aix1PktAdminUndefinedFacils = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUndefFacils", 1), ("undefFacils", 2))).clone('noUndefFacils')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminUndefinedFacils.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminUndefinedFacils.setDescription('Enables and disables packet level allowing undefined facilities to appear in the facilities field of call processing packets.')
aix1PktAdminDefMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 256, 512, 1024))).clone(namedValues=NamedValues(("pkt128", 128), ("pkt256", 256), ("pkt512", 512), ("pkt1024", 1024))).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminDefMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminDefMaxPktSize.setDescription('The maximum packet size to use for all calls placed on this packet layer entity. If aix1PktAdminNegPktSize is set to negotiate(2), this will be the proposed value for calls placed on the packet level entitry.')
aix1PktAdminDefWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminDefWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminDefWindowSize.setDescription('The maximum packet level window size to use on this PLE. If aix1PktAdminNegWindowSize is set to negotiate(2), this will be the proposed value for calls placed on the packet layer entity.')
aix1PktAdminNegMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminNegMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminNegMaxPktSize.setDescription('Determines whether this PLE will originate calls which negotiate packet size.')
aix1PktAdminNegWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminNegWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminNegWindowSize.setDescription('Determines whether this PLE will originate calls which negotiate window size.')
aix1PktAdminPacketizingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminPacketizingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminPacketizingTimer.setDescription('The interval from the time of receipt of the first character from the TDM backplane to transmission of a block of characters to the X.25 protocol stack for transmission in a data packet to the network. In 100ths of a second. This value is not meaningful on backplane connections on which escape framing, TL1 packetizing, or programmable forwarding characters are active.')
aix1PktAdminPVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminPVCOffset.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminPVCOffset.setDescription('Specifies an offset that gets added to the PVC logical channel range specified by x25AdmnMaxActiveCircuits and x25AdmnNumberPVCs from RFC 1382.')
aix1PktAdminSVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PktAdminSVCOffset.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktAdminSVCOffset.setDescription('Specifies an offset that gets added to the SVC logical channel range specified by x25AdmnMaxActiveCircuits and x25AdmnNumberPVCs from RFC 1382.')
aix1PktOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 3, 2), )
if mibBuilder.loadTexts: aix1PktOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperTable.setDescription('The table of operational elements which apply to an individual X.25 link at the packet layer.')
aix1PktOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PktOperIndex"))
if mibBuilder.loadTexts: aix1PktOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperEntry.setDescription("The addressing information for one of this X.25 link's packet layer operational objects.")
aix1PktOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperIndex.setDescription('The ifIndex value of the packet level associated with these objects.')
aix1PktOperConformanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccitt", 1), ("ddn", 2))).clone('ccitt')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperConformanceMode.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperConformanceMode.setDescription("The conformance testing mode to which X.25's behavior will adhere. This is the currently operational value.")
aix1PktOperDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dbitNotAllowed", 1), ("dbitAllowed", 2))).clone('dbitNotAllowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperDBit.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperDBit.setDescription('Determines whether the packet level will allow the D-bit in call setup packets.')
aix1PktOperQBitMBit = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQMCheck", 1), ("qmCheck", 2))).clone('noQMCheck')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperQBitMBit.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperQBitMBit.setDescription('Determines whether the packet level will check for consistency in the use of Q and M bits, i. e. that the value of the Q-bit is the same in every packet of an M-bit sequence.')
aix1PktOperUseRejectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPktRetrans", 1), ("pktRetrans", 2))).clone('noPktRetrans')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperUseRejectPkts.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperUseRejectPkts.setDescription('Enables and disables the use of packet retransmission. If the packet level is acting as a DTE it will send a REJ packet in response to a data packet received out of sequence. If the packet level is acting as a DCE, it will accept a REJ packet and retransmit the requested data packet(s).')
aix1PktOperSendInitialRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initialRestart", 1), ("noInitialRestart", 2))).clone('initialRestart')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperSendInitialRestart.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperSendInitialRestart.setDescription('Enables and disables sending of an initial restart request packet when the link comes up.')
aix1PktOperStdsBody = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccittPktLvl", 1), ("isoPktLvl", 2))).clone('ccittPktLvl')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperStdsBody.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperStdsBody.setDescription('Selects between ISO and CCITT packet level specifications.')
aix1PktOperFacilChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("checkFacils", 1), ("noCheckFacils", 2))).clone('noCheckFacils')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperFacilChecking.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperFacilChecking.setDescription('Enables and disables packet level checking of the facilities field of call processing packets for validity.')
aix1PktOperUndefinedFacils = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUndefFacils", 1), ("undefFacils", 2))).clone('noUndefFacils')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperUndefinedFacils.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperUndefinedFacils.setDescription('Enables and disables packet level allowing undefined facilities to appear in the facilities field of call processing packets.')
aix1PktOperDefMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 256, 512, 1024))).clone(namedValues=NamedValues(("pkt128", 128), ("pkt256", 256), ("pkt512", 512), ("pkt1024", 1024))).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperDefMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperDefMaxPktSize.setDescription('The maximum packet size to use for all calls placed on this packet layer entity. If aix1PktOperNegPktSize is set to negotiate(2), this will be the proposed value for calls placed on the packett layer entity.')
aix1PktOperDefWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperDefWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperDefWindowSize.setDescription('The maximum packet level window size to use for all calls placed on this packet layer entity. If aix1PktOperNegWindowSize is set to negotiate(2), this will be the proposed value for calls placed on the packet layer entity.')
aix1PktOperNegMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperNegMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperNegMaxPktSize.setDescription('Determines whether this packet layer entity will originate calls which negotiate packet size.')
aix1PktOperNegWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noNegotiation", 1), ("negotiate", 2))).clone('noNegotiation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperNegWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperNegWindowSize.setDescription('Determines whether this packet layer entity will originate calls which negotiate window size.')
aix1PktOperPacketizingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperPacketizingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperPacketizingTimer.setDescription('The interval from the time of receipt of the first character from the TDM backplane to transmission of a block of characters to the X.25 protocol stack for transmission in a data packet to the network. In 100ths of a second. This value is not meaningful on backplane connections on which escape framing, TL1 packetizing, or programmable forwarding characters are active.')
aix1PktOperPVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperPVCOffset.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperPVCOffset.setDescription('Specifies an offset that gets added to the PVC logical channel range specified by x25AdmnMaxActiveCircuits and x25AdmnNumberPVCs from RFC 1382.')
aix1PktOperSVCOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktOperSVCOffset.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktOperSVCOffset.setDescription('Specifies an offset that gets added to the SVC logical channel range specified by x25AdmnMaxActiveCircuits and x25AdmnNumberPVCs from RFC 1382.')
aix1PktStatTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 3, 3), )
if mibBuilder.loadTexts: aix1PktStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktStatTable.setDescription('The table of statistical elements which apply to an individual X.25 link at the packet layer.')
aix1PktStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PktStatIndex"))
if mibBuilder.loadTexts: aix1PktStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktStatEntry.setDescription("The addressing information for one of this X.25 link's packet layer statistical objects.")
aix1PktStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktStatIndex.setDescription('The ifIndex value of the packet layer entity associated with these objects.')
aix1PktStatInCharsPerSec80s = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktStatInCharsPerSec80s.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktStatInCharsPerSec80s.setDescription('The average number of data characters (characters in the data field of X.25 data packets) received from the network per second over the last 80 seconds by this packet layer entity.')
aix1PktStatOutCharsPerSec80s = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PktStatOutCharsPerSec80s.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PktStatOutCharsPerSec80s.setDescription('The average number of data characters (characters in the data field of X.25 data packets) transmitted to the network per second over the last 80 seconds by this packet layer entity.')
aix1FrmAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 4, 1), )
if mibBuilder.loadTexts: aix1FrmAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmAdminTable.setDescription('The table of administrative elements which apply to an individual X.25 link at the frame layer.')
aix1FrmAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1FrmAdminIndex"))
if mibBuilder.loadTexts: aix1FrmAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmAdminEntry.setDescription("The addressing information for one of this X.25 link's frame layer administrative objects.")
aix1FrmAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmAdminIndex.setDescription('The ifIndex value of the frame layer entity associated with these objects.')
aix1FrmAdminIdleRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idleRRs", 1), ("noIdleRRs", 2))).clone('idleRRs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1FrmAdminIdleRRs.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmAdminIdleRRs.setDescription('Enables and disables transmission of idle Receive Ready frames by the frame layer.')
aix1FrmAdminRandomizeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("randomT1", 1), ("noRandomT1", 2))).clone('randomT1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1FrmAdminRandomizeT1.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmAdminRandomizeT1.setDescription("Enables and disables the introduction of random jitter into the frame layer's T1 timer to avoid T1 timer synchronization with the remote frame layer.")
aix1FrmOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 4, 2), )
if mibBuilder.loadTexts: aix1FrmOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmOperTable.setDescription('The table of operational elements which apply to an individual X.25 link at the frame layer.')
aix1FrmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1FrmOperIndex"))
if mibBuilder.loadTexts: aix1FrmOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmOperEntry.setDescription("The addressing information for one of this X.25 link's frame layer operational objects.")
aix1FrmOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmOperIndex.setDescription('The ifIndex value of the frame level associated with these objects.')
aix1FrmOperIdleRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idleRRs", 1), ("noIdleRRs", 2))).clone('idleRRs')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmOperIdleRRs.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmOperIdleRRs.setDescription('Enables and disables transmission of idle Receive Ready frames by the frame layer.')
aix1FrmOperRandomizeT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("randomT1", 1), ("noRandomT1", 2))).clone('randomT1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1FrmOperRandomizeT1.setStatus('mandatory')
if mibBuilder.loadTexts: aix1FrmOperRandomizeT1.setDescription("Enables and disables the introduction of random jitter into the frame layer's T1 timer to avoid T1 timer synchronization with the remote frame layer.")
aix1PhysAdminTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 5, 1), )
if mibBuilder.loadTexts: aix1PhysAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysAdminTable.setDescription('The table of administrative elements which apply to an individual X.25 link at the physical layer.')
aix1PhysAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PhysAdminIndex"))
if mibBuilder.loadTexts: aix1PhysAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysAdminEntry.setDescription("The addressing information for one of this X.25 link's physical layer administrative objects.")
aix1PhysAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysAdminIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysAdminIndex.setDescription('The ifIndex value of the physical port associated with these objects.')
aix1PhysAdminInterFrameDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ifdDisabled", 1), ("ifdEnabled", 2))).clone('ifdDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PhysAdminInterFrameDelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysAdminInterFrameDelayStatus.setDescription('Enables and disables a delay period between transmitted frames.')
aix1PhysAdminInterFrameDelayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PhysAdminInterFrameDelayInterval.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysAdminInterFrameDelayInterval.setDescription("Sets the interframe delay interval. This value is effective only if aix1PhysAdminInterFrameDelayStatus is set to ifdEnabled(2). This value is expressed in microseconds, with 100 microsecond granularity (it's truncated to the nearest 100 microseconds).")
aix1PhysAdminT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lbo0to133", 1), ("lbo133to266", 2), ("lbo266to399", 3), ("lbo399to533", 4), ("lbo533to655", 5))).clone('lbo133to266')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1PhysAdminT1LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysAdminT1LineBuildOut.setDescription('The T1 line build out value. The specified syntax represents ranges of line length expressed in feet.')
aix1PhysOperTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 5, 2), )
if mibBuilder.loadTexts: aix1PhysOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysOperTable.setDescription('The table of operational elements which apply to an individual X.25 link at the physical layer.')
aix1PhysOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PhysOperIndex"))
if mibBuilder.loadTexts: aix1PhysOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysOperEntry.setDescription("The addressing information for one of this X.25 link's physical layer operational objects.")
aix1PhysOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysOperIndex.setDescription('The ifIndex value of the physical port associated with these objects.')
aix1PhysOperInterFrameDelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ifdDisabled", 1), ("ifdEnabled", 2))).clone('ifdDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperInterFrameDelayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysOperInterFrameDelayStatus.setDescription('Enables and disables a delay period between transmitted frames.')
aix1PhysOperInterFrameDelayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperInterFrameDelayInterval.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysOperInterFrameDelayInterval.setDescription("Sets the interframe delay interval. This value is effective only if aix1PhysAdminInterFrameDelayStatus is set to ifdEnabled(2). This value is expressed in microseconds, with 100 microsecond granularity (it's truncated to the nearest 100 microseconds).")
aix1PhysOperT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lbo0to133", 1), ("lbo133to266", 2), ("lbo266to399", 3), ("lbo399to533", 4), ("lbo533to655", 5))).clone('lbo133to266')).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysOperT1LineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysOperT1LineBuildOut.setDescription('The T1 line build out value. The specified syntax represents ranges of line length expressed in feet.')
aix1PhysStatTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 5, 3), )
if mibBuilder.loadTexts: aix1PhysStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysStatTable.setDescription('The table of statistical elements which apply to an individual X.25 link at the physical layer.')
aix1PhysStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 5, 3, 1), ).setIndexNames((0, "AIX1-MIB", "aix1PhysStatIndex"))
if mibBuilder.loadTexts: aix1PhysStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysStatEntry.setDescription("The addressing information for one of this X.25 link's physical layer statistical objects.")
aix1PhysStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysStatIndex.setDescription('The ifIndex value of the physical port associated with these objects.')
aix1PhysStatTxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1PhysStatTxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: aix1PhysStatTxAborts.setDescription("The number of abort sequences transmitted on the serial interfaces. This is a proprietary object because the RS232-like MIB (RFC 1659) doesn't define a similar object! RFC 1659 defines a counter for receive aborts, but not transmit aborts.")
aix1CircuitTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 6, 1), )
if mibBuilder.loadTexts: aix1CircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitTable.setDescription('The table of objects which maps logical channel number and packet level ifIndex number to Virtual Connection(VC) number.')
aix1CircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1), ).setIndexNames((0, "AIX1-MIB", "aix1CircuitLinkId"), (0, "AIX1-MIB", "aix1CircuitChannelNumber"))
if mibBuilder.loadTexts: aix1CircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitEntry.setDescription('The addressing information for the VC Circuit table.')
aix1CircuitLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitLinkId.setDescription('The ifindex value of the packet layer entity.')
aix1CircuitChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitChannelNumber.setDescription('X.25 logical channel number.')
aix1CircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("csCall", 3), ("csDisco", 4), ("csCancel", 5), ("csReject", 6), ("csCol", 7), ("csUncol", 8), ("npCall", 9), ("npDisco", 10), ("npCancel", 11), ("npReject", 12), ("npCol", 13), ("npUncol", 14), ("trapped", 15), ("csSuspend", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitState.setDescription('The call processing state of the local Virtual Connection. This is not a standard packet level state. This is the call processing state of the AI version 7 system firmware that mediates between the X.25 protocol stack and AISwitch internal connection mechanisms.')
aix1CircuitConType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 11, 12))).clone(namedValues=NamedValues(("lmux", 1), ("rmux", 2), ("debug", 5), ("background", 6), ("pvc", 11), ("svc", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitConType.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitConType.setDescription('The type of connection currently supported by the VC.')
aix1CircuitBCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitBCNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitBCNumber.setDescription('The number of the Bus Connection with which this VC is associated.')
aix1CircuitUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitUserData.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitUserData.setDescription('The user data that was sent or received in the call request.')
aix1CircuitRemoteBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitRemoteBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitRemoteBasePort.setDescription('The baseport of the card to which the SLC is connected across the backplane. This value is meaningful only when this VC is multiplexed to the other SLC. If not, the value returned is -1.')
aix1CircuitRemoteVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitRemoteVCNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitRemoteVCNumber.setDescription('The Virtual Connection number of the VC on the remote SLC to which this VC is connected. This value is meaningful only on multiplexed VCs.')
aix1CircuitPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitPktsSent.setDescription('The number of packets sent to the packet level by the AI version 7 system software. This counts all kinds of packets, not just data packets.')
aix1CircuitPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1CircuitPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitPktsRcvd.setDescription('The number of packets received from the packet level by the AI version 7 system software. This counts all kinds of packets, not just data packets.')
aix1CircuitOperPVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("connectOnActivity", 3), ("passive", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1CircuitOperPVCType.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitOperPVCType.setDescription('Defines the relationship between a PVC and the connection-oriented AISwitch TDM backplane. The three types represented are defined as follows: Active: initiates connections across the backplane at an interval defined by the timer. Passive: waits to respond to a connection attempt across the backplane. Uses timer to wait for reset confirm from network. Accepts backplane connection if it receives reset confirmation in time. Connect on Activity: initiates connection across backplane upon the receipt of data from the network. Forwards received data once connection is established. Disconnects backplane connection if a timer interval passes with no data activity in either direction. This object will return the value none(1) if the value of aix1CircuitConType for this VC is not pvc(11). This object reflects the current operational value of this parameter. Note that unlike most operational objects, it is writable. If the value of this object is changed, it modifies the current behavior of the board, but is not saved in nonvolatile memory.')
aix1CircuitOperPVCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1CircuitOperPVCTimer.setStatus('mandatory')
if mibBuilder.loadTexts: aix1CircuitOperPVCTimer.setDescription("Defines the timer interval, in seconds used to manage the PVC's relationship with an internal backplane connection. The timer is used for different purposes depending on the value of aix1VCPVCType as described above. This object will return the value 0 if the VC in question is not associated with a PVC. This object reflects the current operational value of this parameter. Note that unlike most operational objects, it is writable. If the value of this object is changed, it modifies the current behavior of the board, but is not saved in nonvolatile memory.")
aix1VCTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 6, 2), )
if mibBuilder.loadTexts: aix1VCTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCTable.setDescription('The table of objects containing information pertaining to Virtual Connections(VC).')
aix1VCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1), ).setIndexNames((0, "AIX1-MIB", "aix1VCVCNumber"))
if mibBuilder.loadTexts: aix1VCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCEntry.setDescription('The addressing information for the VC table.')
aix1VCVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 287))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCVCNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCVCNumber.setDescription('The local Virtual Connection number.')
aix1VCState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("csCall", 3), ("csDisco", 4), ("csCancel", 5), ("csReject", 6), ("csCol", 7), ("csUncol", 8), ("npCall", 9), ("npDisco", 10), ("npCancel", 11), ("npReject", 12), ("npCol", 13), ("npUncol", 14), ("trapped", 15), ("csSuspend", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCState.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCState.setDescription('The call processing state of the local Virtual Connection. This is not a standard packet level state. This is the call call processing state of the AI version 7 system firmware that mediates between the X.25 protocol stack and AISwitch internal connection mechanisms.')
aix1VCConType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 11, 12))).clone(namedValues=NamedValues(("lmux", 1), ("rmux", 2), ("debug", 5), ("background", 6), ("pvc", 11), ("svc", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCConType.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCConType.setDescription('The type of connection currently supported by the VC.')
aix1VCBCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCBCNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCBCNumber.setDescription('The number of the Bus Connection with which this VC is associated.')
aix1VCUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCUserData.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCUserData.setDescription('The user data that was sent or received in the call request.')
aix1VCRemoteBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCRemoteBasePort.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCRemoteBasePort.setDescription('The baseport of the card to which the SLC is connected across the backplane. This value is meaningful only when this VC is multiplexed to the other SLC. If not, the value returned is -1.')
aix1VCRemoteVCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCRemoteVCNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCRemoteVCNumber.setDescription('The Virtual Connection number of the VC on the remote SLC to which this VC is connected. This value is meaningful only on multiplexed VCs.')
aix1VCPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCPktsSent.setDescription('The number of packets sent to the packet level by the AI version 7 system software. This counts all kinds of packets, not just data packets.')
aix1VCPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1VCPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCPktsRcvd.setDescription('The number of packets received from the packet level by the AI version 7 system software. This counts all kinds of packets, not just data packets.')
aix1VCOperPVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("connectOnActivity", 3), ("passive", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1VCOperPVCType.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCOperPVCType.setDescription('Defines the relationship between a PVC and the connection-oriented AISwitch TDM backplane. The three types represented are defined as follows: Active: initiates connections across the backplane at an interval defined by the timer. Passive: waits to respond to a connection attempt across the backplane. Uses timer to wait for reset confirm from network. Accepts backplane connection if it receives reset confirmation in time. Connect on Activity: initiates connection across backplane upon receipt of data from network. Forwards received data once connection is established. Disconnects backplane connection if a timer interval passes with no data activity in either direction. This object will return the value none(1) if the value of aix1VCConType for this VC is not pvc(11). This object reflects the current operational value of this parameter. Note that unlike most operational objects, it is writable. If the value of this object is changed, it modifies the current behavior of the board, but is not saved in nonvolatile memory.')
aix1VCOperPVCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1VCOperPVCTimer.setStatus('mandatory')
if mibBuilder.loadTexts: aix1VCOperPVCTimer.setDescription("Defines the timer interval, in seconds used to manage the PVC's relationship with an internal backplane connection. The timer is used for different purposes depending on the value of aix1VCPVCType as described above. This object will return the value 0 if the VC in question question is not associated with a PVC. This object reflects the current operational value of this parameter. Note that unlike most operational objects, it is writable. If the value of this object is changed, it modifies the current behavior of the board, but is not saved in nonvolatile memory.")
aix1AdminPVCTable = MibTable((1, 3, 6, 1, 4, 1, 539, 12, 6, 3), )
if mibBuilder.loadTexts: aix1AdminPVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminPVCTable.setDescription('The table of objects which control attributes of PVCs configured, but not necessarily in effect.')
aix1AdminPVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1), ).setIndexNames((0, "AIX1-MIB", "aix1AdminPVCLinkId"), (0, "AIX1-MIB", "aix1AdminPVCChannelNumber"))
if mibBuilder.loadTexts: aix1AdminPVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminPVCEntry.setDescription('The addressing information for the PVC Admin table.')
aix1AdminPVCLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 1), IfIndexType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1AdminPVCLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminPVCLinkId.setDescription('The ifindex value of the packet layer entity.')
aix1AdminPVCChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aix1AdminPVCChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminPVCChannelNumber.setDescription('X.25 logical channel number.')
aix1AdminPVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("connectOnActivity", 3), ("passive", 4))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminPVCType.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminPVCType.setDescription("Defines the relationship between a PVC and the connection-oriented AISwitch TDM backplane. The three types represent are defined as follows: Active: initiates connections across the backplane at an interval defined by the timer. Passive: waits to respond to a connection attempt across the backplane. Uses timer to wait for reset confirm from network. Accepts the backplane connection if it receives reset confirmation in time. Connect on Activity: initiates connection across backplane upon receipt of data from network. Forwards received data once connection is established. Disconnects backplane connection if a timer interval passes with no data activity in either direction. This object will return the value none(1) if aix1AdminPVCChannelNumber doesn't correspond to a channel in the range specified by the combination of x25admnNumberPVCs and aix1PktAdminPVCOffset for the link specified by aix1AdminPVCLinkID. This object is settable, but does not reflect the mandatory operational value of this parameter.")
aix1AdminPVCTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 12, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aix1AdminPVCTimer.setStatus('mandatory')
if mibBuilder.loadTexts: aix1AdminPVCTimer.setDescription("Defines the timer interval, in seconds used to manage the PVC's relationship with an internal backplane connection. The timer is used for different purposes depending on the value of aix1VCPVCType as described above. This object will return the value 0 if aix1AdminPVCChannelNumber doesn't correspond to a channel in the range specified by the combination of x25admnNumberPVCs and aix1PktAdminPVCOffset for the link specified by aix1AdminPVCLinkID. This object is settable, but does not reflect the mandatory operational value of this parameter.")
mibBuilder.exportSymbols("AIX1-MIB", aix1FrmAdminEntry=aix1FrmAdminEntry, aix1PktStatOutCharsPerSec80s=aix1PktStatOutCharsPerSec80s, aix1ApplOperLinkDescription=aix1ApplOperLinkDescription, aix1VCPktsSent=aix1VCPktsSent, aix1ApplAdminTable=aix1ApplAdminTable, ai196Ver7=ai196Ver7, aix1CircuitOperPVCType=aix1CircuitOperPVCType, aix1StatErrX25OutPkt=aix1StatErrX25OutPkt, aix1PktAdminPacketizingTimer=aix1PktAdminPacketizingTimer, aix1StatErrUwteBadFlds=aix1StatErrUwteBadFlds, aix1FrmOperIdleRRs=aix1FrmOperIdleRRs, ai196Ver72=ai196Ver72, aix1VCOperPVCTimer=aix1VCOperPVCTimer, aix1CircuitConType=aix1CircuitConType, aix1VCUserData=aix1VCUserData, aix1PktStatTable=aix1PktStatTable, aix1CircuitPktsSent=aix1CircuitPktsSent, aix1PktAdminNegMaxPktSize=aix1PktAdminNegMaxPktSize, ai192Ver7=ai192Ver7, aix1PktStatEntry=aix1PktStatEntry, aix1PktAdminFacilChecking=aix1PktAdminFacilChecking, aix1VCBCNumber=aix1VCBCNumber, aix1StatErrUwteBadTrans=aix1StatErrUwteBadTrans, aix1VCPktsRcvd=aix1VCPktsRcvd, aix1PktOperNegWindowSize=aix1PktOperNegWindowSize, aix1FrmAdminIndex=aix1FrmAdminIndex, aix1PktStatInCharsPerSec80s=aix1PktStatInCharsPerSec80s, aix1VCRemoteBasePort=aix1VCRemoteBasePort, aix1PhysOperTable=aix1PhysOperTable, ai192=ai192, ai192Ver72=ai192Ver72, aix1Bx25AdminCallDown=aix1Bx25AdminCallDown, aix1PhysOperInterFrameDelayInterval=aix1PhysOperInterFrameDelayInterval, aix1ApplAdminOPSINEProto=aix1ApplAdminOPSINEProto, aix1AdminPVCType=aix1AdminPVCType, aix1ApplOperIndex=aix1ApplOperIndex, aix1CircuitRemoteVCNumber=aix1CircuitRemoteVCNumber, aix1ApplOperLinkMode=aix1ApplOperLinkMode, ai192Ver720=ai192Ver720, aix1PktAdminDefMaxPktSize=aix1PktAdminDefMaxPktSize, aix1CircuitTable=aix1CircuitTable, aix1PktAdminNegWindowSize=aix1PktAdminNegWindowSize, aix1CircuitEntry=aix1CircuitEntry, aix1PhysAdminEntry=aix1PhysAdminEntry, ai192Ver708=ai192Ver708, aix1ApplAdminLinkDescription=aix1ApplAdminLinkDescription, aix1PhysOperEntry=aix1PhysOperEntry, aix1StatErrPlogCount=aix1StatErrPlogCount, aix1StatErrLogOutLost=aix1StatErrLogOutLost, aiX1System=aiX1System, aix1ApplOperTable=aix1ApplOperTable, aix1PhysAdminTable=aix1PhysAdminTable, aix1StatErrUwteMissingFlds=aix1StatErrUwteMissingFlds, ai196Ver77=ai196Ver77, aix1PhysStatIndex=aix1PhysStatIndex, IfIndexType=IfIndexType, aix1PktAdminPVCOffset=aix1PktAdminPVCOffset, ai192Ver721=ai192Ver721, aiX1Pkt=aiX1Pkt, aix1PhysOperIndex=aix1PhysOperIndex, aix1StatErrX25InData=aix1StatErrX25InData, aix1CircuitOperPVCTimer=aix1CircuitOperPVCTimer, aix1ApplOperLinkConnectionMode=aix1ApplOperLinkConnectionMode, aix1PktAdminStdsBody=aix1PktAdminStdsBody, aix1AdminGbufXoffThreshold=aix1AdminGbufXoffThreshold, aix1StatErrGfctlDiscards=aix1StatErrGfctlDiscards, aix1PktAdminUseRejectPkts=aix1PktAdminUseRejectPkts, ai192Ver71=ai192Ver71, aix1PktOperPVCOffset=aix1PktOperPVCOffset, aix1PhysAdminInterFrameDelayInterval=aix1PhysAdminInterFrameDelayInterval, aix1PktAdminEntry=aix1PktAdminEntry, aix1CircuitBCNumber=aix1CircuitBCNumber, aix1VCVCNumber=aix1VCVCNumber, aix1ApplAdminEntry=aix1ApplAdminEntry, aix1VCRemoteVCNumber=aix1VCRemoteVCNumber, ai196Ver721=ai196Ver721, aix1FrmAdminRandomizeT1=aix1FrmAdminRandomizeT1, ai192Ver77=ai192Ver77, aix1ApplOperXONXOFFProto=aix1ApplOperXONXOFFProto, aix1FrmAdminIdleRRs=aix1FrmAdminIdleRRs, aix1StatInCharsPerSec80s=aix1StatInCharsPerSec80s, ai196Ver710=ai196Ver710, aix1ApplAdminLinkConnectionMode=aix1ApplAdminLinkConnectionMode, aix1StatErrX25OutChoked=aix1StatErrX25OutChoked, aix1ApplOperNMAProto=aix1ApplOperNMAProto, aix1PhysAdminT1LineBuildOut=aix1PhysAdminT1LineBuildOut, aix1AdminPVCChannelNumber=aix1AdminPVCChannelNumber, aix1VCOperPVCType=aix1VCOperPVCType, aix1ApplOperEntry=aix1ApplOperEntry, aix1PktOperIndex=aix1PktOperIndex, aix1PktAdminIndex=aix1PktAdminIndex, aiSystemOID=aiSystemOID, aix1ApplAdminLinkStart=aix1ApplAdminLinkStart, aiX1VC=aiX1VC, aix1PktAdminSVCOffset=aix1PktAdminSVCOffset, aix1PktOperPacketizingTimer=aix1PktOperPacketizingTimer, aix1PktOperSendInitialRestart=aix1PktOperSendInitialRestart, aix1VCState=aix1VCState, aix1PhysAdminIndex=aix1PhysAdminIndex, aix1PktOperNegMaxPktSize=aix1PktOperNegMaxPktSize, aix1PktAdminUndefinedFacils=aix1PktAdminUndefinedFacils, aix1PktAdminConformanceMode=aix1PktAdminConformanceMode, aiX1Appl=aiX1Appl, aix1CircuitPktsRcvd=aix1CircuitPktsRcvd, ai196Ver720=ai196Ver720, aiX1Phys=aiX1Phys, aix1PktAdminDBit=aix1PktAdminDBit, aix1PktOperSVCOffset=aix1PktOperSVCOffset, aix1StatOutCharsPerSec80s=aix1StatOutCharsPerSec80s, ai196Ver71=ai196Ver71, aix1AdminPVCTable=aix1AdminPVCTable, aix1ApplAdminTL1Proto=aix1ApplAdminTL1Proto, aix1PktAdminSendInitialRestart=aix1PktAdminSendInitialRestart, aix1PktAdminQBitMBit=aix1PktAdminQBitMBit, aix1FrmOperIndex=aix1FrmOperIndex, aix1StatErrEmptyPktsRcv=aix1StatErrEmptyPktsRcv, aix1PktOperEntry=aix1PktOperEntry, aix1StatErrGfctlXoffs=aix1StatErrGfctlXoffs, aix1PktAdminTable=aix1PktAdminTable, aix1ApplAdminNMAProto=aix1ApplAdminNMAProto, aix1PhysAdminInterFrameDelayStatus=aix1PhysAdminInterFrameDelayStatus, ai192Ver711=ai192Ver711, ai196Ver70=ai196Ver70, aix1ApplAdminLinkMode=aix1ApplAdminLinkMode, ai192Ver710=ai192Ver710, aix1PktOperDefWindowSize=aix1PktOperDefWindowSize, aix1CircuitRemoteBasePort=aix1CircuitRemoteBasePort, aix1PktOperUndefinedFacils=aix1PktOperUndefinedFacils, aix1PhysStatTable=aix1PhysStatTable, ai196Ver708=ai196Ver708, aix1CircuitState=aix1CircuitState, aix1VCConType=aix1VCConType, aix1ApplOperOPSINEProto=aix1ApplOperOPSINEProto, aix1PktOperDefMaxPktSize=aix1PktOperDefMaxPktSize, aix1PhysOperT1LineBuildOut=aix1PhysOperT1LineBuildOut, aix1PktOperConformanceMode=aix1PktOperConformanceMode, aix1ApplAdminResetErrs=aix1ApplAdminResetErrs, aix1PktOperUseRejectPkts=aix1PktOperUseRejectPkts, aix1PktOperTable=aix1PktOperTable, aii=aii, aix1CircuitUserData=aix1CircuitUserData, aix1FrmOperRandomizeT1=aix1FrmOperRandomizeT1, aix1PhysOperInterFrameDelayStatus=aix1PhysOperInterFrameDelayStatus, ai192Ver709=ai192Ver709, aix1Bx25AdminDMlock=aix1Bx25AdminDMlock, aix1ApplAdminIndex=aix1ApplAdminIndex, aix1PhysStatTxAborts=aix1PhysStatTxAborts, ai192Ver70=ai192Ver70, aix1AdminPVCLinkId=aix1AdminPVCLinkId, aix1PhysStatEntry=aix1PhysStatEntry, aix1AdminRollover=aix1AdminRollover, aix1PktAdminDefWindowSize=aix1PktAdminDefWindowSize, aix1AdminPVCEntry=aix1AdminPVCEntry, aix1CircuitChannelNumber=aix1CircuitChannelNumber, aiX1=aiX1, aix1PktOperFacilChecking=aix1PktOperFacilChecking, aix1ApplAdminXONXOFFProto=aix1ApplAdminXONXOFFProto, aix1CircuitLinkId=aix1CircuitLinkId, aix1ApplOperTL1Proto=aix1ApplOperTL1Proto, aiX1Frm=aiX1Frm, aix1VCTable=aix1VCTable, ai196Ver709=ai196Ver709, aix1PktStatIndex=aix1PktStatIndex, aix1VCEntry=aix1VCEntry, aix1FrmOperTable=aix1FrmOperTable, aix1PktOperDBit=aix1PktOperDBit, aix1PktOperStdsBody=aix1PktOperStdsBody, ai196=ai196, ai196Ver711=ai196Ver711, aix1FrmAdminTable=aix1FrmAdminTable, aix1PktOperQBitMBit=aix1PktOperQBitMBit, aix1Bx25AdminLinkUp=aix1Bx25AdminLinkUp, aix1AdminPVCTimer=aix1AdminPVCTimer, aix1StatErrVcMuxErrs=aix1StatErrVcMuxErrs, aix1AdminGbufRecovThreshold=aix1AdminGbufRecovThreshold, aix1FrmOperEntry=aix1FrmOperEntry, aix1StatErrX25OutData=aix1StatErrX25OutData)
