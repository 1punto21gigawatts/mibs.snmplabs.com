#
# PySNMP MIB module CISCO-LWAPP-MESH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-MESH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
cLApName, cLApSysMacAddress = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApName", "cLApSysMacAddress")
CLDot11Channel, = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLDot11Channel")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Counter32, Counter64, NotificationType, ModuleIdentity, iso, Bits, ObjectIdentity, MibIdentifier, Integer32, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Counter64", "NotificationType", "ModuleIdentity", "iso", "Bits", "ObjectIdentity", "MibIdentifier", "Integer32", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, TextualConvention, TimeStamp, TruthValue, TimeInterval, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue", "TimeInterval", "MacAddress")
ciscoLwappMeshMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 616))
ciscoLwappMeshMIB.setRevisions(('2010-10-07 00:00', '2010-03-03 00:00', '2007-03-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappMeshMIB.setRevisionsDescriptions(('Deprecated clMeshNodeBackhaulDataRate and replaced it with clMeshNodeBHDataRate. Deprecated ciscoLwappMeshConfigGroupSup1 and ciscoLwappMeshMIBComplianceR01. Added ciscoLwappMeshConfigGroupSup2 and ciscoLwappMeshMIBComplianceR02. Modified the description of the notification object, ciscoLwappMeshAbateHighSNR.', 'Added following new objects to clMeshNodeTable: clMeshNodeChildCount, clMeshNodeBackhaulRadio Added following new objects to ciscoLwappMeshGlobalConfig. clMeshHighSNRThresholdAbate, clMeshHighSNRThresholdOnset, clMeshExcessiveHopCountThreshold, clMeshExcessiveMapChildThreshold, clMeshPublicSafetyBackhaulGlobal, clMeshisAMSDUEnable, clMeshIsIdsEnable, clMeshIsDCAChannelsEnable, clMeshIsExtendedUAEnable Added following new notifications control objects. clMeshHighSNRNotifEnabled, clMeshConsoleLoginNotifEnabled, clMeshDefaultBridgeGroupNameNotifEnabled, clMeshExcessiveHopCountNotifEnabled, clMeshExcessiveChildrenNotifEnabled Added following new notifications. ciscoLwappMeshDefaultBridgeGroupName, ciscoLwappMeshExcessiveHopCount, ciscoLwappMeshExcessiveChildren, ciscoLwappMeshAbateHighSNR, ciscoLwappMeshOnsetHighSNR Added following new notification Groups. ciscoLwappMeshNotifControlGroupSup1 is a supplement to ciscoLwappMeshNotifControlGroup, ciscoLwappMeshNotifsGroupSup1 is a supplement to ciscoLwappMeshNotifsGroup. Added ciscoLwappMeshConfigGroupSup1, which deprecates ciscoLwappMeshConfigGroup. Added ciscoLwappMeshMIBComplianceR01, which deprecates ciscoLwappMeshMIBCompliance Deprecated the following object. clMeshNodePublicSafetyBackhaul', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappMeshMIB.setLastUpdated('201010070000Z')
if mibBuilder.loadTexts: ciscoLwappMeshMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappMeshMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappMeshMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol (LWAPP) tunnel from Light-weight Access Points. This MIB represents information used in Wireless Mesh Network. MAP APs associates directly with RAP APs or with another MAP AP. Each association of AP (MAP-MAP or RAP-MAP) with another AP forms parent-child relationship. The deployment of the controller (referred to as CC in the diagram), mesh nodes (RAP and MAP) LWAPP APs, client(MS) and NMS appear as follows. +.......+ +.......+ + + + + + NMS + + NMS + + + + + +.......+ +.......+ . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + CC + + CC + + CC + + CC + + + + + + + + + +......+ +......+ +......+ +......+ .. . . . .. . . . . . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ +......+ + + + + + + + + + + + RAP + + RAP + + RAP + + RAP + + RAP + + + + + + + + + + + +......+ +......+ +......+ +......+ +......+ . . . . . . . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ +......+ + + + + + + + + + + + MAP + + MS + + MAP + + MAP + + MAP + + + + + + + + + + + +......+ +......+ +......+ +......+ +......+ . . .. . . . . .. . . . . .. . . . . . . +......+ +......+ +......+ +......+. +......+ + + + + + + + + + + + MAP + + MAP + + MAP + + MAP + + MS + + + + + + + + + + + +......+ +......+ +......+ +......+ +......+ The LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters to the LWAPP APs. The APs encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. Mobile Station ( MS ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Station and client are used interchangeably. Network Management System ( NMS ) The station from which the administrator manages the wired and wireless networks. Mesh Node A mesh node is defined as a physical or logical entity in the mesh network participating in forming the mesh backhaul. RAP and MAP are two types of mesh nodes supported in mesh network. Root AP (RAP) The AP forming the bridge between a wired and a mesh network with an Ethernet interface to the wired network and a 802.11 radio interface to the mesh network Mesh AP (MAP). The AP extending wireless coverage similar to a repeater in a mesh network and consists of a 802.11 uplink and a 802.11 downlink. On a single-radio backhaul, both uplink and downlink exist on the same radio and are logical links only. On a multi-radio backhaul, they may exist on different radios. Mesh Network Network starting with the wireless backhaul downlink of the RAP and all the entities below except any attached network to the Ethernet link of MAPs. A mesh network below a single RAP is also referred to as a 'Mesh Sector'.A mesh network consists of mesh nodes. A single mesh network is always augmented to a single wired network. Mesh Link A logical 802.11 link between two mesh nodes. A single link is point-to-point. All point-to-multipoint links are considered as multiple mesh links. Often referred to as mesh backhaul link. Mesh Backhaul A mesh backhaul consists of mesh nodes and mesh links terminating at a RAP. This necessarily creates a one- to-one relationship between a 'mesh network', 'mesh sector' and a 'mesh backhaul' where these terms can be used interchangeably. SNR Signal to Noise ratio on the 802.11 radio. Bridged network The bridged network is defined as the network(s) attached to the Ethernet port of any MAP. There can be multiple such networks attached to a single mesh network. Mesh Node Roaming A mesh node may change its parent mesh node naturally when the RF/network condition changes. Child Mesh node will re-associate and re-authenticate to new parent mesh node. Mesh Security supports two types of mesh node roaming. Intra-controller - LWAPP session is not lost. Inter-controller - LWAPP session is lost. AMSDU Aggregate MAC Service Data Unit. A structure containing multiple MSDUs, transported within a single (unfragmented) or multiple (fragmented) Data MPDU. IDS Intrusion Detection Sysytem. A software to detect unwanted attempts at accessing,manipulating, and or disabling of WLC. ExtendedUA For 1524 APs, it has two 802.11a radios (slot1, slot2) and one 802.11b/g radio (slot0). This will enable the client access on 802.11a (slot1) for 152x series mesh access points with two 802.11a radios, where the wireless client association can be done over the 802.11a radio (slot1). With this feature we are providing an option to enable/disable backhaul client on another 802.11a radio (slot2) as well. This implies that a 152x series mesh access points with two 802.11a radios can carry both backhaul traffic and 802.11a (slot1, slot2) client traffic over the same radios. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol")
ciscoLwappMeshMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 0))
ciscoLwappMeshMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 1))
ciscoLwappMeshMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 2))
ciscoLwappMeshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1))
ciscoLwappMeshGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2))
ciscoLwappMeshNeighborsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3))
ciscoLwappMeshNotifControlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4))
ciscoLwappMeshMIBNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 5))
clMeshNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1), )
if mibBuilder.loadTexts: clMeshNodeTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeTable.setDescription('This table represents information about the 802.11 LWAPP Access Points that have joined the controller as part of a mesh network.')
clMeshNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"))
if mibBuilder.loadTexts: clMeshNodeEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeEntry.setDescription('Each entry represents a conceptual row in this table. An entry is created when MAP joins the controller. The entry is removed when the mesh node lose their association with the controller due to loss of communication with controller or when a mesh node is reset.')
clMeshNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("map", 1), ("rap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeRole.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeRole.setDescription('This object represents the role of mesh AP which has joined the controller. See glossary section above for detail about MAP and RAP.')
clMeshNodeGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeGroupName.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeGroupName.setDescription('This object represents the group name of the mesh sector. MAP AP will join the mesh sector which has the same group name configured on RAP AP.')
clMeshNodeBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeBackhaul.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBackhaul.setDescription('This object represents 802.11 interface type of the backhaul link. See Mesh Link in glossary section for more detail on backhaul link. dot11a - 802.11a radio is used as backhaul link. dot11b - 802.11b radio is used as backhaul link. dot11g - 802.11g radio is used as backhaul link.')
clMeshNodeBackhaulDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 4), Unsigned32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeBackhaulDataRate.setStatus('deprecated')
if mibBuilder.loadTexts: clMeshNodeBackhaulDataRate.setDescription('This object represents the rate at which packets are sent on the backhaul link. This object has been deprecated for clMeshNodeBHDataRate.')
clMeshNodeEthernetBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeEthernetBridge.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeEthernetBridge.setDescription("A value of 'true' indicates ethernet bridging is enable on this mesh node. A value of 'false indicates ethernet bridging is not enable on this mesh node. Ethernet bridging can be enabled on RAP or MAP.")
clMeshNodeEthernetLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeEthernetLinkStatus.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeEthernetLinkStatus.setDescription('This object represents if the link is up or down on the ethernet port of the RAP or MAP. up - ethernet link is up. down - ethernet link is down.')
clMeshNodePublicSafetyBackhaul = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodePublicSafetyBackhaul.setStatus('deprecated')
if mibBuilder.loadTexts: clMeshNodePublicSafetyBackhaul.setDescription('4.9Ghz considered to be public safety band and is limited to some service providers. A value of true indicates that 4.9 Ghz can be used on backhaul link by selecting channel on the 802.11a backhaul radio. Since public safety is now set at the controller level rather then at the AP level, use of this variable is deprecated, and the global setting clMeshPublicSafetyBackhaulGlobal should be used instead.')
clMeshNodeParentMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeParentMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeParentMacAddress.setDescription('This object represents the MAC address of a parent mesh node. In case of RAP this object will return 0000000000000.')
clMeshNodeHeaterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeHeaterStatus.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeHeaterStatus.setDescription('This object represents the heater status of the mesh node. on - heater is in operation off - heater is not operation.')
clMeshNodeInternalTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 10), Integer32()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeInternalTemp.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeInternalTemp.setDescription('This object represents the internal temperature of mesh node in celsius.')
clMeshNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeType.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeType.setDescription('This object represents the type of mesh node. indoor - Mesh node which is manufactured to be used inside the building. outdoor - Mesh node which can be used outside building in open environment.')
clMeshNodeHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 12), Gauge32()).setUnits('hops').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeHops.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeHops.setDescription("This object represents the number of hops a MAP mesh node is from RAP. When the clMeshNodeRole is set to 'RAP' this object will return a value of zero.")
clMeshNodeChildCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNodeChildCount.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeChildCount.setDescription('This object represents the number of children MAPs of a RAP or a MAP.')
clMeshNodeBackhaulRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("dot11bg", 2), ("dot11a", 3))).clone('dot11a')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeBackhaulRadio.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBackhaulRadio.setDescription('This object specifies the type of radio used for backhaul access. unknown (1) unsupported APs dot11bg (2) The value dot11b sets the 802.11b radio as backhaul radio dot11a (3) The value dot11a sets the 802.11a radio as backhaul radio')
clMeshNodeBHDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("mbps1", 1), ("mbps2", 2), ("mbps5point5", 3), ("mbps6", 4), ("mbps9", 5), ("mbps11", 6), ("mbps12", 7), ("mbps18", 8), ("mbps24", 9), ("mbps36", 10), ("mbps48", 11), ("mbps54", 12), ("auto", 13), ("htMcs0", 14), ("htMcs1", 15), ("htMcs2", 16), ("htMcs3", 17), ("htMcs4", 18), ("htMcs5", 19), ("htMcs6", 20), ("htMcs7", 21), ("htMcs8", 22), ("htMcs9", 23), ("htMcs10", 24), ("htMcs11", 25), ("htMcs12", 26), ("htMcs13", 27), ("htMcs14", 28), ("htMcs15", 29))).clone('mbps6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeBHDataRate.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeBHDataRate.setDescription("This object represents the rate at which packets are sent on the backhaul link. Depending on the backhaul radio type, denoted by clMeshNodeBackhaul object, data rate will vary. If the value of clMeshNodeBackhaul object is 'dot11a', data rates can be one of the following possible values. mbps6(4) mbps9(5) mbps12(7) mbps18(8) mbps24(9) mbps36(10) mbps48(11) mbps54(12) auto(13) Additionally following data rates are supported if 802.11a supports 11n. htMcs0(14) htMcs1(15) htMcs2(16) htMcs3(17) htMcs4(18) htMcs5(19) htMcs6(20) htMcs7(21) htMcs8(22) htMcs9(23) htMcs10(24) htMcs11(25) htMcs12(26) htMcs13(27) htMcs14(28) htMcs15(29) If the value of clMeshNodeBackhaul object is 'dot11b', then data rate can be one of the following possible values. mbps1(1) mbps2(2) mbps5point5(3) mbps11(6) auto(13) IIf the value of clMeshNodeBackhaul object is 'dot11g', then data rate can be one of the following possible values. mbps1(1) mbps2(2) mbps5point5(3) mbps6(4) mbps9(5) mbps11(6) mbps12(7) mbps18(8) mbps24(9) mbps36(10) mbps48(11) mbps54(12) auto(13)")
clMeshNodeRange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(150, 132000)).clone(12000)).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshNodeRange.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeRange.setDescription('This object represents the optimal distance in feet between RAP and MAP for backhaul link without degrading SNR value.')
clMeshBackhaulClientAccess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshBackhaulClientAccess.setStatus('current')
if mibBuilder.loadTexts: clMeshBackhaulClientAccess.setDescription("This object represents if client access is to be enable on backhaul link. If AP has two radios,802.11a and 802.11bg, then radio which is used as backhaul link does not have client access. A value of 'true' indicates client access is present on backhaul link. If AP has only one radio then same radio is used for backhaul and client access.")
clMeshMacFilterList = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshMacFilterList.setStatus('current')
if mibBuilder.loadTexts: clMeshMacFilterList.setDescription("If this object is 'true' then any mesh node joining controller will be authenticated against this list. If this object is 'false' then mesh node can join controller even if mesh node MAC address is not in MAC filter list.")
clMeshMeshNodeAuthFailureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('failures').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshMeshNodeAuthFailureThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshMeshNodeAuthFailureThreshold.setDescription("This object represents the authorization failure threshold value. When the number of failures exceeds this value then 'ciscoLwappMeshAuthFailure' notification is raised.")
clMeshMeshChildAssociationFailuresThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(10)).setUnits('failures').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshMeshChildAssociationFailuresThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshMeshChildAssociationFailuresThreshold.setDescription("This object represents the number of failed association to controller occurred through a parent mesh node. When this values exceeds then 'ciscoLwappMeshChildExcludedParent' notification is raised.")
clMeshMeshChildExcludedParentInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 6), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(18000, 96000)).clone(48000)).setUnits('hundredths-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshMeshChildExcludedParentInterval.setStatus('current')
if mibBuilder.loadTexts: clMeshMeshChildExcludedParentInterval.setDescription('This object represents the time interval during which a child mesh node will exclude a parent mesh node. During this interval child will not try to associate the controller through the parent mesh node.')
clMeshSNRThresholdAbate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 50)).clone(16)).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshSNRThresholdAbate.setStatus('current')
if mibBuilder.loadTexts: clMeshSNRThresholdAbate.setDescription("This object represents the abate threshold value of SNR. This threshold value is use to determine if the SNR value seen by the child mesh node has reached acceptable level and is use to trigger the 'ciscoLwappMeshAbateSNR' notification.")
clMeshSNRThresholdOnset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 50)).clone(12)).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshSNRThresholdOnset.setStatus('current')
if mibBuilder.loadTexts: clMeshSNRThresholdOnset.setDescription("This object represents the onset threshold value of SNR. This threshold value is use to determine if the SNR value seen by the child mesh node has reached below unacceptable level and is use to trigger the 'ciscoLwappMeshOnsetSNR' notification.")
clMeshSNRCheckTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 9), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(18000, 96000)).clone(18000)).setUnits('hundredths-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshSNRCheckTimeInterval.setStatus('current')
if mibBuilder.loadTexts: clMeshSNRCheckTimeInterval.setDescription('This object represents the time interval after which SNR value is checked by child mesh node.')
clMeshExcessiveParentChangeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setUnits('occcurences').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveParentChangeThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveParentChangeThreshold.setDescription("This object represents the threshold for the number of times a child mesh node changes its parent. If number of parent change exceeds this value with in the time interval defined by object 'clMeshExcessiveParentChangeInterval' then the 'ciscoLwappMeshExcessiveParentChange' notification is raised.")
clMeshExcessiveParentChangeInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 11), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(180000, 360000)).clone(360000)).setUnits('hundredths-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveParentChangeInterval.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveParentChangeInterval.setDescription("This object represents the time interval during which number of times a child mesh node changes its parent change is counted. If number of parent change exceeds the value defined by the object 'clMeshExcessiveParentChangeThreshold' with in this time interval then the 'ciscoLwappMeshExcessiveParentChange' notification is raised.")
clMeshBackgroundScan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshBackgroundScan.setStatus('current')
if mibBuilder.loadTexts: clMeshBackgroundScan.setDescription("A value of 'true' indicates the MAP mesh node scans its neighbors on different channel other than only its current channel on backhaul link. This scanning helps MAP mesh node to quickly determine its new parent on different channels.")
clMeshAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("eap", 2), ("psk", 3))).clone('psk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: clMeshAuthenticationMode.setDescription("This object represents authentication mode of RAP and MAP mesh nodes in controller. none - no authentication is done. psk - pre shared key. Keys provided during manufacturing will be used for authentication of mesh node. eap - extensible authentication protocol is used to authenticate mesh node. A value of 'eap' indicates, authentication can happen by local-auth in controller or by RADIUS server configured in controller.")
clMeshExcessiveHopCountThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveHopCountThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveHopCountThreshold.setDescription("This object represents threshold number of hops from the MAP node to the RAP. Crossing this value will raise the 'ciscoLwappMeshExcessiveHopCount' notification.")
clMeshExcessiveRapChildThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveRapChildThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveRapChildThreshold.setDescription("This object represents threshold number of children MAPs attached to a parent RAP. Crossing this value will raise the 'ciscoLwappMeshExcessiveChildren' notification.")
clMeshExcessiveMapChildThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveMapChildThreshold.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveMapChildThreshold.setDescription("This object represents threshold number of children MAPs attached to a parent MAP. Crossing this value will raise the 'ciscoLwappMeshExcessiveChildren' notification.")
clMeshHighSNRThresholdAbate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 80)).clone(60)).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshHighSNRThresholdAbate.setStatus('current')
if mibBuilder.loadTexts: clMeshHighSNRThresholdAbate.setDescription("This object represents the abate threshold value of SNR. This threshold value is used to determine if the SNR value seen by the child mesh node has reached below this level and is use to trigger the 'ciscoLwappMeshAbateHighSNR' notification.")
clMeshHighSNRThresholdOnset = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 80)).clone(56)).setUnits('db').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshHighSNRThresholdOnset.setStatus('current')
if mibBuilder.loadTexts: clMeshHighSNRThresholdOnset.setDescription("This object represents the onset threshold value of SNR. This threshold value is use to determine if the SNR value seen by the child mesh node has reached above this level and is use to trigger the 'ciscoLwappMeshOnsetHighSNR' notification.")
clMeshPublicSafetyBackhaulGlobal = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshPublicSafetyBackhaulGlobal.setStatus('current')
if mibBuilder.loadTexts: clMeshPublicSafetyBackhaulGlobal.setDescription('4.9Ghz considered to be public safety band and is limited to some service providers. A value of true indicates that 4.9 Ghz can be used on backhaul link by selecting channel on the 802.11a backhaul radio. This setting applies at the controller level. The prior per AP setting clMeshNodePublicSafetyBackhaul is deprecated as a result.')
clMeshisAMSDUEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshisAMSDUEnable.setStatus('current')
if mibBuilder.loadTexts: clMeshisAMSDUEnable.setDescription('This object represents the AMSDU status. true : Turns on AMSDU. false : Turns off AMSDU.')
clMeshIsIdsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshIsIdsEnable.setStatus('current')
if mibBuilder.loadTexts: clMeshIsIdsEnable.setDescription('This object represents the IDS status. true : Turns on IDS feature. false : Turns off IDS feature.')
clMeshIsDCAChannelsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshIsDCAChannelsEnable.setStatus('current')
if mibBuilder.loadTexts: clMeshIsDCAChannelsEnable.setDescription('This object represents the DCA Channel status. true : Turns on DCA feature for AP1524SB. false : Turns off DCA feature for AP1524SB. This is not implies for non-1524SB APs. Error will return if it is set for non-1524SB APs.')
clMeshIsExtendedUAEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 2, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshIsExtendedUAEnable.setStatus('current')
if mibBuilder.loadTexts: clMeshIsExtendedUAEnable.setDescription('This object represents the ExtendedUA status. true : Turns on ExtendedUA feature. false : Turns off ExtendedUA feature.')
clMeshNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1), )
if mibBuilder.loadTexts: clMeshNeighborTable.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborTable.setDescription('This table represents information about neighbors of any mesh node. Neighbor AP can be on same or different mesh sector. Any mesh node is neighbor of a mesh node, if it can detect 802.11 signals on any channels. Child or parent mesh node also considers as neighbors.')
clMeshNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-AP-MIB", "cLApSysMacAddress"), (0, "CISCO-LWAPP-MESH-MIB", "clMeshNeighborMacAddress"))
if mibBuilder.loadTexts: clMeshNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborEntry.setDescription('An (conceptual) entry in this table is created when mesh node detects neighbor mesh nodes. Entries are removed when the mesh node does not detect AP as neighbor.')
clMeshNeighborMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: clMeshNeighborMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborMacAddress.setDescription('This object represents MAC address of neighbor mesh node.')
clMeshNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1, 1, 2), Bits().clone(namedValues=NamedValues(("parent", 0), ("neighbor", 1), ("excluded", 2), ("child", 3), ("beacon", 4), ("default", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighborType.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborType.setDescription('This object represents type of neighbor mesh node. parent - Neighbor mesh node is a parent mesh node of this mesh node. neighbor - Its a neighbor mesh node. It can be on same or different mesh-sector. excluded - Neighbor mesh node is excluded by this mesh node. child - Neighbor mesh node is child of this mesh node. beacon - Neighbor mesh node found by passive scanning. Default - Neighbor mesh node connected using a mismatched bridge group name')
clMeshNeighborLinkSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1, 1, 3), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighborLinkSnr.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborLinkSnr.setDescription('This object represents the SNR value seen by this mesh node from neighbor mesh node.')
clMeshNeighborChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1, 1, 4), CLDot11Channel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighborChannel.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborChannel.setDescription('This object represents the channel on which neighbor mesh node is operating.')
clMeshNeighborUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 3, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMeshNeighborUpdate.setStatus('current')
if mibBuilder.loadTexts: clMeshNeighborUpdate.setDescription('This object represents when the neighbor table was last updated. This value is represented as a instance of sysUp time.')
clMeshAuthFailureNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshAuthFailureNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshAuthFailureNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshAuthFailure' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will be not be generated.")
clMeshChildExcludedParentNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshChildExcludedParentNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshChildExcludedParentNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshChildExcludedParent' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will be not be generated.")
clMeshParentChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshParentChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshParentChangeNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshParentChange' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will be not be generated.")
clMeshChildMovedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshChildMovedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshChildMovedNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshChildMoved' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will be not be generated.")
clMeshExcessiveParentChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveParentChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveParentChangeNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshExcessiveParentChange' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will be not be generated.")
clMeshPoorSNRNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshPoorSNRNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshPoorSNRNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshOnsetSNR' and 'ciscoLwappMeshAbateSNR' notifications. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will be not be generated.")
clMeshConsoleLoginNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshConsoleLoginNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshConsoleLoginNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshConsoleLogin' notification. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will not be generated.")
clMeshDefaultBridgeGroupNameNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshDefaultBridgeGroupNameNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshDefaultBridgeGroupNameNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshDefaultBridgeGroupName' notification. A value of 'true' indicates this notification will be generated. A value of 'false' indicates this notification will not be generated.")
clMeshExcessiveHopCountNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveHopCountNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveHopCountNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshExcessiveHopCount' notification. A value of 'true' indicates this notification will be generated. A value of 'false' indicates this notification will not be generated.")
clMeshExcessiveChildrenNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshExcessiveChildrenNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshExcessiveChildrenNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshExcessiveChildren' notification. A value of 'true' indicates this notification will be generated. A value of 'false' indicates this notification will not be generated.")
clMeshHighSNRNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 4, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clMeshHighSNRNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: clMeshHighSNRNotifEnabled.setDescription("This object controls the generation of 'ciscoLwappMeshOnsetHighSNR' and 'ciscoLwappMeshAbateHighSNR' notifications. A value of 'true' indicates notification will be generated. A value of 'false' indicates notification will not be generated.")
clMeshNodeMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 5, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clMeshNodeMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMeshNodeMacAddress.setDescription('This object specifies the MAC address of a LWAPP AP.')
clMeshAuthFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInMacFilterList", 1), ("securityFailure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clMeshAuthFailureReason.setStatus('current')
if mibBuilder.loadTexts: clMeshAuthFailureReason.setDescription('This object specifies the failure reason when a mesh node failed to authenticate through a controller to an Authentication Server. notInMacFilterList - MAC address of a mesh node is not configured in MAC filter list. securityFailure - Authentication server sent rejection for the mesh node.')
clMeshPreviousParentMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 5, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clMeshPreviousParentMacAddress.setStatus('current')
if mibBuilder.loadTexts: clMeshPreviousParentMacAddress.setDescription('This object specifies the MAC address of previous parent Mesh Node.')
clMeshConsoleLoginStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 616, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: clMeshConsoleLoginStatus.setStatus('current')
if mibBuilder.loadTexts: clMeshConsoleLoginStatus.setDescription('This object specifies the status of console login at MAP mesh node.')
ciscoLwappMeshAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 1)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshAuthFailureReason"))
if mibBuilder.loadTexts: ciscoLwappMeshAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshAuthFailure.setDescription("A mesh node can fail to authorize if the MAC address of mesh node is not in the MAC filter list or security failure by authentication server. Reason is specified by 'clMeshAuthFailureReason'. This notification is sent by the agent when number of failures exceeds threshold defined by object 'clMeshMeshNodeAuthFailureThreshold'. Object 'clMeshAuthFailureNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshChildExcludedParent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 2)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeParentMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshPreviousParentMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshChildExcludedParent.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshChildExcludedParent.setDescription("This notification will be sent by agent when child mesh node exceeds threshold limit of number of discovery response timeouts defined by object 'clMeshMeshChildAssociationFailuresThreshold'. The child mesh node will not try to associate excluded parent mesh node for the interval defined by object 'clMeshMeshChildExcludedParentInterval'. The child mesh node will remember the excluded parent MAC address and when it joins the network it will inform the controller. 'cLApName' specifies child mesh node name. Child MAC address is sent as part of index. Object 'clMeshChildExcludedParentNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshParentChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 3)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeParentMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshPreviousParentMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshParentChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshParentChange.setDescription("This notification is sent by the agent when a child mesh node changes its parent. Child mesh node will remember its previous parent and when it joins the network it will inform controller about change of its parent. 'cLApName' specifies child mesh node name. Child mesh node MAC address is sent as part of index. Object 'clMeshParentChangeNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshChildMoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 4)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborType"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshChildMoved.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshChildMoved.setDescription("This notification is sent by the agent when a parent mesh node loses connection with its child mesh node. 'cLApName' specifies parent mesh node name. Parent and child MAC address are sent as part of index. Object 'clMeshChildMovedNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshExcessiveParentChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 5)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborType"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveParentChange.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveParentChange.setDescription("This notification is sent by the agent when child mesh node changes its parent frequently. Each mesh node keeps count of number of parent changes in fixed time. If it exceeds the threshold defined by 'clMeshExcessiveParentChangeThreshold' then child mesh node informs the controller. 'cLApName' specifies child mesh node name. Child and Parent MAC address are sent as part of index. Object 'clMeshExcessiveParentChangeNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshOnsetSNR = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 6)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborLinkSnr"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshOnsetSNR.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshOnsetSNR.setDescription("This notification is sent by the agent when child mesh node detects lower SNR on backhaul link then defined by object 'clMeshSNRThresholdOnset'. SNR value is checked after interval defined by object 'clMeshSNRCheckTimeInterval'. 'ciscoLwappMeshAbateSNR' notification will be sent to clear this notification. 'cLApName' specifies child mesh node name. Child and parent MAC address are sent as part of index. Object 'clMeshPoorSNRNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshAbateSNR = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 7)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborLinkSnr"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshAbateSNR.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshAbateSNR.setDescription("This notification is sent by the agent to clear 'ciscoLwappMeshOnsetSNR' notification when child mesh node detects SNR on backhaul link is higher then the object defined by 'clMeshSNRThresholdAbate'. SNR value is checked after interval defined by object 'clMeshSNRCheckTimeInterval'. 'cLApName' specifies child mesh node name. Child and parent MAC address are sent as part of index. Object 'clMeshPoorSNRNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshConsoleLogin = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 8)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshConsoleLoginStatus"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshConsoleLogin.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshConsoleLogin.setDescription("This notification is sent by the agent when login on MAP console is successful or failure after three attempts. 'cLApName' specifies mesh node name. Object 'clMeshConsoleLoginNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshDefaultBridgeGroupName = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 9)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeParentMacAddress"))
if mibBuilder.loadTexts: ciscoLwappMeshDefaultBridgeGroupName.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshDefaultBridgeGroupName.setDescription("This notification is sent by the agent when MAP mesh node joins parent using 'default' bridge group name. The child node mac address is sent as the index of cLApName.")
ciscoLwappMeshExcessiveHopCount = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 10)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHops"))
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveHopCount.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveHopCount.setDescription("This notification is sent by the agent when the number of hops from the MAP node to the RAP exceeds the threshold defined by 'clMeshExcessiveHopCountThreshold'. The MAP MAC address is sent as part of the index. These alarms are raised once in three minutes, the periodicity of AP sending the statistics to WLC.")
ciscoLwappMeshExcessiveChildren = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 11)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeRole"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeChildCount"))
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveChildren.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshExcessiveChildren.setDescription('This notification is sent by the agent when the child count exceeds clMeshExcessiveRapChildThreshold for a RAP and clMeshExcessiveMapChildThreshold for a MAP. The node MAC address is sent as a part of the index. These alarms are raised once in three minutes, the periodicity of AP sending the statistics to WLC.')
ciscoLwappMeshOnsetHighSNR = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 12)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborLinkSnr"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshOnsetHighSNR.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshOnsetHighSNR.setDescription("This notification is sent by the agent when child mesh node detects higher SNR on backhaul link then defined by object 'clMeshHighSNRThresholdOnset'. SNR value is checked after interval defined by object 'clMeshSNRCheckTimeInterval'. 'ciscoLwappMeshAbateHighSNR' notification will be sent to clear this notification. 'cLApName' specifies child mesh node name. Child and parent MAC address are sent as part of index. Object 'clMeshHighSNRNotifEnabled' controls the generation of this notification. These alarms are raised once in three minutes, the periodicity of AP sending the statistics to WLC.")
ciscoLwappMeshAbateHighSNR = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 616, 0, 13)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborLinkSnr"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappMeshAbateHighSNR.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshAbateHighSNR.setDescription("This notification is sent by the agent to clear 'ciscoLwappMeshOnsetSNR' notification when child mesh node detects SNR on backhaul link, which is lower than the object defined by 'clMeshHighSNRThresholdAbate'. SNR value is checked after interval defined by object 'clMeshSNRCheckTimeInterval'. 'clMeshNeighborLinkSnr' represents the SNR value seen by this mesh node from neighbor mesh node. 'cLApName' specifies child mesh node name. Child and parent MAC address are sent as part of index. Object 'clMeshHighSNRNotifEnabled' controls the generation of this notification.")
ciscoLwappMeshMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 1))
ciscoLwappMeshMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2))
ciscoLwappMeshMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 1, 1)).setObjects(("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshConfigGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNeighborStatusGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifControlGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifObjsGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshMIBCompliance = ciscoLwappMeshMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshMIB module.')
ciscoLwappMeshMIBComplianceR01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 1, 2)).setObjects(("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNeighborStatusGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifControlGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifObjsGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifsGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshConfigGroupSup1"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifControlGroupSup1"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshMIBComplianceR01 = ciscoLwappMeshMIBComplianceR01.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshMIBComplianceR01.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshMIB module.This deprecates ciscoLwappMeshMIBCompliance')
ciscoLwappMeshMIBComplianceR02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 1, 3)).setObjects(("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNeighborStatusGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifControlGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifObjsGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifsGroup"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshConfigGroupSup2"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifControlGroupSup1"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshNotifsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshMIBComplianceR02 = ciscoLwappMeshMIBComplianceR02.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshMIBComplianceR02.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappMeshMIB module.This deprecates ciscoLwappMeshMIBComplianceR01')
ciscoLwappMeshConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 1)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeRole"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeGroupName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaul"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaulDataRate"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeEthernetBridge"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeEthernetLinkStatus"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodePublicSafetyBackhaul"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeParentMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHeaterStatus"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeInternalTemp"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeType"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHops"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeRange"), ("CISCO-LWAPP-MESH-MIB", "clMeshBackhaulClientAccess"), ("CISCO-LWAPP-MESH-MIB", "clMeshMacFilterList"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshNodeAuthFailureThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshChildAssociationFailuresThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshChildExcludedParentInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRThresholdAbate"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRThresholdOnset"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRCheckTimeInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshBackgroundScan"), ("CISCO-LWAPP-MESH-MIB", "clMeshAuthenticationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshConfigGroup = ciscoLwappMeshConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshConfigGroup.setDescription('This collection of objects represent the global and mesh node specific configuration and monitor parameters.')
ciscoLwappMeshNeighborStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 2)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNeighborType"), ("CISCO-LWAPP-MESH-MIB", "clMeshNeighborLinkSnr"), ("CISCO-LWAPP-MESH-MIB", "clMeshNeighborChannel"), ("CISCO-LWAPP-MESH-MIB", "clMeshNeighborUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNeighborStatusGroup = ciscoLwappMeshNeighborStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNeighborStatusGroup.setDescription('This collection of objects represent the neighbor status of any mesh node.')
ciscoLwappMeshNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 3)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshAuthFailureNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshChildExcludedParentNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshParentChangeNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshChildMovedNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshPoorSNRNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshConsoleLoginNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNotifControlGroup = ciscoLwappMeshNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNotifControlGroup.setDescription('This collection of objects represent the flags to control the generation of notification.')
ciscoLwappMeshNotifObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 4)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshAuthFailureReason"), ("CISCO-LWAPP-MESH-MIB", "clMeshPreviousParentMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshConsoleLoginStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNotifObjsGroup = ciscoLwappMeshNotifObjsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNotifObjsGroup.setDescription('This collection of objects represent the information carried by the mesh network related notifications sent by the agent to a network management station.')
ciscoLwappMeshNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 5)).setObjects(("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshAuthFailure"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshChildExcludedParent"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshParentChange"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshChildMoved"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshExcessiveParentChange"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshOnsetSNR"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshAbateSNR"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshConsoleLogin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNotifsGroup = ciscoLwappMeshNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNotifsGroup.setDescription('This collection of objects represent the mesh network related notifications sent by the agent to a network management station.')
ciscoLwappMeshConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 6)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeRole"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeGroupName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaul"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaulDataRate"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeEthernetBridge"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeEthernetLinkStatus"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeParentMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHeaterStatus"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeInternalTemp"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeType"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHops"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeChildCount"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaulRadio"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeRange"), ("CISCO-LWAPP-MESH-MIB", "clMeshBackhaulClientAccess"), ("CISCO-LWAPP-MESH-MIB", "clMeshMacFilterList"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshNodeAuthFailureThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshChildAssociationFailuresThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshChildExcludedParentInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRThresholdAbate"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRThresholdOnset"), ("CISCO-LWAPP-MESH-MIB", "clMeshHighSNRThresholdAbate"), ("CISCO-LWAPP-MESH-MIB", "clMeshHighSNRThresholdOnset"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRCheckTimeInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshBackgroundScan"), ("CISCO-LWAPP-MESH-MIB", "clMeshAuthenticationMode"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveHopCountThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveRapChildThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveMapChildThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshPublicSafetyBackhaulGlobal"), ("CISCO-LWAPP-MESH-MIB", "clMeshisAMSDUEnable"), ("CISCO-LWAPP-MESH-MIB", "clMeshIsIdsEnable"), ("CISCO-LWAPP-MESH-MIB", "clMeshIsDCAChannelsEnable"), ("CISCO-LWAPP-MESH-MIB", "clMeshIsExtendedUAEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshConfigGroupSup1 = ciscoLwappMeshConfigGroupSup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappMeshConfigGroupSup1.setDescription('This collection of objects represent the global and mesh node specific configuration and monitor parameters.')
ciscoLwappMeshNotifControlGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 7)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshHighSNRNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshDefaultBridgeGroupNameNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveHopCountNotifEnabled"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveChildrenNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNotifControlGroupSup1 = ciscoLwappMeshNotifControlGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNotifControlGroupSup1.setDescription('This collection of objects represent the flags to control the generation of notification.This deprecates ciscoLwappMeshNotifControlGroup.')
ciscoLwappMeshNotifsGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 8)).setObjects(("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshDefaultBridgeGroupName"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshExcessiveHopCount"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshExcessiveChildren"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshAbateHighSNR"), ("CISCO-LWAPP-MESH-MIB", "ciscoLwappMeshOnsetHighSNR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshNotifsGroupSup1 = ciscoLwappMeshNotifsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshNotifsGroupSup1.setDescription('This collection of objects represent the mesh network related notifications sent by the agent to a network management station.')
ciscoLwappMeshConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 616, 2, 2, 9)).setObjects(("CISCO-LWAPP-MESH-MIB", "clMeshNodeRole"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeGroupName"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaul"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBHDataRate"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeEthernetBridge"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeEthernetLinkStatus"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeParentMacAddress"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHeaterStatus"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeInternalTemp"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeType"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeHops"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeChildCount"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeBackhaulRadio"), ("CISCO-LWAPP-MESH-MIB", "clMeshNodeRange"), ("CISCO-LWAPP-MESH-MIB", "clMeshBackhaulClientAccess"), ("CISCO-LWAPP-MESH-MIB", "clMeshMacFilterList"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshNodeAuthFailureThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshChildAssociationFailuresThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshMeshChildExcludedParentInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRThresholdAbate"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRThresholdOnset"), ("CISCO-LWAPP-MESH-MIB", "clMeshHighSNRThresholdAbate"), ("CISCO-LWAPP-MESH-MIB", "clMeshHighSNRThresholdOnset"), ("CISCO-LWAPP-MESH-MIB", "clMeshSNRCheckTimeInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveParentChangeInterval"), ("CISCO-LWAPP-MESH-MIB", "clMeshBackgroundScan"), ("CISCO-LWAPP-MESH-MIB", "clMeshAuthenticationMode"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveHopCountThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveRapChildThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshExcessiveMapChildThreshold"), ("CISCO-LWAPP-MESH-MIB", "clMeshPublicSafetyBackhaulGlobal"), ("CISCO-LWAPP-MESH-MIB", "clMeshisAMSDUEnable"), ("CISCO-LWAPP-MESH-MIB", "clMeshIsIdsEnable"), ("CISCO-LWAPP-MESH-MIB", "clMeshIsDCAChannelsEnable"), ("CISCO-LWAPP-MESH-MIB", "clMeshIsExtendedUAEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappMeshConfigGroupSup2 = ciscoLwappMeshConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappMeshConfigGroupSup2.setDescription('This collection of objects represent the global and mesh node specific configuration and monitor parameters.')
mibBuilder.exportSymbols("CISCO-LWAPP-MESH-MIB", clMeshNeighborLinkSnr=clMeshNeighborLinkSnr, clMeshMeshChildAssociationFailuresThreshold=clMeshMeshChildAssociationFailuresThreshold, clMeshAuthFailureReason=clMeshAuthFailureReason, ciscoLwappMeshMIBGroups=ciscoLwappMeshMIBGroups, ciscoLwappMeshNotifsGroupSup1=ciscoLwappMeshNotifsGroupSup1, ciscoLwappMeshMIBNotifs=ciscoLwappMeshMIBNotifs, clMeshNodeBackhaul=clMeshNodeBackhaul, clMeshDefaultBridgeGroupNameNotifEnabled=clMeshDefaultBridgeGroupNameNotifEnabled, clMeshNodeRole=clMeshNodeRole, ciscoLwappMeshChildMoved=ciscoLwappMeshChildMoved, ciscoLwappMeshConfigGroupSup1=ciscoLwappMeshConfigGroupSup1, clMeshNodeMacAddress=clMeshNodeMacAddress, ciscoLwappMeshConfigGroupSup2=ciscoLwappMeshConfigGroupSup2, clMeshBackgroundScan=clMeshBackgroundScan, ciscoLwappMeshChildExcludedParent=ciscoLwappMeshChildExcludedParent, clMeshExcessiveHopCountNotifEnabled=clMeshExcessiveHopCountNotifEnabled, PYSNMP_MODULE_ID=ciscoLwappMeshMIB, ciscoLwappMeshMIB=ciscoLwappMeshMIB, clMeshNodeRange=clMeshNodeRange, ciscoLwappMeshExcessiveHopCount=ciscoLwappMeshExcessiveHopCount, clMeshExcessiveHopCountThreshold=clMeshExcessiveHopCountThreshold, clMeshExcessiveParentChangeNotifEnabled=clMeshExcessiveParentChangeNotifEnabled, clMeshNodeInternalTemp=clMeshNodeInternalTemp, clMeshMacFilterList=clMeshMacFilterList, clMeshAuthenticationMode=clMeshAuthenticationMode, clMeshMeshChildExcludedParentInterval=clMeshMeshChildExcludedParentInterval, clMeshChildExcludedParentNotifEnabled=clMeshChildExcludedParentNotifEnabled, ciscoLwappMeshOnsetHighSNR=ciscoLwappMeshOnsetHighSNR, clMeshHighSNRThresholdOnset=clMeshHighSNRThresholdOnset, ciscoLwappMeshMIBObjects=ciscoLwappMeshMIBObjects, clMeshNeighborChannel=clMeshNeighborChannel, clMeshHighSNRNotifEnabled=clMeshHighSNRNotifEnabled, clMeshNodePublicSafetyBackhaul=clMeshNodePublicSafetyBackhaul, ciscoLwappMeshNeighborStatusGroup=ciscoLwappMeshNeighborStatusGroup, ciscoLwappMeshOnsetSNR=ciscoLwappMeshOnsetSNR, clMeshPreviousParentMacAddress=clMeshPreviousParentMacAddress, ciscoLwappMeshNotifControlGroup=ciscoLwappMeshNotifControlGroup, clMeshNodeTable=clMeshNodeTable, clMeshIsDCAChannelsEnable=clMeshIsDCAChannelsEnable, clMeshNodeBackhaulRadio=clMeshNodeBackhaulRadio, ciscoLwappMeshMIBCompliances=ciscoLwappMeshMIBCompliances, ciscoLwappMeshDefaultBridgeGroupName=ciscoLwappMeshDefaultBridgeGroupName, clMeshIsIdsEnable=clMeshIsIdsEnable, ciscoLwappMeshAbateSNR=ciscoLwappMeshAbateSNR, clMeshNodeType=clMeshNodeType, ciscoLwappMeshExcessiveChildren=ciscoLwappMeshExcessiveChildren, clMeshNodeEthernetBridge=clMeshNodeEthernetBridge, clMeshNeighborUpdate=clMeshNeighborUpdate, clMeshConsoleLoginNotifEnabled=clMeshConsoleLoginNotifEnabled, clMeshExcessiveMapChildThreshold=clMeshExcessiveMapChildThreshold, ciscoLwappMeshAuthFailure=ciscoLwappMeshAuthFailure, ciscoLwappMeshParentChange=ciscoLwappMeshParentChange, clMeshNodeHeaterStatus=clMeshNodeHeaterStatus, clMeshNodeGroupName=clMeshNodeGroupName, clMeshExcessiveRapChildThreshold=clMeshExcessiveRapChildThreshold, ciscoLwappMeshNotifControlGroupSup1=ciscoLwappMeshNotifControlGroupSup1, clMeshisAMSDUEnable=clMeshisAMSDUEnable, clMeshIsExtendedUAEnable=clMeshIsExtendedUAEnable, clMeshNodeEntry=clMeshNodeEntry, ciscoLwappMeshConfigGroup=ciscoLwappMeshConfigGroup, clMeshSNRThresholdAbate=clMeshSNRThresholdAbate, ciscoLwappMeshConsoleLogin=ciscoLwappMeshConsoleLogin, ciscoLwappMeshMIBComplianceR01=ciscoLwappMeshMIBComplianceR01, ciscoLwappMeshExcessiveParentChange=ciscoLwappMeshExcessiveParentChange, clMeshNodeChildCount=clMeshNodeChildCount, clMeshParentChangeNotifEnabled=clMeshParentChangeNotifEnabled, ciscoLwappMeshNotifControlConfig=ciscoLwappMeshNotifControlConfig, clMeshPoorSNRNotifEnabled=clMeshPoorSNRNotifEnabled, clMeshNodeBHDataRate=clMeshNodeBHDataRate, clMeshChildMovedNotifEnabled=clMeshChildMovedNotifEnabled, ciscoLwappMeshMIBNotifObjects=ciscoLwappMeshMIBNotifObjects, clMeshExcessiveChildrenNotifEnabled=clMeshExcessiveChildrenNotifEnabled, clMeshNeighborEntry=clMeshNeighborEntry, ciscoLwappMeshMIBConform=ciscoLwappMeshMIBConform, clMeshExcessiveParentChangeInterval=clMeshExcessiveParentChangeInterval, ciscoLwappMeshNotifObjsGroup=ciscoLwappMeshNotifObjsGroup, clMeshNeighborTable=clMeshNeighborTable, clMeshNodeHops=clMeshNodeHops, clMeshBackhaulClientAccess=clMeshBackhaulClientAccess, clMeshNodeParentMacAddress=clMeshNodeParentMacAddress, ciscoLwappMeshMIBCompliance=ciscoLwappMeshMIBCompliance, clMeshNeighborType=clMeshNeighborType, clMeshSNRThresholdOnset=clMeshSNRThresholdOnset, clMeshPublicSafetyBackhaulGlobal=clMeshPublicSafetyBackhaulGlobal, clMeshNeighborMacAddress=clMeshNeighborMacAddress, ciscoLwappMeshMIBComplianceR02=ciscoLwappMeshMIBComplianceR02, clMeshExcessiveParentChangeThreshold=clMeshExcessiveParentChangeThreshold, clMeshHighSNRThresholdAbate=clMeshHighSNRThresholdAbate, ciscoLwappMeshGlobalConfig=ciscoLwappMeshGlobalConfig, clMeshSNRCheckTimeInterval=clMeshSNRCheckTimeInterval, clMeshNodeEthernetLinkStatus=clMeshNodeEthernetLinkStatus, ciscoLwappMeshNeighborsStatus=ciscoLwappMeshNeighborsStatus, clMeshNodeBackhaulDataRate=clMeshNodeBackhaulDataRate, ciscoLwappMeshAbateHighSNR=ciscoLwappMeshAbateHighSNR, clMeshMeshNodeAuthFailureThreshold=clMeshMeshNodeAuthFailureThreshold, ciscoLwappMeshNotifsGroup=ciscoLwappMeshNotifsGroup, clMeshConsoleLoginStatus=clMeshConsoleLoginStatus, ciscoLwappMeshConfig=ciscoLwappMeshConfig, clMeshAuthFailureNotifEnabled=clMeshAuthFailureNotifEnabled)
