#
# PySNMP MIB module CISCO-PSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PSM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
DomainId, PortMemberList, DomainIdOrZero, FcNameIdOrZero, FcNameId = mibBuilder.importSymbols("CISCO-ST-TC", "DomainId", "PortMemberList", "DomainIdOrZero", "FcNameIdOrZero", "FcNameId")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, Counter32, Gauge32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, iso, Counter64, ModuleIdentity, Bits, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Gauge32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "iso", "Counter64", "ModuleIdentity", "Bits", "Integer32", "NotificationType")
TimeStamp, TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
ciscoPsmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 364))
ciscoPsmMIB.setRevisions(('2004-10-15 00:00', '2004-03-16 00:00', '2003-11-27 00:00', '2003-11-10 00:00', '2003-10-17 00:00', '2003-10-06 00:00', '2003-08-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoPsmMIB.setRevisionsDescriptions(('Added cpsmPortBindNextFreeTable and cpsmFabricBindNextFreeTable. Added new enumeration to the TC CpsmPortBindSwPortType.', 'Added a new enumeration to the TC CpsmViolationReasonCode.', 'Added cpsmFabricBindDenialReasonCode to cpsmFabricBindViolationNewTable and the notification ciscoPsmFabricBindDenyNotifyNew.', 'Added cpsmFabricBindDenialDomId object to cpsmFabricBindViolationNewTable.', 'Made cpsmFabricBindDomId mandatory during creation of fabric-binding entry. Deprecated cpsmFabricBindAutoLearnTable.', 'Deprecated object cpsmFabricBindClearAutoLearnIntf. Updated description of cpsmFabricBindClearAutoLearnDb object to reflect the fact that fabric-binding entries cannot be cleared on an interface basis. Deprecated cpsmFabricBindViolationTable and defined new table cpsmFabricBindViolationNewTable. Deprecated ciscoPsmFabricBindDenyNotify and defined a new notification ciscoPsmFabricBindDenyNotifyNew. Added cpsmEfmdConfigTable and cpsmEfmdStatsTable.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoPsmMIB.setLastUpdated('200410150000Z')
if mibBuilder.loadTexts: ciscoPsmMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoPsmMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoPsmMIB.setDescription('The MIB module for the management of the Port Security Manager (PSM). The PSM consists of 2 aspects: Port binding and Fabric binding. Port binding is concerned with the security of switch ports and Fabric binding with the security of the SAN fabric as a whole.')
ciscoPsmMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 0))
ciscoPsmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 1))
ciscoPsmMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 2))
cpsmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1))
cpsmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2))
class CpsmVirtNwType(TextualConvention, Integer32):
    description = 'The type of virtual network. vsan the virtual network is VSAN. vlan the virtual network is VLAN.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vsan", 1), ("vlan", 2))

class CpsmPortBindDevType(TextualConvention, Integer32):
    description = 'The mechanism used to identify the address of a device. mac the type of device address is MAC. nWwn the type of device address is Node WWN. pWwn the type of device address is Port WWN. sWwn the type of device address is Switch WWN. wildCard wild card entry (any device).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("mac", 1), ("nWwn", 2), ("pWwn", 3), ("sWwn", 4), ("wildCard", 5))

class CpsmPortBindSwPortType(TextualConvention, Integer32):
    description = "The mechanism to identify a switch port. fwwn the local switch port is identified by Fabric WWN(fWWN). intfIndex the local switch port is identified by ifIndex. The applicable ifType is 'fibreChannel(56)'. wildCard wild card (any switch port on local device). swwn any switch port on the switch represented by swwn."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fwwn", 1), ("intfIndex", 2), ("wildCard", 3), ("swwn", 4))

class CpsmDbActivate(TextualConvention, Integer32):
    description = 'Mechanism to activate/deactivate database. activate activate the database. activateWithAutoLearnOff activate the database and turn auto-learn off after activation. forceActivate activate the database and disregard errors during activation, if any. forceActivateWithAutoLearnOff activate the database and disregard errors during activation and turn auto-learn off after the activation. deactivate deactivate the database. noop no operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("activate", 1), ("activateWithAutoLearnOff", 2), ("forceActivate", 3), ("forceActivateWithAutoLearnOff", 4), ("deactivate", 5), ("noop", 6))

class CpsmActivateResult(TextualConvention, Integer32):
    description = 'The result of activation/deactivation of configuration database. success the outcome of activation/deactivation was successful. actFailNullDb the activation failed because an empty configuration database was being activated. actFailConflictDb the activation failed because there were conflicts seen between the configuration database and the active database. actFailSystemErr the activation failed because of a system error. actFailAutoLearnOn the activation failed because auto learn was on. deactFailNoActive the outcome of deactivation was a failure because there was no database which was active.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("success", 1), ("actFailNullDb", 2), ("actFailConflictDb", 3), ("actFailSystemErr", 4), ("actFailAutoLearnOn", 5), ("deactFailNoActive", 6))

class CpsmAutoLearnEnable(TextualConvention, Integer32):
    description = 'Specifies whether to enable/disable auto learn. on enable auto-learn. off disable auto-learn.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class CpsmClearStats(TextualConvention, Integer32):
    description = 'Specifies whether to clear the statistic counters. clear clear the counters. noop no operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("clear", 1), ("noop", 2))

class CpsmClearAutoLearnDb(TextualConvention, Integer32):
    description = 'Specifies how to clear auto-learn database. clearOnVsan clear auto-learn entries on the whole VSAN/VLAN. clearOnIntf clear auto-learn entries on a specified interface on a VSAN/VLAN. noop no operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("clearOnVsan", 1), ("clearOnIntf", 2), ("noop", 3))

class CpsmDiffDb(TextualConvention, Integer32):
    description = 'Specifes the database for difference operation. configDb configuration database to be compared with active database, with active database as the reference database. activeDb active database to be compared with configuration database, with configuration database as the reference database. noop no operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("configDb", 1), ("activeDb", 2), ("noop", 3))

class CpsmDiffReason(TextualConvention, Integer32):
    description = 'Specifies the reason for the difference. extra entry is present only in reference database. missing entry is not present in reference database. conflict entry is having a conflict between the reference database and the other database.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("extra", 1), ("missing", 2), ("conflict", 3))

class CpsmStatsCounter(TextualConvention, Unsigned32):
    description = 'Specifies a counter value which can be reset.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class CpsmViolationReasonCode(TextualConvention, Integer32):
    description = 'Indicates the reason for which a switch was denied entry in to the fabric due to enforced fabric bindings. unknown(1) - Unknown reason. noSwwn(2) - The WWN of the switch that has been denied entry was not present in the list of enforced fabric bindings on the local device. domIdMismatch(3) - The WWN of the switch that has been denied entry was present in the list of enforced fabric bindings on the local device, but the domain id of the device did not match the domain id that was present in the enforced fabric binding list. efmdDbMismatch(4) - The EFMD protocol encountered a database mismatch with the switch and hence it was denied entry. noRespFromRemote(5) - There was no response from the remote device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("noSwwn", 2), ("domIdMismatch", 3), ("efmdDbMismatch", 4), ("noRespFromRemote", 5))

cpsmPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1), )
if mibBuilder.loadTexts: cpsmPortBindTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindTable.setDescription("This table contains the set of all valid port bindings configured on the local device. A valid port binding consists of a pWWN/nWWN bound to a port on the local device. If a device Px is bound with an interface Fx on the local device, then Px can only FLOGI thru' Fx on the local device and not thru' any other interface and Fx will permit FLOGI only from Px. Wild-cards can be specified for either Px or Fx but not for both. The set of valid port bindings configured in this table should be activated by means of the cpsmPortBindActivateTable. When the activation takes place, the valid port binding entries are enforced and FLOGI from external devices to the local device will be subject to the enforced port bindings.")
cpsmPortBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindNwIndex"), (0, "CISCO-PSM-MIB", "cpsmPortBindIndex"))
if mibBuilder.loadTexts: cpsmPortBindEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNwType.setDescription('The type of virtual interface.')
cpsmPortBindNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNwIndex.setDescription('The id of the VSAN/VLAN according to the type specified in the corresponding instance of cpsmPortBindNwType.')
cpsmPortBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cpsmPortBindIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindIndex.setDescription('Uniquely identifies a valid port binding on a VSAN/VLAN.')
cpsmPortBindLoginDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 4), CpsmPortBindDevType().clone('pWwn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmPortBindLoginDevType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginDevType.setDescription('Specifies the format of the corresponding instance of cpsmPortBindLoginDev.')
cpsmPortBindLoginDev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmPortBindLoginDev.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginDev.setDescription("This object represents the logging-in device address. The interpretation of this object depends on the cpsmPortBindLoginDevType object. If the value of the corresponding instance of cpsmPortBindLoginDevType object is 'mac(1)', then this object contains a MAC address. If the value of the corresponding instance of cpsmPortBindLoginDevType object is 'nWwn(2)', then this object contains a Node WWN. If the value of the corresponding instance of cpsmPortBindLoginDevType object is 'pWwn(3)', then this object contains a Port WWN. If the value of the corresponding instance of cpsmPortBindLoginDevType object is 'sWwn(4)', then this object contains a Switch WWN. If the value of the corresponding instance of cpsmPortBindLoginDevType object is 'wildCard(5)', then it represents a wild-card entry and this object's value will be ignored. The wild-card represents any device. This object MUST be set to a valid value before or concurrently with setting the corresponding instance of cpsmPortBindRowStatus object to 'active'.")
cpsmPortBindLoginPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 6), CpsmPortBindSwPortType().clone('fwwn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmPortBindLoginPointType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginPointType.setDescription('Specifies the format of the corresponding instance of cpsmPortBindLoginPoint.')
cpsmPortBindLoginPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmPortBindLoginPoint.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginPoint.setDescription("This object represents the address of the port on the local device thru' which the device specified by the corresponding instance of cpsmPortBindLoginDev can FLOGI. The interpretation of this object depends on the value of the corresponding instance of cpsmPortBindLoginPointType. If the value of the corresponding instance of cpsmPortBindLoginPointType is 'fwwn(1)', then this object contains the fabric WWN of a port on the local device. If the value of the corresponding instance of cpsmPortBindLoginPointType is 'intfIndex(2)', then a port on the local device is being represented by it's interface index (ifIndex) and this object contains the ifIndex. If the value of the corresponding instance of cpsmPortBindLoginPointType is 'wildCard(3)', then it represents a wild-card entry and the value of this object is ignored. The wild-card represents any port on the local device. If the value of the corresponding instance of cpsmPortBindLoginPointType is 'swwn(4)', then this object contains the WWN of a switch in the fabric. This represents any port on that switch. This object MUST be set to a valid value before or concurrently with setting the corresponding instance of cpsmPortBindRowStatus object to 'active'.")
cpsmPortBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmPortBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindRowStatus.setDescription('The status of this conceptual row.')
cpsmPortBindActivateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 2), )
if mibBuilder.loadTexts: cpsmPortBindActivateTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindActivateTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries reflect the state of activation/deactivation of the valid port bindings on the corresponding VSAN/VLAN.')
cpsmPortBindActivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindNwIndex"))
if mibBuilder.loadTexts: cpsmPortBindActivateEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindActivateEntry.setDescription('An entry (conceptual row) in this table. The recommended mechanism for activation is as follows: - turn off auto-learn on the required VSAN/VLAN by means of cpsmPortBindAutoLearnEnable object in the cpsmPortBindAutoLearnTable. - copy the enforced port bindings to the configuration port binding (cpsmPortBindTable) by means of the cpsmPortBindCopyTable from the cpsmPortBindEnfTable. - activate the configuration port binding using this table.')
cpsmPortBindActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 2, 1, 1), CpsmDbActivate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindActivate.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindActivate.setDescription("Setting this object to 'activate(1)', will result in the valid port bindings on this VSAN/VLAN being activated and the set of port bindings that have been activated will be copied to the cpsmPortBindEnfTable. Setting this object to 'activateWithAutoLearnOff(2)', will result in the valid port bindings on this VSAN/VLAN being activated and copied to the cpsmPortBindEnfTable and will also result in auto learn being turned off on this VSAN/VLAN, once the activation is complete. By default, auto learn will be turned 'on' on a VSAN/VLAN after activation. Before activation is attempted, auto-learn should be off. Setting this object to 'forceActivate(3)', will result in forced activation, even if there are errors during activation and the activated port bindings will be copied to the cpsmPortBindEnfTable. Setting this object to 'forceActivateWithAutoLearnOff(4)', will result in forced activation along with turning auto learn off after activation and the activated port bindings will be copied to the cpsmPortBindEnfTable. Setting this object to 'deactivate(5)', will result in deactivation of currently activated valid port bindings (if any), on this VSAN/VLAN. Currently active entries (if any), which would have been present in the cpsmPortBindEnfTable, will be removed. Setting this object to 'noop(6)', results in no action. The value of this object when read is always 'noop(6)'. Activation will not be allowed on a VSAN/VLAN if auto-learn is enabled on that VSAN/VLAN.")
cpsmPortBindResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 2, 1, 2), CpsmActivateResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindResult.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindResult.setDescription('This object indicates the outcome of the most recent activation/deactivation.')
cpsmPortBindLastActTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLastActTime.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLastActTime.setDescription('The sysUpTime at which the valid port bindings on this VLAN/VSAN were last activated. If the last activation took place prior to the last re-initialization of the agent, then this object will contain a zero value.')
cpsmPortBindActState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindActState.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindActState.setDescription("The state of activation on this VSAN/VLAN. If the value of this object is 'true', then an activation has been attempted as the most recent operation on this VSAN/VLAN. If the value of this object is 'false', then an activation has not been attempted as the most recent operation on this VSAN/VLAN.")
cpsmFabricBindTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3), )
if mibBuilder.loadTexts: cpsmFabricBindTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindTable.setDescription('This table contains the set of all valid fabric bindings configured on the local device. A Fabric binding is specified as a switch WWN along with an insistent domain id. This set of switch WWNs represent the set of all switches that can be part of the fabric. Switches not part of this set will not be allowed to be part of the fabric. The set of valid fabric bindings configured in this table should be activated by means of the cpsmFabricBindActivateTable.')
cpsmFabricBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindNwIndex"), (0, "CISCO-PSM-MIB", "cpsmFabricBindIndex"))
if mibBuilder.loadTexts: cpsmFabricBindEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNwType.setDescription('The type of virtual interface.')
cpsmFabricBindNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNwIndex.setDescription('The id of the VSAN/VLAN according to the type specified in the corresponding instance of cpsmFabricBindNwType.')
cpsmFabricBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cpsmFabricBindIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindIndex.setDescription('Uniquely identifies a valid fabric binding on a VSAN/VLAN.')
cpsmFabricBindSwitchWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmFabricBindSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindSwitchWwn.setDescription("This object specifies the switch WWN of a switch that can be part of the fabric. This object MUST be set to a valid value before or concurrently with setting the corresponding instance of cpsmFabricBindRowStatus object to 'active'. This object cannot be modified while the corresponding value of cpsmFabricBindRowStatus object is 'active'.")
cpsmFabricBindDomId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1, 5), DomainId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmFabricBindDomId.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDomId.setDescription("Specifies an insistent domain id. This object MUST be set to a valid value before or concurrently with setting the corresponding instance of cpsmFabricBindRowStatus object to 'active'. This object cannot be modified while the corresponding value of cpsmFabricBindRowStatus object is 'active'. The switch specified in the corresponding instance of cpsmFabricBindSwitchWwn will be allowed to be part of the fabric, only if it has a domain id equal to the value of this object. Attempting to pair a domain id with more than one switch or a single switch with more than one domain id, results in error.")
cpsmFabricBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsmFabricBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindRowStatus.setDescription('The status of this conceptual row.')
cpsmFabricBindActivateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 4), )
if mibBuilder.loadTexts: cpsmFabricBindActivateTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindActivateTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries reflect the state of activation/deactivation of the valid fabric bindings on the corresponding VSAN/VLAN. Entries can get into this table or be deleted from this table only by means of explicit activation/deactivation.')
cpsmFabricBindActivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindNwIndex"))
if mibBuilder.loadTexts: cpsmFabricBindActivateEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindActivateEntry.setDescription('An entry (conceptual row) in this table. The recommended mechanism for activation is as follows: - copy the enforced fabric bindings to the configuration fabric binding (cpsmFabricBindTable) by means of the cpsmFabricBindCopyTable. - activate the configuration fabric binding using this table.')
cpsmFabricBindActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 4, 1, 1), CpsmDbActivate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindActivate.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindActivate.setDescription("Setting this object to 'activate(1)', will result in the valid fabric bindings on this VSAN/VLAN being activated and the set of fabric bindings that have been activated will be copied to the cpsmFabricBindEnfTable. Setting this object to 'activateWithAutoLearnOff(2)', will result in the valid fabric bindings on this VSAN/VLAN being activated and copied to the cpsmFabricBindEnfTable and will also result in auto learn being turned off on this VSAN/VLAN, once the activation is complete. By default, auto learn will be turned 'on' on a VSAN/VLAN after activation. Before activation is attempted, auto-learn should be off. Setting this object to 'forceActivate(3)', will result in forced activation, even if there are errors during activation and the activated fabric bindings will be copied to the cpsmFabricBindEnfTable. Setting this object to 'forceActivateWithAutoLearnOff(4)', will result in forced activation along with turning auto learn off after activation and the activated fabric bindings will be copied to the cpsmFabricBindEnfTable. Setting this object to 'deactivate(5)', will result in deactivation of currently activated fabric bindings (if any), on this VSAN/VLAN. Currently active entries (if any), which would have been present in the cpsmFabricBindEnfTable, will be removed. Setting this object to 'noop(6), results in no action. The value of this object when read is always 'noop(6)'.")
cpsmFabricBindResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 4, 1, 2), CpsmActivateResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindResult.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindResult.setDescription('This object indicates the outcome of the most recent activation/deactivation.')
cpsmFabricBindLastActTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindLastActTime.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindLastActTime.setDescription('The sysUpTime at which the valid fabric bindings on this VLAN/VSAN were last activated. If the last activation took place prior to the last re-initialization of the agent, then this object will contain a zero value.')
cpsmFabricBindActState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindActState.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindActState.setDescription("The state of activation on this VSAN/VLAN. If the value of this object is 'true', then an activation has been attempted as the most recent operation on this VSAN/VLAN. If the value of this object is 'false', then an activation has not been attempted as the most recent operation on this VSAN/VLAN.")
cpsmPortBindCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 5), )
if mibBuilder.loadTexts: cpsmPortBindCopyTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindCopyTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries help in copying the enforced (active) port binding database (cpsmPortBindEnfTable) to the configuration port binding database (cpsmPortBindTable) on a VSAN/VLAN. This copy operation overwrites the existing configuration port binding database.')
cpsmPortBindCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindNwIndex"))
if mibBuilder.loadTexts: cpsmPortBindCopyEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindCopyEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindCopyActToConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copy", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindCopyActToConfig.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindCopyActToConfig.setDescription("This object when set to 'copy(1)', results in the active (enforced) port binding database to be copied on to the configuration port binding database on this VSAN/VLAN. Note that the learned entries are also copied. No action is taken if this object is set to 'noop(2)'. The value of this object when read is always 'noop'.")
cpsmPortBindLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLastChangeTime.setDescription('The value of sysUpTime when the last change was made to the configuration port binding database on this VSAN/VLAN. If it has not been modified since the last re-initialization of the agent, then this object will contain a zero value.')
cpsmFabricBindCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 6), )
if mibBuilder.loadTexts: cpsmFabricBindCopyTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindCopyTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries help in copying the enforced (active) fabric binding database (cpsmFabricBindEnfTable) to the configuration fabric binding database (cpsmFabricBindTable) on a VSAN/VLAN. This copy operation overwrites the existing configuration fabric binding database.')
cpsmFabricBindCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindNwIndex"))
if mibBuilder.loadTexts: cpsmFabricBindCopyEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindCopyEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindCopyActToConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copy", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindCopyActToConfig.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindCopyActToConfig.setDescription("This object when set to 'copy(1)', results in the enforced fabric binding database to be copied on to the configuration fabric binding database on this VSAN/VLAN. Note that the learned entries are also copied. No action is taken if this object is set to 'noop(2)'. The value of this object when read is always 'noop'.")
cpsmFabricBindLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindLastChangeTime.setDescription('The value of sysUpTime when the last change was made to the configuration fabric binding database on this VSAN/VLAN. If it has not been modified since the last re-initialization of the agent, then this object will contain a zero value.')
cpsmPortBindEnfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7), )
if mibBuilder.loadTexts: cpsmPortBindEnfTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfTable.setDescription('This table contains information on all currently enforced port bindings on all VSANs/VLANs on the local device. The enforced set of port bindings is the set of valid port bindings copied from the configuration port binding database (cpsmPortBindTable) at the time they were activated. These entries cannot be modified. The learnt entries are also a part of this table. Entries can get into this table or be deleted from this table only by means of explicit activation/deactivation. Note that this table will be empty when no valid port bindings have been activated.')
cpsmPortBindEnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindEnfNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindEnfNwIndex"), (0, "CISCO-PSM-MIB", "cpsmPortBindEnfIndex"))
if mibBuilder.loadTexts: cpsmPortBindEnfEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindEnfNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindEnfNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfNwType.setDescription('The type of virtual interface.')
cpsmPortBindEnfNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindEnfNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfNwIndex.setDescription('The id of the VSAN/VLAN according to the type specified in the corresponding instance of cpsmPortBindEnfNwType.')
cpsmPortBindEnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cpsmPortBindEnfIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfIndex.setDescription('Uniquely identifies a valid port binding on a VSAN/VLAN.')
cpsmPortBindEnfLoginDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 4), CpsmPortBindDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindEnfLoginDevType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfLoginDevType.setDescription('This object identifies the format of the corresponding instance of cpsmPortBindEnfLoginDev object.')
cpsmPortBindEnfLoginDev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindEnfLoginDev.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfLoginDev.setDescription('This object represents the logging in device address. This object was copied from the cpsmPortBindLoginDev object in the cpsmPortBindTable at the time when the currently active port bindings were activated.')
cpsmPortBindEnfLoginPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 6), CpsmPortBindSwPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindEnfLoginPointType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfLoginPointType.setDescription('Specifies the format of the corresponding instance of cpsmPortBindEnfLoginPoint.')
cpsmPortBindEnfLoginPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindEnfLoginPoint.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfLoginPoint.setDescription('This object represents the address of a port on the local device. This object was copied from the cpsmPortBindLoginPoint object in the cpsmPortBindTable at the time when the currently active port bindings were activated.')
cpsmPortBindEnfIsLearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindEnfIsLearnt.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindEnfIsLearnt.setDescription("This object indicates if this entry is a learnt entry or not. If the value of this object is 'true', then this is a learnt entry. If the value of this object is 'false', then it is not a learnt entry.")
cpsmFabricBindEnfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8), )
if mibBuilder.loadTexts: cpsmFabricBindEnfTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfTable.setDescription('This table contains information on all currently enforced fabric bindings on all VSANs/VLANs on the local device. The enforced set of fabric bindings is the set of fabric bindings copied from the full fabric binding database (cpsmFabricBindTable) at the time they were activated. These entries cannot be modified. The learnt entries are also part of this table. Entries can get into this table or be deleted from this table only by means of explicit activation/deactivation. Note that this table will be empty when no valid fabric bindings have been activated.')
cpsmFabricBindEnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindEnfNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindEnfNwIndex"), (0, "CISCO-PSM-MIB", "cpsmFabricBindEnfIndex"))
if mibBuilder.loadTexts: cpsmFabricBindEnfEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindEnfNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindEnfNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfNwType.setDescription('The type of virtual interface.')
cpsmFabricBindEnfNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindEnfNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfNwIndex.setDescription('The id of the VSAN/VLAN according to the type specified in the corresponding instance of cpsmFabricBindEnfNwType.')
cpsmFabricBindEnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cpsmFabricBindEnfIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfIndex.setDescription('Uniquely identifies a valid fabric binding on a VSAN/VLAN.')
cpsmFabricBindEnfSwitchWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindEnfSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfSwitchWwn.setDescription('This object specifies the switch WWN of a switch that can be part of the fabric. This object was copied from the cpsmFabricBindSwitchWwn object in the cpsmFabricBindTable at the time when the currently active fabric bindings were activated.')
cpsmFabricBindEnfDomId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1, 5), DomainId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindEnfDomId.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfDomId.setDescription('This object specifies the insistent domain id of the switch represented by the corresponding instance of cpsmFabricBindEnfSwitchWwn. This object was copied from the cpsmFabricBindDomId object in the cpsmFabricBindTable at the time when the currently active fabric bindings were activated.')
cpsmFabricBindEnfIsLearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 8, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindEnfIsLearnt.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindEnfIsLearnt.setDescription("This object indicates if this entry is a learnt entry or not. If the value of this object is 'true', then this is a learnt entry. If the value of this object is 'false', then it is not a learnt entry.")
cpsmPortBindAutoLearnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 9), )
if mibBuilder.loadTexts: cpsmPortBindAutoLearnTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindAutoLearnTable.setDescription('This table contains information on the auto learn policy for valid port bindings on all VSANs/VLANs on the local device.')
cpsmPortBindAutoLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindAutoLearnIndexType"), (0, "CISCO-PSM-MIB", "cpsmPortBindAutoLearnIndex"))
if mibBuilder.loadTexts: cpsmPortBindAutoLearnEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindAutoLearnEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindAutoLearnIndexType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 9, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindAutoLearnIndexType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindAutoLearnIndexType.setDescription('This object indicates the type of virtual interface.')
cpsmPortBindAutoLearnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindAutoLearnIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindAutoLearnIndex.setDescription('The id of the VSAN/VLAN for which auto learning is being enabled.')
cpsmPortBindAutoLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 9, 1, 3), CpsmAutoLearnEnable().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindAutoLearnEnable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindAutoLearnEnable.setDescription("This object helps to 'learn' the valid port binding configuration of devices/ports logged into the local device on all its ports and populate the above enforced port binding table (cpsmPortBindEnfTable) with the same. This mechanism of 'learning' the configuration of devices/ports logged into the local device over a period of time and populating the configuration is a convenience mechanism for users. If this object is set to 'on(1)' on a particular VSAN/VLAN, all subsequent logins (FLOGIs) on that VSAN/VLAN will be populated in the enforced port binding database, provided it is not in conflict with existing enforced port bindings on that VSAN/VLAN. When this object is set to 'off(2)', the mechanism of learning is stopped. The learned entries will however be in the enforced port binding database.")
cpsmFabricBindAutoLearnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 10), )
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnTable.setDescription('This table contains information on the auto learn policy for valid fabric bindings on all VSANs/VLANs on the local device.')
cpsmFabricBindAutoLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 10, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindAutoLearnIndexType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindAutoLearnIndex"))
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindAutoLearnIndexType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 10, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnIndexType.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnIndexType.setDescription('This object indicates the type of virtual interface.')
cpsmFabricBindAutoLearnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnIndex.setDescription('The id of the VSAN/VLAN for which auto learning is being enabled.')
cpsmFabricBindAutoLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 10, 1, 3), CpsmAutoLearnEnable().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindAutoLearnEnable.setDescription("This object helps to 'learn' the valid fabric binding configuration of devices logged into the fabric thru' the ports on the local device and populate the above enforced fabric binding table (cpsmFabricBindEnfTable) with the same. This mechanism of 'learning' the configuration of devices logged into the fabric over a period of time and populating the enforced fabric binding table is a convenience mechanism for users. If this object is set to 'on(1)' on a particular VSAN/VLAN, all subsequent attempts to join the fabric on some port on the local device on that VSAN/VLAN will be populated in the enforced fabric binding database, provided it is not in conflict with existing enforced fabric bindings on that VSAN/VLAN. When this object is set to 'off(2)', the mechanism of learning is stopped. The learned entries however will be in the enforced fabric binding database.")
cpsmPortBindClearTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11), )
if mibBuilder.loadTexts: cpsmPortBindClearTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries help in clearing port bind statistics and/or the port bind auto-learnt entries on a VSAN/VLAN which are in cpsmPortBindStatsTable and cpsmPortBindEnfTable respectively.')
cpsmPortBindClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindClearNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindClearNwIndex"))
if mibBuilder.loadTexts: cpsmPortBindClearEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindClearNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindClearNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearNwType.setDescription('This object indicates whether the corresponding instance of cpsmPortBindClearNwIndex object contains a VSAN id or VLAN id.')
cpsmPortBindClearNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindClearNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmPortBindClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11, 1, 3), CpsmClearStats()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindClearStats.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearStats.setDescription("This object when set to 'clear(1)', results in port bind statistic counters being cleared on this VSAN/VLAN. No action is taken if this object is set to 'noop(2)'. The value of this object when read is always 'noop'.")
cpsmPortBindClearAutoLearnDb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11, 1, 4), CpsmClearAutoLearnDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindClearAutoLearnDb.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearAutoLearnDb.setDescription("This object when set to 'clearOnVsan(1)', results in port bind auto-learnt entries being cleared on this VSAN/VLAN. This object when set to 'clearOnIntf(2)', results in port bind auto-learnt entries being cleared on the interface specified by the corresponding instance of cpsmPortBindClearAutoLearnIntf on this VSAN/VLAN. No action is taken if this object is set to 'noop'. The value of this object when read is always 'noop'.")
cpsmPortBindClearAutoLearnIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 11, 1, 5), PortMemberList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindClearAutoLearnIntf.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindClearAutoLearnIntf.setDescription('This object specifies the interface(s) on which the port bind auto-learnt entries need to be cleared. The value of this object when read is always the zero-length string.')
cpsmFabricBindClearTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12), )
if mibBuilder.loadTexts: cpsmFabricBindClearTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindClearTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries help in clearing fabric bind statistics and/or the fabric bind auto-learnt entries on a VSAN/VLAN which are in cpsmFabricBindStatsTable and cpsmFabricBindEnfTable respectively.')
cpsmFabricBindClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindClearNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindClearNwIndex"))
if mibBuilder.loadTexts: cpsmFabricBindClearEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindClearEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindClearNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindClearNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindClearNwType.setDescription('This object indicates whether the corresponding instance of cpsmFabricBindClearNwIndex object contains a VSAN id or VLAN id.')
cpsmFabricBindClearNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindClearNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindClearNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmFabricBindClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12, 1, 3), CpsmClearStats()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindClearStats.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindClearStats.setDescription("This object when set to 'clear(1)', results in fabric bind statistic counters being cleared on this VSAN/VLAN. No action is taken if this object is set to 'noop(2)'. The value of this object when read is always 'noop'.")
cpsmFabricBindClearAutoLearnDb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12, 1, 4), CpsmClearAutoLearnDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindClearAutoLearnDb.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindClearAutoLearnDb.setDescription("This object when set to 'clearOnVsan(1)', results in fabric bind auto-learnt entries being cleared on this VSAN/VLAN. No action is taken if this object is set to 'clearOnIntf(2)' or 'noop'. The value of this object when read is always 'noop'.")
cpsmFabricBindClearAutoLearnIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 12, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindClearAutoLearnIntf.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindClearAutoLearnIntf.setDescription('This object specifies the interface on which the fabric bind auto learnt entries need to be cleared.')
cpsmPortBindDiffConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 13), )
if mibBuilder.loadTexts: cpsmPortBindDiffConfigTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffConfigTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries help in comparing the port bind active/configuration database with configuration/active database on a VSAN/VLAN.')
cpsmPortBindDiffConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 13, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindDiffConfigNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindDiffConfigNwIndex"))
if mibBuilder.loadTexts: cpsmPortBindDiffConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffConfigEntry.setDescription('An entry (conceptual row) in this table. The user needs to configure the required type of difference on the appropriate VSAN/VLAN. The results of the difference operation will be present in the cpsmPortBindDiffTable.')
cpsmPortBindDiffConfigNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 13, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindDiffConfigNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffConfigNwType.setDescription('This object indicates whether the corresponding instance of cpsmPortBindDiffConfigNwIndex object contains a VSAN id or VLAN id.')
cpsmPortBindDiffConfigNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindDiffConfigNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffConfigNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmPortBindDiffConfigDb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 13, 1, 3), CpsmDiffDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmPortBindDiffConfigDb.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffConfigDb.setDescription("This object specifies the database for the comparison. This object when set to 'configDb(1)' compares the configuration database with respect to active database on this VSAN/VLAN. So, the active database will be the reference database and the results of the difference operation will be with respect to the active database. This object when set to 'activeDb(2)' compares the active database with respect to configuration database on this VSAN/VLAN. So, the configuration database will be the reference database and the results of the difference operation will be with respect to the configuration database. No action is taken when this object is set to 'noop(3)'. The value of this object when read is always 'noop'.")
cpsmPortBindDiffTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14), )
if mibBuilder.loadTexts: cpsmPortBindDiffTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffTable.setDescription('This table contains the results of the difference operation configured by means of the cpsmPortBindDiffConfigTable. This table will contain the results of the latest difference operation that has been configured. If no difference operation has been configured or if there are no differences between the databases being compared, this table will be empty.')
cpsmPortBindDiffEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindDiffNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindDiffNwIndex"), (0, "CISCO-PSM-MIB", "cpsmPortBindDiffIndex"))
if mibBuilder.loadTexts: cpsmPortBindDiffEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindDiffNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindDiffNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffNwType.setDescription('This object indicates whether the corresponding instance of cpsmPortBindDiffNwIndex object contains a VSAN id or VLAN id.')
cpsmPortBindDiffNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindDiffNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmPortBindDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cpsmPortBindDiffIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffIndex.setDescription('The index of this entry. This represents the index of a port binding on a VSAN/VLAN.')
cpsmPortBindDiffReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 4), CpsmDiffReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindDiffReason.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffReason.setDescription('This object indicates the reason for the difference between the databases being compared, for this entry.')
cpsmPortBindDiffLoginDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 5), CpsmPortBindDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindDiffLoginDevType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffLoginDevType.setDescription('This object identifies the format of the corresponding instance of cpsmPortBindDiffLoginDev object.')
cpsmPortBindDiffLoginDev = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindDiffLoginDev.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffLoginDev.setDescription('This object represents the logging in device address. This object was copied either from the cpsmPortBindLoginDev object in the cpsmPortBindTable or from the cpsmPortBindEnfLoginIdev object in the cpsmPortBindEnfTable at the time when the difference operation was done.')
cpsmPortBindDiffLoginPointType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 7), CpsmPortBindSwPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindDiffLoginPointType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffLoginPointType.setDescription('Specifies the format of the corresponding instance of cpsmPortBindDiffLoginPoint.')
cpsmPortBindDiffLoginPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 14, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindDiffLoginPoint.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDiffLoginPoint.setDescription('This object represents the address of a port on the local device. This object was copied either from the cpsmPortBindLoginPoint object in the cpsmPortBindTable or from the cpsmPortBindEnfLoginPoint object in the cpsmPortBindEnfTable at the time when the difference operation was done.')
cpsmFabricBindDiffConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 15), )
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigTable.setDescription('This table contains atmost one entry per VSAN/VLAN that is configured. These entries help in comparing the fabric bind active/configuration database with configuration/active database on a VSAN/VLAN.')
cpsmFabricBindDiffConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 15, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindDiffConfigNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindDiffConfigNwIndex"))
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigEntry.setDescription('An entry (conceptual row) in this table. The user needs to configure the required type of difference on the appropriate VSAN/VLAN. The results of the difference operation will be present in the cpsmFabricBindDiffTable.')
cpsmFabricBindDiffConfigNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 15, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigNwType.setDescription('This object indicates whether the corresponding instance of cpsmFabricBindDiffConfigNwIndex object contains a VSAN id or VLAN id.')
cpsmFabricBindDiffConfigNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmFabricBindDiffConfigDb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 15, 1, 3), CpsmDiffDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigDb.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffConfigDb.setDescription("This object specifies the database for the comparison. This object when set to 'configDb(1)' compares the fabric bind configuration database with respect to active database on this VSAN/VLAN. So, the active database will be the reference database and the results of the difference operation will be with respect to the active database. This object when set to 'activeDb(2)' compares the fabric bind active database with respect to configuration database on this VSAN/VLAN. So, the configuration database will be the reference database and the results of the difference operation will be with respect to the configuration database. No action is taken when this object is set to 'noop(3)'. The value of this object when read is always 'noop'.")
cpsmFabricBindDiffTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16), )
if mibBuilder.loadTexts: cpsmFabricBindDiffTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffTable.setDescription('This table contains the results of the difference operation configured by means of the cpsmFabricBindDiffConfigTable. This table will contain the results of the latest difference operation that has been configured. If no difference operation has been configured or if there are no differences between the databases being compared, this table will be empty.')
cpsmFabricBindDiffEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindDiffNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindDiffNwIndex"), (0, "CISCO-PSM-MIB", "cpsmFabricBindDiffIndex"))
if mibBuilder.loadTexts: cpsmFabricBindDiffEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindDiffNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindDiffNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffNwType.setDescription('This object indicates whether the corresponding instance of cpsmFabricBindDiffNwIndex object contains a VSAN id or VLAN id.')
cpsmFabricBindDiffNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindDiffNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmFabricBindDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: cpsmFabricBindDiffIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffIndex.setDescription('The index of this entry. This represents the index of a fabric binding on a VSAN/VLAN.')
cpsmFabricBindDiffReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1, 4), CpsmDiffReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDiffReason.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffReason.setDescription('This object indicates the reason for the difference between the databases being compared, for this entry.')
cpsmFabricBindDiffSwitchWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDiffSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffSwitchWwn.setDescription('This object specifies the WWN of a switch that can be part of the fabric. This object was copied either from the cpsmFabricBindSwitchWwn object in the cpsmFabricBindTable or from the cpsmFabricBindEnfSwitchWwn object in the cpsmFabricBindEnfTable at the time when the difference operation was done.')
cpsmFabricBindDiffDomId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 16, 1, 6), DomainId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDiffDomId.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDiffDomId.setDescription('This object specifies the insistent domain id of the switch represented by the corresponding instance of cpsmFabricBindDiffSwitchWwn. This object was copied either from the cpsmFabricBindDomId object in the cpsmFabricBindTable or from the cpsmFabricBindEnfDomId object in the cpsmFabricBindEnfTable when the difference operation was done.')
cpsmPortBindStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 1), )
if mibBuilder.loadTexts: cpsmPortBindStatsTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindStatsTable.setDescription('This table contains statistic counters maintained on a per VSAN/VLAN basis on the local device for enforced port bindings.')
cpsmPortBindStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindVsanVlanType"), (0, "CISCO-PSM-MIB", "cpsmPortBindVsanVlanIndex"))
if mibBuilder.loadTexts: cpsmPortBindStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindStatsEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindVsanVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 1, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindVsanVlanType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindVsanVlanType.setDescription('This object indicates whether the corresponding instance of cpsmPortBindVsanVlanIndex object contains a VSAN id or VLAN id.')
cpsmPortBindVsanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindVsanVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindVsanVlanIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmPortBindAllowedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 1, 1, 3), CpsmStatsCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindAllowedLogins.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindAllowedLogins.setDescription('The number of FLOGI requests that have been allowed on this VSAN/VLAN.')
cpsmPortBindDeniedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 1, 1, 4), CpsmStatsCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindDeniedLogins.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindDeniedLogins.setDescription('The number of FLOGI requests that have been denied on this VSAN/VLAN.')
cpsmFabricBindStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 2), )
if mibBuilder.loadTexts: cpsmFabricBindStatsTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindStatsTable.setDescription('This table contains statistic counters maintained on a per VSAN/VLAN basis on the local device for enforced fabric bindings.')
cpsmFabricBindStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindVsanVlanType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindVsanVlanIndex"))
if mibBuilder.loadTexts: cpsmFabricBindStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindStatsEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindVsanVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 2, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindVsanVlanType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindVsanVlanType.setDescription('This object indicates whether the corresponding instance of cpsmFabricBindVsanVlanIndex object contains a VSAN id or VLAN id.')
cpsmFabricBindVsanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindVsanVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindVsanVlanIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmFabricBindAllowedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 2, 1, 3), CpsmStatsCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindAllowedReqs.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindAllowedReqs.setDescription('The number of requests from switches to become part of the fabric that have been allowed on this VSAN/VLAN.')
cpsmFabricBindDeniedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 2, 1, 4), CpsmStatsCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDeniedReqs.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDeniedReqs.setDescription('The number of requests from switches to become part of the fabric that have been denied on this VSAN/VLAN.')
cpsmPortBindViolationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3), )
if mibBuilder.loadTexts: cpsmPortBindViolationTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindViolationTable.setDescription('This table contains information on atmost the last 100 login violations that have been detected on the local device for enforced port bindings. When the number of such entries exceeds 100, then there is a wrap-around that takes place and the entries get over-written starting from the first entry.')
cpsmPortBindViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindViolationNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindViolationNwIndex"), (0, "CISCO-PSM-MIB", "cpsmPortBindViolationIndex"))
if mibBuilder.loadTexts: cpsmPortBindViolationEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindViolationEntry.setDescription('An entry (conceptual row) in this table.')
cpsmPortBindViolationNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindViolationNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindViolationNwType.setDescription('This object indicates whether the corresponding instance of cpsmPortBindViolationNwIndex object contains a VSAN id or VLAN id.')
cpsmPortBindViolationNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindViolationNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindViolationNwIndex.setDescription('The VSAN/VLAN id for this entry.')
cpsmPortBindViolationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cpsmPortBindViolationIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindViolationIndex.setDescription('The index of this entry.')
cpsmPortBindLoginPwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 4), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginPwwn.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginPwwn.setDescription("The pWWN of the device that was denied FLOGI on one of the local device's ports.")
cpsmPortBindLoginNwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 5), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginNwwn.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginNwwn.setDescription("The nWWN of the device that was denied FLOGI on one of the local device's ports.")
cpsmPortBindLoginSwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 6), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginSwwn.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginSwwn.setDescription("The sWWN of the device (if the device happens to be a switch), that was denied entry on one of the local device's ports. If the device is a switch, then the corresponding instances of cpsmPortBindLoginNwwn and cpsmPortBindLoginPwwn will contain zero-length strings.")
cpsmPortBindLoginPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 7), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginPort.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginPort.setDescription('The fWWN of the port on the local device where the login was denied.')
cpsmPortBindLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginTime.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginTime.setDescription('The sysUpTime at which the login denial took place.')
cpsmPortBindLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginCount.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginCount.setDescription('The number of times this particular pWWN/nWWN or sWWN has been denied login on this particular local interface.')
cpsmPortBindLoginIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 3, 1, 10), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindLoginIntf.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindLoginIntf.setDescription('The ifIndex of the port on the local device where the login was denied.')
cpsmFabricBindViolationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4), )
if mibBuilder.loadTexts: cpsmFabricBindViolationTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindViolationTable.setDescription('This table contains information on atmost the last 100 violations that have been detected on the local device for enforced fabric bindings. When the number of such entries exceeds 100, then there is a wrap-around that takes place and the entries get over-written starting from the first entry.')
cpsmFabricBindViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindViolationIndex"))
if mibBuilder.loadTexts: cpsmFabricBindViolationEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindViolationEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindViolationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cpsmFabricBindViolationIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindViolationIndex.setDescription('The index of this entry.')
cpsmFabricBindSwwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindSwwn.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindSwwn.setDescription("The sWWN (switch WWN) of the device that was denied entry into the fabric on one of the local device's ports.")
cpsmFabricBindLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4, 1, 3), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindLocalPort.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindLocalPort.setDescription('The fWWN of the port on the local device where the denial took place.')
cpsmFabricBindDenialTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDenialTime.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindDenialTime.setDescription('The sysUpTime at which the denial took place.')
cpsmFabricBindLocalIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 4, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindLocalIntf.setStatus('deprecated')
if mibBuilder.loadTexts: cpsmFabricBindLocalIntf.setDescription('The ifIndex of the port on the local device where the denial took place.')
cpsmFabricBindViolationNewTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5), )
if mibBuilder.loadTexts: cpsmFabricBindViolationNewTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindViolationNewTable.setDescription('This table contains information on atmost the last 100 violations that have been detected on the local device for enforced fabric bindings. When the number of such entries exceeds 100, then there is a wrap-around that takes place and the entries get over-written starting from the first entry.')
cpsmFabricBindViolationNewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindViolationNwTypeR1"), (0, "CISCO-PSM-MIB", "cpsmFabricBindViolationNwIndexR1"), (0, "CISCO-PSM-MIB", "cpsmFabricBindViolationIndexR1"))
if mibBuilder.loadTexts: cpsmFabricBindViolationNewEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindViolationNewEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindViolationNwTypeR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindViolationNwTypeR1.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindViolationNwTypeR1.setDescription('This object indicates whether the corresponding instance of cpsmFabricBindViolationNwIndexR1 object contains a VSAN id or VLAN id.')
cpsmFabricBindViolationNwIndexR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindViolationNwIndexR1.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindViolationNwIndexR1.setDescription('The VSAN/VLAN id for this entry.')
cpsmFabricBindViolationIndexR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: cpsmFabricBindViolationIndexR1.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindViolationIndexR1.setDescription('The index of this entry.')
cpsmFabricBindSwwnR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 4), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindSwwnR1.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindSwwnR1.setDescription("The sWWN (switch WWN) of the device that was denied entry into the fabric on one of the local device's ports.")
cpsmFabricBindDenialTimeR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDenialTimeR1.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDenialTimeR1.setDescription('The sysUpTime at which the denial took place.')
cpsmFabricBindDenialCountR1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDenialCountR1.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDenialCountR1.setDescription("The number of times this switch has been denied entry into the fabric on one of the local device's ports.")
cpsmFabricBindDenialDomId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 7), DomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDenialDomId.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDenialDomId.setDescription("The domain id of the device that was denied entry into the fabric on one of the local device's ports. A value of zero indicates that the switch WWN of the device was not present in the enforced fabric bindings.")
cpsmFabricBindDenialReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 5, 1, 8), CpsmViolationReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindDenialReasonCode.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindDenialReasonCode.setDescription("The reason for which the device was denied entry into the fabric on one of the local device's ports.")
cpsmEfmdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6), )
if mibBuilder.loadTexts: cpsmEfmdStatsTable.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdStatsTable.setDescription('This table contains the EFMD protocol statistics on a per VSAN basis.')
cpsmEfmdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: cpsmEfmdStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdStatsEntry.setDescription('An entry (conceptual row) in this table.')
cpsmEfmdTxMergeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdTxMergeReqs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdTxMergeReqs.setDescription('The number of EFMD Merge Requests transmitted on this VSAN by the local device.')
cpsmEfmdRxMergeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdRxMergeReqs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdRxMergeReqs.setDescription('The number of EFMD Merge Requests received on this VSAN by the local device.')
cpsmEfmdTxMergeAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdTxMergeAccs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdTxMergeAccs.setDescription('The number of EFMD Merge Accepts transmitted on this VSAN by the local device.')
cpsmEfmdRxMergeAccs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdRxMergeAccs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdRxMergeAccs.setDescription('The number of EFMD Merge Accepts received on this VSAN by the local device.')
cpsmEfmdTxMergeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdTxMergeRejs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdTxMergeRejs.setDescription('The number of EFMD Merge Rejects transmitted on this VSAN by the local device.')
cpsmEfmdRxMergeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdRxMergeRejs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdRxMergeRejs.setDescription('The number of EFMD Merge Rejects received on this VSAN by the local device.')
cpsmEfmdTxMergeBusys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdTxMergeBusys.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdTxMergeBusys.setDescription('The number of EFMD Merge Busys transmitted on this VSAN by the local device.')
cpsmEfmdRxMergeBusys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdRxMergeBusys.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdRxMergeBusys.setDescription('The number of EFMD Merge Busys received on this VSAN by the local device.')
cpsmEfmdTxMergeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdTxMergeErrs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdTxMergeErrs.setDescription('The number of EFMD Merge Errors transmitted on this VSAN by the local device.')
cpsmEfmdRxMergeErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmEfmdRxMergeErrs.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdRxMergeErrs.setDescription('The number of EFMD Merge Errors received on this VSAN by the local device.')
cpsmNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: cpsmNotifyEnable.setDescription("This object specifies if the Security Policy Manager notifications should be generated or not. If this object is set to 'true', then the notifications are generated. If this object is set to 'false', then the notifications are not generated.")
cpsmEfmdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 18), )
if mibBuilder.loadTexts: cpsmEfmdConfigTable.setReference('Fabric Binding and Security Membership Data Distribution T11/02-187v2, December 3, 2002.')
if mibBuilder.loadTexts: cpsmEfmdConfigTable.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdConfigTable.setDescription('This table allows configuring EFMD on the local device. The configuration is on a per VSAN basis.')
cpsmEfmdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 18, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: cpsmEfmdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdConfigEntry.setDescription('An entry (conceptual row) in this table.')
cpsmEfmdConfigEnforce = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 18, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsmEfmdConfigEnforce.setStatus('current')
if mibBuilder.loadTexts: cpsmEfmdConfigEnforce.setDescription("This object specifies whether the EFMD enforcement policy is strict or loose on this VSAN. If this object is set to 'true', then the enforcement policy is strict. As a result, if a device that tries to join the fabric thru' an E port on the local device does not pass the authorization check, it is not allowed access and the E port is isolated. If this object is set to 'false', then the enforcement policy is loose. As a result, if a device that tries to join the fabric thru' an E port on the local device does not pass the authorization check, it can still be allowed access.")
cpsmPortBindNextFreeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 19), )
if mibBuilder.loadTexts: cpsmPortBindNextFreeTable.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNextFreeTable.setDescription('This table contains the next free index value that can be used for creation of an entry in the cpsmPortBindTable. These values are maintained on a per VSAN/VLAN basis.')
cpsmPortBindNextFreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 19, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmPortBindNextFreeNwType"), (0, "CISCO-PSM-MIB", "cpsmPortBindNextFreeNwIndex"))
if mibBuilder.loadTexts: cpsmPortBindNextFreeEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNextFreeEntry.setDescription('An entry (concpetual row) in this table.')
cpsmPortBindNextFreeNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 19, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmPortBindNextFreeNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNextFreeNwType.setDescription('The type of virtual interface.')
cpsmPortBindNextFreeNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmPortBindNextFreeNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNextFreeNwIndex.setDescription('The id of the VSAN/VLAN according to the type specified in the corresponding instance of cpsmPortBindNextFreeNwType.')
cpsmPortBindNextFreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmPortBindNextFreeIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmPortBindNextFreeIndex.setDescription('Represents the next free index value for a port binding entry. If the value of this object is non-zero, then it represents the next free index value. If the value of this object is zero, then there are no more free indices available on this VSAN/VLAN.')
cpsmFabricBindNextFreeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 20), )
if mibBuilder.loadTexts: cpsmFabricBindNextFreeTable.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNextFreeTable.setDescription('This table contains the next free index value that can be used for creation of an entry in the cpsmFabricBindTable. These values are maintained on a per VSAN/VLAN basis.')
cpsmFabricBindNextFreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 20, 1), ).setIndexNames((0, "CISCO-PSM-MIB", "cpsmFabricBindNextFreeNwType"), (0, "CISCO-PSM-MIB", "cpsmFabricBindNextFreeNwIndex"))
if mibBuilder.loadTexts: cpsmFabricBindNextFreeEntry.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNextFreeEntry.setDescription('An entry (conceptual row) in this table.')
cpsmFabricBindNextFreeNwType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 20, 1, 1), CpsmVirtNwType())
if mibBuilder.loadTexts: cpsmFabricBindNextFreeNwType.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNextFreeNwType.setDescription('The type of virtual interface.')
cpsmFabricBindNextFreeNwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: cpsmFabricBindNextFreeNwIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNextFreeNwIndex.setDescription('The id of the VSAN/VLAN according to the type specified in the corresponding instance of cpsmFabricBindNextFreeNwType.')
cpsmFabricBindNextFreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 364, 1, 1, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsmFabricBindNextFreeIndex.setStatus('current')
if mibBuilder.loadTexts: cpsmFabricBindNextFreeIndex.setDescription('Represents the next free index value for a fabric binding entry. If the value of this object is non-zero, then it represents the next free index value. If the value of this object is zero, then there are no more free indices available on this VSAN/VLAN.')
ciscoPsmPortBindFPortDenyNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 364, 0, 1)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindLoginPwwn"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPort"), ("CISCO-PSM-MIB", "cpsmPortBindLoginTime"))
if mibBuilder.loadTexts: ciscoPsmPortBindFPortDenyNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindFPortDenyNotify.setDescription('This notification is generated whenever a FLOGI is denied due to enforced port bindings on the local device on a F/FL port.')
ciscoPsmPortBindEPortDenyNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 364, 0, 2)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindLoginSwwn"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPort"), ("CISCO-PSM-MIB", "cpsmPortBindLoginTime"))
if mibBuilder.loadTexts: ciscoPsmPortBindEPortDenyNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindEPortDenyNotify.setDescription('This notification is generated whenever a switch is denied due to enforced port bindings on the local device on a E port.')
ciscoPsmFabricBindDenyNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 364, 0, 3)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindSwwn"), ("CISCO-PSM-MIB", "cpsmFabricBindLocalPort"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialTime"))
if mibBuilder.loadTexts: ciscoPsmFabricBindDenyNotify.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindDenyNotify.setDescription('This notification is generated whenever a device is not allowed to join the fabric due to enforced fabric bindings on the local device.')
ciscoPsmFabricBindDenyNotifyNew = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 364, 0, 4)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindSwwnR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialTimeR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialReasonCode"))
if mibBuilder.loadTexts: ciscoPsmFabricBindDenyNotifyNew.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmFabricBindDenyNotifyNew.setDescription('This notification is generated whenever a device is not allowed to join the fabric due to enforced fabric bindings on the local device.')
ciscoPsmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1))
ciscoPsmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2))
ciscoPsmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1, 1)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmNotifyEnableGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindAutoLearnGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmMIBCompliance = ciscoPsmMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmMIBCompliance.setDescription('The compliance statement for entities which implement the Port Security Manager.')
ciscoPsmMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1, 2)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindConfigGroup1"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindStatsGroup1"), ("CISCO-PSM-MIB", "ciscoPsmPortBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindNotifyGroupR1"), ("CISCO-PSM-MIB", "ciscoPsmNotifyEnableGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmMIBComplianceRev1 = ciscoPsmMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Port Security Manager.')
ciscoPsmMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1, 3)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindConfigGroup1"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindStatsGroup1"), ("CISCO-PSM-MIB", "ciscoPsmPortBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindNotifyGroupR1"), ("CISCO-PSM-MIB", "ciscoPsmNotifyEnableGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmMIBComplianceRev2 = ciscoPsmMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Port Security Manager.')
ciscoPsmMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1, 4)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindConfigGroup1"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindStatsGroup2"), ("CISCO-PSM-MIB", "ciscoPsmPortBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindNotifyGroupR1"), ("CISCO-PSM-MIB", "ciscoPsmNotifyEnableGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmMIBComplianceRev3 = ciscoPsmMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Port Security Manager.')
ciscoPsmMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1, 5)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindConfigGroup1"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindStatsGroup3"), ("CISCO-PSM-MIB", "ciscoPsmPortBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindNotifyGroupR1"), ("CISCO-PSM-MIB", "ciscoPsmNotifyEnableGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmMIBComplianceRev4 = ciscoPsmMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Port Security Manager.')
ciscoPsmMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 1, 6)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindConfigGroup1"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindConfigGroup2"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindEnforcedGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindStatsGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindStatsGroup3"), ("CISCO-PSM-MIB", "ciscoPsmPortBindNotifyGroup"), ("CISCO-PSM-MIB", "ciscoPsmFabricBindNotifyGroupR1"), ("CISCO-PSM-MIB", "ciscoPsmNotifyEnableGroup"), ("CISCO-PSM-MIB", "ciscoPsmPortBindAutoLearnGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdConfigGroup"), ("CISCO-PSM-MIB", "ciscoPsmEfmdStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmMIBComplianceRev5 = ciscoPsmMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Port Security Manager.')
ciscoPsmPortBindConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 1)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindLoginDevType"), ("CISCO-PSM-MIB", "cpsmPortBindLoginDev"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPointType"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPoint"), ("CISCO-PSM-MIB", "cpsmPortBindRowStatus"), ("CISCO-PSM-MIB", "cpsmPortBindActivate"), ("CISCO-PSM-MIB", "cpsmPortBindResult"), ("CISCO-PSM-MIB", "cpsmPortBindLastActTime"), ("CISCO-PSM-MIB", "cpsmPortBindActState"), ("CISCO-PSM-MIB", "cpsmPortBindCopyActToConfig"), ("CISCO-PSM-MIB", "cpsmPortBindLastChangeTime"), ("CISCO-PSM-MIB", "cpsmPortBindClearStats"), ("CISCO-PSM-MIB", "cpsmPortBindClearAutoLearnDb"), ("CISCO-PSM-MIB", "cpsmPortBindClearAutoLearnIntf"), ("CISCO-PSM-MIB", "cpsmPortBindDiffConfigDb"), ("CISCO-PSM-MIB", "cpsmPortBindDiffReason"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginDevType"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginDev"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginPointType"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginPoint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmPortBindConfigGroup = ciscoPsmPortBindConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmPortBindConfigGroup.setDescription('A collection of objects for displaying and configuring port bindings and activating them.')
ciscoPsmFabricBindConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 2)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindDomId"), ("CISCO-PSM-MIB", "cpsmFabricBindRowStatus"), ("CISCO-PSM-MIB", "cpsmFabricBindActivate"), ("CISCO-PSM-MIB", "cpsmFabricBindResult"), ("CISCO-PSM-MIB", "cpsmFabricBindLastActTime"), ("CISCO-PSM-MIB", "cpsmFabricBindActState"), ("CISCO-PSM-MIB", "cpsmFabricBindCopyActToConfig"), ("CISCO-PSM-MIB", "cpsmFabricBindLastChangeTime"), ("CISCO-PSM-MIB", "cpsmFabricBindClearStats"), ("CISCO-PSM-MIB", "cpsmFabricBindClearAutoLearnDb"), ("CISCO-PSM-MIB", "cpsmFabricBindClearAutoLearnIntf"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffConfigDb"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffReason"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffDomId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindConfigGroup = ciscoPsmFabricBindConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindConfigGroup.setDescription('A collection of objects for displaying and configuring fabric bindings and activating them.')
ciscoPsmPortBindEnforcedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 3)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindEnfLoginDevType"), ("CISCO-PSM-MIB", "cpsmPortBindEnfLoginDev"), ("CISCO-PSM-MIB", "cpsmPortBindEnfLoginPointType"), ("CISCO-PSM-MIB", "cpsmPortBindEnfLoginPoint"), ("CISCO-PSM-MIB", "cpsmPortBindEnfIsLearnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmPortBindEnforcedGroup = ciscoPsmPortBindEnforcedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindEnforcedGroup.setDescription('A collection of objects for displaying enforced port bindings.')
ciscoPsmFabricBindEnforcedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 4)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindEnfSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindEnfDomId"), ("CISCO-PSM-MIB", "cpsmFabricBindEnfIsLearnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindEnforcedGroup = ciscoPsmFabricBindEnforcedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmFabricBindEnforcedGroup.setDescription('A collection of objects for displaying enforced fabric bindings.')
ciscoPsmPortBindStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 5)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindAllowedLogins"), ("CISCO-PSM-MIB", "cpsmPortBindDeniedLogins"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPwwn"), ("CISCO-PSM-MIB", "cpsmPortBindLoginNwwn"), ("CISCO-PSM-MIB", "cpsmPortBindLoginSwwn"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPort"), ("CISCO-PSM-MIB", "cpsmPortBindLoginTime"), ("CISCO-PSM-MIB", "cpsmPortBindLoginCount"), ("CISCO-PSM-MIB", "cpsmPortBindLoginIntf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmPortBindStatsGroup = ciscoPsmPortBindStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindStatsGroup.setDescription('A collection of objects for displaying Port binding statistics and violation information.')
ciscoPsmFabricBindStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 6)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindAllowedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindDeniedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindSwwn"), ("CISCO-PSM-MIB", "cpsmFabricBindLocalPort"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialTime"), ("CISCO-PSM-MIB", "cpsmFabricBindLocalIntf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindStatsGroup = ciscoPsmFabricBindStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindStatsGroup.setDescription('A collection of objects for displaying Fabric binding statistics and violation information.')
ciscoPsmPortBindNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 7)).setObjects(("CISCO-PSM-MIB", "ciscoPsmPortBindFPortDenyNotify"), ("CISCO-PSM-MIB", "ciscoPsmPortBindEPortDenyNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmPortBindNotifyGroup = ciscoPsmPortBindNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindNotifyGroup.setDescription('A collection of notification(s) for monitoring denial of FLOGI due to port bindings being enforced.')
ciscoPsmFabricBindNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 8)).setObjects(("CISCO-PSM-MIB", "ciscoPsmFabricBindDenyNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindNotifyGroup = ciscoPsmFabricBindNotifyGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindNotifyGroup.setDescription('A collection of notification(s) for monitoring denial of request to join the fabric due to fabric bindings being enforced.')
ciscoPsmPortBindAutoLearnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 9)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindAutoLearnEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmPortBindAutoLearnGroup = ciscoPsmPortBindAutoLearnGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindAutoLearnGroup.setDescription('A collection of object(s) for enabling/disabling auto learn of port bindings.')
ciscoPsmFabricBindAutoLearnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 10)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindAutoLearnEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindAutoLearnGroup = ciscoPsmFabricBindAutoLearnGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindAutoLearnGroup.setDescription('A collection of object(s) for enabling/disabling auto learn of fabric bindings.')
ciscoPsmNotifyEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 11)).setObjects(("CISCO-PSM-MIB", "cpsmNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmNotifyEnableGroup = ciscoPsmNotifyEnableGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmNotifyEnableGroup.setDescription('A collection of object(s) for enabling/disabling port binding/fabric binding notifications.')
ciscoPsmFabricBindConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 12)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindDomId"), ("CISCO-PSM-MIB", "cpsmFabricBindRowStatus"), ("CISCO-PSM-MIB", "cpsmFabricBindActivate"), ("CISCO-PSM-MIB", "cpsmFabricBindResult"), ("CISCO-PSM-MIB", "cpsmFabricBindLastActTime"), ("CISCO-PSM-MIB", "cpsmFabricBindActState"), ("CISCO-PSM-MIB", "cpsmFabricBindCopyActToConfig"), ("CISCO-PSM-MIB", "cpsmFabricBindLastChangeTime"), ("CISCO-PSM-MIB", "cpsmFabricBindClearStats"), ("CISCO-PSM-MIB", "cpsmFabricBindClearAutoLearnDb"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffConfigDb"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffReason"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffDomId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindConfigGroup1 = ciscoPsmFabricBindConfigGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindConfigGroup1.setDescription('A collection of objects for displaying and configuring fabric bindings and activating them.')
ciscoPsmFabricBindStatsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 13)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindAllowedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindDeniedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindSwwnR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialTimeR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialCountR1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindStatsGroup1 = ciscoPsmFabricBindStatsGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindStatsGroup1.setDescription('A collection of objects for displaying Fabric binding statistics and violation information.')
ciscoPsmFabricBindNotifyGroupR1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 14)).setObjects(("CISCO-PSM-MIB", "ciscoPsmFabricBindDenyNotifyNew"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindNotifyGroupR1 = ciscoPsmFabricBindNotifyGroupR1.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmFabricBindNotifyGroupR1.setDescription('A collection of notification(s) for monitoring denial of request to join the fabric due to fabric bindings being enforced.')
ciscoPsmEfmdConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 15)).setObjects(("CISCO-PSM-MIB", "cpsmEfmdConfigEnforce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmEfmdConfigGroup = ciscoPsmEfmdConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmEfmdConfigGroup.setDescription('A collection of objects for configuring and displaying EFMD information.')
ciscoPsmEfmdStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 16)).setObjects(("CISCO-PSM-MIB", "cpsmEfmdTxMergeReqs"), ("CISCO-PSM-MIB", "cpsmEfmdRxMergeReqs"), ("CISCO-PSM-MIB", "cpsmEfmdTxMergeAccs"), ("CISCO-PSM-MIB", "cpsmEfmdRxMergeAccs"), ("CISCO-PSM-MIB", "cpsmEfmdTxMergeRejs"), ("CISCO-PSM-MIB", "cpsmEfmdRxMergeRejs"), ("CISCO-PSM-MIB", "cpsmEfmdTxMergeBusys"), ("CISCO-PSM-MIB", "cpsmEfmdRxMergeBusys"), ("CISCO-PSM-MIB", "cpsmEfmdTxMergeErrs"), ("CISCO-PSM-MIB", "cpsmEfmdRxMergeErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmEfmdStatsGroup = ciscoPsmEfmdStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmEfmdStatsGroup.setDescription('A collection of objects for displaying EFMD statistics information.')
ciscoPsmFabricBindStatsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 17)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindAllowedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindDeniedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindSwwnR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialTimeR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialCountR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialDomId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindStatsGroup2 = ciscoPsmFabricBindStatsGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoPsmFabricBindStatsGroup2.setDescription('A collection of objects for displaying Fabric binding statistics and violation information.')
ciscoPsmFabricBindStatsGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 18)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindAllowedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindDeniedReqs"), ("CISCO-PSM-MIB", "cpsmFabricBindSwwnR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialTimeR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialCountR1"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialDomId"), ("CISCO-PSM-MIB", "cpsmFabricBindDenialReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindStatsGroup3 = ciscoPsmFabricBindStatsGroup3.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmFabricBindStatsGroup3.setDescription('A collection of objects for displaying Fabric binding statistics and violation information.')
ciscoPsmPortBindConfigGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 19)).setObjects(("CISCO-PSM-MIB", "cpsmPortBindLoginDevType"), ("CISCO-PSM-MIB", "cpsmPortBindLoginDev"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPointType"), ("CISCO-PSM-MIB", "cpsmPortBindLoginPoint"), ("CISCO-PSM-MIB", "cpsmPortBindRowStatus"), ("CISCO-PSM-MIB", "cpsmPortBindActivate"), ("CISCO-PSM-MIB", "cpsmPortBindResult"), ("CISCO-PSM-MIB", "cpsmPortBindLastActTime"), ("CISCO-PSM-MIB", "cpsmPortBindActState"), ("CISCO-PSM-MIB", "cpsmPortBindCopyActToConfig"), ("CISCO-PSM-MIB", "cpsmPortBindLastChangeTime"), ("CISCO-PSM-MIB", "cpsmPortBindClearStats"), ("CISCO-PSM-MIB", "cpsmPortBindClearAutoLearnDb"), ("CISCO-PSM-MIB", "cpsmPortBindClearAutoLearnIntf"), ("CISCO-PSM-MIB", "cpsmPortBindDiffConfigDb"), ("CISCO-PSM-MIB", "cpsmPortBindDiffReason"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginDevType"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginDev"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginPointType"), ("CISCO-PSM-MIB", "cpsmPortBindDiffLoginPoint"), ("CISCO-PSM-MIB", "cpsmPortBindNextFreeIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmPortBindConfigGroup1 = ciscoPsmPortBindConfigGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmPortBindConfigGroup1.setDescription('A collection of objects for displaying and configuring port bindings and activating them.')
ciscoPsmFabricBindConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 364, 2, 2, 20)).setObjects(("CISCO-PSM-MIB", "cpsmFabricBindSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindDomId"), ("CISCO-PSM-MIB", "cpsmFabricBindRowStatus"), ("CISCO-PSM-MIB", "cpsmFabricBindActivate"), ("CISCO-PSM-MIB", "cpsmFabricBindResult"), ("CISCO-PSM-MIB", "cpsmFabricBindLastActTime"), ("CISCO-PSM-MIB", "cpsmFabricBindActState"), ("CISCO-PSM-MIB", "cpsmFabricBindCopyActToConfig"), ("CISCO-PSM-MIB", "cpsmFabricBindLastChangeTime"), ("CISCO-PSM-MIB", "cpsmFabricBindClearStats"), ("CISCO-PSM-MIB", "cpsmFabricBindClearAutoLearnDb"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffConfigDb"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffReason"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffSwitchWwn"), ("CISCO-PSM-MIB", "cpsmFabricBindDiffDomId"), ("CISCO-PSM-MIB", "cpsmFabricBindNextFreeIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPsmFabricBindConfigGroup2 = ciscoPsmFabricBindConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoPsmFabricBindConfigGroup2.setDescription('A collection of objects for displaying and configuring fabric bindings and activating them.')
mibBuilder.exportSymbols("CISCO-PSM-MIB", cpsmEfmdRxMergeReqs=cpsmEfmdRxMergeReqs, cpsmPortBindClearAutoLearnDb=cpsmPortBindClearAutoLearnDb, cpsmFabricBindSwwnR1=cpsmFabricBindSwwnR1, cpsmEfmdConfigEntry=cpsmEfmdConfigEntry, ciscoPsmFabricBindStatsGroup=ciscoPsmFabricBindStatsGroup, ciscoPsmFabricBindNotifyGroup=ciscoPsmFabricBindNotifyGroup, ciscoPsmFabricBindNotifyGroupR1=ciscoPsmFabricBindNotifyGroupR1, PYSNMP_MODULE_ID=ciscoPsmMIB, cpsmFabricBindDiffConfigTable=cpsmFabricBindDiffConfigTable, cpsmFabricBindResult=cpsmFabricBindResult, cpsmPortBindDiffLoginDev=cpsmPortBindDiffLoginDev, cpsmFabricBindDiffNwType=cpsmFabricBindDiffNwType, cpsmPortBindLoginDevType=cpsmPortBindLoginDevType, cpsmPortBindAllowedLogins=cpsmPortBindAllowedLogins, cpsmFabricBindNwType=cpsmFabricBindNwType, cpsmPortBindEnfLoginDev=cpsmPortBindEnfLoginDev, cpsmPortBindAutoLearnTable=cpsmPortBindAutoLearnTable, cpsmFabricBindViolationIndex=cpsmFabricBindViolationIndex, ciscoPsmNotifyEnableGroup=ciscoPsmNotifyEnableGroup, cpsmPortBindEnfTable=cpsmPortBindEnfTable, CpsmClearStats=CpsmClearStats, cpsmFabricBindStatsEntry=cpsmFabricBindStatsEntry, cpsmFabricBindEnfNwIndex=cpsmFabricBindEnfNwIndex, cpsmPortBindViolationTable=cpsmPortBindViolationTable, cpsmEfmdConfigEnforce=cpsmEfmdConfigEnforce, CpsmViolationReasonCode=CpsmViolationReasonCode, cpsmPortBindNextFreeTable=cpsmPortBindNextFreeTable, cpsmFabricBindClearNwIndex=cpsmFabricBindClearNwIndex, cpsmFabricBindDenialReasonCode=cpsmFabricBindDenialReasonCode, ciscoPsmFabricBindAutoLearnGroup=ciscoPsmFabricBindAutoLearnGroup, cpsmPortBindStatsEntry=cpsmPortBindStatsEntry, cpsmPortBindClearNwIndex=cpsmPortBindClearNwIndex, ciscoPsmMIBGroups=ciscoPsmMIBGroups, ciscoPsmMIBObjects=ciscoPsmMIBObjects, cpsmPortBindEnfNwIndex=cpsmPortBindEnfNwIndex, cpsmFabricBindEnfIndex=cpsmFabricBindEnfIndex, cpsmPortBindDiffEntry=cpsmPortBindDiffEntry, cpsmPortBindDiffTable=cpsmPortBindDiffTable, cpsmFabricBindAutoLearnEnable=cpsmFabricBindAutoLearnEnable, cpsmPortBindStatsTable=cpsmPortBindStatsTable, cpsmPortBindLastActTime=cpsmPortBindLastActTime, ciscoPsmFabricBindStatsGroup2=ciscoPsmFabricBindStatsGroup2, CpsmStatsCounter=CpsmStatsCounter, cpsmFabricBindViolationNwTypeR1=cpsmFabricBindViolationNwTypeR1, cpsmFabricBindNextFreeNwType=cpsmFabricBindNextFreeNwType, cpsmStats=cpsmStats, CpsmClearAutoLearnDb=CpsmClearAutoLearnDb, cpsmPortBindAutoLearnIndexType=cpsmPortBindAutoLearnIndexType, cpsmFabricBindAutoLearnEntry=cpsmFabricBindAutoLearnEntry, ciscoPsmFabricBindConfigGroup=ciscoPsmFabricBindConfigGroup, ciscoPsmMIBNotifs=ciscoPsmMIBNotifs, cpsmFabricBindEnfTable=cpsmFabricBindEnfTable, cpsmEfmdStatsTable=cpsmEfmdStatsTable, cpsmPortBindRowStatus=cpsmPortBindRowStatus, cpsmFabricBindActivate=cpsmFabricBindActivate, ciscoPsmFabricBindDenyNotifyNew=ciscoPsmFabricBindDenyNotifyNew, CpsmDbActivate=CpsmDbActivate, cpsmPortBindNwIndex=cpsmPortBindNwIndex, cpsmPortBindLoginIntf=cpsmPortBindLoginIntf, ciscoPsmMIBComplianceRev5=ciscoPsmMIBComplianceRev5, cpsmPortBindAutoLearnIndex=cpsmPortBindAutoLearnIndex, cpsmFabricBindEnfIsLearnt=cpsmFabricBindEnfIsLearnt, cpsmPortBindClearEntry=cpsmPortBindClearEntry, cpsmPortBindVsanVlanIndex=cpsmPortBindVsanVlanIndex, cpsmEfmdTxMergeErrs=cpsmEfmdTxMergeErrs, cpsmPortBindDiffNwType=cpsmPortBindDiffNwType, cpsmPortBindViolationNwType=cpsmPortBindViolationNwType, cpsmEfmdRxMergeAccs=cpsmEfmdRxMergeAccs, cpsmPortBindNwType=cpsmPortBindNwType, cpsmFabricBindCopyTable=cpsmFabricBindCopyTable, cpsmPortBindClearAutoLearnIntf=cpsmPortBindClearAutoLearnIntf, cpsmPortBindResult=cpsmPortBindResult, cpsmFabricBindDeniedReqs=cpsmFabricBindDeniedReqs, cpsmPortBindViolationIndex=cpsmPortBindViolationIndex, ciscoPsmEfmdStatsGroup=ciscoPsmEfmdStatsGroup, CpsmDiffDb=CpsmDiffDb, cpsmFabricBindSwitchWwn=cpsmFabricBindSwitchWwn, cpsmPortBindDiffConfigDb=cpsmPortBindDiffConfigDb, cpsmEfmdRxMergeErrs=cpsmEfmdRxMergeErrs, cpsmPortBindActivateTable=cpsmPortBindActivateTable, cpsmPortBindLoginNwwn=cpsmPortBindLoginNwwn, ciscoPsmFabricBindStatsGroup3=ciscoPsmFabricBindStatsGroup3, ciscoPsmFabricBindConfigGroup1=ciscoPsmFabricBindConfigGroup1, cpsmFabricBindDiffSwitchWwn=cpsmFabricBindDiffSwitchWwn, cpsmPortBindEnfLoginPointType=cpsmPortBindEnfLoginPointType, ciscoPsmMIBCompliances=ciscoPsmMIBCompliances, cpsmFabricBindNextFreeEntry=cpsmFabricBindNextFreeEntry, CpsmAutoLearnEnable=CpsmAutoLearnEnable, CpsmActivateResult=CpsmActivateResult, cpsmPortBindCopyTable=cpsmPortBindCopyTable, cpsmPortBindDiffLoginPointType=cpsmPortBindDiffLoginPointType, ciscoPsmEfmdConfigGroup=ciscoPsmEfmdConfigGroup, cpsmFabricBindEntry=cpsmFabricBindEntry, cpsmFabricBindActivateEntry=cpsmFabricBindActivateEntry, ciscoPsmFabricBindEnforcedGroup=ciscoPsmFabricBindEnforcedGroup, ciscoPsmMIB=ciscoPsmMIB, cpsmPortBindIndex=cpsmPortBindIndex, cpsmPortBindDiffReason=cpsmPortBindDiffReason, cpsmPortBindNextFreeNwIndex=cpsmPortBindNextFreeNwIndex, CpsmVirtNwType=CpsmVirtNwType, cpsmPortBindEnfNwType=cpsmPortBindEnfNwType, cpsmEfmdTxMergeBusys=cpsmEfmdTxMergeBusys, cpsmPortBindEnfIsLearnt=cpsmPortBindEnfIsLearnt, cpsmFabricBindDiffReason=cpsmFabricBindDiffReason, ciscoPsmMIBComplianceRev4=ciscoPsmMIBComplianceRev4, cpsmFabricBindNextFreeNwIndex=cpsmFabricBindNextFreeNwIndex, cpsmFabricBindViolationIndexR1=cpsmFabricBindViolationIndexR1, cpsmFabricBindActState=cpsmFabricBindActState, cpsmPortBindVsanVlanType=cpsmPortBindVsanVlanType, cpsmEfmdConfigTable=cpsmEfmdConfigTable, cpsmFabricBindViolationNewTable=cpsmFabricBindViolationNewTable, cpsmFabricBindAutoLearnIndex=cpsmFabricBindAutoLearnIndex, cpsmPortBindEnfIndex=cpsmPortBindEnfIndex, cpsmFabricBindEnfSwitchWwn=cpsmFabricBindEnfSwitchWwn, cpsmFabricBindNwIndex=cpsmFabricBindNwIndex, cpsmFabricBindLastChangeTime=cpsmFabricBindLastChangeTime, cpsmFabricBindDomId=cpsmFabricBindDomId, cpsmFabricBindSwwn=cpsmFabricBindSwwn, cpsmFabricBindDenialTimeR1=cpsmFabricBindDenialTimeR1, cpsmPortBindTable=cpsmPortBindTable, cpsmFabricBindClearStats=cpsmFabricBindClearStats, cpsmPortBindLoginPwwn=cpsmPortBindLoginPwwn, cpsmFabricBindDiffConfigNwIndex=cpsmFabricBindDiffConfigNwIndex, cpsmFabricBindAutoLearnTable=cpsmFabricBindAutoLearnTable, cpsmFabricBindViolationTable=cpsmFabricBindViolationTable, ciscoPsmFabricBindStatsGroup1=ciscoPsmFabricBindStatsGroup1, ciscoPsmPortBindEPortDenyNotify=ciscoPsmPortBindEPortDenyNotify, cpsmPortBindDeniedLogins=cpsmPortBindDeniedLogins, cpsmFabricBindLocalIntf=cpsmFabricBindLocalIntf, cpsmFabricBindTable=cpsmFabricBindTable, cpsmPortBindLoginDev=cpsmPortBindLoginDev, cpsmFabricBindDiffConfigNwType=cpsmFabricBindDiffConfigNwType, ciscoPsmPortBindFPortDenyNotify=ciscoPsmPortBindFPortDenyNotify, cpsmFabricBindClearNwType=cpsmFabricBindClearNwType, cpsmPortBindLoginTime=cpsmPortBindLoginTime, cpsmFabricBindIndex=cpsmFabricBindIndex, cpsmPortBindAutoLearnEnable=cpsmPortBindAutoLearnEnable, cpsmEfmdTxMergeRejs=cpsmEfmdTxMergeRejs, cpsmFabricBindDenialDomId=cpsmFabricBindDenialDomId, cpsmPortBindDiffConfigNwType=cpsmPortBindDiffConfigNwType, ciscoPsmPortBindNotifyGroup=ciscoPsmPortBindNotifyGroup, cpsmPortBindDiffConfigEntry=cpsmPortBindDiffConfigEntry, cpsmPortBindClearNwType=cpsmPortBindClearNwType, cpsmFabricBindDiffEntry=cpsmFabricBindDiffEntry, cpsmFabricBindCopyEntry=cpsmFabricBindCopyEntry, cpsmFabricBindNextFreeTable=cpsmFabricBindNextFreeTable, ciscoPsmMIBConform=ciscoPsmMIBConform, cpsmFabricBindClearAutoLearnIntf=cpsmFabricBindClearAutoLearnIntf, cpsmPortBindDiffConfigTable=cpsmPortBindDiffConfigTable, cpsmPortBindViolationEntry=cpsmPortBindViolationEntry, cpsmFabricBindRowStatus=cpsmFabricBindRowStatus, cpsmPortBindEntry=cpsmPortBindEntry, cpsmPortBindDiffLoginPoint=cpsmPortBindDiffLoginPoint, cpsmPortBindActivateEntry=cpsmPortBindActivateEntry, cpsmEfmdRxMergeBusys=cpsmEfmdRxMergeBusys, cpsmFabricBindDiffConfigEntry=cpsmFabricBindDiffConfigEntry, cpsmFabricBindLocalPort=cpsmFabricBindLocalPort, cpsmFabricBindDiffTable=cpsmFabricBindDiffTable, cpsmPortBindNextFreeNwType=cpsmPortBindNextFreeNwType, cpsmPortBindLoginCount=cpsmPortBindLoginCount, cpsmFabricBindStatsTable=cpsmFabricBindStatsTable, cpsmFabricBindDenialCountR1=cpsmFabricBindDenialCountR1, cpsmFabricBindNextFreeIndex=cpsmFabricBindNextFreeIndex, cpsmEfmdStatsEntry=cpsmEfmdStatsEntry, ciscoPsmPortBindConfigGroup1=ciscoPsmPortBindConfigGroup1, cpsmPortBindLoginPort=cpsmPortBindLoginPort, cpsmFabricBindDiffDomId=cpsmFabricBindDiffDomId, cpsmPortBindDiffNwIndex=cpsmPortBindDiffNwIndex, cpsmFabricBindViolationNewEntry=cpsmFabricBindViolationNewEntry, cpsmPortBindDiffIndex=cpsmPortBindDiffIndex, cpsmPortBindLoginPointType=cpsmPortBindLoginPointType, ciscoPsmPortBindAutoLearnGroup=ciscoPsmPortBindAutoLearnGroup, cpsmFabricBindAutoLearnIndexType=cpsmFabricBindAutoLearnIndexType, ciscoPsmMIBComplianceRev3=ciscoPsmMIBComplianceRev3, cpsmPortBindLoginSwwn=cpsmPortBindLoginSwwn, cpsmFabricBindEnfDomId=cpsmFabricBindEnfDomId, cpsmPortBindDiffLoginDevType=cpsmPortBindDiffLoginDevType, cpsmPortBindEnfLoginDevType=cpsmPortBindEnfLoginDevType, cpsmFabricBindVsanVlanIndex=cpsmFabricBindVsanVlanIndex, cpsmPortBindLastChangeTime=cpsmPortBindLastChangeTime, cpsmFabricBindActivateTable=cpsmFabricBindActivateTable, cpsmEfmdTxMergeReqs=cpsmEfmdTxMergeReqs, cpsmPortBindActivate=cpsmPortBindActivate, cpsmFabricBindClearEntry=cpsmFabricBindClearEntry, cpsmPortBindAutoLearnEntry=cpsmPortBindAutoLearnEntry, cpsmFabricBindDiffConfigDb=cpsmFabricBindDiffConfigDb, cpsmFabricBindDiffNwIndex=cpsmFabricBindDiffNwIndex, cpsmEfmdTxMergeAccs=cpsmEfmdTxMergeAccs, cpsmFabricBindViolationNwIndexR1=cpsmFabricBindViolationNwIndexR1, ciscoPsmPortBindConfigGroup=ciscoPsmPortBindConfigGroup, cpsmConfiguration=cpsmConfiguration, cpsmPortBindLoginPoint=cpsmPortBindLoginPoint, cpsmPortBindNextFreeEntry=cpsmPortBindNextFreeEntry, cpsmNotifyEnable=cpsmNotifyEnable, ciscoPsmPortBindEnforcedGroup=ciscoPsmPortBindEnforcedGroup, cpsmPortBindViolationNwIndex=cpsmPortBindViolationNwIndex, cpsmPortBindCopyEntry=cpsmPortBindCopyEntry, cpsmEfmdRxMergeRejs=cpsmEfmdRxMergeRejs, ciscoPsmFabricBindDenyNotify=ciscoPsmFabricBindDenyNotify, cpsmFabricBindAllowedReqs=cpsmFabricBindAllowedReqs, cpsmPortBindClearTable=cpsmPortBindClearTable, cpsmPortBindActState=cpsmPortBindActState, CpsmPortBindSwPortType=CpsmPortBindSwPortType, cpsmPortBindEnfLoginPoint=cpsmPortBindEnfLoginPoint, cpsmFabricBindEnfEntry=cpsmFabricBindEnfEntry, cpsmFabricBindVsanVlanType=cpsmFabricBindVsanVlanType, cpsmFabricBindEnfNwType=cpsmFabricBindEnfNwType, cpsmPortBindEnfEntry=cpsmPortBindEnfEntry, cpsmPortBindNextFreeIndex=cpsmPortBindNextFreeIndex, ciscoPsmMIBComplianceRev2=ciscoPsmMIBComplianceRev2, ciscoPsmMIBCompliance=ciscoPsmMIBCompliance, ciscoPsmPortBindStatsGroup=ciscoPsmPortBindStatsGroup, cpsmFabricBindCopyActToConfig=cpsmFabricBindCopyActToConfig, cpsmFabricBindClearTable=cpsmFabricBindClearTable, ciscoPsmFabricBindConfigGroup2=ciscoPsmFabricBindConfigGroup2, CpsmPortBindDevType=CpsmPortBindDevType, cpsmPortBindDiffConfigNwIndex=cpsmPortBindDiffConfigNwIndex, cpsmFabricBindDiffIndex=cpsmFabricBindDiffIndex, cpsmPortBindClearStats=cpsmPortBindClearStats, ciscoPsmMIBComplianceRev1=ciscoPsmMIBComplianceRev1, cpsmFabricBindViolationEntry=cpsmFabricBindViolationEntry, cpsmFabricBindClearAutoLearnDb=cpsmFabricBindClearAutoLearnDb, CpsmDiffReason=CpsmDiffReason, cpsmPortBindCopyActToConfig=cpsmPortBindCopyActToConfig, cpsmFabricBindDenialTime=cpsmFabricBindDenialTime, cpsmFabricBindLastActTime=cpsmFabricBindLastActTime)
