#
# PySNMP MIB module FASTPATH-DENIALOFSERVICE-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FASTPATH-DENIALOFSERVICE-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
fastPath, = mibBuilder.importSymbols("BROADCOM-REF-MIB", "fastPath")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, ModuleIdentity, iso, IpAddress, Unsigned32, Integer32, TimeTicks, Counter32, Counter64, Gauge32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "iso", "IpAddress", "Unsigned32", "Integer32", "TimeTicks", "Counter32", "Counter64", "Gauge32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
fastPathDenialOfService = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31))
fastPathDenialOfService.setRevisions(('2007-05-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathDenialOfService.setRevisionsDescriptions(('Broadcom branding related changes.',))
if mibBuilder.loadTexts: fastPathDenialOfService.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: fastPathDenialOfService.setOrganization('Broadcom Corporation')
if mibBuilder.loadTexts: fastPathDenialOfService.setContactInfo(' Customer Support Postal: Broadcom Corporation 100 Perimeter Park Dr., Suite H Morrisville, NC 27560 Tel: +1 919 865 2700')
if mibBuilder.loadTexts: fastPathDenialOfService.setDescription('The Broadcom Private MIB for FASTPATH Denial of Service.')
agentSwitchDenialOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1))
agentSwitchDenialOfServiceSIPDIPMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSIPDIPMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSIPDIPMode.setDescription('Enables or Disables the SIP=DIP Denial of Service protection feature.')
agentSwitchDenialOfServiceSMACDMACMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSMACDMACMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceSMACDMACMode.setDescription('Enables or Disables the SMAC=DMAC Denial of Service protection feature.')
agentSwitchDenialOfServiceFirstFragMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceFirstFragMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceFirstFragMode.setDescription('Enables or Disables the First Fragment Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPHdrSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPHdrSize.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPHdrSize.setDescription('Configures the Minimum allowed TCP Header size. This is active if the First Fragment Denial of Service protection feature is enabled.')
agentSwitchDenialOfServiceTCPFragMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFragMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFragMode.setDescription('Enables or Disables the TCP Fragment Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPOffsetMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPOffsetMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPOffsetMode.setDescription('Enables or Disables the TCP Offset Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPFlagMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagMode.setDescription('Enables or Disables the TCP Flag Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPFlagSeqMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagSeqMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFlagSeqMode.setDescription('Enables or Disables the TCP Flag and Sequence Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPSynMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynMode.setDescription('Enables or Disables the TCP Syn Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPSynFinMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynFinMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPSynFinMode.setDescription('Enables or Disables the TCP Syn and Fin Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPFinUrgPshMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFinUrgPshMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPFinUrgPshMode.setDescription('Enables or Disables the TCP Fin and Urg and Psh Denial of Service protection feature.')
agentSwitchDenialOfServiceL4PortMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceL4PortMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceL4PortMode.setDescription('Enables or Disables the L4 Port Denial of Service protection feature.')
agentSwitchDenialOfServiceTCPPortMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPPortMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceTCPPortMode.setDescription('Enables or Disables the TCP Port Denial of Service protection feature.')
agentSwitchDenialOfServiceUDPPortMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceUDPPortMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceUDPPortMode.setDescription('Enables or Disables the UDP Port Denial of Service protection feature.')
agentSwitchDenialOfServiceICMPMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPMode.setDescription('Enables or Disables the ICMP Denial of Service protection feature.')
agentSwitchDenialOfServiceICMPSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16376)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPSize.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPSize.setDescription('Configures the Maximum allowed ICMP data size. This is active if the ICMP Denial of Service protection feature is enabled.')
agentSwitchDenialOfServiceICMPv6Size = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(1023)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPv6Size.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPv6Size.setDescription('Configures the Maximum allowed ICMPv6 data size. This is active if the ICMPv6 Denial of Service protection feature is enabled.')
agentSwitchDenialOfServiceICMPFragMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 31, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPFragMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDenialOfServiceICMPFragMode.setDescription('Enables or Disables the ICMP Fragment Denial of Service protection feature.')
mibBuilder.exportSymbols("FASTPATH-DENIALOFSERVICE-PRIVATE-MIB", agentSwitchDenialOfServiceICMPSize=agentSwitchDenialOfServiceICMPSize, agentSwitchDenialOfServiceGroup=agentSwitchDenialOfServiceGroup, agentSwitchDenialOfServiceTCPFinUrgPshMode=agentSwitchDenialOfServiceTCPFinUrgPshMode, agentSwitchDenialOfServiceUDPPortMode=agentSwitchDenialOfServiceUDPPortMode, agentSwitchDenialOfServiceTCPOffsetMode=agentSwitchDenialOfServiceTCPOffsetMode, agentSwitchDenialOfServiceTCPFlagSeqMode=agentSwitchDenialOfServiceTCPFlagSeqMode, agentSwitchDenialOfServiceICMPMode=agentSwitchDenialOfServiceICMPMode, PYSNMP_MODULE_ID=fastPathDenialOfService, agentSwitchDenialOfServiceICMPv6Size=agentSwitchDenialOfServiceICMPv6Size, agentSwitchDenialOfServiceL4PortMode=agentSwitchDenialOfServiceL4PortMode, agentSwitchDenialOfServiceTCPFragMode=agentSwitchDenialOfServiceTCPFragMode, agentSwitchDenialOfServiceICMPFragMode=agentSwitchDenialOfServiceICMPFragMode, agentSwitchDenialOfServiceTCPFlagMode=agentSwitchDenialOfServiceTCPFlagMode, agentSwitchDenialOfServiceTCPSynFinMode=agentSwitchDenialOfServiceTCPSynFinMode, agentSwitchDenialOfServiceSIPDIPMode=agentSwitchDenialOfServiceSIPDIPMode, agentSwitchDenialOfServiceTCPHdrSize=agentSwitchDenialOfServiceTCPHdrSize, agentSwitchDenialOfServiceTCPPortMode=agentSwitchDenialOfServiceTCPPortMode, agentSwitchDenialOfServiceTCPSynMode=agentSwitchDenialOfServiceTCPSynMode, fastPathDenialOfService=fastPathDenialOfService, agentSwitchDenialOfServiceFirstFragMode=agentSwitchDenialOfServiceFirstFragMode, agentSwitchDenialOfServiceSMACDMACMode=agentSwitchDenialOfServiceSMACDMACMode)
