#
# PySNMP MIB module XYLAN-OAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-OAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, iso, Counter32, ObjectIdentity, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, NotificationType, MibIdentifier, ModuleIdentity, IpAddress, Counter64, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Counter32", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "NotificationType", "MibIdentifier", "ModuleIdentity", "IpAddress", "Counter64", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanOamArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanOamArch")
xylanOam = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 28, 1))
xylanOamF4VPTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1), )
if mibBuilder.loadTexts: xylanOamF4VPTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPTable.setDescription('OAM F4 VP configuration table.')
xylanOamF4VPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1), ).setIndexNames((0, "XYLAN-OAM-MIB", "xylanOamF4VPSlotIndex"), (0, "XYLAN-OAM-MIB", "xylanOamF4VPPortIndex"), (0, "XYLAN-OAM-MIB", "xylanOamF4VPVpiIndex"))
if mibBuilder.loadTexts: xylanOamF4VPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPEntry.setDescription('An entry in the OAM F4 VP configuration table.')
xylanOamF4VPSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPSlotIndex.setDescription('A unique value which identifies CSM board slot.')
xylanOamF4VPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPPortIndex.setDescription('A unique value which identifies CSM module port.')
xylanOamF4VPVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPVpiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPVpiIndex.setDescription('A unique value which identifies this VP connection.')
xylanOamF4VPAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPAdminEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPAdminEnable.setDescription('A value to indicate whether this VP connection is enabled.')
xylanOamF4VPAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPAisEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPAisEnable.setDescription('A value to indicate whether AIS transmission is enabled or disabled for this VP connection.')
xylanOamF4VPRdiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPRdiEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPRdiEnable.setDescription('A value to indicate whether RDI transmission is enabled or disabled for this VP connection.')
xylanOamF4VPContCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPContCheckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPContCheckEnable.setDescription('A value to indicate whether VP Continuity Check is enabled or disabled for this VP connection.')
xylanOamF4VPTrapOnAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPTrapOnAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPTrapOnAlarmEnable.setDescription('A value to indicate whether ATM Layer Trap generation on alarms is enabled or disabled for this VP connection.')
xylanOamF4VPLoopbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackEnable.setDescription('A value to indicate whether Loopback is enabled or disabled for this VP connection.')
xylanOamF4VPLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("end-to-end", 1), ("access-line", 2), ("inter-domain", 3), ("network-to-endpoint", 4), ("intra-domain", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackType.setDescription('A unique value indicates Loopback Type.')
xylanOamF4VPLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("successful", 2), ("unsuccessful", 3), ("responsewaiting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackStatus.setDescription('A unique value indicates Loopback Status.')
xylanOamF4VPContCheckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ready", 1), ("waitingActivate", 2), ("waitingDeactivate", 3), ("active", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPContCheckStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPContCheckStatus.setDescription('A unique value indicates VP Continuity Check Status.')
xylanOamF4VPAisRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPAisRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPAisRxCount.setDescription('A unique value indicates number of received AIS cells on this VP connection.')
xylanOamF4VPAisTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPAisTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPAisTxCount.setDescription('A unique value indicates number of transmitted AIS cells on this VP connection.')
xylanOamF4VPRdiRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPRdiRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPRdiRxCount.setDescription('A unique value indicates number of received RDI cells on this VP connection.')
xylanOamF4VPRdiTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPRdiTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPRdiTxCount.setDescription('A unique value indicates number of transmitted RDI cells on this VP connection.')
xylanOamF4VPLoopbackRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackRxCount.setDescription('A unique value indicates number of received Loopback cells on this VP connection.')
xylanOamF4VPLoopbackTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackTxCount.setDescription('A unique value indicates number of transmitted Loopback cells on this VP connection.')
xylanOamF4VPContCheckRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPContCheckRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPContCheckRxCount.setDescription('A unique value indicates number of received Continuity Check cells on this VP connection.')
xylanOamF4VPContCheckTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPContCheckTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPContCheckTxCount.setDescription('A unique value indicates number of received Continuity Check cells on this VP connection.')
xylanOamF4VPLOCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPLOCCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLOCCount.setDescription('A unique value indicates number of Loss of Continuity on this VP connection.')
xylanOamF4VPLoopbackSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackSuccessCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackSuccessCount.setDescription('A unique value indicates number of successful Loopbacks on this VP connection.')
xylanOamF4VPLoopbackFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF4VPLoopbackFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPLoopbackFailureCount.setDescription('A unique value indicates number of unsuccessful Loopbacks on this VP connection.')
xylanOamF4VPSegmentAction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copy", 2), ("extract", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPSegmentAction.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPSegmentAction.setDescription('A unique value indicates the configuration on this VP connection.')
xylanOamF4VPEndtoendAction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copy", 2), ("extract", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF4VPEndtoendAction.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF4VPEndtoendAction.setDescription('A unique value indicates the configuration on this VP connection.')
xylanOamF5VCTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2), )
if mibBuilder.loadTexts: xylanOamF5VCTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCTable.setDescription('OAM F4 VC connection configuration table.')
xylanOamTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3))
xylanOamF5VCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1), ).setIndexNames((0, "XYLAN-OAM-MIB", "xylanOamF5VCSlotIndex"), (0, "XYLAN-OAM-MIB", "xylanOamF5VCPortIndex"), (0, "XYLAN-OAM-MIB", "xylanOamF5VCVpiIndex"), (0, "XYLAN-OAM-MIB", "xylanOamF5VCVciIndex"))
if mibBuilder.loadTexts: xylanOamF5VCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCEntry.setDescription('An entry in the OAM F5 VC connection configuration table.')
xylanOamF5VCSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCSlotIndex.setDescription('A unique value which identifies CSM board slot.')
xylanOamF5VCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCPortIndex.setDescription('A unique value which identifies CSM module port.')
xylanOamF5VCVpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCVpiIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCVpiIndex.setDescription('A unique value which identifies this VC connection.')
xylanOamF5VCVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCVciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCVciIndex.setDescription('A unique value which identifies this VC connection.')
xylanOamF5VCAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCAdminEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCAdminEnable.setDescription('A value to indicate whether this VC connection is enabled.')
xylanOamF5VCAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCAisEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCAisEnable.setDescription('A value to indicate whether AIS tranmission is enabled or disabled for this VC connection.')
xylanOamF5VCRdiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCRdiEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCRdiEnable.setDescription('A value to indicate whether RDI transmission is enabled or disabled for this VC connection.')
xylanOamF5VCContCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCContCheckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCContCheckEnable.setDescription('A value to indicate whether VCC Continuity Check is enabled or disabled for this VC connection.')
xylanOamF5VCTrapOnAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCTrapOnAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCTrapOnAlarmEnable.setDescription('A value to indicate whether ATM Layer trap generation on alarms is enabled or disabled for this VC connection.')
xylanOamF5VCLoopbackEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackEnable.setDescription('A value to indicate whether Loopback is enabled or disabled for this VC connection.')
xylanOamF5VCLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("end-to-end", 1), ("access-line", 2), ("inter-domain", 3), ("network-to-endpoint", 4), ("intra-domain", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackType.setDescription('A unique value indicates Loopback Type.')
xylanOamF5VCLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("successful", 2), ("unsuccessful", 3), ("responsewaiting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackStatus.setDescription('A unique value indicates Loopback Status.')
xylanOamF5VCContCheckStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ready", 1), ("waitingActivate", 2), ("waitingDeactivate", 3), ("active", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCContCheckStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCContCheckStatus.setDescription('A unique value indicates VCC Continuity Check Status.')
xylanOamF5VCAisRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCAisRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCAisRxCount.setDescription('A unique value indicates number of received AIS cells on this VC connection.')
xylanOamF5VCAisTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCAisTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCAisTxCount.setDescription('A unique value indicates number of transmitted AIS cells on this VC connection.')
xylanOamF5VCRdiRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCRdiRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCRdiRxCount.setDescription('A unique value indicates number of received RDI cells on this VC connection.')
xylanOamF5VCRdiTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCRdiTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCRdiTxCount.setDescription('A unique value indicates number of transmitted RDI cells on this VC connection.')
xylanOamF5VCLoopbackRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackRxCount.setDescription('A unique value indicates number of received Loopback cells on this VC connection.')
xylanOamF5VCLoopbackTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackTxCount.setDescription('A unique value indicates number of transmitted Loopback cells on this VC connection.')
xylanOamF5VCContCheckRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCContCheckRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCContCheckRxCount.setDescription('A unique value indicates number of received VCC Continuity Check cells on this VC connection.')
xylanOamF5VCContCheckTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCContCheckTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCContCheckTxCount.setDescription('A unique value indicates number of transmitted VCC Continuity Check cells on this VC connection.')
xylanOamF5VCLOCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCLOCCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLOCCount.setDescription('A unique value indicates number of Loss of Continuity on this VC connection.')
xylanOamF5VCLoopbackSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackSuccessCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackSuccessCount.setDescription('A unique value indicates number of successful loopbacks on this VC connection.')
xylanOamF5VCLoopbackFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanOamF5VCLoopbackFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCLoopbackFailureCount.setDescription('A unique value indicates number of unsuccessful loopbacks on this VC connection.')
xylanOamF5VCSegmentAction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copy", 2), ("extract", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCSegmentAction.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCSegmentAction.setDescription('A unique value indicates the F5 segment configuration on this VC connection.')
xylanOamF5VCEndtoendAction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copy", 2), ("extract", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanOamF5VCEndtoendAction.setStatus('mandatory')
if mibBuilder.loadTexts: xylanOamF5VCEndtoendAction.setDescription('A unique value indicates the F5 Endpoint configuration on this VC connection.')
xylanOamTrapVCAIS = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,1)).setObjects(("XYLAN-OAM-MIB", "xylanOamF5VCSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVpiIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVciIndex"))
if mibBuilder.loadTexts: xylanOamTrapVCAIS.setDescription('This trap signifies that the specified connection is in VC-AIS state.')
xylanOamTrapVCRDI = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,2)).setObjects(("XYLAN-OAM-MIB", "xylanOamF5VCSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVpiIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVciIndex"))
if mibBuilder.loadTexts: xylanOamTrapVCRDI.setDescription('This trap signifies that the specified connection is in VC-RDI state.')
xylanOamTrapVCLOC = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,3)).setObjects(("XYLAN-OAM-MIB", "xylanOamF5VCSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVpiIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVciIndex"))
if mibBuilder.loadTexts: xylanOamTrapVCLOC.setDescription('This trap signifies that the specified connection is in VC-LOC state.')
xylanOamTrapVCUnsuccessLoop = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,4)).setObjects(("XYLAN-OAM-MIB", "xylanOamF5VCSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVpiIndex"), ("XYLAN-OAM-MIB", "xylanOamF5VCVciIndex"))
if mibBuilder.loadTexts: xylanOamTrapVCUnsuccessLoop.setDescription('This trap signifies that the specified connection is unsuccessful Loopback state.')
xylanOamTrapVPAIS = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,5)).setObjects(("XYLAN-OAM-MIB", "xylanOamF4VPSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPVpiIndex"))
if mibBuilder.loadTexts: xylanOamTrapVPAIS.setDescription('This trap signifies that the specified VP connection is in VP-AIS state.')
xylanOamTrapVPRDI = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,6)).setObjects(("XYLAN-OAM-MIB", "xylanOamF4VPSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPVpiIndex"))
if mibBuilder.loadTexts: xylanOamTrapVPRDI.setDescription('This trap signifies that the specified VP connection is in VP-RDI state.')
xylanOamTrapVPLOC = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,7)).setObjects(("XYLAN-OAM-MIB", "xylanOamF4VPSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPVpiIndex"))
if mibBuilder.loadTexts: xylanOamTrapVPLOC.setDescription('This trap signifies that the specified VP connection is in VP-LOC state.')
xylanOamTrapVPUnsuccessLoop = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 28, 1, 3) + (0,8)).setObjects(("XYLAN-OAM-MIB", "xylanOamF4VPSlotIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPPortIndex"), ("XYLAN-OAM-MIB", "xylanOamF4VPVpiIndex"))
if mibBuilder.loadTexts: xylanOamTrapVPUnsuccessLoop.setDescription('This trap signifies that the specified VP connection is in Unsuccessful loopback state.')
mibBuilder.exportSymbols("XYLAN-OAM-MIB", xylanOamF4VPRdiRxCount=xylanOamF4VPRdiRxCount, xylanOamTrapVCLOC=xylanOamTrapVCLOC, xylanOamTrapVPAIS=xylanOamTrapVPAIS, xylanOamF5VCVpiIndex=xylanOamF5VCVpiIndex, xylanOamF5VCAdminEnable=xylanOamF5VCAdminEnable, xylanOamF4VPRdiTxCount=xylanOamF4VPRdiTxCount, xylanOamTrapVCRDI=xylanOamTrapVCRDI, xylanOamF4VPPortIndex=xylanOamF4VPPortIndex, xylanOamF5VCSlotIndex=xylanOamF5VCSlotIndex, xylanOamF4VPContCheckEnable=xylanOamF4VPContCheckEnable, xylanOamF4VPLoopbackTxCount=xylanOamF4VPLoopbackTxCount, xylanOamF4VPContCheckRxCount=xylanOamF4VPContCheckRxCount, xylanOamF4VPVpiIndex=xylanOamF4VPVpiIndex, xylanOamF5VCAisEnable=xylanOamF5VCAisEnable, xylanOamTrapVCAIS=xylanOamTrapVCAIS, xylanOamF4VPTrapOnAlarmEnable=xylanOamF4VPTrapOnAlarmEnable, xylanOamF5VCLoopbackRxCount=xylanOamF5VCLoopbackRxCount, xylanOamF5VCLoopbackFailureCount=xylanOamF5VCLoopbackFailureCount, xylanOamF4VPContCheckStatus=xylanOamF4VPContCheckStatus, xylanOamF4VPTable=xylanOamF4VPTable, xylanOamF4VPSegmentAction=xylanOamF4VPSegmentAction, xylanOamTrapVPUnsuccessLoop=xylanOamTrapVPUnsuccessLoop, xylanOamF5VCLoopbackSuccessCount=xylanOamF5VCLoopbackSuccessCount, xylanOamF4VPLoopbackRxCount=xylanOamF4VPLoopbackRxCount, xylanOamF4VPSlotIndex=xylanOamF4VPSlotIndex, xylanOamF5VCLoopbackEnable=xylanOamF5VCLoopbackEnable, xylanOamF5VCAisTxCount=xylanOamF5VCAisTxCount, xylanOamF5VCRdiEnable=xylanOamF5VCRdiEnable, xylanOamF4VPEntry=xylanOamF4VPEntry, xylanOam=xylanOam, xylanOamF4VPAisTxCount=xylanOamF4VPAisTxCount, xylanOamF4VPContCheckTxCount=xylanOamF4VPContCheckTxCount, xylanOamF5VCTrapOnAlarmEnable=xylanOamF5VCTrapOnAlarmEnable, xylanOamF4VPAisRxCount=xylanOamF4VPAisRxCount, xylanOamF5VCRdiRxCount=xylanOamF5VCRdiRxCount, xylanOamF4VPLoopbackType=xylanOamF4VPLoopbackType, xylanOamF4VPLoopbackSuccessCount=xylanOamF4VPLoopbackSuccessCount, xylanOamF5VCLoopbackStatus=xylanOamF5VCLoopbackStatus, xylanOamF5VCPortIndex=xylanOamF5VCPortIndex, xylanOamF5VCSegmentAction=xylanOamF5VCSegmentAction, xylanOamTrapVPRDI=xylanOamTrapVPRDI, xylanOamF5VCLoopbackTxCount=xylanOamF5VCLoopbackTxCount, xylanOamF5VCLoopbackType=xylanOamF5VCLoopbackType, xylanOamF5VCAisRxCount=xylanOamF5VCAisRxCount, xylanOamF4VPLOCCount=xylanOamF4VPLOCCount, xylanOamF4VPRdiEnable=xylanOamF4VPRdiEnable, xylanOamF4VPLoopbackFailureCount=xylanOamF4VPLoopbackFailureCount, xylanOamF5VCEndtoendAction=xylanOamF5VCEndtoendAction, xylanOamF4VPEndtoendAction=xylanOamF4VPEndtoendAction, xylanOamTrapVCUnsuccessLoop=xylanOamTrapVCUnsuccessLoop, xylanOamF5VCVciIndex=xylanOamF5VCVciIndex, xylanOamF5VCContCheckTxCount=xylanOamF5VCContCheckTxCount, xylanOamF5VCRdiTxCount=xylanOamF5VCRdiTxCount, xylanOamF4VPLoopbackEnable=xylanOamF4VPLoopbackEnable, xylanOamF5VCContCheckEnable=xylanOamF5VCContCheckEnable, xylanOamF4VPAisEnable=xylanOamF4VPAisEnable, xylanOamF5VCEntry=xylanOamF5VCEntry, xylanOamF5VCLOCCount=xylanOamF5VCLOCCount, xylanOamTraps=xylanOamTraps, xylanOamF5VCContCheckRxCount=xylanOamF5VCContCheckRxCount, xylanOamF4VPAdminEnable=xylanOamF4VPAdminEnable, xylanOamTrapVPLOC=xylanOamTrapVPLOC, xylanOamF5VCContCheckStatus=xylanOamF5VCContCheckStatus, xylanOamF4VPLoopbackStatus=xylanOamF4VPLoopbackStatus, xylanOamF5VCTable=xylanOamF5VCTable)
