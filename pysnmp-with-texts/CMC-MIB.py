#
# PySNMP MIB module CMC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CMC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, TimeTicks, ObjectIdentity, enterprises, Integer32, MibIdentifier, Counter64, NotificationType, Unsigned32, iso, Bits, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "TimeTicks", "ObjectIdentity", "enterprises", "Integer32", "MibIdentifier", "Counter64", "NotificationType", "Unsigned32", "iso", "Bits", "ModuleIdentity", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class IpxAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(14, 14)
    fixedLength = 14

cmc = MibIdentifier((1, 3, 6, 1, 4, 1, 44))
cmc_prod = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 1)).setLabel("cmc-prod")
cmc_adapt = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 1, 1)).setLabel("cmc-adapt")
cmc_system = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 1, 2)).setLabel("cmc-system")
cmc_soft = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 1, 3)).setLabel("cmc-soft")
cmc_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2)).setLabel("cmc-mgmt")
cmc_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1)).setLabel("cmc-mib")
cmc_trapA = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 6)).setLabel("cmc-trapA")
cmc_trapB = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 6, 6)).setLabel("cmc-trapB")
cmc_trapC = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 6, 6, 5)).setLabel("cmc-trapC")
cmc_trapD = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 6, 6, 5, 3)).setLabel("cmc-trapD")
cmc_trapE = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 6, 6, 5, 3, 10)).setLabel("cmc-trapE")
cmc_ip = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 4)).setLabel("cmc-ip")
cmc_ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5)).setLabel("cmc-ipx")
cmc_ipx_ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1)).setLabel("cmc-ipx-ipx")
cmc_ipx_ipxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1)).setLabel("cmc-ipx-ipxSystem")
cmc_ipx_ipxCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2)).setLabel("cmc-ipx-ipxCircuit")
cmc_ipx_ipxForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3)).setLabel("cmc-ipx-ipxForwarding")
cmc_ipx_ipxServices = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4)).setLabel("cmc-ipx-ipxServices")
cmc_ipx_filter = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2)).setLabel("cmc-ipx-filter")
cmc_ipx_filt_packet = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2)).setLabel("cmc-ipx-filt-packet")
cmc_ipx_filt_rip = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4)).setLabel("cmc-ipx-filt-rip")
cmc_ipx_filt_sap = MibIdentifier((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6)).setLabel("cmc-ipx-filt-sap")
cmcIpInAdminDiscards = MibScalar((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIpInAdminDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpInAdminDiscards.setDescription('The number of incoming datagrams dropped due to administrative prohibitions.')
cmcIpOutAdminDiscards = MibScalar((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIpOutAdminDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpOutAdminDiscards.setDescription('The number of outgoing datagrams dropped due to administrative prohibitions.')
cmcIpFiltStatus = MibScalar((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltStatus.setDescription('The status of IP Filtering.')
cmcIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5), )
if mibBuilder.loadTexts: cmcIpFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFilterTable.setDescription('A list of IP Filter table entries.')
cmcIpFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1), ).setIndexNames((0, "CMC-MIB", "cmcIpFiltName"))
if mibBuilder.loadTexts: cmcIpFiltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltEntry.setDescription('An IP Filter table entry containing objects that describe datagram transmission/reception restrictions. Creation of an IP Filter table entry requires the presence of the cmcIpFiltName and cmcIpFiltMode objects along with at least one of the following objects: cmcIpFiltSAddr cmcIpFiltSPort cmcIpFiltDAddr cmcIpFiltDPort cmcIpFiltProto cmcIpFiltIfIndex')
cmcIpFiltName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltName.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltName.setDescription('Name of filter entry. This is an ASCII string up to 6 octets long.')
cmcIpFiltPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIpFiltPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltPriority.setDescription('The priority of the entry. The highest priority entry (1) is searched first. The second highest priority entry (2) is searched next, and so on.')
cmcIpFiltSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltSAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltSAddr.setDescription('Source IP address for the filter entry')
cmcIpFiltSMask = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltSMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltSMask.setDescription('Source IP mask for the filter entry.')
cmcIpFiltSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltSPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltSPort.setDescription('Source port for the filter entry.')
cmcIpFiltDAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltDAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltDAddr.setDescription('Destination IP address for the filter entry.')
cmcIpFiltDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltDMask.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltDMask.setDescription('Destination IP mask for the filter entry.')
cmcIpFiltDPort = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltDPort.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltDPort.setDescription('Destination port for the filter entry.')
cmcIpFiltProto = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltProto.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltProto.setDescription('Protocol to filter.')
cmcIpFiltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("nodial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltMode.setDescription('Mode of the filter entry.')
cmcIpFiltErrMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltErrMsg.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltErrMsg.setDescription('Configuration object used to control the transmission of ICMP error messages when datagrams are administratively filtered.')
cmcIpFiltType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("invalid", 2), ("netmgmt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltType.setDescription('The type of the IP Filter Table entry. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the cmcIpFilterTable. The invalid(2) value is not supported for row creates. The netmgt(3) value is the default value for row creates.')
cmcIpFiltMoveOper = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltMoveOper.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltMoveOper.setDescription('Configuration object used to move IP Filter table entries (to obtain a different priority for the entry). Parameters are defined as: Octet 0 describes the move operation [1, 2] = [Before, After] Octets 1 - 6 contain an existing IP Filter Entry name.')
cmcIpFiltUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltUseCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltUseCount.setDescription('The number of times the IP Filter Table entry has been referenced.')
cmcIpFiltDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltDirection.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltDirection.setDescription('The flow direction for the filter entry.')
cmcIpFiltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 4, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpFiltIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpFiltIfIndex.setDescription('The interface index associated with the filter entry. This value is equivalent to the ifIndex object.')
cmcConnectionEstablished = NotificationType((1, 3, 6, 1, 4, 1, 44, 2, 6, 6, 5, 3, 10) + (0,1))
if mibBuilder.loadTexts: cmcConnectionEstablished.setDescription('A cmcConnectionEstablished(1) trap is generated when a wide area network connection is established on a dynamic link. The variable-binding contains the ifIndex value of the effected interface.')
cmcConnectionTerminated = NotificationType((1, 3, 6, 1, 4, 1, 44, 2, 6, 6, 5, 3, 10) + (0,2))
if mibBuilder.loadTexts: cmcConnectionTerminated.setDescription('A cmcConnectionTerminated(2) trap is generated when a wide area network connection is terminated on a dynamic link. The variable-binding contains the ifIndex value of the effected interface.')
ipxSysTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1), )
if mibBuilder.loadTexts: ipxSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysTable.setDescription('The IPX System table.')
ipxSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1), ).setIndexNames((0, "CMC-MIB", "ipxSysInstance"))
if mibBuilder.loadTexts: ipxSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysEntry.setDescription('Each entry corresponds to one instance of IPX running on the system.')
ipxSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds. The value may be written only when creating a new entry in the table.')
ipxSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSysExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysExistState.setDescription("The validity of this entry in the IPX system table. Setting this field to off indicates that this entry may be deleted from the system table at the IPX implementation's discretion.")
ipxSysIntNetNumExists = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysIntNetNumExists.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysIntNetNumExists.setDescription('Indicates whether this instance of IPX has an internal network number.')
ipxSysIntNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSysIntNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysIntNetNum.setDescription('The IPX internal network number of this instance of IPX. This value is undefined if the value of ipxSysIntNetNumExists is no.')
ipxSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSysName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysName.setDescription('The readable name for this system.')
ipxSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSysMaxPathSplits.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysMaxPathSplits.setDescription('The maximum number of path with equal routing metric value which this instance of IPX may split between when forwarding packets.')
ipxSysMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxSysMaxHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysMaxHops.setDescription('The maximum number of hops a packet may take.')
ipxSysVersionMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysVersionMajor.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysVersionMajor.setDescription('The major version number of IPX supported.')
ipxSysVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysVersionMinor.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysVersionMinor.setDescription('The minor version number of IPX supported.')
ipxSysInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInReceives.setDescription('The total number of IPX packets received, including those received in error.')
ipxSysInTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInTooManyHops.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInTooManyHops.setDescription('The number of IPX packets discarded due to exceeding the maximum hop count.')
ipxSysInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInHdrErrors.setDescription('The number of IPX packets discarded due to errors in their headers, including any IPX packet with a size less than the minimum of 30 bytes.')
ipxSysInUnknownSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInUnknownSockets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInUnknownSockets.setDescription('The number of IPX packets discarded because the destination socket was not open.')
ipxSysInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInFiltered.setDescription('The number of incoming IPX packets discarded due to filtering.')
ipxSysInCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInCompressDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInCompressDiscards.setDescription('The number of incoming IPX packets discarded due to decompression errors.')
ipxSysInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInDiscards.setDescription('The number of IPX packets received but discarded die to processing decision.')
ipxSysInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysInDelivers.setDescription('The total number of IPX packets delivered locally, including packets from local applications.')
ipxSysNETBIOSPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysNETBIOSPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysNETBIOSPackets.setDescription('Number of NETBIOS packets.')
ipxSysForwPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysForwPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysForwPackets.setDescription('The number of IPX packets forwarded.')
ipxSysOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutRequests.setDescription('The number of IPX packets supplied locally for transmission, not including any packets counted in ipxForwPackets.')
ipxSysOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutNoRoutes.setDescription('The number of outgoing IPX packets discarded because no route was found.')
ipxSysOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutFiltered.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutFiltered.setDescription('The number of outgoing IPX packets discarded due to filtering.')
ipxSysOutCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutCompressDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutCompressDiscards.setDescription('The number of outgoing IPX packets discarded due to compression errors.')
ipxSysOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutMalformedRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutMalformedRequests.setDescription('The number of IPX packets supplied locally contained errors in their structure.')
ipxSysOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutDiscards.setDescription('The number of outgoing IPX packets discarded due to processing decision.')
ipxSysOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOutPackets.setDescription('The total number of IPX packets transmitted.')
ipxSysCircCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysCircCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysCircCount.setDescription('The number of circuits known to this instance of IPX.')
ipxSysDestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysDestCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysDestCount.setDescription('The number of currently reachable destinations known to this instance of IPX.')
ipxSysServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysServCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysServCount.setDescription('The number of services known to this instance of IPX.')
ipxSysResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysResourceFailures.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysResourceFailures.setDescription('The number of times this instance of IPX has been unable to obtain needed resources (memory, etc.).')
ipxSysConfigSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysConfigSockets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysConfigSockets.setDescription('The configured maximum number of sockets that may be opened at one time.')
ipxSysMaxOpenSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysMaxOpenSockets.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysMaxOpenSockets.setDescription('The maximum number of IPX sockets actually open at one time by this system.')
ipxSysOpenSocketFails = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxSysOpenSocketFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipxSysOpenSocketFails.setDescription('The number of IPX soclet open calls which failed.')
ipxCircTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: ipxCircTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircTable.setDescription('The Circuit Table.')
ipxCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "CMC-MIB", "ipxCircSysInstance"), (0, "CMC-MIB", "ipxCircIndex"))
if mibBuilder.loadTexts: ipxCircEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircEntry.setDescription('Each entry corresponds to one circuit known to the system.')
ipxCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds. This value may be written only when creating a new entry in the table.')
ipxCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircIndex.setDescription('The identifier of ths circuit, unique within the instance of IPX. This value may be written only when creating a new table entry.')
ipxCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircExistState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircExistState.setDescription("The validity of this circuit entry. A circuit with this value set to off may be deleted from the table at the IPX implementation's discretion.")
ipxCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircOperState.setDescription('The operational state of the circuit.')
ipxCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircIfIndex.setDescription('The value of IfIndex for the interface used by this circuit. This value may be written only when creating a new entry in the table.')
ipxCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircName.setDescription('The readable name for the circuit.')
ipxCircInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircInfo.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircInfo.setDescription('Additional readable information for the circuit. The content of this field is implementation defined.')
ipxCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("broadcast", 2), ("ptTopt", 3), ("wanRIP", 4), ("unnumberedRIP", 5), ("dynamic", 6), ("wanWS", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircType.setDescription('The type of the circuit.')
ipxCircLocalMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircLocalMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircLocalMaxPacketSize.setDescription('The maximum size (including header), in bytes, that the system supports locally in this circuit.')
ipxCircCompressState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircCompressState.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressState.setDescription('The compression state on the circuit. This value may be written only when creating a new entry in the table.')
ipxCircCompressSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxCircCompressSlots.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressSlots.setDescription('The number of compression slots available on this circuit. This value may be written only when creating a new entry in the table.')
ipxCircCompressedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircCompressedSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircCompressedSent.setDescription('The number of compressed packets sent.')
ipxCircUncompressedSent = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircUncompressedSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircUncompressedSent.setDescription('The number of packets sent without being compressed even though compression was turned on for this circuit.')
ipxCircMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircMediaType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircMediaType.setDescription('The media type used on this circuit.')
ipxCircNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 15), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircNetNumber.setDescription('The IPX network number to which this circuit is bound.')
ipxCircStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircStateChanges.setDescription('The number of times the circuit has changed state.')
ipxCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircInitFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircInitFails.setDescription('The number of times that initialization of this circuit has failed.')
ipxCircDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircDelay.setDescription('The period of time, in milliseconds, that it takes to transmit one byte of data, excluding protocol headers, to a destination on the other end of the circuit, if the circuit is free of other traffic.')
ipxCircThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxCircThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ipxCircThroughput.setDescription('The amount of data, in bits per second, that may flow through the circuit if there is no other traffic.')
ipxDestTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1), )
if mibBuilder.loadTexts: ipxDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestTable.setDescription('The Destination Table contains information about all known destinations.')
ipxDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1), ).setIndexNames((0, "CMC-MIB", "ipxDestSysInstance"), (0, "CMC-MIB", "ipxDestNetNum"))
if mibBuilder.loadTexts: ipxDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestEntry.setDescription('Each entry corresponds to one destination.')
ipxDestSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestSysInstance.setDescription('The unique identifier of the instance of IPX to which this row corresponds. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 2), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNetNum.setDescription('The IPX network number of the destination. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("rip", 3), ("nlsp", 4), ("static", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestProtocol.setDescription('The routing protocol from which knowledge of this destination was obtained. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestCost = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestCost.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestCost.setDescription('The cost to reach this destination. The meaning of the cost value is dependent on the routing protocol (i.e. Cost = delay in ticks for RIP, Cost = total path default cost for NLSP, etc.). This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestHopCount.setDescription('The number of hops necessary to reach the destination. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestNextHopCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopCircIndex.setDescription('The unique identifier of the circuit used to read the next hop. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestNextHopNICAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopNICAddress.setDescription('The NIC address of the next hop. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestNextHopNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 8), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestNextHopNetNum.setDescription('The IPX network number of the next hop. This value may be written only when creating a new entry with ipxDestProtocol equal to static.')
ipxDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2), ("router", 4), ("network", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxDestType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxDestType.setDescription('Indicates whether the destination is a network of a router.')
ipxServTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: ipxServTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServTable.setDescription('The table of services, indexed by name and type.')
ipxServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "CMC-MIB", "ipxServSysInstance"), (0, "CMC-MIB", "ipxServName"), (0, "CMC-MIB", "ipxServTypeValue"))
if mibBuilder.loadTexts: ipxServEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServEntry.setDescription('Each entry corresponds to one service.')
ipxServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServSysInstance.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServSysInstance.setDescription('The unique identifier of the instance of IPX to which this entry corresponds. This value may be written only when creating entries with the value of ipxServProtocol equal to static.')
ipxServName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServName.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServName.setDescription('The service name. This value may be written only when creating entries with value of ipxServProtocol equal to static.')
ipxServTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServTypeValue.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServTypeValue.setDescription("The service type's hexadecimal value. This value may be written only when creating entries with the value of ipxServProtocol equal to static.")
ipxServType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unknown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServType.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServType.setDescription('The service type. This value may be written only when creating entries with the value of ipxServProtocol equal to static.')
ipxServProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("nlsp", 4), ("static", 5), ("sap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServProtocol.setDescription('The protocol from which knowledge of this service was obtained. This valuemay be written only when creating entries with ipxServProtocol equal to static.')
ipxServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 6), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServNetNum.setDescription('The IPX network number portion of the IPX address of the service. This value may be written only when creating entries with the value of ipxServProtocol equal to static.')
ipxServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServNode.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServNode.setDescription('The node portion of the IPX address. This value may be written only when creating entries with the value of ipxServProtocol equal to static.')
ipxServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 1, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServSocket.setStatus('mandatory')
if mibBuilder.loadTexts: ipxServSocket.setDescription('The socket portion of the IPX address of the service. This value may be written only when creating entries with the value of ipxServProtocol equal to static.')
cmcIpxFiltStatus = MibScalar((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltStatus.setDescription('The status of IPX Filtering.')
cmcIpxFilterTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1), )
if mibBuilder.loadTexts: cmcIpxFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFilterTable.setDescription('A list of IPX Filter table entries.')
cmcIpxFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1), ).setIndexNames((0, "CMC-MIB", "cmcIpxFiltName"))
if mibBuilder.loadTexts: cmcIpxFiltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltEntry.setDescription('An IPX Filter table entry containing objects that describe ipx packet transmission / reception restrictions. Creation of an IPX Filter table entry requires the presence of the cmcIpxFiltName and cmcIpxFiltMode objects along with at least one of the following objects: cmcIpxFiltSAddr cmcIpxFiltDAddr cmcIpxFiltPktType cmcIpxFiltIfIndex')
cmcIpxFiltName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltName.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltName.setDescription('Name of filter entry. This is an ASCII string up to 6 octets long. This object is required in SET PDUs.')
cmcIpxFiltSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 2), IpxAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAddr.setDescription('Source IPX address. This object is required in SET PDUs.')
cmcIpxFiltDAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 3), IpxAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltDAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltDAddr.setDescription('Destination IPX address. This object is required in SET PDUs.')
cmcIpxFiltPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltPktType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltPktType.setDescription('Protocol to filter. This object is required in SET PDUs.')
cmcIpxFiltMode = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("nodial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltMode.setDescription('Mode of the filter entry. This object is required in SET PDUs.')
cmcIpxFiltType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("invalid", 2), ("netmgmt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltType.setDescription('The type of the IPX Filter Table entry. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the cmcIpxFilterTable.')
cmcIpxFiltMoveOper = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltMoveOper.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltMoveOper.setDescription('Configuration object used to move IPX Filter table entries. Parameters are defined as: Octet 0 describes the move operation [1, 2] = [Before, After] Octet 1 - 6 contain the IPX Filter Entry name.')
cmcIpxFiltUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltUseCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltUseCount.setDescription('The number of times the IPX Filter Table entry has been referenced.')
cmcIpxFiltDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltDirection.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltDirection.setDescription('The flow direction for the filter entry. This object must be specified along with an interface.')
cmcIpxFiltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltIfIndex.setDescription('The interface index associated with the filter entry. This value is equivalent to the ifIndex object.')
cmcIpxFiltPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIpxFiltPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltPriority.setDescription('The priority of the entry. The highest priority entry (1) is searched first. The second highest priority entry (2) is searched next, and so on.')
cmcIpxFiltState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltState.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltState.setDescription('The validity of this entry in the IPX Packet Filter table. Setting this field to off indicates that this entry may be deleted from the table.')
cmcIpxFiltRIPStatus = MibScalar((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPStatus.setDescription('The status of IPX RIP Filtering.')
cmcIpxFilterRIPTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1), )
if mibBuilder.loadTexts: cmcIpxFilterRIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFilterRIPTable.setDescription('A list of IPX Filter RIP table entries.')
cmcIpxFiltRIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1), ).setIndexNames((0, "CMC-MIB", "cmcIpxFiltRIPName"))
if mibBuilder.loadTexts: cmcIpxFiltRIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPEntry.setDescription('An IPX RIP Filter table entry containing objects that describe datagram transmission/ reception restrictions. Creation of an IPX RIP Filter table entry requires the presence of the cmcIpxFiltRIPName and cmcIpxFiltRIPMode objects')
cmcIpxFiltRIPName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPName.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPName.setDescription('Name of RIP filter entry. This is an ASCII string up to 6 octets long. This object is required in SET PDUs.')
cmcIpxFiltRIPNetworkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 2), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPNetworkNum.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPNetworkNum.setDescription('Network address. This object is required in SET PDUs.')
cmcIpxFiltRIPMoveOper = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPMoveOper.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPMoveOper.setDescription('Configuration object used to move IPX RIP Filter table entries. Parameters are defined as: Octet 0 describes the move operation [1, 2] = [Before, After] Octet 1 - 6 contain the IPX RIP Filter name.')
cmcIpxFiltRIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("nodial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPMode.setDescription('Mode of the filter entry. This object is required in SET PDUs.')
cmcIpxFiltRIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("invalid", 2), ("netmgmt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPType.setDescription('The type of the IPX RIP Filter Table entry. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the cmcIpxFilterRIPTable.')
cmcIpxFiltRIPUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPUseCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPUseCount.setDescription('The number of times the IPX RIP Filter Table entry has been referenced.')
cmcIpxFiltRIPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPDirection.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPDirection.setDescription('The flow direction for the filter entry. This object must be specified along with an interface.')
cmcIpxFiltRIPQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("request", 1), ("response", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPQueryType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPQueryType.setDescription('The type of packet entry. This object must be specified along with an interface.')
cmcIpxFiltRIPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPIfIndex.setDescription('The interface index associated with the filter entry.')
cmcIpxFiltRIPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIpxFiltRIPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPPriority.setDescription('The priority of the entry. The highest priority entry (1) is searched first. The second highest priority entry (2) is searched next, and so on.')
cmcIpxFiltRIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltRIPState.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltRIPState.setDescription('The validity of this entry in the IPX RIP Filter table. Setting this field to off indicates that this entry may be deleted from the table.')
cmcIpxFiltSAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPStatus.setDescription('The status of IPX SAP Filtering.')
cmcIpxFilterSAPTable = MibTable((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1), )
if mibBuilder.loadTexts: cmcIpxFilterSAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFilterSAPTable.setDescription('A list of IPX Filter SAP table entries.')
cmcIpxFiltSAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1), ).setIndexNames((0, "CMC-MIB", "cmcIpxFiltSAPName"))
if mibBuilder.loadTexts: cmcIpxFiltSAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPEntry.setDescription('An IPX SAP Filter table entry containing objects that describe datagram transmission/ reception restrictions. Creation of an IPX SAP Filter table entry requires the presence of the cmcIpxFiltSAPName and cmcIpxFiltSAPMode objects')
cmcIpxFiltSAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPName.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPName.setDescription('Name of SAP filter entry. This is an ASCII string up to 6 octets long. This object is required in SET PDUs.')
cmcIpxFiltSAPServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPServerName.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPServerName.setDescription('Name of SAP server.')
cmcIpxFiltSAPServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPServerType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPServerType.setDescription('The types of servers to filter.')
cmcIpxFiltSAPMoveOper = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPMoveOper.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPMoveOper.setDescription('Configuration object used to move IPX SAP Filter table entries. Parameters are defined as: Octet 0 describes the move operation [1, 2] = [Before, After] Octet 1 - 6 contain the IPX SAP Filter name.')
cmcIpxFiltSAPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("nodial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPMode.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPMode.setDescription('Mode of the filter entry. This object is required in SET PDUs.')
cmcIpxFiltSAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("invalid", 2), ("netmgmt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPType.setDescription('The type of the IPX SAP Filter Table entry. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the cmcIpxFilterSAPTable.')
cmcIpxFiltSAPUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPUseCount.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPUseCount.setDescription('The number of times the IPX SAP Filter Table entry has been referenced.')
cmcIpxFiltSAPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPDirection.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPDirection.setDescription('The flow direction for the filter entry. This object must be specified along with an interface.')
cmcIpxFiltSAPQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("request", 1), ("response", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPQueryType.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPQueryType.setDescription('The type of packet entry. This object must be specified along with an interface.')
cmcIpxFiltSAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPIfIndex.setDescription('The interface index associated with the filter entry.')
cmcIpxFiltSAPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIpxFiltSAPPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPPriority.setDescription('The priority of the entry. The highest priority entry (1) is searched first. The second highest priority entry (2) is searched next, and so on.')
cmcIpxFiltSAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 44, 2, 1, 5, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIpxFiltSAPState.setStatus('mandatory')
if mibBuilder.loadTexts: cmcIpxFiltSAPState.setDescription('The validity of this entry in the IPX SAP Filter table. Setting this field to off indicates that this entry may be deleted from the table.')
mibBuilder.exportSymbols("CMC-MIB", ipxDestEntry=ipxDestEntry, ipxCircSysInstance=ipxCircSysInstance, ipxCircCompressState=ipxCircCompressState, cmcIpxFiltRIPType=cmcIpxFiltRIPType, ipxSysName=ipxSysName, cmcIpFiltDirection=cmcIpFiltDirection, ipxCircNetNumber=ipxCircNetNumber, ipxSysInHdrErrors=ipxSysInHdrErrors, cmcIpxFiltSAPPriority=cmcIpxFiltSAPPriority, cmcIpxFiltSAddr=cmcIpxFiltSAddr, ipxServEntry=ipxServEntry, cmcIpxFiltSAPServerName=cmcIpxFiltSAPServerName, cmcIpxFiltPktType=cmcIpxFiltPktType, ipxSysOutRequests=ipxSysOutRequests, cmcIpxFiltUseCount=cmcIpxFiltUseCount, ipxCircInitFails=ipxCircInitFails, cmcIpxFilterSAPTable=cmcIpxFilterSAPTable, cmc_prod=cmc_prod, ipxSysOutNoRoutes=ipxSysOutNoRoutes, cmc_ipx_ipxForwarding=cmc_ipx_ipxForwarding, ipxServName=ipxServName, ipxCircMediaType=ipxCircMediaType, cmcIpxFiltSAPMoveOper=cmcIpxFiltSAPMoveOper, cmc_ip=cmc_ip, cmcIpFiltEntry=cmcIpFiltEntry, cmcIpxFiltPriority=cmcIpxFiltPriority, ipxSysOutFiltered=ipxSysOutFiltered, ipxDestNextHopNICAddress=ipxDestNextHopNICAddress, cmcIpFiltSAddr=cmcIpFiltSAddr, ipxServType=ipxServType, ipxSysConfigSockets=ipxSysConfigSockets, cmc_adapt=cmc_adapt, cmcIpxFiltRIPStatus=cmcIpxFiltRIPStatus, ipxCircTable=ipxCircTable, cmcIpxFiltRIPQueryType=cmcIpxFiltRIPQueryType, ipxSysServCount=ipxSysServCount, cmcIpFiltErrMsg=cmcIpFiltErrMsg, ipxSysOutPackets=ipxSysOutPackets, cmcIpxFiltDirection=cmcIpxFiltDirection, ipxServNetNum=ipxServNetNum, cmcIpFilterTable=cmcIpFilterTable, cmcIpFiltSPort=cmcIpFiltSPort, ipxSysOpenSocketFails=ipxSysOpenSocketFails, ipxSysMaxOpenSockets=ipxSysMaxOpenSockets, NetNumber=NetNumber, cmcIpxFiltDAddr=cmcIpxFiltDAddr, ipxCircIfIndex=ipxCircIfIndex, cmc_ipx_filt_packet=cmc_ipx_filt_packet, ipxCircName=ipxCircName, cmcIpxFiltStatus=cmcIpxFiltStatus, cmcIpFiltDMask=cmcIpFiltDMask, cmc_trapA=cmc_trapA, ipxDestCost=ipxDestCost, ipxDestType=ipxDestType, ipxSysMaxHops=ipxSysMaxHops, cmcIpFiltType=cmcIpFiltType, cmc_trapD=cmc_trapD, cmc_ipx_ipxServices=cmc_ipx_ipxServices, cmc_soft=cmc_soft, cmcIpxFiltRIPDirection=cmcIpxFiltRIPDirection, cmcIpxFiltSAPState=cmcIpxFiltSAPState, ipxDestSysInstance=ipxDestSysInstance, cmcIpFiltDAddr=cmcIpFiltDAddr, cmcIpFiltProto=cmcIpFiltProto, cmc_ipx_ipxSystem=cmc_ipx_ipxSystem, cmcIpxFiltState=cmcIpxFiltState, cmcIpxFilterTable=cmcIpxFilterTable, cmcIpFiltMode=cmcIpFiltMode, ipxSysInUnknownSockets=ipxSysInUnknownSockets, cmcIpxFiltIfIndex=cmcIpxFiltIfIndex, cmcIpxFiltName=cmcIpxFiltName, cmcIpxFiltSAPIfIndex=cmcIpxFiltSAPIfIndex, cmcIpxFiltSAPMode=cmcIpxFiltSAPMode, cmcIpxFiltSAPStatus=cmcIpxFiltSAPStatus, ipxCircInfo=ipxCircInfo, ipxDestNetNum=ipxDestNetNum, cmcIpxFiltEntry=cmcIpxFiltEntry, cmcIpxFiltRIPName=cmcIpxFiltRIPName, ipxCircLocalMaxPacketSize=ipxCircLocalMaxPacketSize, ipxSysInstance=ipxSysInstance, cmc_ipx_filter=cmc_ipx_filter, ipxSysInFiltered=ipxSysInFiltered, ipxSysMaxPathSplits=ipxSysMaxPathSplits, ipxSysOutCompressDiscards=ipxSysOutCompressDiscards, cmcIpOutAdminDiscards=cmcIpOutAdminDiscards, cmcIpxFiltSAPServerType=cmcIpxFiltSAPServerType, cmc_ipx_filt_sap=cmc_ipx_filt_sap, cmcIpxFiltRIPState=cmcIpxFiltRIPState, ipxServTable=ipxServTable, ipxSysOutMalformedRequests=ipxSysOutMalformedRequests, cmcIpxFiltSAPName=cmcIpxFiltSAPName, cmcIpFiltUseCount=cmcIpFiltUseCount, ipxSysIntNetNum=ipxSysIntNetNum, ipxSysInDiscards=ipxSysInDiscards, ipxServSysInstance=ipxServSysInstance, cmcConnectionEstablished=cmcConnectionEstablished, ipxSysResourceFailures=ipxSysResourceFailures, cmcIpxFiltMoveOper=cmcIpxFiltMoveOper, ipxCircEntry=ipxCircEntry, cmcIpFiltSMask=cmcIpFiltSMask, cmcIpxFilterRIPTable=cmcIpxFilterRIPTable, ipxCircCompressSlots=ipxCircCompressSlots, cmcIpxFiltSAPUseCount=cmcIpxFiltSAPUseCount, cmc_ipx_ipx=cmc_ipx_ipx, cmcIpxFiltType=cmcIpxFiltType, IpxAddress=IpxAddress, ipxSysInTooManyHops=ipxSysInTooManyHops, cmc_ipx_filt_rip=cmc_ipx_filt_rip, ipxSysNETBIOSPackets=ipxSysNETBIOSPackets, cmcIpxFiltRIPNetworkNum=cmcIpxFiltRIPNetworkNum, cmcIpxFiltSAPType=cmcIpxFiltSAPType, ipxServNode=ipxServNode, cmcIpxFiltSAPDirection=cmcIpxFiltSAPDirection, cmcIpxFiltRIPMode=cmcIpxFiltRIPMode, cmc_trapE=cmc_trapE, ipxSysTable=ipxSysTable, cmcIpxFiltRIPEntry=cmcIpxFiltRIPEntry, cmcIpInAdminDiscards=cmcIpInAdminDiscards, cmcIpFiltMoveOper=cmcIpFiltMoveOper, cmcIpFiltIfIndex=cmcIpFiltIfIndex, ipxServProtocol=ipxServProtocol, ipxSysInCompressDiscards=ipxSysInCompressDiscards, cmcIpFiltStatus=cmcIpFiltStatus, ipxCircCompressedSent=ipxCircCompressedSent, cmc_trapB=cmc_trapB, ipxCircDelay=ipxCircDelay, cmcIpxFiltSAPQueryType=cmcIpxFiltSAPQueryType, ipxSysInDelivers=ipxSysInDelivers, ipxSysInReceives=ipxSysInReceives, ipxDestProtocol=ipxDestProtocol, ipxSysEntry=ipxSysEntry, cmc_system=cmc_system, cmcIpFiltName=cmcIpFiltName, ipxDestNextHopNetNum=ipxDestNextHopNetNum, ipxCircExistState=ipxCircExistState, cmcIpxFiltMode=cmcIpxFiltMode, cmcIpFiltDPort=cmcIpFiltDPort, cmcIpxFiltSAPEntry=cmcIpxFiltSAPEntry, ipxCircIndex=ipxCircIndex, ipxCircStateChanges=ipxCircStateChanges, ipxDestNextHopCircIndex=ipxDestNextHopCircIndex, ipxDestTable=ipxDestTable, cmcIpxFiltRIPUseCount=cmcIpxFiltRIPUseCount, ipxCircThroughput=ipxCircThroughput, cmc=cmc, ipxSysVersionMinor=ipxSysVersionMinor, ipxSysDestCount=ipxSysDestCount, ipxServSocket=ipxServSocket, ipxSysOutDiscards=ipxSysOutDiscards, cmc_mib=cmc_mib, cmcIpxFiltRIPPriority=cmcIpxFiltRIPPriority, cmcConnectionTerminated=cmcConnectionTerminated, ipxSysVersionMajor=ipxSysVersionMajor, cmc_ipx=cmc_ipx, ipxDestHopCount=ipxDestHopCount, cmcIpFiltPriority=cmcIpFiltPriority, cmc_mgmt=cmc_mgmt, ipxCircOperState=ipxCircOperState, ipxSysIntNetNumExists=ipxSysIntNetNumExists, ipxCircType=ipxCircType, ipxSysForwPackets=ipxSysForwPackets, ipxSysCircCount=ipxSysCircCount, ipxCircUncompressedSent=ipxCircUncompressedSent, cmcIpxFiltRIPMoveOper=cmcIpxFiltRIPMoveOper, cmc_ipx_ipxCircuit=cmc_ipx_ipxCircuit, ipxServTypeValue=ipxServTypeValue, cmc_trapC=cmc_trapC, ipxSysExistState=ipxSysExistState, cmcIpxFiltRIPIfIndex=cmcIpxFiltRIPIfIndex)
