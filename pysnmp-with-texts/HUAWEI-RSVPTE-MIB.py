#
# PySNMP MIB module HUAWEI-RSVPTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-RSVPTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SessionType, BurstSize, BitRate, QosService, MessageSize = mibBuilder.importSymbols("INTEGRATED-SERVICES-MIB", "SessionType", "BurstSize", "BitRate", "QosService", "MessageSize")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, TimeTicks, Counter64, NotificationType, Gauge32, Bits, ObjectIdentity, Unsigned32, iso, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter64", "NotificationType", "Gauge32", "Bits", "ObjectIdentity", "Unsigned32", "iso", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier")
TextualConvention, DisplayString, TimeInterval, TimeStamp, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TimeInterval", "TimeStamp", "TruthValue", "RowStatus")
hwRsvpTe = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148))
hwRsvpTe.setRevisions(('2014-10-25 17:36', '2014-06-16 14:55', '2013-08-28 17:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwRsvpTe.setRevisionsDescriptions(('V3.00, hwRsvpTeIfStatus from read-only to read-create.', 'V2.02, add traps: hwRsvpTeIfNbrThresholdExceed, hwRsvpTeIfNbrThresholdExceedClear, hwRsvpTeIfNbrTotalCountExceed, hwRsvpTeIfNbrTotalCountExceedClear.', 'V2.01, modify the hwRsvpTeTrapObjectGroup of MODULE-COMPLIANCE hwRsvpTeCompliance.',))
if mibBuilder.loadTexts: hwRsvpTe.setLastUpdated('201410251736Z')
if mibBuilder.loadTexts: hwRsvpTe.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwRsvpTe.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwRsvpTe.setDescription('The MIB module to describe the RSVP Protocol')
hwRsvpTeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1))
hwRsvpTeSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1), )
if mibBuilder.loadTexts: hwRsvpTeSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionTable.setDescription('A table of all sessions seen by a given sys- tem.')
hwRsvpTeSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"))
if mibBuilder.loadTexts: hwRsvpTeSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionEntry.setDescription('A single session seen by a given system.')
hwRsvpTeSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeSessionNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionNumber.setDescription('The number of this session. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 2), SessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionType.setDescription('The type of session (IP4, IP6, IP6 with flow information, etc).')
hwRsvpTeSessionDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionDestAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionDestAddr.setDescription('The destination address used by all senders in this session.')
hwRsvpTeSessionDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionDestAddrLength.setDescription('The CIDR prefix length of the session address, which is 32 for IP4 host and multicast ad- dresses, and 128 for IP6 addresses.')
hwRsvpTeSessionSenders = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionSenders.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionSenders.setDescription('The number of distinct senders currently known to be part of this session.')
hwRsvpTeSessionReceivers = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionReceivers.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionReceivers.setDescription('The number of reservations being requested of this system for this session.')
hwRsvpTeSessionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionRequests.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionRequests.setDescription('The number of reservation requests this system is sending upstream for this session.')
hwRsvpTeSessionTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionTunnelId.setDescription('A 16-bit identifier used in the SESSION that remains constant over the life of the tunnel.')
hwRsvpTeSessionTunnelExtId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionTunnelExtId.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionTunnelExtId.setDescription('An identifier used in the SESSION that remains constant over the life of the tunnel. Normally the identifier is set to all zeros. Ingress nodes that wish to narrow the scope of a SESSION to the ingress-egress pair may place their IPv4 address here as a globally unique identifier. ')
hwRsvpTeSessionLspsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionLspsNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionLspsNumber.setDescription('The number of LSPs that belong to this session.')
hwRsvpTeSessionStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 17, 18))).clone(namedValues=NamedValues(("ff", 10), ("wf", 17), ("se", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSessionStyle.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionStyle.setDescription('An enumerable value to identify the treatment of reservations for different senders within the same session: WF 10001b, FF01010b, SE 10010b.')
hwRsvpTeSenderTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2), )
if mibBuilder.loadTexts: hwRsvpTeSenderTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTable.setDescription('Information describing the state information displayed by senders in PATH messages.')
hwRsvpTeSenderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderNumber"))
if mibBuilder.loadTexts: hwRsvpTeSenderEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderEntry.setDescription("Information describing the state information displayed by a single sender's PATH message.")
hwRsvpTeSenderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeSenderNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderNumber.setDescription('The number of this sender. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeSenderType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 2), SessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderType.setDescription('The type of session (IP4, IP6, IP6 with flow information, etc).')
hwRsvpTeSenderDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderDestAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderDestAddr.setDescription('The destination address used by all senders in this session.')
hwRsvpTeSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAddr.setDescription('The source address used by this sender in this session.')
hwRsvpTeSenderDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderDestAddrLength.setDescription('The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits.')
hwRsvpTeSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits.")
hwRsvpTeSenderHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderHopAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderHopAddr.setDescription('The address used by the previous RSVP hop (which may be the original sender).')
hwRsvpTeSenderHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderHopLih.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderHopLih.setDescription('The Logical Interface Handle used by the pre- vious RSVP hop (which may be the original sender).')
hwRsvpTeSenderInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderInterface.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderInterface.setDescription('The ifIndex value of the interface on which this PATH message was most recently received.')
hwRsvpTeSenderTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 10), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as hwRsvpTeSenderTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed hwRsvpTeSen- derTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower.")
hwRsvpTeSenderTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 11), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecPeakRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue.")
hwRsvpTeSenderTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 12), BurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecBurst.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecBurst.setDescription('The size of the largest burst expected from the sender at a time.')
hwRsvpTeSenderTSpecMinTu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 13), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecMinTu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecMinTu.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
hwRsvpTeSenderTSpecMaxTu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 14), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecMaxTu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTSpecMaxTu.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
hwRsvpTeSenderInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderInterval.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderInterval.setDescription('The interval between refresh messages as ad- vertised by the previous hop.')
hwRsvpTeSenderRsvpHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderRsvpHop.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderRsvpHop.setDescription('If TRUE, the node believes that the previous IP hop is an RSVP hop. If FALSE, the node be- lieves that the previous IP hop may not be an RSVP hop.')
hwRsvpTeSenderPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65532))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderPolicy.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
hwRsvpTeSenderAdspecBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecBreak.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecBreak.setDescription('The global break bit general characterization parameter from the ADSPEC. If TRUE, at least one non-IS hop was detected in the path. If FALSE, no non-IS hops were detected.')
hwRsvpTeSenderAdspecHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecHopCount.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecHopCount.setDescription('The hop count general characterization parame- ter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present')
hwRsvpTeSenderAdspecPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 20), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecPathBw.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecPathBw.setDescription('The path bandwidth estimate general character- ization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present')
hwRsvpTeSenderAdspecMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 21), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecMinLatency.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecMinLatency.setDescription('The minimum path latency general characteriza- tion parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present')
hwRsvpTeSenderAdspecMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 22), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecMtu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecMtu.setDescription('The composed Maximum Transmission Unit general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present')
hwRsvpTeSenderAdspecGuaranteedSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedSvc.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedSvc.setDescription('If TRUE, the ADSPEC contains a Guaranteed Ser- vice fragment. If FALSE, the ADSPEC does not contain a Guaranteed Service fragment.')
hwRsvpTeSenderAdspecGuaranteedBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedBreak.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedBreak.setDescription("If TRUE, the Guaranteed Service fragment has its 'break' bit set, indicating that one or more nodes along the path do not support the guaranteed service. If FALSE, and hwRsvpTe- SenderAdspecGuaranteedSvc is TRUE, the 'break' bit is not set. If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns FALSE or noSuchValue.")
hwRsvpTeSenderAdspecGuaranteedCtot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 25), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedCtot.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedCtot.setDescription("If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the end-to-end composed value for the guaranteed service 'C' parameter. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.")
hwRsvpTeSenderAdspecGuaranteedDtot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 26), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedDtot.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedDtot.setDescription("If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the end-to-end composed value for the guaranteed service 'D' parameter. A return of zero or noSuchValue indicates one of the fol- lowing conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.")
hwRsvpTeSenderAdspecGuaranteedCsum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 27), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedCsum.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedCsum.setDescription("If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the composed value for the guaranteed ser- vice 'C' parameter since the last reshaping point. A return of zero or noSuchValue indi- cates one of the following conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.")
hwRsvpTeSenderAdspecGuaranteedDsum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 28), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedDsum.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedDsum.setDescription("If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the composed value for the guaranteed ser- vice 'D' parameter since the last reshaping point. A return of zero or noSuchValue indi- cates one of the following conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.")
hwRsvpTeSenderAdspecGuaranteedHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedHopCount.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedHopCount.setDescription('If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the service-specific override of the hop count general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecGuaranteedPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 30), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedPathBw.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedPathBw.setDescription('If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the service-specific override of the path bandwidth estimate general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecGuaranteedMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 31), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedMinLatency.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedMinLatency.setDescription('If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the service-specific override of the minimum path latency general characterization parameter from the ADSPEC. A return of zero or noSuch- Value indicates one of the following condi- tions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecGuaranteedMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 32), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedMtu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecGuaranteedMtu.setDescription('If hwRsvpTeSenderAdspecGuaranteedSvc is TRUE, this is the service-specific override of the com- posed Maximum Transmission Unit general charac- terization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecGuaranteedSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecCtrlLoadSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadSvc.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadSvc.setDescription('If TRUE, the ADSPEC contains a Controlled Load Service fragment. If FALSE, the ADSPEC does not contain a Controlled Load Service frag- ment.')
hwRsvpTeSenderAdspecCtrlLoadBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadBreak.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadBreak.setDescription("If TRUE, the Controlled Load Service fragment has its 'break' bit set, indicating that one or more nodes along the path do not support the controlled load service. If FALSE, and hwRsvpTeSenderAdspecCtrlLoadSvc is TRUE, the 'break' bit is not set. If hwRsvpTeSenderAdspecCtrlLoadSvc is FALSE, this returns FALSE or noSuchValue.")
hwRsvpTeSenderAdspecCtrlLoadHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadHopCount.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadHopCount.setDescription('If hwRsvpTeSenderAdspecCtrlLoadSvc is TRUE, this is the service-specific override of the hop count general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecCtrlLoadSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecCtrlLoadPathBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 36), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadPathBw.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadPathBw.setDescription('If hwRsvpTeSenderAdspecCtrlLoadSvc is TRUE, this is the service-specific override of the path bandwidth estimate general characterization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following con- ditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecCtrlLoadSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecCtrlLoadMinLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 37), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadMinLatency.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadMinLatency.setDescription('If hwRsvpTeSenderAdspecCtrlLoadSvc is TRUE, this is the service-specific override of the minimum path latency general characterization parameter from the ADSPEC. A return of zero or noSuch- Value indicates one of the following condi- tions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecCtrlLoadSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderAdspecCtrlLoadMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 38), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadMtu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderAdspecCtrlLoadMtu.setDescription('If hwRsvpTeSenderAdspecCtrlLoadSvc is TRUE, this is the service-specific override of the com- posed Maximum Transmission Unit general charac- terization parameter from the ADSPEC. A return of zero or noSuchValue indicates one of the following conditions: the invalid bit was set the parameter was not present If hwRsvpTeSenderAdspecCtrlLoadSvc is FALSE, this returns zero or noSuchValue.')
hwRsvpTeSenderTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderTtl.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderTtl.setDescription('The TTL value in the RSVP header that was last received.')
hwRsvpTeLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeLspId.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeLspId.setDescription('A 16-bit identifier used in the SENDER_TEMPLATE and the FILTER_SPEC that can be changed to allow a sender to share resources with itself.')
hwRsvpTeSenderMsgIdSndFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdSndFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdSndFlag.setDescription('Indicates that the message sender requests the peer to send an acknowledgment for the message. (0x01: ACK desired.)')
hwRsvpTeSenderMsgIdSndEpoch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdSndEpoch.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdSndEpoch.setDescription('A value that indicates when the Message_Identi- fier sequence has been reset.')
hwRsvpTeSenderMsgIdSndNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdSndNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdSndNumber.setDescription("When combined with the message generator's IP address, the Message_Identifier field uniquely identifies a message. The values placed in this field change incrementally and only decrease when the Epoch changes or when the value wraps. A return of 0 indicates the absence of the MESSAGE_ID object to be sent.")
hwRsvpTeSenderMsgIdRcvFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdRcvFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdRcvFlag.setDescription('The message ID flag of the message latest received. It is used to identify whether ACK is desired or not. And it can be extended. (0x01: ACK desired.)')
hwRsvpTeSenderMsgIdRcvEpoch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdRcvEpoch.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdRcvEpoch.setDescription('The message ID epoch of the message latest received form the interface.')
hwRsvpTeSenderMsgIdRcvNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdRcvNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderMsgIdRcvNumber.setDescription('The message ID number of the message latest received form the interface. A return of 0 indicates the absence of the MESSAGE_ID object received.')
hwRsvpTeSenderClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderClassType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderClassType.setDescription('Indicates the class-type. A return of zero indicates the absence of the object.')
hwRsvpTeSenderLabelRequestCtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withoutLabelRange", 1), ("withAtmLabelRange", 2), ("withFrameRelayLabelRange", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestCtype.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestCtype.setDescription('The type of label request (without label range, with ATM label range, with frame relay label range, etc).')
hwRsvpTeSenderLabelRequestL3pid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestL3pid.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestL3pid.setDescription('An identifier of the layer 3 protocol using this path. Standard Ethertype values are used.')
hwRsvpTeSenderLabelRequestAtmMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMinVpi.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMinVpi.setDescription('This 12 bit field specifies the lower bound of a block of Virtual Path Identifiers that is supported on the originating switch. If the VPI is less than 12-bits it must be right justified in this field and preceding bits must be set to zero.')
hwRsvpTeSenderLabelRequestAtmMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMinVci.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMinVci.setDescription('This 16 bit field specifies the lower bound of a block of Virtual Connection Identifiers that is supported on the originating switch. If the VCI is less than 16-bits it must be right justified in this field and preceding bits must be set to zero.')
hwRsvpTeSenderLabelRequestAtmMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMaxVpi.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMaxVpi.setDescription('This 12 bit field specifies the upper bound of a block of Virtual Path Identifiers that is supported on the originating switch. If the VPI is less than 12-bits it must be right justified in this field and preceding bits must be set to zero.')
hwRsvpTeSenderLabelRequestAtmMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMaxVci.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestAtmMaxVci.setDescription('This 16 bit field specifies the upper bound of a block of Virtual Connection Identifiers that is supported on the originating switch. If the VCI is less than 16-bits it must be right justified in this field and preceding bits must be set to zero.')
hwRsvpTeSenderLabelRequestFrMinDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestFrMinDlci.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestFrMinDlci.setDescription('This 23-bit field specifies the lower bound of a block of Data Link Connection Identifiers (DLCIs) that is supported on the originating switch. The DLCI must be right justified in this field and unused bits must be set to 0.')
hwRsvpTeSenderLabelRequestFrMaxDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestFrMaxDlci.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderLabelRequestFrMaxDlci.setDescription('This 23-bit field specifies the upper bound of a block of Data Link Connection Identifiers (DLCIs) that is supported on the originating switch. The DLCI must be right justified in this field and unused bits must be set to 0.')
hwRsvpTeSenderSessionAttrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 7))).clone(namedValues=NamedValues(("withRa", 1), ("withoutRa", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrType.setDescription('The type of the session_attribute (without resource affinities or with resource affinities).')
hwRsvpTeSenderSessionAttrSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrSetupPrio.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrSetupPrio.setDescription('The priority of the session with respect to taking resources, in the range of 0 to 7. The value 0 is the highest priority. The Setup Priority is used in deciding whether this session can preempt another session. The default value is 7.')
hwRsvpTeSenderSessionAttrHoldPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrHoldPrio.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrHoldPrio.setDescription('The priority of the session with respect to holding resources, in the range of 0 to 7. The value 0 is the highest priority. Holding Priority is used in deciding whether this session can be preempted by another session. The default value is 7.')
hwRsvpTeSenderSessionAttrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrFlag.setDescription('A mixed value. (0x01: Local protection desired; 0x02: Label recording desired; 0x04: SE Style desired; 0x08: bandwidth protection desired; 0x10: node protection desired; 0x20: Path re-evaluation request; 0x40: Soft preemption desired)')
hwRsvpTeSenderSessionAttrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 60), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrName.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrName.setDescription('Session name, a null padded string of characters.')
hwRsvpTeSenderSessionAttrExcludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrExcludeAny.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrExcludeAny.setDescription('A 32-bit vector representing a set of attribute filters associated with a tunnel any of which renders a link unacceptable.')
hwRsvpTeSenderSessionAttrIncludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrIncludeAny.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrIncludeAny.setDescription('A 32-bit vector representing a set of attribute filters associated with a tunnel any of which renders a link acceptable (with respect to this test). A null set (all bits set to zero) automatically passes.')
hwRsvpTeSenderSessionAttrIncludeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrIncludeAll.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderSessionAttrIncludeAll.setDescription('A 32-bit vector representing a set of attribute filters associated with a tunnel all of which must be present for a link to be acceptable (with respect to this test). A null set (all bits set to zero) automatically passes.')
hwRsvpTeSenderFrrSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrSetupPrio.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrSetupPrio.setDescription('The priority of the backup path with respect to taking resources, in the range 0 to 7. The value 0 is the highest priority. Setup Priority is used in deciding whether this session can preempt another session. See [RSVP-TE] for the usage on priority. The default value is 7.')
hwRsvpTeSenderFrrHoldPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrHoldPrio.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrHoldPrio.setDescription('The priority of the backup path with respect to holding resources, in the range 0 to 7. The value 0 is the highest priority. Holding Priority is used in deciding whether this session can be preempted by another session. The default value is 7. ')
hwRsvpTeSenderFrrHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrHopLimit.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrHopLimit.setDescription('The maximum number of extra hops the backup path is allowed to take, from current node (a PLR) to an MP, with PLR and MP excluded from the count. For example, hop-limit of 0 means that only direct links between PLR and MP can be considered. The default value is 16.')
hwRsvpTeSenderFrrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneToOneDesired", 1), ("facilityDesired", 2), ("noBackupDesired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrFlag.setDescription('An enumerable value to indicate the protection schema desired (0x01, One-to-One Backup Desired; 0x02, Facility Backup Desired; 0x03, No Backup Desired).')
hwRsvpTeSenderFrrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 68), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrBandwidth.setDescription('Bandwidth estimate; 32-bit IEEE floating point integer, in bits per second.')
hwRsvpTeSenderFrrExcludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrExcludeAny.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrExcludeAny.setDescription('A 32-bit vector representing a set of attribute filters associated with a backup path, any of which renders a link unacceptable.')
hwRsvpTeSenderFrrIncludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrIncludeAny.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrIncludeAny.setDescription('A 32-bit vector representing a set of attribute filters associated with a backup path, any of which renders a link acceptable (with respect to this test). A null set (all bits set to zero) automatically passes.')
hwRsvpTeSenderFrrIncludeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrIncludeAll.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrIncludeAll.setDescription('A 32-bit vector representing a set of attribute filters associated with a backup path, all of which must be present for a link to be acceptable (with respect to this test). A null set (all bits set to zero) automatically passes.')
hwRsvpTeSenderFrrInuseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("plrInUse", 2), ("mpInUse", 3), ("plrAndMpInUse", 4), ("underProtection", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderFrrInuseFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderFrrInuseFlag.setDescription('An enumerable value to indicate the fast-reroute state of this sender (normal, PLR in use, MP in use, PLR in use and MP in use, under protection).')
hwRsvpTeSenderDiffServPsc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 2, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeSenderDiffServPsc.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderDiffServPsc.setDescription('This 16 bits field indicates a PHB Scheduling Class to be supported by the LSP.')
hwRsvpTeResvTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3), )
if mibBuilder.loadTexts: hwRsvpTeResvTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTable.setDescription('Information describing the state information displayed by receivers in RESV messages.')
hwRsvpTeResvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeResvNumber"))
if mibBuilder.loadTexts: hwRsvpTeResvEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvEntry.setDescription("Information describing the state information displayed by a single receiver's RESV message concerning a single sender.")
hwRsvpTeResvNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeResvNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvNumber.setDescription('The number of this reservation request. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeResvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 2), SessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvType.setDescription('The type of session (IP4, IP6, IP6 with flow information, etc).')
hwRsvpTeResvDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvDestAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvDestAddr.setDescription('The destination address used by all senders in this session.')
hwRsvpTeResvSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvSenderAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvSenderAddr.setDescription("The source address of the sender selected by this reservation. The value of all zeroes in- dicates 'all senders'.")
hwRsvpTeResvDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvDestAddrLength.setDescription('The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits.')
hwRsvpTeResvSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvSenderAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits.")
hwRsvpTeResvHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvHopAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvHopAddr.setDescription('The address used by the next RSVP hop (which may be the ultimate receiver).')
hwRsvpTeResvHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvHopLih.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvHopLih.setDescription('The Logical Interface Handle received from the previous RSVP hop (which may be the ultimate receiver).')
hwRsvpTeResvInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvInterface.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvInterface.setDescription('The ifIndex value of the interface on which this RESV message was most recently received.')
hwRsvpTeResvService = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 10), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvService.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvService.setDescription('The QoS Service classification requested by the receiver.')
hwRsvpTeResvTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 11), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvTSpecRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as hwRsvpTeResvTSpec- PeakRate (if supported by the service model); however, averaged across two or more burst in- tervals, the rate should not exceed hwRsvpTeResvTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower.")
hwRsvpTeResvTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 12), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvTSpecPeakRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream. Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue.")
hwRsvpTeResvTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 13), BurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvTSpecBurst.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTSpecBurst.setDescription("The size of the largest burst expected from the sender at a time. If this is less than the sender's advertised burst size, the receiver is asking the network to provide flow pacing beyond what would be provided under normal circumstances. Such pac- ing is at the network's option.")
hwRsvpTeResvTSpecMinTu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 14), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvTSpecMinTu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTSpecMinTu.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
hwRsvpTeResvTSpecMaxTu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 15), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvTSpecMaxTu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTSpecMaxTu.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
hwRsvpTeResvRSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 16), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvRSpecRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvRSpecRate.setDescription('If the requested service is guaranteed, as specified by hwRsvpTeResvService, this is the clearing rate that is being requested. Other- wise, it is zero, or the agent may return noSuchValue.')
hwRsvpTeResvRSpecSlack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 17), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvRSpecSlack.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvRSpecSlack.setDescription('If the requested service is guaranteed, as specified by hwRsvpTeResvService, this is the delay slack. Otherwise, it is zero, or the agent may return noSuchValue.')
hwRsvpTeResvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvInterval.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvInterval.setDescription('The interval between refresh messages as ad- vertised by the Next Hop.')
hwRsvpTeResvScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvScope.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvScope.setDescription('The contents of the scope object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length. If the length is non-zero, this contains a series of IP4 or IP6 addresses.')
hwRsvpTeResvShared = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvShared.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvShared.setDescription('If TRUE, a reservation shared among senders is requested. If FALSE, a reservation specific to this sender is requested.')
hwRsvpTeResvExplicit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvExplicit.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvExplicit.setDescription('If TRUE, individual senders are listed using Filter Specifications. If FALSE, all senders are implicitly selected. The Scope Object will contain a list of senders that need to receive this reservation request for the purpose of routing the RESV message.')
hwRsvpTeResvRsvpHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvRsvpHop.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvRsvpHop.setDescription('If TRUE, the node believes that the previous IP hop is an RSVP hop. If FALSE, the node be- lieves that the previous IP hop may not be an RSVP hop.')
hwRsvpTeResvPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvPolicy.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
hwRsvpTeResvTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvTtl.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvTtl.setDescription('The TTL value in the RSVP header that was last received.')
hwRsvpTeResvConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 3, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvConfirm.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvConfirm.setDescription("Receiver's address.")
hwRsvpTeResvFwdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4), )
if mibBuilder.loadTexts: hwRsvpTeResvFwdTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTable.setDescription('Information describing the state information displayed upstream in RESV messages.')
hwRsvpTeResvFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdNumber"))
if mibBuilder.loadTexts: hwRsvpTeResvFwdEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdEntry.setDescription('Information describing the state information displayed upstream in an RESV message concern- ing a single sender.')
hwRsvpTeResvFwdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeResvFwdNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdNumber.setDescription('The number of this reservation request. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeResvFwdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 2), SessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdType.setDescription('The type of session (IP4, IP6, IP6 with flow information, etc).')
hwRsvpTeResvFwdDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdDestAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdDestAddr.setDescription('The destination address used by all senders in this session.')
hwRsvpTeResvFwdSenderAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdSenderAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdSenderAddr.setDescription("The source address of the sender selected by this reservation. The value of all zeroes in- dicates 'all senders'.")
hwRsvpTeResvFwdDestAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdDestAddrLength.setDescription('The length of the destination address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits.')
hwRsvpTeResvFwdSenderAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdSenderAddrLength.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdSenderAddrLength.setDescription("The length of the sender's address in bits. This is the CIDR Prefix Length, which for IP4 hosts and multicast addresses is 32 bits.")
hwRsvpTeResvFwdHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdHopAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdHopAddr.setDescription('The address of the (previous) RSVP that will receive this message.')
hwRsvpTeResvFwdHopLih = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdHopLih.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdHopLih.setDescription('The Logical Interface Handle sent to the (pre- vious) RSVP that will receive this message.')
hwRsvpTeResvFwdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdInterface.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdInterface.setDescription('The ifIndex value of the interface on which this RESV message was most recently sent.')
hwRsvpTeResvFwdService = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 10), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdService.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdService.setDescription('The QoS Service classification requested.')
hwRsvpTeResvFwdTSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 11), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecRate.setDescription("The Average Bit Rate of the sender's data stream. Within a transmission burst, the ar- rival rate may be as fast as hwRsvpTeResvFwdT- SpecPeakRate (if supported by the service model);however, averaged across two or more burst intervals, the rate should not exceed hwRsvpTeResvFwdTSpecRate. Note that this is a prediction, often based on the general capability of a type of codec or particular encoding; the measured average rate may be significantly lower.")
hwRsvpTeResvFwdTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 12), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecPeakRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecPeakRate.setDescription("The Peak Bit Rate of the sender's data stream Traffic arrival is not expected to exceed this rate at any time, apart from the effects of jitter in the network. If not specified in the TSpec, this returns zero or noSuchValue.")
hwRsvpTeResvFwdTSpecBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 13), BurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecBurst.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecBurst.setDescription("The size of the largest burst expected from the sender at a time. If this is less than the sender's advertised burst size, the receiver is asking the network to provide flow pacing beyond what would be provided under normal circumstances. Such pac- ing is at the network's option.")
hwRsvpTeResvFwdTSpecMinTu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 14), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecMinTu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecMinTu.setDescription('The minimum message size for this flow. The policing algorithm will treat smaller messages as though they are this size.')
hwRsvpTeResvFwdTSpecMaxTu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 15), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecMaxTu.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTSpecMaxTu.setDescription('The maximum message size for this flow. The admission algorithm will reject TSpecs whose Maximum Transmission Unit, plus the interface headers, exceed the interface MTU.')
hwRsvpTeResvFwdRSpecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 16), BitRate()).setUnits('bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdRSpecRate.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdRSpecRate.setDescription('If the requested service is Guaranteed, as specified by hwRsvpTeResvService, this is the clearing rate that is being requested. Other- wise, it is zero, or the agent may return noSuchValue.')
hwRsvpTeResvFwdRSpecSlack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 17), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdRSpecSlack.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdRSpecSlack.setDescription('If the requested service is Guaranteed, as specified by hwRsvpTeResvService, this is the delay slack. Otherwise, it is zero, or the agent may return noSuchValue.')
hwRsvpTeResvFwdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdInterval.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdInterval.setDescription('The interval between refresh messages adver- tised to the Previous Hop.')
hwRsvpTeResvFwdScope = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdScope.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdScope.setDescription('The contents of the scope object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
hwRsvpTeResvFwdShared = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdShared.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdShared.setDescription('If TRUE, a reservation shared among senders is requested. If FALSE, a reservation specific to this sender is requested.')
hwRsvpTeResvFwdExplicit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdExplicit.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdExplicit.setDescription('If TRUE, individual senders are listed using Filter Specifications. If FALSE, all senders are implicitly selected. The Scope Object will contain a list of senders that need to receive this reservation request for the purpose of routing the RESV message.')
hwRsvpTeResvFwdRsvpHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdRsvpHop.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdRsvpHop.setDescription('If TRUE, the node believes that the next IP hop is an RSVP hop. If FALSE, the node be- lieves that the next IP hop may not be an RSVP hop.')
hwRsvpTeResvFwdPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdPolicy.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdPolicy.setDescription('The contents of the policy object, displayed as an uninterpreted string of octets, including the object header. In the absence of such an object, this should be of zero length.')
hwRsvpTeResvFwdTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdTtl.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdTtl.setDescription('The TTL value in the RSVP header that was last received.')
hwRsvpTeResvFwdMsgIdFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdMsgIdFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdMsgIdFlag.setDescription('Indicates that the message sender requests the peer to send an acknowledgment for the message. (0x01: ACK desired.)')
hwRsvpTeResvFwdMsgIdEpoch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdMsgIdEpoch.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdMsgIdEpoch.setDescription('A value that indicates when the Message_Identi- fier sequence has been reset.')
hwRsvpTeResvFwdMsgIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 4, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeResvFwdMsgIdNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdMsgIdNumber.setDescription("When combined with the message generator's IP address, the Message_Identifier field uniquely identifies a message. The values placed in this field change incrementally and only decrease when the epoch changes or when the value wraps. A return of 0 indicates the absence of the MESSAGE_ID object.")
hwRsvpTeIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5), )
if mibBuilder.loadTexts: hwRsvpTeIfTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfTable.setDescription("The RSVP-specific attributes of the system's interfaces.")
hwRsvpTeIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwRsvpTeIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfEntry.setDescription('The RSVP-specific attributes of the a given interface.')
hwRsvpTeIfUdpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfUdpNbrs.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfUdpNbrs.setDescription('The number of neighbors perceived to be using only the RSVP UDP Encapsulation.')
hwRsvpTeIfIpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfIpNbrs.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfIpNbrs.setDescription('The number of neighbors perceived to be using only the RSVP IP Encapsulation.')
hwRsvpTeIfNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfNbrs.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrs.setDescription('The number of neighbors currently perceived; this will exceed hwRsvpTeIfIpNbrs + hwRsvpTeIfUdpNbrs by the number of neighbors using both encapsu- lations.')
hwRsvpTeIfRefreshBlockadeMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfRefreshBlockadeMultiple.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfRefreshBlockadeMultiple.setDescription("The value of the RSVP value 'Kb', Which is the minimum number of refresh intervals that blockade state will last once entered.")
hwRsvpTeIfRefreshMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfRefreshMultiple.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfRefreshMultiple.setDescription("The value of the RSVP value 'K', which is the number of refresh intervals which must elapse (minimum) before a PATH or RESV message which is not being refreshed will be aged out.")
hwRsvpTeIfTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfTtl.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfTtl.setDescription('The value of SEND_TTL used on this interface for messages this node originates. If set to zero, the node determines the TTL via other means.')
hwRsvpTeIfRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 7), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfRefreshInterval.setDescription("The value of the RSVP value 'R', which is the minimum period between refresh transmissions of a given PATH or RESV message on an interface. The default value is 30000.")
hwRsvpTeIfRouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 8), TimeInterval()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfRouteDelay.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfRouteDelay.setDescription('The approximate period from the time a route is changed to the time a resulting message ap- pears on the interface. The default value is 200.')
hwRsvpTeIfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfEnabled.setDescription('Its value is always TRUE, if RSVP is enabled on this Interface.')
hwRsvpTeIfUdpRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfUdpRequired.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfUdpRequired.setDescription('If TRUE, manual configuration forces the use of UDP encapsulation on the interface. If FALSE, UDP encapsulation is only used if hwRsvpTeI- fUdpNbrs is not zero.')
hwRsvpTeIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRsvpTeIfStatus.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfStatus.setDescription("'active' on interfaces that are configured for RSVP.")
hwRsvpTeIfHelloEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfHelloEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfHelloEnabled.setDescription('If TRUE, RSVPTE hello is enabled on this Interface. If FALSE, RSVPTE hello is not enabled on this interface')
hwRsvpTeIfSrefreshEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfSrefreshEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfSrefreshEnabled.setDescription('If TRUE, srefresh is enabled on this interface. If FALSE, srefresh is not enabled on this interface.')
hwRsvpTeIfSrefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 14), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfSrefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfSrefreshInterval.setDescription('The srefresh interval. I.e. time difference between 2 refreshes. The default value is 30000.')
hwRsvpTeIfRetranIncDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfRetranIncDelta.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfRetranIncDelta.setDescription('Delta governs the speed with which the sender increases the retransmission interval. The ratio of two successive retransmission intervals is (1 + Delta).')
hwRsvpTeIfRetranInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 16), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfRetranInterval.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfRetranInterval.setDescription('The retransmission interval. The default value is 5000.')
hwRsvpTeIfAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfAuthEnabled.setDescription('If TRUE, authentication is enabled on this interface. If FALSE, authentication is not enabled on this interface.')
hwRsvpTeIfAuthEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfAuthEncrypted.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfAuthEncrypted.setDescription('This states that authentication key is encrypted or not.')
hwRsvpTeIfAuthHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfAuthHandshake.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfAuthHandshake.setDescription('Handshaking is enabled authentications.')
hwRsvpTeIfAuthLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 20), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfAuthLifeTime.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfAuthLifeTime.setDescription('Authentication life time. The default value is 1800000.')
hwRsvpTeIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 392))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfAuthKey.setDescription('Authentication key, used for authentication processing. For security purposes, a get on this returns a zero length string.')
hwRsvpTeIfWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeIfWindowSize.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfWindowSize.setDescription('Administrators can specify a message window corresponding to the worst case reordering behavior. For example, one might specify that packets reordered within a 32 message window would be accepted. If no reordering can occur, the window is set to one. The maximum value is 64. The default value is 1.')
hwRsvpTeNbrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6), )
if mibBuilder.loadTexts: hwRsvpTeNbrTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrTable.setDescription('Information describing the Neighbors of an RSVP system.')
hwRsvpTeNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrAddress"))
if mibBuilder.loadTexts: hwRsvpTeNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrEntry.setDescription('Information describing a single RSVP Neigh- bor.')
hwRsvpTeNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: hwRsvpTeNbrAddress.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrAddress.setDescription("The IP4 or IP6 Address used by this neighbor. This object may not be changed when the value of the RowStatus object is 'active'.")
hwRsvpTeNbrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("udp", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrProtocol.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrProtocol.setDescription('The encapsulation being used by this neigh- bor.')
hwRsvpTeNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRsvpTeNbrStatus.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrStatus.setDescription("'active' for all neighbors. This object may be used to configure neighbors. In the pres- ence of configured neighbors, the implementa- tion may (but is not required to) limit the set of valid neighbors to those configured.")
hwRsvpTeNbrSendersNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrSendersNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrSendersNumber.setDescription('The number of senders on the neighbor.')
hwRsvpTeNbrReceiversNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrReceiversNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrReceiversNumber.setDescription('The number of receivers on the neighbor.')
hwRsvpTeNbrHelloEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrHelloEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrHelloEnabled.setDescription('If TRUE, hello is enabled on the neighbor.')
hwRsvpTeNbrHelloSrcInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrHelloSrcInstance.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrHelloSrcInstance.setDescription('Source instance of the neighbor.')
hwRsvpTeNbrHelloDstInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrHelloDstInstance.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrHelloDstInstance.setDescription('Destination instance of the neighbor.')
hwRsvpTeNbrHelloLostCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrHelloLostCounter.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrHelloLostCounter.setDescription('The number of times the hello messages have been sent to the neighbor for which hello ACK has not received yet.')
hwRsvpTeNbrHelloType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("request", 1), ("ack", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrHelloType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrHelloType.setDescription('Hello type that is being sent to the neighbor. A return of 3[none] indicates that hello is disabled on the nbr.')
hwRsvpTeNbrGrCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrGrCapability.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrGrCapability.setDescription('Gives neighbor capability to support GR or undergo GR, in case of control plane restart. A mixed value. (0x01: Self GR capability of neighbor; 0x02: GR support capability of neighbor; 0x04: Neighbor capable of receiving RecoveryPath message; 0x08: Neighbor capable of sending RecoveryPath message)')
hwRsvpTeNbrGrRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 12), TimeStamp()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrGrRestartTime.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrGrRestartTime.setDescription('Neighbor nodes GR restart time value.')
hwRsvpTeNbrGrRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 13), TimeStamp()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrGrRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrGrRecoveryTime.setDescription('Neighbor nodes GR recovery time value.')
hwRsvpTeNbrGrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("supporting", 2), ("restarting", 3), ("restartTimerRunning", 4), ("recoveryTimerRunning", 5), ("grEnd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrGrStatus.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrGrStatus.setDescription('Neighbor nodes GR status. (0x01, No GR activity; 0x02, Neighbor router is supporting GR; 0x03, Neighbor router is restarting; 0x04, Restart timer is running; 0x05, Recovery timer is running; 0x06, Neighbor GR end.)')
hwRsvpTeNbrAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 15), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrAuthKeyId.setDescription("Neighbor's authentication key, used for authentication processing. A return of null string indicates the absence of the item. For security purposes, a get on this returns a zero length string.")
hwRsvpTeNbrReductionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrReductionEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrReductionEnabled.setDescription('If TRUE srefresh is enabled on the neighbor, else srefresh is not enabled on the neighbor.')
hwRsvpTeNbrReliabilityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 6, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeNbrReliabilityEnabled.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrReliabilityEnabled.setDescription('If TRUE reliability is enabled on the neighbor, else reliability is not enabled on the neighbor.')
hwRsvpTeMessageIdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 7), )
if mibBuilder.loadTexts: hwRsvpTeMessageIdTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeMessageIdTable.setDescription('Information describes the MessageIds of an RSVP system.')
hwRsvpTeMessageIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrAddress"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeMessageIdEpoch"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeMessageIdNumber"))
if mibBuilder.loadTexts: hwRsvpTeMessageIdEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeMessageIdEntry.setDescription('Information describes the MessageIds of an RSVP system.')
hwRsvpTeMessageIdEpoch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 7, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeMessageIdEpoch.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeMessageIdEpoch.setDescription('A value that indicates when the Message_Identi- fier sequence has been reset.')
hwRsvpTeMessageIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 7, 1, 2), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeMessageIdNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeMessageIdNumber.setDescription("When combined with the message generator's IP address, the Message_Identifier field uniquely identifies a message. The values placed in this field change incrementally and only decrease when the epoch changes or when the value wraps.")
hwRsvpTeMessageIdFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("senderIncoming", 1), ("senderOutgoing", 2), ("resv", 3), ("resvFwd", 4), ("rtBuff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeMessageIdFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeMessageIdFlag.setDescription('A enumerable value to indicate the type of this Message_Identifier. (1: SenderIncoming; 2: SenderOutgoing; 3: Resv; 4: ResvFwd; 5: RtBuff)')
hwRsvpTeFilterSpecTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 8), )
if mibBuilder.loadTexts: hwRsvpTeFilterSpecTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecTable.setDescription('Information describes the FilterSpecs of an RSVP system.')
hwRsvpTeFilterSpecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 8, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeResvNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeFilterSpecNumber"))
if mibBuilder.loadTexts: hwRsvpTeFilterSpecEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecEntry.setDescription('Information describes the FilterSpecs of an RSVP system.')
hwRsvpTeFilterSpecNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 8, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeFilterSpecNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecNumber.setDescription('The number of this Filter_Spec. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeFilterSpecLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeFilterSpecLspId.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecLspId.setDescription('A 16-bit identifier used in the SENDER_TEMPLATE and the FILTER_SPEC that can be changed to allow a sender to share resources with itself.')
hwRsvpTeFilterSpecIngressLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeFilterSpecIngressLsrId.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecIngressLsrId.setDescription('IP address for a sender node.')
hwRsvpTeFilterSpecLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeFilterSpecLabel.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecLabel.setDescription('The value of the label arranged by next hop. A return of 4294967295 indicates the absence of the item.')
hwRsvpTeRroTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9), )
if mibBuilder.loadTexts: hwRsvpTeRroTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroTable.setDescription('Information describes the RRO sub-objects of an RSVP system.')
hwRsvpTeRroEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeRroNumber"))
if mibBuilder.loadTexts: hwRsvpTeRroEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroEntry.setDescription('Information describes the RRO sub-objects of an RSVP system.')
hwRsvpTeRroNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeRroNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroNumber.setDescription('The number of this RRO sub-object. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeRroType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("label", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeRroType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroType.setDescription('An enumerable value that indicates the type of this sub-object. (0x01: IPv4 address; 0x02: IPv6 address; 0x03: Label.)')
hwRsvpTeRroIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeRroIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroIpAddr.setDescription("IP address for this sub-object if the type is 'IPv4 address' of 'IPv6 address'. A return of null string indicates the absence of the item.")
hwRsvpTeRroIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeRroIpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroIpPrefixLen.setDescription("IP prefix length for this sub-object if the type is 'IPv4 address' of 'IPv6 address'. A return of 0 indicates the absence of the item.")
hwRsvpTeRroLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeRroLabel.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroLabel.setDescription("The value of the label if the type is 'Label'. A return of 4294967295 indicates the absence of the item.")
hwRsvpTeRroFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeRroFlag.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroFlag.setDescription('If hwRsvpTeRroType is IPv4 or IPv6, it is a mixed value. (0x01: Local protection available; 0x02: Local protection in use; 0x04: bandwidth protection; 0x08: node protection; 0x10: preemption pending; 0x20: node ID.) If hwRsvpTeRroType is Label, 0x01 means global label. A return of zero indicates no bit was set.')
hwRsvpTeEroTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 10), )
if mibBuilder.loadTexts: hwRsvpTeEroTable.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroTable.setDescription('Information describes the ERO sub-objects of an RSVP system.')
hwRsvpTeEroEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 10, 1), ).setIndexNames((0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderNumber"), (0, "HUAWEI-RSVPTE-MIB", "hwRsvpTeEroNumber"))
if mibBuilder.loadTexts: hwRsvpTeEroEntry.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroEntry.setDescription('Information describes the ERO sub-objects of an RSVP system.')
hwRsvpTeEroNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 10, 1, 1), Gauge32())
if mibBuilder.loadTexts: hwRsvpTeEroNumber.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroNumber.setDescription('The number of this ERO sub-object. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
hwRsvpTeEroType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeEroType.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroType.setDescription('An enumerable value that indicates the type of this sub-object. (0x01: IPv4 address; 0x02: IPv6 address.)')
hwRsvpTeEroIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeEroIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroIpAddr.setDescription('IP address for this sub-object.')
hwRsvpTeEroIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRsvpTeEroIpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroIpPrefixLen.setDescription('IP prefix length for this sub-object.')
hwRsvpTeExtendObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 11))
hwRsvpTeExtendTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12))
hwRsvpTeTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 1))
hwRsvpTeNbr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRsvpTeNbr.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbr.setDescription('IP address of RSVP neighbour.')
hwRsvpTeIfNbrCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRsvpTeIfNbrCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrCurrentCount.setDescription('Number of existing neighbors of the RSVP interface.')
hwRsvpTeIfNbrThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRsvpTeIfNbrThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrThreshold.setDescription('Threshold for the number of neighbors of the RSVP interface.')
hwRsvpTeIfNbrTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRsvpTeIfNbrTotalCount.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrTotalCount.setDescription('Maximum number of allowed neighbors of the RSVP interface.')
hwRsvpTeIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRsvpTeIfName.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfName.setDescription('The name of the RSVP interface.')
hwRsvpTeTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2))
hwRsvpTeHelloLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 1)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbr"))
if mibBuilder.loadTexts: hwRsvpTeHelloLost.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeHelloLost.setDescription('Indicates neighbour of RSVP hello lost.')
hwRsvpTeHelloLostRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 2)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbr"))
if mibBuilder.loadTexts: hwRsvpTeHelloLostRecovery.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeHelloLostRecovery.setDescription('Indicates neighbour of RSVP hello lost.')
hwRsvpTeAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 3)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbr"))
if mibBuilder.loadTexts: hwRsvpTeAuthFail.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeAuthFail.setDescription('Indicates neighbour of RSVP hello lost.')
hwRsvpTeAuthSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 4)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbr"))
if mibBuilder.loadTexts: hwRsvpTeAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeAuthSuccess.setDescription('Indicates neighbour of RSVP hello lost.')
hwRsvpTeIfNbrThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 5)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfName"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrCurrentCount"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrThreshold"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrTotalCount"))
if mibBuilder.loadTexts: hwRsvpTeIfNbrThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrThresholdExceed.setDescription('Indicates that the number of RSVP interface neighbors has exceeded the upper threshold.')
hwRsvpTeIfNbrThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 6)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfName"))
if mibBuilder.loadTexts: hwRsvpTeIfNbrThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrThresholdExceedClear.setDescription('Indicates that the number of RSVP interface neighbors has fallen below the lower threshold.')
hwRsvpTeIfNbrTotalCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 7)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfName"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrTotalCount"))
if mibBuilder.loadTexts: hwRsvpTeIfNbrTotalCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrTotalCountExceed.setDescription('Indicates that the number of RSVP interface neighbors has reached the maximum number.')
hwRsvpTeIfNbrTotalCountExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 1, 12, 2, 8)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfName"))
if mibBuilder.loadTexts: hwRsvpTeIfNbrTotalCountExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfNbrTotalCountExceedClear.setDescription('Indicates that the number of RSVP interface neighbors has fallen below the recovery number.')
hwRsvpTeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2))
hwRsvpTeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1))
hwRsvpTeSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 1)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionDestAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionDestAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionSenders"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionReceivers"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionRequests"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionTunnelId"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionTunnelExtId"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionLspsNumber"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionStyle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeSessionGroup = hwRsvpTeSessionGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSessionGroup.setDescription('These objects are required for RSVP Systems.')
hwRsvpTeSenderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 2)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderDestAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderDestAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderHopAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderHopLih"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderInterface"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderTSpecRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderTSpecPeakRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderTSpecBurst"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderTSpecMinTu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderTSpecMaxTu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderInterval"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderRsvpHop"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderPolicy"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecBreak"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecHopCount"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecPathBw"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecMinLatency"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecMtu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedSvc"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedBreak"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedCtot"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedDtot"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedCsum"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedDsum"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedHopCount"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedPathBw"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedMinLatency"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecGuaranteedMtu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecCtrlLoadSvc"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecCtrlLoadBreak"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecCtrlLoadHopCount"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecCtrlLoadPathBw"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecCtrlLoadMinLatency"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderAdspecCtrlLoadMtu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderTtl"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeLspId"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderMsgIdSndFlag"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderMsgIdSndEpoch"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderMsgIdSndNumber"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderMsgIdRcvFlag"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderMsgIdRcvEpoch"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderMsgIdRcvNumber"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderClassType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestCtype"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestL3pid"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestAtmMinVpi"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestAtmMinVci"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestAtmMaxVpi"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestAtmMaxVci"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestFrMinDlci"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderLabelRequestFrMaxDlci"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrSetupPrio"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrHoldPrio"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrFlag"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrName"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrExcludeAny"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrIncludeAny"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderSessionAttrIncludeAll"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrSetupPrio"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrHoldPrio"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrHopLimit"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrFlag"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrBandwidth"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrExcludeAny"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrIncludeAny"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrIncludeAll"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderFrrInuseFlag"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderDiffServPsc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeSenderGroup = hwRsvpTeSenderGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeSenderGroup.setDescription('These objects are required for RSVP Systems.')
hwRsvpTeResvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 3)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvDestAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvSenderAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvDestAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvSenderAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvHopAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvHopLih"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvInterface"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvService"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvTSpecRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvTSpecPeakRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvTSpecBurst"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvTSpecMinTu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvTSpecMaxTu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvRSpecRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvRSpecSlack"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvInterval"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvScope"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvShared"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvExplicit"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvRsvpHop"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvPolicy"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvTtl"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvConfirm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeResvGroup = hwRsvpTeResvGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvGroup.setDescription('These objects are required for RSVP Systems.')
hwRsvpTeResvFwdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 4)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdDestAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdSenderAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdDestAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdSenderAddrLength"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdHopAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdHopLih"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdInterface"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdService"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdTSpecRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdTSpecPeakRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdTSpecBurst"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdTSpecMinTu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdTSpecMaxTu"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdRSpecRate"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdRSpecSlack"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdInterval"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdScope"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdShared"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdExplicit"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdPolicy"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdTtl"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdMsgIdFlag"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdMsgIdEpoch"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdMsgIdNumber"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdRsvpHop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeResvFwdGroup = hwRsvpTeResvFwdGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeResvFwdGroup.setDescription('These objects are optional, used for some RSVP Systems.')
hwRsvpTeIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 5)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfUdpNbrs"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfIpNbrs"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrs"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfRefreshBlockadeMultiple"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfRefreshMultiple"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfTtl"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfRefreshInterval"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfRouteDelay"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfUdpRequired"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfStatus"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfHelloEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfSrefreshEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfSrefreshInterval"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfRetranIncDelta"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfRetranInterval"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfAuthEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfAuthEncrypted"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfAuthHandshake"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfAuthKey"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfWindowSize"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfAuthLifeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeIfGroup = hwRsvpTeIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeIfGroup.setDescription('These objects are required for RSVP Systems.')
hwRsvpTeNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 6)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrHelloSrcInstance"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrHelloDstInstance"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrHelloLostCounter"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrHelloType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrHelloEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrSendersNumber"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrReceiversNumber"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrGrCapability"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrGrRestartTime"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrGrRecoveryTime"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrGrStatus"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrAuthKeyId"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrReductionEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrReliabilityEnabled"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrProtocol"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeNbrGroup = hwRsvpTeNbrGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeNbrGroup.setDescription('These objects are required for RSVP Systems.')
hwRsvpTeMessageIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 7)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeMessageIdFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeMessageIdGroup = hwRsvpTeMessageIdGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeMessageIdGroup.setDescription('Description.')
hwRsvpTeFilterSpecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 8)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeFilterSpecLspId"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeFilterSpecIngressLsrId"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeFilterSpecLabel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeFilterSpecGroup = hwRsvpTeFilterSpecGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeFilterSpecGroup.setDescription('Description.')
hwRsvpTeRroGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 9)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeRroType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeRroIpAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeRroIpPrefixLen"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeRroLabel"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeRroFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeRroGroup = hwRsvpTeRroGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeRroGroup.setDescription('Description.')
hwRsvpTeEroGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 10)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeEroType"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeEroIpAddr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeEroIpPrefixLen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeEroGroup = hwRsvpTeEroGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeEroGroup.setDescription('Description.')
hwRsvpTeTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 11)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbr"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrCurrentCount"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrThreshold"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrTotalCount"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeTrapObjectsGroup = hwRsvpTeTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeTrapObjectsGroup.setDescription('Description.')
hwRsvpTeTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 1, 12)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeHelloLost"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeHelloLostRecovery"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeAuthFail"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeAuthSuccess"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrThresholdExceed"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrThresholdExceedClear"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrTotalCountExceed"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfNbrTotalCountExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeTrapGroup = hwRsvpTeTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeTrapGroup.setDescription('Description.')
hwRsvpTeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 2))
hwRsvpTeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 148, 2, 2, 1)).setObjects(("HUAWEI-RSVPTE-MIB", "hwRsvpTeSessionGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeSenderGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeIfGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeNbrGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeFilterSpecGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeRroGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeEroGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeTrapObjectsGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeTrapGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeResvFwdGroup"), ("HUAWEI-RSVPTE-MIB", "hwRsvpTeMessageIdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRsvpTeCompliance = hwRsvpTeCompliance.setStatus('current')
if mibBuilder.loadTexts: hwRsvpTeCompliance.setDescription('The compliance statement. Note that the im- plementation of this module requires implemen- tation of the Integrated Services MIB as well.')
mibBuilder.exportSymbols("HUAWEI-RSVPTE-MIB", hwRsvpTeResvShared=hwRsvpTeResvShared, PYSNMP_MODULE_ID=hwRsvpTe, hwRsvpTeSenderTSpecMaxTu=hwRsvpTeSenderTSpecMaxTu, hwRsvpTeIfAuthLifeTime=hwRsvpTeIfAuthLifeTime, hwRsvpTeResvFwdRSpecRate=hwRsvpTeResvFwdRSpecRate, hwRsvpTeResvTSpecRate=hwRsvpTeResvTSpecRate, hwRsvpTeAuthSuccess=hwRsvpTeAuthSuccess, hwRsvpTeRroTable=hwRsvpTeRroTable, hwRsvpTeEroType=hwRsvpTeEroType, hwRsvpTeResvFwdTtl=hwRsvpTeResvFwdTtl, hwRsvpTeSenderFrrExcludeAny=hwRsvpTeSenderFrrExcludeAny, hwRsvpTeSenderTSpecPeakRate=hwRsvpTeSenderTSpecPeakRate, hwRsvpTeEroIpPrefixLen=hwRsvpTeEroIpPrefixLen, hwRsvpTeMessageIdTable=hwRsvpTeMessageIdTable, hwRsvpTeIfRefreshInterval=hwRsvpTeIfRefreshInterval, hwRsvpTeSessionDestAddrLength=hwRsvpTeSessionDestAddrLength, hwRsvpTeIfSrefreshInterval=hwRsvpTeIfSrefreshInterval, hwRsvpTeNbrHelloDstInstance=hwRsvpTeNbrHelloDstInstance, hwRsvpTeSenderAdspecGuaranteedBreak=hwRsvpTeSenderAdspecGuaranteedBreak, hwRsvpTeResvFwdMsgIdFlag=hwRsvpTeResvFwdMsgIdFlag, hwRsvpTeIfRouteDelay=hwRsvpTeIfRouteDelay, hwRsvpTeResvRSpecRate=hwRsvpTeResvRSpecRate, hwRsvpTeResvRsvpHop=hwRsvpTeResvRsvpHop, hwRsvpTeNbrAuthKeyId=hwRsvpTeNbrAuthKeyId, hwRsvpTeRroIpPrefixLen=hwRsvpTeRroIpPrefixLen, hwRsvpTeIfNbrThresholdExceed=hwRsvpTeIfNbrThresholdExceed, hwRsvpTeSenderAdspecGuaranteedHopCount=hwRsvpTeSenderAdspecGuaranteedHopCount, hwRsvpTeSenderAdspecPathBw=hwRsvpTeSenderAdspecPathBw, hwRsvpTeResvTable=hwRsvpTeResvTable, hwRsvpTeResvTtl=hwRsvpTeResvTtl, hwRsvpTeNbrReductionEnabled=hwRsvpTeNbrReductionEnabled, hwRsvpTeSenderPolicy=hwRsvpTeSenderPolicy, hwRsvpTeSenderLabelRequestAtmMaxVci=hwRsvpTeSenderLabelRequestAtmMaxVci, hwRsvpTeTrap=hwRsvpTeTrap, hwRsvpTeResvFwdTSpecRate=hwRsvpTeResvFwdTSpecRate, hwRsvpTeResvFwdTSpecMaxTu=hwRsvpTeResvFwdTSpecMaxTu, hwRsvpTeTrapGroup=hwRsvpTeTrapGroup, hwRsvpTeSenderAdspecBreak=hwRsvpTeSenderAdspecBreak, hwRsvpTeResvScope=hwRsvpTeResvScope, hwRsvpTeResvFwdMsgIdNumber=hwRsvpTeResvFwdMsgIdNumber, hwRsvpTeIfRefreshMultiple=hwRsvpTeIfRefreshMultiple, hwRsvpTeNbr=hwRsvpTeNbr, hwRsvpTeSessionRequests=hwRsvpTeSessionRequests, hwRsvpTeSenderDestAddrLength=hwRsvpTeSenderDestAddrLength, hwRsvpTeIfNbrTotalCountExceed=hwRsvpTeIfNbrTotalCountExceed, hwRsvpTeIfAuthHandshake=hwRsvpTeIfAuthHandshake, hwRsvpTeResvFwdDestAddrLength=hwRsvpTeResvFwdDestAddrLength, hwRsvpTeIfTable=hwRsvpTeIfTable, hwRsvpTeSenderTtl=hwRsvpTeSenderTtl, hwRsvpTeFilterSpecGroup=hwRsvpTeFilterSpecGroup, hwRsvpTeMessageIdNumber=hwRsvpTeMessageIdNumber, hwRsvpTeResvFwdInterface=hwRsvpTeResvFwdInterface, hwRsvpTeNbrHelloType=hwRsvpTeNbrHelloType, hwRsvpTeSenderAdspecCtrlLoadSvc=hwRsvpTeSenderAdspecCtrlLoadSvc, hwRsvpTeResvFwdDestAddr=hwRsvpTeResvFwdDestAddr, hwRsvpTeSenderMsgIdSndEpoch=hwRsvpTeSenderMsgIdSndEpoch, hwRsvpTeIfEnabled=hwRsvpTeIfEnabled, hwRsvpTeResvFwdHopAddr=hwRsvpTeResvFwdHopAddr, hwRsvpTeIfAuthEnabled=hwRsvpTeIfAuthEnabled, hwRsvpTeSessionReceivers=hwRsvpTeSessionReceivers, hwRsvpTeIfHelloEnabled=hwRsvpTeIfHelloEnabled, hwRsvpTeSessionType=hwRsvpTeSessionType, hwRsvpTeResvFwdEntry=hwRsvpTeResvFwdEntry, hwRsvpTeResvFwdRSpecSlack=hwRsvpTeResvFwdRSpecSlack, hwRsvpTeIfRetranIncDelta=hwRsvpTeIfRetranIncDelta, hwRsvpTeIfWindowSize=hwRsvpTeIfWindowSize, hwRsvpTeSenderSessionAttrType=hwRsvpTeSenderSessionAttrType, hwRsvpTeResvHopAddr=hwRsvpTeResvHopAddr, hwRsvpTeSenderMsgIdRcvEpoch=hwRsvpTeSenderMsgIdRcvEpoch, hwRsvpTeResvInterval=hwRsvpTeResvInterval, hwRsvpTeNbrGrCapability=hwRsvpTeNbrGrCapability, hwRsvpTeMessageIdFlag=hwRsvpTeMessageIdFlag, hwRsvpTeNbrHelloLostCounter=hwRsvpTeNbrHelloLostCounter, hwRsvpTeIfIpNbrs=hwRsvpTeIfIpNbrs, hwRsvpTeResvFwdRsvpHop=hwRsvpTeResvFwdRsvpHop, hwRsvpTeResvFwdTSpecBurst=hwRsvpTeResvFwdTSpecBurst, hwRsvpTeIfRefreshBlockadeMultiple=hwRsvpTeIfRefreshBlockadeMultiple, hwRsvpTeSenderLabelRequestAtmMinVci=hwRsvpTeSenderLabelRequestAtmMinVci, hwRsvpTeSenderFrrHopLimit=hwRsvpTeSenderFrrHopLimit, hwRsvpTeResvNumber=hwRsvpTeResvNumber, hwRsvpTeSenderAdspecCtrlLoadBreak=hwRsvpTeSenderAdspecCtrlLoadBreak, hwRsvpTeTrapObjects=hwRsvpTeTrapObjects, hwRsvpTeResvFwdPolicy=hwRsvpTeResvFwdPolicy, hwRsvpTeSenderSessionAttrFlag=hwRsvpTeSenderSessionAttrFlag, hwRsvpTeNbrStatus=hwRsvpTeNbrStatus, hwRsvpTeNbrGrStatus=hwRsvpTeNbrGrStatus, hwRsvpTeResvExplicit=hwRsvpTeResvExplicit, hwRsvpTeRroFlag=hwRsvpTeRroFlag, hwRsvpTeSenderDestAddr=hwRsvpTeSenderDestAddr, hwRsvpTeSenderMsgIdSndNumber=hwRsvpTeSenderMsgIdSndNumber, hwRsvpTeResvFwdTSpecMinTu=hwRsvpTeResvFwdTSpecMinTu, hwRsvpTeSenderAdspecGuaranteedMtu=hwRsvpTeSenderAdspecGuaranteedMtu, hwRsvpTeNbrGrRecoveryTime=hwRsvpTeNbrGrRecoveryTime, hwRsvpTeSenderAdspecGuaranteedSvc=hwRsvpTeSenderAdspecGuaranteedSvc, hwRsvpTeEroEntry=hwRsvpTeEroEntry, hwRsvpTe=hwRsvpTe, hwRsvpTeEroTable=hwRsvpTeEroTable, hwRsvpTeSenderDiffServPsc=hwRsvpTeSenderDiffServPsc, hwRsvpTeResvGroup=hwRsvpTeResvGroup, hwRsvpTeResvFwdGroup=hwRsvpTeResvFwdGroup, hwRsvpTeNbrAddress=hwRsvpTeNbrAddress, hwRsvpTeNbrGroup=hwRsvpTeNbrGroup, hwRsvpTeSenderInterval=hwRsvpTeSenderInterval, hwRsvpTeResvFwdService=hwRsvpTeResvFwdService, hwRsvpTeSenderAdspecGuaranteedDtot=hwRsvpTeSenderAdspecGuaranteedDtot, hwRsvpTeSenderAddrLength=hwRsvpTeSenderAddrLength, hwRsvpTeResvSenderAddr=hwRsvpTeResvSenderAddr, hwRsvpTeIfTtl=hwRsvpTeIfTtl, hwRsvpTeFilterSpecIngressLsrId=hwRsvpTeFilterSpecIngressLsrId, hwRsvpTeIfNbrThresholdExceedClear=hwRsvpTeIfNbrThresholdExceedClear, hwRsvpTeRroLabel=hwRsvpTeRroLabel, hwRsvpTeSenderNumber=hwRsvpTeSenderNumber, hwRsvpTeIfGroup=hwRsvpTeIfGroup, hwRsvpTeResvDestAddrLength=hwRsvpTeResvDestAddrLength, hwRsvpTeNbrTable=hwRsvpTeNbrTable, hwRsvpTeFilterSpecLabel=hwRsvpTeFilterSpecLabel, hwRsvpTeResvFwdExplicit=hwRsvpTeResvFwdExplicit, hwRsvpTeFilterSpecLspId=hwRsvpTeFilterSpecLspId, hwRsvpTeNbrEntry=hwRsvpTeNbrEntry, hwRsvpTeSenderType=hwRsvpTeSenderType, hwRsvpTeResvFwdType=hwRsvpTeResvFwdType, hwRsvpTeSenderTSpecBurst=hwRsvpTeSenderTSpecBurst, hwRsvpTeResvInterface=hwRsvpTeResvInterface, hwRsvpTeResvFwdTable=hwRsvpTeResvFwdTable, hwRsvpTeResvFwdHopLih=hwRsvpTeResvFwdHopLih, hwRsvpTeSenderMsgIdRcvFlag=hwRsvpTeSenderMsgIdRcvFlag, hwRsvpTeSessionEntry=hwRsvpTeSessionEntry, hwRsvpTeSenderTSpecRate=hwRsvpTeSenderTSpecRate, hwRsvpTeMessageIdEntry=hwRsvpTeMessageIdEntry, hwRsvpTeFilterSpecNumber=hwRsvpTeFilterSpecNumber, hwRsvpTeSenderSessionAttrIncludeAny=hwRsvpTeSenderSessionAttrIncludeAny, hwRsvpTeNbrHelloSrcInstance=hwRsvpTeNbrHelloSrcInstance, hwRsvpTeSessionNumber=hwRsvpTeSessionNumber, hwRsvpTeSenderLabelRequestFrMinDlci=hwRsvpTeSenderLabelRequestFrMinDlci, hwRsvpTeRroEntry=hwRsvpTeRroEntry, hwRsvpTeHelloLost=hwRsvpTeHelloLost, hwRsvpTeEroIpAddr=hwRsvpTeEroIpAddr, hwRsvpTeSenderFrrIncludeAny=hwRsvpTeSenderFrrIncludeAny, hwRsvpTeResvFwdMsgIdEpoch=hwRsvpTeResvFwdMsgIdEpoch, hwRsvpTeSenderClassType=hwRsvpTeSenderClassType, hwRsvpTeExtendObjects=hwRsvpTeExtendObjects, hwRsvpTeEroNumber=hwRsvpTeEroNumber, hwRsvpTeIfNbrTotalCount=hwRsvpTeIfNbrTotalCount, hwRsvpTeSenderAdspecMinLatency=hwRsvpTeSenderAdspecMinLatency, hwRsvpTeSenderLabelRequestAtmMaxVpi=hwRsvpTeSenderLabelRequestAtmMaxVpi, hwRsvpTeIfName=hwRsvpTeIfName, hwRsvpTeSenderAdspecHopCount=hwRsvpTeSenderAdspecHopCount, hwRsvpTeIfStatus=hwRsvpTeIfStatus, hwRsvpTeNbrReliabilityEnabled=hwRsvpTeNbrReliabilityEnabled, hwRsvpTeSenderGroup=hwRsvpTeSenderGroup, hwRsvpTeSessionStyle=hwRsvpTeSessionStyle, hwRsvpTeSenderAdspecGuaranteedDsum=hwRsvpTeSenderAdspecGuaranteedDsum, hwRsvpTeSenderLabelRequestCtype=hwRsvpTeSenderLabelRequestCtype, hwRsvpTeResvFwdSenderAddr=hwRsvpTeResvFwdSenderAddr, hwRsvpTeResvPolicy=hwRsvpTeResvPolicy, hwRsvpTeSenderAdspecCtrlLoadHopCount=hwRsvpTeSenderAdspecCtrlLoadHopCount, hwRsvpTeResvDestAddr=hwRsvpTeResvDestAddr, hwRsvpTeSenderFrrIncludeAll=hwRsvpTeSenderFrrIncludeAll, hwRsvpTeRroIpAddr=hwRsvpTeRroIpAddr, hwRsvpTeSenderSessionAttrName=hwRsvpTeSenderSessionAttrName, hwRsvpTeLspId=hwRsvpTeLspId, hwRsvpTeIfUdpRequired=hwRsvpTeIfUdpRequired, hwRsvpTeIfSrefreshEnabled=hwRsvpTeIfSrefreshEnabled, hwRsvpTeNbrProtocol=hwRsvpTeNbrProtocol, hwRsvpTeHelloLostRecovery=hwRsvpTeHelloLostRecovery, hwRsvpTeSenderMsgIdSndFlag=hwRsvpTeSenderMsgIdSndFlag, hwRsvpTeSessionDestAddr=hwRsvpTeSessionDestAddr, hwRsvpTeResvFwdShared=hwRsvpTeResvFwdShared, hwRsvpTeResvEntry=hwRsvpTeResvEntry, hwRsvpTeResvHopLih=hwRsvpTeResvHopLih, hwRsvpTeSenderSessionAttrExcludeAny=hwRsvpTeSenderSessionAttrExcludeAny, hwRsvpTeSenderTable=hwRsvpTeSenderTable, hwRsvpTeSessionTable=hwRsvpTeSessionTable, hwRsvpTeMessageIdGroup=hwRsvpTeMessageIdGroup, hwRsvpTeIfUdpNbrs=hwRsvpTeIfUdpNbrs, hwRsvpTeSenderAdspecGuaranteedCtot=hwRsvpTeSenderAdspecGuaranteedCtot, hwRsvpTeConformance=hwRsvpTeConformance, hwRsvpTeCompliance=hwRsvpTeCompliance, hwRsvpTeNbrHelloEnabled=hwRsvpTeNbrHelloEnabled, hwRsvpTeEroGroup=hwRsvpTeEroGroup, hwRsvpTeSenderFrrInuseFlag=hwRsvpTeSenderFrrInuseFlag, hwRsvpTeSenderTSpecMinTu=hwRsvpTeSenderTSpecMinTu, hwRsvpTeSenderAdspecCtrlLoadMtu=hwRsvpTeSenderAdspecCtrlLoadMtu, hwRsvpTeIfNbrCurrentCount=hwRsvpTeIfNbrCurrentCount, hwRsvpTeSenderAdspecGuaranteedPathBw=hwRsvpTeSenderAdspecGuaranteedPathBw, hwRsvpTeSenderAdspecCtrlLoadMinLatency=hwRsvpTeSenderAdspecCtrlLoadMinLatency, hwRsvpTeResvTSpecPeakRate=hwRsvpTeResvTSpecPeakRate, hwRsvpTeRroNumber=hwRsvpTeRroNumber, hwRsvpTeNbrGrRestartTime=hwRsvpTeNbrGrRestartTime, hwRsvpTeResvTSpecMinTu=hwRsvpTeResvTSpecMinTu, hwRsvpTeFilterSpecEntry=hwRsvpTeFilterSpecEntry, hwRsvpTeSenderSessionAttrSetupPrio=hwRsvpTeSenderSessionAttrSetupPrio, hwRsvpTeSenderFrrFlag=hwRsvpTeSenderFrrFlag, hwRsvpTeIfNbrTotalCountExceedClear=hwRsvpTeIfNbrTotalCountExceedClear, hwRsvpTeCompliances=hwRsvpTeCompliances, hwRsvpTeSenderFrrSetupPrio=hwRsvpTeSenderFrrSetupPrio, hwRsvpTeSenderAdspecGuaranteedMinLatency=hwRsvpTeSenderAdspecGuaranteedMinLatency, hwRsvpTeGroups=hwRsvpTeGroups, hwRsvpTeSenderInterface=hwRsvpTeSenderInterface, hwRsvpTeSenderSessionAttrHoldPrio=hwRsvpTeSenderSessionAttrHoldPrio, hwRsvpTeResvFwdScope=hwRsvpTeResvFwdScope, hwRsvpTeSenderEntry=hwRsvpTeSenderEntry, hwRsvpTeResvConfirm=hwRsvpTeResvConfirm, hwRsvpTeIfEntry=hwRsvpTeIfEntry, hwRsvpTeSenderAddr=hwRsvpTeSenderAddr, hwRsvpTeSessionLspsNumber=hwRsvpTeSessionLspsNumber, hwRsvpTeSenderFrrBandwidth=hwRsvpTeSenderFrrBandwidth, hwRsvpTeSessionTunnelExtId=hwRsvpTeSessionTunnelExtId, hwRsvpTeSenderAdspecMtu=hwRsvpTeSenderAdspecMtu, hwRsvpTeRroGroup=hwRsvpTeRroGroup, hwRsvpTeSenderAdspecCtrlLoadPathBw=hwRsvpTeSenderAdspecCtrlLoadPathBw, hwRsvpTeResvRSpecSlack=hwRsvpTeResvRSpecSlack, hwRsvpTeResvTSpecMaxTu=hwRsvpTeResvTSpecMaxTu, hwRsvpTeFilterSpecTable=hwRsvpTeFilterSpecTable, hwRsvpTeSenderLabelRequestAtmMinVpi=hwRsvpTeSenderLabelRequestAtmMinVpi, hwRsvpTeAuthFail=hwRsvpTeAuthFail, hwRsvpTeTrapObjectsGroup=hwRsvpTeTrapObjectsGroup, hwRsvpTeResvType=hwRsvpTeResvType, hwRsvpTeNbrSendersNumber=hwRsvpTeNbrSendersNumber, hwRsvpTeResvTSpecBurst=hwRsvpTeResvTSpecBurst, hwRsvpTeSenderMsgIdRcvNumber=hwRsvpTeSenderMsgIdRcvNumber, hwRsvpTeSenderHopLih=hwRsvpTeSenderHopLih, hwRsvpTeMessageIdEpoch=hwRsvpTeMessageIdEpoch, hwRsvpTeResvFwdInterval=hwRsvpTeResvFwdInterval, hwRsvpTeSessionSenders=hwRsvpTeSessionSenders, hwRsvpTeObjects=hwRsvpTeObjects, hwRsvpTeNbrReceiversNumber=hwRsvpTeNbrReceiversNumber, hwRsvpTeIfNbrs=hwRsvpTeIfNbrs, hwRsvpTeSenderLabelRequestL3pid=hwRsvpTeSenderLabelRequestL3pid, hwRsvpTeSessionTunnelId=hwRsvpTeSessionTunnelId, hwRsvpTeIfNbrThreshold=hwRsvpTeIfNbrThreshold, hwRsvpTeSenderLabelRequestFrMaxDlci=hwRsvpTeSenderLabelRequestFrMaxDlci, hwRsvpTeSenderSessionAttrIncludeAll=hwRsvpTeSenderSessionAttrIncludeAll, hwRsvpTeResvService=hwRsvpTeResvService, hwRsvpTeResvFwdTSpecPeakRate=hwRsvpTeResvFwdTSpecPeakRate, hwRsvpTeIfAuthEncrypted=hwRsvpTeIfAuthEncrypted, hwRsvpTeSessionGroup=hwRsvpTeSessionGroup, hwRsvpTeSenderRsvpHop=hwRsvpTeSenderRsvpHop, hwRsvpTeSenderAdspecGuaranteedCsum=hwRsvpTeSenderAdspecGuaranteedCsum, hwRsvpTeResvFwdSenderAddrLength=hwRsvpTeResvFwdSenderAddrLength, hwRsvpTeExtendTrap=hwRsvpTeExtendTrap, hwRsvpTeResvFwdNumber=hwRsvpTeResvFwdNumber, hwRsvpTeIfRetranInterval=hwRsvpTeIfRetranInterval, hwRsvpTeResvSenderAddrLength=hwRsvpTeResvSenderAddrLength, hwRsvpTeRroType=hwRsvpTeRroType, hwRsvpTeIfAuthKey=hwRsvpTeIfAuthKey, hwRsvpTeSenderHopAddr=hwRsvpTeSenderHopAddr, hwRsvpTeSenderFrrHoldPrio=hwRsvpTeSenderFrrHoldPrio)
