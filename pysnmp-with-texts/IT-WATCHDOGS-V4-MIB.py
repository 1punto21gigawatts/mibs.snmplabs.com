#
# PySNMP MIB module IT-WATCHDOGS-V4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IT-WATCHDOGS-V4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, NotificationType, Bits, Counter32, IpAddress, ObjectIdentity, MibIdentifier, Gauge32, ModuleIdentity, enterprises, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "NotificationType", "Bits", "Counter32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Gauge32", "ModuleIdentity", "enterprises", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
itwatchdogs = ModuleIdentity((1, 3, 6, 1, 4, 1, 17373))
itwatchdogs.setRevisions(('2012-09-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: itwatchdogs.setRevisionsDescriptions(('Original version',))
if mibBuilder.loadTexts: itwatchdogs.setLastUpdated('201209110000Z')
if mibBuilder.loadTexts: itwatchdogs.setOrganization('I.T. Watchdogs')
if mibBuilder.loadTexts: itwatchdogs.setContactInfo('support@itwatchdogs.com')
if mibBuilder.loadTexts: itwatchdogs.setDescription('The MIB for I.T. Watchdogs Products')
blackbird = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4))
watchdog100 = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1))
productTitle = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTitle.setStatus('current')
if mibBuilder.loadTexts: productTitle.setDescription('Product name')
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setStatus('current')
if mibBuilder.loadTexts: productVersion.setDescription('Product version')
productFriendlyName = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFriendlyName.setStatus('current')
if mibBuilder.loadTexts: productFriendlyName.setDescription('User-assigned name')
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setStatus('current')
if mibBuilder.loadTexts: productMacAddress.setDescription("Product's unique MAC address")
productUrl = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productUrl.setStatus('current')
if mibBuilder.loadTexts: productUrl.setDescription("Product's main URL access point")
deviceCount = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCount.setStatus('current')
if mibBuilder.loadTexts: deviceCount.setDescription('Total number of devices on unit')
temperatureUnits = MibScalar((1, 3, 6, 1, 4, 1, 17373, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureUnits.setStatus('current')
if mibBuilder.loadTexts: temperatureUnits.setDescription('Current units for temperature values. 0 = Degrees Fahrenheit, 1 = Degrees Celsius')
internalTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2), )
if mibBuilder.loadTexts: internalTable.setStatus('current')
if mibBuilder.loadTexts: internalTable.setDescription('Internal sensors for units')
internalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "internalIndex"))
if mibBuilder.loadTexts: internalEntry.setStatus('current')
if mibBuilder.loadTexts: internalEntry.setDescription('Entry in the internalTable table: each entry contains an index and other sensor details')
internalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIndex.setStatus('current')
if mibBuilder.loadTexts: internalIndex.setDescription('Table entry index value')
internalSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalSerial.setStatus('current')
if mibBuilder.loadTexts: internalSerial.setDescription('Serial Number')
internalName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalName.setStatus('current')
if mibBuilder.loadTexts: internalName.setDescription('Friendly Name')
internalAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalAvail.setStatus('current')
if mibBuilder.loadTexts: internalAvail.setDescription('Is device currently plugged in?')
internalTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalTemp.setStatus('current')
if mibBuilder.loadTexts: internalTemp.setDescription('Current reading for Temperature in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
internalHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalHumidity.setStatus('current')
if mibBuilder.loadTexts: internalHumidity.setDescription('Humidity reading')
internalDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalDewPoint.setStatus('current')
if mibBuilder.loadTexts: internalDewPoint.setDescription('Current reading for Dew-point in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
internalIO1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO1.setStatus('current')
if mibBuilder.loadTexts: internalIO1.setDescription('Current reading for Analog Input 1')
internalIO2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO2.setStatus('current')
if mibBuilder.loadTexts: internalIO2.setDescription('Current reading for Analog Input 2')
internalIO3 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO3.setStatus('current')
if mibBuilder.loadTexts: internalIO3.setDescription('Current reading for Analog Input 3')
internalIO4 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalIO4.setStatus('current')
if mibBuilder.loadTexts: internalIO4.setDescription('Current reading for Analog Input 4')
internalRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalRelayState.setStatus('current')
if mibBuilder.loadTexts: internalRelayState.setDescription('Is the relay on?')
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4), )
if mibBuilder.loadTexts: tempSensorTable.setStatus('current')
if mibBuilder.loadTexts: tempSensorTable.setDescription('Remote Temperature Sensor')
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: tempSensorEntry.setDescription('Entry in the tempSensorTable table: each entry contains an index and other sensor details')
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorIndex.setStatus('current')
if mibBuilder.loadTexts: tempSensorIndex.setDescription('Table entry index value')
tempSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorSerial.setStatus('current')
if mibBuilder.loadTexts: tempSensorSerial.setDescription('Serial Number')
tempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorName.setStatus('current')
if mibBuilder.loadTexts: tempSensorName.setDescription('Friendly Name')
tempSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorAvail.setStatus('current')
if mibBuilder.loadTexts: tempSensorAvail.setDescription('Is device currently plugged in?')
tempSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorTemp.setStatus('current')
if mibBuilder.loadTexts: tempSensorTemp.setDescription('Current reading for Temperature in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
airFlowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5), )
if mibBuilder.loadTexts: airFlowSensorTable.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTable.setDescription('Remote Airflow, Humidity, Temperature and Dewpoint Sensor ')
airFlowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "airFlowSensorIndex"))
if mibBuilder.loadTexts: airFlowSensorEntry.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorEntry.setDescription('Entry in the airFlowSensorTable table: each entry contains an index and other sensor details')
airFlowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorIndex.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorIndex.setDescription('Table entry index value')
airFlowSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorSerial.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorSerial.setDescription('Serial Number')
airFlowSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorName.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorName.setDescription('Friendly Name')
airFlowSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorAvail.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorAvail.setDescription('Is device currently plugged in?')
airFlowSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorTemp.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTemp.setDescription('Current reading for Temperature in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
airFlowSensorFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorFlow.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorFlow.setDescription('AFHT3 Airflow reading')
airFlowSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorHumidity.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorHumidity.setDescription('AFHT3 Humidity reading')
airFlowSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorDewPoint.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorDewPoint.setDescription('Current reading for Dew Point in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
dewPointSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6), )
if mibBuilder.loadTexts: dewPointSensorTable.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorTable.setDescription('Remote Dew Point sensor')
dewPointSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "dewPointSensorIndex"))
if mibBuilder.loadTexts: dewPointSensorEntry.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorEntry.setDescription('Entry in the dewPointSensorTable table: each entry contains an index and other sensor details')
dewPointSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorIndex.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorIndex.setDescription('Table entry index value')
dewPointSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorSerial.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorSerial.setDescription('Serial Number')
dewPointSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorName.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorName.setDescription('Friendly Name')
dewPointSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorAvail.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorAvail.setDescription('Is device currently plugged in?')
dewPointSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorTemp.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorTemp.setDescription('Current reading for Temperature in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
dewPointSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorHumidity.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorHumidity.setDescription('Humidity reading')
dewPointSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorDewPoint.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorDewPoint.setDescription('Current reading for Dew-point in tenths of degrees. Units are given by temperatureUnits field in deviceInfo')
ccatSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7), )
if mibBuilder.loadTexts: ccatSensorTable.setStatus('current')
if mibBuilder.loadTexts: ccatSensorTable.setDescription('Remote CCAT sensor')
ccatSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "ccatSensorIndex"))
if mibBuilder.loadTexts: ccatSensorEntry.setStatus('current')
if mibBuilder.loadTexts: ccatSensorEntry.setDescription('Entry in the ccatSensorTable table: each entry contains an index and other sensor details')
ccatSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorIndex.setStatus('current')
if mibBuilder.loadTexts: ccatSensorIndex.setDescription('Table entry index value')
ccatSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorSerial.setStatus('current')
if mibBuilder.loadTexts: ccatSensorSerial.setDescription('Serial Number')
ccatSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorName.setStatus('current')
if mibBuilder.loadTexts: ccatSensorName.setDescription('Friendly Name')
ccatSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorAvail.setStatus('current')
if mibBuilder.loadTexts: ccatSensorAvail.setDescription('Is device currently plugged in?')
ccatSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorValue.setStatus('current')
if mibBuilder.loadTexts: ccatSensorValue.setDescription('CCAT sensor reading')
ccatSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorType.setStatus('current')
if mibBuilder.loadTexts: ccatSensorType.setDescription('CCAT sensor type')
ccatSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccatSensorDescription.setStatus('current')
if mibBuilder.loadTexts: ccatSensorDescription.setDescription('CCAT sensor value description')
t3hdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8), )
if mibBuilder.loadTexts: t3hdSensorTable.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorTable.setDescription('Remote Temperature x 3, Humidity and Dewpoint Sensor')
t3hdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "t3hdSensorIndex"))
if mibBuilder.loadTexts: t3hdSensorEntry.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorEntry.setDescription('Entry in the t3hdSensorTable table: each entry contains an index and other sensor details')
t3hdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIndex.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIndex.setDescription('Table entry index value')
t3hdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorSerial.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorSerial.setDescription('Serial Number')
t3hdSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorName.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorName.setDescription('Friendly Name')
t3hdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorAvail.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorAvail.setDescription('Is device currently plugged in?')
t3hdSensorIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntName.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntName.setDescription('T3HD Sensor Internal Friendly Name')
t3hdSensorIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntTemp.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntTemp.setDescription('Current reading for Internal Temperature in 0.1 degrees. Units are given by temperatureUnits field in deviceInfo')
t3hdSensorIntHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setDescription('T3HD Sensor Internal Humidity')
t3hdSensorIntDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntDewPoint.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntDewPoint.setDescription('Current reading for Internal DewPoint in 0.1 degrees. Units are given by temperatureUnits field in deviceInfo')
t3hdSensorExtAAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtAAvail.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtAAvail.setDescription('T3HD External A status: 0 = unplugged, 1 = normal operation, 2 = device error')
t3hdSensorExtAName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtAName.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtAName.setDescription('T3HD External A Friendly Name')
t3hdSensorExtATemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtATemp.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtATemp.setDescription('Current reading for External Temperature A in 0.1 degrees. Units are given by temperatureUnits field in deviceInfo')
t3hdSensorExtBAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBAvail.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBAvail.setDescription('T3HD External B status: 0 = unplugged, 1 = normal operation, 2 = device error')
t3hdSensorExtBName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBName.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBName.setDescription('T3HD External B Friendly Name')
t3hdSensorExtBTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExtBTemp.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBTemp.setDescription('Current reading for External Temperature B in 0.1 degrees. Units are given by temperatureUnits field in deviceInfo')
thdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9), )
if mibBuilder.loadTexts: thdSensorTable.setStatus('current')
if mibBuilder.loadTexts: thdSensorTable.setDescription('Remote Temperature, Humidity and Dewpoint Sensor')
thdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "thdSensorIndex"))
if mibBuilder.loadTexts: thdSensorEntry.setStatus('current')
if mibBuilder.loadTexts: thdSensorEntry.setDescription('Entry in the thdSensorTable table: each entry contains an index and other sensor details')
thdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorIndex.setStatus('current')
if mibBuilder.loadTexts: thdSensorIndex.setDescription('Table entry index value')
thdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorSerial.setStatus('current')
if mibBuilder.loadTexts: thdSensorSerial.setDescription('Serial Number')
thdSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorName.setStatus('current')
if mibBuilder.loadTexts: thdSensorName.setDescription('Friendly Name')
thdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorAvail.setStatus('current')
if mibBuilder.loadTexts: thdSensorAvail.setDescription('Is device currently plugged in?')
thdSensorTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorTemp.setStatus('current')
if mibBuilder.loadTexts: thdSensorTemp.setDescription('Current reading for Temperature in 0.1 degrees. Units are given by temperatureUnits field in deviceInfo')
thdSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorHumidity.setStatus('current')
if mibBuilder.loadTexts: thdSensorHumidity.setDescription('THD Sensor Humidity')
thdSensorDewPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 200))).setUnits('0.1 Degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorDewPoint.setStatus('current')
if mibBuilder.loadTexts: thdSensorDewPoint.setDescription('Current reading for DewPoint in 0.1 degrees. Units are given by temperatureUnits field in deviceInfo')
rpmSensorTable = MibTable((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10), )
if mibBuilder.loadTexts: rpmSensorTable.setStatus('current')
if mibBuilder.loadTexts: rpmSensorTable.setDescription('Remote Power Manager Sensor')
rpmSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1), ).setIndexNames((0, "IT-WATCHDOGS-V4-MIB", "rpmSensorIndex"))
if mibBuilder.loadTexts: rpmSensorEntry.setStatus('current')
if mibBuilder.loadTexts: rpmSensorEntry.setDescription('Entry in the rpmSensorTable table: each entry contains an index and other sensor details')
rpmSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorIndex.setStatus('current')
if mibBuilder.loadTexts: rpmSensorIndex.setDescription('Table entry index value')
rpmSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorSerial.setStatus('current')
if mibBuilder.loadTexts: rpmSensorSerial.setDescription('Serial Number')
rpmSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorName.setStatus('current')
if mibBuilder.loadTexts: rpmSensorName.setDescription('Friendly Name')
rpmSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorAvail.setStatus('current')
if mibBuilder.loadTexts: rpmSensorAvail.setDescription('Is device currently plugged in?')
rpmSensorEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 5), Gauge32()).setUnits('kWh').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorEnergy.setStatus('current')
if mibBuilder.loadTexts: rpmSensorEnergy.setDescription('RPM Sensor Accumulated Energy')
rpmSensorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 6), Gauge32()).setUnits('Volts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltage.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltage.setDescription('RPM Sensor Voltage')
rpmSensorVoltageMax = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 7), Gauge32()).setUnits('Volts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltageMax.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageMax.setDescription('RPM Sensor Voltage (Max)')
rpmSensorVoltageMin = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 8), Gauge32()).setUnits('Volts (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltageMin.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageMin.setDescription('RPM Sensor Voltage (Min)')
rpmSensorVoltagePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 9), Gauge32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorVoltagePeak.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltagePeak.setDescription('RPM Sensor Voltage (Peak)')
rpmSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 10), Gauge32()).setUnits('0.1 Amps (rms)').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorCurrent.setStatus('current')
if mibBuilder.loadTexts: rpmSensorCurrent.setDescription('RPM Sensor Current reading in deciAmps')
rpmSensorRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 11), Gauge32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorRealPower.setStatus('current')
if mibBuilder.loadTexts: rpmSensorRealPower.setDescription('RPM Sensor Real Power')
rpmSensorApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 12), Gauge32()).setUnits('Volt-Amps').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorApparentPower.setStatus('current')
if mibBuilder.loadTexts: rpmSensorApparentPower.setDescription('RPM Sensor Apparent Power')
rpmSensorPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 13), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorPowerFactor.setStatus('current')
if mibBuilder.loadTexts: rpmSensorPowerFactor.setDescription('RPM Sensor Power Factor')
rpmSensorOutlet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorOutlet1.setStatus('current')
if mibBuilder.loadTexts: rpmSensorOutlet1.setDescription('RPM Sensor Outlet 1 State: 0 = off, 1 = on')
rpmSensorOutlet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17373, 4, 1, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmSensorOutlet2.setStatus('current')
if mibBuilder.loadTexts: rpmSensorOutlet2.setDescription('RPM Sensor Outlet 2 State: 0 = off, 1 = on')
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767))
trapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0))
internalTestNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10101))
if mibBuilder.loadTexts: internalTestNOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalTestNOTIFY.setDescription('Test SNMP Trap')
internalTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10205)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalTempNOTIFY.setDescription('Internal Temperature Sensor Trap')
internalTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20205)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: internalTempCLEAR.setDescription('Internal Temperature Sensor Clear Trap')
internalHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10206)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalHumidity"))
if mibBuilder.loadTexts: internalHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalHumidityNOTIFY.setDescription('Humidity reading Trap')
internalHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20206)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalHumidity"))
if mibBuilder.loadTexts: internalHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: internalHumidityCLEAR.setDescription('Humidity reading Clear Trap')
internalDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10207)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalDewPointNOTIFY.setDescription('Internal Dew Point Sensor Trap')
internalDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20207)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: internalDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: internalDewPointCLEAR.setDescription('Internal Dew Point Sensor Clear Trap')
internalIO1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10208)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO1"))
if mibBuilder.loadTexts: internalIO1NOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalIO1NOTIFY.setDescription('Current reading for Analog Input 1 Trap')
internalIO1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20208)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO1"))
if mibBuilder.loadTexts: internalIO1CLEAR.setStatus('current')
if mibBuilder.loadTexts: internalIO1CLEAR.setDescription('Current reading for Analog Input 1 Clear Trap')
internalIO2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10209)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO2"))
if mibBuilder.loadTexts: internalIO2NOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalIO2NOTIFY.setDescription('Current reading for Analog Input 2 Trap')
internalIO2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20209)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO2"))
if mibBuilder.loadTexts: internalIO2CLEAR.setStatus('current')
if mibBuilder.loadTexts: internalIO2CLEAR.setDescription('Current reading for Analog Input 2 Clear Trap')
internalIO3NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10210)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO3"))
if mibBuilder.loadTexts: internalIO3NOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalIO3NOTIFY.setDescription('Current reading for Analog Input 3 Trap')
internalIO3CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20210)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO3"))
if mibBuilder.loadTexts: internalIO3CLEAR.setStatus('current')
if mibBuilder.loadTexts: internalIO3CLEAR.setDescription('Current reading for Analog Input 3 Clear Trap')
internalIO4NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10211)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO4"))
if mibBuilder.loadTexts: internalIO4NOTIFY.setStatus('current')
if mibBuilder.loadTexts: internalIO4NOTIFY.setDescription('Current reading for Analog Input 4 Trap')
internalIO4CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20211)).setObjects(("IT-WATCHDOGS-V4-MIB", "internalIO4"))
if mibBuilder.loadTexts: internalIO4CLEAR.setStatus('current')
if mibBuilder.loadTexts: internalIO4CLEAR.setDescription('Current reading for Analog Input 4 Clear Trap')
tempSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10405)).setObjects(("IT-WATCHDOGS-V4-MIB", "tempSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: tempSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: tempSensorTempNOTIFY.setDescription('Remote Temperature Sensor Trap')
tempSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20405)).setObjects(("IT-WATCHDOGS-V4-MIB", "tempSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: tempSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: tempSensorTempCLEAR.setDescription('Remote Temperature Sensor Clear Trap')
airFlowSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10505)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTempNOTIFY.setDescription('AFHT3 Sensor Temperature Trap')
airFlowSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20505)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorTempCLEAR.setDescription('AFHT3 Sensor Temperature Clear Trap')
airFlowSensorFlowNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10506)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorFlow"))
if mibBuilder.loadTexts: airFlowSensorFlowNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorFlowNOTIFY.setDescription('AFHT3 Airflow reading Trap')
airFlowSensorFlowCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20506)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorFlow"))
if mibBuilder.loadTexts: airFlowSensorFlowCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorFlowCLEAR.setDescription('AFHT3 Airflow reading Clear Trap')
airFlowSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10507)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorHumidity"))
if mibBuilder.loadTexts: airFlowSensorHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorHumidityNOTIFY.setDescription('AFHT3 Humidity reading Trap')
airFlowSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20507)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorHumidity"))
if mibBuilder.loadTexts: airFlowSensorHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorHumidityCLEAR.setDescription('AFHT3 Humidity reading Clear Trap')
airFlowSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10508)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorDewPointNOTIFY.setDescription('AFHT3 Sensor Dew Point Trap')
airFlowSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20508)).setObjects(("IT-WATCHDOGS-V4-MIB", "airFlowSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: airFlowSensorDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: airFlowSensorDewPointCLEAR.setDescription('AFHT3 Sensor Dew Point Clear Trap')
dewPointSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10605)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorTempNOTIFY.setDescription('Remote Dew Point Sensor Temperature Trap')
dewPointSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20605)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorTempCLEAR.setDescription('Remote Dew Point Sensor Temperature Clear Trap')
dewPointSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10606)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorHumidity"))
if mibBuilder.loadTexts: dewPointSensorHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorHumidityNOTIFY.setDescription('Humidity reading Trap')
dewPointSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20606)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorHumidity"))
if mibBuilder.loadTexts: dewPointSensorHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorHumidityCLEAR.setDescription('Humidity reading Clear Trap')
dewPointSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10607)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorDewPointNOTIFY.setDescription('Remote Dew Point Sensor Dew Point Trap')
dewPointSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20607)).setObjects(("IT-WATCHDOGS-V4-MIB", "dewPointSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: dewPointSensorDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: dewPointSensorDewPointCLEAR.setDescription('Remote Dew Point Sensor Dew Point Clear Trap')
ccatSensorValueNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10705)).setObjects(("IT-WATCHDOGS-V4-MIB", "ccatSensorValue"), ("IT-WATCHDOGS-V4-MIB", "ccatSensorType"))
if mibBuilder.loadTexts: ccatSensorValueNOTIFY.setStatus('current')
if mibBuilder.loadTexts: ccatSensorValueNOTIFY.setDescription('CCAT sensor reading Trap')
ccatSensorValueCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20705)).setObjects(("IT-WATCHDOGS-V4-MIB", "ccatSensorValue"), ("IT-WATCHDOGS-V4-MIB", "ccatSensorType"))
if mibBuilder.loadTexts: ccatSensorValueCLEAR.setStatus('current')
if mibBuilder.loadTexts: ccatSensorValueCLEAR.setDescription('CCAT sensor reading Clear Trap')
t3hdSensorIntTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10806)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntTempNOTIFY.setDescription('T3HD Sensor Temperature Trap')
t3hdSensorIntTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20806)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntTempCLEAR.setDescription('T3HD Sensor Temperature Clear Trap')
t3hdSensorIntHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10807)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntHumidity"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntHumidityNOTIFY.setDescription('T3HD Sensor Internal Humidity Trap')
t3hdSensorIntHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20807)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntHumidity"))
if mibBuilder.loadTexts: t3hdSensorIntHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntHumidityCLEAR.setDescription('T3HD Sensor Internal Humidity Clear Trap')
t3hdSensorIntDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10808)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntDewPointNOTIFY.setDescription('T3HD Sensor Dew Point Trap')
t3hdSensorIntDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20808)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorIntDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorIntDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorIntDewPointCLEAR.setDescription('T3HD Sensor Dew Point Clear Trap')
t3hdSensorExtATempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10811)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtATemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtATempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtATempNOTIFY.setDescription('T3HD Sensor External A Temperature Trap')
t3hdSensorExtATempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20811)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtATemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtATempCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtATempCLEAR.setDescription('T3HD Sensor External A Temperature Clear Trap')
t3hdSensorExtBTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10814)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtBTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtBTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBTempNOTIFY.setDescription('T3HD Sensor External B Temperature Trap')
t3hdSensorExtBTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20814)).setObjects(("IT-WATCHDOGS-V4-MIB", "t3hdSensorExtBTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: t3hdSensorExtBTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: t3hdSensorExtBTempCLEAR.setDescription('T3HD Sensor External B Temperature Clear Trap')
thdSensorTempNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10905)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorTempNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorTempNOTIFY.setDescription('THD Sensor Temperature Trap')
thdSensorTempCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20905)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorTemp"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorTempCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorTempCLEAR.setDescription('THD Sensor Temperature Clear Trap')
thdSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10906)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorHumidity"))
if mibBuilder.loadTexts: thdSensorHumidityNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorHumidityNOTIFY.setDescription('THD Sensor Humidity Trap')
thdSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20906)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorHumidity"))
if mibBuilder.loadTexts: thdSensorHumidityCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorHumidityCLEAR.setDescription('THD Sensor Humidity Clear Trap')
thdSensorDewPointNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 10907)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorDewPointNOTIFY.setStatus('current')
if mibBuilder.loadTexts: thdSensorDewPointNOTIFY.setDescription('THD Sensor Dew Point Trap')
thdSensorDewPointCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 20907)).setObjects(("IT-WATCHDOGS-V4-MIB", "thdSensorDewPoint"), ("IT-WATCHDOGS-V4-MIB", "temperatureUnits"))
if mibBuilder.loadTexts: thdSensorDewPointCLEAR.setStatus('current')
if mibBuilder.loadTexts: thdSensorDewPointCLEAR.setDescription('THD Sensor Dew Point Clear Trap')
rpmSensorEnergyNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11005)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorEnergy"))
if mibBuilder.loadTexts: rpmSensorEnergyNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorEnergyNOTIFY.setDescription('RPM Sensor Accumulated Energy Trap')
rpmSensorEnergyCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21005)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorEnergy"))
if mibBuilder.loadTexts: rpmSensorEnergyCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorEnergyCLEAR.setDescription('RPM Sensor Accumulated Energy Clear Trap')
rpmSensorVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11006)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltage"))
if mibBuilder.loadTexts: rpmSensorVoltageNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageNOTIFY.setDescription('RPM Sensor Voltage Trap')
rpmSensorVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21006)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltage"))
if mibBuilder.loadTexts: rpmSensorVoltageCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageCLEAR.setDescription('RPM Sensor Voltage Clear Trap')
rpmSensorVoltageMaxNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11007)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMax"))
if mibBuilder.loadTexts: rpmSensorVoltageMaxNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageMaxNOTIFY.setDescription('RPM Sensor Voltage (Max) Trap')
rpmSensorVoltageMaxCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21007)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMax"))
if mibBuilder.loadTexts: rpmSensorVoltageMaxCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageMaxCLEAR.setDescription('RPM Sensor Voltage (Max) Clear Trap')
rpmSensorVoltageMinNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11008)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMin"))
if mibBuilder.loadTexts: rpmSensorVoltageMinNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageMinNOTIFY.setDescription('RPM Sensor Voltage (Min) Trap')
rpmSensorVoltageMinCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21008)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltageMin"))
if mibBuilder.loadTexts: rpmSensorVoltageMinCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltageMinCLEAR.setDescription('RPM Sensor Voltage (Min) Clear Trap')
rpmSensorVoltagePeakNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11009)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltagePeak"))
if mibBuilder.loadTexts: rpmSensorVoltagePeakNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltagePeakNOTIFY.setDescription('RPM Sensor Voltage (Peak) Trap')
rpmSensorVoltagePeakCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21009)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorVoltagePeak"))
if mibBuilder.loadTexts: rpmSensorVoltagePeakCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorVoltagePeakCLEAR.setDescription('RPM Sensor Voltage (Peak) Clear Trap')
rpmSensorCurrentNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11010)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorCurrent"))
if mibBuilder.loadTexts: rpmSensorCurrentNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorCurrentNOTIFY.setDescription('RPM Sensor Current Trap')
rpmSensorCurrentCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21010)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorCurrent"))
if mibBuilder.loadTexts: rpmSensorCurrentCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorCurrentCLEAR.setDescription('RPM Sensor Current Clear Trap')
rpmSensorRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11011)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorRealPower"))
if mibBuilder.loadTexts: rpmSensorRealPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorRealPowerNOTIFY.setDescription('RPM Sensor Real Power Trap')
rpmSensorRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21011)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorRealPower"))
if mibBuilder.loadTexts: rpmSensorRealPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorRealPowerCLEAR.setDescription('RPM Sensor Real Power Clear Trap')
rpmSensorApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11012)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorApparentPower"))
if mibBuilder.loadTexts: rpmSensorApparentPowerNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorApparentPowerNOTIFY.setDescription('RPM Sensor Apparent Power Trap')
rpmSensorApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21012)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorApparentPower"))
if mibBuilder.loadTexts: rpmSensorApparentPowerCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorApparentPowerCLEAR.setDescription('RPM Sensor Apparent Power Clear Trap')
rpmSensorPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 11013)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorPowerFactor"))
if mibBuilder.loadTexts: rpmSensorPowerFactorNOTIFY.setStatus('current')
if mibBuilder.loadTexts: rpmSensorPowerFactorNOTIFY.setDescription('RPM Sensor Power Factor Trap')
rpmSensorPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 17373, 4, 1, 32767, 0, 21013)).setObjects(("IT-WATCHDOGS-V4-MIB", "rpmSensorPowerFactor"))
if mibBuilder.loadTexts: rpmSensorPowerFactorCLEAR.setStatus('current')
if mibBuilder.loadTexts: rpmSensorPowerFactorCLEAR.setDescription('RPM Sensor Power Factor Clear Trap')
mibBuilder.exportSymbols("IT-WATCHDOGS-V4-MIB", airFlowSensorTempCLEAR=airFlowSensorTempCLEAR, tempSensorEntry=tempSensorEntry, airFlowSensorHumidityCLEAR=airFlowSensorHumidityCLEAR, rpmSensorEnergyNOTIFY=rpmSensorEnergyNOTIFY, ccatSensorSerial=ccatSensorSerial, rpmSensorVoltageMaxCLEAR=rpmSensorVoltageMaxCLEAR, rpmSensorEntry=rpmSensorEntry, blackbird=blackbird, tempSensorIndex=tempSensorIndex, airFlowSensorFlowCLEAR=airFlowSensorFlowCLEAR, dewPointSensorTempCLEAR=dewPointSensorTempCLEAR, rpmSensorCurrentCLEAR=rpmSensorCurrentCLEAR, internalIndex=internalIndex, internalIO1=internalIO1, rpmSensorIndex=rpmSensorIndex, PYSNMP_MODULE_ID=itwatchdogs, t3hdSensorIntDewPoint=t3hdSensorIntDewPoint, productFriendlyName=productFriendlyName, t3hdSensorExtAName=t3hdSensorExtAName, rpmSensorVoltageNOTIFY=rpmSensorVoltageNOTIFY, t3hdSensorExtAAvail=t3hdSensorExtAAvail, airFlowSensorIndex=airFlowSensorIndex, airFlowSensorTempNOTIFY=airFlowSensorTempNOTIFY, t3hdSensorIntDewPointCLEAR=t3hdSensorIntDewPointCLEAR, tempSensorTempNOTIFY=tempSensorTempNOTIFY, ccatSensorIndex=ccatSensorIndex, thdSensorAvail=thdSensorAvail, internalSerial=internalSerial, internalName=internalName, thdSensorTemp=thdSensorTemp, internalIO2=internalIO2, rpmSensorApparentPower=rpmSensorApparentPower, thdSensorHumidityNOTIFY=thdSensorHumidityNOTIFY, rpmSensorRealPower=rpmSensorRealPower, dewPointSensorTemp=dewPointSensorTemp, rpmSensorSerial=rpmSensorSerial, internalIO3CLEAR=internalIO3CLEAR, dewPointSensorName=dewPointSensorName, t3hdSensorExtBTemp=t3hdSensorExtBTemp, rpmSensorVoltage=rpmSensorVoltage, rpmSensorApparentPowerNOTIFY=rpmSensorApparentPowerNOTIFY, thdSensorTable=thdSensorTable, airFlowSensorSerial=airFlowSensorSerial, internalDewPointCLEAR=internalDewPointCLEAR, internalIO4CLEAR=internalIO4CLEAR, airFlowSensorHumidityNOTIFY=airFlowSensorHumidityNOTIFY, tempSensorName=tempSensorName, ccatSensorValueCLEAR=ccatSensorValueCLEAR, t3hdSensorIntHumidityCLEAR=t3hdSensorIntHumidityCLEAR, rpmSensorVoltageMax=rpmSensorVoltageMax, thdSensorDewPointCLEAR=thdSensorDewPointCLEAR, dewPointSensorEntry=dewPointSensorEntry, t3hdSensorExtATemp=t3hdSensorExtATemp, internalHumidityCLEAR=internalHumidityCLEAR, t3hdSensorIntTemp=t3hdSensorIntTemp, t3hdSensorExtBTempCLEAR=t3hdSensorExtBTempCLEAR, t3hdSensorExtATempCLEAR=t3hdSensorExtATempCLEAR, t3hdSensorExtBName=t3hdSensorExtBName, thdSensorDewPoint=thdSensorDewPoint, dewPointSensorIndex=dewPointSensorIndex, internalIO3NOTIFY=internalIO3NOTIFY, thdSensorTempNOTIFY=thdSensorTempNOTIFY, rpmSensorVoltagePeakCLEAR=rpmSensorVoltagePeakCLEAR, tempSensorTable=tempSensorTable, dewPointSensorDewPointCLEAR=dewPointSensorDewPointCLEAR, t3hdSensorIntTempNOTIFY=t3hdSensorIntTempNOTIFY, ccatSensorDescription=ccatSensorDescription, dewPointSensorTable=dewPointSensorTable, t3hdSensorIndex=t3hdSensorIndex, rpmSensorPowerFactor=rpmSensorPowerFactor, thdSensorDewPointNOTIFY=thdSensorDewPointNOTIFY, internalTempNOTIFY=internalTempNOTIFY, rpmSensorEnergyCLEAR=rpmSensorEnergyCLEAR, tempSensorTempCLEAR=tempSensorTempCLEAR, t3hdSensorExtBAvail=t3hdSensorExtBAvail, airFlowSensorFlowNOTIFY=airFlowSensorFlowNOTIFY, t3hdSensorIntName=t3hdSensorIntName, internalTestNOTIFY=internalTestNOTIFY, rpmSensorCurrent=rpmSensorCurrent, rpmSensorVoltageMin=rpmSensorVoltageMin, rpmSensorRealPowerCLEAR=rpmSensorRealPowerCLEAR, internalIO2NOTIFY=internalIO2NOTIFY, thdSensorTempCLEAR=thdSensorTempCLEAR, thdSensorName=thdSensorName, t3hdSensorIntHumidity=t3hdSensorIntHumidity, internalIO1NOTIFY=internalIO1NOTIFY, thdSensorIndex=thdSensorIndex, airFlowSensorFlow=airFlowSensorFlow, ccatSensorTable=ccatSensorTable, rpmSensorEnergy=rpmSensorEnergy, internalDewPointNOTIFY=internalDewPointNOTIFY, rpmSensorVoltageMaxNOTIFY=rpmSensorVoltageMaxNOTIFY, rpmSensorVoltagePeakNOTIFY=rpmSensorVoltagePeakNOTIFY, rpmSensorTable=rpmSensorTable, internalIO4=internalIO4, internalTemp=internalTemp, t3hdSensorSerial=t3hdSensorSerial, productTitle=productTitle, internalTempCLEAR=internalTempCLEAR, airFlowSensorDewPointNOTIFY=airFlowSensorDewPointNOTIFY, watchdog100=watchdog100, ccatSensorValueNOTIFY=ccatSensorValueNOTIFY, temperatureUnits=temperatureUnits, tempSensorTemp=tempSensorTemp, t3hdSensorAvail=t3hdSensorAvail, rpmSensorAvail=rpmSensorAvail, trap=trap, airFlowSensorDewPointCLEAR=airFlowSensorDewPointCLEAR, deviceCount=deviceCount, rpmSensorApparentPowerCLEAR=rpmSensorApparentPowerCLEAR, tempSensorSerial=tempSensorSerial, internalTable=internalTable, dewPointSensorSerial=dewPointSensorSerial, ccatSensorValue=ccatSensorValue, rpmSensorOutlet1=rpmSensorOutlet1, airFlowSensorName=airFlowSensorName, dewPointSensorDewPointNOTIFY=dewPointSensorDewPointNOTIFY, t3hdSensorExtATempNOTIFY=t3hdSensorExtATempNOTIFY, rpmSensorPowerFactorCLEAR=rpmSensorPowerFactorCLEAR, internalAvail=internalAvail, deviceInfo=deviceInfo, rpmSensorRealPowerNOTIFY=rpmSensorRealPowerNOTIFY, t3hdSensorIntDewPointNOTIFY=t3hdSensorIntDewPointNOTIFY, t3hdSensorIntTempCLEAR=t3hdSensorIntTempCLEAR, airFlowSensorTable=airFlowSensorTable, ccatSensorEntry=ccatSensorEntry, productUrl=productUrl, airFlowSensorHumidity=airFlowSensorHumidity, rpmSensorVoltageCLEAR=rpmSensorVoltageCLEAR, dewPointSensorDewPoint=dewPointSensorDewPoint, ccatSensorName=ccatSensorName, rpmSensorOutlet2=rpmSensorOutlet2, t3hdSensorExtBTempNOTIFY=t3hdSensorExtBTempNOTIFY, internalIO2CLEAR=internalIO2CLEAR, internalIO1CLEAR=internalIO1CLEAR, dewPointSensorHumidityCLEAR=dewPointSensorHumidityCLEAR, airFlowSensorDewPoint=airFlowSensorDewPoint, t3hdSensorIntHumidityNOTIFY=t3hdSensorIntHumidityNOTIFY, internalHumidity=internalHumidity, t3hdSensorTable=t3hdSensorTable, t3hdSensorEntry=t3hdSensorEntry, rpmSensorVoltagePeak=rpmSensorVoltagePeak, rpmSensorVoltageMinCLEAR=rpmSensorVoltageMinCLEAR, internalDewPoint=internalDewPoint, internalRelayState=internalRelayState, thdSensorEntry=thdSensorEntry, dewPointSensorHumidity=dewPointSensorHumidity, internalIO3=internalIO3, rpmSensorVoltageMinNOTIFY=rpmSensorVoltageMinNOTIFY, tempSensorAvail=tempSensorAvail, ccatSensorType=ccatSensorType, itwatchdogs=itwatchdogs, thdSensorSerial=thdSensorSerial, internalEntry=internalEntry, thdSensorHumidityCLEAR=thdSensorHumidityCLEAR, airFlowSensorEntry=airFlowSensorEntry, ccatSensorAvail=ccatSensorAvail, dewPointSensorTempNOTIFY=dewPointSensorTempNOTIFY, dewPointSensorHumidityNOTIFY=dewPointSensorHumidityNOTIFY, airFlowSensorTemp=airFlowSensorTemp, productVersion=productVersion, rpmSensorCurrentNOTIFY=rpmSensorCurrentNOTIFY, internalHumidityNOTIFY=internalHumidityNOTIFY, airFlowSensorAvail=airFlowSensorAvail, trapPrefix=trapPrefix, dewPointSensorAvail=dewPointSensorAvail, internalIO4NOTIFY=internalIO4NOTIFY, t3hdSensorName=t3hdSensorName, rpmSensorName=rpmSensorName, thdSensorHumidity=thdSensorHumidity, rpmSensorPowerFactorNOTIFY=rpmSensorPowerFactorNOTIFY, productMacAddress=productMacAddress)
