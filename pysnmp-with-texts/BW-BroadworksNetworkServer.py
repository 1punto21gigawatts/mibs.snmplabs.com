#
# PySNMP MIB module BW-BroadworksNetworkServer (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BW-BroadworksNetworkServer
# Produced by pysmi-0.3.4 at Wed May  1 11:42:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, ObjectIdentity, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, MibIdentifier, Counter32, NotificationType, Unsigned32, ModuleIdentity, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "Unsigned32", "ModuleIdentity", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
broadsoft = ModuleIdentity((1, 3, 6, 1, 4, 1, 6431))
broadsoft.setRevisions(('2000-09-19 14:31',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: broadsoft.setRevisionsDescriptions(('',))
if mibBuilder.loadTexts: broadsoft.setLastUpdated('200007080000Z')
if mibBuilder.loadTexts: broadsoft.setOrganization('Broadsoft, Inc')
if mibBuilder.loadTexts: broadsoft.setContactInfo('Broadsoft, Inc 220 Perry Parkway Gaithersburg, MD 20877 301-977-9440')
if mibBuilder.loadTexts: broadsoft.setDescription('This is the System Management Information structure for the Broadsoft enterprise.')
broadworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1))
nsExecutionServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5))
nsProvisioningServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9))
networkServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 11))
nsProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 11, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1))
processing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2))
protocol = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3))
persistency = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 5))
serviceControlProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6))
concurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7))
bwNSMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100))
psSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1))
psProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3))
psPersistency = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4))
psConcurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5))
licensing = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11))
bwNbTimePeriodWithLicenseViolations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNbTimePeriodWithLicenseViolations.setStatus('current')
if mibBuilder.loadTexts: bwNbTimePeriodWithLicenseViolations.setDescription('Number of Time Periods in which a license violation occurred')
bwNbTransactionInViolation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNbTransactionInViolation.setStatus('current')
if mibBuilder.loadTexts: bwNbTransactionInViolation.setDescription('Number of transactions that were in violation since the last BroadWorks restart')
bwNbThresholdAlarmSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNbThresholdAlarmSent.setStatus('current')
if mibBuilder.loadTexts: bwNbThresholdAlarmSent.setDescription('Number of times a threshold alarm was sent since the last BroadWorks restart')
bwNbNonInviteTimePeriodWithLicenseViolations = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNbNonInviteTimePeriodWithLicenseViolations.setStatus('current')
if mibBuilder.loadTexts: bwNbNonInviteTimePeriodWithLicenseViolations.setDescription('Number of time periods in which a non-invite transaction license violation occurred.')
bwNbNonInviteTransactionInViolation = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNbNonInviteTransactionInViolation.setStatus('current')
if mibBuilder.loadTexts: bwNbNonInviteTransactionInViolation.setDescription('Number of non-invite transactions that were in violation since the last BroadWorks restart.')
bwNbNonInviteThresholdAlarmSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNbNonInviteThresholdAlarmSent.setStatus('current')
if mibBuilder.loadTexts: bwNbNonInviteThresholdAlarmSent.setDescription('Number of times a threshold alarm for non-invite transaction was sent since the last BroadWorks restart.')
internalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12))
bwNSSystemInternalQueueResets = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSystemInternalQueueResets.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueResets.setDescription('When set to a value other then 0, all the internal queue statistic stored under bwNSSystemInternalQueueTable are reset to 0.')
bwNSSystemInternalQueueTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2), )
if mibBuilder.loadTexts: bwNSSystemInternalQueueTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTable.setDescription('This table contains statistics about the BroadWorks internal queues')
bwNSSystemInternalQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSystemInternalQueueIndex"))
if mibBuilder.loadTexts: bwNSSystemInternalQueueEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueEntry.setDescription('This row contains the statistics for a given internal queue in the system')
bwNSSystemInternalQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueIndex.setDescription('This integer represents an index to an internal queue in the system.')
bwNSSystemInternalQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueName.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueName.setDescription('This string represents the name of an internal queue.')
bwNSSystemInternalQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueSize.setDescription('The number of sample elements that the average, minimum and maximum holding time were calculated from.')
bwNSSystemInternalQueueTimeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeAvg.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeAvg.setDescription('The average queue holding time. Note that this value is in 1/1000 of millisec, i.e. divide by 1000 to get the value in milliseconds.')
bwNSSystemInternalQueueTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMin.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMin.setDescription('The smallest queue sample holding time.')
bwNSSystemInternalQueueTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMax.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMax.setDescription('The biggest queue sample holding time.')
bwNSSystemInternalQueueTimeMaxTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMaxTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMaxTimestamp.setDescription('This counter was replaced by bwNSSystemInternalQueueTimeMaxTimestampMSB and bwNSSystemInternalQueueTimeMaxTimestampLSB')
bwNSSystemInternalQueueLengthCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthCurrent.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthCurrent.setDescription('The number of elements currently hold in the queue.')
bwNSSystemInternalQueueLengthAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthAvg.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthAvg.setDescription('The average number of elements simultaneously held in the queue multiple by 1000. Divide by 1000 to get the value in units.')
bwNSSystemInternalQueueLengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMax.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMax.setDescription('The maximum number of elements simultaneously held in the queue multiple by 1000. Divide by 1000 to get the value in units.')
bwNSSystemInternalQueueLengthMaxTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMaxTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMaxTimestamp.setDescription('This counter was replaced by bwNSSystemInternalQueueLengthMaxTimestampMSB and bwNSSystemInternalQueueLengthMaxTimestampLSB.')
bwNSSystemInternalQueueTimeMaxTimestampMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMaxTimestampMSB.setDescription('The most significant part of the timestamp (4 most significant bytes) of when bwSystemInternalQueueTimeMax was obtained.')
bwNSSystemInternalQueueLengthMaxTimestampMSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMaxTimestampMSB.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMaxTimestampMSB.setDescription('The most significant part of the timestamp (4 most significant bytes) of when bwSystemInternalQueueLengthMax was obtained.')
bwNSSystemInternalQueueLengthMaxTimestampLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueLengthMaxTimestampLSB.setDescription('The least significant part of the timestamp (4 least significant bytes) of when bwSystemInternalQueueLengthMax was obtained.')
bwNSSystemInternalQueueTimeMaxTimestampLSB = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 12, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMaxTimestampLSB.setStatus('current')
if mibBuilder.loadTexts: bwNSSystemInternalQueueTimeMaxTimestampLSB.setDescription('The least significant part of the timestamp (4 least significant bytes) of when bwSystemInternalQueueTimeMax was obtained.')
overloadStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13))
bwNSCurrentCallOverloadZone = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCurrentCallOverloadZone.setStatus('current')
if mibBuilder.loadTexts: bwNSCurrentCallOverloadZone.setDescription('The current call related overload zone.')
bwNSNumCallYellowZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNumCallYellowZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNSNumCallYellowZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the call-related yellow overload zone.')
bwNSNumCallRedZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNumCallRedZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNSNumCallRedZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the call-related red overload zone.')
bwNSCurrentNonCallOverloadZone = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCurrentNonCallOverloadZone.setStatus('current')
if mibBuilder.loadTexts: bwNSCurrentNonCallOverloadZone.setDescription('The current non-call related overload zone.')
bwNSNumNonCallYellowZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNumNonCallYellowZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNSNumNonCallYellowZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the non-call-related yellow overload zone.')
bwNSNumNonCallRedZoneOverloadTrans = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNumNonCallRedZoneOverloadTrans.setStatus('current')
if mibBuilder.loadTexts: bwNSNumNonCallRedZoneOverloadTrans.setDescription('The number of times that the server has transitioned to the non-call-related red overload zone.')
bwNSNumDiscardedMessage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNumDiscardedMessage.setStatus('current')
if mibBuilder.loadTexts: bwNSNumDiscardedMessage.setDescription('The number of messages that were dropped from the SIP decoder queues.')
bwNSTimeLastDiscardedMessage = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 1, 13, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSTimeLastDiscardedMessage.setStatus('current')
if mibBuilder.loadTexts: bwNSTimeLastDiscardedMessage.setDescription('The last time a message was dropped from the SIP decoder queues.')
policies = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3))
publicPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1), )
if mibBuilder.loadTexts: publicPolicyStatTable.setStatus('current')
if mibBuilder.loadTexts: publicPolicyStatTable.setDescription('This table stores all of the public policies standard measurements.')
publicPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "pubPolStatID"))
if mibBuilder.loadTexts: publicPolicyStatEntry.setStatus('current')
if mibBuilder.loadTexts: publicPolicyStatEntry.setDescription('Point of entry for entries to table publicPolicyStatTable.')
pubPolStatID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: pubPolStatID.setStatus('current')
if mibBuilder.loadTexts: pubPolStatID.setDescription('Description')
pubPolStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pubPolStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: pubPolStatPolicyName.setDescription('the name of the policy')
pubPolStatNbInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pubPolStatNbInstances.setStatus('current')
if mibBuilder.loadTexts: pubPolStatNbInstances.setDescription('the number of instances of that policy in the system')
pubPolStatNbRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pubPolStatNbRequests.setStatus('current')
if mibBuilder.loadTexts: pubPolStatNbRequests.setDescription('the total number of requests processed by that policy')
pubPolStatNbRequestsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pubPolStatNbRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: pubPolStatNbRequestsFailures.setDescription('the total number of calls that were sent to treatment by this policy')
pubPolStatNbRequestsResults = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pubPolStatNbRequestsResults.setStatus('current')
if mibBuilder.loadTexts: pubPolStatNbRequestsResults.setDescription('the total number of calls for which that policy has provided a route list')
privatePolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2), )
if mibBuilder.loadTexts: privatePolicyStatTable.setStatus('current')
if mibBuilder.loadTexts: privatePolicyStatTable.setDescription('This table stores all of the private policies standard measurements.')
privatePolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "privPolStatID"))
if mibBuilder.loadTexts: privatePolicyStatEntry.setStatus('current')
if mibBuilder.loadTexts: privatePolicyStatEntry.setDescription('Point of entry for entries to table privatePolicyStatTable.')
privPolStatID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: privPolStatID.setStatus('current')
if mibBuilder.loadTexts: privPolStatID.setDescription('Description')
privPolStatEnterpriseName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privPolStatEnterpriseName.setStatus('current')
if mibBuilder.loadTexts: privPolStatEnterpriseName.setDescription('the name of the enterprise to which the policy is assigned')
privPolStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: privPolStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: privPolStatPolicyName.setDescription('the name of the policy')
privPolStatNbRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privPolStatNbRequests.setStatus('current')
if mibBuilder.loadTexts: privPolStatNbRequests.setDescription('the total number of requests processed by that policy')
privPolStatNbRequestsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privPolStatNbRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: privPolStatNbRequestsFailures.setDescription('the total number of calls that were sent to treatment by this policy')
privPolStatNbRequestsResults = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privPolStatNbRequestsResults.setStatus('current')
if mibBuilder.loadTexts: privPolStatNbRequestsResults.setDescription('the total number of calls for which that policy has provided a route list')
policyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3), )
if mibBuilder.loadTexts: policyInfoTable.setStatus('current')
if mibBuilder.loadTexts: policyInfoTable.setDescription('The table allow for a policy to implement additional custom measurements. Both private and public policies can extend this table.')
policyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "polInfoID"))
if mibBuilder.loadTexts: policyInfoEntry.setStatus('current')
if mibBuilder.loadTexts: policyInfoEntry.setDescription('Point of entry for entries to table policyInfoTable.')
polInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: polInfoID.setStatus('current')
if mibBuilder.loadTexts: polInfoID.setDescription('Description')
polInfoEnterpriseName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polInfoEnterpriseName.setStatus('current')
if mibBuilder.loadTexts: polInfoEnterpriseName.setDescription('the name of the enterprise for which the policy count applies')
polInfoPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polInfoPolicyName.setStatus('current')
if mibBuilder.loadTexts: polInfoPolicyName.setDescription('the name of the policy for which the policy count applies')
polInfoInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polInfoInfoName.setStatus('current')
if mibBuilder.loadTexts: polInfoInfoName.setDescription('the information monitored')
polInfoNbOccurences = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: polInfoNbOccurences.setStatus('current')
if mibBuilder.loadTexts: polInfoNbOccurences.setDescription('total number of occurrences of this information/policy')
bwNbPolicyRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbPolicyRequests.setStatus('current')
if mibBuilder.loadTexts: bwNbPolicyRequests.setDescription('This counter reflects the total number of Policy processing requests received by BroadWorks.')
bwNbPolicyRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNbPolicyRequestFailures.setStatus('current')
if mibBuilder.loadTexts: bwNbPolicyRequestFailures.setDescription('This counter reflects the total number of Policy processing request failures received by BroadWorks.')
neStatTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4), )
if mibBuilder.loadTexts: neStatTable.setStatus('current')
if mibBuilder.loadTexts: neStatTable.setDescription('This table implements generic per Network Element measurements.')
neStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "neStatID"))
if mibBuilder.loadTexts: neStatEntry.setStatus('current')
if mibBuilder.loadTexts: neStatEntry.setDescription('Point of entry for entries to table neStatTable.')
neStatID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: neStatID.setStatus('current')
if mibBuilder.loadTexts: neStatID.setDescription('Description')
neStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neStatName.setStatus('current')
if mibBuilder.loadTexts: neStatName.setDescription('name of the network element that sent a request to the network server')
neStatNbSIPRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neStatNbSIPRequests.setStatus('current')
if mibBuilder.loadTexts: neStatNbSIPRequests.setDescription('total number of SIP requests coming in')
neStatNbSIPRequestsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neStatNbSIPRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: neStatNbSIPRequestsFailures.setDescription('total number of SIP requests which resulted in a treatment ')
neStatNbMSSRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neStatNbMSSRequests.setStatus('current')
if mibBuilder.loadTexts: neStatNbMSSRequests.setDescription('total number of MSS requests coming in')
neStatNbMSSRequestsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neStatNbMSSRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: neStatNbMSSRequestsFailures.setDescription('total number of MSS requests resulting in an error')
errorStatTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 5), )
if mibBuilder.loadTexts: errorStatTable.setStatus('current')
if mibBuilder.loadTexts: errorStatTable.setDescription('This table implements measurements for all the error codes defined in the system.')
errorStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 5, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "errStatID"))
if mibBuilder.loadTexts: errorStatEntry.setStatus('current')
if mibBuilder.loadTexts: errorStatEntry.setDescription('Point of entry for entries to table errorStatTable.')
errStatID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: errStatID.setStatus('current')
if mibBuilder.loadTexts: errStatID.setDescription('Description')
errStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errStatName.setStatus('current')
if mibBuilder.loadTexts: errStatName.setDescription('code name of the network server error')
errStatNbOccurences = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 5, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errStatNbOccurences.setStatus('current')
if mibBuilder.loadTexts: errStatNbOccurences.setDescription('total number of times this error occurred')
bwNSCallpCallsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCallpCallsPerSecond.setStatus('current')
if mibBuilder.loadTexts: bwNSCallpCallsPerSecond.setDescription('This gauge reflects the incoming queue size in the NRS receiver.')
carrierStatTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7), )
if mibBuilder.loadTexts: carrierStatTable.setStatus('current')
if mibBuilder.loadTexts: carrierStatTable.setDescription('This table stores the statistics for all the carriers used to route calls in the system.')
carrierStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwCarrierStatID"))
if mibBuilder.loadTexts: carrierStatEntry.setStatus('current')
if mibBuilder.loadTexts: carrierStatEntry.setDescription('Point of entry for entries to table carrierStatTable.')
bwCarrierStatID = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwCarrierStatID.setStatus('current')
if mibBuilder.loadTexts: bwCarrierStatID.setDescription('Unique identifier for a carrier in the system.')
bwCarrierName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCarrierName.setStatus('current')
if mibBuilder.loadTexts: bwCarrierName.setDescription('The name of a carrier defined on the network server.')
bwCarrierCic = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwCarrierCic.setStatus('current')
if mibBuilder.loadTexts: bwCarrierCic.setDescription('A CIC used for a given carrier in the system.')
bwCarrierNbIntraLataCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCarrierNbIntraLataCalls.setStatus('current')
if mibBuilder.loadTexts: bwCarrierNbIntraLataCalls.setDescription('This counter shall be incremented each time a carrier is used to carry an international call.')
bwCarrierNbInterLataCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCarrierNbInterLataCalls.setStatus('current')
if mibBuilder.loadTexts: bwCarrierNbInterLataCalls.setDescription('This counter shall be incremented each time a carrier is used to carry an inter-LATA call.')
bwCarrierNbInternationalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 2, 7, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwCarrierNbInternationalCalls.setStatus('current')
if mibBuilder.loadTexts: bwCarrierNbInternationalCalls.setDescription('This counter shall be incremented each time a carrier is used to carry an intra-LATA call.')
sip = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1))
bwNSSipStatsInviteIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsInviteIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInviteIns.setDescription('This counter reflects the total number of INVITE requests received by BroadWorks.')
bwNSSipStatsAckIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsAckIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsAckIns.setDescription('This counter reflects the total number of ACK requests received by BroadWorks.')
bwNSSipStatsInviteResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 3), )
if mibBuilder.loadTexts: bwNSSipStatsInviteResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInviteResponsesTable.setDescription('This table contains the counters for all SIP responses to the Invite requests sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 302, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487')
bwNSSipStatsCancelIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsCancelIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsCancelIns.setDescription('This counter reflects the total number of CANCEL requests received by BroadWorks.')
bwNSSipStatsRegisterIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsRegisterIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsRegisterIns.setDescription('This counter reflects the total number of REGISTER requests received by BroadWorks.')
bwNSSipStatsNotifyIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsNotifyIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsNotifyIns.setDescription('This counter reflects the total number of INFO requests received by BroadWorks')
bwNSSipStatsSubscribeIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsSubscribeIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsSubscribeIns.setDescription('This counter reflects the total number of SUBSCRIBE message that have been received at the AS.')
bwNSSipStatsMessageIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsMessageIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsMessageIns.setDescription('This counter reflects the total number of MESSAGE message that have been received at the AS.')
bwNSSipStatsInfoIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsInfoIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInfoIns.setDescription('This counter reflects the total number of INFO requests received by BroadWorks')
bwNSSipStatsOptionsIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsOptionsIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsOptionsIns.setDescription('This counter reflects the total number of OPTIONS requests received by BroadWorks.')
bwNSSipStatsOptionsResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 11), )
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponsesTable.setDescription('This table contains the counters for all SIP responses to the Options requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwNSSipStatsRegisterResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 12), )
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponsesTable.setDescription('This table contains the counters for all SIP responses to the Register requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwNSSipStatsInfoResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 13), )
if mibBuilder.loadTexts: bwNSSipStatsInfoResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInfoResponsesTable.setDescription('This table contains the counters for all SIP responses to the Info requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwNSSipStatsNotifyResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 14), )
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponsesTable.setDescription('This table contains the counters for all SIP responses to the Notify requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwNSSipStatsSubscribeResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 15), )
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponsesTable.setDescription('This table contains the counters for all SIP responses to the Subscribe requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwNSSipStatsMessageResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 16), )
if mibBuilder.loadTexts: bwNSSipStatsMessageResponsesTable.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsMessageResponsesTable.setDescription('This table contains the counters for all SIP responses to the Message requests received or sent by BroadWorks. Each counter is a 32-Bit counter. The response code is used to index into the table. Here are all the response codes: 100, 180, 181, 182, 183, 200, 300, 301, 302, 305, 380, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 480, 481, 482, 483, 484, 485, 486, 487, 500, 501, 502, 503, 504, 505, 600, 603, 604, 606')
bwNSSipStatsFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsFailures.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsFailures.setDescription('This counter reflects the total number of request failures, i.e. the number of responses that were not 302s')
bwNSSipStatsActiveTcpConnections = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSSipStatsActiveTcpConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsActiveTcpConnections.setDescription('This gauge is incremented whenever a SIP TCP connection is established. It decremented whenever a connection is closed.')
bwNSSipStatsTcpIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsTcpIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsTcpIns.setDescription('This counter is incremented whenever a SIP message is received via TCP.')
bwNSSipStatsTcpOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsTcpOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsTcpOuts.setDescription('This counter is incremented whenever a SIP message is sent via TCP.')
bwNSSipStatsTcpFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsTcpFailures.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsTcpFailures.setDescription('This counter is incremented whenever a SIP message was attempted to be sent via TCP but failed.')
bwNSSipStatsUdpIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsUdpIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsUdpIns.setDescription('This counter is incremented whenever a SIP message is received via UDP.')
bwNSSipStatsUdpOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsUdpOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsUdpOuts.setDescription('This counter is incremented whenever a SIP message is sent via UDP.')
bwNSSIPReclaimedStaleTcpConnections = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSIPReclaimedStaleTcpConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSSIPReclaimedStaleTcpConnections.setDescription('This counter is incremented every time a SIP TCP connection is reclaimed because it is stale.')
congestionManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25))
bwNSSipStatsInviteResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 3, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsInviteResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsInviteResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInviteResponsesEntry.setDescription('This row contains information on a particular SIP status code sent in response to an Invite')
bwNSSipStatsInviteResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsInviteResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInviteResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsInviteResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 3, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsInviteResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInviteResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Invite')
bwNSSipStatsOptionsResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 11, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsOptionsResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Options')
bwNSSipStatsOptionsResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsOptionsResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 11, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Options')
bwNSSipStatsOptionsResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 11, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsOptionsResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Options')
bwNSSipStatsRegisterResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsRegisterResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Register')
bwNSSipStatsRegisterResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsRegisterResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 12, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Register')
bwNSSipStatsRegisterResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 12, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsRegisterResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Register')
bwNSSipStatsInfoResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 13, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsInfoResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsInfoResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInfoResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Info')
bwNSSipStatsInfoResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsInfoResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInfoResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsInfoResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 13, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsInfoResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInfoResponseIns.setDescription('This counter represents the number of SIP responses received in response to an Info')
bwNSSipStatsInfoResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 13, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsInfoResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsInfoResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to an Info')
bwNSSipStatsNotifyResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 14, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsNotifyResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to an Notify')
bwNSSipStatsNotifyResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsNotifyResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 14, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Notify')
bwNSSipStatsNotifyResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 14, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsNotifyResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Notify')
bwNSSipStatsSubscribeResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 15, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsSubscribeResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Subscribe')
bwNSSipStatsSubscribeResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsSubscribeResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 15, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Subscribe')
bwNSSipStatsSubscribeResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 15, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsSubscribeResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Subscribe')
bwNSSipStatsMessageResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 16, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSSipStatsMessageResponseCodeValue"))
if mibBuilder.loadTexts: bwNSSipStatsMessageResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsMessageResponsesEntry.setDescription('This row contains information on a particular SIP status code received or sent in response to a Message')
bwNSSipStatsMessageResponseCodeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 999)))
if mibBuilder.loadTexts: bwNSSipStatsMessageResponseCodeValue.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsMessageResponseCodeValue.setDescription('This integer represents a SIP status code. The rest of the information in this row is related to this value.')
bwNSSipStatsMessageResponseIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 16, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsMessageResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsMessageResponseIns.setDescription('This counter represents the number of SIP responses received in response to a Message')
bwNSSipStatsMessageResponseOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 16, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSSipStatsMessageResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwNSSipStatsMessageResponseOuts.setDescription('This counter represents the number of SIP responses sent in response to a Message')
bwNSCongestionManagementNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1), )
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborTable.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborTable.setDescription('This table contains congestion management information associated to neighbors.')
bwNSCongestionManagementNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborIndex"))
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborEntry.setDescription('This row contains congestion management information related to a neighbor.')
bwNSCongestionManagementNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborIndex.setDescription('Index to a neighbor IP address.')
bwNSCongestionManagementNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborIpAddress.setDescription('The IP address of the neighbor.')
bwNSCongestionManagementNeighborInviteIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborInviteIn.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborInviteIn.setDescription('This is the number of Invite requests that the neighbor sends to the Network Server.')
bwNSCongestionManagementNeighborRegisterIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborRegisterIn.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborRegisterIn.setDescription('This is the number of Register requests that the neighbor sends to the Network Server.')
bwNSCongestionManagementNeighborOptionsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborOptionsIn.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborOptionsIn.setDescription('This is the number of Options requests that the neighbor sends to the Network Server.')
bwNSCongestionManagementNeighborOptionsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborOptionsOut.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborOptionsOut.setDescription('This is the number of Options requests that the Network Server sends to the neighbor.')
bwNSCongestionManagementNeighborSubscribeNotifyIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborSubscribeNotifyIn.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborSubscribeNotifyIn.setDescription('This is the number of Subscribe and Notify requests that the neighbor sends to the Network Server.')
bwNSCongestionManagementNeighbor5xxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighbor5xxIn.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighbor5xxIn.setDescription('This is the number of 5xx responses that the neighbor sends to the Network Server.')
bwNSCongestionManagementNeighborCallpRequestInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborCallpRequestInRate.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborCallpRequestInRate.setDescription('This is the incoming callp requests rate.')
bwNSCongestionManagementNeighborNonCallpRequestInRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborNonCallpRequestInRate.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborNonCallpRequestInRate.setDescription('This is the incoming non-callp requests rate.')
bwNSCongestionManagementNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborState.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborState.setDescription('The current congestion management state of the neighbor.')
bwNSCongestionManagementNeighborCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 1, 25, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborCapability.setStatus('current')
if mibBuilder.loadTexts: bwNSCongestionManagementNeighborCapability.setDescription('The congestion management capability of the neighbor.')
nrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2))
bwNSNbInvalidMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbInvalidMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNbInvalidMessagesReceived.setDescription('This counter is incremented when an invalid NRS message is received (either the header was valid but the body was not, or the message was pure junk)')
bwNSNbRequestsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNbRequestsReceived.setDescription('This counter is incremented when a NRS request is received')
bwNSNbResponsesReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNbResponsesReceived.setDescription('This counter is incremented when a NRS response is received')
bwNSNbErrorsReceived = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNbErrorsReceived.setDescription('This counter is incremented when a NRS error is received')
bwNSNbRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbRequestsSent.setStatus('current')
if mibBuilder.loadTexts: bwNSNbRequestsSent.setDescription('This counter is incremented when a NRS request is sent')
bwNSNbResponsesSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbResponsesSent.setStatus('current')
if mibBuilder.loadTexts: bwNSNbResponsesSent.setDescription('This counter is incremented when a NRS response is sent')
bwNSNbErrorsSent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbErrorsSent.setStatus('current')
if mibBuilder.loadTexts: bwNSNbErrorsSent.setDescription('This counter is incremented when a NRS error is sent')
bwNSNbRequestsResent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbRequestsResent.setStatus('current')
if mibBuilder.loadTexts: bwNSNbRequestsResent.setDescription('This counter is incremented when a NRS request is re-sent')
bwNSNbResponsesResent = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbResponsesResent.setStatus('current')
if mibBuilder.loadTexts: bwNSNbResponsesResent.setDescription('This counter is incremented when a NRS response is re-sent')
bwNSNbRequestsUnanswered = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNbRequestsUnanswered.setStatus('current')
if mibBuilder.loadTexts: bwNSNbRequestsUnanswered.setDescription('This counter is incremented when a NRS request remains unanswered after a series of retries')
bwNSNRSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16), )
if mibBuilder.loadTexts: bwNSNRSStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTable.setDescription('This table contains the counters for all NRS protocols')
bwNSNRSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSNRSStatsTableIndex"))
if mibBuilder.loadTexts: bwNSNRSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsEntry.setDescription('This row contains information on a particular NRS protocol')
bwNSNRSStatsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwNSNRSStatsTableIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableIndex.setDescription('This integer represents a NRS protocol status code. The rest of the information in this row is related to this value.')
bwNSNRSStatsTableProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSNRSStatsTableProtocolName.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableProtocolName.setDescription('This string represents the NRS protocol name')
bwNSNRSStatsTableNbRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsReceived.setDescription('This counter is incremented when a request is received')
bwNSNRSStatsTableNbResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbResponsesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbResponsesReceived.setDescription('This counter is incremented when a response is received')
bwNSNRSStatsTableNbErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbErrorsReceived.setDescription('This counter is incremented when an error is received')
bwNSNRSStatsTableNbRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsSent.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsSent.setDescription('This counter is incremented when a request is sent')
bwNSNRSStatsTableNbResponsesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbResponsesSent.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbResponsesSent.setDescription('This counter is incremented when a response is sent')
bwNSNRSStatsTableNbErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbErrorsSent.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbErrorsSent.setDescription('This counter is incremented when an error is sent')
bwNSNRSStatsTableNbRequestsResent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsResent.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsResent.setDescription('This counter is incremented when a request is re-sent')
bwNSNRSStatsTableNbResponsesResent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbResponsesResent.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbResponsesResent.setDescription('This counter is incremented when a response is re-sent')
bwNSNRSStatsTableNbRequestsUnanswered = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 2, 16, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsUnanswered.setStatus('current')
if mibBuilder.loadTexts: bwNSNRSStatsTableNbRequestsUnanswered.setDescription('This counter is incremented when a request remains unanswered after a series of retries')
callLog = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 6))
calllogNbEnterprises = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calllogNbEnterprises.setStatus('current')
if mibBuilder.loadTexts: calllogNbEnterprises.setDescription('Number of enterprises for which call logging is enabled')
calllogNbClients = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calllogNbClients.setStatus('current')
if mibBuilder.loadTexts: calllogNbClients.setDescription('Number of call log client that are currently connected to the NetworkServer')
nsXSCommonCommStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7))
bwNSCommonCommXSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1), )
if mibBuilder.loadTexts: bwNSCommonCommXSStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSStatsTable.setDescription('This table contains counters for BCCT for the XS process.')
bwNSCommonCommXSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSCommonCommXSStatsIndex"))
if mibBuilder.loadTexts: bwNSCommonCommXSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSStatsEntry.setDescription('Definition of the entries for bwNSCommonCommXSStatsTable.')
bwNSCommonCommXSStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommXSStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSStatsIndex.setDescription('This integer represents an index in table bwNSCommonCommXSStatsTable. The index represents a connection for a specific Host-Interfacece-Protocol combination.')
bwNSCommonCommXSHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommXSHost.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSHost.setDescription('The address of a host connected to the BroadWorks Common Communication Protocol.')
bwNSCommonCommXSInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommXSInterface.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSInterface.setDescription('The IP address of a local interface that a protocol is bound to.')
bwNSCommonCommXSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommXSProtocol.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSProtocol.setDescription('The name of a BroadWorks Common Communication Protocol client protocol, e.g. OCI or SyncApi.')
bwNSCommonCommXSAcceptedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSAcceptedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSAcceptedOutboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework to a remote host, using the interface and protocol.')
bwNSCommonCommXSAcceptedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSAcceptedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSAcceptedInboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework from a remote host, using the interface and protocol.')
bwNSCommonCommXSRejectedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSRejectedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSRejectedOutboundConnections.setDescription('This counter is incremented whenever a client connection request going from this process to a remote host and going through this interface has been rejected for a particular protocol.')
bwNSCommonCommXSRejectedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSRejectedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSRejectedInboundConnections.setDescription('This counter is incremented whenever a client connection request coming to this host and going through this interface has been rejected by the framework for a particular protocol.')
bwNSCommonCommXSOutputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSOutputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSOutputMessagesProcessed.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwNSCommonCommXSInputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSInputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSInputMessagesProcessed.setDescription('This counter is incremented whenever a message has been received and processed for this host, interface and protocol.')
bwNSCommonCommXSOutputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSOutputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSOutputCommunicationErrors.setDescription('This counter is incremented whenever a message could not be read because the TCP stack returned an error.')
bwNSCommonCommXSInputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 7, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommXSInputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommXSInputCommunicationErrors.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwNSXSMonitoringExecutorTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1), )
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorTable.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorTable.setDescription('This table contains counters for the concurrent framework.')
bwNSXSMonitoringExecutorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorIndex"))
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorEntry.setDescription('Definition of the entries for bwNSXSMonitoringExecutorTable.')
bwNSXSMonitoringExecutorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorIndex.setDescription('This integer represents an index in table bwNSXSMonitoringExecutorTable. This is the index to a specific Monitoring Executor name.')
bwNSXSMonitoringExecutorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorName.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorName.setDescription('The name of the Monitoring Executor - Names are internally defined at the application level.')
bwNSXSMonitoringExecutorCurrentPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorCurrentPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorCurrentPoolSize.setDescription('The current thread pool size')
bwNSXSMonitoringExecutorMaxPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorMaxPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorMaxPoolSize.setDescription('The maximum thread pool size')
bwNSXSMonitoringExecutorAvgActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorAvgActiveThreads.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorAvgActiveThreads.setDescription('The average number of active threads, rounded up')
bwNSXSMonitoringExecutorTaskQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorTaskQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorTaskQueueSize.setDescription('Number of tasks in the queue (includes scheduled and recurring tasks)')
bwNSXSMonitoringExecutorNbTasksRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorNbTasksRun.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorNbTasksRun.setDescription('Number of tasks run')
bwNSXSMonitoringExecutorNbWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorNbWarnings.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorNbWarnings.setDescription('Number of warnings that occured')
bwNSXSMonitoringExecutorNbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorNbErrors.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorNbErrors.setDescription('Number of errors that occured')
bwNSXSMonitoringExecutorLongestTaskMs = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorLongestTaskMs.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorLongestTaskMs.setDescription('Longest completed task execution time in milliseconds')
bwNSXSMonitoringExecutorLongestTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 7, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorLongestTaskName.setStatus('current')
if mibBuilder.loadTexts: bwNSXSMonitoringExecutorLongestTaskName.setDescription('Longest completed task name')
tcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8))
bwNSXSTcpServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1), )
if mibBuilder.loadTexts: bwNSXSTcpServersStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersStatsTable.setDescription('This table contains counters for TCP underlying framework for the NSXS process.')
bwNSXSTcpServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSXSTcpServersStatsIndex"))
if mibBuilder.loadTexts: bwNSXSTcpServersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersStatsEntry.setDescription('Definition of the entries for bwNSXSTcpServersStatsTable.')
bwNSXSTcpServersStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSTcpServersStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersStatsIndex.setDescription('This integer represents an index in table bwNSXSTcpServersStatsTable. This is the index to a specific TCP server name.')
bwNSXSTcpServersName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSTcpServersName.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersName.setDescription('The name of TCP server - Names are internally defined at at the application level.')
bwNSXSTcpServersNbConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsAccepted.setDescription('This counter represents the number of connections accepted by the TCP server.')
bwNSXSTcpServersNbConnectionsRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsRefused.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsRefused.setDescription('This counter represents the number of connections refused by the TCP server.')
bwNSXSTcpServersNbConnectionsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsInitiated.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsInitiated.setDescription('This counter represents the number of connections initiated by the TCP server.')
bwNSXSTcpServersNbConnectionsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsClosed.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbConnectionsClosed.setDescription('This counter represents the number of connections closed by the TCP server or remote hosts.')
bwNSXSTcpServersNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesSent.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesSent.setDescription('This counter represents the number of bytes sent by the TCP server.')
bwNSXSTcpServersNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesReceived.setDescription('This counter represents the number of bytes received by the TCP server.')
bwNSXSTcpServersOutgoingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSTcpServersOutgoingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersOutgoingQueueSize.setDescription('This counter represents the number of bytes in the outgoing queue.')
bwNSXSTcpServersIncomingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSTcpServersIncomingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersIncomingQueueSize.setDescription('This counter represents the number of bytes in the incoming queue.')
bwNSXSTcpServersNbBytesSentSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesSentSecure.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesSentSecure.setDescription('This counter represents the number of bytes sent by the TCP server over secure connections.')
bwNSXSTcpServersNbBytesReceivedSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 3, 8, 1, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesReceivedSecure.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpServersNbBytesReceivedSecure.setDescription('This counter represents the number of bytes received by the TCP server over secure connections.')
perNSNbOpenedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNSNbOpenedTransactions.setStatus('current')
if mibBuilder.loadTexts: perNSNbOpenedTransactions.setDescription('This gauge reflects the total number of transactions currently opened.')
perNSNbCommittedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNSNbCommittedTransactions.setStatus('current')
if mibBuilder.loadTexts: perNSNbCommittedTransactions.setDescription('This counter reflects the total number of committed transactions.')
perNSNbFailedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNSNbFailedTransactions.setStatus('current')
if mibBuilder.loadTexts: perNSNbFailedTransactions.setDescription('This counter reflects the total number of failed transactions.')
perNSNbCriticalErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perNSNbCriticalErrors.setStatus('current')
if mibBuilder.loadTexts: perNSNbCriticalErrors.setDescription('This counter reflects the total number of critical errors that occurred in the persistency layer of the network server.')
timesTen = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1))
ttNSNbConnectionsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ttNSNbConnectionsCreated.setStatus('current')
if mibBuilder.loadTexts: ttNSNbConnectionsCreated.setDescription('This counter reflects the total number of connections that have been opened to the DB.')
ttNSConnectionPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ttNSConnectionPoolSize.setStatus('current')
if mibBuilder.loadTexts: ttNSConnectionPoolSize.setDescription('This gauge reflects the pool size of the DB.')
ttNSNbBackdoorUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ttNSNbBackdoorUpdates.setStatus('obsolete')
if mibBuilder.loadTexts: ttNSNbBackdoorUpdates.setDescription('This counter reflects the total number of backdoor updates made to the DB.')
ttNSNbFailedCheckpoints = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ttNSNbFailedCheckpoints.setStatus('obsolete')
if mibBuilder.loadTexts: ttNSNbFailedCheckpoints.setDescription('This counter reflects the total number of failed checkpoints of the DB.')
bwNSXSAvgUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSAvgUpdateTime.setStatus('current')
if mibBuilder.loadTexts: bwNSXSAvgUpdateTime.setDescription('Average DB update time in milliseconds')
bwNSXSAvgRowsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSAvgRowsUpdated.setStatus('current')
if mibBuilder.loadTexts: bwNSXSAvgRowsUpdated.setDescription('Average number of rows affected in DB updates')
bwNSXSAvgQueryTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSAvgQueryTime.setStatus('current')
if mibBuilder.loadTexts: bwNSXSAvgQueryTime.setDescription('Average DB query time in milliseconds')
bwNSXSAvgRowsQueried = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSAvgRowsQueried.setStatus('current')
if mibBuilder.loadTexts: bwNSXSAvgRowsQueried.setDescription('Average number of rows processed in DB queries')
bwNSXSUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSUpdateCount.setStatus('current')
if mibBuilder.loadTexts: bwNSXSUpdateCount.setDescription('Number of DB updates performed since the application started')
bwNSXSQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSQueryCount.setStatus('current')
if mibBuilder.loadTexts: bwNSXSQueryCount.setDescription('Number of DB queries performed since the application started')
bwNSXSTTHWMTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12), )
if mibBuilder.loadTexts: bwNSXSTTHWMTable.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMTable.setDescription('This table contains counters for the XS TimesTen high water marks.')
bwNSXSTTHWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSXSTTHWMIndex"))
if mibBuilder.loadTexts: bwNSXSTTHWMEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMEntry.setDescription('Definition of the entries for bwNSXSTTHWMTable.')
bwNSXSTTHWMIndex = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSTTHWMIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMIndex.setDescription('This integer represents an index in table bwNSXSTTHWMTable. This is the index to a specific high water mark.')
bwNSXSTTHWMName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSXSTTHWMName.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMName.setDescription('The name of an XS TimesTen high water mark.')
bwNSXSTTHWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTTHWMValue.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMValue.setDescription('The value of an XS TimesTen high water mark.')
bwNSXSTTHWMTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTTHWMTimestamp.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMTimestamp.setDescription('The timestamp of an XS TimesTen high water mark.')
bwNSXSTTHWMStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSXSTTHWMStackTrace.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTTHWMStackTrace.setDescription('The stack trace of an XS TimesTen high water mark.')
xsRemoteXla = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 5))
xsNSRemoteXlaNbTimesConnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsNSRemoteXlaNbTimesConnected.setStatus('current')
if mibBuilder.loadTexts: xsNSRemoteXlaNbTimesConnected.setDescription('Number of times a connection was made to the RemoteXla server')
xsNSRemoteXlaNbTimesDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsNSRemoteXlaNbTimesDisconnected.setStatus('current')
if mibBuilder.loadTexts: xsNSRemoteXlaNbTimesDisconnected.setDescription('Number of times the process was disconnected from the RemoteXla server')
xsNSRemoteXlaUpdatesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsNSRemoteXlaUpdatesProcessed.setStatus('current')
if mibBuilder.loadTexts: xsNSRemoteXlaUpdatesProcessed.setDescription('Number of XLA updates processed')
xsNSRemoteXlaUpdatesPending = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 4, 1, 5, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xsNSRemoteXlaUpdatesPending.setStatus('current')
if mibBuilder.loadTexts: xsNSRemoteXlaUpdatesPending.setDescription('Number of XLA updates pending to be processed')
resetAllNSCounters = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAllNSCounters.setStatus('current')
if mibBuilder.loadTexts: resetAllNSCounters.setDescription('When set to a value other then 0, all the counters in the system are reset to 0.')
systemNbGrps = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbGrps.setStatus('current')
if mibBuilder.loadTexts: systemNbGrps.setDescription('Number of groups registered in the Network Server')
systemNbDNs = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbDNs.setStatus('current')
if mibBuilder.loadTexts: systemNbDNs.setDescription('Number of DNs registered in the Network Server')
systemNbURLs = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbURLs.setStatus('current')
if mibBuilder.loadTexts: systemNbURLs.setDescription('Number of URLs registered in the Network Server')
systemNbProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbProfiles.setStatus('current')
if mibBuilder.loadTexts: systemNbProfiles.setDescription('Number of profiles registered in the Network Server')
systemNbRoutingNEs = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbRoutingNEs.setStatus('current')
if mibBuilder.loadTexts: systemNbRoutingNEs.setDescription('Number of Routing Network Elements registered in the Network Server')
systemNbResourceNEs = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbResourceNEs.setStatus('current')
if mibBuilder.loadTexts: systemNbResourceNEs.setDescription('Number of Resource Network Elements registered in the Network Server')
systemNbEnterprises = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbEnterprises.setStatus('current')
if mibBuilder.loadTexts: systemNbEnterprises.setDescription('Number of Enterprises registered in the Network Server')
systemNbUnassignedDNs = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbUnassignedDNs.setStatus('current')
if mibBuilder.loadTexts: systemNbUnassignedDNs.setDescription('Number of Unassigned DNs in the Network Server')
systemNbExts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbExts.setStatus('current')
if mibBuilder.loadTexts: systemNbExts.setDescription('Number of Extensions registered in the Network Server')
systemNbSites = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbSites.setStatus('current')
if mibBuilder.loadTexts: systemNbSites.setDescription('Number of sites defined in the Network Server')
systemNbHostingNes = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemNbHostingNes.setStatus('current')
if mibBuilder.loadTexts: systemNbHostingNes.setDescription('Number of Hosting Network Elements defined in the Network Server')
synchAPI = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 3))
syncNbUpdatesRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncNbUpdatesRequests.setStatus('current')
if mibBuilder.loadTexts: syncNbUpdatesRequests.setDescription('This counter reflects the total number of update requests made through the synchronization API.')
syncNbUpdatesRequestsFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncNbUpdatesRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: syncNbUpdatesRequestsFailures.setDescription('This counter reflects the total number of synchronization requests that ended in a failure.')
syncNbOpenedSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncNbOpenedSessions.setStatus('current')
if mibBuilder.loadTexts: syncNbOpenedSessions.setDescription('This counter reflects the total number of synchronization sessions opened up to now.')
syncNbAuthorizationFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syncNbAuthorizationFailures.setStatus('current')
if mibBuilder.loadTexts: syncNbAuthorizationFailures.setDescription('This counter reflects the total number of synchronization authorization failures up to now.')
syncNbActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syncNbActiveSessions.setStatus('current')
if mibBuilder.loadTexts: syncNbActiveSessions.setDescription('This gauge reflects the total number of synchronization sessions currently opened.')
oamp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 4))
oampNbActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oampNbActiveSessions.setStatus('current')
if mibBuilder.loadTexts: oampNbActiveSessions.setDescription('This gauge reflects the total number of synchronization sessions currently opened.')
oss = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5))
ossNbUpdatesRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossNbUpdatesRequests.setStatus('current')
if mibBuilder.loadTexts: ossNbUpdatesRequests.setDescription('This counter reflects the total number of update requests made to the network server through the OSS API.')
ossNbUpdatesRequestsFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossNbUpdatesRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: ossNbUpdatesRequestsFailures.setDescription('This counter reflects the total number of OSS update requests that ended in failure.')
ossNbQueriesRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossNbQueriesRequests.setStatus('current')
if mibBuilder.loadTexts: ossNbQueriesRequests.setDescription('This counter reflects the total number of queries made to the network server through the OSS API.')
ossNbQueriesRequestsFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossNbQueriesRequestsFailures.setStatus('current')
if mibBuilder.loadTexts: ossNbQueriesRequestsFailures.setDescription('This counter reflects the total number of OSS queries that ended in failure.')
ossNbOpenedSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossNbOpenedSessions.setStatus('current')
if mibBuilder.loadTexts: ossNbOpenedSessions.setDescription('This counter reflects the total number of OSS sessions opened up to now.')
ossNbAuthorizationFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ossNbAuthorizationFailures.setStatus('current')
if mibBuilder.loadTexts: ossNbAuthorizationFailures.setDescription('This counter reflects the total number of OSS authorization failures up to now.')
ossNbActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ossNbActiveSessions.setStatus('current')
if mibBuilder.loadTexts: ossNbActiveSessions.setDescription('This gauge reflects the total number of OSS sessions currently opened.')
nsPSCommonCommStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6))
bwNSCommonCommPSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1), )
if mibBuilder.loadTexts: bwNSCommonCommPSStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSStatsTable.setDescription('This table contains counters for BCCT for the PS process.')
bwNSCommonCommPSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSCommonCommPSStatsIndex"))
if mibBuilder.loadTexts: bwNSCommonCommPSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSStatsEntry.setDescription('Definition of the entries for bwNSCommonCommPSStatsTable.')
bwNSCommonCommPSStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommPSStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSStatsIndex.setDescription('This integer represents an index in table bwNSCommonCommPSStatsTable. The index represents a connection for a specific Host-Interfacece-Protocol combination.')
bwNSCommonCommPSHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommPSHost.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSHost.setDescription('The address of a host connected to the BroadWorks Common Communication Protocol.')
bwNSCommonCommPSInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommPSInterface.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSInterface.setDescription('The IP address of a local interface that a protocol is bound to.')
bwNSCommonCommPSProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSCommonCommPSProtocol.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSProtocol.setDescription('The name of a BroadWorks Common Communication Protocol client protocol, e.g. OCI or SyncApi.')
bwNSCommonCommPSAcceptedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSAcceptedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSAcceptedOutboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework to a remote host, using the interface and protocol.')
bwNSCommonCommPSAcceptedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSAcceptedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSAcceptedInboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework from a remote host, using the interface and protocol.')
bwNSCommonCommPSRejectedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSRejectedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSRejectedOutboundConnections.setDescription('This counter is incremented whenever a client connection request going from this process to a remote host and going through this interface has been rejected for a particular protocol.')
bwNSCommonCommPSRejectedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSRejectedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSRejectedInboundConnections.setDescription('This counter is incremented whenever a client connection request coming to this host and going through this interface has been rejected by the framework for a particular protocol.')
bwNSCommonCommPSOutputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSOutputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSOutputMessagesProcessed.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwNSCommonCommPSInputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSInputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSInputMessagesProcessed.setDescription('This counter is incremented whenever a message has been received and processed for this host, interface and protocol.')
bwNSCommonCommPSOutputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSOutputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSOutputCommunicationErrors.setDescription('This counter is incremented whenever a message could not be read because the TCP stack returned an error.')
bwNSCommonCommPSInputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 6, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSCommonCommPSInputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwNSCommonCommPSInputCommunicationErrors.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwNSPSMonitoringExecutorTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1), )
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorTable.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorTable.setDescription('This table contains counters for the concurrent framework.')
bwNSPSMonitoringExecutorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorIndex"))
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorEntry.setDescription('Definition of the entries for bwNSPSMonitoringExecutorTable.')
bwNSPSMonitoringExecutorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorIndex.setDescription('This integer represents an index in table bwNSPSMonitoringExecutorTable. This is the index to a specific Monitoring Executor name.')
bwNSPSMonitoringExecutorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorName.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorName.setDescription('The name of the Monitoring Executor - Names are internally defined at the application level.')
bwNSPSMonitoringExecutorCurrentPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorCurrentPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorCurrentPoolSize.setDescription('The current thread pool size')
bwNSPSMonitoringExecutorMaxPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorMaxPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorMaxPoolSize.setDescription('The maximum thread pool size')
bwNSPSMonitoringExecutorAvgActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorAvgActiveThreads.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorAvgActiveThreads.setDescription('The average number of active threads, rounded up')
bwNSPSMonitoringExecutorTaskQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorTaskQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorTaskQueueSize.setDescription('Number of tasks in the queue (includes scheduled and recurring tasks)')
bwNSPSMonitoringExecutorNbTasksRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorNbTasksRun.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorNbTasksRun.setDescription('Number of tasks run')
bwNSPSMonitoringExecutorNbWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorNbWarnings.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorNbWarnings.setDescription('Number of warnings that occured')
bwNSPSMonitoringExecutorNbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorNbErrors.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorNbErrors.setDescription('Number of errors that occured')
bwNSPSMonitoringExecutorLongestTaskMs = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorLongestTaskMs.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorLongestTaskMs.setDescription('Longest completed task execution time in milliseconds')
bwNSPSMonitoringExecutorLongestTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorLongestTaskName.setStatus('current')
if mibBuilder.loadTexts: bwNSPSMonitoringExecutorLongestTaskName.setDescription('Longest completed task name')
nsTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7))
bwNSPSTcpServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1), )
if mibBuilder.loadTexts: bwNSPSTcpServersStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersStatsTable.setDescription('This table contains counters for TCP underlying framework for the NSPS process.')
bwNSPSTcpServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSPSTcpServersStatsIndex"))
if mibBuilder.loadTexts: bwNSPSTcpServersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersStatsEntry.setDescription('Definition of the entries for bwNSPSTcpServersStatsTable.')
bwNSPSTcpServersStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSTcpServersStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersStatsIndex.setDescription('This integer represents an index in table bwNSPSTcpServersStatsTable. This is the index to a specific TCP server name.')
bwNSPSTcpServersName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSTcpServersName.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersName.setDescription('The name of TCP server - Names are internally defined at at the application level.')
bwNSPSTcpServersNbConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsAccepted.setDescription('This counter represents the number of connections accepted by the TCP server.')
bwNSPSTcpServersNbConnectionsRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsRefused.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsRefused.setDescription('This counter represents the number of connections refused by the TCP server.')
bwNSPSTcpServersNbConnectionsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsInitiated.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsInitiated.setDescription('This counter represents the number of connections initiated by the TCP server.')
bwNSPSTcpServersNbConnectionsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsClosed.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbConnectionsClosed.setDescription('This counter represents the number of connections closed by the TCP server or remote hosts.')
bwNSPSTcpServersNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesSent.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesSent.setDescription('This counter represents the number of bytes sent by the TCP server.')
bwNSPSTcpServersNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesReceived.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesReceived.setDescription('This counter represents the number of bytes received by the TCP server.')
bwNSPSTcpServersOutgoingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSTcpServersOutgoingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersOutgoingQueueSize.setDescription('This counter represents the number of bytes in the outgoing queue.')
bwNSPSTcpServersIncomingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSTcpServersIncomingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersIncomingQueueSize.setDescription('This counter represents the number of bytes in the incoming queue.')
bwNSPSTcpServersNbBytesSentSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesSentSecure.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesSentSecure.setDescription('This counter represents the number of bytes sent by the TCP server over secure connections.')
bwNSPSTcpServersNbBytesReceivedSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 3, 7, 1, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesReceivedSecure.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpServersNbBytesReceivedSecure.setDescription('This counter represents the number of bytes received by the TCP server over secure connections.')
psNSPerNbOpenedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSPerNbOpenedTransactions.setStatus('current')
if mibBuilder.loadTexts: psNSPerNbOpenedTransactions.setDescription('This gauge reflects the total number of transactions currently opened.')
psNSPerNbCommittedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSPerNbCommittedTransactions.setStatus('current')
if mibBuilder.loadTexts: psNSPerNbCommittedTransactions.setDescription('This counter reflects the total number of committed transactions.')
psNSPerNbFailedTransactions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSPerNbFailedTransactions.setStatus('current')
if mibBuilder.loadTexts: psNSPerNbFailedTransactions.setDescription('This counter reflects the total number of failed transactions.')
psNSPerNbCriticalErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSPerNbCriticalErrors.setStatus('current')
if mibBuilder.loadTexts: psNSPerNbCriticalErrors.setDescription('This counter reflects the total number of critical errors that occurred in the persistency layer of the network server.')
psTimesTen = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1))
psNSTtNbConnectionsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSTtNbConnectionsCreated.setStatus('current')
if mibBuilder.loadTexts: psNSTtNbConnectionsCreated.setDescription('This counter reflects the total number of connections that have been opened to the DB.')
psNSTtConnectionPoolSize = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psNSTtConnectionPoolSize.setStatus('current')
if mibBuilder.loadTexts: psNSTtConnectionPoolSize.setDescription('This gauge reflects the pool size of the DB.')
psNSTtNbBackdoorUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSTtNbBackdoorUpdates.setStatus('obsolete')
if mibBuilder.loadTexts: psNSTtNbBackdoorUpdates.setDescription('This counter reflects the total number of backdoor updates made to the DB.')
psNSTtNbFailedCheckpoints = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSTtNbFailedCheckpoints.setStatus('obsolete')
if mibBuilder.loadTexts: psNSTtNbFailedCheckpoints.setDescription('This counter reflects the total number of failed checkpoints of the DB.')
bwNSPSAvgUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSAvgUpdateTime.setStatus('current')
if mibBuilder.loadTexts: bwNSPSAvgUpdateTime.setDescription('Average DB update time in milliseconds')
bwNSPSAvgRowsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSAvgRowsUpdated.setStatus('current')
if mibBuilder.loadTexts: bwNSPSAvgRowsUpdated.setDescription('Average number of rows affected in DB updates')
bwNSPSAvgQueryTime = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSAvgQueryTime.setStatus('current')
if mibBuilder.loadTexts: bwNSPSAvgQueryTime.setDescription('Average DB query time in milliseconds')
bwNSPSAvgRowsQueried = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSAvgRowsQueried.setStatus('current')
if mibBuilder.loadTexts: bwNSPSAvgRowsQueried.setDescription('Average number of rows processed in DB queries')
bwNSPSUpdateCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSUpdateCount.setStatus('current')
if mibBuilder.loadTexts: bwNSPSUpdateCount.setDescription('Number of DB updates performed since the application started')
bwNSPSQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSQueryCount.setStatus('current')
if mibBuilder.loadTexts: bwNSPSQueryCount.setDescription('Number of DB queries performed since the application started')
psRemoteXla = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 5))
psNSRemoteXlaNbTimesConnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSRemoteXlaNbTimesConnected.setStatus('current')
if mibBuilder.loadTexts: psNSRemoteXlaNbTimesConnected.setDescription('Number of times a connection was made to the RemoteXla server')
psNSRemoteXlaNbTimesDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSRemoteXlaNbTimesDisconnected.setStatus('current')
if mibBuilder.loadTexts: psNSRemoteXlaNbTimesDisconnected.setDescription('Number of times the process was disconnected from the RemoteXla server')
psNSRemoteXlaUpdatesProcessed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSRemoteXlaUpdatesProcessed.setStatus('current')
if mibBuilder.loadTexts: psNSRemoteXlaUpdatesProcessed.setDescription('Number of XLA updates processed')
psNSRemoteXlaUpdatesPending = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 5, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psNSRemoteXlaUpdatesPending.setStatus('current')
if mibBuilder.loadTexts: psNSRemoteXlaUpdatesPending.setDescription('Number of XLA updates pending to be processed')
bwNSPSTTHWMTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12), )
if mibBuilder.loadTexts: bwNSPSTTHWMTable.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMTable.setDescription('This table contains counters for the PS TimesTen high water marks.')
bwNSPSTTHWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwNSPSTTHWMIndex"))
if mibBuilder.loadTexts: bwNSPSTTHWMEntry.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMEntry.setDescription('Definition of the entries for bwNSPSTTHWMTable.')
bwNSPSTTHWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSTTHWMIndex.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMIndex.setDescription('This integer represents an index in table bwNSPSTTHWMTable. This is the index to a specific high water mark.')
bwNSPSTTHWMName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwNSPSTTHWMName.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMName.setDescription('The name of an PS TimesTen high water mark.')
bwNSPSTTHWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTTHWMValue.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMValue.setDescription('The value of an PS TimesTen high water mark.')
bwNSPSTTHWMTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTTHWMTimestamp.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMTimestamp.setDescription('The timestamp of an PS TimesTen high water mark.')
bwNSPSTTHWMStackTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 9, 4, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwNSPSTTHWMStackTrace.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTTHWMStackTrace.setDescription('The stack trace of an PS TimesTen high water mark.')
scpSystemModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 1))
scpCapModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2))
bwSCProxyStatsACLViolationCount = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsACLViolationCount.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsACLViolationCount.setDescription('Reflects the total number of messages received from unauthorized host')
bwSCProxyStatsSCPMessageIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsSCPMessageIns.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsSCPMessageIns.setDescription('Reflects the total number of incoming CAP over HTTP messages')
bwSCProxyStatsSCPMessageOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsSCPMessageOuts.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsSCPMessageOuts.setDescription('Reflects the total number of outgoing CAP over HTTP messages')
bwSCProxyStatsSCPMessageErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsSCPMessageErrors.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsSCPMessageErrors.setDescription('Reflects the total number of error CAP over HTTP messages sent')
bwSCProxyStatsASTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1), )
if mibBuilder.loadTexts: bwSCProxyStatsASTable.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASTable.setDescription('This table holds bwSCProxyStatsASEntry, which consists of an ID, an address, the number of message In, out, and the number of error. There is one entry per Application Server.')
bwSCProxyStatsASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1, 1), ).setIndexNames((0, "BW-BroadworksNetworkServer", "bwSCProxyStatsASIndex"))
if mibBuilder.loadTexts: bwSCProxyStatsASEntry.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASEntry.setDescription('This row contains information on a Hosting NE address')
bwSCProxyStatsASIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: bwSCProxyStatsASIndex.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASIndex.setDescription('Index to a HostingNe address entry.')
bwSCProxyStatsASAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwSCProxyStatsASAddr.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASAddr.setDescription('The address of a HostingNe')
bwSCProxyStatsASMessageIns = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsASMessageIns.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASMessageIns.setDescription('Reflects the total number of incoming CAP messages for a specific HostingNe address')
bwSCProxyStatsASMessageOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsASMessageOuts.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASMessageOuts.setDescription('Reflects the total number of outgoing CAP messages for a specific HostingNe address')
bwSCProxyStatsASMessageErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 5, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwSCProxyStatsASMessageErrors.setStatus('current')
if mibBuilder.loadTexts: bwSCProxyStatsASMessageErrors.setDescription('Reflects the total number of error CAP messages received from a specific HostingNe address')
locationApi = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 11, 1, 1))
bwUserLocationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 11, 1, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwUserLocationRequests.setStatus('current')
if mibBuilder.loadTexts: bwUserLocationRequests.setDescription('Number of times a user location request has been received.')
bwUserLocationRequestSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 11, 1, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwUserLocationRequestSuccess.setStatus('current')
if mibBuilder.loadTexts: bwUserLocationRequestSuccess.setDescription('Number of times a user location request has been answered successfully.')
bwUserLocationRequestUnknownUser = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 11, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwUserLocationRequestUnknownUser.setStatus('current')
if mibBuilder.loadTexts: bwUserLocationRequestUnknownUser.setDescription('Number of times a user location request could not be processed because the user is unknown.')
bwUserLocationRequestFailures = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 11, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwUserLocationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: bwUserLocationRequestFailures.setDescription('Number of times a user location request could not be processed.')
bwNSMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1))
bwNSMibCompliancy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 2))
bwNsLicensingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 1)).setObjects(("BW-BroadworksNetworkServer", "bwNbTimePeriodWithLicenseViolations"), ("BW-BroadworksNetworkServer", "bwNbTransactionInViolation"), ("BW-BroadworksNetworkServer", "bwNbThresholdAlarmSent"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueResets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsLicensingGroup = bwNsLicensingGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsLicensingGroup.setDescription('This group defines the licensing information for the Network Server.')
bwNsSystemQueueStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 2)).setObjects(("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueResets"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueTable"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueIndex"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueName"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueSize"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueTimeAvg"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueTimeMin"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueTimeMax"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueTimeMaxTimestampMSB"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueLengthCurrent"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueLengthAvg"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueLengthMax"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueLengthMaxTimestampMSB"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueLengthMaxTimestampLSB"), ("BW-BroadworksNetworkServer", "bwNSSystemInternalQueueTimeMaxTimestampLSB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsSystemQueueStatsGroup = bwNsSystemQueueStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsSystemQueueStatsGroup.setDescription('This group defines the internal system queue statistics information the Network Server.')
bwNsGenericPolicyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 3)).setObjects(("BW-BroadworksNetworkServer", "publicPolicyStatTable"), ("BW-BroadworksNetworkServer", "pubPolStatID"), ("BW-BroadworksNetworkServer", "pubPolStatPolicyName"), ("BW-BroadworksNetworkServer", "pubPolStatNbInstances"), ("BW-BroadworksNetworkServer", "pubPolStatNbRequests"), ("BW-BroadworksNetworkServer", "pubPolStatNbRequestsFailures"), ("BW-BroadworksNetworkServer", "pubPolStatNbRequestsResults"), ("BW-BroadworksNetworkServer", "privatePolicyStatTable"), ("BW-BroadworksNetworkServer", "privPolStatID"), ("BW-BroadworksNetworkServer", "privPolStatEnterpriseName"), ("BW-BroadworksNetworkServer", "privPolStatPolicyName"), ("BW-BroadworksNetworkServer", "privPolStatNbRequests"), ("BW-BroadworksNetworkServer", "privPolStatNbRequestsFailures"), ("BW-BroadworksNetworkServer", "privPolStatNbRequestsResults"), ("BW-BroadworksNetworkServer", "policyInfoTable"), ("BW-BroadworksNetworkServer", "polInfoID"), ("BW-BroadworksNetworkServer", "polInfoEnterpriseName"), ("BW-BroadworksNetworkServer", "polInfoPolicyName"), ("BW-BroadworksNetworkServer", "polInfoInfoName"), ("BW-BroadworksNetworkServer", "polInfoNbOccurences"), ("BW-BroadworksNetworkServer", "bwNbPolicyRequests"), ("BW-BroadworksNetworkServer", "bwNbPolicyRequestFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsGenericPolicyStatsGroup = bwNsGenericPolicyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsGenericPolicyStatsGroup.setDescription('This group defines the generic counter for all policies on the Network Server.')
bwNsNeStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 4)).setObjects(("BW-BroadworksNetworkServer", "neStatTable"), ("BW-BroadworksNetworkServer", "neStatID"), ("BW-BroadworksNetworkServer", "neStatName"), ("BW-BroadworksNetworkServer", "neStatNbSIPRequests"), ("BW-BroadworksNetworkServer", "neStatNbSIPRequestsFailures"), ("BW-BroadworksNetworkServer", "neStatNbMSSRequests"), ("BW-BroadworksNetworkServer", "neStatNbMSSRequestsFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsNeStatsGroup = bwNsNeStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsNeStatsGroup.setDescription('This group defines the information for the Network Elements sending requests to the Network Server.')
bwNsErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 5)).setObjects(("BW-BroadworksNetworkServer", "errorStatTable"), ("BW-BroadworksNetworkServer", "errorStatEntry"), ("BW-BroadworksNetworkServer", "errStatID"), ("BW-BroadworksNetworkServer", "errStatName"), ("BW-BroadworksNetworkServer", "errStatNbOccurences"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsErrorStatsGroup = bwNsErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsErrorStatsGroup.setDescription('This group defines statistics for all error codes returned by the Network Server to SIP requests.')
bwNsCallPStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 6)).setObjects(("BW-BroadworksNetworkServer", "bwNSCallpCallsPerSecond"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsCallPStatsGroup = bwNsCallPStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsCallPStatsGroup.setDescription('This group defines statistics for system level callp of the Network Server.')
bwNsCarrierStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 7)).setObjects(("BW-BroadworksNetworkServer", "carrierStatTable"), ("BW-BroadworksNetworkServer", "carrierStatEntry"), ("BW-BroadworksNetworkServer", "bwCarrierStatID"), ("BW-BroadworksNetworkServer", "bwCarrierName"), ("BW-BroadworksNetworkServer", "bwCarrierCic"), ("BW-BroadworksNetworkServer", "bwCarrierNbIntraLataCalls"), ("BW-BroadworksNetworkServer", "bwCarrierNbInterLataCalls"), ("BW-BroadworksNetworkServer", "bwCarrierNbInternationalCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsCarrierStatsGroup = bwNsCarrierStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsCarrierStatsGroup.setDescription('This group defines statistics per equal acess carrier.')
bwNsSipStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 8)).setObjects(("BW-BroadworksNetworkServer", "bwNSSipStatsInviteIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsAckIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInviteResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsCancelIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsRegisterIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsNotifyIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsSubscribeIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsMessageIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInfoIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsOptionsIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsOptionsResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsRegisterResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInfoResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsNotifyResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsSubscribeResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsMessageResponsesTable"), ("BW-BroadworksNetworkServer", "bwNSSipStatsFailures"), ("BW-BroadworksNetworkServer", "bwNSSipStatsActiveTcpConnections"), ("BW-BroadworksNetworkServer", "bwNSSipStatsTcpIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsTcpOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsTcpFailures"), ("BW-BroadworksNetworkServer", "bwNSSipStatsUdpIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsUdpOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInviteResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInviteResponseOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsOptionsResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsOptionsResponseIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsOptionsResponseOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsRegisterResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsRegisterResponseIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsRegisterResponseOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInfoResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInfoResponseIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsInfoResponseOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsNotifyResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsNotifyResponseIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsNotifyResponseOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsSubscribeResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsSubscribeResponseIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsSubscribeResponseOuts"), ("BW-BroadworksNetworkServer", "bwNSSipStatsMessageResponseCodeValue"), ("BW-BroadworksNetworkServer", "bwNSSipStatsMessageResponseIns"), ("BW-BroadworksNetworkServer", "bwNSSipStatsMessageResponseOuts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsSipStatsGroup = bwNsSipStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsSipStatsGroup.setDescription('This group defines statistics for the SIP protocol.')
bwNsNrsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 9)).setObjects(("BW-BroadworksNetworkServer", "bwNSNbInvalidMessagesReceived"), ("BW-BroadworksNetworkServer", "bwNSNbRequestsReceived"), ("BW-BroadworksNetworkServer", "bwNSNbResponsesReceived"), ("BW-BroadworksNetworkServer", "bwNSNbErrorsReceived"), ("BW-BroadworksNetworkServer", "bwNSNbRequestsSent"), ("BW-BroadworksNetworkServer", "bwNSNbResponsesSent"), ("BW-BroadworksNetworkServer", "bwNSNbErrorsSent"), ("BW-BroadworksNetworkServer", "bwNSNbRequestsResent"), ("BW-BroadworksNetworkServer", "bwNSNbResponsesResent"), ("BW-BroadworksNetworkServer", "bwNSNbRequestsUnanswered"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTable"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableIndex"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableProtocolName"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbRequestsReceived"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbResponsesReceived"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbErrorsReceived"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbRequestsSent"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbResponsesSent"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbErrorsSent"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbRequestsResent"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbResponsesResent"), ("BW-BroadworksNetworkServer", "bwNSNRSStatsTableNbRequestsUnanswered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsNrsStatsGroup = bwNsNrsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsNrsStatsGroup.setDescription('This group defines statistics for the NRS-based protocols.')
bwNsCallLogsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 10)).setObjects(("BW-BroadworksNetworkServer", "calllogNbEnterprises"), ("BW-BroadworksNetworkServer", "calllogNbClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsCallLogsStatsGroup = bwNsCallLogsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsCallLogsStatsGroup.setDescription('This group defines statistics for the call logs.')
bwNsXSPersistencyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 11)).setObjects(("BW-BroadworksNetworkServer", "perNSNbOpenedTransactions"), ("BW-BroadworksNetworkServer", "perNSNbCommittedTransactions"), ("BW-BroadworksNetworkServer", "perNSNbFailedTransactions"), ("BW-BroadworksNetworkServer", "perNSNbCriticalErrors"), ("BW-BroadworksNetworkServer", "ttNSNbConnectionsCreated"), ("BW-BroadworksNetworkServer", "ttNSConnectionPoolSize"), ("BW-BroadworksNetworkServer", "ttNSNbBackdoorUpdates"), ("BW-BroadworksNetworkServer", "ttNSNbFailedCheckpoints"), ("BW-BroadworksNetworkServer", "xsNSRemoteXlaNbTimesConnected"), ("BW-BroadworksNetworkServer", "xsNSRemoteXlaNbTimesDisconnected"), ("BW-BroadworksNetworkServer", "xsNSRemoteXlaUpdatesProcessed"), ("BW-BroadworksNetworkServer", "xsNSRemoteXlaUpdatesPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsXSPersistencyStatsGroup = bwNsXSPersistencyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsXSPersistencyStatsGroup.setDescription('This group defines statistics for the Network Server Execution Server process persistency.')
bwNsMoCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 12)).setObjects(("BW-BroadworksNetworkServer", "resetAllNSCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsMoCountersGroup = bwNsMoCountersGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsMoCountersGroup.setDescription('This group defines statistics to perform managed object work for the Network Server.')
bwNsSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 13)).setObjects(("BW-BroadworksNetworkServer", "systemNbGrps"), ("BW-BroadworksNetworkServer", "systemNbDNs"), ("BW-BroadworksNetworkServer", "systemNbURLs"), ("BW-BroadworksNetworkServer", "systemNbProfiles"), ("BW-BroadworksNetworkServer", "systemNbRoutingNEs"), ("BW-BroadworksNetworkServer", "systemNbResourceNEs"), ("BW-BroadworksNetworkServer", "systemNbEnterprises"), ("BW-BroadworksNetworkServer", "systemNbUnassignedDNs"), ("BW-BroadworksNetworkServer", "systemNbExts"), ("BW-BroadworksNetworkServer", "systemNbSites"), ("BW-BroadworksNetworkServer", "systemNbHostingNes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsSystemGroup = bwNsSystemGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsSystemGroup.setDescription('This group defines system level counters for the Network Server.')
bwNsSyncAPIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 14)).setObjects(("BW-BroadworksNetworkServer", "syncNbUpdatesRequests"), ("BW-BroadworksNetworkServer", "syncNbUpdatesRequestsFailures"), ("BW-BroadworksNetworkServer", "syncNbOpenedSessions"), ("BW-BroadworksNetworkServer", "syncNbAuthorizationFailures"), ("BW-BroadworksNetworkServer", "syncNbActiveSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsSyncAPIGroup = bwNsSyncAPIGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsSyncAPIGroup.setDescription('This group defines statistics for the SyncAPI protocol used between the BroadWorks Application and Network Server.')
bwNsOamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 15)).setObjects(("BW-BroadworksNetworkServer", "oampNbActiveSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsOamGroup = bwNsOamGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsOamGroup.setDescription('This group defines statistics for the OAM protocol for the Network Server.')
bwNsOssGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 16)).setObjects(("BW-BroadworksNetworkServer", "ossNbUpdatesRequests"), ("BW-BroadworksNetworkServer", "ossNbUpdatesRequestsFailures"), ("BW-BroadworksNetworkServer", "ossNbQueriesRequests"), ("BW-BroadworksNetworkServer", "ossNbQueriesRequestsFailures"), ("BW-BroadworksNetworkServer", "ossNbOpenedSessions"), ("BW-BroadworksNetworkServer", "ossNbAuthorizationFailures"), ("BW-BroadworksNetworkServer", "ossNbActiveSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsOssGroup = bwNsOssGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsOssGroup.setDescription('This group defines statistics for the Network Server OSS protocol.')
bwNsPSPersistencyStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 17)).setObjects(("BW-BroadworksNetworkServer", "psNSPerNbOpenedTransactions"), ("BW-BroadworksNetworkServer", "psNSPerNbCommittedTransactions"), ("BW-BroadworksNetworkServer", "psNSPerNbFailedTransactions"), ("BW-BroadworksNetworkServer", "psNSPerNbCriticalErrors"), ("BW-BroadworksNetworkServer", "psNSTtNbConnectionsCreated"), ("BW-BroadworksNetworkServer", "psNSTtConnectionPoolSize"), ("BW-BroadworksNetworkServer", "psNSTtNbBackdoorUpdates"), ("BW-BroadworksNetworkServer", "psNSTtNbFailedCheckpoints"), ("BW-BroadworksNetworkServer", "psNSRemoteXlaNbTimesConnected"), ("BW-BroadworksNetworkServer", "psNSRemoteXlaNbTimesDisconnected"), ("BW-BroadworksNetworkServer", "psNSRemoteXlaUpdatesProcessed"), ("BW-BroadworksNetworkServer", "psNSRemoteXlaUpdatesPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsPSPersistencyStatsGroup = bwNsPSPersistencyStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsPSPersistencyStatsGroup.setDescription('This group defines statistics for the Network Server Provisioning Server process persistency.')
bwNsScpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 18)).setObjects(("BW-BroadworksNetworkServer", "bwSCProxyStatsACLViolationCount"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsSCPMessageIns"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsSCPMessageOuts"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsSCPMessageErrors"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsASTable"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsASIndex"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsASAddr"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsASMessageIns"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsASMessageOuts"), ("BW-BroadworksNetworkServer", "bwSCProxyStatsASMessageErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsScpStatsGroup = bwNsScpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsScpStatsGroup.setDescription('This group defines statistics for the Network Server SCP process.')
bwNsXsBcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 19)).setObjects(("BW-BroadworksNetworkServer", "bwNSCommonCommXSStatsTable"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSStatsIndex"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSHost"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSInterface"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSProtocol"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSAcceptedOutboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSAcceptedInboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSRejectedOutboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSRejectedInboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSOutputMessagesProcessed"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSInputMessagesProcessed"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSOutputCommunicationErrors"), ("BW-BroadworksNetworkServer", "bwNSCommonCommXSInputCommunicationErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsXsBcctGroup = bwNsXsBcctGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsXsBcctGroup.setDescription('This group defines the statistics for the BCCT protocol for the Network Server Execution Server process.')
bwNsPsBcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 20)).setObjects(("BW-BroadworksNetworkServer", "bwNSCommonCommPSStatsTable"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSStatsIndex"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSHost"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSInterface"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSProtocol"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSAcceptedOutboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSAcceptedInboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSRejectedOutboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSRejectedInboundConnections"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSOutputMessagesProcessed"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSInputMessagesProcessed"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSOutputCommunicationErrors"), ("BW-BroadworksNetworkServer", "bwNSCommonCommPSInputCommunicationErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsPsBcctGroup = bwNsPsBcctGroup.setStatus('current')
if mibBuilder.loadTexts: bwNsPsBcctGroup.setDescription('This group defines the statistics for the BCCT protocol from the Provisioning Server process.')
bwNSXSTcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 21)).setObjects(("BW-BroadworksNetworkServer", "bwNSXSTcpServersStatsTable"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersStatsIndex"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersName"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersNbConnectionsAccepted"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersNbConnectionsClosed"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersOutgoingQueueSize"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersIncomingQueueSize"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersNbBytesSentSecure"), ("BW-BroadworksNetworkServer", "bwNSXSTcpServersNbBytesReceivedSecure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNSXSTcpStatsGroup = bwNSXSTcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNSXSTcpStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwNSPSTcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 22)).setObjects(("BW-BroadworksNetworkServer", "bwNSPSTcpServersStatsTable"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersStatsIndex"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersName"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersNbConnectionsAccepted"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersNbConnectionsClosed"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersOutgoingQueueSize"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersIncomingQueueSize"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersNbBytesSentSecure"), ("BW-BroadworksNetworkServer", "bwNSPSTcpServersNbBytesReceivedSecure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNSPSTcpStatsGroup = bwNSPSTcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNSPSTcpStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwNSXSConcurrentFrameworkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 23)).setObjects(("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorTable"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorIndex"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorName"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorCurrentPoolSize"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorMaxPoolSize"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorAvgActiveThreads"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorTaskQueueSize"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorNbTasksRun"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorNbWarnings"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorNbErrors"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorLongestTaskMs"), ("BW-BroadworksNetworkServer", "bwNSXSMonitoringExecutorLongestTaskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNSXSConcurrentFrameworkStatsGroup = bwNSXSConcurrentFrameworkStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNSXSConcurrentFrameworkStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwNSPSConcurrentFrameworkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 24)).setObjects(("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorTable"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorIndex"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorName"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorCurrentPoolSize"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorMaxPoolSize"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorAvgActiveThreads"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorTaskQueueSize"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorNbTasksRun"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorNbWarnings"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorNbErrors"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorLongestTaskMs"), ("BW-BroadworksNetworkServer", "bwNSPSMonitoringExecutorLongestTaskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNSPSConcurrentFrameworkStatsGroup = bwNSPSConcurrentFrameworkStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwNSPSConcurrentFrameworkStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwNSXSCongestionManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 25)).setObjects(("BW-BroadworksNetworkServer", "bwNSCurrentCallOverloadZone"), ("BW-BroadworksNetworkServer", "bwNSNumCallYellowZoneOverloadTrans"), ("BW-BroadworksNetworkServer", "bwNSNumCallRedZoneOverloadTrans"), ("BW-BroadworksNetworkServer", "bwNSCurrentNonCallOverloadZone"), ("BW-BroadworksNetworkServer", "bwNSNumNonCallYellowZoneOverloadTrans"), ("BW-BroadworksNetworkServer", "bwNSNumNonCallRedZoneOverloadTrans"), ("BW-BroadworksNetworkServer", "bwNSNumDiscardedMessage"), ("BW-BroadworksNetworkServer", "bwNSTimeLastDiscardedMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNSXSCongestionManagementGroup = bwNSXSCongestionManagementGroup.setStatus('current')
if mibBuilder.loadTexts: bwNSXSCongestionManagementGroup.setDescription('This group defines the statistics for the Congestion Management.')
bwSIPCongestionManagementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 1, 26)).setObjects(("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborTable"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborIndex"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborIpAddress"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborInviteIn"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborRegisterIn"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborOptionsIn"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborOptionsOut"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborSubscribeNotifyIn"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighbor5xxIn"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborCallpRequestInRate"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborNonCallpRequestInRate"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborState"), ("BW-BroadworksNetworkServer", "bwNSCongestionManagementNeighborCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwSIPCongestionManagementGroup = bwSIPCongestionManagementGroup.setStatus('current')
if mibBuilder.loadTexts: bwSIPCongestionManagementGroup.setDescription('This group defines the statistics for the SIP Congestion Management.')
bwNsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6431, 1, 5, 100, 2, 1)).setObjects(("BW-BroadworksNetworkServer", "bwNsLicensingGroup"), ("BW-BroadworksNetworkServer", "bwNsSystemQueueStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsGenericPolicyStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsNeStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsErrorStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsCallPStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsCarrierStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsSipStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsNrsStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsCallLogsStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsXSPersistencyStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsMoCountersGroup"), ("BW-BroadworksNetworkServer", "bwNsSystemGroup"), ("BW-BroadworksNetworkServer", "bwNsSyncAPIGroup"), ("BW-BroadworksNetworkServer", "bwNsOamGroup"), ("BW-BroadworksNetworkServer", "bwNsOssGroup"), ("BW-BroadworksNetworkServer", "bwNsPSPersistencyStatsGroup"), ("BW-BroadworksNetworkServer", "bwNsScpStatsGroup"), ("BW-BroadworksNetworkServer", "bwNSXSTcpStatsGroup"), ("BW-BroadworksNetworkServer", "bwNSPSTcpStatsGroup"), ("BW-BroadworksNetworkServer", "bwNSXSCongestionManagementGroup"), ("BW-BroadworksNetworkServer", "bwSIPCongestionManagementGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwNsBasicCompliance = bwNsBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: bwNsBasicCompliance.setDescription('BroadWorks Network Server MIB compliance')
mibBuilder.exportSymbols("BW-BroadworksNetworkServer", bwNSCommonCommPSStatsEntry=bwNSCommonCommPSStatsEntry, bwNSPSTTHWMValue=bwNSPSTTHWMValue, bwNSPSMonitoringExecutorTaskQueueSize=bwNSPSMonitoringExecutorTaskQueueSize, psNSPerNbCommittedTransactions=psNSPerNbCommittedTransactions, bwNSNumCallYellowZoneOverloadTrans=bwNSNumCallYellowZoneOverloadTrans, bwNSSipStatsNotifyResponseIns=bwNSSipStatsNotifyResponseIns, perNSNbOpenedTransactions=perNSNbOpenedTransactions, bwNSPSAvgRowsUpdated=bwNSPSAvgRowsUpdated, bwSCProxyStatsASMessageErrors=bwSCProxyStatsASMessageErrors, nrs=nrs, bwNSSipStatsNotifyIns=bwNSSipStatsNotifyIns, bwNSCommonCommPSHost=bwNSCommonCommPSHost, nsXSCommonCommStats=nsXSCommonCommStats, bwNSSipStatsMessageResponsesTable=bwNSSipStatsMessageResponsesTable, bwNSXSTTHWMEntry=bwNSXSTTHWMEntry, bwNSSystemInternalQueueLengthCurrent=bwNSSystemInternalQueueLengthCurrent, bwNSPSMonitoringExecutorIndex=bwNSPSMonitoringExecutorIndex, bwNSXSUpdateCount=bwNSXSUpdateCount, polInfoID=polInfoID, bwNSSipStatsSubscribeResponsesTable=bwNSSipStatsSubscribeResponsesTable, bwNSXSTcpServersNbConnectionsRefused=bwNSXSTcpServersNbConnectionsRefused, pubPolStatNbRequestsResults=pubPolStatNbRequestsResults, psRemoteXla=psRemoteXla, bwNSCongestionManagementNeighborIndex=bwNSCongestionManagementNeighborIndex, bwNSSipStatsRegisterResponseIns=bwNSSipStatsRegisterResponseIns, broadsoft=broadsoft, bwNSSipStatsOptionsResponseOuts=bwNSSipStatsOptionsResponseOuts, bwNSSipStatsRegisterResponsesTable=bwNSSipStatsRegisterResponsesTable, bwNSCommonCommPSAcceptedInboundConnections=bwNSCommonCommPSAcceptedInboundConnections, networkServer=networkServer, bwNSSystemInternalQueueTimeAvg=bwNSSystemInternalQueueTimeAvg, systemNbSites=systemNbSites, carrierStatEntry=carrierStatEntry, ossNbActiveSessions=ossNbActiveSessions, bwNSSystemInternalQueueEntry=bwNSSystemInternalQueueEntry, bwNSPSTcpServersNbBytesSentSecure=bwNSPSTcpServersNbBytesSentSecure, bwNSXSTcpServersName=bwNSXSTcpServersName, bwNsPSPersistencyStatsGroup=bwNsPSPersistencyStatsGroup, persistency=persistency, bwNSSipStatsNotifyResponsesTable=bwNSSipStatsNotifyResponsesTable, bwNbNonInviteTransactionInViolation=bwNbNonInviteTransactionInViolation, psNSPerNbCriticalErrors=psNSPerNbCriticalErrors, bwNSPSAvgUpdateTime=bwNSPSAvgUpdateTime, bwNSXSMonitoringExecutorNbWarnings=bwNSXSMonitoringExecutorNbWarnings, psTimesTen=psTimesTen, bwNSNbErrorsSent=bwNSNbErrorsSent, bwUserLocationRequests=bwUserLocationRequests, bwNSSystemInternalQueueSize=bwNSSystemInternalQueueSize, bwNSCongestionManagementNeighborRegisterIn=bwNSCongestionManagementNeighborRegisterIn, bwNSSipStatsMessageResponseOuts=bwNSSipStatsMessageResponseOuts, bwNSPSMonitoringExecutorEntry=bwNSPSMonitoringExecutorEntry, bwNsBasicCompliance=bwNsBasicCompliance, bwNSSipStatsNotifyResponsesEntry=bwNSSipStatsNotifyResponsesEntry, bwNSSipStatsInfoResponseOuts=bwNSSipStatsInfoResponseOuts, internalStats=internalStats, bwNSSystemInternalQueueLengthMaxTimestamp=bwNSSystemInternalQueueLengthMaxTimestamp, bwNSMibGroups=bwNSMibGroups, bwNSNbResponsesSent=bwNSNbResponsesSent, bwNsCallLogsStatsGroup=bwNsCallLogsStatsGroup, bwNSXSTcpServersStatsEntry=bwNSXSTcpServersStatsEntry, bwNSMibConformance=bwNSMibConformance, oampNbActiveSessions=oampNbActiveSessions, psNSRemoteXlaNbTimesConnected=psNSRemoteXlaNbTimesConnected, bwNsXSPersistencyStatsGroup=bwNsXSPersistencyStatsGroup, bwNSNbInvalidMessagesReceived=bwNSNbInvalidMessagesReceived, bwNSSipStatsSubscribeResponseOuts=bwNSSipStatsSubscribeResponseOuts, bwSCProxyStatsSCPMessageOuts=bwSCProxyStatsSCPMessageOuts, systemNbDNs=systemNbDNs, bwCarrierNbInterLataCalls=bwCarrierNbInterLataCalls, bwNsCarrierStatsGroup=bwNsCarrierStatsGroup, bwNbPolicyRequestFailures=bwNbPolicyRequestFailures, bwNSPSTTHWMStackTrace=bwNSPSTTHWMStackTrace, bwNSSystemInternalQueueName=bwNSSystemInternalQueueName, bwNSCommonCommXSInterface=bwNSCommonCommXSInterface, psNSTtConnectionPoolSize=psNSTtConnectionPoolSize, bwNSSystemInternalQueueLengthAvg=bwNSSystemInternalQueueLengthAvg, bwNSCommonCommPSStatsIndex=bwNSCommonCommPSStatsIndex, perNSNbCommittedTransactions=perNSNbCommittedTransactions, bwNSXSQueryCount=bwNSXSQueryCount, congestionManagement=congestionManagement, bwNSCommonCommPSRejectedInboundConnections=bwNSCommonCommPSRejectedInboundConnections, calllogNbEnterprises=calllogNbEnterprises, bwNSNRSStatsTableNbRequestsSent=bwNSNRSStatsTableNbRequestsSent, errorStatTable=errorStatTable, bwNSSipStatsNotifyResponseOuts=bwNSSipStatsNotifyResponseOuts, publicPolicyStatEntry=publicPolicyStatEntry, perNSNbCriticalErrors=perNSNbCriticalErrors, timesTen=timesTen, systemNbUnassignedDNs=systemNbUnassignedDNs, bwNbTransactionInViolation=bwNbTransactionInViolation, privPolStatNbRequestsResults=privPolStatNbRequestsResults, systemNbRoutingNEs=systemNbRoutingNEs, bwNSSystemInternalQueueLengthMaxTimestampLSB=bwNSSystemInternalQueueLengthMaxTimestampLSB, privPolStatPolicyName=privPolStatPolicyName, syncNbUpdatesRequests=syncNbUpdatesRequests, system=system, errStatName=errStatName, xsNSRemoteXlaUpdatesPending=xsNSRemoteXlaUpdatesPending, ossNbAuthorizationFailures=ossNbAuthorizationFailures, bwNSSipStatsRegisterResponseOuts=bwNSSipStatsRegisterResponseOuts, bwNSPSTTHWMTimestamp=bwNSPSTTHWMTimestamp, bwNSCommonCommXSRejectedOutboundConnections=bwNSCommonCommXSRejectedOutboundConnections, bwNsOamGroup=bwNsOamGroup, bwNSSipStatsOptionsIns=bwNSSipStatsOptionsIns, bwNSCommonCommXSOutputCommunicationErrors=bwNSCommonCommXSOutputCommunicationErrors, bwNSCommonCommXSProtocol=bwNSCommonCommXSProtocol, bwUserLocationRequestUnknownUser=bwUserLocationRequestUnknownUser, syncNbAuthorizationFailures=syncNbAuthorizationFailures, bwNSNbRequestsUnanswered=bwNSNbRequestsUnanswered, bwNSXSTTHWMName=bwNSXSTTHWMName, bwNSSipStatsMessageResponseCodeValue=bwNSSipStatsMessageResponseCodeValue, broadworks=broadworks, serviceControlProxy=serviceControlProxy, bwNSNRSStatsTableIndex=bwNSNRSStatsTableIndex, ossNbQueriesRequests=ossNbQueriesRequests, carrierStatTable=carrierStatTable, polInfoEnterpriseName=polInfoEnterpriseName, bwNSPSTcpServersNbConnectionsClosed=bwNSPSTcpServersNbConnectionsClosed, bwNSCongestionManagementNeighborSubscribeNotifyIn=bwNSCongestionManagementNeighborSubscribeNotifyIn, bwNSNRSStatsTableNbResponsesReceived=bwNSNRSStatsTableNbResponsesReceived, bwNSXSMonitoringExecutorTaskQueueSize=bwNSXSMonitoringExecutorTaskQueueSize, bwNsNrsStatsGroup=bwNsNrsStatsGroup, polInfoNbOccurences=polInfoNbOccurences, bwNsCallPStatsGroup=bwNsCallPStatsGroup, bwNSXSMonitoringExecutorLongestTaskName=bwNSXSMonitoringExecutorLongestTaskName, polInfoInfoName=polInfoInfoName, neStatName=neStatName, bwNSPSMonitoringExecutorNbWarnings=bwNSPSMonitoringExecutorNbWarnings, bwNSCommonCommPSStatsTable=bwNSCommonCommPSStatsTable, bwNSCurrentNonCallOverloadZone=bwNSCurrentNonCallOverloadZone, bwNSXSTcpServersOutgoingQueueSize=bwNSXSTcpServersOutgoingQueueSize, bwNSSipStatsAckIns=bwNSSipStatsAckIns, bwNSNumDiscardedMessage=bwNSNumDiscardedMessage, bwNSSipStatsInviteIns=bwNSSipStatsInviteIns, bwNSSystemInternalQueueTimeMaxTimestampMSB=bwNSSystemInternalQueueTimeMaxTimestampMSB, psNSTtNbFailedCheckpoints=psNSTtNbFailedCheckpoints, bwNSPSMonitoringExecutorCurrentPoolSize=bwNSPSMonitoringExecutorCurrentPoolSize, bwNSPSTTHWMIndex=bwNSPSTTHWMIndex, bwNSXSTcpServersNbConnectionsInitiated=bwNSXSTcpServersNbConnectionsInitiated, overloadStats=overloadStats, errorStatEntry=errorStatEntry, psNSRemoteXlaUpdatesProcessed=psNSRemoteXlaUpdatesProcessed, bwNSSipStatsInviteResponseOuts=bwNSSipStatsInviteResponseOuts, bwNSSystemInternalQueueTimeMin=bwNSSystemInternalQueueTimeMin, policies=policies, bwNbPolicyRequests=bwNbPolicyRequests, bwNSSipStatsSubscribeResponseIns=bwNSSipStatsSubscribeResponseIns, bwNSSipStatsInviteResponseCodeValue=bwNSSipStatsInviteResponseCodeValue, bwNSXSTcpStatsGroup=bwNSXSTcpStatsGroup, bwNSCongestionManagementNeighbor5xxIn=bwNSCongestionManagementNeighbor5xxIn, bwNSXSMonitoringExecutorTable=bwNSXSMonitoringExecutorTable, bwNSXSTcpServersNbBytesReceivedSecure=bwNSXSTcpServersNbBytesReceivedSecure, bwNSTimeLastDiscardedMessage=bwNSTimeLastDiscardedMessage, systemNbExts=systemNbExts, bwCarrierName=bwCarrierName, PYSNMP_MODULE_ID=broadsoft, bwNSNbRequestsReceived=bwNSNbRequestsReceived, oss=oss, bwNSNbResponsesResent=bwNSNbResponsesResent, bwNSXSTcpServersNbBytesSent=bwNSXSTcpServersNbBytesSent, ttNSNbConnectionsCreated=ttNSNbConnectionsCreated, bwNSSipStatsRegisterResponsesEntry=bwNSSipStatsRegisterResponsesEntry, polInfoPolicyName=polInfoPolicyName, bwNSSipStatsActiveTcpConnections=bwNSSipStatsActiveTcpConnections, bwNSSipStatsUdpOuts=bwNSSipStatsUdpOuts, neStatNbMSSRequests=neStatNbMSSRequests, bwNSCommonCommPSRejectedOutboundConnections=bwNSCommonCommPSRejectedOutboundConnections, bwNSXSTcpServersStatsIndex=bwNSXSTcpServersStatsIndex, privatePolicyStatTable=privatePolicyStatTable, xsNSRemoteXlaNbTimesDisconnected=xsNSRemoteXlaNbTimesDisconnected, bwSCProxyStatsSCPMessageErrors=bwSCProxyStatsSCPMessageErrors, bwSCProxyStatsASTable=bwSCProxyStatsASTable, ttNSNbFailedCheckpoints=ttNSNbFailedCheckpoints, systemNbEnterprises=systemNbEnterprises, bwNSXSTTHWMValue=bwNSXSTTHWMValue, bwNSSystemInternalQueueResets=bwNSSystemInternalQueueResets, bwNSCommonCommPSProtocol=bwNSCommonCommPSProtocol, neStatTable=neStatTable, bwNSCongestionManagementNeighborInviteIn=bwNSCongestionManagementNeighborInviteIn, bwNSCongestionManagementNeighborOptionsIn=bwNSCongestionManagementNeighborOptionsIn, bwNSCommonCommXSInputMessagesProcessed=bwNSCommonCommXSInputMessagesProcessed, bwNSXSMonitoringExecutorMaxPoolSize=bwNSXSMonitoringExecutorMaxPoolSize, bwNSNRSStatsTableNbRequestsUnanswered=bwNSNRSStatsTableNbRequestsUnanswered, psSystem=psSystem, errStatNbOccurences=errStatNbOccurences, nsProtocol=nsProtocol, bwNSNbRequestsSent=bwNSNbRequestsSent, bwNSCommonCommXSStatsIndex=bwNSCommonCommXSStatsIndex, bwNSXSAvgUpdateTime=bwNSXSAvgUpdateTime, bwNSPSTTHWMTable=bwNSPSTTHWMTable, bwNSPSTcpServersNbBytesReceivedSecure=bwNSPSTcpServersNbBytesReceivedSecure, neStatNbSIPRequests=neStatNbSIPRequests, bwNSSystemInternalQueueLengthMax=bwNSSystemInternalQueueLengthMax, systemNbResourceNEs=systemNbResourceNEs, bwNSPSMonitoringExecutorMaxPoolSize=bwNSPSMonitoringExecutorMaxPoolSize, bwNSSipStatsInfoResponsesEntry=bwNSSipStatsInfoResponsesEntry, bwSIPCongestionManagementGroup=bwSIPCongestionManagementGroup, syncNbOpenedSessions=syncNbOpenedSessions, psNSRemoteXlaUpdatesPending=psNSRemoteXlaUpdatesPending, bwNSCongestionManagementNeighborCallpRequestInRate=bwNSCongestionManagementNeighborCallpRequestInRate, bwNsErrorStatsGroup=bwNsErrorStatsGroup, xsNSRemoteXlaNbTimesConnected=xsNSRemoteXlaNbTimesConnected, neStatEntry=neStatEntry, bwNSSystemInternalQueueTimeMaxTimestampLSB=bwNSSystemInternalQueueTimeMaxTimestampLSB, bwNSCongestionManagementNeighborState=bwNSCongestionManagementNeighborState, bwNSXSMonitoringExecutorAvgActiveThreads=bwNSXSMonitoringExecutorAvgActiveThreads, psNSTtNbBackdoorUpdates=psNSTtNbBackdoorUpdates, tcp=tcp, bwNSXSTTHWMTable=bwNSXSTTHWMTable, ttNSConnectionPoolSize=ttNSConnectionPoolSize, bwNSPSTcpStatsGroup=bwNSPSTcpStatsGroup, synchAPI=synchAPI, bwNSXSMonitoringExecutorCurrentPoolSize=bwNSXSMonitoringExecutorCurrentPoolSize, bwNSSipStatsInfoResponsesTable=bwNSSipStatsInfoResponsesTable, bwNSSipStatsRegisterResponseCodeValue=bwNSSipStatsRegisterResponseCodeValue, bwNSSipStatsInfoResponseIns=bwNSSipStatsInfoResponseIns, bwNSSipStatsTcpFailures=bwNSSipStatsTcpFailures, bwNSNRSStatsTableNbResponsesResent=bwNSNRSStatsTableNbResponsesResent, bwNSXSMonitoringExecutorIndex=bwNSXSMonitoringExecutorIndex, ossNbUpdatesRequests=ossNbUpdatesRequests, bwNSXSAvgRowsUpdated=bwNSXSAvgRowsUpdated, bwNSPSConcurrentFrameworkStatsGroup=bwNSPSConcurrentFrameworkStatsGroup, bwNsScpStatsGroup=bwNsScpStatsGroup, bwNSCommonCommPSInputCommunicationErrors=bwNSCommonCommPSInputCommunicationErrors, bwNSNRSStatsTableNbErrorsSent=bwNSNRSStatsTableNbErrorsSent, bwNSNRSStatsTableNbRequestsResent=bwNSNRSStatsTableNbRequestsResent, perNSNbFailedTransactions=perNSNbFailedTransactions, bwNSSipStatsOptionsResponsesEntry=bwNSSipStatsOptionsResponsesEntry, bwNSNRSStatsTableNbRequestsReceived=bwNSNRSStatsTableNbRequestsReceived, xsRemoteXla=xsRemoteXla, bwSCProxyStatsASEntry=bwSCProxyStatsASEntry, management=management, bwNsLicensingGroup=bwNsLicensingGroup, bwNSCommonCommPSInputMessagesProcessed=bwNSCommonCommPSInputMessagesProcessed, bwNSSipStatsMessageResponseIns=bwNSSipStatsMessageResponseIns, bwNSXSMonitoringExecutorName=bwNSXSMonitoringExecutorName, protocol=protocol, bwNSSipStatsTcpIns=bwNSSipStatsTcpIns, bwNSXSTcpServersStatsTable=bwNSXSTcpServersStatsTable, bwNSPSMonitoringExecutorTable=bwNSPSMonitoringExecutorTable, psNSTtNbConnectionsCreated=psNSTtNbConnectionsCreated, privPolStatID=privPolStatID, policyInfoTable=policyInfoTable, neStatNbSIPRequestsFailures=neStatNbSIPRequestsFailures, bwNSXSTTHWMStackTrace=bwNSXSTTHWMStackTrace, systemNbGrps=systemNbGrps, bwNSSipStatsSubscribeResponsesEntry=bwNSSipStatsSubscribeResponsesEntry, bwNSSipStatsOptionsResponseIns=bwNSSipStatsOptionsResponseIns, bwNSSipStatsInfoResponseCodeValue=bwNSSipStatsInfoResponseCodeValue, ossNbOpenedSessions=ossNbOpenedSessions, bwNSPSUpdateCount=bwNSPSUpdateCount, nsExecutionServer=nsExecutionServer, bwNSSipStatsSubscribeIns=bwNSSipStatsSubscribeIns, bwNSPSTTHWMEntry=bwNSPSTTHWMEntry)
mibBuilder.exportSymbols("BW-BroadworksNetworkServer", bwNsGenericPolicyStatsGroup=bwNsGenericPolicyStatsGroup, bwNSPSMonitoringExecutorNbTasksRun=bwNSPSMonitoringExecutorNbTasksRun, bwNSMibCompliancy=bwNSMibCompliancy, bwNSSipStatsRegisterIns=bwNSSipStatsRegisterIns, bwNSCommonCommPSOutputMessagesProcessed=bwNSCommonCommPSOutputMessagesProcessed, bwNSXSTTHWMTimestamp=bwNSXSTTHWMTimestamp, bwNSXSMonitoringExecutorLongestTaskMs=bwNSXSMonitoringExecutorLongestTaskMs, bwNSSipStatsSubscribeResponseCodeValue=bwNSSipStatsSubscribeResponseCodeValue, pubPolStatNbInstances=pubPolStatNbInstances, bwNSSipStatsMessageIns=bwNSSipStatsMessageIns, bwNSSipStatsFailures=bwNSSipStatsFailures, bwNSPSQueryCount=bwNSPSQueryCount, bwNsOssGroup=bwNsOssGroup, psConcurrent=psConcurrent, bwNSCongestionManagementNeighborCapability=bwNSCongestionManagementNeighborCapability, processing=processing, bwNSNbRequestsResent=bwNSNbRequestsResent, bwUserLocationRequestFailures=bwUserLocationRequestFailures, nsTcp=nsTcp, bwNSXSTcpServersNbBytesReceived=bwNSXSTcpServersNbBytesReceived, licensing=licensing, bwNbTimePeriodWithLicenseViolations=bwNbTimePeriodWithLicenseViolations, bwNSPSMonitoringExecutorAvgActiveThreads=bwNSPSMonitoringExecutorAvgActiveThreads, bwNSSipStatsNotifyResponseCodeValue=bwNSSipStatsNotifyResponseCodeValue, bwNSNRSStatsTableProtocolName=bwNSNRSStatsTableProtocolName, bwNSXSTcpServersNbConnectionsClosed=bwNSXSTcpServersNbConnectionsClosed, nsPSCommonCommStats=nsPSCommonCommStats, bwNSPSTcpServersNbConnectionsAccepted=bwNSPSTcpServersNbConnectionsAccepted, bwNsSystemQueueStatsGroup=bwNsSystemQueueStatsGroup, bwSCProxyStatsSCPMessageIns=bwSCProxyStatsSCPMessageIns, systemNbURLs=systemNbURLs, psPersistency=psPersistency, bwNSXSAvgQueryTime=bwNSXSAvgQueryTime, bwNSPSAvgQueryTime=bwNSPSAvgQueryTime, bwNSPSTcpServersStatsEntry=bwNSPSTcpServersStatsEntry, bwNSCommonCommXSHost=bwNSCommonCommXSHost, nsProvisioningServer=nsProvisioningServer, syncNbUpdatesRequestsFailures=syncNbUpdatesRequestsFailures, bwNSCallpCallsPerSecond=bwNSCallpCallsPerSecond, bwNSSipStatsInviteResponsesTable=bwNSSipStatsInviteResponsesTable, privPolStatNbRequestsFailures=privPolStatNbRequestsFailures, ossNbUpdatesRequestsFailures=ossNbUpdatesRequestsFailures, bwNSNRSStatsTableNbErrorsReceived=bwNSNRSStatsTableNbErrorsReceived, bwNSNRSStatsTableNbResponsesSent=bwNSNRSStatsTableNbResponsesSent, bwNSCommonCommXSRejectedInboundConnections=bwNSCommonCommXSRejectedInboundConnections, bwNSNRSStatsEntry=bwNSNRSStatsEntry, bwNSPSTcpServersStatsTable=bwNSPSTcpServersStatsTable, xsNSRemoteXlaUpdatesProcessed=xsNSRemoteXlaUpdatesProcessed, pubPolStatPolicyName=pubPolStatPolicyName, privPolStatEnterpriseName=privPolStatEnterpriseName, bwNSPSTcpServersNbBytesSent=bwNSPSTcpServersNbBytesSent, bwNSSystemInternalQueueTable=bwNSSystemInternalQueueTable, bwSCProxyStatsASMessageOuts=bwSCProxyStatsASMessageOuts, systemNbProfiles=systemNbProfiles, resetAllNSCounters=resetAllNSCounters, policyInfoEntry=policyInfoEntry, bwNsSystemGroup=bwNsSystemGroup, bwCarrierNbInternationalCalls=bwCarrierNbInternationalCalls, bwCarrierStatID=bwCarrierStatID, bwNSCommonCommPSAcceptedOutboundConnections=bwNSCommonCommPSAcceptedOutboundConnections, sip=sip, bwNSNumNonCallRedZoneOverloadTrans=bwNSNumNonCallRedZoneOverloadTrans, privPolStatNbRequests=privPolStatNbRequests, psNSRemoteXlaNbTimesDisconnected=psNSRemoteXlaNbTimesDisconnected, neStatID=neStatID, psProtocol=psProtocol, bwNSCongestionManagementNeighborIpAddress=bwNSCongestionManagementNeighborIpAddress, bwNSXSMonitoringExecutorEntry=bwNSXSMonitoringExecutorEntry, privatePolicyStatEntry=privatePolicyStatEntry, bwNSXSMonitoringExecutorNbErrors=bwNSXSMonitoringExecutorNbErrors, bwNSCommonCommXSInputCommunicationErrors=bwNSCommonCommXSInputCommunicationErrors, oamp=oamp, bwNSCommonCommPSOutputCommunicationErrors=bwNSCommonCommPSOutputCommunicationErrors, neStatNbMSSRequestsFailures=neStatNbMSSRequestsFailures, bwNSNbErrorsReceived=bwNSNbErrorsReceived, pubPolStatID=pubPolStatID, pubPolStatNbRequestsFailures=pubPolStatNbRequestsFailures, bwNSSipStatsTcpOuts=bwNSSipStatsTcpOuts, bwSCProxyStatsASIndex=bwSCProxyStatsASIndex, bwNsXsBcctGroup=bwNsXsBcctGroup, calllogNbClients=calllogNbClients, bwNSPSTcpServersOutgoingQueueSize=bwNSPSTcpServersOutgoingQueueSize, bwNSCongestionManagementNeighborOptionsOut=bwNSCongestionManagementNeighborOptionsOut, bwNbNonInviteTimePeriodWithLicenseViolations=bwNbNonInviteTimePeriodWithLicenseViolations, bwNSCongestionManagementNeighborNonCallpRequestInRate=bwNSCongestionManagementNeighborNonCallpRequestInRate, bwNSPSMonitoringExecutorLongestTaskMs=bwNSPSMonitoringExecutorLongestTaskMs, syncNbActiveSessions=syncNbActiveSessions, ossNbQueriesRequestsFailures=ossNbQueriesRequestsFailures, scpCapModule=scpCapModule, bwNSCommonCommXSAcceptedOutboundConnections=bwNSCommonCommXSAcceptedOutboundConnections, bwNsSipStatsGroup=bwNsSipStatsGroup, bwNSSipStatsInfoIns=bwNSSipStatsInfoIns, bwNSPSTcpServersNbBytesReceived=bwNSPSTcpServersNbBytesReceived, bwNsMoCountersGroup=bwNsMoCountersGroup, bwSCProxyStatsACLViolationCount=bwSCProxyStatsACLViolationCount, bwSCProxyStatsASAddr=bwSCProxyStatsASAddr, bwNSXSCongestionManagementGroup=bwNSXSCongestionManagementGroup, bwNSPSTcpServersIncomingQueueSize=bwNSPSTcpServersIncomingQueueSize, errStatID=errStatID, bwNbNonInviteThresholdAlarmSent=bwNbNonInviteThresholdAlarmSent, bwNSPSMonitoringExecutorName=bwNSPSMonitoringExecutorName, bwNSCommonCommXSStatsTable=bwNSCommonCommXSStatsTable, bwSCProxyStatsASMessageIns=bwSCProxyStatsASMessageIns, systemNbHostingNes=systemNbHostingNes, ttNSNbBackdoorUpdates=ttNSNbBackdoorUpdates, bwNSSystemInternalQueueIndex=bwNSSystemInternalQueueIndex, bwCarrierNbIntraLataCalls=bwCarrierNbIntraLataCalls, bwNSPSTcpServersStatsIndex=bwNSPSTcpServersStatsIndex, bwCarrierCic=bwCarrierCic, callLog=callLog, locationApi=locationApi, bwNSXSAvgRowsQueried=bwNSXSAvgRowsQueried, bwNSPSTcpServersNbConnectionsRefused=bwNSPSTcpServersNbConnectionsRefused, bwNSPSMonitoringExecutorNbErrors=bwNSPSMonitoringExecutorNbErrors, concurrent=concurrent, bwNSXSMonitoringExecutorNbTasksRun=bwNSXSMonitoringExecutorNbTasksRun, bwNsSyncAPIGroup=bwNsSyncAPIGroup, bwNsPsBcctGroup=bwNsPsBcctGroup, bwNSNumNonCallYellowZoneOverloadTrans=bwNSNumNonCallYellowZoneOverloadTrans, scpSystemModule=scpSystemModule, bwNSXSTcpServersIncomingQueueSize=bwNSXSTcpServersIncomingQueueSize, bwNSPSTcpServersNbConnectionsInitiated=bwNSPSTcpServersNbConnectionsInitiated, bwNSSystemInternalQueueTimeMaxTimestamp=bwNSSystemInternalQueueTimeMaxTimestamp, bwNSSipStatsOptionsResponseCodeValue=bwNSSipStatsOptionsResponseCodeValue, bwNSSystemInternalQueueLengthMaxTimestampMSB=bwNSSystemInternalQueueLengthMaxTimestampMSB, bwNSSipStatsOptionsResponsesTable=bwNSSipStatsOptionsResponsesTable, bwNSCommonCommPSInterface=bwNSCommonCommPSInterface, bwNSSipStatsCancelIns=bwNSSipStatsCancelIns, pubPolStatNbRequests=pubPolStatNbRequests, bwNSXSTTHWMIndex=bwNSXSTTHWMIndex, bwNSPSAvgRowsQueried=bwNSPSAvgRowsQueried, bwNSPSTTHWMName=bwNSPSTTHWMName, bwNsNeStatsGroup=bwNsNeStatsGroup, bwNSSystemInternalQueueTimeMax=bwNSSystemInternalQueueTimeMax, bwNSCurrentCallOverloadZone=bwNSCurrentCallOverloadZone, bwNSCommonCommXSStatsEntry=bwNSCommonCommXSStatsEntry, bwUserLocationRequestSuccess=bwUserLocationRequestSuccess, bwNSNumCallRedZoneOverloadTrans=bwNSNumCallRedZoneOverloadTrans, bwNSSIPReclaimedStaleTcpConnections=bwNSSIPReclaimedStaleTcpConnections, bwNSCommonCommXSOutputMessagesProcessed=bwNSCommonCommXSOutputMessagesProcessed, bwNSPSMonitoringExecutorLongestTaskName=bwNSPSMonitoringExecutorLongestTaskName, bwNSCommonCommXSAcceptedInboundConnections=bwNSCommonCommXSAcceptedInboundConnections, psNSPerNbFailedTransactions=psNSPerNbFailedTransactions, bwNSNRSStatsTable=bwNSNRSStatsTable, bwNSSipStatsUdpIns=bwNSSipStatsUdpIns, bwNSCongestionManagementNeighborTable=bwNSCongestionManagementNeighborTable, bwNSNbResponsesReceived=bwNSNbResponsesReceived, bwNSCongestionManagementNeighborEntry=bwNSCongestionManagementNeighborEntry, bwNSXSConcurrentFrameworkStatsGroup=bwNSXSConcurrentFrameworkStatsGroup, publicPolicyStatTable=publicPolicyStatTable, bwNSSipStatsMessageResponsesEntry=bwNSSipStatsMessageResponsesEntry, bwNSPSTcpServersName=bwNSPSTcpServersName, bwNSXSTcpServersNbBytesSentSecure=bwNSXSTcpServersNbBytesSentSecure, bwNSXSTcpServersNbConnectionsAccepted=bwNSXSTcpServersNbConnectionsAccepted, bwNbThresholdAlarmSent=bwNbThresholdAlarmSent, psNSPerNbOpenedTransactions=psNSPerNbOpenedTransactions, bwNSSipStatsInviteResponsesEntry=bwNSSipStatsInviteResponsesEntry)
