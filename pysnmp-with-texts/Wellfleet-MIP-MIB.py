#
# PySNMP MIB module Wellfleet-MIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-MIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, Integer32, Counter64, ObjectIdentity, Bits, Unsigned32, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Integer32", "Counter64", "ObjectIdentity", "Bits", "Unsigned32", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfMobileIpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfMobileIpGroup")
wfMobileIpHaTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1), )
if mibBuilder.loadTexts: wfMobileIpHaTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaTable.setDescription('Parameters in wfMobileIpHaTable')
wfMobileIpHaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1), ).setIndexNames((0, "Wellfleet-MIP-MIB", "wfMobileIpHaAddr"), (0, "Wellfleet-MIP-MIB", "wfMobileIpHaCct"))
if mibBuilder.loadTexts: wfMobileIpHaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaEntry.setDescription('An entry in wfMobileIpHaTable.')
wfMobileIpHaCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpHaCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an wfMobileIpHaEntry instance.')
wfMobileIpHaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpHaEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable Mobile Ip Home Agent interface.')
wfMobileIpHaState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpres", 4))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMobileIpHaState.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaState.setDescription('The current state of Mobile Ip Home Agent interface.')
wfMobileIpHaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMobileIpHaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaAddr.setDescription('The IP interface to run Mobile Ip Home Agent on.')
wfMobileIpHaCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMobileIpHaCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaCct.setDescription('Circuit number of the Home Agent interface.')
wfMobileIpHaProtoMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpHaProtoMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaProtoMap.setDescription('HA_PROTO_IP 1 HA_PROTO_IPX 2')
wfMobileIpHaStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpHaStatsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaStatsEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable mib statistics for Mobile Ip Home Agent interface.')
wfMobileIpHaDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpHaDebugLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpHaDebugLevel.setDescription('A parameter to specify which messages to be printed in to the log. Add the types up for level desired : Level Type ------------ 1 Info 2 Warning 4 Fatal 8 Debug 15 All ')
wfMobileIpSpiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 2), )
if mibBuilder.loadTexts: wfMobileIpSpiTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpSpiTable.setDescription('Parameters in wfMobileIpSpiTable')
wfMobileIpSpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 2, 1), ).setIndexNames((0, "Wellfleet-MIP-MIB", "wfMobileIpSpiValue"))
if mibBuilder.loadTexts: wfMobileIpSpiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpSpiEntry.setDescription('An entry in wfMobileIpSpiTable.')
wfMobileIpSpiCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpSpiCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpSpiCreate.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an wfMobileIpSpiEntry instance.')
wfMobileIpSpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMobileIpSpiValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpSpiValue.setDescription('...')
wfMobileIpSpiKey = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpSpiKey.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpSpiKey.setDescription('...')
wfMobileIpSpiAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("md5", 1))).clone('md5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMobileIpSpiAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: wfMobileIpSpiAuthType.setDescription('...')
wfHaMobilityBindingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3), )
if mibBuilder.loadTexts: wfHaMobilityBindingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingTable.setDescription("A table containing the home agent's mobility binding list. The home agent updates this table in response to registration events from mobile nodes.")
wfHaMobilityBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1), ).setIndexNames((0, "Wellfleet-MIP-MIB", "wfHaMobilityBindingIdx"), (0, "Wellfleet-MIP-MIB", "wfHaMobilityBindingCOA"))
if mibBuilder.loadTexts: wfHaMobilityBindingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingEntry.setDescription('An IP entry on the mobility binding list.')
wfHaMobilityBindingIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingIdx.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingIdx.setDescription("The index for IP mobile node in the home agent's IP binding table.")
wfHaMobilityBindingMN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingMN.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingMN.setDescription("Mobile node's home (IP) address.")
wfHaMobilityBindingCOA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingCOA.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingCOA.setDescription("Mobile node's care-of-address. One mobile node can have multiple bindings with different care-of-addresses.")
wfHaMobilityBindingSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingSourceAddress.setDescription("IP source address of the Registration Request as received by the home agent. Will be either a mobile node's co-located care-of address or an address of the foreign agent.")
wfHaMobilityBindingRegFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingRegFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingRegFlags.setDescription('Registration flags sent by mobile node.')
wfHaMobilityBindingRegIDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingRegIDLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingRegIDLow.setDescription('Low 32 bits of Identification used in that binding by the mobile node.')
wfHaMobilityBindingRegIDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingRegIDHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingRegIDHigh.setDescription('High 32 bits of Identification used in that binding by the mobile node.')
wfHaMobilityBindingTimeGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingTimeGranted.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingTimeGranted.setDescription('The lifetime in seconds granted to the mobile node for this registration.')
wfHaMobilityBindingTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaMobilityBindingTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaMobilityBindingTimeRemaining.setDescription('The number of seconds remaining until the registration is expired. It has the same initial value as wfHaMobilityBindingTimeGranted, and is counted down by the home agent.')
wfHaIpxMobilityBindingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4), )
if mibBuilder.loadTexts: wfHaIpxMobilityBindingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingTable.setDescription("A table containing the home agent's IPX mobility binding list. The home agent updates this table in response to registration events from IPX mobile nodes.")
wfHaIpxMobilityBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1), ).setIndexNames((0, "Wellfleet-MIP-MIB", "wfHaIpxMobilityBindingIdx"), (0, "Wellfleet-MIP-MIB", "wfHaIpxMobilityBindingCOA"))
if mibBuilder.loadTexts: wfHaIpxMobilityBindingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingEntry.setDescription('An IPX entry on the mobility binding list.')
wfHaIpxMobilityBindingIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingIdx.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingIdx.setDescription("The index for IPX mobile node in the home agent's IPX binding table.")
wfHaIpxMobilityBindingMN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingMN.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingMN.setDescription('The address of the IPX mobile node.')
wfHaIpxMobilityBindingCOA = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingCOA.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingCOA.setDescription("Mobile node's care-of-address. One mobile node can have multiple bindings with different care-of-addresses.")
wfHaIpxMobilityBindingSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingSourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingSourceAddress.setDescription("IP source address of the Registration Request as received by the home agent. Will be either a mobile node's co-located care-of address or an address of the foreign agent.")
wfHaIpxMobilityBindingRegFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingRegFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingRegFlags.setDescription('Registration flags sent by mobile node.')
wfHaIpxMobilityBindingRegIDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingRegIDLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingRegIDLow.setDescription('Low 32 bits of Identification used in that binding by the mobile node.')
wfHaIpxMobilityBindingRegIDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingRegIDHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingRegIDHigh.setDescription('High 32 bits of Identification used in that binding by the mobile node.')
wfHaIpxMobilityBindingTimeGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingTimeGranted.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingTimeGranted.setDescription('The lifetime in seconds granted to the mobile node for this registration.')
wfHaIpxMobilityBindingTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 21, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHaIpxMobilityBindingTimeRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: wfHaIpxMobilityBindingTimeRemaining.setDescription('The number of seconds remaining until the registration is expired. It has the same initial value as wfHaMobilityBindingTimeGranted, and is counted down by the home agent.')
mibBuilder.exportSymbols("Wellfleet-MIP-MIB", wfHaMobilityBindingTimeGranted=wfHaMobilityBindingTimeGranted, wfHaIpxMobilityBindingMN=wfHaIpxMobilityBindingMN, wfHaIpxMobilityBindingCOA=wfHaIpxMobilityBindingCOA, wfHaIpxMobilityBindingSourceAddress=wfHaIpxMobilityBindingSourceAddress, wfHaIpxMobilityBindingTimeGranted=wfHaIpxMobilityBindingTimeGranted, wfMobileIpSpiEntry=wfMobileIpSpiEntry, wfMobileIpHaTable=wfMobileIpHaTable, wfMobileIpHaAddr=wfMobileIpHaAddr, wfHaMobilityBindingCOA=wfHaMobilityBindingCOA, wfMobileIpHaProtoMap=wfMobileIpHaProtoMap, wfHaMobilityBindingTimeRemaining=wfHaMobilityBindingTimeRemaining, wfHaIpxMobilityBindingRegIDLow=wfHaIpxMobilityBindingRegIDLow, wfHaIpxMobilityBindingRegFlags=wfHaIpxMobilityBindingRegFlags, wfMobileIpHaDebugLevel=wfMobileIpHaDebugLevel, wfMobileIpHaCct=wfMobileIpHaCct, wfHaIpxMobilityBindingRegIDHigh=wfHaIpxMobilityBindingRegIDHigh, wfHaIpxMobilityBindingEntry=wfHaIpxMobilityBindingEntry, wfMobileIpHaEnable=wfMobileIpHaEnable, wfHaMobilityBindingSourceAddress=wfHaMobilityBindingSourceAddress, wfHaMobilityBindingRegIDLow=wfHaMobilityBindingRegIDLow, wfMobileIpHaEntry=wfMobileIpHaEntry, wfMobileIpHaCreate=wfMobileIpHaCreate, wfHaMobilityBindingIdx=wfHaMobilityBindingIdx, wfHaIpxMobilityBindingTimeRemaining=wfHaIpxMobilityBindingTimeRemaining, wfMobileIpSpiValue=wfMobileIpSpiValue, wfHaMobilityBindingEntry=wfHaMobilityBindingEntry, wfMobileIpHaState=wfMobileIpHaState, wfHaIpxMobilityBindingIdx=wfHaIpxMobilityBindingIdx, wfMobileIpSpiKey=wfMobileIpSpiKey, wfHaMobilityBindingRegIDHigh=wfHaMobilityBindingRegIDHigh, wfHaMobilityBindingMN=wfHaMobilityBindingMN, wfHaIpxMobilityBindingTable=wfHaIpxMobilityBindingTable, wfMobileIpSpiCreate=wfMobileIpSpiCreate, wfHaMobilityBindingTable=wfHaMobilityBindingTable, wfMobileIpSpiTable=wfMobileIpSpiTable, wfMobileIpHaStatsEnable=wfMobileIpHaStatsEnable, wfMobileIpSpiAuthType=wfMobileIpSpiAuthType, wfHaMobilityBindingRegFlags=wfHaMobilityBindingRegFlags)
