#
# PySNMP MIB module Wellfleet-LOADER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-LOADER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, Unsigned32, ModuleIdentity, Integer32, Counter32, TimeTicks, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Unsigned32", "ModuleIdentity", "Integer32", "Counter32", "TimeTicks", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSoftwareConfig, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSoftwareConfig")
wfProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 2, 1))
wfIPROTOLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIPROTOLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIPROTOLoad.setDescription('Bit mask for loading the IP components on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDECNETLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDECNETLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDECNETLoad.setDescription('Bit mask for loading the DECNet router on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfATLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATLoad.setDescription('Bit mask for loading the AppleTalk router on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfXNSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfXNSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfXNSLoad.setDescription('Bit mask for loading the XNS router on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfIPXLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIPXLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIPXLoad.setDescription('Bit mask for loading the IPX router on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfOSILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOSILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfOSILoad.setDescription('Bit mask for loading the ISO router on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfX25DTELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25DTELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25DTELoad.setDescription('Bit mask for loading the X.25 DTE protocol on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfX25DCELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25DCELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25DCELoad.setDescription('Bit mask for loading the X.25 DCE protocol on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfVINESLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVINESLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfVINESLoad.setDescription('Bit mask for loading the VINES router on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfFRLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFRLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFRLoad.setDescription('Bit mask for loading the Frame Relay master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfRARPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRARPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRARPLoad.setDescription('Bit mask for loading Reverse ARP master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfATMLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATMLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATMLoad.setDescription('Bit mask for loading the ATM master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfDLSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDLSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDLSLoad.setDescription('Bit mask for loading the DLS master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfLNMLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLNMLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfLNMLoad.setDescription('Bit mask for loading the LNM master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfTelnetLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTelnetLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfTelnetLoad.setDescription('Bit mask for loading the Telnet protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfTFTPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTFTPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfTFTPLoad.setDescription('Bit mask for loading the TFTP protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSNMPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSNMPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSNMPLoad.setDescription('Bit mask for loading the SNMP protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfTCPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTCPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfTCPLoad.setDescription('Bit mask for loading the TCP protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfBGPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBGPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfBGPLoad.setDescription('Bit mask for loading the BGP protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfEGPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEGPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfEGPLoad.setDescription('Bit mask for loading the EGP protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfOSPFLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOSPFLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfOSPFLoad.setDescription('Bit mask for loading the OSPF protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfWPROXYLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWPROXYLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfWPROXYLoad.setDescription('Bit mask for loading the WPROXY protocols on slots 1-14. The MSBit represents slot 1, and so forth.')
wfLLC2Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLLC2Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfLLC2Load.setDescription('Bit mask for loading the LLC2 master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSMDSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSMDSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSMDSLoad.setDescription('Bit mask for loading the SMDS protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfPPPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPPPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPPPLoad.setDescription('Bit mask for loading PPP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfPktCaptureLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPktCaptureLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPktCaptureLoad.setDescription('Bit mask for loading Pcap on slots 1-14. The MSBit represents slot 1, and so forth.')
wfFRSWCNGCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFRSWCNGCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFRSWCNGCLoad.setDescription('Bit mask for loading FrswCngc on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSWPROXYLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSWPROXYLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSWPROXYLoad.setDescription('Bit mask for loading Switch Proxy on slots 1-14. The MSBit represents slot 1, and so forth.')
wfFRSWLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFRSWLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFRSWLoad.setDescription('Bit mask for loading FRSW on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSWSMDSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSWSMDSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSWSMDSLoad.setDescription('Bit mask for loading SWSMDS on slots 1-14. The MSBit represents slot 1, and so forth.')
wfNBASELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNBASELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNBASELoad.setDescription('Bit mask for loading NBASE on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSDLCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 32), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSDLCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSDLCLoad.setDescription('Bit mask for loading SDLC on slots 1-14. The MSBit represents slot 1, and so forth.')
wfTNCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 33), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTNCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfTNCLoad.setDescription('Bit mask for loading Outbound Telnet on slots 1-14. The MSBit represents slot 1, and so forth.')
wfLAPBLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 34), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLAPBLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfLAPBLoad.setDescription('Bit mask for loading the LAPB protocol on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDebugLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 35), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDebugLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDebugLoad.setDescription('Bit mask for loading Debug on slots 1-14. The MSBit represents slot 1, and so forth.')
wfNBIPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 36), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNBIPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNBIPLoad.setDescription('Bit mask for loading NBIP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfATMCsLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 37), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATMCsLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATMCsLoad.setDescription('Bit mask for loading ATM master on slots 1-14. The MSBit represents slot 1, and so forth.')
wfDvmrpLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 38), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDvmrpLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDvmrpLoad.setDescription('Bit mask for loading DVMRP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfIgmpLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 39), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIgmpLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIgmpLoad.setDescription('Bit mask for loading IGMP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfISDNLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 40), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfISDNLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfISDNLoad.setDescription('Bit mask for loading ISDN on slots 1-14. The MSBit represents slot 1, and so forth.')
wfLMLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 41), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLMLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfLMLoad.setDescription('Bit mask for loading LM on slots 1-14. The MSBit represents slot 1, and so forth.')
wfPingLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 42), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPingLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPingLoad.setDescription('Bit mask for loading PING on slots 1-14. The MSBit represents slot 1, and so forth.')
wfAPPNCpLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 43), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAPPNCpLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAPPNCpLoad.setDescription('Bit mask for loading the APPN CP soloist on slots 1-14. The MSBit represents slot 1, and so forth.')
wfAPPNLsLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 44), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAPPNLsLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAPPNLsLoad.setDescription('Bit mask for loading the APPN LS gates on slots 1-14. The MSBit represents slot 1, and so forth.')
wfWcpLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 45), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWcpLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfWcpLoad.setDescription('Bit mask for loading the WCP control gate on slots 1-14. The MSBit represents slot 1, and so forth.')
wfFTPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 46), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFTPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFTPLoad.setDescription('Bit mask for loading the FTP protocol on slots 1-14. The MSBit represents slot 1, and so forth.')
wfARPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 47), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfARPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfARPLoad.setDescription('Bit mask for loading ARP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSYSLLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 48), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSYSLLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSYSLLoad.setDescription('Bit mask for loading SYSLOG on slots 1-14. The MSBit represents slot 1, and so forth.')
wfBGPRSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 49), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBGPRSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfBGPRSLoad.setDescription('Bit mask for loading BGP Route Server on slots 1-14. The MSBit represents slot 1, and so forth.')
wfATMLeLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 50), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATMLeLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATMLeLoad.setDescription('Bit mask for loading ATM LE on slots 1-14. The MSBit represents slot 1, and so forth.')
wfCRMLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 51), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCRMLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfCRMLoad.setDescription('Bit mask for loading Circuit Resource Manager on slots 1-14. The MSBit represents slot 1, and so forth.')
wfIPEXLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 52), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIPEXLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIPEXLoad.setDescription('Bit mask for loading IPEX on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSt2Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 53), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSt2Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfSt2Load.setDescription('Bit mask for loading ST2 on slots 1-14. The MSBit represents slot 1, and so forth.')
wfNLSPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 54), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNLSPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNLSPLoad.setDescription('Bit mask for loading NLSP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfSTATSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 55), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSTATSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSTATSLoad.setDescription('Bit mask for loading STATS on slots 1-14. The MSBit represents slot 1, and so forth.')
wfNPTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 56), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNPTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNPTLoad.setDescription('Bit mask for loading STATS on slots 1-14. The MSBit represents slot 1, and so forth.')
wfRREDUNDLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 57), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRREDUNDLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRREDUNDLoad.setDescription('Bit mask for loading RREDUND on slots 1-14. The MSBit represents slot 1, and so forth.')
wfATMSigLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 58), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATMSigLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATMSigLoad.setDescription('Bit mask for loading ATM signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfIPv6Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 59), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIPv6Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfIPv6Load.setDescription('Bit mask for loading IPv6 signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfBOTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 60), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBOTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfBOTLoad.setDescription('Bit mask for loading BOT signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfPimLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 61), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPimLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPimLoad.setDescription('Bit mask for loading Protocol Independant Multicast (PIM) on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfLBCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 62), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLBCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfLBCLoad.setDescription('Bit mask for loading LBC on slots 1-14. The MSBit represents slot 1, and so forth.')
wfATMMcsLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 63), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATMMcsLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATMMcsLoad.setDescription('Bit mask for loading ATM MCS on slots 1-14. The MSBit represents slot 1, and so forth.')
wfATMAsmLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 64), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfATMAsmLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfATMAsmLoad.setDescription('Bit mask for loading ATM ASM on slots 1-14. The MSBit represents slot 1, and so forth.')
wfCPMLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 65), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCPMLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfCPMLoad.setDescription('Bit mask for loading ATM CPM on slots 1-14. The MSBit represents slot 1, and so forth.')
wfBAYSIGLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 66), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBAYSIGLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfBAYSIGLoad.setDescription('Bit mask for loading ATM Signalling (BAYSIG) on slots 1-14. The MSBit represents slot 1, and so forth.')
wfScmIpcLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 67), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfScmIpcLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfScmIpcLoad.setDescription('Bit mask for loading SCM IPC on slots 1-14. The MSBit represents slot 1, and so forth.')
wfNTPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 68), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNTPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNTPLoad.setDescription('Bit mask for loading NTP signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfRADIUSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 69), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRADIUSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRADIUSLoad.setDescription('Bit mask for loading RADIUS on slots 1-14. The MSBit represents slot 1, and so forth.')
wfRCMDSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 70), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRCMDSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRCMDSLoad.setDescription('Bit mask for loading RCMDS signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDNSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 71), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDNSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDNSLoad.setDescription('Bit mask for loading DNS signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfWepLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 72), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfWepLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfWepLoad.setDescription('Bit mask for loading WEP encryption on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfRipv6Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 73), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRipv6Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfRipv6Load.setDescription('Bit mask for loading Ripv6 signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMOSPFLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 74), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMOSPFLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfMOSPFLoad.setDescription('Bit mask for loading the MOSPF components on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfRSVPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 75), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRSVPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRSVPLoad.setDescription('Bit mask for loading the RSVP components on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfIpSwitchLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 76), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpSwitchLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIpSwitchLoad.setDescription('Bit mask for loading IpSwitch/AutoLearn on slots 1-14. The MSBit represents slot 1, and so forth.')
wfPortMtxLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 77), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPortMtxLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPortMtxLoad.setDescription('Bit mask for loading Port Matrix, only one slot for FX. The MSBit represents slot 1, and so forth.')
wfConvStrLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 78), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfConvStrLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfConvStrLoad.setDescription('Bit mask for loading Conversation Steer, only one slot for FX. The MSBit represents slot 1, and so forth.')
wfS5ChasLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 79), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfS5ChasLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfS5ChasLoad.setDescription('Bit mask for loading S5 signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfFRSVCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 80), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFRSVCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFRSVCLoad.setDescription('Bit mask for loading Frame Relay SVC software on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfAOTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 81), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAOTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAOTLoad.setDescription('Bit mask for loading AOT signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfNATLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 82), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNATLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNATLoad.setDescription('Bit mask for loading NAT signaling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfFRPTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 83), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFRPTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFRPTLoad.setDescription('Bit mask for loading Frame Relay PVC Passthru on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfHttpSrvLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 84), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHttpSrvLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHttpSrvLoad.setDescription('Bit mask for loading the HTTP Server on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfStacLZSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 85), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStacLZSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfStacLZSLoad.setDescription('Bit mask for loading the Stac LZS control gate on slots 1-14. The MSBit represents slot 1, and so forth.')
wfASRLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 86), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfASRLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfASRLoad.setDescription('Bit mask for loading ASR signalling on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfNHRPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 87), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNHRPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNHRPLoad.setDescription('Bit mask for loading NHRP on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfAHBLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 88), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAHBLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAHBLoad.setDescription('Bit mask for loading AHB on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfL2TPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 89), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPLoad.setDescription('Bit mask for loading L2TP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfISDBLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 90), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfISDBLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfISDBLoad.setDescription('Bit mask for loading ISDB on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfVCCTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 91), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVCCTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfVCCTLoad.setDescription('Bit mask for loading VCCT on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMpsLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 92), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMpsLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfMpsLoad.setDescription('Bit mask for loading MPOA Server on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfTAG1QLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 93), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTAG1QLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfTAG1QLoad.setDescription('Bit mask for loading TAG1Q (802.1q) on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMpcLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 94), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMpcLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfMpcLoad.setDescription('Bit mask for loading MPOA Client on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDVSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 95), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDVSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDVSLoad.setDescription('Bit mask for loading DVS on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfVRRPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 96), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVRRPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfVRRPLoad.setDescription('Bit mask for loading VRRP on slots 1-14. The MSBit represents slot 1, and so forth.')
wfDHCPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 97), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDHCPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDHCPLoad.setDescription('Bit mask for loading DHCP on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfCAPILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 98), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCAPILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfCAPILoad.setDescription('Bit mask for loading CAPI on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfIPSECLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 99), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIPSECLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIPSECLoad.setDescription('Bit mask for loading IPSec on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMplsLdpLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 100), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsLdpLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfMplsLdpLoad.setDescription('Bit mask for loading MPLS LDP module on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMplsMlmLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 101), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsMlmLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfMplsMlmLoad.setDescription('Bit mask for loading MPLS MLM module on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfBacPktGenLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 102), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBacPktGenLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfBacPktGenLoad.setDescription('Bit mask for loading Bac PktGen on slot 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfIISISLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 103), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIISISLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIISISLoad.setDescription('Bit mask for loading IISIS on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfCopsCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 104), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCopsCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfCopsCLoad.setDescription('Bit mask for loading COPS Client on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDiffServLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 105), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDiffServLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDiffServLoad.setDescription('Bit mask for loading DiffServ on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfIKELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 106), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIKELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIKELoad.setDescription('Bit mask for loading Internet Key Exchange(IKE) module on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDsqmsProxyLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 1, 107), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsqmsProxyLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsqmsProxyLoad.setDescription('Bit mask for loading DSQMS Proxy on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfLinkModules = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 2, 2))
wfENETIILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfENETIILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfENETIILoad.setDescription('Bit mask for loading the Ethernet II driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfQENETLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfQENETLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfQENETLoad.setDescription('Bit mask for loading the Quad Ethernet driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfFDDILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFDDILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFDDILoad.setDescription('Bit mask for loading the FDDI driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfDSDELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDSDELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDSDELoad.setDescription('Bit mask for loading the Dual Sync - Dual Enet driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDSDEIILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDSDEIILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDSDEIILoad.setDescription('Bit mask for loading the Dual Sync - Dual Enet II driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfQSYNCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfQSYNCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfQSYNCLoad.setDescription('Bit mask for loading the Quad Sync driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDTLoad.setDescription('Bit mask for loading the Dual Token driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfDSTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDSTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDSTLoad.setDescription('Bit mask for loading the DST driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfT1IILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfT1IILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfT1IILoad.setDescription('Bit mask for loading the T1 II driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfE1IILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfE1IILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfE1IILoad.setDescription('Bit mask for loading the E1 II driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfHSSILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHSSILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHSSILoad.setDescription('Bit mask for loading the HSSI driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfFNSDSELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFNSDSELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFNSDSELoad.setDescription('Bit mask for loading the FNSDSE driver on slot 2 (FNES Only). The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfFNSDSDTLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFNSDSDTLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFNSDSDTLoad.setDescription('Bit mask for loading the FNSDSDT driver on slot 2 (FNTS Only). The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfMCT1Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMCT1Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfMCT1Load.setDescription('Bit mask for loading the MCT1 driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfANLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfANLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfANLoad.setDescription('Bit mask for loading the AN (AccessNode) driver. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfFNSDSETLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFNSDSETLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFNSDSETLoad.setDescription('Bit mask for loading the FNSDSET (ie. Fibermux IN Special) driver on slot 2 (IN Only). The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfMCT1E1Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMCT1E1Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfMCT1E1Load.setDescription('Bit mask for loading the MCT1/E1 driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfEFDDILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfEFDDILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfEFDDILoad.setDescription('Bit mask for loading the EFDDI (ie. QENET/FDDI LANNET IN) module driver on slot 2 (IN Only).')
wfHLSLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHLSLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHLSLoad.setDescription('Bit mask for loading the Hughes LAN Systems Module driver on slot 2 (IN Only).')
wfChipcomLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfChipcomLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfChipcomLoad.setDescription('Bit mask for loading the Chipcom Module driver on slot 2 (IN Only).')
wfAtmcLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmcLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAtmcLoad.setDescription('Bit mask for loading the ATMC driver on the ARE in slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfHDWANLMLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHDWANLMLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHDWANLMLoad.setDescription('Bit mask for loading the hdwanlm module driver on slots 1-14')
wfDE100Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDE100Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfDE100Load.setDescription('Bit mask for loading the DE100 (dual ethernet 100 MB) driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfAtmc5000Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmc5000Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfAtmc5000Load.setDescription('Bit mask for loading the ATMC 5000 AH driver on the ARE in slots 1-14. slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfArnLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfArnLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfArnLoad.setDescription('Bit mask for loading the ARN Common Module driver. This is a single slot system so only the MSBit is supported.')
wfFntsLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsLoad.setDescription('Bit mask for loading the Fnts Module driver on slot 2 (IN Only).')
wfSQE100Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSQE100Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfSQE100Load.setDescription('Bit mask for loading the 100MB Ethernet Module driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfGigEnetLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfGigEnetLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfGigEnetLoad.setDescription('Bit mask for loading the Gigabit Ethernet Module driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfFBRLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 2, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFBRLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFBRLoad.setDescription('Bit mask for loading the FBR Common Module driver. This is a single slot system so only the MSBit is supported.')
wfDrivers = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 2, 3))
wfLANCELoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLANCELoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfLANCELoad.setDescription('Bit mask for loading the LANCE chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfILACCLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfILACCLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfILACCLoad.setDescription('Bit mask for loading the ILACC chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfFSILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFSILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFSILoad.setDescription('Bit mask for loading the FDDI System Interface (FSI) chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth. This attribute shall be used to configure the FSI chip driver on the appropriate slots for FDDI only (see wfHSSIFSILoad for other usage).')
wfTMS380Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTMS380Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfTMS380Load.setDescription('Bit mask for loading the TMS380 chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfMK5025Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMK5025Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfMK5025Load.setDescription('Bit mask for loading the MK5025 chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfDS2180Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDS2180Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfDS2180Load.setDescription('Bit mask for loading the DS2180 chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfDS2181Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDS2181Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfDS2181Load.setDescription('Bit mask for loading the DS2181 chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth.')
wfDEFALoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDEFALoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDEFALoad.setDescription('Bit mask for loading the AM99C10 chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2 and so forth. The AM99C10 chip is Content Addressable Memory (CAM) and the driver to control it is represented by this attribute. The generic name of this attribute shall be the Hardware Filter Driver which will also provide control of the Dual Ethernet Filter Accelerator (DEFA) chip.')
wfAMZ8530Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAMZ8530Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfAMZ8530Load.setDescription('Bit mask for loading the AMZ8530 chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfHSSIFSILoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHSSIFSILoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHSSIFSILoad.setDescription('Bit mask for loading the HSSI FSI chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMUNICHT1Load = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMUNICHT1Load.setStatus('mandatory')
if mibBuilder.loadTexts: wfMUNICHT1Load.setDescription('Bit mask for loading the MUNICH chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth. The MUNICH chip is used on the MCT1 and MCE1 link modules')
wfQsccSyncLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfQsccSyncLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfQsccSyncLoad.setDescription('Bit mask for loading the Sync QUICC chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfQsccEnetLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfQsccEnetLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfQsccEnetLoad.setDescription('Bit mask for loading the Ethernet QUICC chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfMunichLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMunichLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfMunichLoad.setDescription('Bit mask for loading the T1/E1 MUNICH chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth. The MUNICH chip is used on the MCT1 and MCE1 link modules')
wfHilanceLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHilanceLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHilanceLoad.setDescription('Bit mask for loading the Hilance driver for the ASN on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfAtmAlcLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmAlcLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAtmAlcLoad.setDescription('Bit mask for loading the ATM Link Module driver for the FRE-2 on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfRptrLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRptrLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRptrLoad.setDescription('Bit mask for loading the AN 802.3 driver on slot 1 - MSB represents slot 1 - Only valid slot')
wfIsacLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsacLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsacLoad.setDescription('Bit mask for loading the ISAC D Channel chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfAtmizerLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfAtmizerLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfAtmizerLoad.setDescription('Bit mask for loading the ATMizer driver for the ARE on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfNSC100MLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNSC100MLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfNSC100MLoad.setDescription('Bit mask for loading the National Semiconductor DP83810 driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfDCMMWLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMMWLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMMWLoad.setDescription('Bit mask for loading the DCMMW on slot 1. The MSBit represents slot 1.')
wfHwCompLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfHwCompLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfHwCompLoad.setDescription('Bit mask for loading the Hardware Compression driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfRAEsaLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRAEsaLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRAEsaLoad.setDescription('Bit mask for loading RAESA on slots 1-14. The MSBit represents slot 1, and so forth.')
wfFntsAtmLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfFntsAtmLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfFntsAtmLoad.setDescription('Bit mask for loading the Fnts Atm driver for the FNTS on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfRMONStatLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfRMONStatLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfRMONStatLoad.setDescription('Bit mask for loading RMONSTAT on slot 1. The MSBit represents slot 1.')
wfSEEQ100MLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSEEQ100MLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSEEQ100MLoad.setDescription('Bit mask for loading the SEEQ 100MB Ethernet driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfSeeqGigLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSeeqGigLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfSeeqGigLoad.setDescription('Bit mask for loading the SEEQ Gigabit Ethernet driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represents slot 2, and so forth.')
wfPQ2EnetLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 28), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPQ2EnetLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPQ2EnetLoad.setDescription('Bit mask for loading PQ2 Enet on slot 1. The MSBit represents slot 1.')
wfTdmManagerLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 29), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTdmManagerLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfTdmManagerLoad.setDescription('Bit mask for loading TDM Manager on slot 1. The MSBit represents slot 1.')
wfPQ2DsyncLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 30), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPQ2DsyncLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfPQ2DsyncLoad.setDescription('Bit mask for loading DSYNC PMC driver on slot 1. The MSBit represents slot 1.')
wfVoIPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 31), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVoIPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfVoIPLoad.setDescription('Bit mask for loading T1/E1 DUAL PMC driver on slot 1. The MSBit represents slot 1.')
wfQsccVoIPLoad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 2, 3, 32), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfQsccVoIPLoad.setStatus('mandatory')
if mibBuilder.loadTexts: wfQsccVoIPLoad.setDescription('Bit mask for loading the VoIP QUICC chip driver on slots 1-14. The MSBit represents slot 1, the next most significant bit represent s slot 2, and so forth.')
mibBuilder.exportSymbols("Wellfleet-LOADER-MIB", wfFNSDSELoad=wfFNSDSELoad, wfRipv6Load=wfRipv6Load, wfGigEnetLoad=wfGigEnetLoad, wfOSILoad=wfOSILoad, wfMplsMlmLoad=wfMplsMlmLoad, wfLNMLoad=wfLNMLoad, wfTCPLoad=wfTCPLoad, wfISDNLoad=wfISDNLoad, wfNLSPLoad=wfNLSPLoad, wfFBRLoad=wfFBRLoad, wfBOTLoad=wfBOTLoad, wfPPPLoad=wfPPPLoad, wfSNMPLoad=wfSNMPLoad, wfDHCPLoad=wfDHCPLoad, wfDS2180Load=wfDS2180Load, wfTMS380Load=wfTMS380Load, wfMunichLoad=wfMunichLoad, wfVoIPLoad=wfVoIPLoad, wfHLSLoad=wfHLSLoad, wfSt2Load=wfSt2Load, wfTFTPLoad=wfTFTPLoad, wfSDLCLoad=wfSDLCLoad, wfANLoad=wfANLoad, wfFNSDSDTLoad=wfFNSDSDTLoad, wfBGPLoad=wfBGPLoad, wfVRRPLoad=wfVRRPLoad, wfIKELoad=wfIKELoad, wfENETIILoad=wfENETIILoad, wfTelnetLoad=wfTelnetLoad, wfOSPFLoad=wfOSPFLoad, wfTNCLoad=wfTNCLoad, wfIPv6Load=wfIPv6Load, wfRptrLoad=wfRptrLoad, wfLLC2Load=wfLLC2Load, wfAtmc5000Load=wfAtmc5000Load, wfFRSWLoad=wfFRSWLoad, wfQsccVoIPLoad=wfQsccVoIPLoad, wfMCT1Load=wfMCT1Load, wfSeeqGigLoad=wfSeeqGigLoad, wfXNSLoad=wfXNSLoad, wfArnLoad=wfArnLoad, wfWepLoad=wfWepLoad, wfSWSMDSLoad=wfSWSMDSLoad, wfDrivers=wfDrivers, wfPQ2DsyncLoad=wfPQ2DsyncLoad, wfFRLoad=wfFRLoad, wfScmIpcLoad=wfScmIpcLoad, wfIPSECLoad=wfIPSECLoad, wfCopsCLoad=wfCopsCLoad, wfAHBLoad=wfAHBLoad, wfATMAsmLoad=wfATMAsmLoad, wfTdmManagerLoad=wfTdmManagerLoad, wfSYSLLoad=wfSYSLLoad, wfATMMcsLoad=wfATMMcsLoad, wfRREDUNDLoad=wfRREDUNDLoad, wfRSVPLoad=wfRSVPLoad, wfBacPktGenLoad=wfBacPktGenLoad, wfLinkModules=wfLinkModules, wfSWPROXYLoad=wfSWPROXYLoad, wfPQ2EnetLoad=wfPQ2EnetLoad, wfDSDEIILoad=wfDSDEIILoad, wfATMCsLoad=wfATMCsLoad, wfIPXLoad=wfIPXLoad, wfDLSLoad=wfDLSLoad, wfIPEXLoad=wfIPEXLoad, wfCAPILoad=wfCAPILoad, wfAtmAlcLoad=wfAtmAlcLoad, wfDVSLoad=wfDVSLoad, wfAtmizerLoad=wfAtmizerLoad, wfFTPLoad=wfFTPLoad, wfIpSwitchLoad=wfIpSwitchLoad, wfAPPNCpLoad=wfAPPNCpLoad, wfDvmrpLoad=wfDvmrpLoad, wfPingLoad=wfPingLoad, wfDS2181Load=wfDS2181Load, wfRMONStatLoad=wfRMONStatLoad, wfProtocols=wfProtocols, wfATLoad=wfATLoad, wfLAPBLoad=wfLAPBLoad, wfSTATSLoad=wfSTATSLoad, wfAMZ8530Load=wfAMZ8530Load, wfATMLoad=wfATMLoad, wfDsqmsProxyLoad=wfDsqmsProxyLoad, wfFntsAtmLoad=wfFntsAtmLoad, wfMplsLdpLoad=wfMplsLdpLoad, wfIISISLoad=wfIISISLoad, wfHilanceLoad=wfHilanceLoad, wfAOTLoad=wfAOTLoad, wfChipcomLoad=wfChipcomLoad, wfDECNETLoad=wfDECNETLoad, wfLANCELoad=wfLANCELoad, wfSQE100Load=wfSQE100Load, wfVINESLoad=wfVINESLoad, wfNPTLoad=wfNPTLoad, wfPimLoad=wfPimLoad, wfBGPRSLoad=wfBGPRSLoad, wfAPPNLsLoad=wfAPPNLsLoad, wfX25DCELoad=wfX25DCELoad, wfQSYNCLoad=wfQSYNCLoad, wfHDWANLMLoad=wfHDWANLMLoad, wfConvStrLoad=wfConvStrLoad, wfMpsLoad=wfMpsLoad, wfNBASELoad=wfNBASELoad, wfTAG1QLoad=wfTAG1QLoad, wfLMLoad=wfLMLoad, wfEFDDILoad=wfEFDDILoad, wfDTLoad=wfDTLoad, wfNBIPLoad=wfNBIPLoad, wfFRSVCLoad=wfFRSVCLoad, wfAtmcLoad=wfAtmcLoad, wfX25DTELoad=wfX25DTELoad, wfHSSILoad=wfHSSILoad, wfNSC100MLoad=wfNSC100MLoad, wfVCCTLoad=wfVCCTLoad, wfATMLeLoad=wfATMLeLoad, wfLBCLoad=wfLBCLoad, wfMpcLoad=wfMpcLoad, wfQsccSyncLoad=wfQsccSyncLoad, wfEGPLoad=wfEGPLoad, wfDEFALoad=wfDEFALoad, wfNATLoad=wfNATLoad, wfMUNICHT1Load=wfMUNICHT1Load, wfT1IILoad=wfT1IILoad, wfE1IILoad=wfE1IILoad, wfPktCaptureLoad=wfPktCaptureLoad, wfFSILoad=wfFSILoad, wfSEEQ100MLoad=wfSEEQ100MLoad, wfHttpSrvLoad=wfHttpSrvLoad, wfS5ChasLoad=wfS5ChasLoad, wfFRSWCNGCLoad=wfFRSWCNGCLoad, wfMCT1E1Load=wfMCT1E1Load, wfStacLZSLoad=wfStacLZSLoad, wfDNSLoad=wfDNSLoad, wfCPMLoad=wfCPMLoad, wfL2TPLoad=wfL2TPLoad, wfMK5025Load=wfMK5025Load, wfDebugLoad=wfDebugLoad, wfNHRPLoad=wfNHRPLoad, wfHwCompLoad=wfHwCompLoad, wfDSDELoad=wfDSDELoad, wfRCMDSLoad=wfRCMDSLoad, wfNTPLoad=wfNTPLoad, wfMOSPFLoad=wfMOSPFLoad, wfPortMtxLoad=wfPortMtxLoad, wfHSSIFSILoad=wfHSSIFSILoad, wfFDDILoad=wfFDDILoad, wfATMSigLoad=wfATMSigLoad, wfDCMMWLoad=wfDCMMWLoad, wfFRPTLoad=wfFRPTLoad, wfDiffServLoad=wfDiffServLoad, wfQENETLoad=wfQENETLoad, wfQsccEnetLoad=wfQsccEnetLoad, wfARPLoad=wfARPLoad, wfDE100Load=wfDE100Load, wfWcpLoad=wfWcpLoad, wfISDBLoad=wfISDBLoad, wfSMDSLoad=wfSMDSLoad, wfASRLoad=wfASRLoad, wfILACCLoad=wfILACCLoad, wfIsacLoad=wfIsacLoad, wfIgmpLoad=wfIgmpLoad, wfFNSDSETLoad=wfFNSDSETLoad, wfRADIUSLoad=wfRADIUSLoad, wfRAEsaLoad=wfRAEsaLoad, wfIPROTOLoad=wfIPROTOLoad, wfDSTLoad=wfDSTLoad, wfCRMLoad=wfCRMLoad, wfFntsLoad=wfFntsLoad, wfRARPLoad=wfRARPLoad, wfWPROXYLoad=wfWPROXYLoad, wfBAYSIGLoad=wfBAYSIGLoad)
