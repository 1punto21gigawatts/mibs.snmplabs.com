#
# PySNMP MIB module CCTEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CCTEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
cctExt, = mibBuilder.importSymbols("APENT-MIB", "cctExt")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter32, Gauge32, TimeTicks, Bits, Integer32, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter32", "Gauge32", "TimeTicks", "Bits", "Integer32", "MibIdentifier", "IpAddress")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
apCctExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2467, 1, 29, 1))
if mibBuilder.loadTexts: apCctExtMib.setLastUpdated('9710092000Z')
if mibBuilder.loadTexts: apCctExtMib.setOrganization('ArrowPoint Communications Inc.')
if mibBuilder.loadTexts: apCctExtMib.setContactInfo(' Postal: ArrowPoint Communications Inc. 50 Nagog Park Acton, Massachusetts 01720 Tel: +1 978-206-3000 option 1 E-Mail: support@arrowpoint.com')
if mibBuilder.loadTexts: apCctExtMib.setDescription('The MIB module used to describe the ArrowPoint Communications Circuit information')
apCctTable = MibTable((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2), )
if mibBuilder.loadTexts: apCctTable.setStatus('current')
if mibBuilder.loadTexts: apCctTable.setDescription('A list of information for the specified circuit.')
apCctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1), ).setIndexNames((0, "CCTEXT-MIB", "apCctIfIndex"))
if mibBuilder.loadTexts: apCctEntry.setStatus('current')
if mibBuilder.loadTexts: apCctEntry.setDescription('A group of information to uniquely identify a circuit.')
apCctIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCctIfIndex.setStatus('current')
if mibBuilder.loadTexts: apCctIfIndex.setDescription('The unique if Index assigned to this circuit.')
apCctName = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCctName.setStatus('current')
if mibBuilder.loadTexts: apCctName.setDescription('The name of the circuit auto-generated by Circuit manager.')
apCctDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctDescription.setStatus('current')
if mibBuilder.loadTexts: apCctDescription.setDescription('The user defined description string associated with the circuit')
apCctIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 18, 22, 23, 30, 32, 81, 82, 108, 1000, 1001))).clone(namedValues=NamedValues(("ethernet", 6), ("ds1", 18), ("console", 22), ("ppp", 23), ("ds3", 30), ("frameRelay", 32), ("ds0", 81), ("ds0Bundle", 82), ("pppMultilink", 108), ("tunnel", 1000), ("vlan", 1001)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCctIfType.setStatus('current')
if mibBuilder.loadTexts: apCctIfType.setDescription('The interface type of this circuit.')
apCctState = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down-ipDisabled", 0), ("active-ipDisabled", 1), ("down-ipEnabled", 2), ("active-ipEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCctState.setStatus('current')
if mibBuilder.loadTexts: apCctState.setDescription('The state of the circuit. Circuit is active if it has one or more active ports associated with it.')
apCctLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCctLinkCount.setStatus('current')
if mibBuilder.loadTexts: apCctLinkCount.setDescription('The number of logical links configured on this circuit.')
apCctAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctAclIndex.setStatus('current')
if mibBuilder.loadTexts: apCctAclIndex.setDescription('The ACL which is currently in use on the circuit.')
apCctL2Redundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctL2Redundancy.setStatus('current')
if mibBuilder.loadTexts: apCctL2Redundancy.setDescription('If enabled, this switch is configured to provide redundancy for this circuit with another switch. Only the active switch will actually receive and forward traffic; the second will be a hot backup.')
apCctIrdpUseLimitedBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctIrdpUseLimitedBcast.setStatus('current')
if mibBuilder.loadTexts: apCctIrdpUseLimitedBcast.setDescription('Enable/disable the use of the limited broadcast address 255.255.255.255 for the transmission of router discovery packets. Default is false (use multicast address 224.0.0.1). This parameter has no meaning if the link does not support multicast (255.255.255.255 will be used).')
apCctIrdpMaxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctIrdpMaxInterval.setStatus('current')
if mibBuilder.loadTexts: apCctIrdpMaxInterval.setDescription('Maximum interval between advertisements (seconds). Default is 600 seconds.')
apCctIrdpMinInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctIrdpMinInterval.setStatus('current')
if mibBuilder.loadTexts: apCctIrdpMinInterval.setDescription('Minimum interval between advertisements (seconds). Default (0) means use 0.75 times max. If non-zero, this value must be less than apCctIrdpMax.')
apCctIrdpLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2467, 1, 29, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCctIrdpLifetime.setStatus('current')
if mibBuilder.loadTexts: apCctIrdpLifetime.setDescription('Value placed in the lifetime field of a router advertisement. Default (0) means use 3 times the max. If non-zero, this value must be greater than apCctIrdpMax.')
mibBuilder.exportSymbols("CCTEXT-MIB", apCctDescription=apCctDescription, apCctIfIndex=apCctIfIndex, apCctEntry=apCctEntry, apCctLinkCount=apCctLinkCount, apCctIrdpUseLimitedBcast=apCctIrdpUseLimitedBcast, apCctIrdpMinInterval=apCctIrdpMinInterval, PYSNMP_MODULE_ID=apCctExtMib, apCctIrdpMaxInterval=apCctIrdpMaxInterval, apCctExtMib=apCctExtMib, apCctAclIndex=apCctAclIndex, apCctState=apCctState, apCctL2Redundancy=apCctL2Redundancy, apCctIfType=apCctIfType, apCctTable=apCctTable, apCctIrdpLifetime=apCctIrdpLifetime, apCctName=apCctName)
