#
# PySNMP MIB module BDCOM-FLASH (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-FLASH
# Produced by pysmi-0.3.4 at Wed May  1 11:36:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
bdlocal, = mibBuilder.importSymbols("BDCOM-SMI", "bdlocal")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, Unsigned32, Gauge32, TimeTicks, IpAddress, ModuleIdentity, MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Unsigned32", "Gauge32", "TimeTicks", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Integer32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bdlflash = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 2, 10))
bdflashSize = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashSize.setDescription('Total Size in Octets of Flash memory')
bdflashFree = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashFree.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashFree.setDescription('Unused Size in Octets of Flash memory')
bdflashController = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashController.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashController.setDescription('Provides the type of Flash controller (either CCTL or CCTL2) installed in the router.')
bdflashCard = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashCard.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashCard.setDescription('Provides the type of Flash Card installed in the router. For example, the type of Flash Card could be either CSC-MS or CSC-MC+.')
bdflashVPP = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashVPP.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashVPP.setDescription('State of the VPP DIP jumper on the Flash memory card. Files can be written to the Flash memory card only if the VPP DIP jumper is turned on.')
bdflashErase = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdflashErase.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashErase.setDescription('Request to erase flash memory')
bdflashEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashEraseTime.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashEraseTime.setDescription('Indicates the value of sysUptime the last time Flash memory was erased. If the flash had not been erased after powerup it has a value of 0 days 00:00:00.')
bdflashEraseStatus = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashEraseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashEraseStatus.setDescription('Status of current or last flash erasing')
bdflashToNet = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 9), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdflashToNet.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashToNet.setDescription('Write flash entry to tftp server. Value should be the name of the flash entry to send. Instance is the IP address of the tftp host.')
bdflashToNetTime = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashToNetTime.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashToNetTime.setDescription('Indicates the value of sysUpTime the last time a file was transfered from Flash memory on the router to a TFTP host. Returns 0 days 00:00:00 if there had been no transfer since powerup.')
bdflashToNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashToNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashToNetStatus.setDescription('Status of current or last flash to net transfer')
bdnetToFlash = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 12), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bdnetToFlash.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetToFlash.setDescription('Write flash entry from tftp server. Value should be the name of the flash entry to write. Instance is the IP address of the tftp host.')
bdnetToFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdnetToFlashTime.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetToFlashTime.setDescription('Indicates the value of sysUpTime the last time file was copied from a Trivial File Transfer Protocol(TFTP) server to the Flash memory on the router. Returns 0 days 00:00:00 if there had been no transfers since powerup.')
bdnetToFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdnetToFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bdnetToFlashStatus.setDescription('Status of current or last net to flash transfer')
bdflashStatus = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashStatus.setDescription('Status of the availability of flash')
bdflashEntries = MibScalar((1, 3, 6, 1, 4, 1, 3320, 2, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashEntries.setDescription('Number of entries in the flash directory')
bdlflashFileDirTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 10, 17), )
if mibBuilder.loadTexts: bdlflashFileDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: bdlflashFileDirTable.setDescription(' A list of flash file entries.')
bdlflashFileDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 10, 17, 1), ).setIndexNames((0, "BDCOM-FLASH", "flashEntries"))
if mibBuilder.loadTexts: bdlflashFileDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bdlflashFileDirEntry.setDescription('A collection of flash eprom objects')
bdflashDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashDirName.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashDirName.setDescription('Name associated with the flash entry')
bdflashDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashDirSize.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashDirSize.setDescription('Size in Octets of a flash entry')
bdflashDirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdflashDirStatus.setStatus('mandatory')
if mibBuilder.loadTexts: bdflashDirStatus.setDescription('Indicates the status of the entry')
mibBuilder.exportSymbols("BDCOM-FLASH", bdflashVPP=bdflashVPP, bdflashEraseTime=bdflashEraseTime, bdflashSize=bdflashSize, bdflashDirStatus=bdflashDirStatus, bdlflashFileDirEntry=bdlflashFileDirEntry, bdflashEntries=bdflashEntries, bdflashToNet=bdflashToNet, bdflashEraseStatus=bdflashEraseStatus, bdflashFree=bdflashFree, bdlflash=bdlflash, bdflashCard=bdflashCard, bdflashController=bdflashController, bdnetToFlashStatus=bdnetToFlashStatus, bdnetToFlashTime=bdnetToFlashTime, bdflashDirName=bdflashDirName, bdlflashFileDirTable=bdlflashFileDirTable, bdflashStatus=bdflashStatus, bdflashToNetStatus=bdflashToNetStatus, bdflashDirSize=bdflashDirSize, bdflashErase=bdflashErase, bdflashToNetTime=bdflashToNetTime, bdnetToFlash=bdnetToFlash)
