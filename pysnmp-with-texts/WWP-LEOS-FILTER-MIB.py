#
# PySNMP MIB module WWP-LEOS-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, MibIdentifier, ObjectIdentity, Unsigned32, Integer32, IpAddress, ModuleIdentity, iso, Bits, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Integer32", "IpAddress", "ModuleIdentity", "iso", "Bits", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
wwpModulesLeos, wwpModules = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos", "wwpModules")
wwpLeosFilterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15))
wwpLeosFilterMIB.setRevisions(('2006-02-17 18:45', '2003-01-15 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosFilterMIB.setRevisionsDescriptions(('wwpLeosFilterProtocolType - IP protocol field is 8 bits, restrict syntax range to 0-255.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosFilterMIB.setLastUpdated('200602171830Z')
if mibBuilder.loadTexts: wwpLeosFilterMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpLeosFilterMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpLeosFilterMIB.setDescription('This MIB module defines the mgmt objects to support the protocol filtering on the WWP products.')
wwpLeosFilterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1))
wwpLeosFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1))
wwpLeosFilterMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 2))
wwpLeosFilterMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 2, 0))
wwpLeosFilterMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 3))
wwpLeosFilterMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 3, 1))
wwpLeosFilterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 3, 2))
wwpLeosFilterResources = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 1))
wwpLeosFilterMaxHardwareResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterMaxHardwareResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterMaxHardwareResources.setDescription('Specifies the maximum number of protocol filters resources this device supports.')
wwpLeosFilterUsedHardwareResources = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterUsedHardwareResources.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterUsedHardwareResources.setDescription('Specifies the total number of hardware filter resources currently used out of wwpLeosFilterMaxHardwareResources.')
wwpLeosFilterCreated = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterCreated.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterCreated.setDescription('The total number of filters currently created on the device.')
wwpLeosFilterCountersMax = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterCountersMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterCountersMax.setDescription('The total maximum number of counters supported on the device.')
wwpLeosFilterCountersUsed = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterCountersUsed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterCountersUsed.setDescription('The total number of counters currently used on the device.')
wwpLeosFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosFilterTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterTable.setDescription('The (conceptual) table listing the config parameters for the protocol filter.')
wwpLeosFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterIndex"))
if mibBuilder.loadTexts: wwpLeosFilterEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterEntry.setDescription('An entry (conceptual row) in the wwpLeosFilterTable.')
wwpLeosFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterIndex.setDescription('The index used in the table. It identifies the unique entry in the table.')
wwpLeosFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterName.setDescription('Specifies the name of the filter.')
wwpLeosFilterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterAdminState.setDescription('Specifies the admin state of the filter.')
wwpLeosFilterOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterOperState.setDescription('Specifies the operational state of the filter.')
wwpLeosFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterCounter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterCounter.setDescription('Specifies of counters for this filter need to be toggeled.')
wwpLeosFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'.")
wwpLeosFilterProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosFilterProtocolTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolTable.setDescription('The (conceptual) table listing the config parameters for the filter protocol table. Multiple Set operation must be performed on this table to create entries in the table. This table shows all protocols (standard and custom) protocols configured on the device.')
wwpLeosFilterProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterProtocolIndex"))
if mibBuilder.loadTexts: wwpLeosFilterProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolEntry.setDescription('An entry (conceptual row) in the wwpLeosFilterProtocolTable.')
wwpLeosFilterProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolIndex.setDescription('The protocol filter index used in the table. It uniquely identifies the entry in the wwpLeosFilterProtocolTable table.')
wwpLeosFilterProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterProtocolName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolName.setDescription('Specifies the name of the protocol filter.')
wwpLeosFilterProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterProtocolType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolType.setDescription('Specifies the protocol IP number associated with this entry.')
wwpLeosFilterProtocolSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterProtocolSrcPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolSrcPort.setDescription('Specifies the source port associated with this entry. If set to 0 means all ports.')
wwpLeosFilterProtocolDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterProtocolDstPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolDstPort.setDescription('Specifies the destination port associated with this entry. If set to 0 means all ports.')
wwpLeosFilterProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolStatus.setDescription("Used to manage the creation and deletion of the rows in this table. To create a row in this table, a manager must use multiple set operation to set all the following objects. wwpLeosFilterProtocolName, wwpLeosFilterProtocolIp, wwpLeosFilterProtocolSrcPort, wwpLeosFilterProtocolDstPort, wwpLeosFilterProtocolStatus. wwpLeosFilterProtocolStatus must be set to 'createandgo' to create entry. To delete and entry set this object to destroy.")
wwpLeosFilterMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosFilterMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterMemTable.setDescription('The table lists the config parameters for the filter membership table.')
wwpLeosFilterMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterIndex"), (0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterVlan"), (0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterPortId"))
if mibBuilder.loadTexts: wwpLeosFilterMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterMemEntry.setDescription('An entry (conceptual row) in the wwpLeosFilterMemTable.')
wwpLeosFilterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterVlan.setDescription('Specifies the vlan associated with this filter. It is also used as index in the table. if specified as 0 then it means all vlans.')
wwpLeosFilterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterPortId.setDescription('Specifies the port id associated with this filter. It is also used as index in the table. If wwpLeosFilterPortId is set to 0 then it means all ports.')
wwpLeosFilterMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterMemStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterMemStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'.")
wwpLeosFilterMemRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("allow", 2))).clone('block')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterMemRule.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterMemRule.setDescription('Specifies rule to apply to this filter-vlan-port member -- block traffic or allow traffic. This value has a default value of block')
wwpLeosFilterProtocolMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosFilterProtocolMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolMemTable.setDescription('The (conceptual) table listing the config parameters for the filter-protocol membership table.')
wwpLeosFilterProtocolMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterIndex"), (0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterProtocolIndex"))
if mibBuilder.loadTexts: wwpLeosFilterProtocolMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolMemEntry.setDescription('An entry (conceptual row) in the wwpLeosFilterProtocolMemTable.')
wwpLeosFilterProtocolMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFilterProtocolMemStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterProtocolMemStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy'.")
wwpLeosFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosFilterStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterStatsTable.setDescription('The (conceptual) table to view the stats of each filter entry.')
wwpLeosFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-FILTER-MIB", "wwpLeosFilterIndex"))
if mibBuilder.loadTexts: wwpLeosFilterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterStatsEntry.setDescription('An entry (conceptual row) in the wwpLeosFilterStatsTable.')
wwpLeosFilterDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 15, 1, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFilterDropBytes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFilterDropBytes.setDescription('The byte count dropped for this filter.')
mibBuilder.exportSymbols("WWP-LEOS-FILTER-MIB", wwpLeosFilterIndex=wwpLeosFilterIndex, wwpLeosFilterCountersUsed=wwpLeosFilterCountersUsed, wwpLeosFilterMIBConformance=wwpLeosFilterMIBConformance, wwpLeosFilterProtocolIndex=wwpLeosFilterProtocolIndex, wwpLeosFilterResources=wwpLeosFilterResources, wwpLeosFilterEntry=wwpLeosFilterEntry, wwpLeosFilterStatsEntry=wwpLeosFilterStatsEntry, wwpLeosFilter=wwpLeosFilter, PYSNMP_MODULE_ID=wwpLeosFilterMIB, wwpLeosFilterVlan=wwpLeosFilterVlan, wwpLeosFilterOperState=wwpLeosFilterOperState, wwpLeosFilterMIBGroups=wwpLeosFilterMIBGroups, wwpLeosFilterProtocolType=wwpLeosFilterProtocolType, wwpLeosFilterMemEntry=wwpLeosFilterMemEntry, wwpLeosFilterMIBObjects=wwpLeosFilterMIBObjects, wwpLeosFilterProtocolSrcPort=wwpLeosFilterProtocolSrcPort, wwpLeosFilterDropBytes=wwpLeosFilterDropBytes, wwpLeosFilterCountersMax=wwpLeosFilterCountersMax, wwpLeosFilterCounter=wwpLeosFilterCounter, wwpLeosFilterProtocolEntry=wwpLeosFilterProtocolEntry, wwpLeosFilterPortId=wwpLeosFilterPortId, wwpLeosFilterStatus=wwpLeosFilterStatus, wwpLeosFilterAdminState=wwpLeosFilterAdminState, wwpLeosFilterMaxHardwareResources=wwpLeosFilterMaxHardwareResources, wwpLeosFilterTable=wwpLeosFilterTable, wwpLeosFilterMemRule=wwpLeosFilterMemRule, wwpLeosFilterProtocolMemEntry=wwpLeosFilterProtocolMemEntry, wwpLeosFilterMIBNotificationPrefix=wwpLeosFilterMIBNotificationPrefix, wwpLeosFilterMIBCompliances=wwpLeosFilterMIBCompliances, wwpLeosFilterProtocolDstPort=wwpLeosFilterProtocolDstPort, wwpLeosFilterName=wwpLeosFilterName, wwpLeosFilterMIBNotifications=wwpLeosFilterMIBNotifications, wwpLeosFilterCreated=wwpLeosFilterCreated, wwpLeosFilterProtocolTable=wwpLeosFilterProtocolTable, wwpLeosFilterMIB=wwpLeosFilterMIB, wwpLeosFilterMemStatus=wwpLeosFilterMemStatus, wwpLeosFilterProtocolStatus=wwpLeosFilterProtocolStatus, wwpLeosFilterStatsTable=wwpLeosFilterStatsTable, wwpLeosFilterMemTable=wwpLeosFilterMemTable, wwpLeosFilterProtocolMemStatus=wwpLeosFilterProtocolMemStatus, wwpLeosFilterProtocolMemTable=wwpLeosFilterProtocolMemTable, wwpLeosFilterProtocolName=wwpLeosFilterProtocolName, wwpLeosFilterUsedHardwareResources=wwpLeosFilterUsedHardwareResources)
