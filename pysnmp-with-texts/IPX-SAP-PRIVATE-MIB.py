#
# PySNMP MIB module IPX-SAP-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPX-SAP-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:57:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
cjnIpxIfIndex, = mibBuilder.importSymbols("IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex")
NetNumber, ServiceType = mibBuilder.importSymbols("IPX-PRIVATE-MIB", "NetNumber", "ServiceType")
FilterPrec, = mibBuilder.importSymbols("IPX-RIP-PRIVATE-MIB", "FilterPrec")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, NotificationType, iso, ObjectIdentity, Unsigned32, IpAddress, ModuleIdentity, Gauge32, Bits, Integer32, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "NotificationType", "iso", "ObjectIdentity", "Unsigned32", "IpAddress", "ModuleIdentity", "Gauge32", "Bits", "Integer32", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
cjnIpxSap = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21))
if mibBuilder.loadTexts: cjnIpxSap.setLastUpdated('9904010000Z')
if mibBuilder.loadTexts: cjnIpxSap.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnIpxSap.setContactInfo('Marc Cochran -- mcochran@lucent.com')
if mibBuilder.loadTexts: cjnIpxSap.setDescription('Cajun IPX SAP Private MIB')
cjnIpxSapGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 1))
cjnIpxSapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxSapEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapEnabled.setDescription('Enable / Disable IPX SAP on this system.')
cjnIpxSapNameFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2))
cjnIpxSapNameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1), )
if mibBuilder.loadTexts: cjnIpxSapNameFilterTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterTable.setDescription('A list of Cajun IPX SAP name filters.')
cjnIpxSapNameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"), (0, "IPX-SAP-PRIVATE-MIB", "cjnIpxSapNameFilterPrec"))
if mibBuilder.loadTexts: cjnIpxSapNameFilterEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterEntry.setDescription('A Cajun IPX SAP name filter instance.')
cjnIpxSapNameFilterPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 1), FilterPrec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapNameFilterPrec.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterPrec.setDescription('The precedence of this SAP name filter. The precedence is relative to other SAP name filters on the same interface.')
cjnIpxSapNameFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNameFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxSapNameFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNameFilterName.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterName.setDescription('The service name which this filter matches. A single asterisk as the last character matches all service names which match all characters up to the asterisk.')
cjnIpxSapNameFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 4), ServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNameFilterType.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterType.setDescription('The service type which this filter matches. A value of ffff matches all service types.')
cjnIpxSapNameFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNameFilterDirection.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterDirection.setDescription('The direction of IPX SAP packets to which this filter applies. Inbound applies the filter only to SAP packets received on the interface. Outbound applies the filter only to SAP packets sent on the interface. Both applies the filter to SAP packets sent and received on the interface.')
cjnIpxSapNameFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("allow", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNameFilterAction.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterAction.setDescription('The action to take if this filter matches an IPX SAP entry. Filter causes the SAP entry to be ignored in received SAP packets or suppressed in sent SAP packets. Allow causes the SAP entry to be accepted in received SAP packets or advertised in sent SAP packets.')
cjnIpxSapNameFilterHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 2, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNameFilterHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNameFilterHops.setDescription('Used to override the hops to reach the service specified in the SAP entry.')
cjnIpxSapNetFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3))
cjnIpxSapNetFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1), )
if mibBuilder.loadTexts: cjnIpxSapNetFilterTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterTable.setDescription('A list of Cajun IPX SAP network filters.')
cjnIpxSapNetFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"), (0, "IPX-SAP-PRIVATE-MIB", "cjnIpxSapNetFilterPrec"))
if mibBuilder.loadTexts: cjnIpxSapNetFilterEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterEntry.setDescription('A Cajun IPX SAP network filter instance.')
cjnIpxSapNetFilterPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 1), FilterPrec()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterPrec.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterPrec.setDescription('The precedence of this SAP network filter. The precedence is relative to other SAP network filters on the same interface.')
cjnIpxSapNetFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxSapNetFilterNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 3), NetNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterNet.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterNet.setDescription('The IPX network number of the service which this filter matches. A value of ffffffff matches all service network numbers.')
cjnIpxSapNetFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 4), ServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterType.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterType.setDescription('The service type which this filter matches. A value of ffff matches all service types.')
cjnIpxSapNetFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterDirection.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterDirection.setDescription('The direction of IPX SAP packets to which this filter applies. Inbound applies the filter only to SAP packets received on the interface. Outbound applies the filter only to SAP packets sent on the interface. Both applies the filter to SAP packets sent and received on the interface.')
cjnIpxSapNetFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("allow", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterAction.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterAction.setDescription('The action to take if this filter matches an IPX SAP entry. Filter causes the SAP entry to be ignored in received SAP packets or suppressed in sent SAP packets. Allow causes the SAP entry to be accepted in received SAP packets or advertised in sent SAP packets.')
cjnIpxSapNetFilterHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 3, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapNetFilterHops.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapNetFilterHops.setDescription('Used to override the hops to reach the service specified in the SAP entry.')
cjnIpxSapIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4))
cjnIpxSapIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1), )
if mibBuilder.loadTexts: cjnIpxSapIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfTable.setDescription('A list of Cajun IPX SAP interface entries.')
cjnIpxSapIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"))
if mibBuilder.loadTexts: cjnIpxSapIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfEntry.setDescription('A Cajun IPX SAP interface instance.')
cjnIpxSapIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
cjnIpxSapIfInterpacketGap = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfInterpacketGap.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfInterpacketGap.setDescription('If set to enable(1), IPX SAP packets from periodic advertisements are sent with an interpacket gap of 55 milliseconds. If set to disable(2), no interpacket gap is used.')
cjnIpxSapIfUseMaximumPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfUseMaximumPacketSize.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfUseMaximumPacketSize.setDescription('If set to enable(1), IPX SAP packets will contain as many entries as will fit in the maximum packet size allowable on the interface given the configured encapsulation type. If set to disable(2), IPX SAP packets will contain at most 7 entries.')
cjnIpxSapIfUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 4), Integer32().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfUpdateInterval.setDescription('The SAP periodic update interval, in seconds.')
cjnIpxSapIfAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 5), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfAgeMultiplier.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfAgeMultiplier.setDescription('The holding multiplier for information received in SAP updates. SAP information will be kept for the number of seconds indicated by the cjnIpxSapIfUpdateInterval multiplied by the cjnIpxSapIfAgeMultiplier.')
cjnIpxSapIfTriggeredUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfTriggeredUpdates.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfTriggeredUpdates.setDescription('Specified whether or not SAP updates are immediately sent on the interface in response to changes in the routing table.')
cjnIpxSapIfGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfGetNearestServerReply.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfGetNearestServerReply.setDescription('Specifies whether or not SAP Get Nearest Server replies are sent on the interface.')
cjnIpxSapIfGetNearestServerReplyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfGetNearestServerReplyDelay.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfGetNearestServerReplyDelay.setDescription('Specifies the delay in milliseconds to wait before sending a SAP Get Nearest Server reply after receiving a SAP Get Nearest Server request.')
cjnIpxSapIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("talk", 1), ("listen", 2), ("both", 3))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpxSapIfMode.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfMode.setDescription('The handling of SAP packets on the interface. If set to talk(1), SAP packets may be sent on the interface but not received. If set to listen(2), SAP packets may be received but not sent. If set to both(3), SAP packets may be sent and received.')
cjnIpxSapIfStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5))
cjnIpxSapIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1), )
if mibBuilder.loadTexts: cjnIpxSapIfStatTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatTable.setDescription('A list of Cajun IPX SAP interface statistics entries.')
cjnIpxSapIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1), ).setIndexNames((0, "IPX-INTERFACE-MANAGEMENT-PRIVATE-MIB", "cjnIpxIfIndex"))
if mibBuilder.loadTexts: cjnIpxSapIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatEntry.setDescription('A Cajun IPX SAP interface statistics instance.')
cjnIpxSapIfStatTriggeredUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatTriggeredUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatTriggeredUpdatesSent.setDescription('The number of SAP triggered updates sent on the interface.')
cjnIpxSapIfStatPeriodicUpdatesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatPeriodicUpdatesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatPeriodicUpdatesSent.setDescription('The number of periodic SAP updates sent on the interface.')
cjnIpxSapIfStatGNSResponsesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatGNSResponsesSent.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatGNSResponsesSent.setDescription('The number of SAP Get Nearest Server responses sent on the interface.')
cjnIpxSapIfStatUpdatesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatUpdatesReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatUpdatesReceived.setDescription('The number of SAP updates received on the interface.')
cjnIpxSapIfStatRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatRequestsReceived.setDescription('The number of SAP requests received on the interface.')
cjnIpxSapIfStatGNSRequestsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatGNSRequestsReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatGNSRequestsReceived.setDescription('The number of SAP Get Nearest Server requests received on the interface.')
cjnIpxSapIfStatBadPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpxSapIfStatBadPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatBadPacketsReceived.setDescription('The number of incorrectly formatted SAP packets received on the interface.')
cjnIpxSapIfStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 21, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnIpxSapIfStatsReset.setStatus('current')
if mibBuilder.loadTexts: cjnIpxSapIfStatsReset.setDescription('When set to the value enable (1) all IPX SAP statistics for this interface are reset to zero after which the value of this MIB object returns to disable(2).')
mibBuilder.exportSymbols("IPX-SAP-PRIVATE-MIB", cjnIpxSapNameFilterDirection=cjnIpxSapNameFilterDirection, cjnIpxSapNameFilterEntry=cjnIpxSapNameFilterEntry, cjnIpxSapIfAgeMultiplier=cjnIpxSapIfAgeMultiplier, cjnIpxSapIfTriggeredUpdates=cjnIpxSapIfTriggeredUpdates, cjnIpxSapIfStatBadPacketsReceived=cjnIpxSapIfStatBadPacketsReceived, cjnIpxSapNetFilterGroup=cjnIpxSapNetFilterGroup, cjnIpxSapIfStatPeriodicUpdatesSent=cjnIpxSapIfStatPeriodicUpdatesSent, cjnIpxSapNetFilterTable=cjnIpxSapNetFilterTable, PYSNMP_MODULE_ID=cjnIpxSap, cjnIpxSapNameFilterAction=cjnIpxSapNameFilterAction, cjnIpxSapNetFilterEntry=cjnIpxSapNetFilterEntry, cjnIpxSapIfStatTriggeredUpdatesSent=cjnIpxSapIfStatTriggeredUpdatesSent, cjnIpxSapNameFilterGroup=cjnIpxSapNameFilterGroup, cjnIpxSapNetFilterType=cjnIpxSapNetFilterType, cjnIpxSapIfGetNearestServerReply=cjnIpxSapIfGetNearestServerReply, cjnIpxSapIfStatTable=cjnIpxSapIfStatTable, cjnIpxSapIfGetNearestServerReplyDelay=cjnIpxSapIfGetNearestServerReplyDelay, cjnIpxSapIfStatGroup=cjnIpxSapIfStatGroup, cjnIpxSapNetFilterPrec=cjnIpxSapNetFilterPrec, cjnIpxSapNameFilterPrec=cjnIpxSapNameFilterPrec, cjnIpxSapIfUseMaximumPacketSize=cjnIpxSapIfUseMaximumPacketSize, cjnIpxSapNetFilterDirection=cjnIpxSapNetFilterDirection, cjnIpxSapNameFilterTable=cjnIpxSapNameFilterTable, cjnIpxSapNetFilterAction=cjnIpxSapNetFilterAction, cjnIpxSapIfRowStatus=cjnIpxSapIfRowStatus, cjnIpxSapIfStatsReset=cjnIpxSapIfStatsReset, cjnIpxSapIfInterpacketGap=cjnIpxSapIfInterpacketGap, cjnIpxSapIfStatEntry=cjnIpxSapIfStatEntry, cjnIpxSapIfStatRequestsReceived=cjnIpxSapIfStatRequestsReceived, cjnIpxSapIfUpdateInterval=cjnIpxSapIfUpdateInterval, cjnIpxSapNetFilterRowStatus=cjnIpxSapNetFilterRowStatus, cjnIpxSapNetFilterNet=cjnIpxSapNetFilterNet, cjnIpxSapNameFilterType=cjnIpxSapNameFilterType, cjnIpxSapGlobalGroup=cjnIpxSapGlobalGroup, cjnIpxSapIfMode=cjnIpxSapIfMode, cjnIpxSapNetFilterHops=cjnIpxSapNetFilterHops, cjnIpxSapIfEntry=cjnIpxSapIfEntry, cjnIpxSapNameFilterRowStatus=cjnIpxSapNameFilterRowStatus, cjnIpxSapIfGroup=cjnIpxSapIfGroup, cjnIpxSapIfStatGNSResponsesSent=cjnIpxSapIfStatGNSResponsesSent, cjnIpxSapNameFilterHops=cjnIpxSapNameFilterHops, cjnIpxSap=cjnIpxSap, cjnIpxSapIfStatGNSRequestsReceived=cjnIpxSapIfStatGNSRequestsReceived, cjnIpxSapIfStatUpdatesReceived=cjnIpxSapIfStatUpdatesReceived, cjnIpxSapEnabled=cjnIpxSapEnabled, cjnIpxSapNameFilterName=cjnIpxSapNameFilterName, cjnIpxSapIfTable=cjnIpxSapIfTable)
