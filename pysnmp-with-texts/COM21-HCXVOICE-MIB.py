#
# PySNMP MIB module COM21-HCXVOICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXVOICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
com21Hcx, com21 = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Hcx", "com21")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, NotificationType, Counter64, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, MibIdentifier, Integer32, Gauge32, iso, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Counter64", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "MibIdentifier", "Integer32", "Gauge32", "iso", "Unsigned32", "TimeTicks")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
com21HcxVoice = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 100))
if mibBuilder.loadTexts: com21HcxVoice.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxVoice.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxVoice.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxVoice.setDescription('This is the Com21 ComController Oc3 MIB module. COM21 Part# 005-0025-00')
com21HcxVoiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 101))
com21HcxVpnRxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 102))
com21HcxVpnRxStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 103))
com21HcxStuVoiceChannelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 104))
com21HcxStuVoiceCallStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 105))
class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

hcxConfiguredVoiceChannels = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxConfiguredVoiceChannels.setStatus('current')
if mibBuilder.loadTexts: hcxConfiguredVoiceChannels.setDescription(' Defines the number of Voice Channels currently configured on the system.')
hcxActiveVoiceChannels = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxActiveVoiceChannels.setStatus('current')
if mibBuilder.loadTexts: hcxActiveVoiceChannels.setDescription(' Defines the number of Voice Channels that are currently active on the system.')
hcxVoiceChannelMode = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aLaw", 1), ("muLaw", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceChannelMode.setStatus('current')
if mibBuilder.loadTexts: hcxVoiceChannelMode.setDescription(' Defines the type of compression scheme to be used for voice. Default is aLaw.')
hcxVoiceOAMEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceOAMEnable.setStatus('current')
if mibBuilder.loadTexts: hcxVoiceOAMEnable.setDescription(" Defines whether OAM cells should be transmitted on voice VCC's when voice calls are idle. default: disable")
hcxVoiceFEndEchoCancEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceFEndEchoCancEnable.setStatus('current')
if mibBuilder.loadTexts: hcxVoiceFEndEchoCancEnable.setDescription(' Defines whether Far End Echo Cancellation should be enabled or not. Default: disable')
hcxVoiceRTTDelay = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceRTTDelay.setStatus('current')
if mibBuilder.loadTexts: hcxVoiceRTTDelay.setDescription(" Defines the Round Trip Transit Delay in milliseconds. This should be configured if 'hcxVoiceFEndEchoCancEnable' is enabled. Default: 0")
com21HcxVpnRxTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1), )
if mibBuilder.loadTexts: com21HcxVpnRxTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxVpnRxTable.setDescription('.')
com21HcxVpnRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxVpnRxNum"), (0, "COM21-HCXVOICE-MIB", "hcxVpnRxEntryId"))
if mibBuilder.loadTexts: com21HcxVpnRxEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxVpnRxEntry.setDescription('.')
hcxVpnRxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxNum.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxNum.setDescription(' Defines the Vpn Number. Used as Index.')
hcxVpnRxEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxEntryId.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxEntryId.setDescription(' Defines the Rx Group Id. Used as Index.')
hcxVpnRxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 3), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxVpnRxRowStatus.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxRowStatus.setDescription(' Used to create an Instance of Rx Group Id for a given VPN. Deactive is not allowed.')
hcxVpnRxMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVpnRxMaxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxMaxActiveCalls.setDescription(' Defines the maximum number of voice calls that should be allowed for this VPN on this Rx Group .')
com21HcxVpnRxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1), )
if mibBuilder.loadTexts: com21HcxVpnRxStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxVpnRxStatsTable.setDescription('.')
com21HcxVpnRxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxVpnRxStatsNum"), (0, "COM21-HCXVOICE-MIB", "hcxVpnRxStatsEntryId"))
if mibBuilder.loadTexts: com21HcxVpnRxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxVpnRxStatsEntry.setDescription('.')
hcxVpnRxStatsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsNum.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsNum.setDescription(' Defines the VPN value for which the stats are collected. Used as Index.')
hcxVpnRxStatsEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsEntryId.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsEntryId.setDescription(' Defines the Rx Group Number for which the stats are collected. Used as Index.')
hcxVpnRxStatsCurrCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsCurrCallsAllwd.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsCurrCallsAllwd.setDescription(' Defines the number of calls allowed in the given 15-min period for a ComPort on this Rx Group and on this VPN.')
hcxVpnRxStatsCurrCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsCurrCallsBlkd.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsCurrCallsBlkd.setDescription(' Defines the number of calls blocked in the given 15-min period for a ComPort on this Rx Group and on this VPN.')
hcxVpnRxStatsPrevCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsPrevCallsAllwd.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsPrevCallsAllwd.setDescription(' Defines the number of calls allowed in the previous 15-min period for a ComPort on this Rx Group and on this VPN.')
hcxVpnRxStatsPrevCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsPrevCallsBlkd.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsPrevCallsBlkd.setDescription(' Defines the number of calls blocked in the previous 15-min period for a ComPort on this Rx Group and on this VPN.')
hcxVpnRxStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVpnRxStatsClear.setStatus('current')
if mibBuilder.loadTexts: hcxVpnRxStatsClear.setDescription(' This attribute is used to clear all call statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
com21HcxStuVoiceChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1), )
if mibBuilder.loadTexts: com21HcxStuVoiceChannelTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuVoiceChannelTable.setDescription('.')
com21HcxStuVoiceChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxStuVoiceChannelMacAddr"), (0, "COM21-HCXVOICE-MIB", "hcxStuVoiceChannelNum"))
if mibBuilder.loadTexts: com21HcxStuVoiceChannelEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuVoiceChannelEntry.setDescription('.')
hcxStuVoiceChannelMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceChannelMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuVoiceChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceChannelNum.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelNum.setDescription(' Defines the voice channel on the Comport device used for Voice.')
hcxStuVoiceChannelVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceChannelVpi.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelVpi.setDescription(" Defines the VPI to use to connect the Comport's voice channel to the external device on the OC3 wan port. The 'hcxStuVoiceChannelVpi', 'hcxStuVoiceChannelVci' combination should form a unique VCC for each entry in 'com21HcxStuVoiceChannelTable'. Default is 0")
hcxStuVoiceChannelVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceChannelVci.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelVci.setDescription(" Defines the VCI to use to connect the Comport's voice channel to the external device on the OC3 wan port. The 'hcxStuVoiceChannelVpi', 'hcxStuVoiceChannelVci' combination should form a unique VCC for each entry in 'com21HcxStuVoiceChannelTable'. Default is 0")
hcxStuVoiceChannelPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 5), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxStuVoiceChannelPriStatus.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelPriStatus.setDescription(' Used to control Create, Activate/Deactivate, or Destroy a row. Activation/Deactivation of the row is not allowed if all writeable attributes do not have valid values. ')
hcxStuVoiceChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voiceChanIdle", 1), ("voiceChanActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceChannelState.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelState.setDescription(' Defines the current state of the port. voicePortActive indicates that the call is in progress ')
hcxStuVoiceChannelExtLpBk = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceChannelExtLpBk.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceChannelExtLpBk.setDescription(' If this attribute is enabled, the Oc3 Port will loopback all cells received on this VCC. The attribute cannot be enabled if voiceChannel is active, and if this attribute is enabled, voiceChannel will not be allowed to go active. default: disable.')
com21HcxStuVoiceCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1), )
if mibBuilder.loadTexts: com21HcxStuVoiceCallStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuVoiceCallStatsTable.setDescription('.')
com21HcxStuVoiceCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxStuVoiceCallStatsMacAddr"), (0, "COM21-HCXVOICE-MIB", "hcxStuVoiceCallStatsNum"))
if mibBuilder.loadTexts: com21HcxStuVoiceCallStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuVoiceCallStatsEntry.setDescription('.')
hcxStuVoiceCallStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallStatsMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuVoiceCallStatsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallStatsNum.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallStatsNum.setDescription(' Defines the voice channel on the Comport device used for Voice.')
hcxStuVoiceCallCurrInCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrInCallsAllwd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallCurrInCallsAllwd.setDescription(' Defines the number of Incoming calls allowed in the given 15-min time period. Incoming calls are calls being placed to this voice channel.')
hcxStuVoiceCallCurrOutCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrOutCallsAllwd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallCurrOutCallsAllwd.setDescription(' Defines the number of Outgoing calls allowed in the given 15-min time period. Outgoing calls are calls being placed by this voice channel.')
hcxStuVoiceCallCurrInCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrInCallsBlkd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallCurrInCallsBlkd.setDescription(' Defines the number of Incoming calls blocked in the given 15-min time period. Incoming calls are calls being placed to this voice channel.')
hcxStuVoiceCallCurrOutCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrOutCallsBlkd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallCurrOutCallsBlkd.setDescription(' Defines the number of Outgoing calls blocked in the given 15-min time period. Outgoing calls are calls being placed by this voice channel.')
hcxStuVoiceCallPrevInCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevInCallsAllwd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallPrevInCallsAllwd.setDescription(' Defines the number of Incoming calls allowed in the previous 15-min time period. Incoming calls are calls being placed to this voice channel.')
hcxStuVoiceCallPrevOutCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevOutCallsAllwd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallPrevOutCallsAllwd.setDescription(' Defines the number of Outgoing calls blocked in the previous 15-min time period. Outgoing calls are calls being placed by this voice channel.')
hcxStuVoiceCallPrevInCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevInCallsBlkd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallPrevInCallsBlkd.setDescription(' Defines the number of Incoming calls blocked in the previous 15-min time period. Incoming calls are calls being placed to this voice channel.')
hcxStuVoiceCallPrevOutCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevOutCallsBlkd.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallPrevOutCallsBlkd.setDescription(' Defines the number of Outgoing calls blocked in the previous 15-min time period. Outgoing calls are calls being placed by this voice channel.')
hcxStuVoiceCallStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceCallStatsClear.setStatus('current')
if mibBuilder.loadTexts: hcxStuVoiceCallStatsClear.setDescription(' This attribute is used to clear all the voice channel statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
mibBuilder.exportSymbols("COM21-HCXVOICE-MIB", hcxVpnRxRowStatus=hcxVpnRxRowStatus, com21HcxVoice=com21HcxVoice, com21HcxVoiceGroup=com21HcxVoiceGroup, com21HcxStuVoiceCallStatsGroup=com21HcxStuVoiceCallStatsGroup, hcxConfiguredVoiceChannels=hcxConfiguredVoiceChannels, hcxVpnRxStatsCurrCallsAllwd=hcxVpnRxStatsCurrCallsAllwd, hcxStuVoiceChannelVci=hcxStuVoiceChannelVci, hcxVpnRxStatsNum=hcxVpnRxStatsNum, hcxVpnRxStatsPrevCallsAllwd=hcxVpnRxStatsPrevCallsAllwd, hcxActiveVoiceChannels=hcxActiveVoiceChannels, hcxStuVoiceChannelPriStatus=hcxStuVoiceChannelPriStatus, hcxStuVoiceCallStatsNum=hcxStuVoiceCallStatsNum, PrimServiceState=PrimServiceState, hcxStuVoiceCallCurrInCallsAllwd=hcxStuVoiceCallCurrInCallsAllwd, Com21RowStatus=Com21RowStatus, hcxVoiceOAMEnable=hcxVoiceOAMEnable, hcxVpnRxNum=hcxVpnRxNum, hcxStuVoiceChannelMacAddr=hcxStuVoiceChannelMacAddr, com21HcxStuVoiceChannelTable=com21HcxStuVoiceChannelTable, hcxStuVoiceChannelExtLpBk=hcxStuVoiceChannelExtLpBk, com21HcxStuVoiceChannelEntry=com21HcxStuVoiceChannelEntry, hcxStuVoiceCallPrevOutCallsBlkd=hcxStuVoiceCallPrevOutCallsBlkd, hcxVpnRxStatsCurrCallsBlkd=hcxVpnRxStatsCurrCallsBlkd, hcxStuVoiceChannelNum=hcxStuVoiceChannelNum, com21HcxVpnRxGroup=com21HcxVpnRxGroup, com21HcxVpnRxStatsGroup=com21HcxVpnRxStatsGroup, hcxStuVoiceChannelVpi=hcxStuVoiceChannelVpi, PYSNMP_MODULE_ID=com21HcxVoice, com21HcxVpnRxStatsEntry=com21HcxVpnRxStatsEntry, hcxStuVoiceCallPrevInCallsAllwd=hcxStuVoiceCallPrevInCallsAllwd, hcxStuVoiceCallStatsMacAddr=hcxStuVoiceCallStatsMacAddr, hcxStuVoiceChannelState=hcxStuVoiceChannelState, hcxVpnRxStatsPrevCallsBlkd=hcxVpnRxStatsPrevCallsBlkd, hcxStuVoiceCallCurrOutCallsBlkd=hcxStuVoiceCallCurrOutCallsBlkd, hcxVpnRxStatsEntryId=hcxVpnRxStatsEntryId, hcxStuVoiceCallCurrInCallsBlkd=hcxStuVoiceCallCurrInCallsBlkd, hcxVoiceChannelMode=hcxVoiceChannelMode, hcxVoiceRTTDelay=hcxVoiceRTTDelay, com21HcxStuVoiceCallStatsTable=com21HcxStuVoiceCallStatsTable, hcxVpnRxMaxActiveCalls=hcxVpnRxMaxActiveCalls, hcxStuVoiceCallPrevInCallsBlkd=hcxStuVoiceCallPrevInCallsBlkd, hcxStuVoiceCallCurrOutCallsAllwd=hcxStuVoiceCallCurrOutCallsAllwd, hcxVoiceFEndEchoCancEnable=hcxVoiceFEndEchoCancEnable, com21HcxVpnRxStatsTable=com21HcxVpnRxStatsTable, hcxStuVoiceCallPrevOutCallsAllwd=hcxStuVoiceCallPrevOutCallsAllwd, com21HcxVpnRxTable=com21HcxVpnRxTable, com21HcxStuVoiceChannelGroup=com21HcxStuVoiceChannelGroup, hcxVpnRxEntryId=hcxVpnRxEntryId, hcxVpnRxStatsClear=hcxVpnRxStatsClear, com21HcxStuVoiceCallStatsEntry=com21HcxStuVoiceCallStatsEntry, hcxStuVoiceCallStatsClear=hcxStuVoiceCallStatsClear, com21HcxVpnRxEntry=com21HcxVpnRxEntry)
