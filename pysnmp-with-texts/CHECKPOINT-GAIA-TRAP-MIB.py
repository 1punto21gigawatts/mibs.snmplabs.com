#
# PySNMP MIB module CHECKPOINT-GAIA-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHECKPOINT-GAIA-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, MibIdentifier, ObjectIdentity, iso, enterprises, Integer32, Counter64, Unsigned32, IpAddress, Bits, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "MibIdentifier", "ObjectIdentity", "iso", "enterprises", "Integer32", "Counter64", "Unsigned32", "IpAddress", "Bits", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

checkpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 2620))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1))
chkpntTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000))
chkpntTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 0))
chkpntTrapHWSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5))
chkpntTrapConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 10))
chkpntTrapDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 2))
svn = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6))
svnPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7))
sensorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8))
tempertureSensorTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1))
tempertureSensorEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1))
fanSpeedSensorTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2))
fanSpeedSensorEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1))
voltageSensorTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3))
voltageSensorEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1))
powerSupplyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9))
powerSupplyTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1))
powerSupplyEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1))
raidInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6))
raidVolumeTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1))
raidVolumeEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 1))
chkpntTrapMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 0, 0))
if mibBuilder.loadTexts: chkpntTrapMibModule.setLastUpdated('201005101431Z')
if mibBuilder.loadTexts: chkpntTrapMibModule.setOrganization('Check Point')
if mibBuilder.loadTexts: chkpntTrapMibModule.setContactInfo('Check Point')
if mibBuilder.loadTexts: chkpntTrapMibModule.setDescription('Check Point GAIA SMIv2 Traps')
chkpntTrapOID = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 0, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapOID.setStatus('optional')
if mibBuilder.loadTexts: chkpntTrapOID.setDescription('The trap OID that triggered this event.')
chkpntTrapMsgText = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 0, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chkpntTrapMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: chkpntTrapMsgText.setDescription('Alert Message Text')
tempertureSensorName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: tempertureSensorName.setDescription('Temperature sensor name')
tempertureSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempertureSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: tempertureSensorValue.setDescription('Temperature sensor value')
fanSpeedSensorName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: fanSpeedSensorName.setDescription('Fan sensor name.')
fanSpeedSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: fanSpeedSensorValue.setDescription('Fan sensor value.')
voltageSensorName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorName.setStatus('mandatory')
if mibBuilder.loadTexts: voltageSensorName.setDescription('Voltage sensor name.')
voltageSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voltageSensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: voltageSensorValue.setDescription('Voltage sensor value.')
powerSupplySensorName = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySensorName.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplySensorName.setDescription('Power supply sensor name.')
powerSupplySensorValue = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplySensorValue.setStatus('mandatory')
if mibBuilder.loadTexts: powerSupplySensorValue.setDescription('Power supply sensor value.')
raidVolumeState = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeState.setStatus('mandatory')
if mibBuilder.loadTexts: raidVolumeState.setDescription('RAID volume state for this event.')
raidVolumeFlags = MibScalar((1, 3, 6, 1, 4, 1, 2620, 1, 6, 7, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidVolumeFlags.setStatus('mandatory')
if mibBuilder.loadTexts: raidVolumeFlags.setDescription('RAID volume flags for this event.')
chkpntTrapTempertureSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 1))
chkpntTrapFanSpeedSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 2))
chkpntTrapVoltageSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 3))
chkpntTrapPowerSupplySensor = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 4))
chkpntTempertureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 1, 1)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-GAIA-TRAP-MIB", "tempertureSensorName"), ("CHECKPOINT-GAIA-TRAP-MIB", "tempertureSensorValue"))
if mibBuilder.loadTexts: chkpntTempertureTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntTempertureTrap.setDescription('Temperture sensor alert (Sensor name provided in trap)')
chkpntFanSpeedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 2, 1)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-GAIA-TRAP-MIB", "fanSpeedSensorName"), ("CHECKPOINT-GAIA-TRAP-MIB", "fanSpeedSensorValue"))
if mibBuilder.loadTexts: chkpntFanSpeedTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntFanSpeedTrap.setDescription('Fan speed sensor alert (Sensor name provided in trap)')
chkpntVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 3, 1)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-GAIA-TRAP-MIB", "voltageSensorName"), ("CHECKPOINT-GAIA-TRAP-MIB", "voltageSensorValue"))
if mibBuilder.loadTexts: chkpntVoltageTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntVoltageTrap.setDescription('Voltage sensor alert (Sensor name provided in trap)')
chkpntPowerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 5, 4, 1)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-GAIA-TRAP-MIB", "powerSupplySensorName"), ("CHECKPOINT-GAIA-TRAP-MIB", "powerSupplySensorValue"))
if mibBuilder.loadTexts: chkpntPowerSupplyTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntPowerSupplyTrap.setDescription('Power supply sensor alert (Sensor name provided in trap)')
chkpntTrapSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 10, 1))
chkpntSystemConfigurationChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 10, 1, 1)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"))
if mibBuilder.loadTexts: chkpntSystemConfigurationChangeTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntSystemConfigurationChangeTrap.setDescription('System configuration was changed')
chkpntSystemConfigurationSaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 10, 1, 2)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"))
if mibBuilder.loadTexts: chkpntSystemConfigurationSaveTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntSystemConfigurationSaveTrap.setDescription('System configuration was saved')
chkpntTrapRAID = MibIdentifier((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 2, 1))
chkpntRAIDVolumeStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 2620, 1, 3000, 2, 1, 1)).setObjects(("CHECKPOINT-GAIA-TRAP-MIB", "chkpntTrapMsgText"), ("CHECKPOINT-GAIA-TRAP-MIB", "raidVolumeState"), ("CHECKPOINT-GAIA-TRAP-MIB", "raidVolumeFlags"))
if mibBuilder.loadTexts: chkpntRAIDVolumeStateTrap.setStatus('current')
if mibBuilder.loadTexts: chkpntRAIDVolumeStateTrap.setDescription('The RAID volume state is not optimal. Volume state, volume flags, disk state and disk flags are included.')
mibBuilder.exportSymbols("CHECKPOINT-GAIA-TRAP-MIB", fanSpeedSensorEntry=fanSpeedSensorEntry, chkpntTrapTempertureSensor=chkpntTrapTempertureSensor, raidVolumeFlags=raidVolumeFlags, chkpntTrapMsgText=chkpntTrapMsgText, chkpntTrapOID=chkpntTrapOID, svn=svn, chkpntPowerSupplyTrap=chkpntPowerSupplyTrap, DisplayString=DisplayString, voltageSensorEntry=voltageSensorEntry, fanSpeedSensorName=fanSpeedSensorName, chkpntTrapConfiguration=chkpntTrapConfiguration, chkpntTempertureTrap=chkpntTempertureTrap, powerSupplyEntry=powerSupplyEntry, voltageSensorTable=voltageSensorTable, chkpntTrapMibModule=chkpntTrapMibModule, fanSpeedSensorTable=fanSpeedSensorTable, checkpoint=checkpoint, voltageSensorValue=voltageSensorValue, raidInfo=raidInfo, chkpntRAIDVolumeStateTrap=chkpntRAIDVolumeStateTrap, fanSpeedSensorValue=fanSpeedSensorValue, raidVolumeState=raidVolumeState, tempertureSensorEntry=tempertureSensorEntry, chkpntTrapDisk=chkpntTrapDisk, chkpntTrap=chkpntTrap, powerSupplySensorName=powerSupplySensorName, raidVolumeEntry=raidVolumeEntry, svnPerf=svnPerf, tempertureSensorName=tempertureSensorName, powerSupplyInfo=powerSupplyInfo, PYSNMP_MODULE_ID=chkpntTrapMibModule, chkpntSystemConfigurationChangeTrap=chkpntSystemConfigurationChangeTrap, raidVolumeTable=raidVolumeTable, voltageSensorName=voltageSensorName, chkpntFanSpeedTrap=chkpntFanSpeedTrap, chkpntTrapFanSpeedSensor=chkpntTrapFanSpeedSensor, tempertureSensorTable=tempertureSensorTable, chkpntSystemConfigurationSaveTrap=chkpntSystemConfigurationSaveTrap, chkpntTrapRAID=chkpntTrapRAID, chkpntTrapVoltageSensor=chkpntTrapVoltageSensor, products=products, tempertureSensorValue=tempertureSensorValue, chkpntVoltageTrap=chkpntVoltageTrap, chkpntTrapSystemConfiguration=chkpntTrapSystemConfiguration, powerSupplySensorValue=powerSupplySensorValue, chkpntTrapHWSensor=chkpntTrapHWSensor, powerSupplyTable=powerSupplyTable, sensorInfo=sensorInfo, chkpntTrapPowerSupplySensor=chkpntTrapPowerSupplySensor, chkpntTrapInfo=chkpntTrapInfo)
