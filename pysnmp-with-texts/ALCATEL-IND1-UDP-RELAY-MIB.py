#
# PySNMP MIB module ALCATEL-IND1-UDP-RELAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-UDP-RELAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
routingIND1UdpRelay, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1UdpRelay")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, ObjectIdentity, ModuleIdentity, iso, MibIdentifier, Integer32, IpAddress, TimeTicks, Gauge32, Bits, NotificationType, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "iso", "MibIdentifier", "Integer32", "IpAddress", "TimeTicks", "Gauge32", "Bits", "NotificationType", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "MacAddress")
alcatelIND1UDPRelayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1))
alcatelIND1UDPRelayMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setOrganization('Alcatel -Architects Of An Internet World ')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line UDP Relay to forward BOOTP/DHCP requests across VLANs The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1UDPRelayNotificationObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0))
if mibBuilder.loadTexts: alcatelIND1UDPRelayNotificationObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayNotificationObjects.setDescription('Branch For UDP Relay Notification Objects.')
alcatelIND1UDPRelayMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBObjects.setDescription('Branch For UDP Relay Subsystem Managed Objects.')
alcatelIND1UDPRelayMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBConformance.setDescription('Branch For UDP Relay Subsystem Conformance Information.')
alcatelIND1UDPRelayMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBGroups.setDescription('Branch For UDP Relay Subsystem Units Of Conformance.')
alcatelIND1UDPRelayMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliances.setDescription('Branch For UDP Relay Subsystem Compliance Statements.')
class IphelpereOption82ASCIIFieldType(TextualConvention, Integer32):
    description = 'Ip helper Option 82 Format ASCII field type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("vlan", 5), ("interface", 6))

iphelperMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1))
genericUdpServiceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2))
alaDhcpClientTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3))
iphelperTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1), )
if mibBuilder.loadTexts: iphelperTable.setStatus('current')
if mibBuilder.loadTexts: iphelperTable.setDescription('A list of next hop IP Address for the DHCP Relay Agent.')
iphelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperVlan"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperNextHopIpAddress"))
if mibBuilder.loadTexts: iphelperEntry.setStatus('current')
if mibBuilder.loadTexts: iphelperEntry.setDescription(' An entry in the ip helper table')
iphelperVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iphelperVlan.setStatus('current')
if mibBuilder.loadTexts: iphelperVlan.setDescription('This object is applicable when iphelperForwardOption is equal to perVlan (2). On Per VLAN mod the next hop IP Address corresponds to specific source VLAN. Based on the VLAN that the DHCP packet comes to the DHCP Relay Agent the packet is forwarded to the next hop defined for that VLAN. When iphelperForwardOption is standard (1), this field will be zero (0).')
iphelperNextHopIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: iphelperNextHopIpAddress.setStatus('current')
if mibBuilder.loadTexts: iphelperNextHopIpAddress.setDescription('This specifies the next hop IP Address of the DHCP Relay Agent is to forward the DHCP packet.')
iphelperResetSrvStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iphelperResetSrvStats.setStatus('current')
if mibBuilder.loadTexts: iphelperResetSrvStats.setDescription('When set to 1, will reset all the statistic for this server. On standard mode vlan will be zero. After the reset operation, system will change this back to a zero (0). Subsystem will always return zero (0).')
iphelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iphelperRowStatus.setStatus('current')
if mibBuilder.loadTexts: iphelperRowStatus.setDescription('Row Status for creating/deleting')
iphelperStatTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2), )
if mibBuilder.loadTexts: iphelperStatTable.setStatus('current')
if mibBuilder.loadTexts: iphelperStatTable.setDescription('This keeps statistics for each next hop IP Address.')
iphelperStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatsVlan"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatsNextHopIpAddr"))
if mibBuilder.loadTexts: iphelperStatEntry.setStatus('current')
if mibBuilder.loadTexts: iphelperStatEntry.setDescription('An entry in the stat table.')
iphelperStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: iphelperStatsVlan.setStatus('current')
if mibBuilder.loadTexts: iphelperStatsVlan.setDescription('This object is zero (0) when iphelperForwardOption is equal to standard (1). On Per VLAN mod the next hop IP Address corresponds to specific source VLAN. Based on the VLAN that the DHCP packet comes to the DHCP Relay Agent the packet is forwarded to the next hop defined for that VLAN. When iphelperForwardOption is standard (1), this field will be zero (0).')
iphelperStatsNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: iphelperStatsNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: iphelperStatsNextHopIpAddr.setDescription('This specifies the unique server address.')
iphelperTxToNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperTxToNextHop.setStatus('current')
if mibBuilder.loadTexts: iphelperTxToNextHop.setDescription(' This keeps track of the number of packets transmitted to the server.')
iphelperInvalidAgentInfoOptFrmSrver = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperInvalidAgentInfoOptFrmSrver.setStatus('current')
if mibBuilder.loadTexts: iphelperInvalidAgentInfoOptFrmSrver.setDescription('This keeps track of the number of packets dropped due to invalid from DHCP server with Relay Agent Information option in the DHCP packet.')
iphelperRxFromClient = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperRxFromClient.setStatus('current')
if mibBuilder.loadTexts: iphelperRxFromClient.setDescription('This keeps track of the number of packets recieved from the client.')
iphelperMaxHopsViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperMaxHopsViolation.setStatus('current')
if mibBuilder.loadTexts: iphelperMaxHopsViolation.setDescription('This keeps track of the number of packets dropped due to max hops violation.')
iphelperForwDelayViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperForwDelayViolation.setStatus('current')
if mibBuilder.loadTexts: iphelperForwDelayViolation.setDescription('This keeps track of the number of packets dropped due to forward delay violation.')
iphelperAgentInfoViolation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperAgentInfoViolation.setStatus('current')
if mibBuilder.loadTexts: iphelperAgentInfoViolation.setDescription('This keeps track of the number of packets dropped due to DHCP packet with giaddr field not equal to zero and Relay Agent Information option is present and also the Relay Agent Information Policy is set to DROP.')
iphelperInvalidGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperInvalidGatewayIP.setStatus('current')
if mibBuilder.loadTexts: iphelperInvalidGatewayIP.setDescription('This keeps track of the number of packets dropped due to giaddr matching a local subnet and Relay Agent Information option is present in the DHCP packet.')
iphelperForwDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperForwDelay.setStatus('current')
if mibBuilder.loadTexts: iphelperForwDelay.setDescription("This sets the BOOTP/DHCP relay's forwarding delay and is only used by the BOOTP/DHCP service. It is typically set as seconds, but the value is totally client dependent. This relay will not forward frames until client frames have 'secs' field set to atleast the value iphelperForwDelay.")
iphelperMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperMaxHops.setStatus('current')
if mibBuilder.loadTexts: iphelperMaxHops.setDescription("This sets the BOOTP/DHCP relay's maximum hops forwarding limit and is only used by the BOOTP/DHCP service. If a frame arrives with hopcount greater than or equal to iphelperMaxHops, it will be dropped.")
iphelperForwardOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("perVlan", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperForwardOption.setStatus('current')
if mibBuilder.loadTexts: iphelperForwardOption.setDescription('This is the forwarding option for the BOOTP/DHCP Relay Agent. Default value is standard (1).')
iphelperResetAllStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1), ("resetAllGlbStats", 2), ("resetAllSrvStats", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperResetAllStats.setStatus('current')
if mibBuilder.loadTexts: iphelperResetAllStats.setDescription('This parameter resets all the ip helper statistics. 1 - reset all stats. Both Global and server stats. 2 - reset all global statistics. 3 - reset all server statistics. When the reset operation is done, subsystem will change the value to zero (0). Subsystem will always return zero (0).')
iphelperBootupOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperBootupOption.setStatus('current')
if mibBuilder.loadTexts: iphelperBootupOption.setDescription('This object allows the user to enable or disable the functionality of the relay to get an IP address at the time of system boot-up and assign that IP address for the ip interface of the default VLAN. When this is diabled and then enable, the object iphelperBootupPacketOption is reset to its default value. Default of this option is Disable (2).')
iphelperBootupPacketOption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootp", 1), ("dhcp", 2))).clone('dhcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperBootupPacketOption.setStatus('current')
if mibBuilder.loadTexts: iphelperBootupPacketOption.setDescription('This object is used in conjunction with iphelperBootupOption. This specify the packet format with the choices of BOOTP or DHCP to be used to get an IP address at the time of system boot-up. Default option is DHCP')
iphelperAgentInformation = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperAgentInformation.setStatus('current')
if mibBuilder.loadTexts: iphelperAgentInformation.setDescription('This object allows user to enable or disable the functionality of inserting the relay agent information option to the DHCP option field according to RFC 3046. When is is disbled and then enabled, the iphelperAgentInformationPolicy will be reset to its default value.')
iphelperAgentInformationPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperAgentInformationPolicy.setStatus('current')
if mibBuilder.loadTexts: iphelperAgentInformationPolicy.setDescription('This object allows the user to select the policy of either drop, keep or replace the relay agent information option if this option is already present in the DHCP packet.')
iphelperPXESupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperPXESupport.setStatus('current')
if mibBuilder.loadTexts: iphelperPXESupport.setDescription('When enabled the relay agent will replace the source IP address of the packet with the gateway IP address from the DHCP packet. The default value is disabled.')
iphelperDhcpOption82FormatType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macAddress", 1), ("systemName", 2), ("userString", 3), ("interfaceAlias", 4), ("autoInterfaceAlias", 5), ("ascii", 6))).clone('macAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatType.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatType.setDescription('DHCP option-82 defines the type of information carried in circuit id and remote id sub option fields. If the type selected is string the actual value of the string can be found in iphelperDhcpOption82StringValue. Format type ASCII will insert the configured fields in ASCII format.')
iphelperDhcpOption82StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82StringValue.setDescription('The value of the string that will be used in the circuit id and remote id sub options.')
iphelperDhcpOption82FormatASCIIField1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 19), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1.setDescription('The type of the first field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField1StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField1StringValue.setDescription('The string value of the first field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII. If the option 82 format type is not ASCII or if this field is not used or if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 21), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2.setDescription('The type of the second field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField2StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField2StringValue.setDescription('The string value of the second field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII. If the option 82 format type is not ASCII or if this field is not used or if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 23), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3.setDescription('The type of the third field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField3StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField3StringValue.setDescription('The string value of the third field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII. If the option 82 format type is not ASCII or if this field is not used or if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 25), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4.setDescription('The type of the fourth field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField4StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField4StringValue.setDescription('The string value of the fourth field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII. If the option 82 format type is not ASCII or if this field is not used or if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIField5 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 27), IphelpereOption82ASCIIFieldType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5.setDescription('The type of the fifth field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII')
iphelperDhcpOption82FormatASCIIField5StringValue = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5StringValue.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIField5StringValue.setDescription('The string value of the fifth field in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This Field is applicable only, if the option 82 format type is ASCII. If the option 82 format type is not ASCII or if this field is not used or if the string value is port specific, this field returns an ASCII string -.')
iphelperDhcpOption82FormatASCIIDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 29), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIDelimiter.setStatus('current')
if mibBuilder.loadTexts: iphelperDhcpOption82FormatASCIIDelimiter.setDescription('The value of the delimiter that is inserted between the fields in the Option 82 string in ASCII format, which will be copied to Option-82 circuit id of the DHCP packet. This value is applicable only, if the option 82 format type is ASCII')
iphelperResetAllOpt82ErrStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperResetAllOpt82ErrStats.setStatus('current')
if mibBuilder.loadTexts: iphelperResetAllOpt82ErrStats.setDescription('This parameter resets all the ip helper Option 82 error statistics. When the reset operation is done, subsystem will change the value to zero (0). Subsystem will always return zero (0).')
iphelperOption82ErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31), )
if mibBuilder.loadTexts: iphelperOption82ErrStatsTable.setStatus('current')
if mibBuilder.loadTexts: iphelperOption82ErrStatsTable.setDescription('A list of Option 82 related error statistic count per port and per vlan.')
iphelperOption82ErrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82ifIndex"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82vlan"))
if mibBuilder.loadTexts: iphelperOption82ErrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iphelperOption82ErrStatsEntry.setDescription(' An entry in the ip helper Option 82 error statistics table')
iphelperOpt82ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: iphelperOpt82ifIndex.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82ifIndex.setDescription('The interface where the DHCP packet ingress the switch that caused the Agent Info Violation or the Invalid Gateway IP Address error.')
iphelperOpt82vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 2), Unsigned32())
if mibBuilder.loadTexts: iphelperOpt82vlan.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82vlan.setDescription('The vlan where the DHCP packet ingress the switch that caused the Agent Info Violation or the Invalid Gateway IP Address error.')
iphelperOpt82agentInfoViolationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperOpt82agentInfoViolationCnt.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82agentInfoViolationCnt.setDescription('The number of Agent Info Violation seen on this interface and vlan.')
iphelperOpt82invalidGatewayIPAddrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iphelperOpt82invalidGatewayIPAddrCnt.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82invalidGatewayIPAddrCnt.setDescription('The number of Invalid Gateway IP Address seen on this interface and vlan.')
iphelperOpt82resetErrStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetErrStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iphelperOpt82resetErrStats.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82resetErrStats.setDescription('This parameter resets the ip helper Option 82 error statistics on this interface and vlan. When the reset operation is done, subsystem will change the value to zero (0). Subsystem will always return zero (0).')
genericUdpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1), )
if mibBuilder.loadTexts: genericUdpServiceTable.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceTable.setDescription('This table defines the Generic UDP Relay Service.')
genericUdpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceUdpPort"))
if mibBuilder.loadTexts: genericUdpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceEntry.setDescription('An entry in Generic UDP Relay table')
genericUdpServiceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: genericUdpServiceUdpPort.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceUdpPort.setDescription('UDP port for the service.')
genericUdpServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceDescription.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDescription.setDescription('The name and/or description of the service. If null string is passed the default name will be used.')
genericUdpServiceStatRxFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericUdpServiceStatRxFromClient.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceStatRxFromClient.setDescription('This keeps track of the number of packets received from the client with UDP destination port matching genericUdpServiceUdpPort.')
genericUdpServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceRowStatus.setDescription('Row Status for creating/deleting')
genericUdpServiceDstTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2), )
if mibBuilder.loadTexts: genericUdpServiceDstTable.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstTable.setDescription('This table defines the destination VLAN for the Generic UDP Relay Service. UDP packet with destination port genericUdpServiceUdpPort are forwarded to VLAN defined in genericUdpServiceDstVlan.')
genericUdpServiceDstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServicePort"), (0, "ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstVlan"))
if mibBuilder.loadTexts: genericUdpServiceDstEntry.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstEntry.setDescription('An entry in Generic UDP Relay table')
genericUdpServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: genericUdpServicePort.setStatus('current')
if mibBuilder.loadTexts: genericUdpServicePort.setDescription('UDP port for the service.')
genericUdpServiceDstVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: genericUdpServiceDstVlan.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstVlan.setDescription('Destination VLAN that the UPD port is to be forwarded to.')
genericUdpServiceStatTxToVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericUdpServiceStatTxToVlan.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceStatTxToVlan.setDescription('This keeps track of the number of packets transmitted to the destination VLAN with UDP destination port matching genericUdpServicePort.')
genericUdpServiceDstTblRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: genericUdpServiceDstTblRowStatus.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstTblRowStatus.setDescription('Row Status for creating/deleting the Generic Service Destination Table')
genericUdpServiceStatReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noOperation", 0), ("resetAllStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericUdpServiceStatReset.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceStatReset.setDescription('This parameter resets all the Generic UDP Relay related statistics. Subsystem always returns zero (0).')
alaDhcpClientAddressAddTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressAddTrap.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddressAddTrap.setDescription('When new IP address is assigned to DHCP Client interface.')
alaDhcpClientAddressExpiryTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 2)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressExpiryTrap.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddressExpiryTrap.setDescription('When the lease time expires or when DHCP client not able to renew/rebind an IP address.')
alaDhcpClientAddressModifyTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 0, 3)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientNewAddress"))
if mibBuilder.loadTexts: alaDhcpClientAddressModifyTrap.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddressModifyTrap.setDescription('When the dhcp client not able to obtain the existing IP address and new IP address is assigned to the DHCP client.')
alaDhcpClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpClientAddress.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientAddress.setDescription('This object specifies the current IP address of the DHCP client.')
alaDhcpClientNewAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 1, 3, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDhcpClientNewAddress.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientNewAddress.setDescription('This object specifies the new IP address assigned for the DHCP client.')
alcatelIND1UDPRelayMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperStatGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMiscGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceMiscGroup"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1UDPRelayMIBCompliance = alcatelIND1UDPRelayMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDPRelayMIBCompliance.setDescription('Compliance statement for UDP Relay')
iphelperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetSrvStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperGroup = iphelperGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperGroup.setDescription(' Collection of objects for the management of parameters of UDP Relay.')
iphelperStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperTxToNextHop"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperInvalidAgentInfoOptFrmSrver"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperStatGroup = iphelperStatGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperStatGroup.setDescription(' Collection of objects for management of statistics for DHCP Relay Agent.')
iphelperMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperRxFromClient"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMaxHopsViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwDelayViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInfoViolation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperInvalidGatewayIP"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwDelay"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperMaxHops"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperForwardOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetAllStats"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperBootupOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperBootupPacketOption"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInformation"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperAgentInformationPolicy"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperPXESupport"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatType"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField1"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField1StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField2"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField2StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField3"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField3StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField4"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField4StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField5"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIField5StringValue"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperDhcpOption82FormatASCIIDelimiter"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperResetAllOpt82ErrStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperMiscGroup = iphelperMiscGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperMiscGroup.setDescription(' Other independent objects of UDP Relay.')
genericUdpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDescription"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatRxFromClient"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceGroup = genericUdpServiceGroup.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceGroup.setDescription('Objects for Generic UDP Service table')
genericUdpServiceDstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatTxToVlan"), ("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceDstTblRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceDstGroup = genericUdpServiceDstGroup.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceDstGroup.setDescription('Objects for Generic UDP Service Destination table')
genericUdpServiceMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "genericUdpServiceStatReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericUdpServiceMiscGroup = genericUdpServiceMiscGroup.setStatus('current')
if mibBuilder.loadTexts: genericUdpServiceMiscGroup.setDescription('Objects for Generic UDP Service Misc Group.')
alaDhcpClientTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressAddTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressExpiryTrap"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddressModifyTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpClientTrapsGroup = alaDhcpClientTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientTrapsGroup.setDescription('Collection of traps for management of DHCP Client ')
alaDhcpClientTrapsObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientAddress"), ("ALCATEL-IND1-UDP-RELAY-MIB", "alaDhcpClientNewAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDhcpClientTrapsObjectGroup = alaDhcpClientTrapsObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaDhcpClientTrapsObjectGroup.setDescription('Collection of trap objects for management of DHCP Client ')
iphelperOpt82ErrorStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 9, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82agentInfoViolationCnt"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82invalidGatewayIPAddrCnt"), ("ALCATEL-IND1-UDP-RELAY-MIB", "iphelperOpt82resetErrStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iphelperOpt82ErrorStatGroup = iphelperOpt82ErrorStatGroup.setStatus('current')
if mibBuilder.loadTexts: iphelperOpt82ErrorStatGroup.setDescription(' Collection of objects for Option 82 error statistics.')
mibBuilder.exportSymbols("ALCATEL-IND1-UDP-RELAY-MIB", genericUdpServiceMiscGroup=genericUdpServiceMiscGroup, iphelperOpt82vlan=iphelperOpt82vlan, genericUdpServiceUdpPort=genericUdpServiceUdpPort, IphelpereOption82ASCIIFieldType=IphelpereOption82ASCIIFieldType, iphelperGroup=iphelperGroup, iphelperDhcpOption82StringValue=iphelperDhcpOption82StringValue, iphelperRxFromClient=iphelperRxFromClient, iphelperOpt82ErrorStatGroup=iphelperOpt82ErrorStatGroup, alaDhcpClientNewAddress=alaDhcpClientNewAddress, iphelperOption82ErrStatsEntry=iphelperOption82ErrStatsEntry, alcatelIND1UDPRelayMIBObjects=alcatelIND1UDPRelayMIBObjects, alcatelIND1UDPRelayNotificationObjects=alcatelIND1UDPRelayNotificationObjects, iphelperMIB=iphelperMIB, genericUdpServiceDstEntry=genericUdpServiceDstEntry, iphelperDhcpOption82FormatASCIIField3StringValue=iphelperDhcpOption82FormatASCIIField3StringValue, iphelperVlan=iphelperVlan, iphelperOpt82invalidGatewayIPAddrCnt=iphelperOpt82invalidGatewayIPAddrCnt, iphelperForwDelay=iphelperForwDelay, genericUdpServiceEntry=genericUdpServiceEntry, genericUdpServiceDstGroup=genericUdpServiceDstGroup, alaDhcpClientAddressExpiryTrap=alaDhcpClientAddressExpiryTrap, iphelperMaxHopsViolation=iphelperMaxHopsViolation, genericUdpServiceDstTblRowStatus=genericUdpServiceDstTblRowStatus, alaDhcpClientAddressAddTrap=alaDhcpClientAddressAddTrap, alaDhcpClientTrapsObjectGroup=alaDhcpClientTrapsObjectGroup, alaDhcpClientTrapsObj=alaDhcpClientTrapsObj, iphelperOpt82resetErrStats=iphelperOpt82resetErrStats, genericUdpServiceTable=genericUdpServiceTable, iphelperOption82ErrStatsTable=iphelperOption82ErrStatsTable, genericUdpServiceGroup=genericUdpServiceGroup, alcatelIND1UDPRelayMIBGroups=alcatelIND1UDPRelayMIBGroups, iphelperAgentInfoViolation=iphelperAgentInfoViolation, iphelperForwardOption=iphelperForwardOption, genericUdpServiceDstTable=genericUdpServiceDstTable, genericUdpServiceStatTxToVlan=genericUdpServiceStatTxToVlan, alcatelIND1UDPRelayMIB=alcatelIND1UDPRelayMIB, iphelperBootupOption=iphelperBootupOption, alcatelIND1UDPRelayMIBConformance=alcatelIND1UDPRelayMIBConformance, iphelperResetSrvStats=iphelperResetSrvStats, iphelperDhcpOption82FormatASCIIField1=iphelperDhcpOption82FormatASCIIField1, alaDhcpClientAddressModifyTrap=alaDhcpClientAddressModifyTrap, iphelperResetAllStats=iphelperResetAllStats, iphelperDhcpOption82FormatASCIIField1StringValue=iphelperDhcpOption82FormatASCIIField1StringValue, genericUdpServiceDescription=genericUdpServiceDescription, iphelperStatsVlan=iphelperStatsVlan, iphelperEntry=iphelperEntry, iphelperDhcpOption82FormatASCIIDelimiter=iphelperDhcpOption82FormatASCIIDelimiter, iphelperRowStatus=iphelperRowStatus, genericUdpServiceRowStatus=genericUdpServiceRowStatus, genericUdpServicePort=genericUdpServicePort, iphelperDhcpOption82FormatType=iphelperDhcpOption82FormatType, iphelperStatsNextHopIpAddr=iphelperStatsNextHopIpAddr, alaDhcpClientAddress=alaDhcpClientAddress, alaDhcpClientTrapsGroup=alaDhcpClientTrapsGroup, iphelperStatTable=iphelperStatTable, alcatelIND1UDPRelayMIBCompliances=alcatelIND1UDPRelayMIBCompliances, genericUdpServiceMIB=genericUdpServiceMIB, iphelperStatEntry=iphelperStatEntry, genericUdpServiceDstVlan=genericUdpServiceDstVlan, iphelperDhcpOption82FormatASCIIField5=iphelperDhcpOption82FormatASCIIField5, iphelperMiscGroup=iphelperMiscGroup, genericUdpServiceStatRxFromClient=genericUdpServiceStatRxFromClient, iphelperTable=iphelperTable, PYSNMP_MODULE_ID=alcatelIND1UDPRelayMIB, genericUdpServiceStatReset=genericUdpServiceStatReset, iphelperTxToNextHop=iphelperTxToNextHop, iphelperInvalidGatewayIP=iphelperInvalidGatewayIP, iphelperResetAllOpt82ErrStats=iphelperResetAllOpt82ErrStats, iphelperForwDelayViolation=iphelperForwDelayViolation, iphelperNextHopIpAddress=iphelperNextHopIpAddress, alcatelIND1UDPRelayMIBCompliance=alcatelIND1UDPRelayMIBCompliance, iphelperStatGroup=iphelperStatGroup, iphelperInvalidAgentInfoOptFrmSrver=iphelperInvalidAgentInfoOptFrmSrver, iphelperBootupPacketOption=iphelperBootupPacketOption, iphelperOpt82agentInfoViolationCnt=iphelperOpt82agentInfoViolationCnt, iphelperDhcpOption82FormatASCIIField2=iphelperDhcpOption82FormatASCIIField2, iphelperMaxHops=iphelperMaxHops, iphelperDhcpOption82FormatASCIIField2StringValue=iphelperDhcpOption82FormatASCIIField2StringValue, iphelperPXESupport=iphelperPXESupport, iphelperAgentInformation=iphelperAgentInformation, iphelperOpt82ifIndex=iphelperOpt82ifIndex, iphelperDhcpOption82FormatASCIIField5StringValue=iphelperDhcpOption82FormatASCIIField5StringValue, iphelperDhcpOption82FormatASCIIField3=iphelperDhcpOption82FormatASCIIField3, iphelperAgentInformationPolicy=iphelperAgentInformationPolicy, iphelperDhcpOption82FormatASCIIField4=iphelperDhcpOption82FormatASCIIField4, iphelperDhcpOption82FormatASCIIField4StringValue=iphelperDhcpOption82FormatASCIIField4StringValue)
