#
# PySNMP MIB module DPI-LANA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DPI-LANA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:54:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, Gauge32, IpAddress, Counter64, Integer32, NotificationType, ObjectIdentity, TimeTicks, Bits, enterprises, Unsigned32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Gauge32", "IpAddress", "Counter64", "Integer32", "NotificationType", "ObjectIdentity", "TimeTicks", "Bits", "enterprises", "Unsigned32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dpi = MibIdentifier((1, 3, 6, 1, 4, 1, 901))
dpiProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1))
dpiLANA = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2))
lanaInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2, 2))
lanaMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2, 3))
lanaNest = MibIdentifier((1, 3, 6, 1, 4, 1, 901, 1, 2, 4))
lanaRs232PortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("b1200", 0), ("b2400", 1), ("b4800", 2), ("b9600", 3), ("b19200", 4), ("b38400", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232PortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lanaRs232PortSpeed.setDescription("The port's speed.")
lanaRs232AsyncPortBits = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232AsyncPortBits.setStatus('mandatory')
if mibBuilder.loadTexts: lanaRs232AsyncPortBits.setDescription('The number of data bits for the serial port.')
lanaRs232AsyncPortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("one-and-half", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232AsyncPortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: lanaRs232AsyncPortStopBits.setDescription('The number of stop bits for the serial port.')
lanaRs232AsyncPortParity = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaRs232AsyncPortParity.setStatus('mandatory')
if mibBuilder.loadTexts: lanaRs232AsyncPortParity.setDescription('The parity setting of the serial line.')
lanaSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: lanaSubnetMask.setDescription('The subnet mask for the LANA unit.')
lanaDefGatewayIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaDefGatewayIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lanaDefGatewayIpAddr.setDescription('The default gateway IP address for the LANA unit.')
lanaForwBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaForwBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: lanaForwBroadcast.setDescription('Indicates whether the SNMP LAN Adapter forwards broadcast datagrams to the SNMP-managed device. The factory default value is disabled (2).')
lanaReset = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaReset.setStatus('mandatory')
if mibBuilder.loadTexts: lanaReset.setDescription('Request for LANA unit to reset.')
lanaFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: lanaFactoryDefault.setDescription('Request factory default configuration on next unit reset.')
lanaUpdateUnit = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("one", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaUpdateUnit.setStatus('mandatory')
if mibBuilder.loadTexts: lanaUpdateUnit.setDescription("Request for LANA unit to initiate TFTP software upgrade using the string `host:filename' where host is in dotted decimal format.")
lanaSWMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaSWMajorVer.setStatus('mandatory')
if mibBuilder.loadTexts: lanaSWMajorVer.setDescription("LANA's major software release version number.")
lanaSWMinorVer = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaSWMinorVer.setStatus('mandatory')
if mibBuilder.loadTexts: lanaSWMinorVer.setDescription("LANA's minor software release version number.")
lanaSWRevision = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaSWRevision.setStatus('mandatory')
if mibBuilder.loadTexts: lanaSWRevision.setDescription("LANA's software release revision number.")
lanaIPAddrTableTotal = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaIPAddrTableTotal.setStatus('mandatory')
if mibBuilder.loadTexts: lanaIPAddrTableTotal.setDescription("Get the number of entries in LANA's nest ip table.")
lanaIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2), )
if mibBuilder.loadTexts: lanaIPAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: lanaIPAddrTable.setDescription('A list of entries containing IP address information for LANA managed by this system.')
lanaIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2, 1), ).setIndexNames((0, "DPI-LANA-MIB", "lanaIPAddrIndex"))
if mibBuilder.loadTexts: lanaIPAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lanaIPAddrEntry.setDescription('An entry containing IP address information for a particular LANA table slot.')
lanaIPAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanaIPAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lanaIPAddrIndex.setDescription('A unique value for each LANA IP address.')
lanaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lanaIPAddr.setDescription('This variable is one of up to 60 IP addresses that LANA will proxy ARP for. The address should be on the same subnet as the attached CSU/DSU in order for ARP to function properly. Reading an IP address with the value 0.0.0.0 represents a cleared/ uninitialized table entry. Setting the IP address to 0.0.0.0 clears the indexed entry.')
lanaIPAddrTableClear = MibScalar((1, 3, 6, 1, 4, 1, 901, 1, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanaIPAddrTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: lanaIPAddrTableClear.setDescription("Reset all the IP addresses in LANA's address table to 0.0.0.0.")
mibBuilder.exportSymbols("DPI-LANA-MIB", lanaMgmt=lanaMgmt, lanaRs232AsyncPortBits=lanaRs232AsyncPortBits, lanaFactoryDefault=lanaFactoryDefault, lanaSubnetMask=lanaSubnetMask, lanaDefGatewayIpAddr=lanaDefGatewayIpAddr, lanaIPAddrEntry=lanaIPAddrEntry, lanaSWMajorVer=lanaSWMajorVer, lanaRs232PortSpeed=lanaRs232PortSpeed, lanaIPAddr=lanaIPAddr, lanaRs232AsyncPortStopBits=lanaRs232AsyncPortStopBits, lanaForwBroadcast=lanaForwBroadcast, lanaIPAddrTable=lanaIPAddrTable, dpi=dpi, dpiProducts=dpiProducts, lanaInterface=lanaInterface, dpiLANA=dpiLANA, lanaSWMinorVer=lanaSWMinorVer, lanaUpdateUnit=lanaUpdateUnit, lanaSWRevision=lanaSWRevision, lanaRs232AsyncPortParity=lanaRs232AsyncPortParity, lanaIPAddrTableClear=lanaIPAddrTableClear, lanaIPAddrIndex=lanaIPAddrIndex, lanaNest=lanaNest, lanaIPAddrTableTotal=lanaIPAddrTableTotal, lanaReset=lanaReset)
