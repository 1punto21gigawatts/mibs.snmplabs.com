#
# PySNMP MIB module Juniper-ACCOUNTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-ACCOUNTING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acctngSelectionEntry, acctngSelectionIndex, acctngFileEntry = mibBuilder.importSymbols("ACCOUNTING-CONTROL-MIB", "acctngSelectionEntry", "acctngSelectionIndex", "acctngFileEntry")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniPolicyAttachmentType, = mibBuilder.importSymbols("Juniper-POLICY-MIB", "JuniPolicyAttachmentType")
JuniEnable, JuniInterfaceLocation, JuniAcctngAdminType, JuniInterfaceDescrFormat, JuniAcctngOperType = mibBuilder.importSymbols("Juniper-TC", "JuniEnable", "JuniInterfaceLocation", "JuniAcctngAdminType", "JuniInterfaceDescrFormat", "JuniAcctngOperType")
juniIfType, = mibBuilder.importSymbols("Juniper-UNI-IF-MIB", "juniIfType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, TimeTicks, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32, NotificationType, Bits, Integer32, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "NotificationType", "Bits", "Integer32", "Gauge32", "Counter32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
juniAcctngMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24))
juniAcctngMIB.setRevisions(('2009-07-16 15:00', '2005-04-26 15:00', '2003-02-28 15:00', '2002-12-17 15:37', '2001-12-05 14:16', '2001-11-19 19:00', '2001-03-26 13:22', '2000-11-07 19:00', '2000-07-21 00:00', '2000-03-20 00:00', '2000-01-17 00:00', '1999-10-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniAcctngMIB.setRevisionsDescriptions(('Added Qos Schema IDs', 'Key revisions include: o Added Virtual Router Based Accounting Config (RLI618)', 'Added IGMP schema IDs.', 'Key revisions include: o Replaced Unisphere names with Juniper names. o Added juniAcctngInterfaceDescrFormat, juniAcctngInterfaceNumberingMode and juniAcctngFileFormat. o Changed the indexing scheme to the juniAcctngInterfaceTable to allow specification by interface type, fileIndex and interface location. Gave the table a new OID.', 'Key revisions include: o Added juniAcctngSelectionPolicyName and juniAcctngSelectionPolicyType objects to juniAcctngSelectionTable o Added juniAcctngSelectionSchemaPolicy and associated policy statistic OIDs ', 'Key revisions include: o Added juniAcctngifInMulticastPkts o Added juniAcctngifInBroadcastPkts o Added juniAcctngifOutMulticastPkts o Added juniAcctngifOutBroadcastPkts ', 'Key revisions include: o Added juniAcctngSelectionSchemaSystem o Deprecated juniAcctngSelectionSubtreeType ', 'Key revisions include: o Added juniAcctngIfTimeOffset ', 'Key revisions include: o Added juniAcctngIfCorrelator o Added juniAcctngIfInPolicedOctets o Added juniAcctngIfInPolicedPkts o Added juniAcctngIfInSpoofedPkts o Added juniAcctngIfOutPolicedOctets o Added juniAcctngIfOutPolicedPkts o Added juniAcctngIfOutSchedulerDropOctets o Added juniAcctngIfOutSchedulerDropPkts o Added juniAcctngIfLowerInterface ', 'Key revisions include: o Moved juniAcctngSelectionMaxIfStackLevels o Added juniAcctngSelectionSubtreeType o Added juniAcctngIfCorrelator o Removed juniAcctngSelectionSchemaPpp ', 'Key revisions include: o Added juniAcctngSelectionMaxIfStackLevels o Added juniAcctngSelectionIfStackStartTable o Added juniAcctngSelectionSchemaIfStack ', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniAcctngMIB.setLastUpdated('200907161500Z')
if mibBuilder.loadTexts: juniAcctngMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniAcctngMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniAcctngMIB.setDescription('The accounting MIB for the Juniper Networks enterprise. This MIB augments with the Virtual Router Accounting MIB specified in RLI618.')
juniAcctngMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1))
juniAcctngSelectionControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1))
juniAcctngFileControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2))
juniAcctngInterfaceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3))
juniAcctngScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 4))
juniAcctngVirtualRouterControl = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 5))
juniAcctngInterfaceDescrFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 4, 1), JuniInterfaceDescrFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngInterfaceDescrFormat.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceDescrFormat.setDescription('The format of the interface descriptions reported by the accounting application.')
juniAcctngInterfaceNumberingMode = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("proprietaryNumbering", 0), ("rfc1213Number", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngInterfaceNumberingMode.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceNumberingMode.setDescription('The format of the interface descriptions reported by the accounting application.')
juniAcctngFileFormat = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("includeCR", 0), ("includeCRLF", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngFileFormat.setStatus('current')
if mibBuilder.loadTexts: juniAcctngFileFormat.setDescription('The file format of the accounting file.')
juniAcctngSelectionTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1), )
if mibBuilder.loadTexts: juniAcctngSelectionTable.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionTable.setDescription("A list of accounting information selection entries. Note that additions, modifications and deletions of entries in this table can occur at any time, but such changes only take effect on the next occasion when collection begins into a new interval. Thus, between modification and the next 'swap', the content of this table does not reflect the current selection.")
juniAcctngSelectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1), )
acctngSelectionEntry.registerAugmentions(("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionEntry"))
juniAcctngSelectionEntry.setIndexNames(*acctngSelectionEntry.getIndexNames())
if mibBuilder.loadTexts: juniAcctngSelectionEntry.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionEntry.setDescription('An entry used to extend the the selection entry in acctngSelectionEntry. This conceptual row extension is used for Juniper accounting extensions for connectionless data collection.')
juniAcctngSelectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("ietfAccountControl", 0), ("connectionLessLayer2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionType.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionType.setDescription('Indicates the types of connections for which the information selected by this entry are to be collected. The ietfAccountControl(0) bit position indicates that the ACCOUNTING-CONTROL-MIB.acctngSelectionType in the base conceptual row determines the selection type. All other bit positions for this object over-ride the acctngSelectionType in the base conceptual row. When the value of this object over-rides the acctngSelectionType object, the following objects have no meaning: ACCOUNTING-CONTROL-MIB.acctngFileCollectFailedAttempts ACCOUNTING-CONTROL-MIB.acctngFileMinAge because they control or are related to connection oriented accounting.')
juniAcctngSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteCounterValues", 1), ("deltaCounterValues", 2))).clone('deltaCounterValues')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionMode.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionMode.setDescription('Indicates the data collection mode.')
juniAcctngSelectionSubtreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("lineCard", 1), ("systemController", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngSelectionSubtreeType.setStatus('deprecated')
if mibBuilder.loadTexts: juniAcctngSelectionSubtreeType.setDescription("Indicates the origin of the collection, given the row's subtree. The architecture implementation for statistics collection imposes that rows with distinct juniAcctngSelectionSubtreeType may not be collected into the same accounting file. Conversely, different files (configured from acctngSelectionFile) entries are necessary in order to collect from subtrees (configured from acctngSelectionSubtree) that imply into different subtree types (juniAcctngSelectionSubtreeType).")
juniAcctngSelectionMaxIfStackLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionMaxIfStackLevels.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionMaxIfStackLevels.setDescription('Indicates the maximum number of levels in the ifStack table to be returned when using the ifStack accounting schema. This object is ignored if acctngSelectionSubtree is not set to juniAcctngSelectionSchemaIfStack. When this object is zero, the entire stack above the starting point(s) given will be returned. When this object is set to 1, only ifIndexes stacked above the starting point(s) given will be returned.')
juniAcctngSelectionPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionPolicyName.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionPolicyName.setDescription('Specifies the name of the policy associated with the statistics collected when using the policy accounting schema. This object is ignored if acctngSelectionSubtree is not set to juniAcctngSelectionSchemaPolicy.')
juniAcctngSelectionPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 6), JuniPolicyAttachmentType().clone('noPolicy')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionPolicyType.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionPolicyType.setDescription('Specifies the attachment point for the policy associated with the statistics collected when using the policy accounting schema. This object is ignored if acctngSelectionSubtree is not set to juniAcctngSelectionSchemaPolicy.')
juniAcctngSelectionIfCreateDeleteStats = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 7), JuniEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionIfCreateDeleteStats.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionIfCreateDeleteStats.setDescription('Enable/disable interfaces create and delete statistics collection.')
juniAcctngSelectionIfCreateDeleteStatsIfTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 1, 1, 8), Bits().clone(namedValues=NamedValues(("ip", 0), ("ppp", 1), ("atm1483", 2), ("vlan", 3), ("mplsMajor", 4), ("mplsL2Shim", 5), ("mplsMinor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngSelectionIfCreateDeleteStatsIfTypes.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionIfCreateDeleteStatsIfTypes.setDescription('The interface-types that are used in the configuration of the create/delete statistics collection. Allowed interface-types are IP, ATM1483, PPP and VLAN. These interface-types are allowed to configure if the interfaces create/delete stats feature is enabled i.e juniAcctngSelectionIfCreateDeleteStats == enable.')
juniAcctngSelectionIfStackStartTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3), )
if mibBuilder.loadTexts: juniAcctngSelectionIfStackStartTable.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionIfStackStartTable.setDescription("A list of ifIndexes to be used as starting point when using the ifStack selection schema. Note that additions, modifications and deletions of entries in this table can occur at any time, but such changes only take effect on the next occasion when collection begins into a new interval. Thus, between modification and the next 'swap', the content of this table does not reflect the current selection.")
juniAcctngSelectionIfStackStartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3, 1), ).setIndexNames((0, "ACCOUNTING-CONTROL-MIB", "acctngSelectionIndex"), (0, "Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfStackIfIndex"))
if mibBuilder.loadTexts: juniAcctngSelectionIfStackStartEntry.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionIfStackStartEntry.setDescription('An entry used to determine the starting point entry when using the ifStack schema.')
juniAcctngSelectionIfStackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniAcctngSelectionIfStackIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionIfStackIfIndex.setDescription('The ifIndex to be used as a starting point in the interface stack configuration. The interfaces to be returned in the ifStack schema will start from this value, going up.')
juniAcctngSelectionIfStackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngSelectionIfStackRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionIfStackRowStatus.setDescription('Controls creation/deletion of entries in this table.')
juniAcctngFileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1), )
if mibBuilder.loadTexts: juniAcctngFileTable.setStatus('current')
if mibBuilder.loadTexts: juniAcctngFileTable.setDescription('A unique value identifying the file transfer behavior and the the file to where accounting data is to be stored.')
juniAcctngFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1), )
acctngFileEntry.registerAugmentions(("Juniper-ACCOUNTING-MIB", "juniAcctngFileEntry"))
juniAcctngFileEntry.setIndexNames(*acctngFileEntry.getIndexNames())
if mibBuilder.loadTexts: juniAcctngFileEntry.setStatus('current')
if mibBuilder.loadTexts: juniAcctngFileEntry.setDescription('An entry used to extend the file management of acctngFileEntry. This conceptual row extension is used for Juniper accounting extensions to automate the transfer of accounting data to remote hosts.')
juniAcctngFileXferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("juniAcctngManualTransfer", 1), ("juniAcctngAutomatedTransfer", 2), ("juniAcctngTransferOnFileFull", 3), ("juniAcctngRedundantTransfer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngFileXferMode.setStatus('current')
if mibBuilder.loadTexts: juniAcctngFileXferMode.setDescription('Indicates the mode to use for transfering accounting data to remote client. juniAcctngManualTransfer - Administrator is responsible for manually transfering collected accounting data off of the system. juniAcctngAutomatedTransfer - The agent will automatically transfer the collected accounting data based at a acctngFileIntervals using an entry in the juniFileXferTable pointed to by juniAcctngFileXferIndex. If a manager sets this object to this value, a corresponding row in the juniFileXferTable must exist, otherwise the set command will fail. juniActngTransferOnFileFull - The agent will automatically transfer the collected accounting data when the file reaches the maximum size defined by acctngFileMaximumSize. If a manager sets this object to this value, a corresponding row in the juniFileXferTable must exist, otherwise the set command will fail. juniAcctngRedundantTransfer - The agent will automatically transfer two copies of the accounting data based on the acctngFileInterval. One copy will go to the juniFileXferTable entry identified by juniAcctngFileXferIndex and one copy will go the the juniFileXferTable entry identified by juniAcctngFileXferSecondaryIndex.')
juniAcctngFileXferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngFileXferIndex.setStatus('current')
if mibBuilder.loadTexts: juniAcctngFileXferIndex.setDescription('Identifies an entry in the juniFileXferTable, which defines the file transfer parameters to use when the agent is configured to automatically transfer collected accounting data files. A set to this object will fail if a corresponding entry in the juniFileXferTable does not exist or it is not set to juniFileXferAcctngStatistics.')
juniAcctngFileXferSecondaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniAcctngFileXferSecondaryIndex.setStatus('current')
if mibBuilder.loadTexts: juniAcctngFileXferSecondaryIndex.setDescription('Identifies a backup or secondary entry in the juniFileXferTable, which defines the file transfer parameters to use when the agent is configured to automatically transfer collected accounting data files. A set to this object will fail if a corresponding entry in the juniFileXferTable does not exist or it is not set to juniFileXferAcctngStatistics.')
juniAcctngObsInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1), )
if mibBuilder.loadTexts: juniAcctngObsInterfaceTable.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngObsInterfaceTable.setDescription('This table was obsoleted when the indexing changed.')
juniAcctngObsInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1), ).setIndexNames((0, "Juniper-UNI-IF-MIB", "juniIfType"))
if mibBuilder.loadTexts: juniAcctngObsInterfaceEntry.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngObsInterfaceEntry.setDescription('Obsolete table entry.')
juniAcctngObsInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 1), JuniAcctngAdminType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngObsInterfaceAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngObsInterfaceAdminStatus.setDescription('Obsolete object.')
juniAcctngObsInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 2), JuniAcctngOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngObsInterfaceOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngObsInterfaceOperStatus.setDescription('Obsolete object.')
juniAcctngObsInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngObsInterfaceRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngObsInterfaceRowStatus.setDescription('Obsolete object.')
juniAcctngObsInterfaceAccntgFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngObsInterfaceAccntgFileIndex.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngObsInterfaceAccntgFileIndex.setDescription('Obsolete object.')
juniAcctngInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2), )
if mibBuilder.loadTexts: juniAcctngInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceTable.setDescription('A table controlling the collection of accounting data on specific interfaces types. This table provides an efficient mechanism to enable and/or disable data collection on all interfaces of a specified type. This table replaces the obsolete version with the same name.')
juniAcctngInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2, 1), ).setIndexNames((0, "Juniper-UNI-IF-MIB", "juniIfType"), (0, "Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceFileIndex"), (0, "Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceLocation"))
if mibBuilder.loadTexts: juniAcctngInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceEntry.setDescription('An entry which controls whether accounting data is to be collected on interfaces of a specific type, to a specific accounting file and by the systems interface location.')
juniAcctngInterfaceFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: juniAcctngInterfaceFileIndex.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceFileIndex.setDescription('This object selects the acctngFileTable entry for the collection statistics for this interface type. The value of this object is the same as the acctngFileIndex and is used to cross reference accounting data files in the AcctngFileTable. If the value of this object is zero (special value), then the combined interface type/location defined by this entry is collected into all entries in the acctngFileTable, i.e., all accounting files.')
juniAcctngInterfaceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2, 1, 2), JuniInterfaceLocation())
if mibBuilder.loadTexts: juniAcctngInterfaceLocation.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceLocation.setDescription('The interface location specification for this entry. If the value of this entry is a zero length string, then all system locations are included for the interface type defined by juniIfType.')
juniAcctngInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2, 1, 3), JuniAcctngAdminType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceAdminStatus.setDescription('The desired administrative state for accounting data collection for interfaces defined by the type of this entry. The administrative scope is for all interfaces of the type defined by the corresponding juniIfType for this entry.')
juniAcctngInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2, 1, 4), JuniAcctngOperType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngInterfaceOperStatus.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceOperStatus.setDescription('The operational state for accounting data collection on for all interfaces corresponding to this entries type.')
juniAcctngInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAcctngInterfaceRowStatus.setDescription('Controls creation/deletion of entries in this table.')
juniAcctngIfFinalStatsXferStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 3), )
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsTable.setStatus('current')
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsTable.setDescription('A table to display line cards interfaces final statistics transfer statistics.')
juniAcctngIfFinalStatsXferStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 3, 1), ).setIndexNames((0, "Juniper-ACCOUNTING-MIB", "juniAcctngIfFinalStatsXferStatsSlotNumber"))
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsEntry.setStatus('current')
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsEntry.setDescription("An entry is a display of one line card's interfaces final statistics transfer statistics.")
juniAcctngIfFinalStatsXferStatsSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14)))
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsSlotNumber.setStatus('current')
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsSlotNumber.setDescription('This object selects the slot number to display interfaces final statistics transfer statistics for the line module on that slot.')
juniAcctngIfFinalStatsXferStatsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsReceived.setStatus('current')
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsReceived.setDescription('Count of the total received interfaces final statistics records for the line module.')
juniAcctngIfFinalStatsXferStatsTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsTransferred.setStatus('current')
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsTransferred.setDescription('Count of the total transferred interfaces final statistics records for the line module.')
juniAcctngIfFinalStatsXferStatsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsDropped.setStatus('current')
if mibBuilder.loadTexts: juniAcctngIfFinalStatsXferStatsDropped.setDescription('Count of the total dropped interfaces final statistics records for the line module.')
juniAcctngVirtualRouterTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 5, 1), )
if mibBuilder.loadTexts: juniAcctngVirtualRouterTable.setStatus('current')
if mibBuilder.loadTexts: juniAcctngVirtualRouterTable.setDescription('This Table stores the configuration of Virtual Routers per collector (File Index) basis. Multiple Virtual Routers can be configured per collector (file index)')
juniAcctngVirtualRouterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 5, 1, 1), ).setIndexNames((0, "Juniper-ACCOUNTING-MIB", "juniAcctngVirtualRouterTableIndex"))
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableEntry.setStatus('current')
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableEntry.setDescription('An entry used to determine the starting point entry when using the ifStack schema.')
juniAcctngVirtualRouterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableIndex.setStatus('current')
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableIndex.setDescription('This Index to be used as a starting point in the Virtual Router Table configuration. The index to be returned in the Virtual Router Table will start from this value, going up.')
juniAcctngVirtualRouterTableVRName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableVRName.setStatus('current')
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableVRName.setDescription('Virtual Router name(s) space separated.')
juniAcctngVirtualRouterTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniAcctngVirtualRouterTableRowStatus.setDescription('Controls creation/deletion of entries in this table.')
juniAcctngSelectionSchema = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2))
if mibBuilder.loadTexts: juniAcctngSelectionSchema.setStatus('current')
if mibBuilder.loadTexts: juniAcctngSelectionSchema.setDescription('The root OBJECT IDENTIFIER under which accounting selection tree objects are assigned.')
juniAcctngSelectionSchemaIf = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1))
juniAcctngIfInOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 1))
juniAcctngIfInUcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 2))
juniAcctngIfInDiscards = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 3))
juniAcctngIfInErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 4))
juniAcctngIfInUnknownProtos = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 5))
juniAcctngIfOutOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 6))
juniAcctngIfOutUcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 7))
juniAcctngIfOutDiscards = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 8))
juniAcctngIfOutErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 9))
juniAcctngIfCorrelator = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 10))
juniAcctngIfInPolicedOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 11))
juniAcctngIfInPolicedPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 12))
juniAcctngIfInSpoofedPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 13))
juniAcctngIfOutPolicedOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 14))
juniAcctngIfOutPolicedPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 15))
juniAcctngIfOutSchedulerDropOctets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 16))
juniAcctngIfOutSchedulerDropPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 17))
juniAcctngIfLowerInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 18))
juniAcctngIfTimeOffset = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 19))
juniAcctngifInMulticastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 20))
juniAcctngifInBroadcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 21))
juniAcctngifOutMulticastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 22))
juniAcctngifOutBroadcastPkts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 1, 23))
juniAcctngSelectionSchemaIfStack = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 3))
juniAcctngSelectionSchemaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 4))
juniAcctngSelectionSchemaPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5))
juniAcctngSelectionSchemaIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6))
juniAcctngSelectionSchemaQos = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7))
juniAcctngGreenPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 1))
juniAcctngUpperGreenPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 2))
juniAcctngYellowPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 3))
juniAcctngUpperYellowPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 4))
juniAcctngRedPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 5))
juniAcctngUpperRedPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 6))
juniAcctngGreenBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 7))
juniAcctngUpperGreenBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 8))
juniAcctngYellowBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 9))
juniAcctngUpperYellowBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 10))
juniAcctngRedBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 11))
juniAcctngUpperRedBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 5, 12))
juniAcctngIgmpLowerIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 1))
juniAcctngIgmpRouterIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 2))
juniAcctngIgmpDestAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 3))
juniAcctngIgmpSourceIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 4))
juniAcctngIgmpMulticastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 5))
juniAcctngIgmpLowerIgmpCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 6))
juniAcctngIgmpLowerTimeStamp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 6, 7))
juniAcctngParentShapingRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 1))
juniAcctngParentSharedShapRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 2))
juniAcctngParentChildWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 3))
juniAcctngQueueLength = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 4))
juniAcctngForwardedRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 5))
juniAcctngAggDropRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 6))
juniAcctngForwardedPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 7))
juniAcctngForwardedBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 8))
juniAcctngGreenDropPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 9))
juniAcctngGreenDropBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 10))
juniAcctngYellowDropPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 11))
juniAcctngYellowDropBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 12))
juniAcctngRedDropPackets = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 13))
juniAcctngRedDropBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 14))
juniAcctngDropProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 15))
juniAcctngQueueProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 16))
juniAcctngSchedulerProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 17))
juniAcctngStatisticsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 18))
juniAcctngShapingMode = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 19))
juniAcctngShapingRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 20))
juniAcctngBurst = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 21))
juniAcctngAssuredRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 22))
juniAcctngWeight = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 23))
juniAcctngRedEnabled = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 24))
juniAcctngSharedShapingMode = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 25))
juniAcctngSharedShapingRate = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 26))
juniAcctngByteAdjType = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 27))
juniAcctngByteAdjBytes = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 2, 7, 28))
juniAcctngConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3))
juniAcctngGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1))
juniAcctngCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2))
juniAcctngCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 1)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngCompliance = juniAcctngCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngCompliance.setDescription('Obsolete compliance statement for switches that implement the Juniper Accounting Control MIB. This statement became obsolete when the juniAcctngSelectionSubtreeType object was deprecated.')
juniAcctngCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 2)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngBasicGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngCompliance2 = juniAcctngCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngCompliance2.setDescription('Obsolete compliance statement for switches that implement the Juniper Accounting Control MIB. This statement became obsolete when selection policy name and type objects were added.')
juniAcctngCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 3)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngBasicGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngCompliance3 = juniAcctngCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngCompliance3.setDescription('Obsolete compliance statement for switches that implement the Juniper Accounting Control MIB. This statement became obsolete when the interface control table was modified.')
juniAcctngCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 4)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngBasicGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngCompliance4 = juniAcctngCompliance4.setStatus('current')
if mibBuilder.loadTexts: juniAcctngCompliance4.setDescription('Obsolete compliance statement for switches that implement the Juniper Accounting Control MIB. This statement became obsolete when the selection control table was modified.')
juniAcctngCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 5)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngBasicGroup5"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngCompliance5 = juniAcctngCompliance5.setStatus('current')
if mibBuilder.loadTexts: juniAcctngCompliance5.setDescription('The compliance statement for switches that implement the Juniper Accounting Control MIB.')
juniAcctngCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 2, 6)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngBasicGroup6"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngCompliance6 = juniAcctngCompliance6.setStatus('current')
if mibBuilder.loadTexts: juniAcctngCompliance6.setDescription('The compliance statement for switches that implement the Juniper Accounting Control MIB.')
juniAcctngBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 1)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionSubtreeType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMaxIfStackLevels"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfStackRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferSecondaryIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceAdminStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceOperStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceAccntgFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngBasicGroup = juniAcctngBasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngBasicGroup.setDescription('Obsolete collection of objects providing control of the basic collection of accounting data for connection-less networks. This group became obsolete when juniAcctngSelectionSubtreeType was deprecated.')
juniAcctngBasicGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 2)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMaxIfStackLevels"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfStackRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferSecondaryIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceAdminStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceOperStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceAccntgFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngBasicGroup2 = juniAcctngBasicGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngBasicGroup2.setDescription('Obsolete collection of objects providing control of the basic collection of accounting data for connection-less networks. This group became obsolete when selection policy name and type objects were added.')
juniAcctngBasicGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 3)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMaxIfStackLevels"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionPolicyName"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionPolicyType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfStackRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferSecondaryIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceAdminStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceOperStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngObsInterfaceAccntgFileIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngBasicGroup3 = juniAcctngBasicGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngBasicGroup3.setDescription('Obsolete collection of objects providing control of the basic collection of accounting data for connection-less networks. This group became obsolete when the inteface control table was modified.')
juniAcctngDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 4)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionSubtreeType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngDeprecatedGroup = juniAcctngDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: juniAcctngDeprecatedGroup.setDescription('This group contains a deprecated object that is no longer recommended but may still be supported on some implemtations for backward compatibility.')
juniAcctngBasicGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 5)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceDescrFormat"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceNumberingMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileFormat"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMaxIfStackLevels"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionPolicyName"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionPolicyType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfStackRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferSecondaryIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceAdminStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceOperStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngBasicGroup4 = juniAcctngBasicGroup4.setStatus('current')
if mibBuilder.loadTexts: juniAcctngBasicGroup4.setDescription('Obsolete collection of objects providing control of the basic collection of accounting data for connection-less networks. This group became obsolete when the selection control table was modified.')
juniAcctngBasicGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 6)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceDescrFormat"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceNumberingMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileFormat"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionMaxIfStackLevels"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionPolicyName"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionPolicyType"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfStackRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfCreateDeleteStats"), ("Juniper-ACCOUNTING-MIB", "juniAcctngSelectionIfCreateDeleteStatsIfTypes"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferMode"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngFileXferSecondaryIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceAdminStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceOperStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngInterfaceRowStatus"), ("Juniper-ACCOUNTING-MIB", "juniAcctngIfFinalStatsXferStatsReceived"), ("Juniper-ACCOUNTING-MIB", "juniAcctngIfFinalStatsXferStatsTransferred"), ("Juniper-ACCOUNTING-MIB", "juniAcctngIfFinalStatsXferStatsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngBasicGroup5 = juniAcctngBasicGroup5.setStatus('obsolete')
if mibBuilder.loadTexts: juniAcctngBasicGroup5.setDescription('A collection of objects providing control of the basic collection of accounting data for connection-less networks.')
juniAcctngBasicGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 24, 3, 1, 7)).setObjects(("Juniper-ACCOUNTING-MIB", "juniAcctngVirtualRouterTableIndex"), ("Juniper-ACCOUNTING-MIB", "juniAcctngVirtualRouterTableVRName"), ("Juniper-ACCOUNTING-MIB", "juniAcctngVirtualRouterTableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniAcctngBasicGroup6 = juniAcctngBasicGroup6.setStatus('current')
if mibBuilder.loadTexts: juniAcctngBasicGroup6.setDescription('A collection of objects providing control of the Virtual Router based accounting.')
mibBuilder.exportSymbols("Juniper-ACCOUNTING-MIB", juniAcctngVirtualRouterTableIndex=juniAcctngVirtualRouterTableIndex, juniAcctngFileXferMode=juniAcctngFileXferMode, juniAcctngGroups=juniAcctngGroups, juniAcctngForwardedPackets=juniAcctngForwardedPackets, juniAcctngIfOutDiscards=juniAcctngIfOutDiscards, juniAcctngParentSharedShapRate=juniAcctngParentSharedShapRate, juniAcctngSchedulerProfile=juniAcctngSchedulerProfile, juniAcctngBurst=juniAcctngBurst, juniAcctngSelectionType=juniAcctngSelectionType, juniAcctngSelectionIfCreateDeleteStats=juniAcctngSelectionIfCreateDeleteStats, juniAcctngSharedShapingRate=juniAcctngSharedShapingRate, juniAcctngIgmpLowerIgmpCommand=juniAcctngIgmpLowerIgmpCommand, juniAcctngForwardedRate=juniAcctngForwardedRate, juniAcctngBasicGroup=juniAcctngBasicGroup, juniAcctngIfLowerInterface=juniAcctngIfLowerInterface, juniAcctngInterfaceLocation=juniAcctngInterfaceLocation, juniAcctngParentChildWeight=juniAcctngParentChildWeight, juniAcctngBasicGroup2=juniAcctngBasicGroup2, juniAcctngInterfaceEntry=juniAcctngInterfaceEntry, juniAcctngIfOutSchedulerDropPkts=juniAcctngIfOutSchedulerDropPkts, juniAcctngCompliance=juniAcctngCompliance, juniAcctngMIBObjects=juniAcctngMIBObjects, juniAcctngByteAdjType=juniAcctngByteAdjType, juniAcctngSelectionPolicyName=juniAcctngSelectionPolicyName, juniAcctngIfInOctets=juniAcctngIfInOctets, juniAcctngIfInPolicedPkts=juniAcctngIfInPolicedPkts, juniAcctngIgmpDestAddr=juniAcctngIgmpDestAddr, juniAcctngIfFinalStatsXferStatsTransferred=juniAcctngIfFinalStatsXferStatsTransferred, juniAcctngIfFinalStatsXferStatsSlotNumber=juniAcctngIfFinalStatsXferStatsSlotNumber, juniAcctngSharedShapingMode=juniAcctngSharedShapingMode, juniAcctngIfFinalStatsXferStatsEntry=juniAcctngIfFinalStatsXferStatsEntry, juniAcctngIfOutPolicedOctets=juniAcctngIfOutPolicedOctets, juniAcctngIfOutOctets=juniAcctngIfOutOctets, juniAcctngCompliance2=juniAcctngCompliance2, juniAcctngSelectionSchemaIf=juniAcctngSelectionSchemaIf, juniAcctngIfInDiscards=juniAcctngIfInDiscards, juniAcctngSelectionMode=juniAcctngSelectionMode, juniAcctngSelectionControl=juniAcctngSelectionControl, juniAcctngCompliance6=juniAcctngCompliance6, juniAcctngInterfaceAdminStatus=juniAcctngInterfaceAdminStatus, juniAcctngInterfaceRowStatus=juniAcctngInterfaceRowStatus, juniAcctngFileTable=juniAcctngFileTable, juniAcctngObsInterfaceOperStatus=juniAcctngObsInterfaceOperStatus, juniAcctngYellowPackets=juniAcctngYellowPackets, juniAcctngBasicGroup4=juniAcctngBasicGroup4, juniAcctngIfInSpoofedPkts=juniAcctngIfInSpoofedPkts, juniAcctngDeprecatedGroup=juniAcctngDeprecatedGroup, juniAcctngConformance=juniAcctngConformance, juniAcctngSelectionEntry=juniAcctngSelectionEntry, juniAcctngSelectionIfStackIfIndex=juniAcctngSelectionIfStackIfIndex, juniAcctngObsInterfaceAdminStatus=juniAcctngObsInterfaceAdminStatus, juniAcctngVirtualRouterTable=juniAcctngVirtualRouterTable, juniAcctngYellowDropPackets=juniAcctngYellowDropPackets, juniAcctngCompliance5=juniAcctngCompliance5, juniAcctngIfFinalStatsXferStatsDropped=juniAcctngIfFinalStatsXferStatsDropped, juniAcctngQueueProfile=juniAcctngQueueProfile, juniAcctngVirtualRouterTableRowStatus=juniAcctngVirtualRouterTableRowStatus, juniAcctngSelectionSchemaSystem=juniAcctngSelectionSchemaSystem, juniAcctngifOutMulticastPkts=juniAcctngifOutMulticastPkts, juniAcctngGreenBytes=juniAcctngGreenBytes, juniAcctngAssuredRate=juniAcctngAssuredRate, juniAcctngFileFormat=juniAcctngFileFormat, juniAcctngIfInPolicedOctets=juniAcctngIfInPolicedOctets, juniAcctngIgmpRouterIndex=juniAcctngIgmpRouterIndex, juniAcctngGreenPackets=juniAcctngGreenPackets, juniAcctngFileControl=juniAcctngFileControl, juniAcctngSelectionSchema=juniAcctngSelectionSchema, juniAcctngMIB=juniAcctngMIB, juniAcctngFileXferSecondaryIndex=juniAcctngFileXferSecondaryIndex, juniAcctngInterfaceTable=juniAcctngInterfaceTable, juniAcctngScalarGroup=juniAcctngScalarGroup, juniAcctngSelectionIfCreateDeleteStatsIfTypes=juniAcctngSelectionIfCreateDeleteStatsIfTypes, juniAcctngInterfaceFileIndex=juniAcctngInterfaceFileIndex, juniAcctngVirtualRouterControl=juniAcctngVirtualRouterControl, juniAcctngShapingMode=juniAcctngShapingMode, juniAcctngSelectionIfStackStartTable=juniAcctngSelectionIfStackStartTable, juniAcctngIgmpLowerIndex=juniAcctngIgmpLowerIndex, juniAcctngSelectionSchemaPolicy=juniAcctngSelectionSchemaPolicy, juniAcctngSelectionSchemaQos=juniAcctngSelectionSchemaQos, juniAcctngObsInterfaceTable=juniAcctngObsInterfaceTable, juniAcctngIgmpSourceIndex=juniAcctngIgmpSourceIndex, juniAcctngInterfaceOperStatus=juniAcctngInterfaceOperStatus, juniAcctngSelectionIfStackStartEntry=juniAcctngSelectionIfStackStartEntry, juniAcctngIfFinalStatsXferStatsReceived=juniAcctngIfFinalStatsXferStatsReceived, juniAcctngWeight=juniAcctngWeight, juniAcctngIfInUcastPkts=juniAcctngIfInUcastPkts, juniAcctngRedDropPackets=juniAcctngRedDropPackets, juniAcctngVirtualRouterTableEntry=juniAcctngVirtualRouterTableEntry, juniAcctngIgmpLowerTimeStamp=juniAcctngIgmpLowerTimeStamp, juniAcctngFileXferIndex=juniAcctngFileXferIndex, juniAcctngIfTimeOffset=juniAcctngIfTimeOffset, juniAcctngUpperYellowPackets=juniAcctngUpperYellowPackets, juniAcctngUpperGreenPackets=juniAcctngUpperGreenPackets, juniAcctngUpperRedBytes=juniAcctngUpperRedBytes, juniAcctngIfOutErrors=juniAcctngIfOutErrors, juniAcctngSelectionPolicyType=juniAcctngSelectionPolicyType, juniAcctngGreenDropPackets=juniAcctngGreenDropPackets, juniAcctngSelectionIfStackRowStatus=juniAcctngSelectionIfStackRowStatus, juniAcctngIfFinalStatsXferStatsTable=juniAcctngIfFinalStatsXferStatsTable, juniAcctngIgmpMulticastGroup=juniAcctngIgmpMulticastGroup, juniAcctngParentShapingRate=juniAcctngParentShapingRate, juniAcctngShapingRate=juniAcctngShapingRate, juniAcctngCompliance3=juniAcctngCompliance3, PYSNMP_MODULE_ID=juniAcctngMIB, juniAcctngRedBytes=juniAcctngRedBytes, juniAcctngAggDropRate=juniAcctngAggDropRate, juniAcctngStatisticsProfile=juniAcctngStatisticsProfile, juniAcctngGreenDropBytes=juniAcctngGreenDropBytes, juniAcctngSelectionSubtreeType=juniAcctngSelectionSubtreeType, juniAcctngObsInterfaceAccntgFileIndex=juniAcctngObsInterfaceAccntgFileIndex, juniAcctngFileEntry=juniAcctngFileEntry, juniAcctngQueueLength=juniAcctngQueueLength, juniAcctngUpperRedPackets=juniAcctngUpperRedPackets, juniAcctngBasicGroup3=juniAcctngBasicGroup3, juniAcctngUpperYellowBytes=juniAcctngUpperYellowBytes, juniAcctngifOutBroadcastPkts=juniAcctngifOutBroadcastPkts, juniAcctngIfInUnknownProtos=juniAcctngIfInUnknownProtos, juniAcctngBasicGroup5=juniAcctngBasicGroup5, juniAcctngYellowDropBytes=juniAcctngYellowDropBytes, juniAcctngSelectionTable=juniAcctngSelectionTable, juniAcctngIfInErrors=juniAcctngIfInErrors, juniAcctngIfOutUcastPkts=juniAcctngIfOutUcastPkts, juniAcctngVirtualRouterTableVRName=juniAcctngVirtualRouterTableVRName, juniAcctngSelectionSchemaIfStack=juniAcctngSelectionSchemaIfStack, juniAcctngifInBroadcastPkts=juniAcctngifInBroadcastPkts, juniAcctngInterfaceNumberingMode=juniAcctngInterfaceNumberingMode, juniAcctngObsInterfaceEntry=juniAcctngObsInterfaceEntry, juniAcctngRedDropBytes=juniAcctngRedDropBytes, juniAcctngDropProfile=juniAcctngDropProfile, juniAcctngCompliance4=juniAcctngCompliance4, juniAcctngRedPackets=juniAcctngRedPackets, juniAcctngForwardedBytes=juniAcctngForwardedBytes, juniAcctngInterfaceControl=juniAcctngInterfaceControl, juniAcctngRedEnabled=juniAcctngRedEnabled, juniAcctngCompliances=juniAcctngCompliances, juniAcctngifInMulticastPkts=juniAcctngifInMulticastPkts, juniAcctngSelectionSchemaIgmp=juniAcctngSelectionSchemaIgmp, juniAcctngInterfaceDescrFormat=juniAcctngInterfaceDescrFormat, juniAcctngIfOutSchedulerDropOctets=juniAcctngIfOutSchedulerDropOctets, juniAcctngObsInterfaceRowStatus=juniAcctngObsInterfaceRowStatus, juniAcctngUpperGreenBytes=juniAcctngUpperGreenBytes, juniAcctngBasicGroup6=juniAcctngBasicGroup6, juniAcctngSelectionMaxIfStackLevels=juniAcctngSelectionMaxIfStackLevels, juniAcctngYellowBytes=juniAcctngYellowBytes, juniAcctngByteAdjBytes=juniAcctngByteAdjBytes, juniAcctngIfCorrelator=juniAcctngIfCorrelator, juniAcctngIfOutPolicedPkts=juniAcctngIfOutPolicedPkts)
