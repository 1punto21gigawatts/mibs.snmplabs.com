#
# PySNMP MIB module Wellfleet-OCX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-OCX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Gauge32, Counter32, TimeTicks, Bits, ModuleIdentity, IpAddress, MibIdentifier, iso, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Gauge32", "Counter32", "TimeTicks", "Bits", "ModuleIdentity", "IpAddress", "MibIdentifier", "iso", "Counter64", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSonetGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSonetGroup")
wfOcxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21), )
if mibBuilder.loadTexts: wfOcxConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigTable.setDescription('Ocx Configuration Table')
wfOcxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1), ).setIndexNames((0, "Wellfleet-OCX-MIB", "wfOcxConfigIndex"))
if mibBuilder.loadTexts: wfOcxConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigEntry.setDescription('An entry in the Ocx Configuration table')
wfOcxConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigDelete.setDescription('Create/Delete parameter')
wfOcxConfigDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigDisable.setDescription('Create/Delete parameter')
wfOcxConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigIndex.setDescription('Index for this physical Sonet interface.')
wfOcxConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigIfIndex.setDescription('this is value of ifIndex from the Interfaces table of MIB II (RFC 1213).')
wfOcxConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("los", 3), ("lof", 4), ("ais", 5), ("rdi", 6), ("loopback", 7), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigState.setDescription('State of the OCX Port.')
wfOcxConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 128, 512))).clone(namedValues=NamedValues(("noalarm", 1), ("los", 2), ("lof", 4), ("ais", 8), ("rdi", 16), ("loopback", 128), ("otherfailure", 512))).clone('noalarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigLineStatus.setDescription('the status of the OCX')
wfOcxConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state.')
wfOcxConfigConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oc3", 1), ("oc12", 2), ("oc48", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigConnType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigConnType.setDescription('This variable describes the Connector Type for this interface. This Mib is used for various types, OC3, OC12, etc...')
wfOcxConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOcxConfigType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigType.setDescription('This variable identifies whether a SONET or a SDH signal is used across this interface.')
wfOcxConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("b3zs", 2), ("cmi", 3), ("nrz", 4), ("rz", 5))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigLineCoding.setDescription('This variable describes the line coding for this interface.')
wfOcxConfigLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("shortsinglemode", 2), ("longsinglemode", 3), ("multimode", 4), ("coax", 5), ("utp", 6))).clone('shortsinglemode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigLineType.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigLineType.setDescription('This variable describes the line type for this interface.')
wfOcxConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("selfloop", 2), ("lineloop", 3))).clone('noloop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigLoopbackConfig.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigLoopbackConfig.setDescription('the loopback configuration of the OCX interface')
wfOcxConfigManagerMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frac", 1), ("clear", 2))).clone('frac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigManagerMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigManagerMethod.setDescription('This attribute has no affect on the Hardware configuration. This attribute is purely for any Network Management Tool to determine whether it configured the OCX as Fractional or Clear.')
wfOcxConfigApsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigApsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigApsEnable.setDescription('This attribute Enables or Disables the APS failover.')
wfOcxConfigScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigScrambling.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigScrambling.setDescription('This attribute turns scrambling on or off.')
wfOcxConfigClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 24, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("intrn", 1), ("extrn", 2))).clone('intrn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfOcxConfigClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: wfOcxConfigClkSource.setDescription('The source of the physical interface clocking signal, either internal or external.')
mibBuilder.exportSymbols("Wellfleet-OCX-MIB", wfOcxConfigDelete=wfOcxConfigDelete, wfOcxConfigClkSource=wfOcxConfigClkSource, wfOcxConfigLineCoding=wfOcxConfigLineCoding, wfOcxConfigManagerMethod=wfOcxConfigManagerMethod, wfOcxConfigScrambling=wfOcxConfigScrambling, wfOcxConfigDisable=wfOcxConfigDisable, wfOcxConfigIfIndex=wfOcxConfigIfIndex, wfOcxConfigState=wfOcxConfigState, wfOcxConfigIndex=wfOcxConfigIndex, wfOcxConfigLoopbackConfig=wfOcxConfigLoopbackConfig, wfOcxConfigLineType=wfOcxConfigLineType, wfOcxConfigLineStatus=wfOcxConfigLineStatus, wfOcxConfigConnType=wfOcxConfigConnType, wfOcxConfigLastChange=wfOcxConfigLastChange, wfOcxConfigType=wfOcxConfigType, wfOcxConfigEntry=wfOcxConfigEntry, wfOcxConfigApsEnable=wfOcxConfigApsEnable, wfOcxConfigTable=wfOcxConfigTable)
