#
# PySNMP MIB module FOUNDRY-SN-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
snIp, snVrrp, snGblRt, snFsrp, snLoopbackIf, snPim, snDvmrp, snRip = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snIp", "snVrrp", "snGblRt", "snFsrp", "snLoopbackIf", "snPim", "snDvmrp", "snRip")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Counter32, Bits, Integer32, Unsigned32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Counter32", "Bits", "Integer32", "Unsigned32", "ModuleIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

class RtrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class ClearStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("clear", 1))

class RowSts(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4))

class PortIndex(Integer32):
    pass

class Action(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("deny", 0), ("permit", 1))

class PhysAddress(OctetString):
    pass

class Metric(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PortMask(Integer32):
    pass

snGblRtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 8, 1))
snGblRtRouteOnly = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 8, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snGblRtRouteOnly.setStatus('mandatory')
if mibBuilder.loadTexts: snGblRtRouteOnly.setDescription("If this object is 'enabled', this switching router will only route packets. If this object is 'disabled', this switching router will first route packets. If route cannot perform, it will switch packets.")
snRtIpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1))
snRtClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 1), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearArpCache.setStatus('mandatory')
if mibBuilder.loadTexts: snRtClearArpCache.setDescription('clear(1) will clear arp cache table.')
snRtClearIpCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 2), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearIpCache.setStatus('mandatory')
if mibBuilder.loadTexts: snRtClearIpCache.setDescription('clear(1) will clear ip route cache table.')
snRtClearIpRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 3), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtClearIpRoute.setStatus('mandatory')
if mibBuilder.loadTexts: snRtClearIpRoute.setDescription('clear(1) will clear ip route table.')
snRtBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtBootpServer.setStatus('deprecated')
if mibBuilder.loadTexts: snRtBootpServer.setDescription('IP address of bootp server to which bootp packet need to be relayed.')
snRtBootpRelayMax = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtBootpRelayMax.setStatus('mandatory')
if mibBuilder.loadTexts: snRtBootpRelayMax.setDescription('Maximum number of hop the bootp packet should travel.')
snRtArpAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtArpAge.setStatus('mandatory')
if mibBuilder.loadTexts: snRtArpAge.setDescription("The time in minutes an ARP entry can be valid without relearning. 0 - Don't not age.")
snRtIpIrdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 7), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpIrdpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpIrdpEnable.setDescription('Perform router advertisement on this box.')
snRtIpLoadShare = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 8), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpLoadShare.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpLoadShare.setDescription('If more than one route available, use them to share load.')
snRtIpProxyArp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 9), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpProxyArp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpProxyArp.setDescription('Enable/disable proxy arp function in the box.')
snRtIpRarp = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 10), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarp.setDescription('Enable/disable RARP server.')
snRtIpTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTtl.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTtl.setDescription('The time to live value to be used in IP header of IP packet generated by the box.')
snRtIpSetAllPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpSetAllPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpSetAllPortConfig.setDescription('The value of this object is an index number of a snRtIpPortConfigTable row (i.e. snRtIpPortConfigPortIndex), which is the selected row to copy all of its read-writable data (i.e. snRtIpPortMtu and snRtIpPortEncap) to the rest of the rows in snRtIpPortConfigTable. Note: prior setting this object, all the intended data of the given row of the table must be set. Otherwise, the current data of the row will be used to set the entire ip interface configuration table. The previous setting will be overwritten by the new one.')
snRtIpFwdCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheMaxEntries.setDescription('The maximum number of ip forwarding table entries.')
snRtIpFwdCacheCurEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheCurEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheCurEntries.setDescription('The current number of ip forwarding table entries.')
snRtIpMaxStaticRouteEntries = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpMaxStaticRouteEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpMaxStaticRouteEntries.setDescription('The maximum number of static route entries in the static route table.')
snRtIpDirBcastFwd = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 16), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpDirBcastFwd.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpDirBcastFwd.setDescription('Enable/Disable directed broadcast forwarding.')
snRtIpLoadShareNumOfPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpLoadShareNumOfPaths.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpLoadShareNumOfPaths.setDescription('Number of routes are used to share load.')
snRtIpLoadShareMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpLoadShareMaxPaths.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpLoadShareMaxPaths.setDescription('Maximum number of routes can be configured to share load.')
snRtIpLoadShareMinPaths = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpLoadShareMinPaths.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpLoadShareMinPaths.setDescription('Minimum number of routes can be configured to share load.')
snRtIpProtocolRouterId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpProtocolRouterId.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpProtocolRouterId.setDescription('Router Id for all IP Protocols.')
snRtIpSourceRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 1, 21), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpSourceRoute.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpSourceRoute.setDescription('Enable/Disable source routing support, ability to drop the source routing packets.')
snRtIpStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2), )
if mibBuilder.loadTexts: snRtIpStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteTable.setDescription('IP static/default route table.')
snRtIpStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpStaticRouteIndex"))
if mibBuilder.loadTexts: snRtIpStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteEntry.setDescription('An entry in the IP static route table.')
snRtIpStaticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpStaticRouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteIndex.setDescription('The table index for a static route entry.')
snRtIpStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteDest.setDescription('Destination IP address. 0.0.0.0 for default route.')
snRtIpStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteMask.setDescription('Subnet mask associated with the destination IP address. 0.0.0.0 for default route mask.')
snRtIpStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteNextHop.setDescription('IP address of next hop router that is located on one of the directly attached IP subnet.')
snRtIpStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteMetric.setDescription('The metrics to next hop router.')
snRtIpStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 6), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteRowStatus.setDescription('To create or delete a static route entry.')
snRtIpStaticRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpStaticRouteDistance.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpStaticRouteDistance.setDescription('Administration distance.')
snRtIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3), )
if mibBuilder.loadTexts: snRtIpFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterTable.setDescription('IP filter table.')
snRtIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpFilterIndex"))
if mibBuilder.loadTexts: snRtIpFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterEntry.setDescription('An entry in the IP filter table.')
snRtIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterIndex.setDescription('The table index for a filter entry.')
snRtIpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1), ("qosEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterAction.setDescription('Action to take if the ip packet match with this filter.')
snRtIpFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterProtocol.setDescription("Transport protocol. 0 means don't care")
snRtIpFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterSourceIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterSourceIp.setDescription('Source IP address.')
snRtIpFilterSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterSourceMask.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterSourceMask.setDescription('Source IP subnet mask.')
snRtIpFilterDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterDestIp.setDescription('Destination IP address.')
snRtIpFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterDestMask.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterDestMask.setDescription('Destination IP subnet mask.')
snRtIpFilterOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("greater", 1), ("equal", 2), ("less", 3), ("notEqual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterOperator.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterOperator.setDescription('Type of comparison to perform. for now, this only applys to tcp or udp to compare the port number')
snRtIpFilterOperand = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterOperand.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterOperand.setDescription('For now this only refers to transport protocol port number. 0 means NA')
snRtIpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 10), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterRowStatus.setDescription('To create or delete a filter entry.')
snRtIpFilterEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 11), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterEstablished.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterEstablished.setDescription('Enable/Disable the filtering of established TCP packets of which the ACK or RESET flag is on. This additional filter only applies to TCP transport protocol.')
snRtIpFilterQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("level0", 0), ("level1", 1), ("level2", 2), ("level3", 3), ("level4", 4), ("level5", 5), ("level6", 6), ("level7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpFilterQosPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFilterQosPriority.setDescription('The router L4 Qos Priority values are: low(0) -- low prority high(1) -- high prority. The Priority values are: level0(0), level1(1), level2(2), level3(3), level4(4), level5(5), level6(6), level7(7) ')
snRtIpRarpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4), )
if mibBuilder.loadTexts: snRtIpRarpTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarpTable.setDescription('IP RARP table.')
snRtIpRarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRarpIndex"))
if mibBuilder.loadTexts: snRtIpRarpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarpEntry.setDescription('An entry in the IP Rarp table.')
snRtIpRarpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRarpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarpIndex.setDescription('The table index for a Rarp entry.')
snRtIpRarpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarpMac.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarpMac.setDescription('The Mac address for a Rarp entry.')
snRtIpRarpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarpIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarpIp.setDescription('The IP address for a Rarp entry.')
snRtIpRarpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 4, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRarpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRarpRowStatus.setDescription('To create or delete a Rarp entry.')
snRtStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5), )
if mibBuilder.loadTexts: snRtStaticArpTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpTable.setDescription('IP static arp table.')
snRtStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtStaticArpIndex"))
if mibBuilder.loadTexts: snRtStaticArpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpEntry.setDescription('An entry in the IP static arp table.')
snRtStaticArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtStaticArpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpIndex.setDescription('The table index for a static arp entry.')
snRtStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpIp.setDescription('The IP address for a static arp entry.')
snRtStaticArpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpMac.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpMac.setDescription('The Mac address for a static arp entry.')
snRtStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 4), PortIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpPort.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpPort.setDescription('The port index for a static arp entry.')
snRtStaticArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 5, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtStaticArpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtStaticArpRowStatus.setDescription('To create or delete a Static Arp entry.')
snRtIpPortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6), )
if mibBuilder.loadTexts: snRtIpPortAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAddrTable.setDescription('IP port address table.')
snRtIpPortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAddrPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAddress"))
if mibBuilder.loadTexts: snRtIpPortAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAddrEntry.setDescription('An entry in the IP Port Address table.')
snRtIpPortAddrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAddrPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAddrPortIndex.setDescription('The port index for port address entry.')
snRtIpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAddress.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAddress.setDescription('The port IP address.')
snRtIpPortSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortSubnetMask.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortSubnetMask.setDescription('The port IP address subnet mask.')
snRtIpPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAddrType.setDescription('The port IP address type.')
snRtIpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 6, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortRowStatus.setDescription('To create or delete a port address entry.')
snRtIpPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7), )
if mibBuilder.loadTexts: snRtIpPortAccessTable.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAccessTable.setDescription('IP port access table.')
snRtIpPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAccessPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortAccessDirection"))
if mibBuilder.loadTexts: snRtIpPortAccessEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAccessEntry.setDescription('An entry in the IP Port access table.')
snRtIpPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAccessPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAccessPortIndex.setDescription('The port index for port access entry.')
snRtIpPortAccessDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortAccessDirection.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAccessDirection.setDescription('The incoming or outgoing check for port access.')
snRtIpPortAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortAccessFilters.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAccessFilters.setDescription('1st octet correspond to 1st filter number and so on.')
snRtIpPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 7, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortAccessRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortAccessRowStatus.setDescription('To create or delete a port access entry.')
snRtIpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8), )
if mibBuilder.loadTexts: snRtIpPortConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortConfigTable.setDescription('IP port Config table.')
snRtIpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortConfigPortIndex"))
if mibBuilder.loadTexts: snRtIpPortConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortConfigEntry.setDescription('An entry in the IP Port Config table.')
snRtIpPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortConfigPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortConfigPortIndex.setDescription('The port index for port config entry.')
snRtIpPortMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 4470))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortMtu.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortMtu.setDescription('The maximun transfer unit.')
snRtIpPortEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2), ("hdlc", 3), ("ppp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortEncap.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortEncap.setDescription('Data link encapsulation to be used on the IP frame transmitted on the port.')
snRtIpPortMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortMetric.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortMetric.setDescription('The metric.')
snRtIpPortDirBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 8, 1, 5), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortDirBcastFwd.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpPortDirBcastFwd.setDescription('Enable/Disable directed broadcast forwarding on the port.')
snRtIpPortIfAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18), )
if mibBuilder.loadTexts: snRtIpPortIfAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAddrTable.setDescription('IP port If address table.')
snRtIpPortIfAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAddrInterfaceIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAddress"))
if mibBuilder.loadTexts: snRtIpPortIfAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAddrEntry.setDescription('An entry in the IP Port Address table.')
snRtIpPortIfAddrInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAddrInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAddrInterfaceIndex.setDescription('The InterfaceIndex for port address entry.')
snRtIpPortIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAddress.setDescription('The port IP address.')
snRtIpPortIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfSubnetMask.setDescription('The port IP address subnet mask.')
snRtIpPortIfAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2))).clone('primary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAddrType.setDescription('The port IP address type.')
snRtIpPortIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 18, 1, 5), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfRowStatus.setDescription('To create or delete a port address entry.')
snRtIpPortIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19), )
if mibBuilder.loadTexts: snRtIpPortIfAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAccessTable.setDescription('IP port If access table.')
snRtIpPortIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAccessInterfaceIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfAccessDirection"))
if mibBuilder.loadTexts: snRtIpPortIfAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAccessEntry.setDescription('An entry in the IP Port access table.')
snRtIpPortIfAccessInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAccessInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAccessInterfaceIndex.setDescription('The InterfaceIndex for port access entry.')
snRtIpPortIfAccessDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfAccessDirection.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAccessDirection.setDescription('The incoming or outgoing check for port access.')
snRtIpPortIfAccessFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfAccessFilters.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAccessFilters.setDescription('1st octet correspond to 1st filter number and so on.')
snRtIpPortIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 19, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfAccessRowStatus.setDescription('To create or delete a port access entry.')
snRtIpPortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20), )
if mibBuilder.loadTexts: snRtIpPortIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfConfigTable.setDescription('IP port If Config table.')
snRtIpPortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpPortIfConfigInterfaceIndex"))
if mibBuilder.loadTexts: snRtIpPortIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfConfigEntry.setDescription('An entry in the IP Port Config table.')
snRtIpPortIfConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpPortIfConfigInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfConfigInterfaceIndex.setDescription('The If index for port config entry.')
snRtIpPortIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfMtu.setDescription('The maximun transfer unit. Ethernet MTU Range: 46 to 1500 POS MTU Range: 60 to 4470 ATM MTU Range: 1500 to 9180 ATM SubIf MTU Range: 1500 to 9180 For jumbo support, MTU range could be higher.')
snRtIpPortIfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2), ("hdlc", 3), ("ppp", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfEncap.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfEncap.setDescription('Data link encapsulation to be used on the IP frame transmitted on the port.')
snRtIpPortIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfMetric.setDescription('The metric.')
snRtIpPortIfDirBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 20, 1, 5), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpPortIfDirBcastFwd.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpPortIfDirBcastFwd.setDescription('Enable/Disable directed broadcast forwarding on the port.')
snRtBcastFwd = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9))
snRtBcastFwdGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 1))
snRtUdpBcastFwdPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2))
snRtUdpHelper = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3))
snRtUdpBcastFwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 1, 1), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpBcastFwdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpBcastFwdEnable.setDescription('Enable or disable UDP broadcast forwarding service. When UDP broadcast forwarding is enabled, default entries are added to the UDP broadcast forwarding port table. When it is disabled, UDP broadcast forwarding port table is flushed to empty.')
snRtUdpBcastFwdPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1), )
if mibBuilder.loadTexts: snRtUdpBcastFwdPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpBcastFwdPortTable.setDescription('This table contains a list of UDP port numbers for which forwarding UDP broadcast is enabled.')
snRtUdpBcastFwdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpBcastFwdPortIndex"))
if mibBuilder.loadTexts: snRtUdpBcastFwdPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpBcastFwdPortEntry.setDescription('An entry of the UDP broadcast forwarding port table.')
snRtUdpBcastFwdPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtUdpBcastFwdPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpBcastFwdPortIndex.setDescription('The table index for a UDP broadcast forwarding port entry.')
snRtUdpBcastFwdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpBcastFwdPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpBcastFwdPortNumber.setDescription('UDP port number for which UDP broadcast forwarding is enabled.')
snRtUdpBcastFwdPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 2, 1, 1, 3), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpBcastFwdPortRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpBcastFwdPortRowStatus.setDescription('To create or delete a UDP broadcast forwarding port entry.')
snRtUdpHelperTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1), )
if mibBuilder.loadTexts: snRtUdpHelperTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpHelperTable.setDescription('UDP helper table.')
snRtUdpHelperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtUdpHelperPortIndex"), (0, "FOUNDRY-SN-IP-MIB", "snRtUdpHelperIndex"))
if mibBuilder.loadTexts: snRtUdpHelperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpHelperEntry.setDescription('An entry of the UDP helper table.')
snRtUdpHelperPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtUdpHelperPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpHelperPortIndex.setDescription('The port index for a UDP helper entry.')
snRtUdpHelperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtUdpHelperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpHelperIndex.setDescription('The table index for a UDP helper entry.')
snRtUdpHelperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpHelperAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpHelperAddr.setDescription('The UDP helper address. This is the address that UDP packets will be forwarded. It can be a helper address or a subnet broadcast address. But it cannot be 255.255.255.255 or 0.0.0.0.')
snRtUdpHelperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 9, 3, 1, 1, 4), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtUdpHelperRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtUdpHelperRowStatus.setDescription('To create or delete a UDP helper entry.')
snRtIpTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10))
snRtIpTraceRouteGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1))
snRtIpTraceRouteResult = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2))
snRtIpTraceRouteTargetAddr = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteTargetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteTargetAddr.setDescription('Target IP address of which trace route is performed.')
snRtIpTraceRouteMinTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteMinTtl.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteMinTtl.setDescription('Minimum TTL value carried in the first probe packet. Value 0 cannot be used for SET operations. This value is returned if traceroute is not running within the system.')
snRtIpTraceRouteMaxTtl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteMaxTtl.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteMaxTtl.setDescription('Maximum TTL value carried in the last probe packet. Value 0 cannot be used for SET operations. This value is returned if traceroute is not running within the system.')
snRtIpTraceRouteTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteTimeOut.setDescription('Time out period (in seconds) to wait for the response from the probe packet (i,e, the ICMP packet). Value 0 cannot be used for SET operations. This value is returned if traceroute is not running within the system.')
snRtIpTraceRouteControl = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("start", 1), ("abort", 2), ("success", 3), ("failure", 4), ("inProgress", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpTraceRouteControl.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteControl.setDescription("Only 'start' and 'abort' are writable values; 'success', 'failure' and 'inProgress' are readeable (or returned) values. Writing 'start' to this object to initiate the trace route operation. snRtIpTraceRouteDestAddr must have been init- ialized before 'start' is writen. This object will return 'inProgress' after trace route operation has started. During the 'inProgress' state, writing 'abort' to this object will stop the current trace route operation. If the destination address is reached, this object returned 'success'. snRtIpTraceRouteResultTable contains the routes (and the target address) to reach the destination address. If the destination address does not reach, timeout, or ending TTL reached, 'failure' is returned.")
snRtIpTraceRouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1), )
if mibBuilder.loadTexts: snRtIpTraceRouteResultTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteResultTable.setDescription('Trace route result table.')
snRtIpTraceRouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpTraceRouteResultIndex"))
if mibBuilder.loadTexts: snRtIpTraceRouteResultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteResultEntry.setDescription('An entry of the trace route result table.')
snRtIpTraceRouteResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteResultIndex.setDescription('The table index for a trace route result entry.')
snRtIpTraceRouteResultAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteResultAddr.setDescription('The router or the target address of which forms part of the route to reach the destination address.')
snRtIpTraceRouteResultRoundTripTime1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime1.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime1.setDescription('The round trip time between the first probe packet transmitted and the reponse ICMP packet received.')
snRtIpTraceRouteResultRoundTripTime2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 10, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime2.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpTraceRouteResultRoundTripTime2.setDescription('The round trip time between the second probe packet transmitted and the reponse ICMP packet received.')
snRtIpFwdCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11), )
if mibBuilder.loadTexts: snRtIpFwdCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheTable.setDescription('IP forwarding cache table.')
snRtIpFwdCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpFwdCacheIndex"))
if mibBuilder.loadTexts: snRtIpFwdCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheEntry.setDescription('An entry in the IP forwarding cache table.')
snRtIpFwdCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheIndex.setDescription('The table index for a ip forwarding cache table entry.')
snRtIpFwdCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheIp.setDescription('The IP address of a station.')
snRtIpFwdCacheMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheMac.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheMac.setDescription('The Mac address of an IP station.')
snRtIpFwdCacheNextHopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheNextHopIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheNextHopIp.setDescription('The next hop router IP address.')
snRtIpFwdCacheOutgoingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheOutgoingPort.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheOutgoingPort.setDescription('The outgoing port of which packets will forward to. Return port value of zero to indicate no outgoing port associated to this entry. Non-zero value has the following meanings: The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number. For virtual router interface, slot number is 15, port number is the virtual router port from 1 to 60.')
snRtIpFwdCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheType.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheType.setDescription("The 'dynamic' or 'permanent' type for a ip forwarding cache table entry.")
snRtIpFwdCacheAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("forward", 2), ("forUs", 3), ("waitForArp", 4), ("complexFilter", 5), ("icmpDeny", 6), ("dropPacket", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheAction.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheAction.setDescription('The action to take.')
snRtIpFwdCacheFragCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheFragCheck.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheFragCheck.setDescription('Check for fragmentation.')
snRtIpFwdCacheSnapHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheSnapHdr.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheSnapHdr.setDescription('Apply SNAP encapsulation.')
snRtIpFwdCacheVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpFwdCacheVLanId.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpFwdCacheVLanId.setDescription('The VLAN ID for a ip forwarding cache table entry. Return VLAN ID value of zero to indicate no VLAN associated to this entry.')
snIpAsPathAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12), )
if mibBuilder.loadTexts: snIpAsPathAccessListTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListTable.setDescription('Ip As-Path Access List table.')
snIpAsPathAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListIndex"), (0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListSequence"))
if mibBuilder.loadTexts: snIpAsPathAccessListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListEntry.setDescription('An entry in the Ip As-Path Access List table.')
snIpAsPathAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListIndex.setDescription('The table index for a filter entry.')
snIpAsPathAccessListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListSequence.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListSequence.setDescription('The table sequence index for a filter entry.')
snIpAsPathAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListAction.setDescription('Action to take if the bgp address match with this filter.')
snIpAsPathAccessListRegExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListRegExpression.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListRegExpression.setDescription('Autonomous system in the filter using a regular expression. Each character of the regular expression string is represented by one octet.')
snIpAsPathAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13), )
if mibBuilder.loadTexts: snIpCommunityListTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListTable.setDescription('Ip Community List table.')
snIpCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListIndex"), (0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListSequence"))
if mibBuilder.loadTexts: snIpCommunityListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListEntry.setDescription('An entry in the Ip Community List table.')
snIpCommunityListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListIndex.setDescription('The table index for a filter entry.')
snIpCommunityListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListSequence.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListSequence.setDescription('The table sequence index for a filter entry.')
snIpCommunityListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListAction.setDescription('Action to take if the bgp address match with this filter.')
snIpCommunityListCommNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListCommNum.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListCommNum.setDescription('A number from 1 to 0xFFFFFFFF. There are 20 of them. This integer number is represented by 4 OCTETs.')
snIpCommunityListInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListInternet.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListInternet.setDescription('Disabled/Enabled the Internet Community.')
snIpCommunityListNoAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListNoAdvertise.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListNoAdvertise.setDescription('Do not advertise this route to any peer (internal or external).')
snIpCommunityListNoExport = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListNoExport.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListNoExport.setDescription('Do not advertise this route to an EBGP peer.')
snIpCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpCommunityListLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListLocalAs.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListLocalAs.setDescription('Send this route to peers in other sub-autonomous systems within the local confederation. Do not advertise this route to an external system.')
snIpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14), )
if mibBuilder.loadTexts: snIpPrefixListTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListTable.setDescription('Ip Prefix List table.')
snIpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpPrefixListName"), (0, "FOUNDRY-SN-IP-MIB", "snIpPrefixListSequence"))
if mibBuilder.loadTexts: snIpPrefixListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListEntry.setDescription('An entry in the Ip As-Path Access List table.')
snIpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpPrefixListName.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListName.setDescription('An octet string of the ip prefix list name, each character of the name is represented by one octet.')
snIpPrefixListSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpPrefixListSequence.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListSequence.setDescription('The table sequence index for a filter entry.')
snIpPrefixListDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListDesc.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListDesc.setDescription('An octet string of the ip prefix list description, each character of the name is represented by one octet.')
snIpPrefixListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListAction.setDescription('Action to take if the ip prefix match with this filter.')
snIpPrefixListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListAddr.setDescription('Prefix IP address.')
snIpPrefixListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListMask.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListMask.setDescription('Prefix IP mask.')
snIpPrefixListGeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListGeValue.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListGeValue.setDescription('Greater than value.')
snIpPrefixListLeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListLeValue.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListLeValue.setDescription('Less than value.')
snIpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpPrefixListRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpPrefixListRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpAsPathAccessListStringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16), )
if mibBuilder.loadTexts: snIpAsPathAccessListStringTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringTable.setDescription('Ip As-Path Access List table, string version.')
snIpAsPathAccessListStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListStringName"), (0, "FOUNDRY-SN-IP-MIB", "snIpAsPathAccessListStringSequence"))
if mibBuilder.loadTexts: snIpAsPathAccessListStringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringEntry.setDescription('An entry in the Ip As-Path Access List table.')
snIpAsPathAccessListStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListStringName.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringName.setDescription('The table index for a filter entry, string version.')
snIpAsPathAccessListStringSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpAsPathAccessListStringSequence.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringSequence.setDescription('The table sequence index for a filter entry.')
snIpAsPathAccessListStringAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListStringAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringAction.setDescription('Action to take if the bgp address match with this filter.')
snIpAsPathAccessListStringRegExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListStringRegExpression.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringRegExpression.setDescription('Autonomous system in the filter using a regular expression. Each character of the regular expression string is represented by one octet.')
snIpAsPathAccessListStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpAsPathAccessListStringRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpAsPathAccessListStringRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpCommunityListStringTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17), )
if mibBuilder.loadTexts: snIpCommunityListStringTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringTable.setDescription('Ip Community ListString table, string version.')
snIpCommunityListStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListStringName"), (0, "FOUNDRY-SN-IP-MIB", "snIpCommunityListStringSequence"))
if mibBuilder.loadTexts: snIpCommunityListStringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringEntry.setDescription('An entry in the Ip Community ListString table.')
snIpCommunityListStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListStringName.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringName.setDescription('The table index for a filter entry.')
snIpCommunityListStringSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpCommunityListStringSequence.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringSequence.setDescription('The table sequence index for a filter entry.')
snIpCommunityListStringAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("permit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringAction.setDescription('Action to take if the bgp address match with this filter.')
snIpCommunityListStringCommNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringCommNum.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringCommNum.setDescription('A number from 1 to 0xFFFFFFFF. There are 20 of them. This integer number is represented by 4 OCTETs.')
snIpCommunityListStringInternet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringInternet.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringInternet.setDescription('Disabled/Enabled the Internet Community.')
snIpCommunityListStringNoAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringNoAdvertise.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringNoAdvertise.setDescription('Do not advertise this route to any peer (internal or external).')
snIpCommunityListStringNoExport = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringNoExport.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringNoExport.setDescription('Do not advertise this route to an EBGP peer.')
snIpCommunityListStringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpCommunityListStringLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpCommunityListStringLocalAs.setStatus('mandatory')
if mibBuilder.loadTexts: snIpCommunityListStringLocalAs.setDescription('Send this route to peers in other sub-autonomous systems within the local confederation. Do not advertise this route to an external system.')
snRtIpRipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1))
snRtIpRipEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipEnable.setDescription('Enable/disable ip rip routing.')
snRtIpRipUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21845))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipUpdateTime.setDescription('Ip rip update interval in seconds.')
snRtIpRipRedisEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisEnable.setDescription('Enable/disable redistribution to rip.')
snRtIpRipRedisDefMetric = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisDefMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisDefMetric.setDescription('Default metric to be used when redistribute route to rip.')
snRtIpRipSetAllPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipSetAllPortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipSetAllPortConfig.setDescription('The value of this object is an index number of a snRtIpRipPortConfigTable row (i.e. snRtIpRipPortConfigPortIndex), which is the selected row to copy all of its read-writable data (i.e. snRtIpRipPortVersion and snRtIpRipPortPoisonReverse) to the rest of the rows in snRtIpRipPortConfigTable. Note: prior setting this object, all the intended data of the given row of the table must be set. Otherwise, the current data of the row will be used to set the entire ip rip port configuration table. The previous setting will be overwritten by the new one.')
snRtIpRipGblFiltList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipGblFiltList.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipGblFiltList.setDescription('An ip rip global filter list, of which each octet contains a filter ID number that forms a group of filters. A valid entry in the snRtIpRipRouteFilterTable with the corresponding filter ID number (i.e. snRtIpRipRouteFilterId) must have been created before a filter list is initialized. NULL string will be returned if there are no entries of this kind.')
snRtIpRipFiltOnAllPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("deleteAllInBound", 2), ("deleteAllOutBound", 3), ("addAllInBound", 4), ("addAllOutBound", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipFiltOnAllPort.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipFiltOnAllPort.setDescription("Apply the ip rip global filter list snRtIpRipGblFiltList to all interfaces. This object is used to add all rip filter lists and delete all rip filter lists to/from all interfaces. Prior to sending this command, snRtIpRipGblFiltList must have been set to a proper filter list. The values that can be written are: deleteAllInBound(2)...delete all in-bound filter lists from all ports. deleteAllOutBound(3)..delete all out-bound filter lists from all ports. addAllInBound(4)......add all in-bound filter lists to all ports. addAllOutBound(5).....add all out-bound filter lists to all ports. If set operation failed, then a SET with value of (2) or (3) returns error code 'GenError'. If succeed, entries in the filter list are deleted immediately. The following values can be returned on reads: valid(1)....set operation is done and is valid.")
snRtIpRipDistance = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipDistance.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipDistance.setDescription('Administration distance.')
snRtIpRipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2), )
if mibBuilder.loadTexts: snRtIpRipPortConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortConfigTable.setDescription('IP Rip port Config table.')
snRtIpRipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortConfigPortIndex"))
if mibBuilder.loadTexts: snRtIpRipPortConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortConfigEntry.setDescription('An entry in the IP Rip Port Config table.')
snRtIpRipPortConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortConfigPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortConfigPortIndex.setDescription('The port index for ip rip port config entry.')
snRtIpRipPortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("v1Only", 1), ("v2Only", 2), ("v1CompatibleV2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortVersion.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortVersion.setDescription('The ip rip version on this port.')
snRtIpRipPortPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortPoisonReverse.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortPoisonReverse.setDescription('Enable/disable poison reverse.')
snRtIpRipPortLearnDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortLearnDefault.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortLearnDefault.setDescription('Apply the RIP router protocol learn-default option to the interface. The values that can be written are: disabled(0)...deleted the learn default option. enabled(1)....enabled the learn default option.')
snRtIpRipRedisTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3), )
if mibBuilder.loadTexts: snRtIpRipRedisTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisTable.setDescription('IP Rip Redistribution table.')
snRtIpRipRedisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipRedisIndex"))
if mibBuilder.loadTexts: snRtIpRipRedisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisEntry.setDescription('An entry in the IP Rip Redistribution table.')
snRtIpRipRedisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipRedisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisIndex.setDescription('The table index for a IP Rip Redistribution entry.')
snRtIpRipRedisAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisAction.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisAction.setDescription('The action to take when match this IP Rip Redistribution entry.')
snRtIpRipRedisProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("all", 2), ("static", 3), ("ospf", 4), ("bgp", 5), ("isis", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisProtocol.setDescription('The protocol to be distributed. other(1) cannot be used for SNMP-SET.')
snRtIpRipRedisIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisIp.setDescription('The ip address of the ip route to be distributed. 0.0.0.0 - all routes')
snRtIpRipRedisMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisMask.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisMask.setDescription('The ip subnet mask of the ip route to be distributed.')
snRtIpRipRedisMatchMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 6), Metric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisMatchMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisMatchMetric.setDescription('The metric of the route to be matched to determine the redistribution. 0 - any metric value')
snRtIpRipRedisSetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisSetMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisSetMetric.setDescription('The new metric of the route to be advertised. 0 - use the default metric.')
snRtIpRipRedisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 3, 1, 8), RowSts()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRedisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRedisRowStatus.setDescription('To create or delete a Redistribution entry.')
snRtIpRipRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4), )
if mibBuilder.loadTexts: snRtIpRipRouteFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterTable.setDescription('ip rip route filter table.')
snRtIpRipRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipRouteFilterId"))
if mibBuilder.loadTexts: snRtIpRipRouteFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterEntry.setDescription('An entry of the ip rip route filter table.')
snRtIpRipRouteFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipRouteFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterId.setDescription('The filter ID to identify a filter entry.')
snRtIpRipRouteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterAction.setDescription('Action to take if the ip rip packet matched with this filter.')
snRtIpRipRouteFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterIpAddr.setDescription('Route IP address to compare with any route IP addresses in a ip rip packet. IP address 0.0.0.0 always compare equals to any route IP addresses in any ip rip packets.')
snRtIpRipRouteFilterSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterSubnetMask.setDescription('Subnet mask to apply to the route IP address in a ip rip packet, the result is compared to snRtIpRipRouteFilterIpAddr. If snRtIpRipRouteFilterIpAddr is 0.0.0.0, this subnet mask value is ignored.')
snRtIpRipRouteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipRouteFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipRouteFilterRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2).....the row exists and is valid")
snRtIpRipNbrFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5), )
if mibBuilder.loadTexts: snRtIpRipNbrFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipNbrFilterTable.setDescription('ip rip neighbor filter table.')
snRtIpRipNbrFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipNbrFilterId"))
if mibBuilder.loadTexts: snRtIpRipNbrFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipNbrFilterEntry.setDescription('An entry of the ip rip neighbor filter table.')
snRtIpRipNbrFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipNbrFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipNbrFilterId.setDescription('The filter ID to identify a filter entry.')
snRtIpRipNbrFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipNbrFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipNbrFilterAction.setDescription('Action to take if the ip rip packet source IP address compares equal to the source IP address in this filter.')
snRtIpRipNbrFilterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipNbrFilterSourceIp.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipNbrFilterSourceIp.setDescription('Source IP address to compare with the source IP address in a ip rip packet. IP address 0.0.0.0 always compares equal to any source IP addresses in any ip rip packets.')
snRtIpRipNbrFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipNbrFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipNbrFilterRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2).....the row exists and is valid")
snRtIpRipPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6), )
if mibBuilder.loadTexts: snRtIpRipPortAccessTable.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortAccessTable.setDescription('ip interface rip access table.')
snRtIpRipPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortAccessPort"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortAccessDir"))
if mibBuilder.loadTexts: snRtIpRipPortAccessEntry.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortAccessEntry.setDescription('An entry of the ip interface rip access table.')
snRtIpRipPortAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortAccessPort.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortAccessPort.setDescription('The ip interface to which the rip filter applies.')
snRtIpRipPortAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortAccessDir.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortAccessDir.setDescription('The access direction of incoming packet filter or outgoing packet filter.')
snRtIpRipPortAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortAccessFilterList.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortAccessFilterList.setDescription('An ip rip filter list, of which each octet contains a filter ID number that forms a group of filters. A valid entry in the snRtIpRipRouteFilterTable with the corresponding filter ID number (i.e. snRtIpRipRouteFilterId) must have been created before a filter list is initialized.')
snRtIpRipPortAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortAccessRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: snRtIpRipPortAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2).....the row exists and is valid")
snRtIpRipPortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7), )
if mibBuilder.loadTexts: snRtIpRipPortIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfConfigTable.setDescription('IP Rip port If Config table.')
snRtIpRipPortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfConfigInterfaceIndex"))
if mibBuilder.loadTexts: snRtIpRipPortIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfConfigEntry.setDescription('An entry in the IP Rip Port If Config table.')
snRtIpRipPortIfConfigInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortIfConfigInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfConfigInterfaceIndex.setDescription('The If index for ip rip port config entry.')
snRtIpRipPortIfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("v1Only", 1), ("v2Only", 2), ("v1CompatibleV2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfVersion.setDescription('The ip rip version on this port.')
snRtIpRipPortIfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 3), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfPoisonReverse.setDescription('Enable/disable poison reverse.')
snRtIpRipPortIfLearnDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfLearnDefault.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfLearnDefault.setDescription('Apply the RIP router protocol learn-default option to the interface. The values that can be written are: disabled(0)...deleted the learn default option. enabled(1)....enabled the learn default option.')
snRtIpRipPortIfAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8), )
if mibBuilder.loadTexts: snRtIpRipPortIfAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfAccessTable.setDescription('ip interface rip access table.')
snRtIpRipPortIfAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfAccessPort"), (0, "FOUNDRY-SN-IP-MIB", "snRtIpRipPortIfAccessDir"))
if mibBuilder.loadTexts: snRtIpRipPortIfAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfAccessEntry.setDescription('An entry of the ip interface rip access table.')
snRtIpRipPortIfAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessPort.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfAccessPort.setDescription('The ip interface to which the rip filter applies.')
snRtIpRipPortIfAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessDir.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfAccessDir.setDescription('The access direction of incoming packet filter or outgoing packet filter.')
snRtIpRipPortIfAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessFilterList.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfAccessFilterList.setDescription('An ip rip filter list, of which each octet contains a filter ID number that forms a group of filters. A valid entry in the snRtIpRipRouteFilterTable with the corresponding filter ID number (i.e. snRtIpRipRouteFilterId) must have been created before a filter list is initialized.')
snRtIpRipPortIfAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snRtIpRipPortIfAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snRtIpRipPortIfAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2).....the row exists and is valid")
snDvmrpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1))
snDvmrpVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVersion.setDescription("The router's DVMRP version information.")
snDvmrpEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 2), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpEnable.setDescription('Enable or disable DVMRP on this router.')
snDvmrpGenerationId = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpGenerationId.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpGenerationId.setDescription('The generation identifier for the routing process. This is used by neighboring routers to detect whether pruning information should be resent.')
snDvmrpProbeInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpProbeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpProbeInterval.setDescription("This is the time interval at which the router sends out probe messages to discover neighbour routers. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpReportInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpReportInterval.setDescription("This is the time interval at which the router sends out full report messages. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpTriggerInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpTriggerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpTriggerInterval.setDescription("This is the time interval at which triggered updates are sent out. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpNeighborRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpNeighborRouterTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborRouterTimeout.setDescription("This is the time interval after which the neighbour router is considered down. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpRouteExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 4000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpRouteExpireTime.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteExpireTime.setDescription("This is the time interval after which the route expires and becomes unreachable. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpRouteDiscardTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 8000)).clone(340)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpRouteDiscardTime.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteDiscardTime.setDescription("This is the time interval after which a route is discarded from the route table. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpPruneAge = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpPruneAge.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpPruneAge.setDescription("This is the duration of time for which the prune state is stored. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpGraftRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpGraftRetransmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpGraftRetransmitTime.setDescription("This is the time interval after which a graft message will be retransmitted if graft acknowledge message has not been received. Value is in number of seconds. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpDefaultRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpDefaultRoute.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpDefaultRoute.setDescription("This is the IP address of a router that is connected to one of the directly attached subnet. If a multicast route is not present on the local router, this default route will be used for multicast forwarding. snDvmrpEnable must be 'enabled' before this object is writen.")
snDvmrpVInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13), )
if mibBuilder.loadTexts: snDvmrpVInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceTable.setDescription("The (conceptual) table listing the router's DVMRP virtual interfaces. snDvmrpEnable must be 'enabled' before this table is read or writen.")
snDvmrpVInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpVInterfaceVifIndex"))
if mibBuilder.loadTexts: snDvmrpVInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceEntry.setDescription('An entry (conceptual row) in the snDvmrpVInterfaceTable. This row augments ipMRouteInterfaceEntry in the IP Multicast MIB, where the threshold object resides.')
snDvmrpVInterfaceVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVInterfaceVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceVifIndex.setDescription('The ifIndex value of this DVMRP virtual interface.')
snDvmrpVInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tunnel", 1), ("querier", 2), ("subnet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceType.setDescription('The type of this DVMRP virtual interface, whether it uses a tunnel, a physical interface for which we are a querier, or a physical interface for which we are not a querier. For write operation, this object can only accept tunnel(1) to configure a tunnel interface or subnet(3) to configure a physical interface.')
snDvmrpVInterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVInterfaceOperState.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceOperState.setDescription('The current operational state of this DVMRP virtual interface.')
snDvmrpVInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceLocalAddress.setDescription('The IP address of the local end of this DVMRP virtual interface.')
snDvmrpVInterfaceRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceRemoteAddress.setDescription('The IP address of the remote end of this DVMRP virtual interface. For a tunnel, this is the IP address of the neighboring router. For a subnet, this is the subnet address.')
snDvmrpVInterfaceRemoteSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVInterfaceRemoteSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceRemoteSubnetMask.setDescription('The subnet mask for a directly connected subnet. For a tunnel, this should be 0.0.0.0.')
snDvmrpVInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceMetric.setDescription('The distance metric for this DVMRP virtual interface which is used to calculate distance vectors.')
snDvmrpVInterfaceTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceTtlThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceTtlThreshold.setDescription('This is the minimum time-to-live value to forward the packets out of this virtual interface.')
snDvmrpVInterfaceAdvertiseLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 9), RtrStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceAdvertiseLocal.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceAdvertiseLocal.setDescription('Enable or disable the advertising of this local route.')
snDvmrpVInterfaceEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 10), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceEncapsulation.setDescription('Enable or disable the encapsulation of the DVMRP control packets when using IPINIP encapsulation.')
snDvmrpVInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snDvmrpVInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVInterfaceStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2)....Setting it to 'valid' has the effect of changing the row to operative.")
snDvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14), )
if mibBuilder.loadTexts: snDvmrpNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborTable.setDescription("The (conceptual) table listing the router's DVMRP neighbors, as discovered by receiving Neighbor Probe messages. snDvmrpEnable must be 'enabled' before this table is read.")
snDvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpNeighborEntryIndex"))
if mibBuilder.loadTexts: snDvmrpNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborEntry.setDescription('An entry (conceptual row) in the snDvmrpNeighborTable.')
snDvmrpNeighborEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborEntryIndex.setDescription('The table entry index.')
snDvmrpNeighborVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborVifIndex.setDescription('The value of VifIndex for the virtual interface used to reach this DVMRP neighbor.')
snDvmrpNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborAddress.setDescription('The IP address of the DVMRP neighbor for which this entry contains information.')
snDvmrpNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborUpTime.setDescription('The time since this DVMRP neighbor (last) became a neighbor of the local router.')
snDvmrpNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborExpiryTime.setDescription('The minimum time remaining before this DVMRP neighbor will be aged out.')
snDvmrpNeighborGenerationId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborGenerationId.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborGenerationId.setDescription("The neighboring router's generation identifier.")
snDvmrpNeighborMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborMajorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborMajorVersion.setDescription("The neighboring router's major DVMRP version number.")
snDvmrpNeighborMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborMinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborMinorVersion.setDescription("The neighboring router's minor DVMRP version number.")
snDvmrpNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpNeighborCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpNeighborCapabilities.setDescription("This object describes the neighboring router's capabilities. The following shows the position of each bit: bit position meaning ----------- ------ 3 mtrace bit 2 generationID bit 1 prune bit 0 leaf bit The leaf bit indicates that the neighbor has only one interface with neighbors. The prune bit indicates that the neighbor supports pruning. The generationID bit indicates that the neighbor sends its generationID in Probe messages. The mtrace bit indicates that the neighbor can handle mtrace requests.")
snDvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15), )
if mibBuilder.loadTexts: snDvmrpRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteTable.setDescription("The routing table used by DVMRP in place of the unicast routing table. snDvmrpEnable must be 'enabled' before this table is read.")
snDvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteEntryIndex"))
if mibBuilder.loadTexts: snDvmrpRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteEntry.setDescription('An entry (conceptual row) containing the multicast routing information used by DVMRP in place of the unicast routing information.')
snDvmrpRouteEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteEntryIndex.setDescription('The table entry index.')
snDvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteSource.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteSource.setDescription('The network address which when combined with the corresponding value of snDvmrpRouteSourceMask identifies the sources for which this entry contains multicast routing information.')
snDvmrpRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteSourceMask.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteSourceMask.setDescription('The network mask which when combined with the corresponding value of snDvmrpRouteSource identifies the sources for which this entry contains multicast routing information.')
snDvmrpRouteUpstreamNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteUpstreamNeighbor.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteUpstreamNeighbor.setDescription('The address of the upstream neighbor (e.g., RPF neighbor) from which IP datagrams from these sources are received.')
snDvmrpRouteVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteVifIndex.setDescription('The value of snDvmrpVInterfaceVifIndex for the virtual interface on which IP datagrams sent by these sources are received.')
snDvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteMetric.setDescription('The distance in hops to the source subnet.')
snDvmrpRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 15, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out.')
snDvmrpRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16), )
if mibBuilder.loadTexts: snDvmrpRouteNextHopTable.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteNextHopTable.setDescription("The (conceptual) table containing information on the next hops on outgoing interfaces for routing IP multicast datagrams. snDvmrpEnable must be 'enabled' before this table is read.")
snDvmrpRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopSource"), (0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopSourceMask"), (0, "FOUNDRY-SN-IP-MIB", "snDvmrpRouteNextHopVifIndex"))
if mibBuilder.loadTexts: snDvmrpRouteNextHopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteNextHopEntry.setDescription('An entry (conceptual row) in the list of next hops on outgoing interfaces to which IP multicast datagrams from particular sources are routed.')
snDvmrpRouteNextHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopSource.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteNextHopSource.setDescription('The network address which when combined with the corresponding value of snDvmrpRouteNextHopSourceMask identifies the sources for which this entry specifies a next hop on an outgoing interface.')
snDvmrpRouteNextHopSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopSourceMask.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteNextHopSourceMask.setDescription('The network mask which when combined with the corresponding value of snDvmrpRouteNextHopSource identifies the sources for which this entry specifies a next hop on an outgoing interface.')
snDvmrpRouteNextHopVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteNextHopVifIndex.setDescription('The snDvmrpVInterfaceVifIndex value of the virtual interface for the outgoing interface for this next hop.')
snDvmrpRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leaf", 1), ("branch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpRouteNextHopType.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpRouteNextHopType.setDescription('Type is leaf if no neighbors exist on the outgoing virtual interface. Otherwise, type is branch.')
snDvmrpVIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17), )
if mibBuilder.loadTexts: snDvmrpVIfStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatTable.setDescription("The (conceptual) table listing the router's DVMRP virtual interface statistical counters. snDvmrpEnable must be 'enabled' before this table is read.")
snDvmrpVIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snDvmrpVIfStatVifIndex"))
if mibBuilder.loadTexts: snDvmrpVIfStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatEntry.setDescription('An entry (conceptual row) in the snDvmrpVIfStatTable.')
snDvmrpVIfStatVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatVifIndex.setDescription('The ifIndex value of this DVMRP virtual interface.')
snDvmrpVIfStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInPkts.setDescription('The number of packets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutPkts.setDescription('The number of packets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInOctets.setDescription('The number of octets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutOctets.setDescription('The number of octets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatInProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInProbePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInProbePkts.setDescription('The number of probe packets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutProbePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutProbePkts.setDescription('The number of probe packets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatDiscardProbePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardProbePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardProbePkts.setDescription('The number of probe packets that have been discarded by the DVMRP virtual interface.')
snDvmrpVIfStatInRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInRtUpdatePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInRtUpdatePkts.setDescription('The number of route update packets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutRtUpdatePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutRtUpdatePkts.setDescription('The number of route update packets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatDiscardRtUpdatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardRtUpdatePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardRtUpdatePkts.setDescription('The number of route update packets that have been discarded by the DVMRP virtual interface.')
snDvmrpVIfStatInGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInGraftPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInGraftPkts.setDescription('The number of graft packets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutGraftPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutGraftPkts.setDescription('The number of graft packets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatDiscardGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardGraftPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardGraftPkts.setDescription('The number of graft packets that have been discarded by the DVMRP virtual interface.')
snDvmrpVIfStatInGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInGraftAckPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInGraftAckPkts.setDescription('The number of graft acknowledge packets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutGraftAckPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutGraftAckPkts.setDescription('The number of graft acknowledge packets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatDiscardGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardGraftAckPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardGraftAckPkts.setDescription('The number of graft acknowledge packets that have been discarded by the DVMRP virtual interface.')
snDvmrpVIfStatInPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatInPrunePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatInPrunePkts.setDescription('The number of prune packets that have arrived on the DVMRP virtual interface.')
snDvmrpVIfStatOutPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatOutPrunePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatOutPrunePkts.setDescription('The number of prune packets that have been sent on the DVMRP virtual interface.')
snDvmrpVIfStatDiscardPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 5, 1, 17, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardPrunePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snDvmrpVIfStatDiscardPrunePkts.setDescription('The number of prune packets that have been discarded by the DVMRP virtual interface.')
snFsrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1))
snFsrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2))
snFsrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpGroupOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpGroupOperMode.setDescription('The FSRP is configured on this system either enabled or disabled and the default is disabled mode. disabled(0)..........disable FSRP enabled(1)...........activate FSRP')
snFsrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfStateChangeTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfStateChangeTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate FSRP interface state change traps.')
snFsrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: snFsrpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfTable.setDescription('The FSRP Interface Table describes the interfaces from the viewpoint of FSRP.')
snFsrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snFsrpIfPort"), (0, "FOUNDRY-SN-IP-MIB", "snFsrpIfIpAddress"))
if mibBuilder.loadTexts: snFsrpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfEntry.setDescription('The FSRP Interface Entry describes one interface from the viewpoint of FSRP.')
snFsrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFsrpIfPort.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfPort.setDescription('The physical router port of this FSRP interface.')
snFsrpIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFsrpIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfIpAddress.setDescription('The IP Address of the physical router port of this interface.')
snFsrpIfVirRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfVirRtrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfVirRtrIpAddr.setDescription('The IP Address of the Virtual Router for the interface. The Virtual Router IP address need to be configured on the interface before Redundant Router Function can operate on the interface. This address has to be same on all the routers that going to participate in the Redundant Router Function on a given subnet.')
snFsrpIfOtherRtrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfOtherRtrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfOtherRtrIpAddr.setDescription('The IP Address of the Other Router on this ip subnet that operates FSRP and to whom the Keep Alive message need to be sent by this router. This object must be configured for FSRP to work correctly')
snFsrpIfPreferLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfPreferLevel.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfPreferLevel.setDescription('The higher the number the higher the priority is. This parameter decides which router should becomes the Active Router for the interface. A Router with higher priority selected to becomes the Active Router.')
snFsrpIfTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 6), PortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfTrackPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snFsrpIfTrackPortMask.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each bit is a port of the system. Default value is 0. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The Standalone router FSRP Track port membership (Not used for Chassis Product)")
snFsrpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snFsrpIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("negotiating", 1), ("standby", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snFsrpIfState.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfState.setDescription("This object specifies the FSRP Router's interface state as: init(0)...initialization state. negotiating(1)...negotiating state. standby(2)...standby state. active(3)...active state.")
snFsrpIfKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfKeepAliveTime.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfKeepAliveTime.setDescription('The heart-beat is from 1 to 120 seconds.')
snFsrpIfRouterDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfRouterDeadTime.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfRouterDeadTime.setDescription('The hold time of the Fsrp router is from 3 to 255 seconds.')
snFsrpIfChassisTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfChassisTrackPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snFsrpIfChassisTrackPortMask.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each bit is a port of the system. Default value is 0. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The Chassis router FSRP Track port membership. (It was obsoleted after release 07100, replaced by snFsrpIfTrackPortList)")
snFsrpIfTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 7, 2, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snFsrpIfTrackPortList.setStatus('mandatory')
if mibBuilder.loadTexts: snFsrpIfTrackPortList.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number. Default value is 0 length octet string. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router FSRP physical track port membership.")
snPimMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1))
snPimSMMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2))
snPimEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 1), RtrStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimEnable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimEnable.setDescription('Enable or disable PIM on this router.')
snPimNeighborRouterTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimNeighborRouterTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborRouterTimeout.setDescription("This is the time interval after which the neighbour router is considered down. Value is in number of seconds. snPimEnable must be 'enabled' before this object is writen.")
snPimHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimHelloTime.setDescription("This is the interval at which hello message is sent out an interface to the neighbouring router. This is used to detect the presence or abscense of a neighbouring router. Value is in number of seconds. snPimEnable must be 'enabled' before this object is writen.")
snPimPruneTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimPruneTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimPruneTime.setDescription("This is the duration of time for which the prune state is stored. Value is in number of seconds. snPimEnable must be 'enabled' before this object is writen.")
snPimGraftRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimGraftRetransmitTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimGraftRetransmitTime.setDescription("This is the time interval after which a graft message will be retransmitted if graft acknowledge message has not been received. Value is in number of seconds. snPimEnable must be 'enabled' before this object is writen.")
snPimInactivityTime = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimInactivityTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimInactivityTime.setDescription("This is the interval after which the forwarding entry is deleted. When a packet is received for a group entry, this time is reset. This is used to only keep the forwarding entries for the active sessions. Value is in number of seconds. snPimEnable must be 'enabled' before this object is writen.")
snPimVInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7), )
if mibBuilder.loadTexts: snPimVInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceTable.setDescription("The (conceptual) table listing the router's PIM virtual interfaces. snPimEnable must be 'enabled' before this table is read or writen.")
snPimVInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimVInterfaceVifIndex"))
if mibBuilder.loadTexts: snPimVInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceEntry.setDescription('An entry (conceptual row) in the snPimVInterfaceTable.')
snPimVInterfaceVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVInterfaceVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceVifIndex.setDescription('The ifIndex value of this PIM virtual interface.')
snPimVInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("subnet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceType.setDescription('The type of PIM virtual interface, whether it uses a tunnel or a physical interface.')
snPimVInterfaceLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceLocalAddress.setDescription('The IP address of the local end of this PIM virtual interface.')
snPimVInterfaceLocalSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVInterfaceLocalSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceLocalSubnetMask.setDescription('The network mask for the IP address of the PIM virtual interface. For a tunnel, this should be 0.0.0.0.')
snPimVInterfaceRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceRemoteAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceRemoteAddress.setDescription('The IP address of the remote end of this PIM virtual interface.')
snPimVInterfaceDR = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVInterfaceDR.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceDR.setDescription('The Designated Router on this PIM virtual interface. For point-to-point interfaces, this object has the value 0.0.0.0.')
snPimVInterfaceTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceTtlThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceTtlThreshold.setDescription('This is the minimum time-to-live value to forward the packets out of this interface.')
snPimVInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative. valid(2)....Setting it to 'valid' has the effect of changing the row to operative.")
snPimVInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2))).clone('dense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimVInterfaceMode.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVInterfaceMode.setDescription('The configured mode of this PIM interface.')
snPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8), )
if mibBuilder.loadTexts: snPimNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborTable.setDescription("The (conceptual) table listing the router's PIM neighbors. snPimEnable must be 'enabled' before this table is read.")
snPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimNeighborEntryIndex"))
if mibBuilder.loadTexts: snPimNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborEntry.setDescription('An entry (conceptual row) in the snPimNeighborTable.')
snPimNeighborEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborEntryIndex.setDescription('The table entry index.')
snPimNeighborVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborVifIndex.setDescription('The value of VifIndex for the virtual interface used to reach this PIM neighbor.')
snPimNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborAddress.setDescription('The IP address of the PIM neighbor for which this entry contains information.')
snPimNeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborUpTime.setDescription('The time since this PIM neighbor (last) became a neighbor of the local router.')
snPimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 8, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimNeighborExpiryTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimNeighborExpiryTime.setDescription('The minimum time remaining before this PIM neighbor will be aged out.')
snPimVIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9), )
if mibBuilder.loadTexts: snPimVIfStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatTable.setDescription("The (conceptual) table listing the router's PIM virtual interface statistical counters. snPimEnable must be 'enabled' before this table is read.")
snPimVIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimVIfStatVifIndex"))
if mibBuilder.loadTexts: snPimVIfStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatEntry.setDescription('An entry (conceptual row) in the snPimVIfStatTable.')
snPimVIfStatVifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatVifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatVifIndex.setDescription('The ifIndex value of this PIM virtual interface.')
snPimVIfStatInJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInJoinPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatInJoinPkts.setDescription('The number of join packets that have arrived on the PIM virtual interface.')
snPimVIfStatOutJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutJoinPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatOutJoinPkts.setDescription('The number of join packets that have been sent on the PIM virtual interface.')
snPimVIfStatDiscardJoinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardJoinPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatDiscardJoinPkts.setDescription('The number of join packets that have been discarded by the PIM virtual interface.')
snPimVIfStatInPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInPrunePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatInPrunePkts.setDescription('The number of prune packets that have arrived on the PIM virtual interface.')
snPimVIfStatOutPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutPrunePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatOutPrunePkts.setDescription('The number of prune packets that have been sent on the PIM virtual interface.')
snPimVIfStatDiscardPrunePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardPrunePkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatDiscardPrunePkts.setDescription('The number of prune packets that have been discarded by the PIM virtual interface.')
snPimVIfStatInAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInAssertPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatInAssertPkts.setDescription('The number of assert packets that have arrived on the PIM virtual interface.')
snPimVIfStatOutAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutAssertPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatOutAssertPkts.setDescription('The number of assert packets that have been sent on the PIM virtual interface.')
snPimVIfStatDiscardAssertPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardAssertPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatDiscardAssertPkts.setDescription('The number of assert packets that have been discarded by the PIM virtual interface.')
snPimVIfStatInHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInHelloPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatInHelloPkts.setDescription('The number of hello packets that have arrived on the PIM virtual interface.')
snPimVIfStatOutHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutHelloPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatOutHelloPkts.setDescription('The number of hello packets that have been sent on the PIM virtual interface.')
snPimVIfStatDiscardHelloPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardHelloPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatDiscardHelloPkts.setDescription('The number of hello packets that have been discarded by the PIM virtual interface.')
snPimVIfStatInGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInGraftPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatInGraftPkts.setDescription('The number of graft packets that have arrived on the PIM virtual interface.')
snPimVIfStatOutGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutGraftPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatOutGraftPkts.setDescription('The number of graft packets that have been sent on the PIM virtual interface.')
snPimVIfStatDiscardGraftPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardGraftPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatDiscardGraftPkts.setDescription('The number of graft packets that have been discarded by the PIM virtual interface.')
snPimVIfStatInGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatInGraftAckPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatInGraftAckPkts.setDescription('The number of graft acknowledge packets that have arrived on the PIM virtual interface.')
snPimVIfStatOutGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatOutGraftAckPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatOutGraftAckPkts.setDescription('The number of graft acknowledge packets that have been sent on the PIM virtual interface.')
snPimVIfStatDiscardGraftAckPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 1, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimVIfStatDiscardGraftAckPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snPimVIfStatDiscardGraftAckPkts.setDescription('The number of graft acknowledge packets that have been discarded by the PIM virtual interface.')
snPimJoinPruneInterval = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimJoinPruneInterval.setStatus('mandatory')
if mibBuilder.loadTexts: snPimJoinPruneInterval.setDescription("The default interval in seconds at which periodic PIM-SM Join/Prune messages are to be sent. snPimEnable must be 'enabled' before this table is read or writen.")
snPimCandidateBSRTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2), )
if mibBuilder.loadTexts: snPimCandidateBSRTable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateBSRTable.setDescription('Candidate Bootstrap Router information.')
snPimCandidateBSREntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimCandidateBSRPortID"))
if mibBuilder.loadTexts: snPimCandidateBSREntry.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateBSREntry.setDescription('An entry (conceptual row) in the snPimCandidateBSRTable.')
snPimCandidateBSRPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateBSRPortID.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateBSRPortID.setDescription('The IP address of the PIM interface. The bit 0 to bit 7: port number. The bit 8 to bit 11: slot number.')
snPimCandidateBSRIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimCandidateBSRIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateBSRIPAddress.setDescription('The (unicast) address of the Candidate BSR.')
snPimCandidateBSRHashMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateBSRHashMaskLen.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateBSRHashMaskLen.setDescription('The hash mask value for this router as a candidate bootstrap router.')
snPimCandidateBSRPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateBSRPreference.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateBSRPreference.setDescription('The preference value for this router as a candidate bootstrap router.')
snPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3), )
if mibBuilder.loadTexts: snPimRPSetTable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimRPSetTable.setDescription("The (conceptual) table listing PIM information for candidate Rendezvous Points (RPs) for IP multicast groups. When the local router is the BSR, this information is obtained from received Candidate-RP-Advertisements. When the local router is not the BSR, this information is obtained from received RP-Set messages. snPimEnable must be 'enabled' before this table is read or writen.")
snPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimRPSetGroupAddress"), (0, "FOUNDRY-SN-IP-MIB", "snPimRPSetMask"), (0, "FOUNDRY-SN-IP-MIB", "snPimRPSetIPAddress"))
if mibBuilder.loadTexts: snPimRPSetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snPimRPSetEntry.setDescription('An entry (conceptual row) in the snPimRPSetTable.')
snPimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimRPSetGroupAddress.setDescription('The IP multicast group address which, when combined with snPimRPSetGroupMask, gives the group prefix for which this entry contains information about the Candidate-RP.')
snPimRPSetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetMask.setStatus('mandatory')
if mibBuilder.loadTexts: snPimRPSetMask.setDescription('The multicast group address mask which, when combined with snPimRPSetGroupAddress, gives the group prefix for which this entry contains information about the Candidate-RP.')
snPimRPSetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimRPSetIPAddress.setDescription('The IP address of the Candidate-RP.')
snPimRPSetHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimRPSetHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: snPimRPSetHoldTime.setDescription('The holdtime, in seconds, of a Candidate-RP. If the local router is not the BSR, this value is 0.')
snPimCandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4), )
if mibBuilder.loadTexts: snPimCandidateRPTable.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateRPTable.setDescription("The (conceptual) table listing the IP multicast groups for which the local router is to advertise itself as a Candidate-RP. If this table is empty, then the local router will advertise itself as a Candidate-RP for all groups snPimEnable must be 'enabled' before this table is read or writen.")
snPimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snPimCandidateRPGroupAddress"), (0, "FOUNDRY-SN-IP-MIB", "snPimCandidateRPMask"))
if mibBuilder.loadTexts: snPimCandidateRPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateRPEntry.setDescription('An entry (conceptual row) in the snPimCandidateRPTable.')
snPimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimCandidateRPGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateRPGroupAddress.setDescription('The IP multicast group address which, when combined with snPimCandidateRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
snPimCandidateRPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPimCandidateRPMask.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateRPMask.setDescription('The multicast group address mask which, when combined with snPimCandidateRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
snPimCandidateRPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateRPIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateRPIPAddress.setDescription('The (unicast) address of the interface which will be advertised as a Candidate-RP.')
snPimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 9, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSuch", 0), ("other", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPimCandidateRPRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snPimCandidateRPRowStatus.setDescription("The status of this row, by which new entries may be created, or old entries deleted from this table. This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row other(1)....some other case valid(2)....the row exists and is valid")
snVrrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1))
snVrrpIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2))
snVrrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3))
snVrrpGroupOperMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpGroupOperMode.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpGroupOperMode.setDescription('The VRRP is configured on this system either enabled or disabled and the default is disabled mode. disabled(0)..........disable VRRP enabled(1)...........activate VRRP')
snVrrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfStateChangeTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfStateChangeTrap.setDescription('Indicates whether the SNMP agent process is permitted to generate VRRP interface state change traps.')
snVrrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerIntf.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerIntf.setDescription('Indicates the maximum number of VRID per interface.')
snVrrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerSystem.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfMaxNumVridPerSystem.setDescription('Indicates the maximum number of VRID per system.')
snVrrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpClearVrrpStat.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpClearVrrpStat.setDescription('Clear VRRP statistics command.')
snVrrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1), )
if mibBuilder.loadTexts: snVrrpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfTable.setDescription('The VRRP Interface Table describes the interfaces from the viewpoint of VRRP.')
snVrrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snVrrpIfPort"))
if mibBuilder.loadTexts: snVrrpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfEntry.setDescription('The VRRP Interface Entry describes one interface from the viewpoint of VRRP.')
snVrrpIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfPort.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfPort.setDescription('The IP port of this VRRP interface.')
snVrrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfAuthType.setDescription('The authentication type of this interface.')
snVrrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpIfAuthPassword.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfAuthPassword.setDescription('The simple text password is allowed if only if the snVrrpIfAuthType type is simpleTextPasswd(1).')
snVrrpIfRxHeaderErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxHeaderErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfRxHeaderErrCnts.setDescription('The received Header error counts in this interface.')
snVrrpIfRxAuthTypeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthTypeErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfRxAuthTypeErrCnts.setDescription('The received authentication type error counts in this interface.')
snVrrpIfRxAuthPwdMismatchErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxAuthPwdMismatchErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfRxAuthPwdMismatchErrCnts.setDescription('The received authentication password mismatched error counts in this interface.')
snVrrpIfRxVridErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpIfRxVridErrCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpIfRxVridErrCnts.setDescription('The received unfound VRID error counts in this interface.')
snVrrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1), )
if mibBuilder.loadTexts: snVrrpVirRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrTable.setDescription('The VRRP virtual router Entry describes one virtual router from the viewpoint of VRRP.')
snVrrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snVrrpVirRtrPort"), (0, "FOUNDRY-SN-IP-MIB", "snVrrpVirRtrId"))
if mibBuilder.loadTexts: snVrrpVirRtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrEntry.setDescription('The VRRP virtual router Entry describes one virtual router from the viewpoint of VRRP.')
snVrrpVirRtrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrPort.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrPort.setDescription('The IP port of this VRRP interface.')
snVrrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrId.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrId.setDescription('One of the virtual router ID of this VRRP interface.')
snVrrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrOwnership.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrOwnership.setDescription('The ownership of this VRRP router interface can be set either owner(1) or backup(2). VirRtr SNMP-GET returns incomplete(0), it means no IP address has assigned to this VRRP router interface.')
snVrrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrCfgPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrCfgPriority.setDescription('The higher the number the higher the priority is. This parameter decides which backup router should becomes the Active Router for the interface. A backup Router with higher priority selected to becomes the Active Router. Therefore, this Object can be set if only if snVrrpVirRtrOwnership is set to backup(2).')
snVrrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrTrackPriority.setDescription('The higher the number the higher the priority is. after this object is configured, the snVrrpVirRtrCurrPriority of this interface will be adjusted dynamically with this track priority when the Track Port states first changes from UP to DOWN.')
snVrrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrCurrPriority.setDescription('The higher the number the higher the priority is. This object will be adjusted dynamically with the track priority when the Track Port states first changes from UP to DOWN.')
snVrrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrHelloInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrHelloInt.setDescription('Time interval between advertisements (seconds).')
snVrrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrDeadInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrDeadInt.setDescription('Dead interval (seconds).')
snVrrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrPreemptMode.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrPreemptMode.setDescription('This mode controls whether a higher priority Backup router preempts a lower priority Master. The mode with enabled(1) allow preemption and disabled(0) prohibit preemption.')
snVrrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrState.setDescription("This object specifies the VRRP Router's interface state as: init(0)...initialization state. master(1)...master state. backup(2)...backup state.")
snVrrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrActivate.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrActivate.setDescription("This object specifies the VRRP Router's activate command as: disabled(0)...deactivate this VRRP Router. enabled(1)....activate this VRRP Router.")
snVrrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrIpAddrMask.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrIpAddrMask.setDescription('The numbers of IP Addresses of this virtual router of this interface.')
snVrrpVirRtrTrackPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortMask.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each bit is a port of the system. Default value is 0. VirRtr this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The Chassis/Stackable router VRRP Track port membership. The size of the OCTET STRING for Chassis is 32. The size of the OCTET STRING for Stackable is 4. (It was obsoleted after release 07100, replaced by snVrrpVirRtrTrackPortList)")
snVrrpVirRtrTrackVifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifMask.setStatus('deprecated')
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifMask.setDescription("This object specifies the identity of the virtual interface whose state is to be monitored. Each bit is a port of the system. Default value is 0. VirRtr this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The Chassis/Stackable router VRRP Track port membership The size of the OCTET STRING for Chassis is 8. The size of the OCTET STRING for Stackable is 4. (It was obsoleted after release 07100, replaced by snVrrpVirRtrTrackVifPortList)")
snVrrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an existing row VirRtr the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snVrrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxArpPktDropCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxArpPktDropCnts.setDescription('The received VRRP ARP Packet Drop Counts.')
snVrrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpPktDropCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxIpPktDropCnts.setDescription('The received VRRP IP Packet Drop Counts.')
snVrrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPortMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxPortMismatchCnts.setDescription('The received VRRP Port mismatching Counts.')
snVrrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxNumOfIpMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxNumOfIpMismatchCnts.setDescription('The received VRRP Number of IP Addresses mismatching Counts.')
snVrrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxIpMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxIpMismatchCnts.setDescription('The received VRRP IP Address mismatching Counts.')
snVrrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHelloIntMismatchCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxHelloIntMismatchCnts.setDescription('The counts of the virtual router interface with hello interval mismatch counts.')
snVrrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxPriorityZeroFromMasterCnts.setDescription('The counts of the virtual router interface with Priority zero from the master.')
snVrrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrRxHigherPriorityCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrRxHigherPriorityCnts.setDescription('The counts of the virtual router interface with higher Priority.')
snVrrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToMasterStateCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrTransToMasterStateCnts.setDescription('The counts of the virtual router interface transition to master state.')
snVrrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrTransToBackupStateCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrTransToBackupStateCnts.setDescription('The counts of the virtual router interface transition to backup state.')
snVrrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVrrpVirRtrCurrDeadInt.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrCurrDeadInt.setDescription('Current Dead interval (in 100 milliseconds).')
snVrrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortList.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrTrackPortList.setDescription("This object specifies the identity of the physical port whose state is to be monitored. Each port index is a 16-bit integer in big endian order. 8-bit is the slot number, the other 8-bit is the port number. Default value is 0 length octet string. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router VRRP physical track port membership.")
snVrrpVirRtrTrackVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 12, 3, 1, 1, 28), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifPortList.setStatus('mandatory')
if mibBuilder.loadTexts: snVrrpVirRtrTrackVifPortList.setDescription("This object specifies the identity of the virtual interface whose state is to be monitored. Each port index is a 16-bit integer in big endian order. Default value is 0 length octet string. If this object is configured then the Preference Level of this interface will be adjusted dynamically depending on the state of the Track Port. The interface's Preference Level is reduced by value of Preference Level parameter when the Track Port states first changes from UP to DOWN. When the Track Port next comes up the interface's Preference Level is increased by the amount specified by the Preference Level. The router VRRP virtual port track membership.")
snLoopbackIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1), )
if mibBuilder.loadTexts: snLoopbackIntfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: snLoopbackIntfConfigTable.setDescription('Loopback Interface Config table.')
snLoopbackIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-MIB", "snLoopbackIntfConfigPortIndex"))
if mibBuilder.loadTexts: snLoopbackIntfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snLoopbackIntfConfigEntry.setDescription('An entry in the Loopback Interface Config table.')
snLoopbackIntfConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLoopbackIntfConfigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snLoopbackIntfConfigPortIndex.setDescription('The port index for Loopback Interface config entry.')
snLoopbackIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLoopbackIntfMode.setStatus('mandatory')
if mibBuilder.loadTexts: snLoopbackIntfMode.setDescription('The Loopback Interface mode.')
snLoopbackIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLoopbackIntfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snLoopbackIntfRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
mibBuilder.exportSymbols("FOUNDRY-SN-IP-MIB", snIpCommunityListStringEntry=snIpCommunityListStringEntry, snRtIpStaticRouteDest=snRtIpStaticRouteDest, snRtIpRipPortAccessDir=snRtIpRipPortAccessDir, snDvmrpVIfStatVifIndex=snDvmrpVIfStatVifIndex, snRtIpRipPortIfAccessTable=snRtIpRipPortIfAccessTable, snRtIpPortIfAddrInterfaceIndex=snRtIpPortIfAddrInterfaceIndex, snVrrpIfRxAuthPwdMismatchErrCnts=snVrrpIfRxAuthPwdMismatchErrCnts, snFsrpIfRouterDeadTime=snFsrpIfRouterDeadTime, snIpCommunityListStringSequence=snIpCommunityListStringSequence, snRtStaticArpIndex=snRtStaticArpIndex, snFsrpIntf=snFsrpIntf, snDvmrpVIfStatOutOctets=snDvmrpVIfStatOutOctets, snRtIpRipPortIfConfigInterfaceIndex=snRtIpRipPortIfConfigInterfaceIndex, snRtIpRarpEntry=snRtIpRarpEntry, snVrrpClearVrrpStat=snVrrpClearVrrpStat, snRtIpPortIfAddrTable=snRtIpPortIfAddrTable, snVrrpVirRtrRxPortMismatchCnts=snVrrpVirRtrRxPortMismatchCnts, snRtIpPortAccessDirection=snRtIpPortAccessDirection, snVrrpIfRxVridErrCnts=snVrrpIfRxVridErrCnts, snFsrpIfKeepAliveTime=snFsrpIfKeepAliveTime, snDvmrpVInterfaceMetric=snDvmrpVInterfaceMetric, snRtUdpHelperAddr=snRtUdpHelperAddr, snVrrpVirRtrHelloInt=snVrrpVirRtrHelloInt, snVrrpVirRtrTransToBackupStateCnts=snVrrpVirRtrTransToBackupStateCnts, snRtIpRipNbrFilterRowStatus=snRtIpRipNbrFilterRowStatus, snDvmrpRouteNextHopTable=snDvmrpRouteNextHopTable, snVrrpIfEntry=snVrrpIfEntry, snFsrpIfIpAddress=snFsrpIfIpAddress, snPimVInterfaceType=snPimVInterfaceType, snRtIpRarpIp=snRtIpRarpIp, snRtIpPortIfAccessDirection=snRtIpPortIfAccessDirection, snVrrpIfTable=snVrrpIfTable, ClearStatus=ClearStatus, snDvmrpNeighborRouterTimeout=snDvmrpNeighborRouterTimeout, snVrrpVirRtrCurrPriority=snVrrpVirRtrCurrPriority, snIpCommunityListTable=snIpCommunityListTable, snVrrpVirRtrRowStatus=snVrrpVirRtrRowStatus, snGblRtGeneral=snGblRtGeneral, snPimVIfStatVifIndex=snPimVIfStatVifIndex, snRtIpTraceRouteControl=snRtIpTraceRouteControl, snIpCommunityListRowStatus=snIpCommunityListRowStatus, snRtIpPortIfAccessTable=snRtIpPortIfAccessTable, snIpCommunityListStringAction=snIpCommunityListStringAction, snRtIpRipDistance=snRtIpRipDistance, snRtUdpBcastFwdEnable=snRtUdpBcastFwdEnable, snPimNeighborEntryIndex=snPimNeighborEntryIndex, snDvmrpVIfStatInGraftAckPkts=snDvmrpVIfStatInGraftAckPkts, snRtIpPortAddrType=snRtIpPortAddrType, snRtIpStaticRouteEntry=snRtIpStaticRouteEntry, snIpAsPathAccessListStringRowStatus=snIpAsPathAccessListStringRowStatus, snFsrpIfTrackPortMask=snFsrpIfTrackPortMask, snRtIpPortMetric=snRtIpPortMetric, snRtIpTraceRouteTimeOut=snRtIpTraceRouteTimeOut, snPimCandidateBSRPreference=snPimCandidateBSRPreference, snDvmrpVInterfaceAdvertiseLocal=snDvmrpVInterfaceAdvertiseLocal, snIpPrefixListMask=snIpPrefixListMask, snRtIpRipUpdateTime=snRtIpRipUpdateTime, snIpCommunityListNoExport=snIpCommunityListNoExport, snRtIpPortAccessRowStatus=snRtIpPortAccessRowStatus, snRtIpRipPortIfConfigTable=snRtIpRipPortIfConfigTable, snPimNeighborExpiryTime=snPimNeighborExpiryTime, snRtIpProtocolRouterId=snRtIpProtocolRouterId, snPimCandidateBSRHashMaskLen=snPimCandidateBSRHashMaskLen, snVrrpVirRtrRxPriorityZeroFromMasterCnts=snVrrpVirRtrRxPriorityZeroFromMasterCnts, snRtIpPortIfMetric=snRtIpPortIfMetric, snRtIpPortIfRowStatus=snRtIpPortIfRowStatus, snPimVIfStatInGraftAckPkts=snPimVIfStatInGraftAckPkts, snDvmrpVIfStatDiscardGraftPkts=snDvmrpVIfStatDiscardGraftPkts, snFsrpGroupOperMode=snFsrpGroupOperMode, snRtStaticArpIp=snRtStaticArpIp, snRtIpFwdCacheFragCheck=snRtIpFwdCacheFragCheck, snIpPrefixListTable=snIpPrefixListTable, snVrrpVirRtrDeadInt=snVrrpVirRtrDeadInt, snIpCommunityListStringRowStatus=snIpCommunityListStringRowStatus, snRtIpFwdCacheNextHopIp=snRtIpFwdCacheNextHopIp, snVrrpVirRtrIpAddrMask=snVrrpVirRtrIpAddrMask, snDvmrpRouteExpireTime=snDvmrpRouteExpireTime, snRtBootpServer=snRtBootpServer, snPimVIfStatDiscardHelloPkts=snPimVIfStatDiscardHelloPkts, snDvmrpVersion=snDvmrpVersion, snRtIpRipGblFiltList=snRtIpRipGblFiltList, snRtIpFilterEstablished=snRtIpFilterEstablished, snPimVIfStatDiscardAssertPkts=snPimVIfStatDiscardAssertPkts, DisplayString=DisplayString, snRtIpRarpTable=snRtIpRarpTable, snPimVIfStatInJoinPkts=snPimVIfStatInJoinPkts, snPimMIBObjects=snPimMIBObjects, snVrrpVirRtrRxHelloIntMismatchCnts=snVrrpVirRtrRxHelloIntMismatchCnts, snIpPrefixListAddr=snIpPrefixListAddr, snPimVInterfaceDR=snPimVInterfaceDR, snDvmrpNeighborEntry=snDvmrpNeighborEntry, snRtIpProxyArp=snRtIpProxyArp, snDvmrpRouteNextHopSource=snDvmrpRouteNextHopSource, snRtIpPortAddrEntry=snRtIpPortAddrEntry, snPimVIfStatOutJoinPkts=snPimVIfStatOutJoinPkts, snIpPrefixListSequence=snIpPrefixListSequence, snRtIpRipPortIfAccessRowStatus=snRtIpRipPortIfAccessRowStatus, snRtIpRipRedisEnable=snRtIpRipRedisEnable, snDvmrpNeighborUpTime=snDvmrpNeighborUpTime, snIpCommunityListSequence=snIpCommunityListSequence, snPimVInterfaceLocalSubnetMask=snPimVInterfaceLocalSubnetMask, snRtIpFwdCacheTable=snRtIpFwdCacheTable, snDvmrpRouteSource=snDvmrpRouteSource, snRtIpPortEncap=snRtIpPortEncap, snRtIpDirBcastFwd=snRtIpDirBcastFwd, snPimVIfStatOutGraftPkts=snPimVIfStatOutGraftPkts, snRtIpRipPortAccessRowStatus=snRtIpRipPortAccessRowStatus, snRtIpPortIfAccessFilters=snRtIpPortIfAccessFilters, snRtIpTraceRouteGeneral=snRtIpTraceRouteGeneral, snLoopbackIntfConfigEntry=snLoopbackIntfConfigEntry, snRtIpGeneral=snRtIpGeneral, snIpCommunityListNoAdvertise=snIpCommunityListNoAdvertise, snRtIpFilterSourceIp=snRtIpFilterSourceIp, snDvmrpVIfStatOutProbePkts=snDvmrpVIfStatOutProbePkts, snRtIpRipRouteFilterTable=snRtIpRipRouteFilterTable, snRtIpFilterAction=snRtIpFilterAction, snVrrpIfMaxNumVridPerIntf=snVrrpIfMaxNumVridPerIntf, snRtIpTraceRouteResultRoundTripTime1=snRtIpTraceRouteResultRoundTripTime1, snRtIpFwdCacheVLanId=snRtIpFwdCacheVLanId, snRtIpFwdCacheCurEntries=snRtIpFwdCacheCurEntries, snVrrpVirRtrRxArpPktDropCnts=snVrrpVirRtrRxArpPktDropCnts, snVrrpVirRtrPreemptMode=snVrrpVirRtrPreemptMode, snDvmrpPruneAge=snDvmrpPruneAge, snPimVInterfaceTable=snPimVInterfaceTable, snVrrpVirRtrCurrDeadInt=snVrrpVirRtrCurrDeadInt, snDvmrpVIfStatInGraftPkts=snDvmrpVIfStatInGraftPkts, snRtIpRipPortVersion=snRtIpRipPortVersion, snRtArpAge=snRtArpAge, snRtIpPortIfAccessEntry=snRtIpPortIfAccessEntry, snIpAsPathAccessListTable=snIpAsPathAccessListTable, snDvmrpVInterfaceRemoteSubnetMask=snDvmrpVInterfaceRemoteSubnetMask, snRtIpStaticRouteRowStatus=snRtIpStaticRouteRowStatus, snRtIpFilterProtocol=snRtIpFilterProtocol, snIpCommunityListAction=snIpCommunityListAction, snRtIpFilterOperand=snRtIpFilterOperand, snIpPrefixListName=snIpPrefixListName, snIpAsPathAccessListSequence=snIpAsPathAccessListSequence, snDvmrpReportInterval=snDvmrpReportInterval, snRtIpPortIfConfigInterfaceIndex=snRtIpPortIfConfigInterfaceIndex, snVrrpVirRtrPort=snVrrpVirRtrPort, snRtIpRarpIndex=snRtIpRarpIndex, snVrrpVirRtrTable=snVrrpVirRtrTable, snDvmrpNeighborVifIndex=snDvmrpNeighborVifIndex, snRtIpTraceRouteMaxTtl=snRtIpTraceRouteMaxTtl, snRtUdpHelperRowStatus=snRtUdpHelperRowStatus, snRtClearArpCache=snRtClearArpCache, snVrrpIfStateChangeTrap=snVrrpIfStateChangeTrap, snPimInactivityTime=snPimInactivityTime, snRtIpPortIfAccessInterfaceIndex=snRtIpPortIfAccessInterfaceIndex, snRtUdpBcastFwdPortNumber=snRtUdpBcastFwdPortNumber, snRtIpSetAllPortConfig=snRtIpSetAllPortConfig, snPimVIfStatEntry=snPimVIfStatEntry, snRtIpTraceRouteResultEntry=snRtIpTraceRouteResultEntry, snVrrpVirRtrTrackPriority=snVrrpVirRtrTrackPriority, snDvmrpRouteNextHopVifIndex=snDvmrpRouteNextHopVifIndex, snFsrpIfOtherRtrIpAddr=snFsrpIfOtherRtrIpAddr, snRtIpRipPortIfPoisonReverse=snRtIpRipPortIfPoisonReverse, snRtIpRarp=snRtIpRarp, snIpCommunityListStringName=snIpCommunityListStringName, snRtIpTraceRouteMinTtl=snRtIpTraceRouteMinTtl, snIpCommunityListStringTable=snIpCommunityListStringTable, snFsrpIfPreferLevel=snFsrpIfPreferLevel, snRtIpRipNbrFilterId=snRtIpRipNbrFilterId, snIpCommunityListEntry=snIpCommunityListEntry, snPimSMMIBObjects=snPimSMMIBObjects, snPimVInterfaceVifIndex=snPimVInterfaceVifIndex, snIpAsPathAccessListStringRegExpression=snIpAsPathAccessListStringRegExpression, snRtIpTraceRouteResult=snRtIpTraceRouteResult, snIpAsPathAccessListRegExpression=snIpAsPathAccessListRegExpression, snRtBcastFwd=snRtBcastFwd, snPimVIfStatTable=snPimVIfStatTable, snPimNeighborUpTime=snPimNeighborUpTime, snIpCommunityListStringNoExport=snIpCommunityListStringNoExport, snDvmrpVIfStatOutPkts=snDvmrpVIfStatOutPkts, snDvmrpRouteNextHopSourceMask=snDvmrpRouteNextHopSourceMask, snIpPrefixListRowStatus=snIpPrefixListRowStatus, snPimCandidateBSRIPAddress=snPimCandidateBSRIPAddress, snRtStaticArpPort=snRtStaticArpPort, snRtIpPortAccessEntry=snRtIpPortAccessEntry, snRtStaticArpEntry=snRtStaticArpEntry, snDvmrpNeighborMinorVersion=snDvmrpNeighborMinorVersion, snDvmrpVInterfaceEncapsulation=snDvmrpVInterfaceEncapsulation, snDvmrpVIfStatDiscardGraftAckPkts=snDvmrpVIfStatDiscardGraftAckPkts, snRtUdpHelperEntry=snRtUdpHelperEntry, snRtIpRipRedisIndex=snRtIpRipRedisIndex, snRtIpPortIfAddress=snRtIpPortIfAddress, snDvmrpGenerationId=snDvmrpGenerationId, snPimCandidateBSREntry=snPimCandidateBSREntry, snRtIpRipRouteFilterRowStatus=snRtIpRipRouteFilterRowStatus, snRtIpRipRouteFilterId=snRtIpRipRouteFilterId, snDvmrpGraftRetransmitTime=snDvmrpGraftRetransmitTime, snDvmrpVIfStatTable=snDvmrpVIfStatTable, snPimHelloTime=snPimHelloTime, snRtIpFilterSourceMask=snRtIpFilterSourceMask, snRtIpRipGeneral=snRtIpRipGeneral, snRtBootpRelayMax=snRtBootpRelayMax, snRtIpRipRouteFilterEntry=snRtIpRipRouteFilterEntry, snIpAsPathAccessListStringAction=snIpAsPathAccessListStringAction, snRtIpRarpMac=snRtIpRarpMac, Action=Action, snRtIpPortIfSubnetMask=snRtIpPortIfSubnetMask, snRtIpLoadShareMaxPaths=snRtIpLoadShareMaxPaths, snIpAsPathAccessListStringSequence=snIpAsPathAccessListStringSequence, snRtIpRipPortAccessPort=snRtIpRipPortAccessPort, snDvmrpVIfStatEntry=snDvmrpVIfStatEntry, Metric=Metric, snPimCandidateRPGroupAddress=snPimCandidateRPGroupAddress, snIpAsPathAccessListStringTable=snIpAsPathAccessListStringTable, snVrrpIfRxAuthTypeErrCnts=snVrrpIfRxAuthTypeErrCnts, snVrrpVirRtrState=snVrrpVirRtrState, snRtIpLoadShare=snRtIpLoadShare, snDvmrpVInterfaceStatus=snDvmrpVInterfaceStatus, snPimRPSetTable=snPimRPSetTable, snFsrpGlobal=snFsrpGlobal, snRtIpTraceRouteResultRoundTripTime2=snRtIpTraceRouteResultRoundTripTime2, snVrrpGlobal=snVrrpGlobal, snDvmrpNeighborGenerationId=snDvmrpNeighborGenerationId, snLoopbackIntfRowStatus=snLoopbackIntfRowStatus, snRtIpFilterQosPriority=snRtIpFilterQosPriority, snRtIpPortIfEncap=snRtIpPortIfEncap, snDvmrpRouteTable=snDvmrpRouteTable, snRtIpRipPortIfAccessDir=snRtIpRipPortIfAccessDir, RtrStatus=RtrStatus, snVrrpVirRtrTransToMasterStateCnts=snVrrpVirRtrTransToMasterStateCnts, snRtIpLoadShareMinPaths=snRtIpLoadShareMinPaths, snFsrpIfEntry=snFsrpIfEntry, snPimPruneTime=snPimPruneTime, snRtStaticArpRowStatus=snRtStaticArpRowStatus, snRtIpFilterOperator=snRtIpFilterOperator, snPimVInterfaceLocalAddress=snPimVInterfaceLocalAddress, snRtIpRipPortPoisonReverse=snRtIpRipPortPoisonReverse, snPimGraftRetransmitTime=snPimGraftRetransmitTime, snRtIpRipNbrFilterAction=snRtIpRipNbrFilterAction, snDvmrpMIBObjects=snDvmrpMIBObjects, snDvmrpNeighborCapabilities=snDvmrpNeighborCapabilities, snDvmrpTriggerInterval=snDvmrpTriggerInterval, snPimVIfStatOutHelloPkts=snPimVIfStatOutHelloPkts, snRtIpPortIfMtu=snRtIpPortIfMtu, snRtUdpBcastFwdPortEntry=snRtUdpBcastFwdPortEntry, snIpPrefixListAction=snIpPrefixListAction, snRtIpFilterRowStatus=snRtIpFilterRowStatus, snVrrpGroupOperMode=snVrrpGroupOperMode, snDvmrpRouteEntry=snDvmrpRouteEntry, snRtUdpBcastFwdPortIndex=snRtUdpBcastFwdPortIndex, snPimVIfStatOutAssertPkts=snPimVIfStatOutAssertPkts, snPimVInterfaceMode=snPimVInterfaceMode, snIpPrefixListDesc=snIpPrefixListDesc, snPimCandidateRPTable=snPimCandidateRPTable, snRtIpFilterDestIp=snRtIpFilterDestIp, snDvmrpVIfStatOutPrunePkts=snDvmrpVIfStatOutPrunePkts, snLoopbackIntfMode=snLoopbackIntfMode, snRtIpRipNbrFilterSourceIp=snRtIpRipNbrFilterSourceIp, snRtIpPortAddress=snRtIpPortAddress, snIpCommunityListStringNoAdvertise=snIpCommunityListStringNoAdvertise)
mibBuilder.exportSymbols("FOUNDRY-SN-IP-MIB", snDvmrpVIfStatInOctets=snDvmrpVIfStatInOctets, snFsrpIfStateChangeTrap=snFsrpIfStateChangeTrap, snVrrpVirRtrTrackPortMask=snVrrpVirRtrTrackPortMask, snRtIpTtl=snRtIpTtl, snFsrpIfTrackPortList=snFsrpIfTrackPortList, snRtIpPortIfAddrEntry=snRtIpPortIfAddrEntry, snRtBcastFwdGeneral=snRtBcastFwdGeneral, snVrrpIfRxHeaderErrCnts=snVrrpIfRxHeaderErrCnts, snIpCommunityListCommNum=snIpCommunityListCommNum, snPimNeighborEntry=snPimNeighborEntry, snPimEnable=snPimEnable, snRtIpRipRedisAction=snRtIpRipRedisAction, snRtIpRipSetAllPortConfig=snRtIpRipSetAllPortConfig, snRtIpPortMtu=snRtIpPortMtu, PortIndex=PortIndex, snRtIpTraceRouteTargetAddr=snRtIpTraceRouteTargetAddr, snRtIpStaticRouteMetric=snRtIpStaticRouteMetric, snIpAsPathAccessListEntry=snIpAsPathAccessListEntry, snDvmrpEnable=snDvmrpEnable, snRtIpRipFiltOnAllPort=snRtIpRipFiltOnAllPort, snPimCandidateRPRowStatus=snPimCandidateRPRowStatus, snPimCandidateRPEntry=snPimCandidateRPEntry, snDvmrpDefaultRoute=snDvmrpDefaultRoute, snDvmrpVIfStatInPkts=snDvmrpVIfStatInPkts, snRtIpPortIfAddrType=snRtIpPortIfAddrType, snRtIpStaticRouteMask=snRtIpStaticRouteMask, snRtIpFwdCacheOutgoingPort=snRtIpFwdCacheOutgoingPort, snPimRPSetIPAddress=snPimRPSetIPAddress, snDvmrpRouteVifIndex=snDvmrpRouteVifIndex, snLoopbackIntfConfigPortIndex=snLoopbackIntfConfigPortIndex, snRtUdpHelperPortIndex=snRtUdpHelperPortIndex, snPimVIfStatDiscardGraftAckPkts=snPimVIfStatDiscardGraftAckPkts, snRtIpPortAddrTable=snRtIpPortAddrTable, snVrrpVirRtrCfgPriority=snVrrpVirRtrCfgPriority, snDvmrpNeighborTable=snDvmrpNeighborTable, snDvmrpRouteNextHopType=snDvmrpRouteNextHopType, snFsrpIfVirRtrIpAddr=snFsrpIfVirRtrIpAddr, snRtIpFwdCacheType=snRtIpFwdCacheType, snRtIpSourceRoute=snRtIpSourceRoute, snRtIpRipPortAccessTable=snRtIpRipPortAccessTable, snDvmrpNeighborEntryIndex=snDvmrpNeighborEntryIndex, snRtIpRipRedisProtocol=snRtIpRipRedisProtocol, snRtIpRipPortAccessEntry=snRtIpRipPortAccessEntry, snIpCommunityListStringLocalAs=snIpCommunityListStringLocalAs, snDvmrpProbeInterval=snDvmrpProbeInterval, snRtUdpHelperIndex=snRtUdpHelperIndex, snLoopbackIntfConfigTable=snLoopbackIntfConfigTable, snRtIpRipPortLearnDefault=snRtIpRipPortLearnDefault, snDvmrpRouteUpstreamNeighbor=snDvmrpRouteUpstreamNeighbor, snRtIpFwdCacheIp=snRtIpFwdCacheIp, snDvmrpVIfStatDiscardRtUpdatePkts=snDvmrpVIfStatDiscardRtUpdatePkts, snRtIpRipEnable=snRtIpRipEnable, snVrrpVirRtrTrackPortList=snVrrpVirRtrTrackPortList, snIpPrefixListGeValue=snIpPrefixListGeValue, snPimCandidateBSRTable=snPimCandidateBSRTable, snDvmrpVInterfaceLocalAddress=snDvmrpVInterfaceLocalAddress, snPimVIfStatInPrunePkts=snPimVIfStatInPrunePkts, snRtIpPortIfConfigEntry=snRtIpPortIfConfigEntry, snIpPrefixListEntry=snIpPrefixListEntry, snVrrpIfAuthType=snVrrpIfAuthType, snRtIpTraceRouteResultAddr=snRtIpTraceRouteResultAddr, snRtIpFilterTable=snRtIpFilterTable, snPimNeighborAddress=snPimNeighborAddress, snRtIpFilterEntry=snRtIpFilterEntry, snRtIpRipPortConfigEntry=snRtIpRipPortConfigEntry, snIpAsPathAccessListStringName=snIpAsPathAccessListStringName, snRtIpPortConfigPortIndex=snRtIpPortConfigPortIndex, snRtIpPortAccessPortIndex=snRtIpPortAccessPortIndex, snVrrpVirRtrId=snVrrpVirRtrId, snRtIpRipRedisRowStatus=snRtIpRipRedisRowStatus, snPimVInterfaceTtlThreshold=snPimVInterfaceTtlThreshold, snRtClearIpRoute=snRtClearIpRoute, snRtIpTraceRouteResultTable=snRtIpTraceRouteResultTable, snVrrpVirRtrRxHigherPriorityCnts=snVrrpVirRtrRxHigherPriorityCnts, snPimJoinPruneInterval=snPimJoinPruneInterval, PhysAddress=PhysAddress, snVrrpVirRtrEntry=snVrrpVirRtrEntry, PortMask=PortMask, snVrrpVirRtrTrackVifPortList=snVrrpVirRtrTrackVifPortList, snRtClearIpCache=snRtClearIpCache, snPimVIfStatOutPrunePkts=snPimVIfStatOutPrunePkts, snIpAsPathAccessListStringEntry=snIpAsPathAccessListStringEntry, snVrrpVirRtrRxIpMismatchCnts=snVrrpVirRtrRxIpMismatchCnts, snIpCommunityListLocalAs=snIpCommunityListLocalAs, snFsrpIfState=snFsrpIfState, snPimVInterfaceRemoteAddress=snPimVInterfaceRemoteAddress, snGblRtRouteOnly=snGblRtRouteOnly, snRtIpStaticRouteNextHop=snRtIpStaticRouteNextHop, snRtIpRipPortIfAccessPort=snRtIpRipPortIfAccessPort, snRtIpFwdCacheMac=snRtIpFwdCacheMac, snPimRPSetMask=snPimRPSetMask, snIpCommunityListStringInternet=snIpCommunityListStringInternet, snRtIpTraceRouteResultIndex=snRtIpTraceRouteResultIndex, snPimRPSetGroupAddress=snPimRPSetGroupAddress, snDvmrpVIfStatOutGraftPkts=snDvmrpVIfStatOutGraftPkts, snRtIpRipRouteFilterAction=snRtIpRipRouteFilterAction, snRtIpRarpRowStatus=snRtIpRarpRowStatus, snPimRPSetEntry=snPimRPSetEntry, snDvmrpVInterfaceTable=snDvmrpVInterfaceTable, snDvmrpVIfStatInPrunePkts=snDvmrpVIfStatInPrunePkts, snPimVInterfaceEntry=snPimVInterfaceEntry, snPimVIfStatDiscardJoinPkts=snPimVIfStatDiscardJoinPkts, snRtIpRipNbrFilterEntry=snRtIpRipNbrFilterEntry, snDvmrpVIfStatDiscardProbePkts=snDvmrpVIfStatDiscardProbePkts, snRtIpRipRouteFilterIpAddr=snRtIpRipRouteFilterIpAddr, snRtIpTraceRoute=snRtIpTraceRoute, snDvmrpNeighborMajorVersion=snDvmrpNeighborMajorVersion, snRtIpRipPortConfigTable=snRtIpRipPortConfigTable, snRtIpRipPortIfAccessEntry=snRtIpRipPortIfAccessEntry, snRtIpFwdCacheSnapHdr=snRtIpFwdCacheSnapHdr, snDvmrpVIfStatDiscardPrunePkts=snDvmrpVIfStatDiscardPrunePkts, snRtIpPortAddrPortIndex=snRtIpPortAddrPortIndex, snDvmrpNeighborAddress=snDvmrpNeighborAddress, snVrrpIntf=snVrrpIntf, snRtIpPortConfigTable=snRtIpPortConfigTable, snRtIpStaticRouteDistance=snRtIpStaticRouteDistance, snDvmrpRouteDiscardTime=snDvmrpRouteDiscardTime, snFsrpIfRowStatus=snFsrpIfRowStatus, snVrrpVirRtrRxNumOfIpMismatchCnts=snVrrpVirRtrRxNumOfIpMismatchCnts, snRtIpLoadShareNumOfPaths=snRtIpLoadShareNumOfPaths, snRtUdpBcastFwdPortTable=snRtUdpBcastFwdPortTable, snVrrpVirRtrActivate=snVrrpVirRtrActivate, snPimVInterfaceStatus=snPimVInterfaceStatus, snRtIpRipRouteFilterSubnetMask=snRtIpRipRouteFilterSubnetMask, snRtIpFwdCacheAction=snRtIpFwdCacheAction, snPimRPSetHoldTime=snPimRPSetHoldTime, snPimCandidateBSRPortID=snPimCandidateBSRPortID, snFsrpIfChassisTrackPortMask=snFsrpIfChassisTrackPortMask, snDvmrpRouteEntryIndex=snDvmrpRouteEntryIndex, snDvmrpVInterfaceType=snDvmrpVInterfaceType, snRtIpRipRedisEntry=snRtIpRipRedisEntry, snVrrpIfMaxNumVridPerSystem=snVrrpIfMaxNumVridPerSystem, snPimVIfStatDiscardPrunePkts=snPimVIfStatDiscardPrunePkts, snIpCommunityListInternet=snIpCommunityListInternet, snRtIpFwdCacheMaxEntries=snRtIpFwdCacheMaxEntries, snRtIpRipPortConfigPortIndex=snRtIpRipPortConfigPortIndex, snVrrpVirRtrOwnership=snVrrpVirRtrOwnership, snVrrpVirRtrRxIpPktDropCnts=snVrrpVirRtrRxIpPktDropCnts, snPimVIfStatOutGraftAckPkts=snPimVIfStatOutGraftAckPkts, snPimCandidateRPIPAddress=snPimCandidateRPIPAddress, snPimNeighborTable=snPimNeighborTable, snRtIpPortDirBcastFwd=snRtIpPortDirBcastFwd, snDvmrpVIfStatInProbePkts=snDvmrpVIfStatInProbePkts, snIpAsPathAccessListIndex=snIpAsPathAccessListIndex, snFsrpIfPort=snFsrpIfPort, snRtIpFwdCacheEntry=snRtIpFwdCacheEntry, snRtIpRipRedisTable=snRtIpRipRedisTable, snDvmrpVInterfaceOperState=snDvmrpVInterfaceOperState, snVrrpVirRtrTrackVifMask=snVrrpVirRtrTrackVifMask, snDvmrpVInterfaceEntry=snDvmrpVInterfaceEntry, snRtIpPortIfAccessRowStatus=snRtIpPortIfAccessRowStatus, snVrrpIfPort=snVrrpIfPort, snRtIpRipNbrFilterTable=snRtIpRipNbrFilterTable, snDvmrpVIfStatOutRtUpdatePkts=snDvmrpVIfStatOutRtUpdatePkts, snPimNeighborRouterTimeout=snPimNeighborRouterTimeout, snPimVIfStatInGraftPkts=snPimVIfStatInGraftPkts, snRtStaticArpMac=snRtStaticArpMac, snRtIpIrdpEnable=snRtIpIrdpEnable, snDvmrpVInterfaceRemoteAddress=snDvmrpVInterfaceRemoteAddress, snRtIpRipRedisSetMetric=snRtIpRipRedisSetMetric, snRtIpRipRedisIp=snRtIpRipRedisIp, snDvmrpRouteMetric=snDvmrpRouteMetric, snRtIpFilterDestMask=snRtIpFilterDestMask, snDvmrpVInterfaceTtlThreshold=snDvmrpVInterfaceTtlThreshold, snIpAsPathAccessListRowStatus=snIpAsPathAccessListRowStatus, snDvmrpRouteNextHopEntry=snDvmrpRouteNextHopEntry, snPimVIfStatInAssertPkts=snPimVIfStatInAssertPkts, snDvmrpNeighborExpiryTime=snDvmrpNeighborExpiryTime, snDvmrpVInterfaceVifIndex=snDvmrpVInterfaceVifIndex, snRtIpRipRedisMask=snRtIpRipRedisMask, snRtIpRipRedisDefMetric=snRtIpRipRedisDefMetric, snPimCandidateRPMask=snPimCandidateRPMask, RowSts=RowSts, snRtIpPortIfConfigTable=snRtIpPortIfConfigTable, snPimNeighborVifIndex=snPimNeighborVifIndex, snRtIpPortAccessFilters=snRtIpPortAccessFilters, snFsrpIfTable=snFsrpIfTable, snPimVIfStatDiscardGraftPkts=snPimVIfStatDiscardGraftPkts, snRtIpRipPortIfConfigEntry=snRtIpRipPortIfConfigEntry, snRtIpPortAccessTable=snRtIpPortAccessTable, snIpCommunityListIndex=snIpCommunityListIndex, snIpCommunityListStringCommNum=snIpCommunityListStringCommNum, snRtUdpHelperTable=snRtUdpHelperTable, snRtIpFwdCacheIndex=snRtIpFwdCacheIndex, snRtIpRipRedisMatchMetric=snRtIpRipRedisMatchMetric, snRtStaticArpTable=snRtStaticArpTable, snRtIpPortConfigEntry=snRtIpPortConfigEntry, snRtUdpHelper=snRtUdpHelper, snRtIpFilterIndex=snRtIpFilterIndex, snRtIpPortIfDirBcastFwd=snRtIpPortIfDirBcastFwd, snPimVIfStatInHelloPkts=snPimVIfStatInHelloPkts, snVrrpVirRtr=snVrrpVirRtr, snVrrpIfAuthPassword=snVrrpIfAuthPassword, snRtIpStaticRouteIndex=snRtIpStaticRouteIndex, snDvmrpRouteExpiryTime=snDvmrpRouteExpiryTime, snRtIpRipPortAccessFilterList=snRtIpRipPortAccessFilterList, snIpAsPathAccessListAction=snIpAsPathAccessListAction, snRtIpStaticRouteTable=snRtIpStaticRouteTable, snRtUdpBcastFwdPort=snRtUdpBcastFwdPort, snRtIpRipPortIfVersion=snRtIpRipPortIfVersion, snRtIpRipPortIfLearnDefault=snRtIpRipPortIfLearnDefault, snRtIpRipPortIfAccessFilterList=snRtIpRipPortIfAccessFilterList, snDvmrpRouteSourceMask=snDvmrpRouteSourceMask, snRtIpMaxStaticRouteEntries=snRtIpMaxStaticRouteEntries, snRtUdpBcastFwdPortRowStatus=snRtUdpBcastFwdPortRowStatus, snDvmrpVIfStatOutGraftAckPkts=snDvmrpVIfStatOutGraftAckPkts, snRtIpPortRowStatus=snRtIpPortRowStatus, snRtIpPortSubnetMask=snRtIpPortSubnetMask, snIpPrefixListLeValue=snIpPrefixListLeValue, snDvmrpVIfStatInRtUpdatePkts=snDvmrpVIfStatInRtUpdatePkts)
