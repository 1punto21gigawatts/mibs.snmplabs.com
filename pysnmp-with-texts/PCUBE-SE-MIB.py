#
# PySNMP MIB module PCUBE-SE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCUBE-SE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
pcubeWorkgroup, pcubeModules = mibBuilder.importSymbols("PCUBE-SMI", "pcubeWorkgroup", "pcubeModules")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, iso, Counter32, Counter64, Integer32, ModuleIdentity, TimeTicks, Gauge32, IpAddress, MibIdentifier, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32", "IpAddress", "MibIdentifier", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
pcubeSeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5655, 2, 3))
pcubeSeMIB.setRevisions(('2006-11-07 00:00', '2006-05-10 00:00', '2006-02-12 00:00', '2005-08-16 00:00', '2004-12-12 00:00', '2004-07-01 00:00', '2003-07-02 00:00', '2003-01-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pcubeSeMIB.setRevisionsDescriptions(('- Increased the supported range of global controllers (globalControllersIndex) from (1..255) to (1..2147483647) - Improved counter descriptions to reflect the counted layer for the following byte and bandwidth counters: txQueuesBandwidth txQueuesDroppedBytes globalControllersBandwidth globalControllersDroppedBytes ', "MIB revised as a part of integration into Cisco SNMP MIB standard, main changes: changed contaces, added OBJECT-GROUPs, added MODULE-COMPLIANCE, renamed with a prefix 'p' the following tables/objects to avoid conflict with existing Cisco MIbs: moduleGrp, moduleTable, moduleIndex, moduleType, moduleNumTrafficProcessors, moduleSlotNum, moduleHwVersion, moduleNumPorts, moduleNumLinks, moduleConnectionMode, moduleSerialNumber, moduleUpStreamAttackFilteringTime, moduleUpStreamLastAttackFilteringTime, moduleDownStreamAttackFilteringTime, moduleDownStreamLastAttackFilteringTime, moduleAttackObjectsClearTime , moduleAdminStatus, moduleOperStatus, chassisGrp chassisSysType, chassisPowerSupplyAlarm, chassisFansAlarm, chassisTempAlarm, chassisVoltageAlarm, chassisNumSlots, chassisSlotConfig, chassisPsuType, chassisLineFeedAlarm, portGrp, portTable, portModuleIndex, portIndex, portType, portNumTxQueues, portIfIndex, portAdminSpeed, portAdminDuplex, portOperDuplex, portLinkIndex, portOperStatus removed attackTypeTableClearTime counter, renamed Pcube to Cisco and SE to SCE.", 'Updates of OS version 3.0.3: added mplsVpnAutoLearning group containing mplsVpnSoftwareCountersTable and added mplsVpnTotalHWMappingsThresholdExceededTrap.', 'Updates of OS version 3.0.0: added vas group containing vasServerTable and added vasServerOpertionalStatusChangeTrap.', 'Updates of OS version 2.5.5: added rdrFormatterCategoryNumReportsQueued to the rdrFormatterCategoryTable in the RDR-formatter group, added subscribersNumAnonymous and subscribersNumWithSessions to subscriber info,Added the group attackGrp, containing attackTypeTable.', 'Updates of OS version 2.5: added tpServiceLoss to traffic processor group, added droppedBytes to Tx-Queue and global controller, added TpIpRanges to subscriber info,deprecated telnetSession* traps, replaced by session* traps.', 'Updates of OS version 1.5: added entries to the tpTable, added entries to the rdrFormatterGrp and rdrFormatterDestTable,added entries to the portTable and attack filter traps.', 'OS version 1.5 updates.',))
if mibBuilder.loadTexts: pcubeSeMIB.setLastUpdated('200611070000Z')
if mibBuilder.loadTexts: pcubeSeMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: pcubeSeMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sce@cisco.com')
if mibBuilder.loadTexts: pcubeSeMIB.setDescription("Main SNMP MIB for Cisco's SCE OS products such as SCE2000 and SE100. This MIB provides configuration and runtime status for chassis, control modules, and line modules on the SCOS systems.")
pcubeSEObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1))
pcubeSeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1))
pcubeSeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1))
pcubeSeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 2))
systemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1))
pchassisGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2))
pmoduleGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3))
linkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4))
diskGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 5))
rdrFormatterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6))
loggerGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7))
subscribersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8))
trafficProcessorGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9))
pportGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10))
txQueuesGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11))
globalControllersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12))
applicationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13))
trafficCountersGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14))
attackGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15))
vasTrafficForwardingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16))
mplsVpnAutoLearnGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17))
class LinkModeType(TextualConvention, Integer32):
    description = 'The various modes of a link.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("bypass", 2), ("forwarding", 3), ("cutoff", 4), ("sniffing", 5))

sysOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("boot", 2), ("operational", 3), ("warning", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: sysOperationalStatus.setDescription('Indicates the operational status of the system.')
sysFailureRecovery = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("operational", 2), ("nonOperational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFailureRecovery.setStatus('current')
if mibBuilder.loadTexts: sysFailureRecovery.setDescription('Indicates if the system should enter a Failure mode after abnormal boot.')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
if mibBuilder.loadTexts: sysVersion.setDescription('The system version.')
pchassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sce1000", 2), ("se100", 3), ("sce2000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisSysType.setStatus('current')
if mibBuilder.loadTexts: pchassisSysType.setDescription('The chassis system type.')
pchassisPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisPowerSupplyAlarm.setStatus('current')
if mibBuilder.loadTexts: pchassisPowerSupplyAlarm.setDescription("Indicates if the power supply to the chassis is normal. If the status is not 'ok' it means that one or more power supplies are not functional.")
pchassisFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisFansAlarm.setStatus('current')
if mibBuilder.loadTexts: pchassisFansAlarm.setDescription('Indicates if all the fans on the chassis are functional.')
pchassisTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisTempAlarm.setStatus('current')
if mibBuilder.loadTexts: pchassisTempAlarm.setDescription('The chassis temperature alarm status.')
pchassisVoltageAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisVoltageAlarm.setStatus('current')
if mibBuilder.loadTexts: pchassisVoltageAlarm.setDescription("The chassis internal voltage alarm status. If the alarm is 'on' it indicates that the voltage level of one or more HW units is not in the normal range.")
pchassisNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisNumSlots.setStatus('current')
if mibBuilder.loadTexts: pchassisNumSlots.setDescription('Indicates the number of slots in the chassis available for plug-in modules. This number counts slots that are already occupied as well as empty slots.')
pchassisSlotConfig = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisSlotConfig.setStatus('current')
if mibBuilder.loadTexts: pchassisSlotConfig.setDescription('An indication of which slots in the chassis have modules inserted. This is an integer value with bits set to indicate configured modules. It can be interpreted as a sum of f(x) as x goes from 1 to the number of slots, where f(x) = 0 for no module inserted and f(x) = exp(2, x-1) for a module inserted.')
pchassisPsuType = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ac", 2), ("dc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisPsuType.setStatus('current')
if mibBuilder.loadTexts: pchassisPsuType.setDescription('Indicates the type of the power supplies.')
pchassisLineFeedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pchassisLineFeedAlarm.setStatus('current')
if mibBuilder.loadTexts: pchassisLineFeedAlarm.setDescription("Indicates if the line feed to the chassis is normal. If the status is not 'ok' it means that one or more line feeds are not connected or have no power.")
pmoduleTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1), )
if mibBuilder.loadTexts: pmoduleTable.setStatus('current')
if mibBuilder.loadTexts: pmoduleTable.setDescription('A list of module entries. The number of entries is the number of modules in the chassis.')
pmoduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: pmoduleEntry.setStatus('current')
if mibBuilder.loadTexts: pmoduleEntry.setDescription('Entry containing information about one module in the chassis.')
pmoduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleIndex.setStatus('current')
if mibBuilder.loadTexts: pmoduleIndex.setDescription('A unique value for each module within the chassis.')
pmoduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("gbe2Module", 2), ("fe2Module", 3), ("gbe4Module", 4), ("fe4Module", 5), ("oc124Module", 6), ("fe8Module", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleType.setStatus('current')
if mibBuilder.loadTexts: pmoduleType.setDescription('The type of module.')
pmoduleNumTrafficProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleNumTrafficProcessors.setStatus('current')
if mibBuilder.loadTexts: pmoduleNumTrafficProcessors.setDescription('The number of traffic processors supported by this module.')
pmoduleSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleSlotNum.setStatus('current')
if mibBuilder.loadTexts: pmoduleSlotNum.setDescription('This value is determined by the chassis slot number where this module is located. Valid entries are 1 to the value of chassisNumSlots.')
pmoduleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleHwVersion.setStatus('current')
if mibBuilder.loadTexts: pmoduleHwVersion.setDescription('The hardware version of the module.')
pmoduleNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleNumPorts.setStatus('current')
if mibBuilder.loadTexts: pmoduleNumPorts.setDescription('The number of ports supported by this module.')
pmoduleNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleNumLinks.setStatus('current')
if mibBuilder.loadTexts: pmoduleNumLinks.setDescription('The number of links carrying inband traffic that are supported by this module. Link is uniquely defined by the two ports that are at its end-points.')
pmoduleConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("inline", 2), ("receiveOnly", 3), ("inlineCascade", 4), ("receiveOnlyCascade", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleConnectionMode.setStatus('current')
if mibBuilder.loadTexts: pmoduleConnectionMode.setDescription('Indicates the connection mode of a module.')
pmoduleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pmoduleSerialNumber.setDescription('Indicates the serial number of the module.')
pmoduleUpStreamAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 10), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleUpStreamAttackFilteringTime.setStatus('current')
if mibBuilder.loadTexts: pmoduleUpStreamAttackFilteringTime.setDescription('Indicates the accumulated time which attack up-stream traffic was filtered.')
pmoduleUpStreamLastAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 11), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleUpStreamLastAttackFilteringTime.setStatus('current')
if mibBuilder.loadTexts: pmoduleUpStreamLastAttackFilteringTime.setDescription('Indicates the time since the previous attack was filtered in the up-stream traffic.')
pmoduleDownStreamAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 12), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleDownStreamAttackFilteringTime.setStatus('current')
if mibBuilder.loadTexts: pmoduleDownStreamAttackFilteringTime.setDescription('Indicates the accumulated time which attack down-stream traffic was filtered.')
pmoduleDownStreamLastAttackFilteringTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 13), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleDownStreamLastAttackFilteringTime.setStatus('current')
if mibBuilder.loadTexts: pmoduleDownStreamLastAttackFilteringTime.setDescription('Indicates the time since the previous attack was filtered in the down-stream traffic.')
pmoduleAttackObjectsClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 14), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmoduleAttackObjectsClearTime.setStatus('current')
if mibBuilder.loadTexts: pmoduleAttackObjectsClearTime.setDescription('Indicates the time since the attack objects were cleared. Writing a 0 to this object causes the counters to be cleared.')
pmoduleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pmoduleAdminStatus.setDescription('Indicates configuration of a module in respect to whether the module should handle traffic.')
pmoduleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmoduleOperStatus.setStatus('current')
if mibBuilder.loadTexts: pmoduleOperStatus.setDescription("Indicates current module's role in respect to whether the module handles traffic.")
linkTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
if mibBuilder.loadTexts: linkTable.setDescription('The Link table provides information regarding the configuration and status of the links that pass through the SE and carry inband traffic. The number of entries in this table is determined by the number of modules in the chassis and the number of links on each module.')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "linkModuleIndex"), (0, "PCUBE-SE-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
if mibBuilder.loadTexts: linkEntry.setDescription('Entry containing information about the Link.')
linkModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModuleIndex.setStatus('current')
if mibBuilder.loadTexts: linkModuleIndex.setDescription('An index value that uniquely identifies the module where this link is located.')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('current')
if mibBuilder.loadTexts: linkIndex.setDescription('An index value that uniquely identifies this link within a module. Valid entries are 1 to the value of moduleNumLinks for this module.')
linkAdminModeOnActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 3), LinkModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdminModeOnActive.setStatus('current')
if mibBuilder.loadTexts: linkAdminModeOnActive.setDescription("The desired mode of the link when the module's operating status is Active and the module is not in boot or failure. The possible modes are bypass, forwarding and sniffing. In bypass mode the traffic is forwarded from one port to the other using an internal splitter. In forwarding mode the traffic is forwarded through the internal hardware and software modules of the SE. In sniffing mode the traffic is passed in the same manner as in bypass mode, however a copy of the traffic is made and analyzed internally in the box.")
linkAdminModeOnFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 4), LinkModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAdminModeOnFailure.setStatus('current')
if mibBuilder.loadTexts: linkAdminModeOnFailure.setDescription("The desired mode of the link when the system's operational status is Failure. The possible modes are Bypass and Cutoff. In Bypass mode the traffic is forwarded from one port to the other using an internal splitter. In Cutoff mode the traffic is dropped by the SE.")
linkOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 5), LinkModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOperMode.setStatus('current')
if mibBuilder.loadTexts: linkOperMode.setDescription('The operational mode of the link. In Bypass mode the traffic is forwarded from one port to the other using an internal splitter. In Forwarding mode the traffic is forwarded through the internal software and hardware modules of the SCE. In Sniffing mode the traffic is forwarded in the same manner as in Bypass mode, however the traffic is passed through the internal software and hardware modules of the SCE for analyzing. in Cutoff mode the traffic is dropped by the SCE platform.')
linkStatusReflectionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatusReflectionEnable.setStatus('current')
if mibBuilder.loadTexts: linkStatusReflectionEnable.setDescription('Indicates if failure of the physical link on one i/f should trigger the failure of the link on the other i/f.')
linkSubscriberSidePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSubscriberSidePortIndex.setStatus('current')
if mibBuilder.loadTexts: linkSubscriberSidePortIndex.setDescription('An index value that uniquely identifies this link with its related port that is connected to the subscriber side.')
linkNetworkSidePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNetworkSidePortIndex.setStatus('current')
if mibBuilder.loadTexts: linkNetworkSidePortIndex.setDescription('An index value that uniquely identifies this link with its related port that is connected to the network side.')
diskNumUsedBytes = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 5, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumUsedBytes.setStatus('current')
if mibBuilder.loadTexts: diskNumUsedBytes.setDescription('The number of used bytes.')
diskNumFreeBytes = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 5, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumFreeBytes.setStatus('current')
if mibBuilder.loadTexts: diskNumFreeBytes.setDescription('The number of free bytes.')
rdrFormatterEnable = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterEnable.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterEnable.setDescription('Indicates whether the RDR-formatter is enabled or disabled. When the RDR-formatter is enabled, it sends the reports it gets from the traffic processors to the Data Collector as defined in the rdrFormatterDestTable.')
rdrFormatterDestTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2), )
if mibBuilder.loadTexts: rdrFormatterDestTable.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestTable.setDescription('The RDR-formatter destinations table (0 to 3 entries). This table lists the addresses of Data Collectors. If the RDR-formatter is enabled, the destination with the highest priority that a TCP connection to it can be established would receive the reports generated by the traffic processors.')
rdrFormatterDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), (0, "PCUBE-SE-MIB", "rdrFormatterDestPort"))
if mibBuilder.loadTexts: rdrFormatterDestEntry.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestEntry.setDescription('A destination table entry.')
rdrFormatterDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestIPAddr.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestIPAddr.setDescription('The IP address of a Data Collector.')
rdrFormatterDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestPort.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestPort.setDescription('The TCP port on which the Data Collector listens.')
rdrFormatterDestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestPriority.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestPriority.setDescription('The priority given to the Data Collector. The active Data Collector is the Data Collector with the highest priority and a TCP connection that is up.')
rdrFormatterDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestStatus.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestStatus.setDescription("In 'redundancy(2)' and in 'simpleLoadBalancing(3)' rdrFormatterForwardingMode there can be only one 'active' destination, which is where the reports are currently being sent to. In 'multicast(4)' modes all destinations will receive the active(2) status.")
rdrFormatterDestConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestConnectionStatus.setDescription('Indicates the status of TCP connection to this destination.')
rdrFormatterDestNumReportsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestNumReportsSent.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestNumReportsSent.setDescription('Indicates the number of reports sent by the RDR-formatter to this destination.')
rdrFormatterDestNumReportsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestNumReportsDiscarded.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestNumReportsDiscarded.setDescription(' Indicates the number of reports dropped by the RDR-formatter on this destination.')
rdrFormatterDestReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestReportRate.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestReportRate.setDescription('Indicates the rate of the reports (in reports per second) currently sent to this destination.')
rdrFormatterDestReportRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestReportRatePeak.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestReportRatePeak.setDescription('Indicates the maximum report rate sent to this destination.')
rdrFormatterDestReportRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 2, 1, 10), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterDestReportRatePeakTime.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterDestReportRatePeakTime.setDescription('Indicates the time since the rdrFormatterDestReportRatePeak value occurred.')
rdrFormatterNumReportsSent = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterNumReportsSent.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterNumReportsSent.setDescription('Indicates the number of reports sent by the RDR-formatter.')
rdrFormatterNumReportsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterNumReportsDiscarded.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterNumReportsDiscarded.setDescription('Indicates the number of reports dropped by the RDR-formatter.')
rdrFormatterClearCountersTime = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 5), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdrFormatterClearCountersTime.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterClearCountersTime.setDescription('The time since RDR-formatter counters were last cleared. Writing a 0 to this object causes the RDR-formatter counters to be cleared.')
rdrFormatterReportRate = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterReportRate.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterReportRate.setDescription('Indicates the rate of the reports (in reports per second) currently sent to all of the destinations.')
rdrFormatterReportRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterReportRatePeak.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterReportRatePeak.setDescription('Indicates the maximum report rate sent to all of the destinations.')
rdrFormatterReportRatePeakTime = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 8), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterReportRatePeakTime.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterReportRatePeakTime.setDescription('Indicates the time since the rdrFormatterReportRatePeak value occurred.')
rdrFormatterProtocol = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rdrv1", 2), ("rdrv2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterProtocol.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterProtocol.setDescription('Indicates the RDR protocol currently in use.')
rdrFormatterForwardingMode = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("redundancy", 2), ("simpleLoadBalancing", 3), ("multicast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterForwardingMode.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterForwardingMode.setDescription('Indicates the mode of how the RDR formatter sends the reports to its destinations.')
rdrFormatterCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11), )
if mibBuilder.loadTexts: rdrFormatterCategoryTable.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryTable.setDescription('The RDR-formatter Category table. Describes the different categories of RDRs and RDR destination groups.')
rdrFormatterCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "rdrFormatterCategoryIndex"))
if mibBuilder.loadTexts: rdrFormatterCategoryEntry.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryEntry.setDescription('A category table entry.')
rdrFormatterCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryIndex.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryIndex.setDescription('The category number.')
rdrFormatterCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryName.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryName.setDescription('The name given to this category.')
rdrFormatterCategoryNumReportsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsSent.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsSent.setDescription('Indicates the number of reports sent by the RDR-formatter to this category.')
rdrFormatterCategoryNumReportsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsDiscarded.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsDiscarded.setDescription('Indicates the number of reports dropped by the RDR-formatter on this category.')
rdrFormatterCategoryReportRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryReportRate.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryReportRate.setDescription('Indicates the rate of the reports (in reports per second) currently sent to this category.')
rdrFormatterCategoryReportRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryReportRatePeak.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryReportRatePeak.setDescription('Indicates the maximum report rate sent to this category.')
rdrFormatterCategoryReportRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 7), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryReportRatePeakTime.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryReportRatePeakTime.setDescription('Indicates the time since the rdrFormatterCategoryReportRatePeak value occurred.')
rdrFormatterCategoryNumReportsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsQueued.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryNumReportsQueued.setDescription('Indicates the amount of pending reports in this category.')
rdrFormatterCategoryDestTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12), )
if mibBuilder.loadTexts: rdrFormatterCategoryDestTable.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryDestTable.setDescription('The RDR-formatter Category destinations table. This table lists the addresses of Data Collectors. If the RDR-formatter is enabled, the destination with the highest priority that a TCP connection to it can be established would receive the reports generated by the traffic processors.')
rdrFormatterCategoryDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "rdrFormatterCategoryIndex"), (0, "PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), (0, "PCUBE-SE-MIB", "rdrFormatterDestPort"))
if mibBuilder.loadTexts: rdrFormatterCategoryDestEntry.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryDestEntry.setDescription('A destination table entry.')
rdrFormatterCategoryDestPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryDestPriority.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryDestPriority.setDescription('The priority given to the Data Collector for this category. The active Data Collector is the Data Collector with the highest priority and a TCP connection that is up.')
rdrFormatterCategoryDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdrFormatterCategoryDestStatus.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryDestStatus.setDescription("In modes 'redundancy(2)' and in 'simpleLoadBalancing(3)' there can be only one 'active' destination, which is the destination to which reports are being sent. In 'multicast(4)' modes all destination will receive the 'active(2)' status.")
loggerUserLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogEnable.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogEnable.setDescription('Indicates whether the logging of user information is enabled or disabled.')
loggerUserLogNumInfo = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumInfo.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogNumInfo.setDescription('Indicates the number of Info messages logged into the user log file since last reboot or last time the counter was cleared.')
loggerUserLogNumWarning = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumWarning.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogNumWarning.setDescription('Indicates the number of Warning messages logged into the user log file since last reboot or last time the counter was cleared.')
loggerUserLogNumError = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumError.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogNumError.setDescription('Indicates the number of Error messages logged into the user log file since last reboot or last time the counter was cleared.')
loggerUserLogNumFatal = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggerUserLogNumFatal.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogNumFatal.setDescription('Indicates the number of Fatal messages logged into the User-Log since last reboot or last time the counter was cleared.')
loggerUserLogClearCountersTime = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 1, 7, 6), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: loggerUserLogClearCountersTime.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogClearCountersTime.setDescription('The time since user log counters were last cleared. Writing a 0 to this object causes the user log counters to be cleared.')
subscribersInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1), )
if mibBuilder.loadTexts: subscribersInfoTable.setStatus('current')
if mibBuilder.loadTexts: subscribersInfoTable.setDescription('The subscribers information table consists of data regarding subscribers management operations performed.')
subscribersInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: subscribersInfoEntry.setStatus('current')
if mibBuilder.loadTexts: subscribersInfoEntry.setDescription('A SubscribersInfoEntry entry.')
subscribersNumIntroduced = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIntroduced.setStatus('current')
if mibBuilder.loadTexts: subscribersNumIntroduced.setDescription('Indicates the current number of subscribers introduced to the SCE. These subscribers may or may not have IP address or VLAN mappings. Subscribers who do not have mappings of any kind cannot be associated with traffic, thus will be served by the SCE according to the default settings. ')
subscribersNumFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumFree.setStatus('current')
if mibBuilder.loadTexts: subscribersNumFree.setDescription('Indicates the number of subscribers that may be introduced in addition to the subscribers that are already introduced to the SCE (subscribersNumIntroduced).')
subscribersNumIpAddrMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpAddrMappings.setStatus('current')
if mibBuilder.loadTexts: subscribersNumIpAddrMappings.setDescription("Indicates the current number of 'IP address to subscriber' mappings.")
subscribersNumIpAddrMappingsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpAddrMappingsFree.setStatus('current')
if mibBuilder.loadTexts: subscribersNumIpAddrMappingsFree.setDescription("Indicates the number of free 'IP address to subscriber' mappings that may be used for defining new mappings.")
subscribersNumIpRangeMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpRangeMappings.setStatus('current')
if mibBuilder.loadTexts: subscribersNumIpRangeMappings.setDescription("Indicates the current number of 'IP-range to subscriber' mappings.")
subscribersNumIpRangeMappingsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumIpRangeMappingsFree.setStatus('current')
if mibBuilder.loadTexts: subscribersNumIpRangeMappingsFree.setDescription("Indicates the number of free 'IP-range to subscriber' mappings that may be used for defining new mappings.")
subscribersNumVlanMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumVlanMappings.setStatus('current')
if mibBuilder.loadTexts: subscribersNumVlanMappings.setDescription('Indicates the current number of VLAN to subscribers mappings.')
subscribersNumVlanMappingsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumVlanMappingsFree.setStatus('current')
if mibBuilder.loadTexts: subscribersNumVlanMappingsFree.setDescription("Indicates the number of free 'VLAN to subscriber' mappings that may be used for defining new mappings.")
subscribersNumActive = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumActive.setStatus('current')
if mibBuilder.loadTexts: subscribersNumActive.setDescription('Indicates the current number of active subscribers, these subscribers necessarily have an IP address or VLAN mappings that define the traffic that should be associated and served according to the subscriber service agreement.')
subscribersNumActivePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumActivePeak.setStatus('current')
if mibBuilder.loadTexts: subscribersNumActivePeak.setDescription('Indicates the peak value of subscribersNumActive since the last time it was cleared or the system started.')
subscribersNumActivePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 11), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumActivePeakTime.setStatus('current')
if mibBuilder.loadTexts: subscribersNumActivePeakTime.setDescription('Indicates the time since the subscribersNumActivePeak value occurred.')
subscribersNumUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumUpdates.setStatus('current')
if mibBuilder.loadTexts: subscribersNumUpdates.setDescription('Indicates the accumulated number of subscribers database updates received by the SCE.')
subscribersCountersClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 13), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscribersCountersClearTime.setStatus('current')
if mibBuilder.loadTexts: subscribersCountersClearTime.setDescription('Indicates the time since the subscribers counters were cleared. Writing a 0 to this object causes the counters to be cleared.')
subscribersNumTpIpRanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumTpIpRanges.setStatus('current')
if mibBuilder.loadTexts: subscribersNumTpIpRanges.setDescription("Indicates the current number of 'Traffic Processor IP ranges' used.")
subscribersNumTpIpRangesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumTpIpRangesFree.setStatus('current')
if mibBuilder.loadTexts: subscribersNumTpIpRangesFree.setDescription("Indicates the number of free 'Traffic Processor IP ranges'.")
subscribersNumAnonymous = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumAnonymous.setStatus('current')
if mibBuilder.loadTexts: subscribersNumAnonymous.setDescription('Indicates the current number of anonymous subscribers.')
subscribersNumWithSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscribersNumWithSessions.setStatus('current')
if mibBuilder.loadTexts: subscribersNumWithSessions.setDescription('Indicates the current number of subscribers with open sessions.')
tpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1), )
if mibBuilder.loadTexts: tpInfoTable.setStatus('current')
if mibBuilder.loadTexts: tpInfoTable.setDescription('The Traffic Processor Info table consists of data regarding traffic handled by the traffic processors by classification of packets and flows.')
tpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "tpModuleIndex"), (0, "PCUBE-SE-MIB", "tpIndex"))
if mibBuilder.loadTexts: tpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tpInfoEntry.setDescription('A tpInfoTable entry.')
tpModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpModuleIndex.setStatus('current')
if mibBuilder.loadTexts: tpModuleIndex.setDescription('An index value that uniquely identifies the module where this traffic processor is located.')
tpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIndex.setStatus('current')
if mibBuilder.loadTexts: tpIndex.setDescription('An index value that uniquely identifies this traffic processor within a module. The value is determined by the location of the traffic processor on the module. Valid entries are 1 to the value of moduleNumTrafficProcessors for this module.')
tpTotalNumHandledPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumHandledPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumHandledPackets.setDescription('Indicates the accumulated number of packets handled by this traffic processor since last reboot or last time this counter was cleared.')
tpTotalNumHandledFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumHandledFlows.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumHandledFlows.setDescription('Indicates the accumulated number of flows handled by this traffic Processor since last reboot or last time this counter was cleared.')
tpNumActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumActiveFlows.setStatus('current')
if mibBuilder.loadTexts: tpNumActiveFlows.setDescription('Indicates the number of flows currently being handled by this traffic processor.')
tpNumActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumActiveFlowsPeak.setStatus('current')
if mibBuilder.loadTexts: tpNumActiveFlowsPeak.setDescription('Indicates the peak value of tpNumActiveFlows since the last time it was cleared or the system started.')
tpNumActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 7), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumActiveFlowsPeakTime.setStatus('current')
if mibBuilder.loadTexts: tpNumActiveFlowsPeakTime.setDescription('Indicates the time since the tpNumActiveFlowsPeak value occurred.')
tpNumTcpActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumTcpActiveFlows.setStatus('current')
if mibBuilder.loadTexts: tpNumTcpActiveFlows.setDescription('Indicates the number of TCP flows currently being handled by this traffic processor.')
tpNumTcpActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumTcpActiveFlowsPeak.setStatus('current')
if mibBuilder.loadTexts: tpNumTcpActiveFlowsPeak.setDescription('Indicates the peak value of tpNumTcpActiveFlows since the last time it was cleared or the system started.')
tpNumTcpActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 10), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumTcpActiveFlowsPeakTime.setStatus('current')
if mibBuilder.loadTexts: tpNumTcpActiveFlowsPeakTime.setDescription('Indicates the time since the tpNumTcpActiveFlowsPeak value occurred.')
tpNumUdpActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumUdpActiveFlows.setStatus('current')
if mibBuilder.loadTexts: tpNumUdpActiveFlows.setDescription('Indicates the number of UDP flows currently being handled by this traffic processor.')
tpNumUdpActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumUdpActiveFlowsPeak.setStatus('current')
if mibBuilder.loadTexts: tpNumUdpActiveFlowsPeak.setDescription('Indicates the peak value of tpNumUdpActiveFlows since the last time it was cleared or the system started.')
tpNumUdpActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 13), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumUdpActiveFlowsPeakTime.setStatus('current')
if mibBuilder.loadTexts: tpNumUdpActiveFlowsPeakTime.setDescription('Indicates the time since the tpNumUdpActiveFlowsPeak value occurred.')
tpNumNonTcpUdpActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlows.setStatus('current')
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlows.setDescription('Indicates the number of non TCP/UDP flows currently being handled by this traffic processor.')
tpNumNonTcpUdpActiveFlowsPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlowsPeak.setStatus('current')
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlowsPeak.setDescription('Indicates the peak value of tpNumNonTcpUdpActiveFlows since the last time it was cleared or the system started.')
tpNumNonTcpUdpActiveFlowsPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 16), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlowsPeakTime.setStatus('current')
if mibBuilder.loadTexts: tpNumNonTcpUdpActiveFlowsPeakTime.setDescription('Indicates the time since the tpNumNonTcpUdpActiveFlowsPeak value occurred.')
tpTotalNumBlockedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumBlockedPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumBlockedPackets.setDescription('Indicates the accumulated number of packets discarded by this traffic processor according to application blocking rules.')
tpTotalNumBlockedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumBlockedFlows.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumBlockedFlows.setDescription('Indicates the accumulated number of flows discarded by this traffic processor according to application blocking rules.')
tpTotalNumDiscardedPacketsDueToBwLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumDiscardedPacketsDueToBwLimit.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumDiscardedPacketsDueToBwLimit.setDescription('Indicates the accumulated number of packets discarded by this traffic processor due to subscriber bandwidth limitations.')
tpTotalNumWredDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumWredDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumWredDiscardedPackets.setDescription('Indicates the accumulated number of packets discarded by this traffic processor due to congestion in the queues.')
tpTotalNumFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumFragments.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumFragments.setDescription('Indicates the accumulated number of fragmented packets handled by this traffic processor.')
tpTotalNumNonIpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumNonIpPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumNonIpPackets.setDescription('Indicates the accumulated number of non IP packets handled by this traffic processor.')
tpTotalNumIpCrcErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumIpCrcErrPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumIpCrcErrPackets.setDescription('Indicates the accumulated number of packets with IP CRC error handled by this traffic processor.')
tpTotalNumIpLengthErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumIpLengthErrPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumIpLengthErrPackets.setDescription('Indicates the accumulated number of packets with IP length error handled by this traffic processor.')
tpTotalNumIpBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumIpBroadcastPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumIpBroadcastPackets.setDescription('Indicates the accumulated number of IP broadcast packets handled by this traffic processor.')
tpTotalNumTtlErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumTtlErrPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumTtlErrPackets.setDescription('Indicates the accumulated number of packets with TTL error handled by this traffic processor.')
tpTotalNumTcpUdpCrcErrPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpTotalNumTcpUdpCrcErrPackets.setStatus('current')
if mibBuilder.loadTexts: tpTotalNumTcpUdpCrcErrPackets.setDescription('Indicates the accumulated number of TCP/UDP packets with CRC error handled by this traffic processor.')
tpClearCountersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 28), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpClearCountersTime.setStatus('current')
if mibBuilder.loadTexts: tpClearCountersTime.setDescription('Indicates the time since the traffic processor statistics counters were last cleared. Writing a 0 to this object causes the traffic processor counters to be cleared.')
tpHandledPacketsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledPacketsRate.setStatus('current')
if mibBuilder.loadTexts: tpHandledPacketsRate.setDescription('Indicates the rate in packets per second of the packets handled by this traffic processor.')
tpHandledPacketsRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledPacketsRatePeak.setStatus('current')
if mibBuilder.loadTexts: tpHandledPacketsRatePeak.setDescription('Indicates the peak value of tpHandledPacketsRate since the last time it was cleared or the system started.')
tpHandledPacketsRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 31), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledPacketsRatePeakTime.setStatus('current')
if mibBuilder.loadTexts: tpHandledPacketsRatePeakTime.setDescription('Indicates the time since the tpHandledPacketsRatePeak value occurred.')
tpHandledFlowsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledFlowsRate.setStatus('current')
if mibBuilder.loadTexts: tpHandledFlowsRate.setDescription('Indicates the rate in flows opening per second of the flows handled by this traffic processor.')
tpHandledFlowsRatePeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledFlowsRatePeak.setStatus('current')
if mibBuilder.loadTexts: tpHandledFlowsRatePeak.setDescription('Indicates the peak value of tpHandledFlowsRate since the last time it was cleared or the system started.')
tpHandledFlowsRatePeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 34), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpHandledFlowsRatePeakTime.setStatus('current')
if mibBuilder.loadTexts: tpHandledFlowsRatePeakTime.setDescription('Indicates the time since the tpHandledFlowsRatePeakTime value occurred.')
tpCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: tpCpuUtilization.setDescription('Indicates the percentage of CPU utilization, updated once every 2 minutes.')
tpCpuUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpCpuUtilizationPeak.setStatus('current')
if mibBuilder.loadTexts: tpCpuUtilizationPeak.setDescription('Indicates the peak value of tpCpuUtilization since the last time it was cleared or the system started.')
tpCpuUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 37), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpCpuUtilizationPeakTime.setStatus('current')
if mibBuilder.loadTexts: tpCpuUtilizationPeakTime.setDescription('Indicates the time since the tpCpuUtilizationPeak value occurred.')
tpFlowsCapacityUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFlowsCapacityUtilization.setStatus('current')
if mibBuilder.loadTexts: tpFlowsCapacityUtilization.setDescription('Indicates the percentage of flows capacity utilization.')
tpFlowsCapacityUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFlowsCapacityUtilizationPeak.setStatus('current')
if mibBuilder.loadTexts: tpFlowsCapacityUtilizationPeak.setDescription('Indicates the peak value of tpFlowsCapacityUtilization since the last time it was cleared or the system started.')
tpFlowsCapacityUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 40), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tpFlowsCapacityUtilizationPeakTime.setStatus('current')
if mibBuilder.loadTexts: tpFlowsCapacityUtilizationPeakTime.setDescription('Indicates the time since the tpFlowsCapacityUtilizationPeak value occurred.')
tpServiceLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 9, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpServiceLoss.setStatus('current')
if mibBuilder.loadTexts: tpServiceLoss.setDescription('Indicates the relative amount of service loss in this traffic Processor, in units of 0.001%, since last reboot or last time this counter was cleared.')
pportTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1), )
if mibBuilder.loadTexts: pportTable.setStatus('current')
if mibBuilder.loadTexts: pportTable.setDescription('A list of port entries. The number of entries is determined by the number of modules in the chassis and the number of ports on each module.')
pportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pportModuleIndex"), (0, "PCUBE-SE-MIB", "pportIndex"))
if mibBuilder.loadTexts: pportEntry.setStatus('current')
if mibBuilder.loadTexts: pportEntry.setDescription('Entry containing information for a particular port on a module.')
pportModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportModuleIndex.setStatus('current')
if mibBuilder.loadTexts: pportModuleIndex.setDescription('An index value that uniquely identifies the module where this port is located.')
pportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportIndex.setStatus('current')
if mibBuilder.loadTexts: pportIndex.setDescription('An index value that uniquely identifies this port within a module. The value is determined by the location of the port on the module. Valid entries are 1 to the value of moduleNumPorts for this module.')
pportType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 11, 15, 28))).clone(namedValues=NamedValues(("other", 1), ("e100BaseTX", 11), ("e1000BaseT", 15), ("e1000BaseSX", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportType.setStatus('current')
if mibBuilder.loadTexts: pportType.setDescription('The type of physical layer medium dependent interface on the port.')
pportNumTxQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportNumTxQueues.setStatus('current')
if mibBuilder.loadTexts: pportNumTxQueues.setDescription('The number of transmit queues supported by this port.')
pportIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportIfIndex.setStatus('current')
if mibBuilder.loadTexts: pportIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for this port.')
pportAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10000000, 100000000, 1000000000))).clone(namedValues=NamedValues(("autoNegotiation", 1), ("s10000000", 10000000), ("s100000000", 100000000), ("s1000000000", 1000000000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: pportAdminSpeed.setDescription('The desired speed of the port. The current operational speed of the port can be determined from ifSpeed.')
pportAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("auto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportAdminDuplex.setStatus('current')
if mibBuilder.loadTexts: pportAdminDuplex.setDescription('The desired duplex of the port.')
pportOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOperDuplex.setStatus('current')
if mibBuilder.loadTexts: pportOperDuplex.setDescription('Indicates whether the port is operating in half-duplex or full-duplex.')
pportLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportLinkIndex.setStatus('current')
if mibBuilder.loadTexts: pportLinkIndex.setDescription('Indicates the linkIndex of the link that this port belongs to. Value of 0 indicates that this port is not associated with any link. Value of -1 indicates that this port is associated to multiple links.')
pportOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("reflectionForcingDown", 3), ("redundancyForcingDown", 4), ("otherDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportOperStatus.setStatus('current')
if mibBuilder.loadTexts: pportOperStatus.setDescription('Indicates the status of the port and if the port is down indicates the reason.')
txQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1), )
if mibBuilder.loadTexts: txQueuesTable.setStatus('current')
if mibBuilder.loadTexts: txQueuesTable.setDescription("This table consists of information on the SCE's transmit queues.")
txQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "txQueuesModuleIndex"), (0, "PCUBE-SE-MIB", "txQueuesPortIndex"), (0, "PCUBE-SE-MIB", "txQueuesQueueIndex"))
if mibBuilder.loadTexts: txQueuesEntry.setStatus('current')
if mibBuilder.loadTexts: txQueuesEntry.setDescription('A txQueuesTable entry.')
txQueuesModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesModuleIndex.setStatus('current')
if mibBuilder.loadTexts: txQueuesModuleIndex.setDescription('An index value that uniquely identifies the module where this queue is located.')
txQueuesPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesPortIndex.setStatus('current')
if mibBuilder.loadTexts: txQueuesPortIndex.setDescription('An index value that uniquely identifies the port where this queue is located.')
txQueuesQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesQueueIndex.setStatus('current')
if mibBuilder.loadTexts: txQueuesQueueIndex.setDescription('An index value that uniquely identifies this queue within a port. The value is determined by the location of the queue on the port. Valid entries are 1 to the value of portNumTxQueues for this module.')
txQueuesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesDescription.setStatus('current')
if mibBuilder.loadTexts: txQueuesDescription.setDescription('Description of the transmit queue.')
txQueuesBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesBandwidth.setStatus('current')
if mibBuilder.loadTexts: txQueuesBandwidth.setDescription('The bandwidth in L1 kbps configured for this queue.')
txQueuesUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesUtilization.setStatus('current')
if mibBuilder.loadTexts: txQueuesUtilization.setDescription('The percentage of bandwidth utilization relative to the configured rate.')
txQueuesUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesUtilizationPeak.setStatus('current')
if mibBuilder.loadTexts: txQueuesUtilizationPeak.setDescription('Indicates the peak value of txQueuesUtilization since the last time it was cleared or the system started.')
txQueuesUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 8), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesUtilizationPeakTime.setStatus('current')
if mibBuilder.loadTexts: txQueuesUtilizationPeakTime.setDescription('Indicates the time since the txQueuesUtilizationPeak value occurred.')
txQueuesClearCountersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 9), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: txQueuesClearCountersTime.setStatus('current')
if mibBuilder.loadTexts: txQueuesClearCountersTime.setDescription('Indicates the time since the TX queues statistics counters were last cleared. Writing a 0 to this object causes the TX queues counters to be cleared.')
txQueuesDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 11, 1, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: txQueuesDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: txQueuesDroppedBytes.setDescription('Amount of dropped L3 bytes. This is valid only if the system is configured to count dropped bytes per TX queue.')
globalControllersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1), )
if mibBuilder.loadTexts: globalControllersTable.setStatus('current')
if mibBuilder.loadTexts: globalControllersTable.setDescription("This table consists of information on the SCE's Global Controllers. note: the globalControllersIndex and the SCE CLI configuration index have a offset of one i.e. 1 in the MIB refers to 0 in the CLI.")
globalControllersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "globalControllersModuleIndex"), (0, "PCUBE-SE-MIB", "globalControllersPortIndex"), (0, "PCUBE-SE-MIB", "globalControllersIndex"))
if mibBuilder.loadTexts: globalControllersEntry.setStatus('current')
if mibBuilder.loadTexts: globalControllersEntry.setDescription('A globalControllersTable entry.')
globalControllersModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersModuleIndex.setStatus('current')
if mibBuilder.loadTexts: globalControllersModuleIndex.setDescription('An index value that uniquely identifies the module where this controller is located.')
globalControllersPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersPortIndex.setStatus('current')
if mibBuilder.loadTexts: globalControllersPortIndex.setDescription('An index value that uniquely identifies the port where this controller is located.')
globalControllersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersIndex.setStatus('current')
if mibBuilder.loadTexts: globalControllersIndex.setDescription('An index value that uniquely identifies this controller within a port.')
globalControllersDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersDescription.setStatus('current')
if mibBuilder.loadTexts: globalControllersDescription.setDescription('Description of the controller.')
globalControllersBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersBandwidth.setStatus('current')
if mibBuilder.loadTexts: globalControllersBandwidth.setDescription('The L1 bandwidth configured for this controller.')
globalControllersUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersUtilization.setStatus('current')
if mibBuilder.loadTexts: globalControllersUtilization.setDescription('The percentage of bandwidth utilization relative to the configured rate.')
globalControllersUtilizationPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersUtilizationPeak.setStatus('current')
if mibBuilder.loadTexts: globalControllersUtilizationPeak.setDescription('Indicates the peak value of globalControllersUtilization since the last time it was cleared or the system started.')
globalControllersUtilizationPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 8), TimeTicks()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersUtilizationPeakTime.setStatus('current')
if mibBuilder.loadTexts: globalControllersUtilizationPeakTime.setDescription('Indicates the time since the globalControllersUtilizationPeak value occurred.')
globalControllersClearCountersTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 9), TimeTicks()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalControllersClearCountersTime.setStatus('current')
if mibBuilder.loadTexts: globalControllersClearCountersTime.setDescription('Indicates the time since the controllers statistics counters were last cleared. Writing a 0 to this object causes the controllers counters to be cleared.')
globalControllersDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 12, 1, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: globalControllersDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: globalControllersDroppedBytes.setDescription('Amount of L3 dropped bytes. This is valid only if the system is configured to count dropped bytes per global controller.')
appInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1), )
if mibBuilder.loadTexts: appInfoTable.setStatus('current')
if mibBuilder.loadTexts: appInfoTable.setDescription("This table consists of information on the SCE's application.")
appInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: appInfoEntry.setStatus('current')
if mibBuilder.loadTexts: appInfoEntry.setDescription('A appInfoTable entry.')
appName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appName.setStatus('current')
if mibBuilder.loadTexts: appName.setDescription('The application name.')
appDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appDescription.setStatus('current')
if mibBuilder.loadTexts: appDescription.setDescription('The application description.')
appVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appVersion.setStatus('current')
if mibBuilder.loadTexts: appVersion.setDescription('The application version.')
appPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2), )
if mibBuilder.loadTexts: appPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: appPropertiesTable.setDescription('The application properties table provides the list of properties available for the application. The table is cleared when the application is unloaded.')
appPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "apIndex"))
if mibBuilder.loadTexts: appPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: appPropertiesEntry.setDescription('A appPropertiesTable entry.')
apIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apIndex.setStatus('current')
if mibBuilder.loadTexts: apIndex.setDescription('An index value that uniquely identify the property.')
apName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apName.setStatus('current')
if mibBuilder.loadTexts: apName.setDescription('Application property name. Property can be either scalar or array type.')
apType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apType.setStatus('current')
if mibBuilder.loadTexts: apType.setDescription('Application property type.')
appPropertiesValueTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3), )
if mibBuilder.loadTexts: appPropertiesValueTable.setStatus('current')
if mibBuilder.loadTexts: appPropertiesValueTable.setDescription("The applications properties value table is used to provide specific values for the applications properties. An entry must be created by setting the entry's apvRowStatus object with createAndGo (4) before setting the name of the property requested. To specify the property set the apvPropertyName objects. The apvPropertyName must be one of the properties from the appPropertiesTable. To remove an entry set the apvRowStatus object with destroy (6). To poll the application property, poll the apvPropertyStringValue, apvPropertyUintValue, or apvPropertyCounter64Value object. The table is cleared when the application is unloaded.")
appPropertiesValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "apvIndex"))
if mibBuilder.loadTexts: appPropertiesValueEntry.setStatus('current')
if mibBuilder.loadTexts: appPropertiesValueEntry.setDescription('A appPropertiesValueTable entry.')
apvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: apvIndex.setStatus('current')
if mibBuilder.loadTexts: apvIndex.setDescription('Index to the table.')
apvPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apvPropertyName.setStatus('current')
if mibBuilder.loadTexts: apvPropertyName.setDescription('A name that uniquely identifies the application property. Array type properties may be accessed each element at a time in C like format, e.g. x[1], or y[1][2].')
apvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apvRowStatus.setStatus('current')
if mibBuilder.loadTexts: apvRowStatus.setDescription('This object controls creation of a table entry.')
apvPropertyStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvPropertyStringValue.setStatus('current')
if mibBuilder.loadTexts: apvPropertyStringValue.setDescription('The value of the application property in display string format.')
apvPropertyUintValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvPropertyUintValue.setStatus('current')
if mibBuilder.loadTexts: apvPropertyUintValue.setDescription("The value of the application property in unsigned integer. If the property can't be casted to unsigned integer this object returns zero.")
apvPropertyCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 13, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apvPropertyCounter64Value.setStatus('current')
if mibBuilder.loadTexts: apvPropertyCounter64Value.setDescription("The value of the application property in Counter64 format. If the property can't be casted to Counter64, getting this object returns zero.")
subscribersPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2), )
if mibBuilder.loadTexts: subscribersPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: subscribersPropertiesTable.setDescription('The subscribers properties table provides the list of properties available for each subscriber.')
subscribersPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "spIndex"))
if mibBuilder.loadTexts: subscribersPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: subscribersPropertiesEntry.setDescription('A subscribersPropertiesTable entry.')
spIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spIndex.setStatus('current')
if mibBuilder.loadTexts: spIndex.setDescription('An index value that uniquely identify the property.')
spName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spName.setStatus('current')
if mibBuilder.loadTexts: spName.setDescription('Subscriber property name.')
spType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spType.setStatus('current')
if mibBuilder.loadTexts: spType.setDescription('Subscriber application property type in respect to: variable type (integer, boolean, string etc), number of elements (scalar or array) and restrictions if any exist.')
subscribersPropertiesValueTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3), )
if mibBuilder.loadTexts: subscribersPropertiesValueTable.setStatus('current')
if mibBuilder.loadTexts: subscribersPropertiesValueTable.setDescription("The subscribers properties value table is used to provide subscriber properties values for subscribers introduced into the SCE. An entry must be created by setting the entry's spvRowStatus object with createAndGo (4) before setting any other of the entry's objects. To specify the subscriber's property set the spvSubName and spvPropertyName objects. The spvPropertyName must be one of the properties from the subscribersPropertiesTable. To remove an entry set the spvRowStatus object with destroy (6). To poll the subscriber property the manager need to poll the spvPropertyStringValue, the spvPropertyUintValue or the spvPropertyCounter64Value objects. The table is cleared when the application is unloaded.")
subscribersPropertiesValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "spvIndex"))
if mibBuilder.loadTexts: subscribersPropertiesValueEntry.setStatus('current')
if mibBuilder.loadTexts: subscribersPropertiesValueEntry.setDescription('A subscribersPropertiesValueTable entry.')
spvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: spvIndex.setStatus('current')
if mibBuilder.loadTexts: spvIndex.setDescription('A index to the table.')
spvSubName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvSubName.setStatus('current')
if mibBuilder.loadTexts: spvSubName.setDescription('A name that uniquely identifies the subscriber.')
spvPropertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvPropertyName.setStatus('current')
if mibBuilder.loadTexts: spvPropertyName.setDescription('A name that uniquely identifies the subscriber property. Array type properties may be accessed each element at a time in C like format, e.g. x[1], or y[1][2].')
spvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvRowStatus.setStatus('current')
if mibBuilder.loadTexts: spvRowStatus.setDescription('This object controls creation of a table entry. Only setting the createAndGo (4) and destroy (6) will change the status of the entry.')
spvPropertyStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvPropertyStringValue.setStatus('current')
if mibBuilder.loadTexts: spvPropertyStringValue.setDescription('The value of the subscriber property in string format.')
spvPropertyUintValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvPropertyUintValue.setStatus('current')
if mibBuilder.loadTexts: spvPropertyUintValue.setDescription("The value of the subscriber property in unsigned integer. If the property can't be casted to unsigned integer this object returns zero.")
spvPropertyCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvPropertyCounter64Value.setStatus('current')
if mibBuilder.loadTexts: spvPropertyCounter64Value.setDescription("The value of the subscriber property in Counter64. If the property can't be casted to Counter64 this object returns zero.")
trafficCountersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1), )
if mibBuilder.loadTexts: trafficCountersTable.setStatus('current')
if mibBuilder.loadTexts: trafficCountersTable.setDescription('The Traffic counters table provides information regarding the value of different the traffic counters.')
trafficCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "trafficCounterIndex"))
if mibBuilder.loadTexts: trafficCountersEntry.setStatus('current')
if mibBuilder.loadTexts: trafficCountersEntry.setDescription('Entry containing information about a traffic counter.')
trafficCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterIndex.setStatus('current')
if mibBuilder.loadTexts: trafficCounterIndex.setDescription('An index value that uniquely identifies the counter.')
trafficCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterValue.setStatus('current')
if mibBuilder.loadTexts: trafficCounterValue.setDescription('A 64 bit counter value.')
trafficCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterName.setStatus('current')
if mibBuilder.loadTexts: trafficCounterName.setDescription('The name given to this counter.')
trafficCounterType = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bytes", 2), ("packets", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCounterType.setStatus('current')
if mibBuilder.loadTexts: trafficCounterType.setDescription("Defines whether there the traffic counters counts by 'packets(3)' or by 'bytes(2)'.")
attackTypeTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1), )
if mibBuilder.loadTexts: attackTypeTable.setStatus('current')
if mibBuilder.loadTexts: attackTypeTable.setDescription('The Attack type table provides information regarding detected attacks, aggregated by attack type.')
attackTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "attackTypeIndex"))
if mibBuilder.loadTexts: attackTypeEntry.setStatus('current')
if mibBuilder.loadTexts: attackTypeEntry.setDescription('Entry containing aggregated information about attacks of a given type.')
attackTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeIndex.setStatus('current')
if mibBuilder.loadTexts: attackTypeIndex.setDescription('An index value that uniquely identifies the attack type.')
attackTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeName.setStatus('current')
if mibBuilder.loadTexts: attackTypeName.setDescription('The name of this attack type.')
attackTypeCurrentNumAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeCurrentNumAttacks.setStatus('current')
if mibBuilder.loadTexts: attackTypeCurrentNumAttacks.setDescription('The current amount of attacks detected of this type.')
attackTypeTotalNumAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeTotalNumAttacks.setStatus('current')
if mibBuilder.loadTexts: attackTypeTotalNumAttacks.setDescription('The total amount of attacks detected of this type since last clear.')
attackTypeTotalNumFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeTotalNumFlows.setStatus('current')
if mibBuilder.loadTexts: attackTypeTotalNumFlows.setDescription('The total amount of flows in attacks detected of this type since last clear.')
attackTypeTotalNumSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 15, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: attackTypeTotalNumSeconds.setStatus('current')
if mibBuilder.loadTexts: attackTypeTotalNumSeconds.setDescription('The total duration of attacks detected of this type since last clear.')
vasServerTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1), )
if mibBuilder.loadTexts: vasServerTable.setStatus('current')
if mibBuilder.loadTexts: vasServerTable.setDescription('The VAS server Table provides information on each VAS server operational status.')
vasServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"), (0, "PCUBE-SE-MIB", "vasServerIndex"))
if mibBuilder.loadTexts: vasServerEntry.setStatus('current')
if mibBuilder.loadTexts: vasServerEntry.setDescription('Entry containing information about VAS server status.')
vasServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerIndex.setStatus('current')
if mibBuilder.loadTexts: vasServerIndex.setDescription('An index value that uniquely identifies a VAS server.')
vasServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerId.setStatus('current')
if mibBuilder.loadTexts: vasServerId.setDescription('The ID of the VAS server.')
vasServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vasServerAdminStatus.setDescription('Indicates only the administrative status of the VAS sever, in order to activate a server it should be also configured with a VLAN and a group.')
vasServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vasServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: vasServerOperStatus.setDescription('Indicates the operational status of the VAS sever.')
mplsVpnSoftwareCountersTable = MibTable((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1), )
if mibBuilder.loadTexts: mplsVpnSoftwareCountersTable.setStatus('current')
if mibBuilder.loadTexts: mplsVpnSoftwareCountersTable.setDescription('The MPLS VPN software counters table provides information on various system software counters related to MPLS VPN auto learn.')
mplsVpnSoftwareCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1, 1), ).setIndexNames((0, "PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: mplsVpnSoftwareCountersEntry.setStatus('current')
if mibBuilder.loadTexts: mplsVpnSoftwareCountersEntry.setDescription('Entry containing information about MPLS VPN auto learn SW counters.')
mplsVpnMaxHWMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnMaxHWMappings.setStatus('current')
if mibBuilder.loadTexts: mplsVpnMaxHWMappings.setDescription('The maximum number of MPLS VPN mappings supported by HW (including all kinds of mappings).')
mplsVpnCurrentHWMappings = MibTableColumn((1, 3, 6, 1, 4, 1, 5655, 4, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVpnCurrentHWMappings.setStatus('current')
if mibBuilder.loadTexts: mplsVpnCurrentHWMappings.setDescription('The current number of HW MPLS VPN mappings in use.')
pcubeSeEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 3)).setObjects(("PCUBE-SE-MIB", "operationalStatusOperationalTrap"), ("PCUBE-SE-MIB", "operationalStatusWarningTrap"), ("PCUBE-SE-MIB", "operationalStatusFailureTrap"), ("PCUBE-SE-MIB", "systemResetTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOffTrap"), ("PCUBE-SE-MIB", "chassisVoltageAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisFansAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisPowerSupplyAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrNoActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrConnectionUpTrap"), ("PCUBE-SE-MIB", "rdrConnectionDownTrap"), ("PCUBE-SE-MIB", "telnetSessionStartedTrap"), ("PCUBE-SE-MIB", "telnetSessionEndedTrap"), ("PCUBE-SE-MIB", "telnetSessionDeniedAccessTrap"), ("PCUBE-SE-MIB", "telnetSessionBadLoginTrap"), ("PCUBE-SE-MIB", "loggerUserLogIsFullTrap"), ("PCUBE-SE-MIB", "sntpClockDriftWarnTrap"), ("PCUBE-SE-MIB", "linkModeBypassTrap"), ("PCUBE-SE-MIB", "linkModeForwardingTrap"), ("PCUBE-SE-MIB", "linkModeCutoffTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterActivatedTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterDeactivatedTrap"), ("PCUBE-SE-MIB", "moduleEmAgentGenericTrap"), ("PCUBE-SE-MIB", "linkModeSniffingTrap"), ("PCUBE-SE-MIB", "moduleRedundancyReadyTrap"), ("PCUBE-SE-MIB", "moduleRedundantConfigurationMismatchTrap"), ("PCUBE-SE-MIB", "moduleLostRedundancyTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionDownTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionUpTrap"), ("PCUBE-SE-MIB", "moduleOperStatusChangeTrap"), ("PCUBE-SE-MIB", "portOperStatusChangeTrap"), ("PCUBE-SE-MIB", "chassisLineFeedAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDiscardingReportsTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryStoppedDiscardingReportsTrap"), ("PCUBE-SE-MIB", "sessionStartedTrap"), ("PCUBE-SE-MIB", "sessionEndedTrap"), ("PCUBE-SE-MIB", "sessionDeniedAccessTrap"), ("PCUBE-SE-MIB", "sessionBadLoginTrap"), ("PCUBE-SE-MIB", "illegalSubscriberMappingTrap"), ("PCUBE-SE-MIB", "loggerLineAttackLogFullTrap"), ("PCUBE-SE-MIB", "vasServerOpertionalStatusChangeTrap"), ("PCUBE-SE-MIB", "pullRequestRetryFailedTrap"), ("PCUBE-SE-MIB", "mplsVpnTotalHWMappingsThresholdExceededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSeEventsGroup = pcubeSeEventsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: pcubeSeEventsGroup.setDescription('Pcube notifications. Contains deprecated objects.')
pcubeSeEventsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 4)).setObjects(("PCUBE-SE-MIB", "operationalStatusOperationalTrap"), ("PCUBE-SE-MIB", "operationalStatusWarningTrap"), ("PCUBE-SE-MIB", "operationalStatusFailureTrap"), ("PCUBE-SE-MIB", "systemResetTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisTempAlarmOffTrap"), ("PCUBE-SE-MIB", "chassisVoltageAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisFansAlarmOnTrap"), ("PCUBE-SE-MIB", "chassisPowerSupplyAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrNoActiveConnectionTrap"), ("PCUBE-SE-MIB", "rdrConnectionUpTrap"), ("PCUBE-SE-MIB", "rdrConnectionDownTrap"), ("PCUBE-SE-MIB", "loggerUserLogIsFullTrap"), ("PCUBE-SE-MIB", "sntpClockDriftWarnTrap"), ("PCUBE-SE-MIB", "linkModeBypassTrap"), ("PCUBE-SE-MIB", "linkModeForwardingTrap"), ("PCUBE-SE-MIB", "linkModeCutoffTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterActivatedTrap"), ("PCUBE-SE-MIB", "moduleAttackFilterDeactivatedTrap"), ("PCUBE-SE-MIB", "moduleEmAgentGenericTrap"), ("PCUBE-SE-MIB", "linkModeSniffingTrap"), ("PCUBE-SE-MIB", "moduleRedundancyReadyTrap"), ("PCUBE-SE-MIB", "moduleRedundantConfigurationMismatchTrap"), ("PCUBE-SE-MIB", "moduleLostRedundancyTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionDownTrap"), ("PCUBE-SE-MIB", "moduleSmConnectionUpTrap"), ("PCUBE-SE-MIB", "moduleOperStatusChangeTrap"), ("PCUBE-SE-MIB", "portOperStatusChangeTrap"), ("PCUBE-SE-MIB", "chassisLineFeedAlarmOnTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDiscardingReportsTrap"), ("PCUBE-SE-MIB", "rdrFormatterCategoryStoppedDiscardingReportsTrap"), ("PCUBE-SE-MIB", "sessionStartedTrap"), ("PCUBE-SE-MIB", "sessionEndedTrap"), ("PCUBE-SE-MIB", "sessionDeniedAccessTrap"), ("PCUBE-SE-MIB", "sessionBadLoginTrap"), ("PCUBE-SE-MIB", "illegalSubscriberMappingTrap"), ("PCUBE-SE-MIB", "loggerLineAttackLogFullTrap"), ("PCUBE-SE-MIB", "vasServerOpertionalStatusChangeTrap"), ("PCUBE-SE-MIB", "pullRequestRetryFailedTrap"), ("PCUBE-SE-MIB", "mplsVpnTotalHWMappingsThresholdExceededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSeEventsGroupRev1 = pcubeSeEventsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: pcubeSeEventsGroupRev1.setDescription('Pcube notifications.')
pcubeSeEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 5655, 4, 0))
operationalStatusOperationalTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 1)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"))
if mibBuilder.loadTexts: operationalStatusOperationalTrap.setStatus('current')
if mibBuilder.loadTexts: operationalStatusOperationalTrap.setDescription("OperationalStatusOperational notification signifies that the agent entity has detected the sysOperationalStatus object in this MIB has changed to 'operational(3)'.")
operationalStatusWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 2)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"))
if mibBuilder.loadTexts: operationalStatusWarningTrap.setStatus('current')
if mibBuilder.loadTexts: operationalStatusWarningTrap.setDescription("OperationalStatusWarning notification signifies that the agent entity has detected the sysOperationalStatus object in this MIB has changed to 'warning(4)'.")
operationalStatusFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 3)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"))
if mibBuilder.loadTexts: operationalStatusFailureTrap.setStatus('current')
if mibBuilder.loadTexts: operationalStatusFailureTrap.setDescription("OperationalStatusFailure notification signifies that the agent entity has detected the sysOperationalStatus object in this MIB has changed to 'failure(5)'.")
systemResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 4))
if mibBuilder.loadTexts: systemResetTrap.setStatus('current')
if mibBuilder.loadTexts: systemResetTrap.setDescription("A systemReset notification signifies that the agent entity is about to reset itself either per user's request or due to a fatal event.")
chassisTempAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 5)).setObjects(("PCUBE-SE-MIB", "pchassisTempAlarm"))
if mibBuilder.loadTexts: chassisTempAlarmOnTrap.setStatus('current')
if mibBuilder.loadTexts: chassisTempAlarmOnTrap.setDescription("A chassisTempAlarmOn notification signifies that the agent entity has detected the chassisTempAlarm object in this MIB has changed to the 'on(3)' state (temperature is too high).")
chassisTempAlarmOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 6)).setObjects(("PCUBE-SE-MIB", "pchassisTempAlarm"))
if mibBuilder.loadTexts: chassisTempAlarmOffTrap.setStatus('current')
if mibBuilder.loadTexts: chassisTempAlarmOffTrap.setDescription("A chassisTempAlarmOff notification signifies that the agent entity has detected the chassisTempAlarm object in this MIB has changed to the 'off(2)' state (temperature level is back to normal).")
chassisVoltageAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 7)).setObjects(("PCUBE-SE-MIB", "pchassisVoltageAlarm"))
if mibBuilder.loadTexts: chassisVoltageAlarmOnTrap.setStatus('current')
if mibBuilder.loadTexts: chassisVoltageAlarmOnTrap.setDescription("A chassisVoltageAlarmOn notification signifies that the agent entity has detected the chassisVoltageAlarm object in this MIB has changed to the 'on(3)' state (voltage level is too high).")
chassisFansAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 8)).setObjects(("PCUBE-SE-MIB", "pchassisFansAlarm"))
if mibBuilder.loadTexts: chassisFansAlarmOnTrap.setStatus('current')
if mibBuilder.loadTexts: chassisFansAlarmOnTrap.setDescription("A chassisFanStatusFailure notification signifies that the agent entity has detected the chassisFansAlarm object in this MIB has changed to the 'on(3)' state.")
chassisPowerSupplyAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 9)).setObjects(("PCUBE-SE-MIB", "pchassisPowerSupplyAlarm"))
if mibBuilder.loadTexts: chassisPowerSupplyAlarmOnTrap.setStatus('current')
if mibBuilder.loadTexts: chassisPowerSupplyAlarmOnTrap.setDescription("A chassisPsuStatusFailure notification signifies that the agent entity has detected the chassisPowerSupplyAlarm object in this MIB has changed to the 'on(3)' state.")
rdrActiveConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 10)).setObjects(("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestStatus"))
if mibBuilder.loadTexts: rdrActiveConnectionTrap.setStatus('current')
if mibBuilder.loadTexts: rdrActiveConnectionTrap.setDescription("RdrConnectionDestTypeActive notification signifies that the agent entity has detected the rdrFormatterDestStatus object in this MIB has changed to the 'active(2)' state.")
rdrNoActiveConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 11))
if mibBuilder.loadTexts: rdrNoActiveConnectionTrap.setStatus('current')
if mibBuilder.loadTexts: rdrNoActiveConnectionTrap.setDescription('A rdrNoActiveConnection notification signifies that the agent entity has detected there is no active connection between the RDR-formatter and any Data Collector.')
rdrConnectionUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 12)).setObjects(("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestConnectionStatus"))
if mibBuilder.loadTexts: rdrConnectionUpTrap.setStatus('current')
if mibBuilder.loadTexts: rdrConnectionUpTrap.setDescription("RdrConnectionStatusUp notification signifies that the agent entity has detected the rdrFormatterDestConnectionStatus object in this MIB has changed to 'up(2)'.")
rdrConnectionDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 13)).setObjects(("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestConnectionStatus"))
if mibBuilder.loadTexts: rdrConnectionDownTrap.setStatus('current')
if mibBuilder.loadTexts: rdrConnectionDownTrap.setDescription("RdrConnectionStatusDown notification signifies that the agent entity has detected the rdrFormatterDestConnectionStatus object in this MIB has changed to 'down(3)'.")
telnetSessionStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 14))
if mibBuilder.loadTexts: telnetSessionStartedTrap.setStatus('deprecated')
if mibBuilder.loadTexts: telnetSessionStartedTrap.setDescription('Replaced by the more generic sessionStartedTrap.')
telnetSessionEndedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 15))
if mibBuilder.loadTexts: telnetSessionEndedTrap.setStatus('deprecated')
if mibBuilder.loadTexts: telnetSessionEndedTrap.setDescription('Replaced by the more generic sessionEndedTrap.')
telnetSessionDeniedAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 16))
if mibBuilder.loadTexts: telnetSessionDeniedAccessTrap.setStatus('deprecated')
if mibBuilder.loadTexts: telnetSessionDeniedAccessTrap.setDescription('Replaced by the more generic sessionDeniedAccessTrap.')
telnetSessionBadLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 17))
if mibBuilder.loadTexts: telnetSessionBadLoginTrap.setStatus('deprecated')
if mibBuilder.loadTexts: telnetSessionBadLoginTrap.setDescription('Replaced by the more generic sessionBadLoginTrap.')
loggerUserLogIsFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 18))
if mibBuilder.loadTexts: loggerUserLogIsFullTrap.setStatus('current')
if mibBuilder.loadTexts: loggerUserLogIsFullTrap.setDescription('A loggerUserLogIsFull notification signifies that the agent entity has detected the User log file is full. In such case the agent entity rolls to the next file.')
sntpClockDriftWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 19))
if mibBuilder.loadTexts: sntpClockDriftWarnTrap.setStatus('current')
if mibBuilder.loadTexts: sntpClockDriftWarnTrap.setDescription("An sntpClockDriftWarn notification signifies that the entity's SNTP agent did not receive time update for a long period, this may cause a time drift.")
linkModeBypassTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 20)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeBypassTrap.setStatus('current')
if mibBuilder.loadTexts: linkModeBypassTrap.setDescription("A linkModeBypass notification signifies that the agent entity has detected that the linkOperMode object in this MIB has changed to 'bypass(2)'.")
linkModeForwardingTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 21)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeForwardingTrap.setStatus('current')
if mibBuilder.loadTexts: linkModeForwardingTrap.setDescription("A linkModeForwarding notification signifies that the agent entity has detected that the linkOperMode object in this MIB has changed to 'forwarding(3)'.")
linkModeCutoffTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 22)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeCutoffTrap.setStatus('current')
if mibBuilder.loadTexts: linkModeCutoffTrap.setDescription("A linkModeCutoff notification signifies that the agent entity has detected that the linkOperMode object in this MIB has changed to 'cutoff(4)'.")
pcubeSeEventGenericString1 = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 0, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcubeSeEventGenericString1.setStatus('current')
if mibBuilder.loadTexts: pcubeSeEventGenericString1.setDescription('Temporary string used for traps. Always returns an empty string.')
pcubeSeEventGenericString2 = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 0, 24), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcubeSeEventGenericString2.setStatus('current')
if mibBuilder.loadTexts: pcubeSeEventGenericString2.setDescription('Temporary string used for traps. Always returns an empty string.')
moduleAttackFilterActivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 25)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: moduleAttackFilterActivatedTrap.setStatus('current')
if mibBuilder.loadTexts: moduleAttackFilterActivatedTrap.setDescription("A moduleAttackFilterActivated notification signifies that the agent entity's attack filter module has activated a filter. The pcubeSeEventGenericString1 is the type of attack-filter, which was activated.")
moduleAttackFilterDeactivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 26)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString2"))
if mibBuilder.loadTexts: moduleAttackFilterDeactivatedTrap.setStatus('current')
if mibBuilder.loadTexts: moduleAttackFilterDeactivatedTrap.setDescription("A portAttackFilterDeactivated notification signifies that the agent entity's attack filter module has removed a filter that was previously activated. The pcubeSeEventGenericString1 is the attack-filter type, which was sent in the corresponding moduleAttackFilterActivatedTrap. the pcubeSeEventGenericString2 is the reason for deactivating the filter.")
moduleEmAgentGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 27)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString2"))
if mibBuilder.loadTexts: moduleEmAgentGenericTrap.setStatus('current')
if mibBuilder.loadTexts: moduleEmAgentGenericTrap.setDescription('A generic notification used by the P-Cube EM agent. pcubeSeEventGenericString1 specifies what notification is it, and pcubeSeEventGenericString2 is the relevant parameter.')
linkModeSniffingTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 28)).setObjects(("PCUBE-SE-MIB", "linkOperMode"))
if mibBuilder.loadTexts: linkModeSniffingTrap.setStatus('current')
if mibBuilder.loadTexts: linkModeSniffingTrap.setDescription("A linkModeSniffing notification signifies that the agent entity has detected that the linkOperMode object in this MIB has changed to 'sniffing(5)'.")
moduleRedundancyReadyTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 29)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if mibBuilder.loadTexts: moduleRedundancyReadyTrap.setStatus('current')
if mibBuilder.loadTexts: moduleRedundancyReadyTrap.setDescription('A moduleRedundancyReady notification signifies that the module was able to connect and synchronize with a redundant entity, and is now ready to handle fail-over if needed.')
moduleRedundantConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 30)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: moduleRedundantConfigurationMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: moduleRedundantConfigurationMismatchTrap.setDescription('A moduleRedundantConfigurationMismatch notification signifies that the module was not able to synchronize with a redundant entity, due to a essential configuration parameters that are do not match between the module and the redundant entity.')
moduleLostRedundancyTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 31)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if mibBuilder.loadTexts: moduleLostRedundancyTrap.setStatus('current')
if mibBuilder.loadTexts: moduleLostRedundancyTrap.setDescription('A moduleLostRedundancy notification signifies that the module has lost the ability to perform the fail-over procedure.')
moduleSmConnectionDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 32)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: moduleSmConnectionDownTrap.setStatus('current')
if mibBuilder.loadTexts: moduleSmConnectionDownTrap.setDescription("A moduleSmConnectionDown notification signifies that the module's virtual connection to the subscriber manager is broken.")
moduleSmConnectionUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 33)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"))
if mibBuilder.loadTexts: moduleSmConnectionUpTrap.setStatus('current')
if mibBuilder.loadTexts: moduleSmConnectionUpTrap.setDescription("A moduleSmConnectionUp notification signifies that the module's virtual connection to the subscriber manager is up and working.")
moduleOperStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 34)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if mibBuilder.loadTexts: moduleOperStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: moduleOperStatusChangeTrap.setDescription('A moduleOperStatusChangeTrap notification signifies that the moduleOperStatus has changed its value.')
portOperStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 35)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pportIndex"), ("PCUBE-SE-MIB", "pportOperStatus"))
if mibBuilder.loadTexts: portOperStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: portOperStatusChangeTrap.setDescription('A portOperStatusChangeTrap notification signifies that the portOperStatus object of the portIndex has changed its value, i.e., the link was forced down or the force down was released.')
chassisLineFeedAlarmOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 36)).setObjects(("PCUBE-SE-MIB", "pchassisLineFeedAlarm"))
if mibBuilder.loadTexts: chassisLineFeedAlarmOnTrap.setStatus('current')
if mibBuilder.loadTexts: chassisLineFeedAlarmOnTrap.setDescription("A chassisLineFeedAlarmOn notification signifies that the agent entity has detected the chassisLineFeed object in this MIB has changed to the 'on(3)' state.")
rdrFormatterCategoryDiscardingReportsTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 37)).setObjects(("PCUBE-SE-MIB", "rdrFormatterCategoryIndex"))
if mibBuilder.loadTexts: rdrFormatterCategoryDiscardingReportsTrap.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryDiscardingReportsTrap.setDescription('rdrCategoryDiscardingReportsTrap notification signifies that the agent entity has detected that reports send to this category are being discarded. The rdrFormatterCategoryNumReportsDiscarded object in this MIB is counting the amount of discarded reports.')
rdrFormatterCategoryStoppedDiscardingReportsTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 38)).setObjects(("PCUBE-SE-MIB", "rdrFormatterCategoryIndex"))
if mibBuilder.loadTexts: rdrFormatterCategoryStoppedDiscardingReportsTrap.setStatus('current')
if mibBuilder.loadTexts: rdrFormatterCategoryStoppedDiscardingReportsTrap.setDescription('rdrCategoryStoppedDiscardingReportsTrap notification signifies that the agent entity has detected that reports send to this category are not being discarded any more. The rdrFormatterCategoryNumReportsDiscarded object in this MIB is counting the amount of discarded reports.')
sessionStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 39)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: sessionStartedTrap.setStatus('current')
if mibBuilder.loadTexts: sessionStartedTrap.setDescription('A sessionStarted notification signifies that the agent entity has accepted a new session. The pcubeSeEventGenericString1 is the session type (telnet/SSH) and client IP address.')
sessionEndedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 40)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: sessionEndedTrap.setStatus('current')
if mibBuilder.loadTexts: sessionEndedTrap.setDescription('A sessionEnded notification signifies that the agent entity has detected end of a session. The pcubeSeEventGenericString1 is the session type (telnet/SSH) and client IP address.')
sessionDeniedAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 41))
if mibBuilder.loadTexts: sessionDeniedAccessTrap.setStatus('current')
if mibBuilder.loadTexts: sessionDeniedAccessTrap.setDescription('A sessionDeniedAccess notification signifies that the agent entity has refused a session from unauthorized source. The pcubeSeEventGenericString1 is the session type (telnet/SSH) and client IP address.')
sessionBadLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 42))
if mibBuilder.loadTexts: sessionBadLoginTrap.setStatus('current')
if mibBuilder.loadTexts: sessionBadLoginTrap.setDescription('A sessionBadLogin notification signifies that the agent entity has detected attempt to login with a wrong password. The pcubeSeEventGenericString1 is the session type (telnet/SSH) and client IP address.')
illegalSubscriberMappingTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 43)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString1"))
if mibBuilder.loadTexts: illegalSubscriberMappingTrap.setStatus('current')
if mibBuilder.loadTexts: illegalSubscriberMappingTrap.setDescription('A illegalSubscriberMappingTrap notification signifies that some external entity has attempted to create illegal or inconsistent subscriber mappings. The pcubeSeEventGenericString1 contains a message describing the problem.')
loggerLineAttackLogFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 44))
if mibBuilder.loadTexts: loggerLineAttackLogFullTrap.setStatus('current')
if mibBuilder.loadTexts: loggerLineAttackLogFullTrap.setDescription('Signifies that the agent entity has detected the line-attack log file is full. In such case the agent entity rolls to the next file.')
vasServerOpertionalStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 45)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "vasServerIndex"), ("PCUBE-SE-MIB", "vasServerId"), ("PCUBE-SE-MIB", "vasServerOperStatus"))
if mibBuilder.loadTexts: vasServerOpertionalStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: vasServerOpertionalStatusChangeTrap.setDescription('Signifies that the agent entity has detected that the vas server operational status has changed.')
pullRequestNumber = MibScalar((1, 3, 6, 1, 4, 1, 5655, 4, 0, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pullRequestNumber.setStatus('current')
if mibBuilder.loadTexts: pullRequestNumber.setDescription('Used only for traps to signify the number of pull requests issued so far for the anonymous subscriber given in the pullRequestRetryFailedTrap containing notification. A direct get will always returns 0.')
pullRequestRetryFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 47)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pullRequestNumber"))
if mibBuilder.loadTexts: pullRequestRetryFailedTrap.setStatus('current')
if mibBuilder.loadTexts: pullRequestRetryFailedTrap.setDescription("Signifies that an unknown subscriber wasn't identified after a certain number of pull requests. The value of pcubeSeEventGenericString1 is the subscriber id and the pullRequestNumber is the number of pull requests made on this sub.")
mplsVpnTotalHWMappingsThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 5655, 4, 0, 48)).setObjects(("PCUBE-SE-MIB", "mplsVpnCurrentHWMappings"))
if mibBuilder.loadTexts: mplsVpnTotalHWMappingsThresholdExceededTrap.setStatus('current')
if mibBuilder.loadTexts: mplsVpnTotalHWMappingsThresholdExceededTrap.setDescription('Sent when the value of mplsVpnCurrentHWMappings exceeds the allowed threshold.')
pcubeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 2, 1)).setObjects(("PCUBE-SE-MIB", "pcubeSystemGroup"), ("PCUBE-SE-MIB", "pcubeChassisGroup"), ("PCUBE-SE-MIB", "pcuebModuleGroup"), ("PCUBE-SE-MIB", "pcubeLinkGroup"), ("PCUBE-SE-MIB", "pcubeDiskGroup"), ("PCUBE-SE-MIB", "pcubeRdrFormatterGroup"), ("PCUBE-SE-MIB", "pcubeLoggerGroup"), ("PCUBE-SE-MIB", "pcubeSubscribersGroup"), ("PCUBE-SE-MIB", "pcubeTrafficProcessorGroup"), ("PCUBE-SE-MIB", "pcubePortGroup"), ("PCUBE-SE-MIB", "pcubeTxQueuesGroup"), ("PCUBE-SE-MIB", "pcubeGlobalControllersGroup"), ("PCUBE-SE-MIB", "pcubeApplicationGroup"), ("PCUBE-SE-MIB", "pcubeTrafficCountersGroup"), ("PCUBE-SE-MIB", "pcubeAttackGroup"), ("PCUBE-SE-MIB", "pcubeVasTrafficForwardingGroup"), ("PCUBE-SE-MIB", "pcubeTrapObjectsGroup"), ("PCUBE-SE-MIB", "pcubeMplsVpnAutoLearnGroup"), ("PCUBE-SE-MIB", "pcubeSeEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeCompliance = pcubeCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: pcubeCompliance.setDescription('A compliance statement defined in this MIB module, for SCE SNMP agents. with old deprectated groups. This compliance includes deprecated groups.')
pcubeComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 2, 2)).setObjects(("PCUBE-SE-MIB", "pcubeSystemGroup"), ("PCUBE-SE-MIB", "pcubeChassisGroup"), ("PCUBE-SE-MIB", "pcuebModuleGroup"), ("PCUBE-SE-MIB", "pcubeLinkGroup"), ("PCUBE-SE-MIB", "pcubeDiskGroup"), ("PCUBE-SE-MIB", "pcubeRdrFormatterGroup"), ("PCUBE-SE-MIB", "pcubeLoggerGroup"), ("PCUBE-SE-MIB", "pcubeSubscribersGroup"), ("PCUBE-SE-MIB", "pcubeTrafficProcessorGroup"), ("PCUBE-SE-MIB", "pcubePortGroup"), ("PCUBE-SE-MIB", "pcubeTxQueuesGroup"), ("PCUBE-SE-MIB", "pcubeGlobalControllersGroup"), ("PCUBE-SE-MIB", "pcubeApplicationGroup"), ("PCUBE-SE-MIB", "pcubeTrafficCountersGroup"), ("PCUBE-SE-MIB", "pcubeAttackGroup"), ("PCUBE-SE-MIB", "pcubeVasTrafficForwardingGroup"), ("PCUBE-SE-MIB", "pcubeTrapObjectsGroup"), ("PCUBE-SE-MIB", "pcubeMplsVpnAutoLearnGroup"), ("PCUBE-SE-MIB", "pcubeSeEventsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeComplianceRev1 = pcubeComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: pcubeComplianceRev1.setDescription('A compliance statement defined in this MIB module, for SCE SNMP agents.')
pcubeSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 1)).setObjects(("PCUBE-SE-MIB", "sysOperationalStatus"), ("PCUBE-SE-MIB", "sysFailureRecovery"), ("PCUBE-SE-MIB", "sysVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSystemGroup = pcubeSystemGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeSystemGroup.setDescription('System related inforamation.')
pcubeChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 2)).setObjects(("PCUBE-SE-MIB", "pchassisSysType"), ("PCUBE-SE-MIB", "pchassisPowerSupplyAlarm"), ("PCUBE-SE-MIB", "pchassisFansAlarm"), ("PCUBE-SE-MIB", "pchassisTempAlarm"), ("PCUBE-SE-MIB", "pchassisVoltageAlarm"), ("PCUBE-SE-MIB", "pchassisNumSlots"), ("PCUBE-SE-MIB", "pchassisSlotConfig"), ("PCUBE-SE-MIB", "pchassisPsuType"), ("PCUBE-SE-MIB", "pchassisLineFeedAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeChassisGroup = pcubeChassisGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeChassisGroup.setDescription('Chassis related information.')
pcuebModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 3)).setObjects(("PCUBE-SE-MIB", "pmoduleIndex"), ("PCUBE-SE-MIB", "pmoduleType"), ("PCUBE-SE-MIB", "pmoduleNumTrafficProcessors"), ("PCUBE-SE-MIB", "pmoduleSlotNum"), ("PCUBE-SE-MIB", "pmoduleHwVersion"), ("PCUBE-SE-MIB", "pmoduleNumPorts"), ("PCUBE-SE-MIB", "pmoduleNumLinks"), ("PCUBE-SE-MIB", "pmoduleConnectionMode"), ("PCUBE-SE-MIB", "pmoduleSerialNumber"), ("PCUBE-SE-MIB", "pmoduleUpStreamAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleUpStreamLastAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleDownStreamAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleDownStreamLastAttackFilteringTime"), ("PCUBE-SE-MIB", "pmoduleAttackObjectsClearTime"), ("PCUBE-SE-MIB", "pmoduleAdminStatus"), ("PCUBE-SE-MIB", "pmoduleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcuebModuleGroup = pcuebModuleGroup.setStatus('current')
if mibBuilder.loadTexts: pcuebModuleGroup.setDescription('Module related information.')
pcubeLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 4)).setObjects(("PCUBE-SE-MIB", "linkModuleIndex"), ("PCUBE-SE-MIB", "linkIndex"), ("PCUBE-SE-MIB", "linkAdminModeOnActive"), ("PCUBE-SE-MIB", "linkAdminModeOnFailure"), ("PCUBE-SE-MIB", "linkOperMode"), ("PCUBE-SE-MIB", "linkStatusReflectionEnable"), ("PCUBE-SE-MIB", "linkSubscriberSidePortIndex"), ("PCUBE-SE-MIB", "linkNetworkSidePortIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeLinkGroup = pcubeLinkGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeLinkGroup.setDescription('Link related information.')
pcubeDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 5)).setObjects(("PCUBE-SE-MIB", "diskNumUsedBytes"), ("PCUBE-SE-MIB", "diskNumFreeBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeDiskGroup = pcubeDiskGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeDiskGroup.setDescription('Disk related information.')
pcubeRdrFormatterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 6)).setObjects(("PCUBE-SE-MIB", "rdrFormatterEnable"), ("PCUBE-SE-MIB", "rdrFormatterDestIPAddr"), ("PCUBE-SE-MIB", "rdrFormatterDestPort"), ("PCUBE-SE-MIB", "rdrFormatterDestPriority"), ("PCUBE-SE-MIB", "rdrFormatterDestStatus"), ("PCUBE-SE-MIB", "rdrFormatterDestConnectionStatus"), ("PCUBE-SE-MIB", "rdrFormatterDestNumReportsSent"), ("PCUBE-SE-MIB", "rdrFormatterDestNumReportsDiscarded"), ("PCUBE-SE-MIB", "rdrFormatterDestReportRate"), ("PCUBE-SE-MIB", "rdrFormatterDestReportRatePeak"), ("PCUBE-SE-MIB", "rdrFormatterDestReportRatePeakTime"), ("PCUBE-SE-MIB", "rdrFormatterNumReportsSent"), ("PCUBE-SE-MIB", "rdrFormatterNumReportsDiscarded"), ("PCUBE-SE-MIB", "rdrFormatterClearCountersTime"), ("PCUBE-SE-MIB", "rdrFormatterReportRate"), ("PCUBE-SE-MIB", "rdrFormatterReportRatePeak"), ("PCUBE-SE-MIB", "rdrFormatterReportRatePeakTime"), ("PCUBE-SE-MIB", "rdrFormatterProtocol"), ("PCUBE-SE-MIB", "rdrFormatterForwardingMode"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDestPriority"), ("PCUBE-SE-MIB", "rdrFormatterCategoryDestStatus"), ("PCUBE-SE-MIB", "rdrFormatterCategoryIndex"), ("PCUBE-SE-MIB", "rdrFormatterCategoryName"), ("PCUBE-SE-MIB", "rdrFormatterCategoryNumReportsSent"), ("PCUBE-SE-MIB", "rdrFormatterCategoryNumReportsDiscarded"), ("PCUBE-SE-MIB", "rdrFormatterCategoryReportRate"), ("PCUBE-SE-MIB", "rdrFormatterCategoryReportRatePeak"), ("PCUBE-SE-MIB", "rdrFormatterCategoryReportRatePeakTime"), ("PCUBE-SE-MIB", "rdrFormatterCategoryNumReportsQueued"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeRdrFormatterGroup = pcubeRdrFormatterGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeRdrFormatterGroup.setDescription('RDR-Formatter related information.')
pcubeLoggerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 7)).setObjects(("PCUBE-SE-MIB", "loggerUserLogEnable"), ("PCUBE-SE-MIB", "loggerUserLogNumInfo"), ("PCUBE-SE-MIB", "loggerUserLogNumWarning"), ("PCUBE-SE-MIB", "loggerUserLogNumError"), ("PCUBE-SE-MIB", "loggerUserLogNumFatal"), ("PCUBE-SE-MIB", "loggerUserLogClearCountersTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeLoggerGroup = pcubeLoggerGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeLoggerGroup.setDescription('Logger related information.')
pcubeSubscribersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 8)).setObjects(("PCUBE-SE-MIB", "subscribersNumIntroduced"), ("PCUBE-SE-MIB", "subscribersNumFree"), ("PCUBE-SE-MIB", "subscribersNumIpAddrMappings"), ("PCUBE-SE-MIB", "subscribersNumIpAddrMappingsFree"), ("PCUBE-SE-MIB", "subscribersNumIpRangeMappings"), ("PCUBE-SE-MIB", "subscribersNumIpRangeMappingsFree"), ("PCUBE-SE-MIB", "subscribersNumVlanMappings"), ("PCUBE-SE-MIB", "subscribersNumVlanMappingsFree"), ("PCUBE-SE-MIB", "subscribersNumActive"), ("PCUBE-SE-MIB", "subscribersNumActivePeak"), ("PCUBE-SE-MIB", "subscribersNumActivePeakTime"), ("PCUBE-SE-MIB", "subscribersNumUpdates"), ("PCUBE-SE-MIB", "subscribersCountersClearTime"), ("PCUBE-SE-MIB", "subscribersNumTpIpRanges"), ("PCUBE-SE-MIB", "subscribersNumTpIpRangesFree"), ("PCUBE-SE-MIB", "subscribersNumAnonymous"), ("PCUBE-SE-MIB", "subscribersNumWithSessions"), ("PCUBE-SE-MIB", "spIndex"), ("PCUBE-SE-MIB", "spName"), ("PCUBE-SE-MIB", "spType"), ("PCUBE-SE-MIB", "spvSubName"), ("PCUBE-SE-MIB", "spvPropertyName"), ("PCUBE-SE-MIB", "spvRowStatus"), ("PCUBE-SE-MIB", "spvPropertyStringValue"), ("PCUBE-SE-MIB", "spvPropertyUintValue"), ("PCUBE-SE-MIB", "spvPropertyCounter64Value"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeSubscribersGroup = pcubeSubscribersGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeSubscribersGroup.setDescription('Subscriber related information.')
pcubeTrafficProcessorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 9)).setObjects(("PCUBE-SE-MIB", "tpModuleIndex"), ("PCUBE-SE-MIB", "tpIndex"), ("PCUBE-SE-MIB", "tpTotalNumHandledPackets"), ("PCUBE-SE-MIB", "tpTotalNumHandledFlows"), ("PCUBE-SE-MIB", "tpNumActiveFlows"), ("PCUBE-SE-MIB", "tpNumActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpNumTcpActiveFlows"), ("PCUBE-SE-MIB", "tpNumTcpActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumTcpActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpNumUdpActiveFlows"), ("PCUBE-SE-MIB", "tpNumUdpActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumUdpActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpNumNonTcpUdpActiveFlows"), ("PCUBE-SE-MIB", "tpNumNonTcpUdpActiveFlowsPeak"), ("PCUBE-SE-MIB", "tpNumNonTcpUdpActiveFlowsPeakTime"), ("PCUBE-SE-MIB", "tpTotalNumBlockedPackets"), ("PCUBE-SE-MIB", "tpTotalNumBlockedFlows"), ("PCUBE-SE-MIB", "tpTotalNumDiscardedPacketsDueToBwLimit"), ("PCUBE-SE-MIB", "tpTotalNumWredDiscardedPackets"), ("PCUBE-SE-MIB", "tpTotalNumFragments"), ("PCUBE-SE-MIB", "tpTotalNumNonIpPackets"), ("PCUBE-SE-MIB", "tpTotalNumIpCrcErrPackets"), ("PCUBE-SE-MIB", "tpTotalNumIpLengthErrPackets"), ("PCUBE-SE-MIB", "tpTotalNumIpBroadcastPackets"), ("PCUBE-SE-MIB", "tpTotalNumTtlErrPackets"), ("PCUBE-SE-MIB", "tpTotalNumTcpUdpCrcErrPackets"), ("PCUBE-SE-MIB", "tpClearCountersTime"), ("PCUBE-SE-MIB", "tpHandledPacketsRate"), ("PCUBE-SE-MIB", "tpHandledPacketsRatePeak"), ("PCUBE-SE-MIB", "tpHandledPacketsRatePeakTime"), ("PCUBE-SE-MIB", "tpHandledFlowsRate"), ("PCUBE-SE-MIB", "tpHandledFlowsRatePeak"), ("PCUBE-SE-MIB", "tpHandledFlowsRatePeakTime"), ("PCUBE-SE-MIB", "tpCpuUtilization"), ("PCUBE-SE-MIB", "tpCpuUtilizationPeak"), ("PCUBE-SE-MIB", "tpCpuUtilizationPeakTime"), ("PCUBE-SE-MIB", "tpFlowsCapacityUtilization"), ("PCUBE-SE-MIB", "tpFlowsCapacityUtilizationPeak"), ("PCUBE-SE-MIB", "tpFlowsCapacityUtilizationPeakTime"), ("PCUBE-SE-MIB", "tpServiceLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTrafficProcessorGroup = pcubeTrafficProcessorGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeTrafficProcessorGroup.setDescription('Traffic processors related information.')
pcubePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 10)).setObjects(("PCUBE-SE-MIB", "pportModuleIndex"), ("PCUBE-SE-MIB", "pportIndex"), ("PCUBE-SE-MIB", "pportType"), ("PCUBE-SE-MIB", "pportNumTxQueues"), ("PCUBE-SE-MIB", "pportIfIndex"), ("PCUBE-SE-MIB", "pportAdminSpeed"), ("PCUBE-SE-MIB", "pportAdminDuplex"), ("PCUBE-SE-MIB", "pportOperDuplex"), ("PCUBE-SE-MIB", "pportLinkIndex"), ("PCUBE-SE-MIB", "pportOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubePortGroup = pcubePortGroup.setStatus('current')
if mibBuilder.loadTexts: pcubePortGroup.setDescription('Ports related information.')
pcubeTxQueuesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 11)).setObjects(("PCUBE-SE-MIB", "txQueuesModuleIndex"), ("PCUBE-SE-MIB", "txQueuesPortIndex"), ("PCUBE-SE-MIB", "txQueuesQueueIndex"), ("PCUBE-SE-MIB", "txQueuesDescription"), ("PCUBE-SE-MIB", "txQueuesBandwidth"), ("PCUBE-SE-MIB", "txQueuesUtilization"), ("PCUBE-SE-MIB", "txQueuesUtilizationPeak"), ("PCUBE-SE-MIB", "txQueuesUtilizationPeakTime"), ("PCUBE-SE-MIB", "txQueuesClearCountersTime"), ("PCUBE-SE-MIB", "txQueuesDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTxQueuesGroup = pcubeTxQueuesGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeTxQueuesGroup.setDescription('Tx queue related information')
pcubeGlobalControllersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 12)).setObjects(("PCUBE-SE-MIB", "globalControllersModuleIndex"), ("PCUBE-SE-MIB", "globalControllersPortIndex"), ("PCUBE-SE-MIB", "globalControllersIndex"), ("PCUBE-SE-MIB", "globalControllersDescription"), ("PCUBE-SE-MIB", "globalControllersBandwidth"), ("PCUBE-SE-MIB", "globalControllersUtilization"), ("PCUBE-SE-MIB", "globalControllersUtilizationPeak"), ("PCUBE-SE-MIB", "globalControllersUtilizationPeakTime"), ("PCUBE-SE-MIB", "globalControllersClearCountersTime"), ("PCUBE-SE-MIB", "globalControllersDroppedBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeGlobalControllersGroup = pcubeGlobalControllersGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeGlobalControllersGroup.setDescription('Global controllers related information.')
pcubeApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 13)).setObjects(("PCUBE-SE-MIB", "appName"), ("PCUBE-SE-MIB", "appDescription"), ("PCUBE-SE-MIB", "appVersion"), ("PCUBE-SE-MIB", "apIndex"), ("PCUBE-SE-MIB", "apName"), ("PCUBE-SE-MIB", "apType"), ("PCUBE-SE-MIB", "apvPropertyName"), ("PCUBE-SE-MIB", "apvRowStatus"), ("PCUBE-SE-MIB", "apvPropertyStringValue"), ("PCUBE-SE-MIB", "apvPropertyUintValue"), ("PCUBE-SE-MIB", "apvPropertyCounter64Value"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeApplicationGroup = pcubeApplicationGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeApplicationGroup.setDescription('Application related information.')
pcubeTrafficCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 14)).setObjects(("PCUBE-SE-MIB", "trafficCounterIndex"), ("PCUBE-SE-MIB", "trafficCounterValue"), ("PCUBE-SE-MIB", "trafficCounterName"), ("PCUBE-SE-MIB", "trafficCounterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTrafficCountersGroup = pcubeTrafficCountersGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeTrafficCountersGroup.setDescription('Traffic counter related information.')
pcubeAttackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 15)).setObjects(("PCUBE-SE-MIB", "attackTypeIndex"), ("PCUBE-SE-MIB", "attackTypeName"), ("PCUBE-SE-MIB", "attackTypeCurrentNumAttacks"), ("PCUBE-SE-MIB", "attackTypeTotalNumAttacks"), ("PCUBE-SE-MIB", "attackTypeTotalNumFlows"), ("PCUBE-SE-MIB", "attackTypeTotalNumSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeAttackGroup = pcubeAttackGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeAttackGroup.setDescription('Attacks related information.')
pcubeVasTrafficForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 16)).setObjects(("PCUBE-SE-MIB", "vasServerIndex"), ("PCUBE-SE-MIB", "vasServerId"), ("PCUBE-SE-MIB", "vasServerAdminStatus"), ("PCUBE-SE-MIB", "vasServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeVasTrafficForwardingGroup = pcubeVasTrafficForwardingGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeVasTrafficForwardingGroup.setDescription('VAS traffic forwarding related information.')
pcubeMplsVpnAutoLearnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 17)).setObjects(("PCUBE-SE-MIB", "mplsVpnMaxHWMappings"), ("PCUBE-SE-MIB", "mplsVpnCurrentHWMappings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeMplsVpnAutoLearnGroup = pcubeMplsVpnAutoLearnGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeMplsVpnAutoLearnGroup.setDescription('MPLS VPN auto learning related information.')
pcubeTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5655, 2, 3, 1, 1, 18)).setObjects(("PCUBE-SE-MIB", "pcubeSeEventGenericString1"), ("PCUBE-SE-MIB", "pcubeSeEventGenericString2"), ("PCUBE-SE-MIB", "pullRequestNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcubeTrapObjectsGroup = pcubeTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: pcubeTrapObjectsGroup.setDescription("Notifications' objects group.")
mibBuilder.exportSymbols("PCUBE-SE-MIB", pcubeSEObjs=pcubeSEObjs, appInfoTable=appInfoTable, pcubeTrapObjectsGroup=pcubeTrapObjectsGroup, pcubeCompliance=pcubeCompliance, pullRequestNumber=pullRequestNumber, pcubeTrafficProcessorGroup=pcubeTrafficProcessorGroup, vasServerIndex=vasServerIndex, rdrFormatterDestPriority=rdrFormatterDestPriority, tpHandledFlowsRate=tpHandledFlowsRate, rdrFormatterGrp=rdrFormatterGrp, globalControllersGrp=globalControllersGrp, pmoduleHwVersion=pmoduleHwVersion, attackTypeTotalNumSeconds=attackTypeTotalNumSeconds, spType=spType, rdrFormatterCategoryEntry=rdrFormatterCategoryEntry, rdrFormatterCategoryIndex=rdrFormatterCategoryIndex, tpHandledPacketsRatePeakTime=tpHandledPacketsRatePeakTime, pcubeGlobalControllersGroup=pcubeGlobalControllersGroup, chassisTempAlarmOffTrap=chassisTempAlarmOffTrap, pchassisSlotConfig=pchassisSlotConfig, tpCpuUtilization=tpCpuUtilization, telnetSessionDeniedAccessTrap=telnetSessionDeniedAccessTrap, pcubeSeCompliances=pcubeSeCompliances, sessionDeniedAccessTrap=sessionDeniedAccessTrap, appPropertiesTable=appPropertiesTable, subscribersNumWithSessions=subscribersNumWithSessions, subscribersPropertiesValueTable=subscribersPropertiesValueTable, illegalSubscriberMappingTrap=illegalSubscriberMappingTrap, vasServerId=vasServerId, trafficProcessorGrp=trafficProcessorGrp, rdrNoActiveConnectionTrap=rdrNoActiveConnectionTrap, pportTable=pportTable, linkAdminModeOnActive=linkAdminModeOnActive, vasServerEntry=vasServerEntry, globalControllersEntry=globalControllersEntry, linkSubscriberSidePortIndex=linkSubscriberSidePortIndex, tpFlowsCapacityUtilizationPeak=tpFlowsCapacityUtilizationPeak, rdrFormatterDestNumReportsDiscarded=rdrFormatterDestNumReportsDiscarded, pchassisPsuType=pchassisPsuType, LinkModeType=LinkModeType, trafficCountersEntry=trafficCountersEntry, pcubeMplsVpnAutoLearnGroup=pcubeMplsVpnAutoLearnGroup, pcubeSeMIB=pcubeSeMIB, pportGrp=pportGrp, rdrFormatterNumReportsSent=rdrFormatterNumReportsSent, subscribersNumIpRangeMappingsFree=subscribersNumIpRangeMappingsFree, moduleOperStatusChangeTrap=moduleOperStatusChangeTrap, pcubeSeGroups=pcubeSeGroups, tpFlowsCapacityUtilizationPeakTime=tpFlowsCapacityUtilizationPeakTime, rdrFormatterCategoryDestPriority=rdrFormatterCategoryDestPriority, linkModeBypassTrap=linkModeBypassTrap, moduleLostRedundancyTrap=moduleLostRedundancyTrap, subscribersNumIpAddrMappings=subscribersNumIpAddrMappings, pportEntry=pportEntry, tpTotalNumIpLengthErrPackets=tpTotalNumIpLengthErrPackets, tpTotalNumNonIpPackets=tpTotalNumNonIpPackets, pcubeChassisGroup=pcubeChassisGroup, pmoduleNumLinks=pmoduleNumLinks, subscribersNumTpIpRanges=subscribersNumTpIpRanges, rdrFormatterCategoryName=rdrFormatterCategoryName, telnetSessionStartedTrap=telnetSessionStartedTrap, pcubeSystemGroup=pcubeSystemGroup, appName=appName, pmoduleAdminStatus=pmoduleAdminStatus, pchassisTempAlarm=pchassisTempAlarm, pcubeComplianceRev1=pcubeComplianceRev1, pportNumTxQueues=pportNumTxQueues, rdrFormatterCategoryDestTable=rdrFormatterCategoryDestTable, attackTypeTotalNumAttacks=attackTypeTotalNumAttacks, tpTotalNumDiscardedPacketsDueToBwLimit=tpTotalNumDiscardedPacketsDueToBwLimit, txQueuesBandwidth=txQueuesBandwidth, spvSubName=spvSubName, operationalStatusOperationalTrap=operationalStatusOperationalTrap, txQueuesUtilizationPeakTime=txQueuesUtilizationPeakTime, rdrFormatterCategoryStoppedDiscardingReportsTrap=rdrFormatterCategoryStoppedDiscardingReportsTrap, linkIndex=linkIndex, rdrFormatterCategoryNumReportsQueued=rdrFormatterCategoryNumReportsQueued, tpHandledPacketsRate=tpHandledPacketsRate, attackTypeTotalNumFlows=attackTypeTotalNumFlows, subscribersNumActivePeak=subscribersNumActivePeak, vasServerTable=vasServerTable, subscribersInfoEntry=subscribersInfoEntry, appVersion=appVersion, apIndex=apIndex, moduleEmAgentGenericTrap=moduleEmAgentGenericTrap, tpIndex=tpIndex, appPropertiesValueEntry=appPropertiesValueEntry, pportOperDuplex=pportOperDuplex, pcubeSeEventGenericString2=pcubeSeEventGenericString2, trafficCounterType=trafficCounterType, spIndex=spIndex, attackTypeCurrentNumAttacks=attackTypeCurrentNumAttacks, pchassisNumSlots=pchassisNumSlots, pportType=pportType, mplsVpnSoftwareCountersTable=mplsVpnSoftwareCountersTable, chassisFansAlarmOnTrap=chassisFansAlarmOnTrap, loggerUserLogNumInfo=loggerUserLogNumInfo, linkStatusReflectionEnable=linkStatusReflectionEnable, tpInfoEntry=tpInfoEntry, rdrFormatterDestNumReportsSent=rdrFormatterDestNumReportsSent, tpCpuUtilizationPeak=tpCpuUtilizationPeak, apType=apType, pmoduleGrp=pmoduleGrp, tpNumTcpActiveFlowsPeakTime=tpNumTcpActiveFlowsPeakTime, pportOperStatus=pportOperStatus, rdrConnectionDownTrap=rdrConnectionDownTrap, rdrFormatterProtocol=rdrFormatterProtocol, mplsVpnAutoLearnGrp=mplsVpnAutoLearnGrp, tpNumActiveFlowsPeak=tpNumActiveFlowsPeak, apvPropertyCounter64Value=apvPropertyCounter64Value, subscribersNumIpRangeMappings=subscribersNumIpRangeMappings, pcubeSeEventsGroupRev1=pcubeSeEventsGroupRev1, mplsVpnTotalHWMappingsThresholdExceededTrap=mplsVpnTotalHWMappingsThresholdExceededTrap, pmoduleTable=pmoduleTable, rdrFormatterCategoryTable=rdrFormatterCategoryTable, globalControllersUtilizationPeak=globalControllersUtilizationPeak, loggerUserLogNumWarning=loggerUserLogNumWarning, txQueuesPortIndex=txQueuesPortIndex, rdrFormatterDestTable=rdrFormatterDestTable, subscribersNumActive=subscribersNumActive, rdrFormatterCategoryDestEntry=rdrFormatterCategoryDestEntry, moduleAttackFilterDeactivatedTrap=moduleAttackFilterDeactivatedTrap, tpClearCountersTime=tpClearCountersTime, vasServerOpertionalStatusChangeTrap=vasServerOpertionalStatusChangeTrap, pmoduleAttackObjectsClearTime=pmoduleAttackObjectsClearTime, diskNumFreeBytes=diskNumFreeBytes, pmoduleOperStatus=pmoduleOperStatus, spName=spName, pcubePortGroup=pcubePortGroup, trafficCounterName=trafficCounterName, loggerUserLogClearCountersTime=loggerUserLogClearCountersTime, subscribersInfoTable=subscribersInfoTable, rdrFormatterDestReportRate=rdrFormatterDestReportRate, tpNumActiveFlowsPeakTime=tpNumActiveFlowsPeakTime, operationalStatusFailureTrap=operationalStatusFailureTrap, rdrFormatterReportRate=rdrFormatterReportRate, operationalStatusWarningTrap=operationalStatusWarningTrap, pmoduleUpStreamLastAttackFilteringTime=pmoduleUpStreamLastAttackFilteringTime, linkModuleIndex=linkModuleIndex, rdrFormatterCategoryReportRate=rdrFormatterCategoryReportRate, tpNumActiveFlows=tpNumActiveFlows, pcubeTrafficCountersGroup=pcubeTrafficCountersGroup, trafficCountersGrp=trafficCountersGrp, diskNumUsedBytes=diskNumUsedBytes, tpNumUdpActiveFlowsPeakTime=tpNumUdpActiveFlowsPeakTime, pcubeRdrFormatterGroup=pcubeRdrFormatterGroup, linkTable=linkTable, pportAdminSpeed=pportAdminSpeed, pcubeDiskGroup=pcubeDiskGroup, vasTrafficForwardingGrp=vasTrafficForwardingGrp, tpNumNonTcpUdpActiveFlowsPeakTime=tpNumNonTcpUdpActiveFlowsPeakTime, linkModeCutoffTrap=linkModeCutoffTrap, rdrFormatterDestEntry=rdrFormatterDestEntry, rdrFormatterForwardingMode=rdrFormatterForwardingMode, pchassisSysType=pchassisSysType, pportModuleIndex=pportModuleIndex, sessionBadLoginTrap=sessionBadLoginTrap, pmoduleNumPorts=pmoduleNumPorts, loggerUserLogIsFullTrap=loggerUserLogIsFullTrap, tpServiceLoss=tpServiceLoss, chassisLineFeedAlarmOnTrap=chassisLineFeedAlarmOnTrap, rdrFormatterClearCountersTime=rdrFormatterClearCountersTime, tpFlowsCapacityUtilization=tpFlowsCapacityUtilization, linkOperMode=linkOperMode, mplsVpnCurrentHWMappings=mplsVpnCurrentHWMappings, pmoduleDownStreamAttackFilteringTime=pmoduleDownStreamAttackFilteringTime, txQueuesModuleIndex=txQueuesModuleIndex, loggerUserLogNumError=loggerUserLogNumError, appPropertiesEntry=appPropertiesEntry, tpTotalNumTcpUdpCrcErrPackets=tpTotalNumTcpUdpCrcErrPackets, subscribersGrp=subscribersGrp, trafficCountersTable=trafficCountersTable, attackTypeEntry=attackTypeEntry, tpModuleIndex=tpModuleIndex, rdrFormatterCategoryDiscardingReportsTrap=rdrFormatterCategoryDiscardingReportsTrap, globalControllersBandwidth=globalControllersBandwidth, tpTotalNumIpCrcErrPackets=tpTotalNumIpCrcErrPackets, spvPropertyCounter64Value=spvPropertyCounter64Value, rdrFormatterCategoryReportRatePeakTime=rdrFormatterCategoryReportRatePeakTime, tpTotalNumWredDiscardedPackets=tpTotalNumWredDiscardedPackets, subscribersPropertiesEntry=subscribersPropertiesEntry, txQueuesEntry=txQueuesEntry, subscribersNumVlanMappingsFree=subscribersNumVlanMappingsFree, rdrFormatterCategoryReportRatePeak=rdrFormatterCategoryReportRatePeak, txQueuesDroppedBytes=txQueuesDroppedBytes, pcubeLinkGroup=pcubeLinkGroup, tpNumTcpActiveFlowsPeak=tpNumTcpActiveFlowsPeak, rdrFormatterDestReportRatePeakTime=rdrFormatterDestReportRatePeakTime, portOperStatusChangeTrap=portOperStatusChangeTrap, rdrFormatterReportRatePeak=rdrFormatterReportRatePeak, txQueuesQueueIndex=txQueuesQueueIndex, subscribersNumVlanMappings=subscribersNumVlanMappings, tpNumTcpActiveFlows=tpNumTcpActiveFlows, sessionStartedTrap=sessionStartedTrap, rdrConnectionUpTrap=rdrConnectionUpTrap, txQueuesTable=txQueuesTable, globalControllersModuleIndex=globalControllersModuleIndex, apvRowStatus=apvRowStatus, moduleSmConnectionUpTrap=moduleSmConnectionUpTrap, telnetSessionBadLoginTrap=telnetSessionBadLoginTrap, txQueuesUtilization=txQueuesUtilization, tpTotalNumTtlErrPackets=tpTotalNumTtlErrPackets, chassisPowerSupplyAlarmOnTrap=chassisPowerSupplyAlarmOnTrap, attackTypeName=attackTypeName, appInfoEntry=appInfoEntry, sysVersion=sysVersion, pullRequestRetryFailedTrap=pullRequestRetryFailedTrap, spvPropertyStringValue=spvPropertyStringValue, tpHandledFlowsRatePeak=tpHandledFlowsRatePeak, pcubeApplicationGroup=pcubeApplicationGroup, subscribersNumAnonymous=subscribersNumAnonymous, loggerGrp=loggerGrp, trafficCounterIndex=trafficCounterIndex, rdrFormatterCategoryNumReportsSent=rdrFormatterCategoryNumReportsSent, subscribersNumFree=subscribersNumFree, pcubeAttackGroup=pcubeAttackGroup, globalControllersPortIndex=globalControllersPortIndex, apName=apName, diskGrp=diskGrp, rdrActiveConnectionTrap=rdrActiveConnectionTrap, rdrFormatterDestReportRatePeak=rdrFormatterDestReportRatePeak, globalControllersIndex=globalControllersIndex, linkGrp=linkGrp, globalControllersDroppedBytes=globalControllersDroppedBytes, globalControllersClearCountersTime=globalControllersClearCountersTime, globalControllersUtilizationPeakTime=globalControllersUtilizationPeakTime, apvPropertyName=apvPropertyName, subscribersPropertiesValueEntry=subscribersPropertiesValueEntry, spvIndex=spvIndex, tpTotalNumBlockedFlows=tpTotalNumBlockedFlows, systemGrp=systemGrp, pcuebModuleGroup=pcuebModuleGroup, txQueuesClearCountersTime=txQueuesClearCountersTime, pportLinkIndex=pportLinkIndex, tpTotalNumHandledFlows=tpTotalNumHandledFlows, pcubeSubscribersGroup=pcubeSubscribersGroup, pmoduleUpStreamAttackFilteringTime=pmoduleUpStreamAttackFilteringTime, subscribersNumIpAddrMappingsFree=subscribersNumIpAddrMappingsFree, pchassisPowerSupplyAlarm=pchassisPowerSupplyAlarm, pchassisGrp=pchassisGrp, chassisTempAlarmOnTrap=chassisTempAlarmOnTrap, txQueuesDescription=txQueuesDescription, apvPropertyUintValue=apvPropertyUintValue, rdrFormatterDestPort=rdrFormatterDestPort, moduleRedundantConfigurationMismatchTrap=moduleRedundantConfigurationMismatchTrap, vasServerAdminStatus=vasServerAdminStatus, subscribersCountersClearTime=subscribersCountersClearTime, subscribersNumTpIpRangesFree=subscribersNumTpIpRangesFree, PYSNMP_MODULE_ID=pcubeSeMIB, linkEntry=linkEntry, tpNumUdpActiveFlowsPeak=tpNumUdpActiveFlowsPeak, tpNumNonTcpUdpActiveFlowsPeak=tpNumNonTcpUdpActiveFlowsPeak, pmoduleNumTrafficProcessors=pmoduleNumTrafficProcessors, pchassisFansAlarm=pchassisFansAlarm)
mibBuilder.exportSymbols("PCUBE-SE-MIB", spvPropertyUintValue=spvPropertyUintValue, appDescription=appDescription, attackTypeTable=attackTypeTable, rdrFormatterNumReportsDiscarded=rdrFormatterNumReportsDiscarded, linkModeSniffingTrap=linkModeSniffingTrap, apvIndex=apvIndex, apvPropertyStringValue=apvPropertyStringValue, loggerUserLogNumFatal=loggerUserLogNumFatal, linkModeForwardingTrap=linkModeForwardingTrap, globalControllersDescription=globalControllersDescription, rdrFormatterCategoryNumReportsDiscarded=rdrFormatterCategoryNumReportsDiscarded, subscribersPropertiesTable=subscribersPropertiesTable, pportIndex=pportIndex, spvPropertyName=spvPropertyName, telnetSessionEndedTrap=telnetSessionEndedTrap, rdrFormatterReportRatePeakTime=rdrFormatterReportRatePeakTime, pmoduleDownStreamLastAttackFilteringTime=pmoduleDownStreamLastAttackFilteringTime, sntpClockDriftWarnTrap=sntpClockDriftWarnTrap, systemResetTrap=systemResetTrap, tpTotalNumIpBroadcastPackets=tpTotalNumIpBroadcastPackets, vasServerOperStatus=vasServerOperStatus, globalControllersTable=globalControllersTable, pmoduleSlotNum=pmoduleSlotNum, attackTypeIndex=attackTypeIndex, rdrFormatterDestIPAddr=rdrFormatterDestIPAddr, pcubeSeEvents=pcubeSeEvents, pchassisVoltageAlarm=pchassisVoltageAlarm, tpTotalNumFragments=tpTotalNumFragments, pmoduleEntry=pmoduleEntry, pportAdminDuplex=pportAdminDuplex, pcubeLoggerGroup=pcubeLoggerGroup, moduleRedundancyReadyTrap=moduleRedundancyReadyTrap, pmoduleType=pmoduleType, spvRowStatus=spvRowStatus, sysOperationalStatus=sysOperationalStatus, linkNetworkSidePortIndex=linkNetworkSidePortIndex, pcubeSeEventGenericString1=pcubeSeEventGenericString1, sysFailureRecovery=sysFailureRecovery, sessionEndedTrap=sessionEndedTrap, tpTotalNumBlockedPackets=tpTotalNumBlockedPackets, pmoduleSerialNumber=pmoduleSerialNumber, pmoduleConnectionMode=pmoduleConnectionMode, rdrFormatterDestConnectionStatus=rdrFormatterDestConnectionStatus, tpInfoTable=tpInfoTable, loggerUserLogEnable=loggerUserLogEnable, subscribersNumIntroduced=subscribersNumIntroduced, tpNumUdpActiveFlows=tpNumUdpActiveFlows, moduleSmConnectionDownTrap=moduleSmConnectionDownTrap, rdrFormatterDestStatus=rdrFormatterDestStatus, pchassisLineFeedAlarm=pchassisLineFeedAlarm, tpCpuUtilizationPeakTime=tpCpuUtilizationPeakTime, tpNumNonTcpUdpActiveFlows=tpNumNonTcpUdpActiveFlows, rdrFormatterEnable=rdrFormatterEnable, chassisVoltageAlarmOnTrap=chassisVoltageAlarmOnTrap, tpTotalNumHandledPackets=tpTotalNumHandledPackets, applicationGrp=applicationGrp, linkAdminModeOnFailure=linkAdminModeOnFailure, rdrFormatterCategoryDestStatus=rdrFormatterCategoryDestStatus, subscribersNumActivePeakTime=subscribersNumActivePeakTime, appPropertiesValueTable=appPropertiesValueTable, subscribersNumUpdates=subscribersNumUpdates, tpHandledFlowsRatePeakTime=tpHandledFlowsRatePeakTime, pcubeSeConformance=pcubeSeConformance, moduleAttackFilterActivatedTrap=moduleAttackFilterActivatedTrap, mplsVpnMaxHWMappings=mplsVpnMaxHWMappings, trafficCounterValue=trafficCounterValue, txQueuesUtilizationPeak=txQueuesUtilizationPeak, tpHandledPacketsRatePeak=tpHandledPacketsRatePeak, attackGrp=attackGrp, pcubeVasTrafficForwardingGroup=pcubeVasTrafficForwardingGroup, mplsVpnSoftwareCountersEntry=mplsVpnSoftwareCountersEntry, txQueuesGrp=txQueuesGrp, loggerLineAttackLogFullTrap=loggerLineAttackLogFullTrap, pcubeSeEventsGroup=pcubeSeEventsGroup, globalControllersUtilization=globalControllersUtilization, pportIfIndex=pportIfIndex, pmoduleIndex=pmoduleIndex, pcubeTxQueuesGroup=pcubeTxQueuesGroup)
