#
# PySNMP MIB module SURVEILLANCE-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SURVEILLANCE-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
PortList, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIdOrNone")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, TimeTicks, ModuleIdentity, Counter64, MibIdentifier, Counter32, Unsigned32, Gauge32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "TimeTicks", "ModuleIdentity", "Counter64", "MibIdentifier", "Counter32", "Unsigned32", "Gauge32", "NotificationType", "IpAddress")
DateAndTime, MacAddress, RowStatus, TruthValue, DisplayString, TextualConvention, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "TextualConvention", "TimeInterval")
swSurveillanceVLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 102))
if mibBuilder.loadTexts: swSurveillanceVLANMIB.setLastUpdated('201109190000Z')
if mibBuilder.loadTexts: swSurveillanceVLANMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swSurveillanceVLANMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swSurveillanceVLANMIB.setDescription('The surveillance VLAN module MIB for the proprietary enterprise.')
swSurveillanceVLANNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 102, 0))
swSurveillanceVLANMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 102, 1))
swSurveillanceVlanCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 1))
swSurveillanceVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2))
swSurveillanceVlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3))
swSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 1, 1), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSurveillanceVlanId.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanId.setDescription('The VLAN ID of the surveillance VLAN. The surveillance VLAN is used to assign VLANs for untagged video packets. The value zero is for display only and not configurable, which means there is no surveillance VLAN on the switch.')
swSurveillanceVlanGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSurveillanceVlanGlobalState.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanGlobalState.setDescription('This object indicates the global status of the surveillance VLAN. If we enable the surveillance VLAN, we should set the VID first.')
swSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSurveillanceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanPriority.setDescription('The priority for the surveillance VLAN, which is used to distinguish the QoS of the surveillance traffic from data traffic.')
swSurveillanceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSurveillanceVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanAgingTime.setDescription('The aging time for the surveillance VLAN, which is used to remove a port from a surveillance VLAN when the working mode is auto.')
swSurveillanceVlanLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSurveillanceVlanLogState.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanLogState.setDescription(' This object indicates the surveillance VLAN log state.')
swSurveillanceVlanMemberPortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanMemberPortlist.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanMemberPortlist.setDescription("The surveillance VLAN's member ports.")
swSurveillanceVlanDynamicPortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanDynamicPortlist.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDynamicPortlist.setDescription("The surveillance VLAN's member ports that dynamically joined the surveillance VLAN from a learned surveillance device.")
swSurveillanceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 3), )
if mibBuilder.loadTexts: swSurveillanceVlanDeviceTable.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDeviceTable.setDescription('The management information of a surveillance VLAN member ports device.')
swSurveillanceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 3, 1), ).setIndexNames((0, "SURVEILLANCE-VLAN-MIB", "swSurveillanceVlanDevPort"), (0, "SURVEILLANCE-VLAN-MIB", "swSurveillanceVlanDevAddr"))
if mibBuilder.loadTexts: swSurveillanceVlanDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDeviceEntry.setDescription('The information from the surveillance device connected to the switch.')
swSurveillanceVlanDevPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanDevPort.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDevPort.setDescription("The surveillance device's connected port.")
swSurveillanceVlanDevAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanDevAddr.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDevAddr.setDescription("The surveillance device's MAC address.")
swSurveillanceVlanDevComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vms", 1), ("vms-client", 2), ("video-encoder", 3), ("network-storage", 4), ("other", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSurveillanceVlanDevComponentType.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDevComponentType.setDescription("The surveillance device's component type.")
swSurveillanceVlanDevStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 2, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanDevStartTime.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanDevStartTime.setDescription('The time the surveillance device first connected to the switch.')
swSurveillanceVlanOuiTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1), )
if mibBuilder.loadTexts: swSurveillanceVlanOuiTable.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiTable.setDescription('The management information of the surveillance VLAN OUI.')
swSurveillanceVlanOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1, 1), ).setIndexNames((0, "SURVEILLANCE-VLAN-MIB", "swSurveillanceVlanOuiAddr"))
if mibBuilder.loadTexts: swSurveillanceVlanOuiEntry.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiEntry.setDescription('The management information of the OUI of a surveillance VLAN domain. An OUI contains information about the type of IP phone that can make use of the OUI to check the surveillance traffic.')
swSurveillanceVlanOuiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanOuiAddr.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiAddr.setDescription('The address of the OUI referring to this swSurveillanceVlanOuiEntry.')
swSurveillanceVlanOuiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSurveillanceVlanOuiMask.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiMask.setDescription('The OUI mask indicates the valid bit of the OUI address.')
swSurveillanceVlanOuiComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vms", 1), ("vms-client", 2), ("video-encoder", 3), ("network-storage", 4), ("other", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSurveillanceVlanOuiComponentType.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiComponentType.setDescription('The Component type of the OUI.')
swSurveillanceVlanOuiDes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSurveillanceVlanOuiDes.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiDes.setDescription('The description of the OUI.(0-32)')
swSurveillanceVlanOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSurveillanceVlanOuiRowStatus.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanOuiRowStatus.setDescription('This object indicates the status of this entry.')
swSurveillanceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 2), )
if mibBuilder.loadTexts: swSurveillanceVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanPortTable.setDescription('The management of the surveillance VLAN function on all bridge ports. Some ports are not member ports of a surveillance VLAN, but they may be added in auto mode. Therefore, this function enables both current surveillance VLAN member ports and non-VLAN member ports to be managed.')
swSurveillanceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 2, 1), ).setIndexNames((0, "SURVEILLANCE-VLAN-MIB", "swSurveillanceVlanPortNumber"))
if mibBuilder.loadTexts: swSurveillanceVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanPortEntry.setDescription('The management of the surveillance VLAN function on ports')
swSurveillanceVlanPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSurveillanceVlanPortNumber.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanPortNumber.setDescription('Bridge ports can be configured with surveillance VLAN function.')
swSurveillanceVlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 102, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSurveillanceVlanPortState.setStatus('current')
if mibBuilder.loadTexts: swSurveillanceVlanPortState.setDescription('The port state here indicates whether the port supports the surveillance VLAN function. We can enable/disable the surveillance VLAN function on the port.')
mibBuilder.exportSymbols("SURVEILLANCE-VLAN-MIB", swSurveillanceVlanOuiTable=swSurveillanceVlanOuiTable, swSurveillanceVlanMemberPortlist=swSurveillanceVlanMemberPortlist, swSurveillanceVLANNotifications=swSurveillanceVLANNotifications, swSurveillanceVlanDeviceTable=swSurveillanceVlanDeviceTable, swSurveillanceVlanOuiMask=swSurveillanceVlanOuiMask, swSurveillanceVlanDevAddr=swSurveillanceVlanDevAddr, swSurveillanceVlanOuiDes=swSurveillanceVlanOuiDes, PYSNMP_MODULE_ID=swSurveillanceVLANMIB, swSurveillanceVlanInfo=swSurveillanceVlanInfo, swSurveillanceVlanAgingTime=swSurveillanceVlanAgingTime, swSurveillanceVlanDynamicPortlist=swSurveillanceVlanDynamicPortlist, swSurveillanceVlanDevPort=swSurveillanceVlanDevPort, swSurveillanceVlanPriority=swSurveillanceVlanPriority, swSurveillanceVlanLogState=swSurveillanceVlanLogState, swSurveillanceVlanId=swSurveillanceVlanId, swSurveillanceVlanPortState=swSurveillanceVlanPortState, swSurveillanceVLANMIBObjects=swSurveillanceVLANMIBObjects, swSurveillanceVlanMgmt=swSurveillanceVlanMgmt, swSurveillanceVlanGlobalState=swSurveillanceVlanGlobalState, swSurveillanceVlanDevStartTime=swSurveillanceVlanDevStartTime, swSurveillanceVlanOuiRowStatus=swSurveillanceVlanOuiRowStatus, swSurveillanceVLANMIB=swSurveillanceVLANMIB, swSurveillanceVlanPortNumber=swSurveillanceVlanPortNumber, swSurveillanceVlanOuiEntry=swSurveillanceVlanOuiEntry, swSurveillanceVlanCtrl=swSurveillanceVlanCtrl, swSurveillanceVlanPortTable=swSurveillanceVlanPortTable, swSurveillanceVlanPortEntry=swSurveillanceVlanPortEntry, swSurveillanceVlanDevComponentType=swSurveillanceVlanDevComponentType, swSurveillanceVlanOuiComponentType=swSurveillanceVlanOuiComponentType, swSurveillanceVlanOuiAddr=swSurveillanceVlanOuiAddr, swSurveillanceVlanDeviceEntry=swSurveillanceVlanDeviceEntry)
