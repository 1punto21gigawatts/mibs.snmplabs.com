#
# PySNMP MIB module Juniper-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:03:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
ospfIfIpAddress, ospfVirtIfEntry, ospfAreaEntry, ospfIfEntry, ospfAddressLessIf, ospfNbrEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfIfIpAddress", "ospfVirtIfEntry", "ospfAreaEntry", "ospfIfEntry", "ospfAddressLessIf", "ospfNbrEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, Unsigned32, Counter64, NotificationType, Counter32, Integer32, MibIdentifier, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "Unsigned32", "Counter64", "NotificationType", "Counter32", "Integer32", "MibIdentifier", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "ObjectIdentity")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
juniOspfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14))
juniOspfMIB.setRevisions(('2002-09-16 21:44', '2002-04-05 21:20', '2000-05-23 00:00', '1999-09-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniOspfMIB.setRevisionsDescriptions(('Replaced Unisphere names with Juniper names.', 'Added juniOspfVpnRouteTag, juniOspfDomainId, juniOspfAreaTeCapable and juniOspfMplsTeRtrIdIfIndex objects.', 'Key revisions include: o Corrected description for juniOspfProcessId. o Added juniOspfNetworkRangeTable. o Added juniOspfOperState.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniOspfMIB.setLastUpdated('200209162144Z')
if mibBuilder.loadTexts: juniOspfMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniOspfMIB.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 E-mail: mib@Juniper.net')
if mibBuilder.loadTexts: juniOspfMIB.setDescription('The OSPF Protocol MIB for the Juniper Networks enterprise.')
juniOspfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1))
juniOspfGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1))
juniOspfProcessId = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfProcessId.setStatus('current')
if mibBuilder.loadTexts: juniOspfProcessId.setDescription("An identifier having special semantics when set. When this object's value is zero, OSPF is disabled and cannot be configured. Setting this object to a nonzero value enables OSPF operation and permits further OSPF configuration to be performed. Once set to a nonzero value, this object cannot be modified.")
juniOspfMaxPathSplits = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: juniOspfMaxPathSplits.setDescription('The maximum number of equal-cost routes that will be maintained by the OSPF protocol. A change in this value will be taken into account at the next shortest-path-first recalculation.')
juniOspfSpfHoldInterval = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfSpfHoldInterval.setStatus('current')
if mibBuilder.loadTexts: juniOspfSpfHoldInterval.setDescription('The minimum amount of time that must elapse between shortest-path-first recalculations. Reducing this value can cause an immediate SPF recalulation if the new value is less than the current value of juniOspfSpfHoldTimeRemaining and other SPF-inducing protocol events have occurred.')
juniOspfNumActiveAreas = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNumActiveAreas.setStatus('current')
if mibBuilder.loadTexts: juniOspfNumActiveAreas.setDescription('The number of active areas.')
juniOspfSpfTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfSpfTime.setStatus('current')
if mibBuilder.loadTexts: juniOspfSpfTime.setDescription('The SPF schedule delay.')
juniOspfRefBw = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(100)).setUnits('bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfRefBw.setStatus('current')
if mibBuilder.loadTexts: juniOspfRefBw.setDescription('The reference bandwith, in bits per second. This object is used when OSPF automatic interface cost calculation is used.')
juniOspfAutoVlink = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfAutoVlink.setStatus('current')
if mibBuilder.loadTexts: juniOspfAutoVlink.setDescription('Set this object to true(1) in order to have virtual links automatically configured.')
juniOspfIntraDistance = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfIntraDistance.setStatus('current')
if mibBuilder.loadTexts: juniOspfIntraDistance.setDescription('Default distance for intra-area routes.')
juniOspfInterDistance = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfInterDistance.setStatus('current')
if mibBuilder.loadTexts: juniOspfInterDistance.setDescription('Default distance for inter-area routes.')
juniOspfExtDistance = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfExtDistance.setStatus('current')
if mibBuilder.loadTexts: juniOspfExtDistance.setDescription('Default distance for external type 5 and type 7 routes.')
juniOspfHelloPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfHelloPktsRcv.setStatus('current')
if mibBuilder.loadTexts: juniOspfHelloPktsRcv.setDescription('Number of hello packets received.')
juniOspfDDPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfDDPktsRcv.setStatus('current')
if mibBuilder.loadTexts: juniOspfDDPktsRcv.setDescription('Number of database description packets received.')
juniOspfLsrPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsrPktsRcv.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsrPktsRcv.setDescription('Number of link state request packets received.')
juniOspfLsuPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsuPktsRcv.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsuPktsRcv.setDescription('Number of link state update packets received.')
juniOspfLsAckPktsRcv = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsAckPktsRcv.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsAckPktsRcv.setDescription('Number of link state ACK packets received.')
juniOspfTotalRcv = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfTotalRcv.setStatus('current')
if mibBuilder.loadTexts: juniOspfTotalRcv.setDescription('Number of OSPF packets received.')
juniOspfLsaDiscardCnt = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsaDiscardCnt.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsaDiscardCnt.setDescription('Number of LSA packets discarded.')
juniOspfHelloPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfHelloPktsSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfHelloPktsSent.setDescription('Number of hello packets sent.')
juniOspfDDPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfDDPktsSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfDDPktsSent.setDescription('Number of database description packets sent.')
juniOspfLsrPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsrPktsSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsrPktsSent.setDescription('Number of link state request packets sent.')
juniOspfLsuPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsuPktsSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsuPktsSent.setDescription('Number of link state update packets sent.')
juniOspfLsAckPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfLsAckPktsSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfLsAckPktsSent.setDescription('Number of link state ACK packets sent.')
juniOspfErrPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfErrPktsSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfErrPktsSent.setDescription('Number of packets dropped.')
juniOspfTotalSent = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfTotalSent.setStatus('current')
if mibBuilder.loadTexts: juniOspfTotalSent.setDescription('Number of OSPF packets sent.')
juniOspfCsumErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfCsumErrPkts.setStatus('current')
if mibBuilder.loadTexts: juniOspfCsumErrPkts.setDescription('Number of packets received with a checksum error.')
juniOspfAllocFailNbr = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailNbr.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailNbr.setDescription('Number of neighbor allocation failures.')
juniOspfAllocFailLsa = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailLsa.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailLsa.setDescription('Number of LSA allocation failures.')
juniOspfAllocFailLsd = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailLsd.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailLsd.setDescription('Number of LSA HDR allocation failures.')
juniOspfAllocFailDbRequest = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailDbRequest.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailDbRequest.setDescription('Number of database request allocation failures.')
juniOspfAllocFailRtx = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailRtx.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailRtx.setDescription('Number of RTX allocation failures.')
juniOspfAllocFailAck = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailAck.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailAck.setDescription('Number of LS ACK allocation failures.')
juniOspfAllocFailDbPkt = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailDbPkt.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailDbPkt.setDescription('Number of DD packet allocation failures.')
juniOspfAllocFailCirc = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailCirc.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailCirc.setDescription('Number of OSPF interface allocation failures.')
juniOspfAllocFailPkt = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAllocFailPkt.setStatus('current')
if mibBuilder.loadTexts: juniOspfAllocFailPkt.setDescription('Number of OSPF general packet allocation failures.')
juniOspfOperState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfOperState.setStatus('current')
if mibBuilder.loadTexts: juniOspfOperState.setDescription('A flag to note whether this router is operational.')
juniOspfVpnRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfVpnRouteTag.setStatus('current')
if mibBuilder.loadTexts: juniOspfVpnRouteTag.setDescription('VPN route tag value.')
juniOspfDomainId = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfDomainId.setStatus('current')
if mibBuilder.loadTexts: juniOspfDomainId.setDescription('OSPF domain ID.')
juniOspfMplsTeRtrIdIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 1, 38), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfMplsTeRtrIdIfIndex.setStatus('current')
if mibBuilder.loadTexts: juniOspfMplsTeRtrIdIfIndex.setDescription('Configure the stable router interface id to designate it as TE capable.')
juniOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 2), )
if mibBuilder.loadTexts: juniOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfAreaTable.setDescription('The Juniper OSPF area table describes the OSPF-specific characteristics of areas.')
juniOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 2, 1), )
ospfAreaEntry.registerAugmentions(("Juniper-OSPF-MIB", "juniOspfAreaEntry"))
juniOspfAreaEntry.setIndexNames(*ospfAreaEntry.getIndexNames())
if mibBuilder.loadTexts: juniOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfAreaEntry.setDescription('The OSPF area entry describes OSPF-specific characteristics of one area.')
juniOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transitArea", 1), ("stubArea", 2), ("nssaArea", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: juniOspfAreaType.setDescription('The type of this area.')
juniOspfAreaTeCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniOspfAreaTeCapable.setStatus('current')
if mibBuilder.loadTexts: juniOspfAreaTeCapable.setDescription('Configure the specified area TE capable to flood the TE information.')
juniOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7), )
if mibBuilder.loadTexts: juniOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfTable.setDescription('The Juniper OSPF interface table describes the OSPF-specific characteristics of interfaces.')
juniOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1), )
ospfIfEntry.registerAugmentions(("Juniper-OSPF-MIB", "juniOspfIfEntry"))
juniOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: juniOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfEntry.setDescription('The OSPF interface entry describes OSPF-specific characteristics of one interface.')
juniOspfIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfCost.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfCost.setDescription('The cost value for this interface.')
juniOspfIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfMask.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfMask.setDescription('The mask used to derive the network range of this interface.')
juniOspfIfPassiveFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfPassiveFlag.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfPassiveFlag.setDescription('Flag to indicate whether routing updates should be suppressed on this interface. To actively perform routing updates, set this object to disabled(0).')
juniOspfIfNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfIfNbrCount.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfNbrCount.setDescription('Number of OSPF neighbors from this interface.')
juniOspfIfAdjNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfIfAdjNbrCount.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfAdjNbrCount.setDescription('Number of OSPF adjacent neighbors from this interface.')
juniOspfIfMd5AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfMd5AuthKey.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfMd5AuthKey.setDescription('The MD5 authentication key. When setting this object, the juniOspfIfMd5AuthKeyId must be specified on the same PDU. For simple text authentication type, use ospfIfAuthKey. Setting this object will have the side effect of adding or updating the correspondent entry in juniOspfMd5IntfKeyTable. If key given has less than 16 octets, such value will be appended with zeros to complete 16 octets. The zeros will appended to the right of the given key. Reading this object always results in an OCTET STRING of length zero.')
juniOspfIfMd5AuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfMd5AuthKeyId.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfMd5AuthKeyId.setDescription('The MD5 authentication key ID. When setting this object, juniOspfIfMd5AuthKey must be specified on the same PDU.')
juniOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 9), )
if mibBuilder.loadTexts: juniOspfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfVirtIfTable.setDescription('The Juniper OSPF virtual interface table describes the OSPF-specific characteristics of virtual interfaces.')
juniOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 9, 1), )
ospfVirtIfEntry.registerAugmentions(("Juniper-OSPF-MIB", "juniOspfVirtIfEntry"))
juniOspfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: juniOspfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfVirtIfEntry.setDescription('The OSPF virtual interface entry describes OSPF-specific characteristics of one virtual interface.')
juniOspfVirtIfMd5AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 9, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfVirtIfMd5AuthKey.setStatus('current')
if mibBuilder.loadTexts: juniOspfVirtIfMd5AuthKey.setDescription('The MD5 authentication key. When setting this object, the juniOspfVirtIfMd5AuthKeyId must be specified on the same PDU. For simple text authentication type, use ospfVirtIfAuthKey. Setting this object will have the side effect of adding or updating the correspondent entry in juniOspfMd5IntfKeyTable. If key given has less than 16 octets, such value will be appended with zeros to complete 16 octets. The zeros will appended to the right of the given key. Reading this object always results in an OCTET STRING of length zero.')
juniOspfVirtIfMd5AuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfVirtIfMd5AuthKeyId.setStatus('current')
if mibBuilder.loadTexts: juniOspfVirtIfMd5AuthKeyId.setDescription('The MD5 authentication key id. When setting this object, juniOspfVirtIfMd5AuthKey must be specified on the same psu.')
juniOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 10), )
if mibBuilder.loadTexts: juniOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfNbrTable.setDescription('The Juniper OSPF neighbor table describes the OSPF-specific characteristics of neighbors.')
juniOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 10, 1), )
ospfNbrEntry.registerAugmentions(("Juniper-OSPF-MIB", "juniOspfNbrEntry"))
juniOspfNbrEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: juniOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfNbrEntry.setDescription('The OSPF neighbor entry describes OSPF-specific characteristics of one neighbor.')
juniOspfNbrLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNbrLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: juniOspfNbrLocalIpAddr.setDescription('The local IP address on this OSPF circuit.')
juniOspfNbrDR = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNbrDR.setStatus('current')
if mibBuilder.loadTexts: juniOspfNbrDR.setDescription("The neighbor's idea of designated router.")
juniOspfNbrBDR = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNbrBDR.setStatus('current')
if mibBuilder.loadTexts: juniOspfNbrBDR.setDescription("The neighbor's idea of backup designated router.")
juniOspfSummImportTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 15), )
if mibBuilder.loadTexts: juniOspfSummImportTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummImportTable.setDescription('The Juniper OSPF summary import table describes the OSPF-specific characteristics of network aggregation into the OSPF autonomous system. With this table, the load of advertising many external routes can be reduced by specifying a range which includes some or all of the external routes.')
juniOspfSummImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 15, 1), ).setIndexNames((0, "Juniper-OSPF-MIB", "juniOspfSummAggNet"), (0, "Juniper-OSPF-MIB", "juniOspfSummAggMask"))
if mibBuilder.loadTexts: juniOspfSummImportEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummImportEntry.setDescription('The OSPF summary import entry describes OSPF-specific characteristics of one summary report.')
juniOspfSummAggNet = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfSummAggNet.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummAggNet.setDescription('The summary address for a range of addresses.')
juniOspfSummAggMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 15, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfSummAggMask.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummAggMask.setDescription('The subnet mask used for the summary route.')
juniOspfSummAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfSummAdminStat.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummAdminStat.setDescription('The admin status of this summary aggregation.')
juniOspfSummRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfSummRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummRowStatus.setDescription('This variable displays the status of the entry.')
juniOspfMd5IntfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 16), )
if mibBuilder.loadTexts: juniOspfMd5IntfTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5IntfTable.setDescription('The Juniper OSPF interface MD5 key table describes OSPF-specific characteristics of the MD5 authentication key for the OSPF interfaces. This table is not to be used for the simple password authentication.')
juniOspfMd5IntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 16, 1), ).setIndexNames((0, "OSPF-MIB", "ospfIfIpAddress"), (0, "OSPF-MIB", "ospfAddressLessIf"), (0, "Juniper-OSPF-MIB", "juniOspfMd5IntfKeyId"))
if mibBuilder.loadTexts: juniOspfMd5IntfEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5IntfEntry.setDescription("The OSPF interface MD5 key entry describes OSPF-specific characteristics of one MD5 authentication's interface.")
juniOspfMd5IntfKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfMd5IntfKeyId.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5IntfKeyId.setDescription('The OSPF interface this key belongs to.')
juniOspfMd5IntfKeyActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 16, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfMd5IntfKeyActive.setStatus('deprecated')
if mibBuilder.loadTexts: juniOspfMd5IntfKeyActive.setDescription('Set this object to true(1) in order to have this key active.')
juniOspfMd5IntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfMd5IntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5IntfAuthKey.setDescription('The MD5 authentication key. If key given has less than 16 octets, such value will be appended with zeros to complete 16 octets. The zeros will appended to the right of the given key. Reading this object always results in an OCTET STRING of length zero.')
juniOspfMd5IntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfMd5IntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5IntfRowStatus.setDescription('This variable displays the status of the entry.')
juniOspfMd5VirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17), )
if mibBuilder.loadTexts: juniOspfMd5VirtIntfTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfTable.setDescription('The Juniper OSPF interface MD5 key table describes OSPF-specific characteristics of the MD5 authentication key for the OSPF interfaces. This table is not to be used for the simple password authentication.')
juniOspfMd5VirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1), ).setIndexNames((0, "Juniper-OSPF-MIB", "juniOspfMd5VirtIntfAreaId"), (0, "Juniper-OSPF-MIB", "juniOspfMd5VirtIntfNeighbor"), (0, "Juniper-OSPF-MIB", "juniOspfMd5VirtIntfKeyId"))
if mibBuilder.loadTexts: juniOspfMd5VirtIntfEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfEntry.setDescription("The OSPF Interface MD5 Key entry describes OSPF-specific characteristics of one MD5 authentication's interface.")
juniOspfMd5VirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfMd5VirtIntfAreaId.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfAreaId.setDescription('The OSPF area ID this key belongs to.')
juniOspfMd5VirtIntfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfMd5VirtIntfNeighbor.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfNeighbor.setDescription('The OSPF neightbor this key belongs to.')
juniOspfMd5VirtIntfKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfMd5VirtIntfKeyId.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfKeyId.setDescription('The OSPF virtual interface this key belongs to.')
juniOspfMd5VirtIntfKeyActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfMd5VirtIntfKeyActive.setStatus('deprecated')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfKeyActive.setDescription('Set this object to true(1) in order to have this key active.')
juniOspfMd5VirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfMd5VirtIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfAuthKey.setDescription('The MD5 authentication key. If key given has less than 16 octets, such value will be appended with zeros to complete 16 octets. The zeros will appended to the right of the given key. Reading this object always results in an OCTET STRING of length zero.')
juniOspfMd5VirtIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 17, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfMd5VirtIntfRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfRowStatus.setDescription('This variable displays the status of the entry.')
juniOspfNetworkRangeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 18), )
if mibBuilder.loadTexts: juniOspfNetworkRangeTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetworkRangeTable.setDescription('The Juniper OSPF network range table describes the OSPF-specific characteristics of network ranges, encompassing one or multiple OSPF interfaces.')
juniOspfNetworkRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 18, 1), ).setIndexNames((0, "Juniper-OSPF-MIB", "juniOspfNetRangeNet"), (0, "Juniper-OSPF-MIB", "juniOspfNetRangeMask"), (0, "Juniper-OSPF-MIB", "juniOspfNetRangeAreaId"))
if mibBuilder.loadTexts: juniOspfNetworkRangeEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetworkRangeEntry.setDescription('The Juniper OSPF network range entry describes OSPF-specific characteristics of one OSPF network range.')
juniOspfNetRangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 18, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNetRangeNet.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetRangeNet.setDescription('The network range address.')
juniOspfNetRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 18, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNetRangeMask.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetRangeMask.setDescription('The subnet mask used for the network range. Unlike the mask used under the command line interface (CLI), this object is set in the non-inversed format (i.e. not a wild-card mask).')
juniOspfNetRangeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 18, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniOspfNetRangeAreaId.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetRangeAreaId.setDescription('The OSPF area ID this network range belongs to.')
juniOspfNetRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 18, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfNetRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetRangeRowStatus.setDescription('This variable displays the status of the entry.')
juniOspfIfBFDTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 8), )
if mibBuilder.loadTexts: juniOspfIfBFDTable.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBFDTable.setDescription('The Juniper OSPF interface table describes the BFD-specific characteristics of interfaces.')
juniOspfIfBFDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 8, 1), )
ospfIfEntry.registerAugmentions(("Juniper-OSPF-MIB", "juniOspfIfBFDEntry"))
juniOspfIfBFDEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: juniOspfIfBFDEntry.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBFDEntry.setDescription('The Juniper OSPF interface table describes the BFD-specific characteristics of one interface.')
juniOspfIfBfdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 8, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfBfdEnable.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBfdEnable.setDescription('This variable indicates whether BFD session on the interface is active or not')
juniOspfIfBfdMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfBfdMinRxInterval.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBfdMinRxInterval.setDescription('This variable specifies upper-limit on rate local-system requires remote-system to transmit bfd control-packets [milliseconds]')
juniOspfIfBfdMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfBfdMinTxInterval.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBfdMinTxInterval.setDescription('This variable specifies lower-limit on rate local-system requires remote-system to transmit bfd control-packets [milliseconds]')
juniOspfIfBfdMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniOspfIfBfdMultiplier.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBfdMultiplier.setDescription('This variable specifies detection-multiplier ')
juniOspfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4))
juniOspfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 1))
juniOspfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2))
juniOspfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 1, 1)).setObjects(("Juniper-OSPF-MIB", "juniOspfBasicGroup"), ("Juniper-OSPF-MIB", "juniOspfAreaGroup"), ("Juniper-OSPF-MIB", "juniOspfIfGroup"), ("Juniper-OSPF-MIB", "juniOspfVirtIfGroup"), ("Juniper-OSPF-MIB", "juniOspfNbrGroup"), ("Juniper-OSPF-MIB", "juniOspfSummImportGroup"), ("Juniper-OSPF-MIB", "juniOspfMd5IntfGroup"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfGroup"), ("Juniper-OSPF-MIB", "juniOspfNetRangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfCompliance = juniOspfCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniOspfCompliance.setDescription('Obsolete compliance statement for entities which implement the Juniper OSPF MIB. This statement became obsolete when juniOspfVpnRouteTag, juniOspfDomainId, juniOspfAreaTeCapable and juniOspfMplsTeRtrIdIfIndex were added to the basic group.')
juniOspfCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 1, 2)).setObjects(("Juniper-OSPF-MIB", "juniOspfBasicGroup2"), ("Juniper-OSPF-MIB", "juniOspfAreaGroup"), ("Juniper-OSPF-MIB", "juniOspfIfGroup"), ("Juniper-OSPF-MIB", "juniOspfVirtIfGroup"), ("Juniper-OSPF-MIB", "juniOspfNbrGroup"), ("Juniper-OSPF-MIB", "juniOspfSummImportGroup"), ("Juniper-OSPF-MIB", "juniOspfMd5IntfGroup"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfGroup"), ("Juniper-OSPF-MIB", "juniOspfNetRangeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfCompliance2 = juniOspfCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniOspfCompliance2.setDescription('The compliance statement for entities which implement the Juniper OSPF MIB. This statement became obsolete when juniOspfIfBFDTable was implemented.')
juniOspfCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 1, 3)).setObjects(("Juniper-OSPF-MIB", "juniOspfBasicGroup2"), ("Juniper-OSPF-MIB", "juniOspfAreaGroup"), ("Juniper-OSPF-MIB", "juniOspfIfGroup"), ("Juniper-OSPF-MIB", "juniOspfVirtIfGroup"), ("Juniper-OSPF-MIB", "juniOspfNbrGroup"), ("Juniper-OSPF-MIB", "juniOspfSummImportGroup"), ("Juniper-OSPF-MIB", "juniOspfMd5IntfGroup"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfGroup"), ("Juniper-OSPF-MIB", "juniOspfNetRangeGroup"), ("Juniper-OSPF-MIB", "juniOspfIfBFDGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfCompliance3 = juniOspfCompliance3.setStatus('current')
if mibBuilder.loadTexts: juniOspfCompliance3.setDescription('The compliance statement for entities which implement the Juniper OSPF MIB.')
juniOspfBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 1)).setObjects(("Juniper-OSPF-MIB", "juniOspfProcessId"), ("Juniper-OSPF-MIB", "juniOspfMaxPathSplits"), ("Juniper-OSPF-MIB", "juniOspfSpfHoldInterval"), ("Juniper-OSPF-MIB", "juniOspfNumActiveAreas"), ("Juniper-OSPF-MIB", "juniOspfSpfTime"), ("Juniper-OSPF-MIB", "juniOspfRefBw"), ("Juniper-OSPF-MIB", "juniOspfAutoVlink"), ("Juniper-OSPF-MIB", "juniOspfIntraDistance"), ("Juniper-OSPF-MIB", "juniOspfInterDistance"), ("Juniper-OSPF-MIB", "juniOspfExtDistance"), ("Juniper-OSPF-MIB", "juniOspfHelloPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfDDPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfLsrPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfLsuPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfLsAckPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfTotalRcv"), ("Juniper-OSPF-MIB", "juniOspfLsaDiscardCnt"), ("Juniper-OSPF-MIB", "juniOspfHelloPktsSent"), ("Juniper-OSPF-MIB", "juniOspfDDPktsSent"), ("Juniper-OSPF-MIB", "juniOspfLsrPktsSent"), ("Juniper-OSPF-MIB", "juniOspfLsuPktsSent"), ("Juniper-OSPF-MIB", "juniOspfLsAckPktsSent"), ("Juniper-OSPF-MIB", "juniOspfErrPktsSent"), ("Juniper-OSPF-MIB", "juniOspfTotalSent"), ("Juniper-OSPF-MIB", "juniOspfCsumErrPkts"), ("Juniper-OSPF-MIB", "juniOspfAllocFailNbr"), ("Juniper-OSPF-MIB", "juniOspfAllocFailLsa"), ("Juniper-OSPF-MIB", "juniOspfAllocFailLsd"), ("Juniper-OSPF-MIB", "juniOspfAllocFailDbRequest"), ("Juniper-OSPF-MIB", "juniOspfAllocFailRtx"), ("Juniper-OSPF-MIB", "juniOspfAllocFailAck"), ("Juniper-OSPF-MIB", "juniOspfAllocFailDbPkt"), ("Juniper-OSPF-MIB", "juniOspfAllocFailCirc"), ("Juniper-OSPF-MIB", "juniOspfAllocFailPkt"), ("Juniper-OSPF-MIB", "juniOspfOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfBasicGroup = juniOspfBasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniOspfBasicGroup.setDescription('Obsolete collection of objects for managing general OSPF capabilities in a Juniper product. This group became obsolete when juniOspfVpnRouteTag, juniOspfDomainId, juniOspfAreaTeCapable and juniOspfMplsTeRtrIdIfIndex were added.')
juniOspfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 2)).setObjects(("Juniper-OSPF-MIB", "juniOspfIfCost"), ("Juniper-OSPF-MIB", "juniOspfIfMask"), ("Juniper-OSPF-MIB", "juniOspfIfPassiveFlag"), ("Juniper-OSPF-MIB", "juniOspfIfNbrCount"), ("Juniper-OSPF-MIB", "juniOspfIfAdjNbrCount"), ("Juniper-OSPF-MIB", "juniOspfIfMd5AuthKey"), ("Juniper-OSPF-MIB", "juniOspfIfMd5AuthKeyId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfIfGroup = juniOspfIfGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfGroup.setDescription('A collection of objects which augments the standard MIB objects for managing OSPF Interface capabilities in a Juniper product.')
juniOspfAreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 3)).setObjects(("Juniper-OSPF-MIB", "juniOspfAreaType"), ("Juniper-OSPF-MIB", "juniOspfAreaTeCapable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfAreaGroup = juniOspfAreaGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfAreaGroup.setDescription('An object which augments the standard MIB objects for managing OSPF areas capabilities in a Juniper product.')
juniOspfVirtIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 4)).setObjects(("Juniper-OSPF-MIB", "juniOspfVirtIfMd5AuthKey"), ("Juniper-OSPF-MIB", "juniOspfVirtIfMd5AuthKeyId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfVirtIfGroup = juniOspfVirtIfGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfVirtIfGroup.setDescription('A collection of objects which augments the standard MIB objects for managing OSPF virtual interface capabilities in a Juniper product.')
juniOspfNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 5)).setObjects(("Juniper-OSPF-MIB", "juniOspfNbrLocalIpAddr"), ("Juniper-OSPF-MIB", "juniOspfNbrDR"), ("Juniper-OSPF-MIB", "juniOspfNbrBDR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfNbrGroup = juniOspfNbrGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfNbrGroup.setDescription('A collection of objects which augments the standard MIB objects for managing OSPF neighbor capabilities in a Juniper product.')
juniOspfSummImportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 6)).setObjects(("Juniper-OSPF-MIB", "juniOspfSummAggNet"), ("Juniper-OSPF-MIB", "juniOspfSummAggMask"), ("Juniper-OSPF-MIB", "juniOspfSummAdminStat"), ("Juniper-OSPF-MIB", "juniOspfSummRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfSummImportGroup = juniOspfSummImportGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfSummImportGroup.setDescription('A collection of objects for managing OSPF summary report capabilities in a Juniper product.')
juniOspfMd5IntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 7)).setObjects(("Juniper-OSPF-MIB", "juniOspfMd5IntfKeyId"), ("Juniper-OSPF-MIB", "juniOspfMd5IntfKeyActive"), ("Juniper-OSPF-MIB", "juniOspfMd5IntfAuthKey"), ("Juniper-OSPF-MIB", "juniOspfMd5IntfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfMd5IntfGroup = juniOspfMd5IntfGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5IntfGroup.setDescription('A collection of objects for managing OSPF MD5 interfaces capabilities in a Juniper product.')
juniOspfMd5VirtIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 8)).setObjects(("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfAreaId"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfNeighbor"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfKeyId"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfKeyActive"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfAuthKey"), ("Juniper-OSPF-MIB", "juniOspfMd5VirtIntfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfMd5VirtIntfGroup = juniOspfMd5VirtIntfGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfMd5VirtIntfGroup.setDescription('A collection of objects for managing OSPF MD5 virtual interfaces capabilities in a Juniper product.')
juniOspfNetRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 9)).setObjects(("Juniper-OSPF-MIB", "juniOspfNetRangeNet"), ("Juniper-OSPF-MIB", "juniOspfNetRangeMask"), ("Juniper-OSPF-MIB", "juniOspfNetRangeAreaId"), ("Juniper-OSPF-MIB", "juniOspfNetRangeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfNetRangeGroup = juniOspfNetRangeGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfNetRangeGroup.setDescription('A collection of objects for managing OSPF network range capabilities in a Juniper product.')
juniOspfBasicGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 10)).setObjects(("Juniper-OSPF-MIB", "juniOspfProcessId"), ("Juniper-OSPF-MIB", "juniOspfMaxPathSplits"), ("Juniper-OSPF-MIB", "juniOspfSpfHoldInterval"), ("Juniper-OSPF-MIB", "juniOspfNumActiveAreas"), ("Juniper-OSPF-MIB", "juniOspfSpfTime"), ("Juniper-OSPF-MIB", "juniOspfRefBw"), ("Juniper-OSPF-MIB", "juniOspfAutoVlink"), ("Juniper-OSPF-MIB", "juniOspfIntraDistance"), ("Juniper-OSPF-MIB", "juniOspfInterDistance"), ("Juniper-OSPF-MIB", "juniOspfExtDistance"), ("Juniper-OSPF-MIB", "juniOspfHelloPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfDDPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfLsrPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfLsuPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfLsAckPktsRcv"), ("Juniper-OSPF-MIB", "juniOspfTotalRcv"), ("Juniper-OSPF-MIB", "juniOspfLsaDiscardCnt"), ("Juniper-OSPF-MIB", "juniOspfHelloPktsSent"), ("Juniper-OSPF-MIB", "juniOspfDDPktsSent"), ("Juniper-OSPF-MIB", "juniOspfLsrPktsSent"), ("Juniper-OSPF-MIB", "juniOspfLsuPktsSent"), ("Juniper-OSPF-MIB", "juniOspfLsAckPktsSent"), ("Juniper-OSPF-MIB", "juniOspfErrPktsSent"), ("Juniper-OSPF-MIB", "juniOspfTotalSent"), ("Juniper-OSPF-MIB", "juniOspfCsumErrPkts"), ("Juniper-OSPF-MIB", "juniOspfAllocFailNbr"), ("Juniper-OSPF-MIB", "juniOspfAllocFailLsa"), ("Juniper-OSPF-MIB", "juniOspfAllocFailLsd"), ("Juniper-OSPF-MIB", "juniOspfAllocFailDbRequest"), ("Juniper-OSPF-MIB", "juniOspfAllocFailRtx"), ("Juniper-OSPF-MIB", "juniOspfAllocFailAck"), ("Juniper-OSPF-MIB", "juniOspfAllocFailDbPkt"), ("Juniper-OSPF-MIB", "juniOspfAllocFailCirc"), ("Juniper-OSPF-MIB", "juniOspfAllocFailPkt"), ("Juniper-OSPF-MIB", "juniOspfOperState"), ("Juniper-OSPF-MIB", "juniOspfVpnRouteTag"), ("Juniper-OSPF-MIB", "juniOspfDomainId"), ("Juniper-OSPF-MIB", "juniOspfMplsTeRtrIdIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfBasicGroup2 = juniOspfBasicGroup2.setStatus('current')
if mibBuilder.loadTexts: juniOspfBasicGroup2.setDescription('A collection of objects for managing general OSPF capabilities in a Juniper product.')
juniOspfIfBFDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 14, 4, 2, 11)).setObjects(("Juniper-OSPF-MIB", "juniOspfIfBfdEnable"), ("Juniper-OSPF-MIB", "juniOspfIfBfdMinRxInterval"), ("Juniper-OSPF-MIB", "juniOspfIfBfdMinTxInterval"), ("Juniper-OSPF-MIB", "juniOspfIfBfdMultiplier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniOspfIfBFDGroup = juniOspfIfBFDGroup.setStatus('current')
if mibBuilder.loadTexts: juniOspfIfBFDGroup.setDescription('A collection of objects for OSPFv2 BFD client configuration.')
mibBuilder.exportSymbols("Juniper-OSPF-MIB", juniOspfMd5VirtIntfEntry=juniOspfMd5VirtIntfEntry, juniOspfNbrEntry=juniOspfNbrEntry, juniOspfAllocFailCirc=juniOspfAllocFailCirc, juniOspfIfTable=juniOspfIfTable, juniOspfIfEntry=juniOspfIfEntry, juniOspfAreaEntry=juniOspfAreaEntry, juniOspfAreaTable=juniOspfAreaTable, juniOspfAllocFailLsd=juniOspfAllocFailLsd, juniOspfVirtIfTable=juniOspfVirtIfTable, juniOspfMaxPathSplits=juniOspfMaxPathSplits, juniOspfOperState=juniOspfOperState, PYSNMP_MODULE_ID=juniOspfMIB, juniOspfObjects=juniOspfObjects, juniOspfSpfTime=juniOspfSpfTime, juniOspfMd5VirtIntfTable=juniOspfMd5VirtIntfTable, juniOspfMd5IntfKeyActive=juniOspfMd5IntfKeyActive, juniOspfCompliance=juniOspfCompliance, juniOspfDDPktsSent=juniOspfDDPktsSent, juniOspfSummImportEntry=juniOspfSummImportEntry, juniOspfAreaTeCapable=juniOspfAreaTeCapable, juniOspfMd5VirtIntfAreaId=juniOspfMd5VirtIntfAreaId, juniOspfLsAckPktsSent=juniOspfLsAckPktsSent, juniOspfMd5VirtIntfKeyActive=juniOspfMd5VirtIntfKeyActive, juniOspfHelloPktsRcv=juniOspfHelloPktsRcv, juniOspfTotalSent=juniOspfTotalSent, juniOspfIfBfdMultiplier=juniOspfIfBfdMultiplier, juniOspfSummAggMask=juniOspfSummAggMask, juniOspfIfBfdMinTxInterval=juniOspfIfBfdMinTxInterval, juniOspfMd5IntfTable=juniOspfMd5IntfTable, juniOspfMd5IntfKeyId=juniOspfMd5IntfKeyId, juniOspfSummImportGroup=juniOspfSummImportGroup, juniOspfMIB=juniOspfMIB, juniOspfIfBFDTable=juniOspfIfBFDTable, juniOspfIfAdjNbrCount=juniOspfIfAdjNbrCount, juniOspfAllocFailDbRequest=juniOspfAllocFailDbRequest, juniOspfVirtIfMd5AuthKeyId=juniOspfVirtIfMd5AuthKeyId, juniOspfCompliances=juniOspfCompliances, juniOspfNbrTable=juniOspfNbrTable, juniOspfNetRangeAreaId=juniOspfNetRangeAreaId, juniOspfGroups=juniOspfGroups, juniOspfNetworkRangeTable=juniOspfNetworkRangeTable, juniOspfMplsTeRtrIdIfIndex=juniOspfMplsTeRtrIdIfIndex, juniOspfNumActiveAreas=juniOspfNumActiveAreas, juniOspfIfBfdEnable=juniOspfIfBfdEnable, juniOspfMd5VirtIntfGroup=juniOspfMd5VirtIntfGroup, juniOspfSummAdminStat=juniOspfSummAdminStat, juniOspfCsumErrPkts=juniOspfCsumErrPkts, juniOspfVpnRouteTag=juniOspfVpnRouteTag, juniOspfVirtIfGroup=juniOspfVirtIfGroup, juniOspfIfBFDGroup=juniOspfIfBFDGroup, juniOspfExtDistance=juniOspfExtDistance, juniOspfNbrBDR=juniOspfNbrBDR, juniOspfMd5VirtIntfRowStatus=juniOspfMd5VirtIntfRowStatus, juniOspfAllocFailPkt=juniOspfAllocFailPkt, juniOspfIfCost=juniOspfIfCost, juniOspfIfBfdMinRxInterval=juniOspfIfBfdMinRxInterval, juniOspfProcessId=juniOspfProcessId, juniOspfVirtIfMd5AuthKey=juniOspfVirtIfMd5AuthKey, juniOspfNbrLocalIpAddr=juniOspfNbrLocalIpAddr, juniOspfAllocFailLsa=juniOspfAllocFailLsa, juniOspfMd5IntfGroup=juniOspfMd5IntfGroup, juniOspfInterDistance=juniOspfInterDistance, juniOspfMd5IntfAuthKey=juniOspfMd5IntfAuthKey, juniOspfCompliance2=juniOspfCompliance2, juniOspfErrPktsSent=juniOspfErrPktsSent, juniOspfAllocFailNbr=juniOspfAllocFailNbr, juniOspfAllocFailAck=juniOspfAllocFailAck, juniOspfMd5VirtIntfAuthKey=juniOspfMd5VirtIntfAuthKey, juniOspfAreaGroup=juniOspfAreaGroup, juniOspfNetRangeNet=juniOspfNetRangeNet, juniOspfNetRangeRowStatus=juniOspfNetRangeRowStatus, juniOspfIfGroup=juniOspfIfGroup, juniOspfIfNbrCount=juniOspfIfNbrCount, juniOspfSpfHoldInterval=juniOspfSpfHoldInterval, juniOspfLsrPktsSent=juniOspfLsrPktsSent, juniOspfSummRowStatus=juniOspfSummRowStatus, juniOspfCompliance3=juniOspfCompliance3, juniOspfLsaDiscardCnt=juniOspfLsaDiscardCnt, juniOspfNbrDR=juniOspfNbrDR, juniOspfAllocFailRtx=juniOspfAllocFailRtx, juniOspfSummImportTable=juniOspfSummImportTable, juniOspfDomainId=juniOspfDomainId, juniOspfTotalRcv=juniOspfTotalRcv, juniOspfNetworkRangeEntry=juniOspfNetworkRangeEntry, juniOspfConformance=juniOspfConformance, juniOspfLsAckPktsRcv=juniOspfLsAckPktsRcv, juniOspfRefBw=juniOspfRefBw, juniOspfIfBFDEntry=juniOspfIfBFDEntry, juniOspfMd5IntfEntry=juniOspfMd5IntfEntry, juniOspfVirtIfEntry=juniOspfVirtIfEntry, juniOspfLsrPktsRcv=juniOspfLsrPktsRcv, juniOspfGeneralGroup=juniOspfGeneralGroup, juniOspfMd5VirtIntfNeighbor=juniOspfMd5VirtIntfNeighbor, juniOspfAutoVlink=juniOspfAutoVlink, juniOspfNetRangeMask=juniOspfNetRangeMask, juniOspfIfMd5AuthKeyId=juniOspfIfMd5AuthKeyId, juniOspfLsuPktsSent=juniOspfLsuPktsSent, juniOspfAllocFailDbPkt=juniOspfAllocFailDbPkt, juniOspfBasicGroup=juniOspfBasicGroup, juniOspfAreaType=juniOspfAreaType, juniOspfNbrGroup=juniOspfNbrGroup, juniOspfNetRangeGroup=juniOspfNetRangeGroup, juniOspfDDPktsRcv=juniOspfDDPktsRcv, juniOspfIfPassiveFlag=juniOspfIfPassiveFlag, juniOspfLsuPktsRcv=juniOspfLsuPktsRcv, juniOspfMd5IntfRowStatus=juniOspfMd5IntfRowStatus, juniOspfIfMd5AuthKey=juniOspfIfMd5AuthKey, juniOspfIntraDistance=juniOspfIntraDistance, juniOspfMd5VirtIntfKeyId=juniOspfMd5VirtIntfKeyId, juniOspfBasicGroup2=juniOspfBasicGroup2, juniOspfIfMask=juniOspfIfMask, juniOspfHelloPktsSent=juniOspfHelloPktsSent, juniOspfSummAggNet=juniOspfSummAggNet)
