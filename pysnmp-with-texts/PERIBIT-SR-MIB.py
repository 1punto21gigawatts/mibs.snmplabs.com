#
# PySNMP MIB module PERIBIT-SR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PERIBIT-SR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
pnCommonEventDescr, = mibBuilder.importSymbols("PERIBIT-COMMON-MIB", "pnCommonEventDescr")
pnModules, pnSpecificMib = mibBuilder.importSymbols("PERIBIT-GLOBAL-REG", "pnModules", "pnSpecificMib")
TcAppName, = mibBuilder.importSymbols("PERIBIT-GLOBAL-TC", "TcAppName")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, TimeTicks, ModuleIdentity, Integer32, Gauge32, Bits, Unsigned32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Integer32", "Gauge32", "Bits", "Unsigned32", "ObjectIdentity", "IpAddress")
TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString")
pnSrMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1, 4))
pnSrMibModule.setRevisions(('2004-05-24 00:00', '2003-06-23 00:00', '2002-03-28 00:00', '2002-03-27 00:00', '2001-12-19 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pnSrMibModule.setRevisionsDescriptions((' Add pnSrEventMultiPathStatusChange notification.', ' o Add reducer and throughput statistics to the pnSrSysStats group. o Add bytes counts to pnSrAsmStatsTable. o Add bytes counts and bytes-in percentage to pnSrAppStatsTable. o Add pnSrAppAggrStatsTable.', ' Add SessionOpened, RegServerUnreachable notifications.', ' Add SessionClosed, BufferOverflow notifications.', ' Rev 1.0 Initial version of MIB module PERIBIT-SR-MIB.',))
if mibBuilder.loadTexts: pnSrMibModule.setLastUpdated('200203280000Z')
if mibBuilder.loadTexts: pnSrMibModule.setOrganization('Peribit Networks, Inc')
if mibBuilder.loadTexts: pnSrMibModule.setContactInfo(' Customer Support Peribit Networks, Inc. 2300 Central Expressway Santa Clara, CA 95050 +1 866-PERIBIT support@peribit.com')
if mibBuilder.loadTexts: pnSrMibModule.setDescription(" A MIB module containing definitions of managed objects for Peribit Networks' Sequence Reducer family of products.")
pnSrMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1))
if mibBuilder.loadTexts: pnSrMib.setStatus('current')
if mibBuilder.loadTexts: pnSrMib.setDescription(' Sub-tree for Sequence Reducer MIB.')
pnSrConfMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 1))
if mibBuilder.loadTexts: pnSrConfMib.setStatus('current')
if mibBuilder.loadTexts: pnSrConfMib.setDescription(' Sub-tree for Sequence Reducer MIB conformance statements.')
pnSrObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2))
if mibBuilder.loadTexts: pnSrObjs.setStatus('current')
if mibBuilder.loadTexts: pnSrObjs.setDescription(' Sub-tree for Sequence Reducer MIB objects.')
pnSrEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3))
if mibBuilder.loadTexts: pnSrEvents.setStatus('current')
if mibBuilder.loadTexts: pnSrEvents.setDescription(' Sub-tree for Sequence Reducer MIB events.')
pnSrStatsUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrStatsUpdateTime.setStatus('current')
if mibBuilder.loadTexts: pnSrStatsUpdateTime.setDescription("This is the value of sysUpTime when the SR stats (pnSrSysStats, pnSrAsm, pnSrApp) were last updated. The management station can use this information to tell if it's downloading a consistent set of stats.")
pnSrStatsAsmCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrStatsAsmCount.setStatus('current')
if mibBuilder.loadTexts: pnSrStatsAsmCount.setDescription('The number of Assemblers this Reducer has had a session with at any time during the last two months.')
pnSrStatsAppCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrStatsAppCount.setStatus('current')
if mibBuilder.loadTexts: pnSrStatsAppCount.setDescription('The number of applications currently being monitored on this Reducer.')
pnSrSysStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4))
if mibBuilder.loadTexts: pnSrSysStats.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStats.setDescription(' Sub-tree for Sequence Reducer system statistics.')
pnSrSysStatsBytesInAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesInAe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesInAe.setDescription('Total number of bytes that entered the SR Assembly Engine since the system was started.')
pnSrSysStatsBytesOutAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesOutAe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesOutAe.setDescription('Total number of bytes that exited the SR Assembly Engine after assembly since the system was started.')
pnSrSysStatsPktsInAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsInAe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsInAe.setDescription('Total number of packets that entered the SR Assembly Engine since the system was started.')
pnSrSysStatsPktsOutAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsOutAe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsOutAe.setDescription('Total number of packets that exited the SR Assembly Engine after assembly since the system was started.')
pnSrSysStatsBytesOutOob = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesOutOob.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesOutOob.setDescription('Total number of out-of-band bytes sent to the control channel since the system was started.')
pnSrSysStatsBytesPtNoAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesPtNoAe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesPtNoAe.setDescription('Total number of bytes that passed through the SR Reduction Engine because there was no corresponding Assembly Engine SR, since the system was started.')
pnSrSysStatsPktsPtNoAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsPtNoAe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsPtNoAe.setDescription('Total number of packets that passed through the SR Reduction Engine because there was no corresponding Assembly Engine SR, since the system was started.')
pnSrSysStatsBytesPtFilter = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesPtFilter.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesPtFilter.setDescription('Total number of bytes that passed through the SR Reduction Engine due to a manually configured filter (such as an application filter), since the system was started.')
pnSrSysStatsPktsPtFilter = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsPtFilter.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsPtFilter.setDescription('Total number of packets that passed through the SR Reduction Engine due to a manually configured filter (such as an application filter), since the system was started.')
pnSrSysStatsBytesOfPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesOfPt.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesOfPt.setDescription('Total number of bytes that passed through the SR Reduction Engine due to device buffer overflow, since the system was started.')
pnSrSysStatsPktsOfPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsOfPt.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsOfPt.setDescription('Total number of packets that passed through the SR Reduction Engine due to device buffer overflow, since the system was started.')
pnSrSysStatsBytesTpIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesTpIn.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesTpIn.setDescription('The number of bytes into the SR Reduction Engine at the peak five-second interval of data input, since the system was started.')
pnSrSysStatsPktsTpIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsTpIn.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsTpIn.setDescription('The number of packets into the SR Reduction Engine at the peak five-second interval of data input, since the system was started.')
pnSrSysStatsBytesTpOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesTpOut.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesTpOut.setDescription('The number of bytes out of the SR Reduction Engine at the peak five-second interval of data input, since the system was started.')
pnSrSysStatsPktsTpOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsTpOut.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsTpOut.setDescription('The number of packets out of the SR Reduction Engine at the peak five-second interval of data input, since the system was started.')
pnSrSysStatsBytesTpPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesTpPt.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesTpPt.setDescription('The number of bytes that passed through the SR Reduction Engine at the peak five-second interval of data input, since the system was started.')
pnSrSysStatsPktsTpPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsTpPt.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsTpPt.setDescription('The number of packets that passed through the SR Reduction Engine at the peak five-second interval of data input, since the system was started.')
pnSrSysStatsPeakRdn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPeakRdn.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPeakRdn.setDescription('The maximum data reduction rate for a five second interval in the last minute. The value returned is (percentage * 1000). Applications should divide the returned value by 1000.')
pnSrSysStatsThruputIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsThruputIn.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsThruputIn.setDescription('Average throughput of incoming data in Kbps since the system was started.')
pnSrSysStatsThruputOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsThruputOut.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsThruputOut.setDescription('Average throughput of outgoing data in Kbps since the system was started.')
pnSrSysStatsBytesInRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesInRe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesInRe.setDescription('Total number of bytes that entered the SR Reduction Engine since the system was started.')
pnSrSysStatsBytesOutRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsBytesOutRe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsBytesOutRe.setDescription('Total number of bytes that exited the SR Reduction Engine after reduction since the system was started.')
pnSrSysStatsPktsInRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsInRe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsInRe.setDescription('Total number of packets that entered the SR Reduction Engine since the system was started.')
pnSrSysStatsPktsOutRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrSysStatsPktsOutRe.setStatus('current')
if mibBuilder.loadTexts: pnSrSysStatsPktsOutRe.setDescription('Total number of packets that exited the SR Reduction Engine after reduction since the system was started.')
pnSrAsm = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5))
if mibBuilder.loadTexts: pnSrAsm.setStatus('current')
if mibBuilder.loadTexts: pnSrAsm.setDescription(' Information maintained by a Reducer for each Assembler it has a session with.')
pnSrAsmTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: pnSrAsmTable.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmTable.setDescription('List of Assemblers the Reducer has sessions with.')
pnSrAsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "PERIBIT-SR-MIB", "pnSrAsmIndex"))
if mibBuilder.loadTexts: pnSrAsmEntry.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmEntry.setDescription('A row in pnSrAsmTable.')
pnSrAsmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pnSrAsmIndex.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmIndex.setDescription("This row's number, with range (1..pnSrStatsAsmCount).")
pnSrAsmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAsmIpAddress.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmIpAddress.setDescription('The IP address of the Assembler.')
pnSrAsmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: pnSrAsmStatsTable.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmStatsTable.setDescription('Statistics maintained by a Reducer for each Assembler it has a session with.')
pnSrAsmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1), )
pnSrAsmEntry.registerAugmentions(("PERIBIT-SR-MIB", "pnSrAsmStatsEntry"))
pnSrAsmStatsEntry.setIndexNames(*pnSrAsmEntry.getIndexNames())
if mibBuilder.loadTexts: pnSrAsmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmStatsEntry.setDescription('A row in pnSrAsmStatsTable.')
pnSrAsmStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAsmStatsPktsIn.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmStatsPktsIn.setDescription('The total number of packets into this SR, since the system was started, that were identified for reduction and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches this row.')
pnSrAsmStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAsmStatsPktsOut.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmStatsPktsOut.setDescription('The total number of packets out of this SR, since the system was started, that were identified for reduction and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches this row.')
pnSrAsmStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAsmStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmStatsBytesIn.setDescription('The total number of bytes into this SR, since the system was started, that were identified for reduction and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches this row.')
pnSrAsmStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAsmStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: pnSrAsmStatsBytesOut.setDescription('The total number of bytes out of this SR, since the system was started, that were identified for reduction and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches this row.')
pnSrApp = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6))
if mibBuilder.loadTexts: pnSrApp.setStatus('current')
if mibBuilder.loadTexts: pnSrApp.setDescription(' Information maintained by a Reducer for each application that is monitored.')
pnSrAppTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1), )
if mibBuilder.loadTexts: pnSrAppTable.setStatus('current')
if mibBuilder.loadTexts: pnSrAppTable.setDescription('List of applications currently monitored.')
pnSrAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1, 1), ).setIndexNames((0, "PERIBIT-SR-MIB", "pnSrAppIndex"))
if mibBuilder.loadTexts: pnSrAppEntry.setStatus('current')
if mibBuilder.loadTexts: pnSrAppEntry.setDescription('A row in pnSrAppTable.')
pnSrAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pnSrAppIndex.setStatus('current')
if mibBuilder.loadTexts: pnSrAppIndex.setDescription("This row's number, with range (1..pnSrStatsAppCount).")
pnSrAppAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1, 1, 2), TcAppName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppAppName.setStatus('current')
if mibBuilder.loadTexts: pnSrAppAppName.setDescription('The name of the application from which the data was received (e.g., FTP, HTTP, Lotus Notes).')
pnSrAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2), )
if mibBuilder.loadTexts: pnSrAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: pnSrAppStatsTable.setDescription('Statistics maintained by a Reducer for each application that is monitored.')
pnSrAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1), ).setIndexNames((0, "PERIBIT-SR-MIB", "pnSrAsmIndex"), (0, "PERIBIT-SR-MIB", "pnSrAppIndex"))
if mibBuilder.loadTexts: pnSrAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pnSrAppStatsEntry.setDescription('A row in pnSrAppStatsTable. Note that the indices are from pnSrAsmTable and pnSrAppTable. For each Assembler this reducer has a session with (indexed by pnSrAsmIndex), statistics are maintained for each application that is monitored (indexed by pnSrAppIndex).')
pnSrAppStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: pnSrAppStatsBytesIn.setDescription('The total number of bytes into the SR, since the system was started, that were identified for reduction, and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches the index pnSrAsmIndex, and that was received from the application whose name is in the row in pnSrAppTable that matches the index pnSrAppIndex.')
pnSrAppStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: pnSrAppStatsBytesOut.setDescription('The total number of bytes out of the SR, since the system was started, that were identified for reduction, and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches the index pnSrAsmIndex, and that was received from the application whose name is in the row in pnSrAppTable.')
pnSrAppStatsBytesInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppStatsBytesInPercent.setStatus('current')
if mibBuilder.loadTexts: pnSrAppStatsBytesInPercent.setDescription('The percentage of the bytes in for this application over the total bytes into the SR, since the system was started, that were identified for reduction, and addressed to the SR whose IP address is in the row in pnSrAsmTable that matches the index pnSrAsmIndex, and that was received from the application whose name is in the row in pnSrAppTable that matches the index pnSrAppIndex. The value returned is (percentage * 1000). Applications should divide the returned value by 1000.')
pnSrAppStatsAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 4), TcAppName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppStatsAppName.setStatus('current')
if mibBuilder.loadTexts: pnSrAppStatsAppName.setDescription("The name of the application from which the data was received (e.g., FTP, HTTP, Lotus Notes). NOTE: This object is here even though it's also in pnSrAppTable. This is for the convenience of network monitoring tools that require all columns to be from the same table.")
pnSrAppAggrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3), )
if mibBuilder.loadTexts: pnSrAppAggrStatsTable.setStatus('current')
if mibBuilder.loadTexts: pnSrAppAggrStatsTable.setDescription('Aggregate statistics maintained by a Reducer for each application that is monitored. These statistics apply to the reducer as a whole and are summed over all assembler sessions maintained by the reducer.')
pnSrAppAggrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1), )
pnSrAppEntry.registerAugmentions(("PERIBIT-SR-MIB", "pnSrAppAggrStatsEntry"))
pnSrAppAggrStatsEntry.setIndexNames(*pnSrAppEntry.getIndexNames())
if mibBuilder.loadTexts: pnSrAppAggrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pnSrAppAggrStatsEntry.setDescription('A row in pnSrAppAggrStatsTable.')
pnSrAppAggrStatsBytesInRe = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppAggrStatsBytesInRe.setStatus('current')
if mibBuilder.loadTexts: pnSrAppAggrStatsBytesInRe.setDescription('Total number of bytes that entered the SR Reduction Engine for this application since the system was started.')
pnSrAppAggrStatsBytesOutRe = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppAggrStatsBytesOutRe.setStatus('current')
if mibBuilder.loadTexts: pnSrAppAggrStatsBytesOutRe.setDescription('Total number of bytes that exited the SR Reduction Engine after reduction for this application since the system was started.')
pnSrAppAggrStatsBytesInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrAppAggrStatsBytesInPercent.setStatus('current')
if mibBuilder.loadTexts: pnSrAppAggrStatsBytesInPercent.setDescription('The percentage of the bytes in for this application over the total bytes into the SR Reduction Engine. The value returned is (percentage * 1000). Applications should divide the returned value by 1000.')
pnSrBurstStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7))
if mibBuilder.loadTexts: pnSrBurstStats.setStatus('current')
if mibBuilder.loadTexts: pnSrBurstStats.setDescription(' Sub-tree for Sequence Reducer system statistics.')
pnSrBurstStatsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrBurstStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: pnSrBurstStatsStartTime.setDescription('The start of the minute in seconds since midnight (00:00:00), January 1, 1970, UTC over which the burst stats apply.')
pnSrBurstStatsBpsIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrBurstStatsBpsIn.setStatus('current')
if mibBuilder.loadTexts: pnSrBurstStatsBpsIn.setDescription('Burst bits per second into reduction engine for the past minute.')
pnSrBurstStatsBpsOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrBurstStatsBpsOut.setStatus('current')
if mibBuilder.loadTexts: pnSrBurstStatsBpsOut.setDescription('Burst bits per second out of reduction engine for the past minute.')
pnSrBurstStatsBpsPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnSrBurstStatsBpsPt.setStatus('current')
if mibBuilder.loadTexts: pnSrBurstStatsBpsPt.setDescription('Burst pass-through bits per second for the past minute.')
pnSrEventObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 1))
if mibBuilder.loadTexts: pnSrEventObjs.setStatus('current')
if mibBuilder.loadTexts: pnSrEventObjs.setDescription(' Branch for objects meant only to be sent in event varbinds.')
pnSrEventEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2))
if mibBuilder.loadTexts: pnSrEventEvents.setStatus('current')
if mibBuilder.loadTexts: pnSrEventEvents.setDescription(' Branch for the events themselves.')
pnSrEventEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0))
if mibBuilder.loadTexts: pnSrEventEventsV2.setStatus('current')
if mibBuilder.loadTexts: pnSrEventEventsV2.setDescription(' Branch for SNMPv2 events. The OIDs for SNMPv2 events should have a zero as the next-to-last sub-identifier (as specified in RFC1902).')
pnSrEventRipAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 1)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventRipAuthFailure.setStatus('current')
if mibBuilder.loadTexts: pnSrEventRipAuthFailure.setDescription('RIP authentication failure')
pnSrEventReducerBufferOverflow = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 2)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventReducerBufferOverflow.setStatus('current')
if mibBuilder.loadTexts: pnSrEventReducerBufferOverflow.setDescription("The reducer's input buffer is approaching full capacity.")
pnSrEventReducerSessionClosed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 3)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventReducerSessionClosed.setStatus('current')
if mibBuilder.loadTexts: pnSrEventReducerSessionClosed.setDescription("The reducer's session to the device described in pnCommonEventDescr was terminated.")
pnSrEventAssemblerSessionClosed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 4)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventAssemblerSessionClosed.setStatus('current')
if mibBuilder.loadTexts: pnSrEventAssemblerSessionClosed.setDescription("The assembler's session to the device described in pnCommonEventDescr was terminated.")
pnSrEventReducerSessionOpened = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 5)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventReducerSessionOpened.setStatus('current')
if mibBuilder.loadTexts: pnSrEventReducerSessionOpened.setDescription("The reducer's session to the device described in pnCommonEventDescr was opened.")
pnSrEventAssemblerSessionOpened = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 6)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventAssemblerSessionOpened.setStatus('current')
if mibBuilder.loadTexts: pnSrEventAssemblerSessionOpened.setDescription("The assembler's session to the device described in pnCommonEventDescr was opened.")
pnSrEventPrimaryRegServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 7)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventPrimaryRegServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: pnSrEventPrimaryRegServerUnreachable.setDescription('The primary registration server is currently unreachable.')
pnSrEventSecondaryRegServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 8)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventSecondaryRegServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: pnSrEventSecondaryRegServerUnreachable.setDescription('The secondary registration server is currently unreachable.')
pnSrEventMultiNodeMasterUp = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 9)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventMultiNodeMasterUp.setStatus('current')
if mibBuilder.loadTexts: pnSrEventMultiNodeMasterUp.setDescription("The system designated as the 'master' of a multi-node came up. This notification is generated by the system that's designated as the 'master' of the multi-node. Note that the corresponding Down notification is generated by the designated 'master-backup' of the same multi-node.")
pnSrEventMultiNodeMasterDown = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 10)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventMultiNodeMasterDown.setStatus('current')
if mibBuilder.loadTexts: pnSrEventMultiNodeMasterDown.setDescription("The system designated as the 'master' of a multi-node is currently down. This notification is generated by the system that's designated as the 'master-backup' of the same multi-node. Note that the corresponding Up notification is generated by the designated 'master' of the same multi-node.")
pnSrEventMultiNodeLastUp = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 11)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventMultiNodeLastUp.setStatus('current')
if mibBuilder.loadTexts: pnSrEventMultiNodeLastUp.setDescription("The system designated as the 'last-node' of a multi-node came up. This notification is generated by the system that's designated as the 'last-node' of the multi-node. Note that the corresponding Down notification is generated by the designated 'master' of the same multi-node.")
pnSrEventMultiNodeLastDown = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 12)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventMultiNodeLastDown.setStatus('current')
if mibBuilder.loadTexts: pnSrEventMultiNodeLastDown.setDescription("The system designated as the 'last-node' of a multi-node is currently down. This notification is generated by the system that's designated as the 'master' of the same multi-node. Note that the corresponding Up notification is generated by the designated 'last-node' of the same multi-node.")
pnSrEventPrimaryDownBackupEngaged = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 13)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventPrimaryDownBackupEngaged.setStatus('current')
if mibBuilder.loadTexts: pnSrEventPrimaryDownBackupEngaged.setDescription("The system designated as the 'primary' is currently unreachable. This notification is generated by the system that's designated as the 'backup' device. The backup device is engaged for the primary device.")
pnSrEventPrimaryDownBackupEngageFailed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 14)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventPrimaryDownBackupEngageFailed.setStatus('current')
if mibBuilder.loadTexts: pnSrEventPrimaryDownBackupEngageFailed.setDescription("The system designated as the 'primary' is currently unreachable. This notification is generated by the system that's designated as the 'backup' device. The backup device failed to engage for the primary device.")
pnSrEventPrimaryUpBackupDisengaged = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 15)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventPrimaryUpBackupDisengaged.setStatus('current')
if mibBuilder.loadTexts: pnSrEventPrimaryUpBackupDisengaged.setDescription("The system designated as the 'primary' is currently reachable. This notification is generated by the system that's designated as the 'backup' device. The backup device has disengaged itself.")
pnSrEventMultiPathStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 16)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventMultiPathStatusChange.setStatus('current')
if mibBuilder.loadTexts: pnSrEventMultiPathStatusChange.setDescription('The status of the primary or secondary path to another multi-path enabled system changed. The path became inactive or failed after previously being active or vice versa. This might have caused traffic designated to flow over this path to be switched from or to this path.')
pnSrEventDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 17)).setObjects(("PERIBIT-COMMON-MIB", "pnCommonEventDescr"))
if mibBuilder.loadTexts: pnSrEventDiskFailure.setStatus('current')
if mibBuilder.loadTexts: pnSrEventDiskFailure.setDescription('A hard disk failed on the system. The system was rebooted, and will now operate without the downed disk, at a degraded performance. Dictionary accumulated until this point was lost.')
mibBuilder.exportSymbols("PERIBIT-SR-MIB", pnSrAppStatsBytesInPercent=pnSrAppStatsBytesInPercent, pnSrEventPrimaryRegServerUnreachable=pnSrEventPrimaryRegServerUnreachable, pnSrEventReducerSessionOpened=pnSrEventReducerSessionOpened, pnSrEventMultiPathStatusChange=pnSrEventMultiPathStatusChange, pnSrEventReducerBufferOverflow=pnSrEventReducerBufferOverflow, pnSrApp=pnSrApp, pnSrSysStats=pnSrSysStats, pnSrSysStatsBytesInAe=pnSrSysStatsBytesInAe, pnSrEventPrimaryDownBackupEngageFailed=pnSrEventPrimaryDownBackupEngageFailed, pnSrAppStatsBytesIn=pnSrAppStatsBytesIn, pnSrAsmStatsPktsIn=pnSrAsmStatsPktsIn, pnSrAppAggrStatsEntry=pnSrAppAggrStatsEntry, pnSrSysStatsBytesTpIn=pnSrSysStatsBytesTpIn, pnSrSysStatsThruputOut=pnSrSysStatsThruputOut, pnSrSysStatsBytesPtFilter=pnSrSysStatsBytesPtFilter, pnSrConfMib=pnSrConfMib, pnSrEventEventsV2=pnSrEventEventsV2, pnSrEventMultiNodeMasterDown=pnSrEventMultiNodeMasterDown, pnSrAppStatsEntry=pnSrAppStatsEntry, pnSrAsm=pnSrAsm, pnSrSysStatsPeakRdn=pnSrSysStatsPeakRdn, pnSrEventRipAuthFailure=pnSrEventRipAuthFailure, pnSrEventAssemblerSessionClosed=pnSrEventAssemblerSessionClosed, pnSrAppAggrStatsBytesInRe=pnSrAppAggrStatsBytesInRe, pnSrSysStatsPktsTpIn=pnSrSysStatsPktsTpIn, pnSrAsmIpAddress=pnSrAsmIpAddress, pnSrSysStatsPktsOfPt=pnSrSysStatsPktsOfPt, pnSrSysStatsPktsPtNoAe=pnSrSysStatsPktsPtNoAe, pnSrBurstStatsBpsIn=pnSrBurstStatsBpsIn, pnSrStatsAppCount=pnSrStatsAppCount, pnSrAsmStatsEntry=pnSrAsmStatsEntry, pnSrSysStatsPktsOutRe=pnSrSysStatsPktsOutRe, pnSrSysStatsBytesInRe=pnSrSysStatsBytesInRe, pnSrAsmIndex=pnSrAsmIndex, PYSNMP_MODULE_ID=pnSrMibModule, pnSrAppStatsTable=pnSrAppStatsTable, pnSrSysStatsBytesPtNoAe=pnSrSysStatsBytesPtNoAe, pnSrSysStatsPktsTpOut=pnSrSysStatsPktsTpOut, pnSrEventMultiNodeLastUp=pnSrEventMultiNodeLastUp, pnSrSysStatsBytesOutAe=pnSrSysStatsBytesOutAe, pnSrMib=pnSrMib, pnSrEventSecondaryRegServerUnreachable=pnSrEventSecondaryRegServerUnreachable, pnSrSysStatsPktsPtFilter=pnSrSysStatsPktsPtFilter, pnSrAsmStatsBytesIn=pnSrAsmStatsBytesIn, pnSrAsmStatsPktsOut=pnSrAsmStatsPktsOut, pnSrAppAppName=pnSrAppAppName, pnSrAppAggrStatsBytesInPercent=pnSrAppAggrStatsBytesInPercent, pnSrSysStatsThruputIn=pnSrSysStatsThruputIn, pnSrBurstStatsBpsPt=pnSrBurstStatsBpsPt, pnSrAsmStatsTable=pnSrAsmStatsTable, pnSrEventDiskFailure=pnSrEventDiskFailure, pnSrEventMultiNodeLastDown=pnSrEventMultiNodeLastDown, pnSrBurstStatsBpsOut=pnSrBurstStatsBpsOut, pnSrSysStatsBytesOutOob=pnSrSysStatsBytesOutOob, pnSrStatsAsmCount=pnSrStatsAsmCount, pnSrEventPrimaryUpBackupDisengaged=pnSrEventPrimaryUpBackupDisengaged, pnSrSysStatsPktsInAe=pnSrSysStatsPktsInAe, pnSrEventObjs=pnSrEventObjs, pnSrEventPrimaryDownBackupEngaged=pnSrEventPrimaryDownBackupEngaged, pnSrEventReducerSessionClosed=pnSrEventReducerSessionClosed, pnSrSysStatsBytesOfPt=pnSrSysStatsBytesOfPt, pnSrEventAssemblerSessionOpened=pnSrEventAssemblerSessionOpened, pnSrAppEntry=pnSrAppEntry, pnSrAppAggrStatsBytesOutRe=pnSrAppAggrStatsBytesOutRe, pnSrAppAggrStatsTable=pnSrAppAggrStatsTable, pnSrAppStatsAppName=pnSrAppStatsAppName, pnSrSysStatsPktsOutAe=pnSrSysStatsPktsOutAe, pnSrSysStatsBytesOutRe=pnSrSysStatsBytesOutRe, pnSrEventMultiNodeMasterUp=pnSrEventMultiNodeMasterUp, pnSrAppIndex=pnSrAppIndex, pnSrBurstStats=pnSrBurstStats, pnSrMibModule=pnSrMibModule, pnSrEvents=pnSrEvents, pnSrAsmTable=pnSrAsmTable, pnSrBurstStatsStartTime=pnSrBurstStatsStartTime, pnSrAppStatsBytesOut=pnSrAppStatsBytesOut, pnSrEventEvents=pnSrEventEvents, pnSrAppTable=pnSrAppTable, pnSrObjs=pnSrObjs, pnSrAsmEntry=pnSrAsmEntry, pnSrSysStatsBytesTpOut=pnSrSysStatsBytesTpOut, pnSrSysStatsPktsInRe=pnSrSysStatsPktsInRe, pnSrAsmStatsBytesOut=pnSrAsmStatsBytesOut, pnSrSysStatsBytesTpPt=pnSrSysStatsBytesTpPt, pnSrStatsUpdateTime=pnSrStatsUpdateTime, pnSrSysStatsPktsTpPt=pnSrSysStatsPktsTpPt)
