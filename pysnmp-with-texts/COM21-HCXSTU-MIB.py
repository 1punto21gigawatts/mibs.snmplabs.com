#
# PySNMP MIB module COM21-HCXSTU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXSTU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
com21, com21Hcx, com21Traps = mibBuilder.importSymbols("COM21-HCX-MIB", "com21", "com21Hcx", "com21Traps")
hcxEventLogTime, hcxAlmSeverity = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxEventLogTime", "hcxAlmSeverity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Bits, ObjectIdentity, Counter64, iso, Unsigned32, MibIdentifier, IpAddress, NotificationType, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Bits", "ObjectIdentity", "Counter64", "iso", "Unsigned32", "MibIdentifier", "IpAddress", "NotificationType", "Gauge32", "ModuleIdentity")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
com21HcxStu = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 50))
if mibBuilder.loadTexts: com21HcxStu.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxStu.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxStu.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxStu.setDescription('This is the Com21 ComPort Control MIB module. All data defined in this MIB is held upon the ComController. COM21 Part# 005-0025-00')
com21HcxStuStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 51))
com21HcxStuSrcIpAddrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 52))
com21HcxStuIpFiltGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 53))
com21HcxStuIpFiltStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 55))
com21HcxStuDstIpAddrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 57))
class FrequencyKhz(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 800000)

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

class StuGain(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(18, 58)

com21HcxStuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1), )
if mibBuilder.loadTexts: com21HcxStuStatusTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuStatusTable.setDescription('.')
com21HcxStuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1), ).setIndexNames((0, "COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: com21HcxStuStatusEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuStatusEntry.setDescription('.')
hcxStuStatusMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuStatusMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuStatusMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxStuConfigured.setStatus('current')
if mibBuilder.loadTexts: hcxStuConfigured.setDescription(' This attribute defines the configured state of the ComPort. This value will be set to true when the NMAPS creates a new entry. If this value is false, the hcxStuAcquired attribute is false and the hcxStuAuthorized flag is set to deauthorized then the entry shall be deleted. Note that this value cannot be set to false if the hcxStuAuthorized flag is set to true.')
hcxStuAcquired = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuAcquired.setStatus('current')
if mibBuilder.loadTexts: hcxStuAcquired.setDescription(' This attribute defines the acquired state of the ComPort. Note that is state is set once an ComPort can be managed. We could have a condition were an ComPort is acquired but full service cannot be provided. In that case the hcxStuAcqFailInfo attribute shall indicate a problem. If an unknown ComPort is acquired then an entry is created with this value set to true and both hcxStuAuthorized and hcxStuConfigured set to false.')
hcxStuAcqEvent = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 90)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuAcqEvent.setStatus('current')
if mibBuilder.loadTexts: hcxStuAcqEvent.setDescription(' This trap is issued only when the acquisition trap is enabled via the hcxStuAcqTrapEnable attribute. Severity WARNING.')
hcxStuDeacqEvent = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 91)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuDeacqEvent.setStatus('current')
if mibBuilder.loadTexts: hcxStuDeacqEvent.setDescription(' This trap is issued only when the acquisition trap is enabled via the hcxStuAcqTrapEnable attribute. Severity WARNING.')
hcxStuAcqFailInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noFailure", 1), ("vlanFailure", 2), ("servGrpInvalid", 3), ("bandwidthUnavail", 4), ("unauthorized", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuAcqFailInfo.setStatus('current')
if mibBuilder.loadTexts: hcxStuAcqFailInfo.setDescription(' This attribute provides secondary information related to an ComPort acquisition. If there is a failure in the system that prevents a user from receiving full service, then it will be indicated by this attribute. If an ComPort is unacquired or no problems were encountered then this attribute shall equal noFailure.')
hcxStuAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuAuthorized.setStatus('current')
if mibBuilder.loadTexts: hcxStuAuthorized.setDescription(' This attribute defines the verified state of the ComPort. This state can only be set by the NMAPS. If this attribute is false, then all cells rates shall be set to 0 on the appropriate Ethernet and RF Receiver cards.')
hcxStuLedFlashTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nil", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuLedFlashTest.setStatus('current')
if mibBuilder.loadTexts: hcxStuLedFlashTest.setDescription(' Used to invoke an ComPort LED test. Setting the the attribute to start will invoke test. Setting to stop will terminate the test. When reading this attribute, nil shall be returned if no test is active and start if the test is in progress.')
hcxStuUpstreamTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nil", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuUpstreamTest.setStatus('current')
if mibBuilder.loadTexts: hcxStuUpstreamTest.setDescription(' Used to invoke an ComPort Upstream RF test. Setting the attribute to start will invoke test. Setting to stop will terminate the test. When reading this attribute, nil shall be returned if no test is active and start if the test is in progress. Note that the hcxStuUpstrmTestFreq shall be validated before initiating the test.')
hcxStuVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVlanId.setStatus('current')
if mibBuilder.loadTexts: hcxStuVlanId.setDescription(' This attribute defines the virtual LAN id associated with the ComPort. No default, must be set. Note, in the case of an acquired but unconfigured ComPort, a value of 0 will be returned.')
hcxStuRxShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuRxShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxStuRxShelfId.setDescription(' This attribute specifies the shelf id associated with the RX the ComPort is currently assigned to. If ComPort is unacquired then the value shall be 0.')
hcxStuRxSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuRxSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxStuRxSlotId.setDescription(' This attribute specifies the slot id of the RX card to which the ComPort is currently assigned. If ComPort is unacquired then the value shall be 0.')
hcxStuRxPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuRxPortId.setStatus('current')
if mibBuilder.loadTexts: hcxStuRxPortId.setDescription(' This attribute specifies the RX port to which the ComPort is assigned. Presently only one port supported. If the ComPort is unacquired then the attribute shall be set to 0.')
hcxStuServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuServiceType.setStatus('current')
if mibBuilder.loadTexts: hcxStuServiceType.setDescription(' This attribute defines the Service Type associated with the ComPort. This equals the associated hcxServiceTypeId attribute. The default shall be 0, indicating no assigned service type.')
hcxStuConfSwImage = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuConfSwImage.setStatus('current')
if mibBuilder.loadTexts: hcxStuConfSwImage.setDescription(' Contains the configured software image to be downloaded to the ComPort. The Common Controller download process shall check this value when a download is requested. If this image does not support the hardware specified by the ComPort then an incompatible software version trap shall be generated. It is then up to the user to correct this field. When this field is set, the agent shall check if there is an image of the specified type loaded. If this is not the case then a unavailable software version trap shall be generated. Again, it is the responsibility of the user to ensure that the required image is downloaded. The image identifier shall be represented by 4 numbers deliminated by periods. i.e. a.b.c.d. Each number shall have a value between 0 and 255. This allows storage within a single (four byte) word.')
hcxIncompSwVersion = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 100)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxIncompSwVersion.setStatus('current')
if mibBuilder.loadTexts: hcxIncompSwVersion.setDescription(' This trap is issued if the configured sw version (in hcxStuConfSwImage) is not applicable to the hw version/hw options reported by the ComPort. This an event with no clear condition. Only severity is WARNING.')
hcxUnavailSwVersion = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 101)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxUnavailSwVersion.setStatus('current')
if mibBuilder.loadTexts: hcxUnavailSwVersion.setDescription(' This trap is issued if the configured image cannot be located on the ComController. This an event with no clear condition. Only severity is WARNING.')
hcxStuPingTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuPingTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxStuPingTestAction.setDescription(' Used to invoke a ping of the ComPort. Sends an OAM Ping message. When the user reads this attribute a nil response shall be given if no test is active and execute shall be return if a test is active.')
hcxStuPingTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 102)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"), ("COM21-HCXSTU-MIB", "hcxStuPingTestResult"))
if mibBuilder.loadTexts: hcxStuPingTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxStuPingTestComplete.setDescription(' This trap is issued when the ping test is completed. This an event with no clear condition. Only severity is WARNING.')
hcxStuPingTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuPingTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxStuPingTestResult.setDescription(' contains result of last ping test. invalid is returned if ping test cannot be run. Examples being an unacquired ComPort or a ComPort.')
hcxStuEthTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nil", 1), ("lpBkTest", 2), ("dnStrmTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuEthTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthTestAction.setDescription(' This attribute is used to invoke the ComPort Ethernet test. If lpBkTest is selected, the ComController will place the ComPort in the loopback state, transmit a number of ethernet packets and validate the returned packets. hcxStuEthLpbkTestUpRate and hcxStuEthLpbkTestLatency attributes contain the Rate and Latency for the upstream path If dnStrmTest is selected, the ComController will transmit a number of ethernet packets and calculate the downstream rate. hcxStuEthTestDnRate attribute will contain the rate for the downstream path. ')
hcxStuEthTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 103)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"), ("COM21-HCXSTU-MIB", "hcxStuEthTestResult"))
if mibBuilder.loadTexts: hcxStuEthTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthTestComplete.setDescription(' This notification is generated whenever the ComPort loopback test is completed. This shall either be completed after reception of looped back packet(s) or after a timeout. This an event with no clear condition. Only severity is WARNING.')
hcxStuEthTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("noResponse", 3), ("corruptPacket", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuEthTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthTestResult.setDescription(' This attribute contains the result of the last ComPort test.')
hcxStuRetPathSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoWay", 1), ("teleRet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuRetPathSelect.setStatus('current')
if mibBuilder.loadTexts: hcxStuRetPathSelect.setDescription(' This attribute specifies the return path mode of the ComPort. Default is two way cable.')
hcxStuAcqRangeFail = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 104)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuAcqRangeFail.setStatus('current')
if mibBuilder.loadTexts: hcxStuAcqRangeFail.setDescription(' This trap is issued if an RX card reports a failure to range a previously acquired ComPort. Note that the ComPort states are defined in the proxy ComPort MIB. This an event with no clear condition. Only severity is WARNING.')
hcxStuAcqOnlineFail = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 105)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuAcqOnlineFail.setStatus('current')
if mibBuilder.loadTexts: hcxStuAcqOnlineFail.setDescription(' This trap is issued if an RX card successfully acquires an ComPort, but the ComPort cannot be placed online due to a ComController or ComPort failure. Only severity is WARNING.')
hcxStuEth8022Filter = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuEth8022Filter.setStatus('current')
if mibBuilder.loadTexts: hcxStuEth8022Filter.setDescription(' This attribute is used to control the filtering of 802.2 Ethernet packets for a specific ComPORT. When this is enabled (true), all Ethernet packets of this type shall be dropped. Default is true.')
hcxStuDnstrmFwdCntrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDnstrmFwdCntrl.setStatus('current')
if mibBuilder.loadTexts: hcxStuDnstrmFwdCntrl.setDescription(' This attribute is used to control the forwarding of packets downstream which where received in the upstream from a specific ComPORT. If set to true, then the data will NOT be forwarded downstream but out the WAN interface only. Default is true. Not that the logic here is reversed when compared to the hcxVlanPeerToPeerFlag attribute in the VLAN group.')
hcxStuStatsCollect = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuStatsCollect.setStatus('current')
if mibBuilder.loadTexts: hcxStuStatsCollect.setDescription(' This attribute is used to control whether statistics are collected periodically from the ComPort. Default is enable for two-way ComPorts and disable for ComPorts configured for telephone return operation.')
hcxStuPowerRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noProblem", 1), ("powerLow", 2), ("powerHigh", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuPowerRangeState.setStatus('current')
if mibBuilder.loadTexts: hcxStuPowerRangeState.setDescription(' This attribute describes the power ranging state of the ComPort. An unacquired ComPort or one operating within the power specifications shall have a state of noProblem.')
hcxStuRangFailPowerLow = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 108)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuRangFailPowerLow.setStatus('current')
if mibBuilder.loadTexts: hcxStuRangFailPowerLow.setDescription(" This trap is generated when the RX card cannot set a ComPort's power level correctly - the ComPort has too low a power level. This alarm is generated once and cleared only when the condition is corrected or the ComPort is deacquired. Default severity is MINOR.")
hcxStuRangFailLowClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 140)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuRangFailLowClear.setStatus('current')
if mibBuilder.loadTexts: hcxStuRangFailLowClear.setDescription(' This trap is generated when the RX card successful ranges a ComPort that was previously reported as in the low power state or when a ComPort in that state is deacquired. Severity is CLEARED.')
hcxStuRangFailPowerHigh = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 109)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuRangFailPowerHigh.setStatus('current')
if mibBuilder.loadTexts: hcxStuRangFailPowerHigh.setDescription(" This trap is generated when the RX card cannot set a ComPort's power level correctly - the ComPort has too high a power level. This alarm is generated once and cleared only when the condition is corrected or the ComPort is deacquired. Default severity is MINOR.")
hcxStuRangFailHighClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 141)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuStatusMacAddr"))
if mibBuilder.loadTexts: hcxStuRangFailHighClear.setStatus('current')
if mibBuilder.loadTexts: hcxStuRangFailHighClear.setDescription(' This trap is generated when the RX card successful ranges a ComPort that was previously reported as in the high power state or when a ComPort in that state is deacquired. Severity is CLEARED.')
hcxStuRpmIPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuRpmIPortId.setStatus('current')
if mibBuilder.loadTexts: hcxStuRpmIPortId.setDescription(' This attribute specifies the RPM I-Port to which the ComPort is associated. 0 will be reported if the ComPort has never been acquired or is not connected via an RPM. The last known I-Port will be reported if the ComPort is unacquired but have been acquired previously.')
hcxStuEthLpbkTestUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuEthLpbkTestUpRate.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthLpbkTestUpRate.setDescription(' This attribute contains the rate recorded for the last loopback test. Will be 0 if test failed.')
hcxStuEthLpbkTestLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuEthLpbkTestLatency.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthLpbkTestLatency.setDescription(' This attribute contains the round trip packet latency recorded by the last loopback test. Again 0 if test failed.')
hcxStuModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("uninitialized", 1), ("invalid", 2), ("cp1000", 3), ("cp1000A", 4), ("cp1000B", 5), ("cp1000C", 6), ("cp1000D", 7), ("cp1100", 8), ("cp1100A", 9), ("cp1100B", 10), ("cp1100C", 11), ("cp1100D", 12), ("cp2000", 13), ("cp2000A", 14), ("cp2100", 15), ("cp2100A", 16), ("cp5020", 17), ("cp5120", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuModelName.setStatus('current')
if mibBuilder.loadTexts: hcxStuModelName.setDescription(' This attribute defines the ComPort Model Type read from the ComPort. Prior to the acquisition of the ComPort for the first time, this attribute will be uninitialized. Invalid will be set if the model number is not recongnized.')
hcxStuEthTestDnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuEthTestDnRate.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthTestDnRate.setDescription(' This attribute contains the downstream rate (in bps) recorded by the last hcxStuEthTestAction test. 0 if test failed.')
hcxStuEthLpbkTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 51, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuEthLpbkTestDuration.setStatus('current')
if mibBuilder.loadTexts: hcxStuEthLpbkTestDuration.setDescription(' This attribute specifies the duration of the loopback test in seconds. Default is 5 seconds.')
com21HcxStuSrcIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1), )
if mibBuilder.loadTexts: com21HcxStuSrcIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuSrcIpAddrTable.setDescription('.')
com21HcxStuSrcIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1), ).setIndexNames((0, "COM21-HCXSTU-MIB", "hcxStuSrcIpAddrMacAddr"), (0, "COM21-HCXSTU-MIB", "hcxStuSrcIpAddrEntryId"))
if mibBuilder.loadTexts: com21HcxStuSrcIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuSrcIpAddrEntry.setDescription(' Holds the IP addresses and associated masks for ARP filtering. There are 8 addresses per ComPort.')
hcxStuSrcIpAddrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuSrcIpAddrMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuSrcIpAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuSrcIpAddrIPAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrIPAddr.setDescription(' allowable IP Address for ComPort. Default 0.0.0.0.')
hcxStuSrcIpAddrIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuSrcIpAddrIPMask.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrIPMask.setDescription(' IP mask for ComPort. Default is ff.ff.ff.ff.')
hcxStuSrcIpAddrUserMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuSrcIpAddrUserMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrUserMacAddr.setDescription(' allowable MAC Address for ComPort. Default is 0:0:0:0:0:0')
hcxStuSrcIpAddrIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 5), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxStuSrcIpAddrIPStatus.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrIPStatus.setDescription(' Used to delete or create an entry.')
hcxStuSrcIpAddrEtherIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuSrcIpAddrEtherIPAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrEtherIPAddr.setDescription(' IP address of Ethernet Interface on users PC. Applicable only to telephone return.')
hcxStuSrcIpAddrEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuSrcIpAddrEntryId.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrEntryId.setDescription(' Contains table entry id.')
hcxStuSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrType.setDescription(' This attribute indicates if the specified IP address/mask combination is Statically configured by NMAPS or dynamically learnt via DHCP')
hcxStuSrcIpAddrLeaseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 52, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuSrcIpAddrLeaseTimer.setStatus('current')
if mibBuilder.loadTexts: hcxStuSrcIpAddrLeaseTimer.setDescription(' This attribute indicates the lease timer value associated with a dynamically learnt IP address')
com21HcxStuDstIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1), )
if mibBuilder.loadTexts: com21HcxStuDstIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuDstIpAddrTable.setDescription('.')
com21HcxStuDstIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1, 1), ).setIndexNames((0, "COM21-HCXSTU-MIB", "hcxStuDstIpAddrMacAddr"), (0, "COM21-HCXSTU-MIB", "hcxStuDstIpAddrEntryId"))
if mibBuilder.loadTexts: com21HcxStuDstIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuDstIpAddrEntry.setDescription(' Holds the IP addresses and associated masks for ARP filtering. There are 8 addresses per ComPort.')
hcxStuDstIpAddrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuDstIpAddrMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuDstIpAddrMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuDstIpAddrIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDstIpAddrIPAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuDstIpAddrIPAddr.setDescription(' allowable IP Address for ComPort. Default 0.0.0.0.')
hcxStuDstIpAddrIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuDstIpAddrIPMask.setStatus('current')
if mibBuilder.loadTexts: hcxStuDstIpAddrIPMask.setDescription(' IP mask for ComPort. Default is ff.ff.ff.ff.')
hcxStuDstIpAddrIPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1, 1, 4), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxStuDstIpAddrIPStatus.setStatus('current')
if mibBuilder.loadTexts: hcxStuDstIpAddrIPStatus.setDescription(' Used to delete or create an entry.')
hcxStuDstIpAddrEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 57, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuDstIpAddrEntryId.setStatus('current')
if mibBuilder.loadTexts: hcxStuDstIpAddrEntryId.setDescription(' Contains table entry id.')
com21HcxStuIpFiltTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1), )
if mibBuilder.loadTexts: com21HcxStuIpFiltTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuIpFiltTable.setDescription('.')
com21HcxStuIpFiltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1), ).setIndexNames((0, "COM21-HCXSTU-MIB", "hcxStuIpFiltMacAddr"))
if mibBuilder.loadTexts: com21HcxStuIpFiltEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuIpFiltEntry.setDescription('.')
hcxStuIpFiltMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpFiltMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpFiltMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuIpArpFiltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpArpFiltEnable.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpArpFiltEnable.setDescription(' Specifies whether ARP authentication filtering should be enabled for this ComPort. This filter is applicable to 10BT, 100BT, and OC3 cards. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanIpArpFiltEnbl.')
hcxStuIpArpFiltInvalidAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpArpFiltInvalidAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpArpFiltInvalidAddr.setDescription(' Contains the last invalid IP Address used by the ComPort. This value is cleared on the quarter hour.')
hcxStuArpInvalidAddr = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 106)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuIpFiltMacAddr"), ("COM21-HCXSTU-MIB", "hcxStuIpArpFiltInvalidAddr"))
if mibBuilder.loadTexts: hcxStuArpInvalidAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuArpInvalidAddr.setDescription(' this trap is generated whenever an invalid ARP IP source address is detected. Severity is WARNING.')
hcxStuIpArpFiltBadServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpArpFiltBadServAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpArpFiltBadServAddr.setDescription(' Contains the last ComController Server IP Address used by the ComPort. This value is cleared on the quarter hour.')
hcxStuArpBadServerAddr = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 107)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXSTU-MIB", "hcxStuIpFiltMacAddr"), ("COM21-HCXSTU-MIB", "hcxStuIpArpFiltBadServAddr"))
if mibBuilder.loadTexts: hcxStuArpBadServerAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuArpBadServerAddr.setDescription(' this trap is generated whenever the ComPort is detected as utilizing a reserved server address as its source IP address. Severity is WARNING.')
hcxStuIpSrcFiltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpSrcFiltEnable.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpSrcFiltEnable.setDescription(' Specifies whether IP source address filtering should be enabled for this ComPort. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanIpSrcFiltEnbl.')
hcxStuIpDstFiltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpDstFiltEnable.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpDstFiltEnable.setDescription(' Specifies whether IP destination address filtering should be enabled for this ComPort. This filter is applicable to 100BT, and OC3 cards. It is not applicable to to 10BT card. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanIpDstFiltEnbl.')
hcxStuIpBootpReqFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpBootpReqFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuIpBootpReqFiltEnbl.setDescription(' Allows enabling or disabling BOOTP Request Filter for this STU. Default: FALSE')
hcxStuIpBootpReplyFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpBootpReplyFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpBootpReplyFiltEnbl.setDescription(' Specifies whether BOOTP replies, or DHCPOFFER, or DHCPACK packets should be filtered for this ComPort. This filter is applicable to 100BT, and OC3 cards. It it not applicable to 10BT card. It filters traffic in the upstream direction. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanIpBootpReplyFiltEnbl.')
hcxStuIpDhcpSnoopFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpDhcpSnoopFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpDhcpSnoopFiltEnbl.setDescription(' Specifies whether DHCP snooping should be enabled for this ComPort. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It snoops traffic in the downstream direction for DHCPACK packets, and in the upstream direction for DHCPDECLINE or DHCPRELEASE packets. Dynamic IP address assigments thus learned are stored in the valid source IP address table (com21HcxStuSrcIpAddrGroup.) Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanIpDhcpSnoopFiltEnbl.')
hcxStuL2SnapFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2SnapFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxStuL2SnapFiltEnbl.setDescription(' Specifies whether SNAP-encoded IEEE 802.3 packets should be filtered for this ComPort. This filter is applicable to 100BT, and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2SnapFiltEnbl.')
hcxStuL2NonSnapFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2NonSnapFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxStuL2NonSnapFiltEnbl.setDescription(' Specifies whether non-SNAP-encoded IEEE 802.3 packets should be filtered for this ComPort. This filter is applicable to 10BT, 100BT, and OC3 cards. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2NonSnapFiltEnbl.')
hcxStuL2EnetFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2EnetFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2EnetFiltEnbl.setDescription(' Specifies whether Ethernet packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2EnetFiltEnbl.')
hcxStuL2ArpIpv4FiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2ArpIpv4FiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2ArpIpv4FiltEnbl.setDescription(' Specifies whether ARP packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2ArpIpv4FiltEnbl.')
hcxStuL2Ipv4FiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2Ipv4FiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2Ipv4FiltEnbl.setDescription(' Specifies whether IPv4 packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2Ipv4FiltEnbl.')
hcxStuL2Ipv6FiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2Ipv6FiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2Ipv6FiltEnbl.setDescription(' Specifies whether IPv6 packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2Ipv6FiltEnbl.')
hcxStuL2IpxFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2IpxFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2IpxFiltEnbl.setDescription(' Specifies whether IPX packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2IpxFiltEnbl.')
hcxStuL2AppletalkFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2AppletalkFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2AppletalkFiltEnbl.setDescription(' Specifies whether AppleTalk packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. It filters traffic in both upstream and downstream directions. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2AppleTalkFiltEnbl.')
hcxStuL2OthersFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuL2OthersFiltEnbl.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2OthersFiltEnbl.setDescription(' Specifies whether all layer 2 packets that are none of the above (ARP, IPv4, IPv6, IPX, AppleTalk) should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. This filter filters traffic in both directions. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanL2OthersFiltEnbl. Default is false.')
hcxStuIpNetbiosFiltEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 53, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpNetbiosFiltEnbl.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpNetbiosFiltEnbl.setDescription(' Specifies whether NetBIOS-over-IP packets should be filtered for this ComPort. This filter is applicable to 100BT and OC3 cards. It is not applicable to 10BT card. This filter filters traffic in the upstream direction. Default is false. This filter can also be enabled for an entire VLAN via the MIB attribute hcxVlanIpNetbiosFiltEnbl.')
com21HcxStuIpFiltStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1), )
if mibBuilder.loadTexts: com21HcxStuIpFiltStatsTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuIpFiltStatsTable.setDescription('.')
com21HcxStuIpFiltStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1), ).setIndexNames((0, "COM21-HCXSTU-MIB", "hcxStuIpFiltStatsMacAddr"))
if mibBuilder.loadTexts: com21HcxStuIpFiltStatsEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxStuIpFiltStatsEntry.setDescription('.')
hcxStuIpFiltStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpFiltStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpFiltStatsMacAddr.setDescription(' Contains IEEE 802 medium access control address of the ComPort device.')
hcxStuIpCurrArpFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrArpFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrArpFiltStat.setDescription(' Contains the number of ARP packets from this ComPort dropped due to authentication filtering in the current 15 minute collection period.')
hcxStuIpCurrSrcFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrSrcFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrSrcFiltStat.setDescription(' Contains the number of IP packets from this ComPort dropped due to source address filtering in the current 15 minute collection period.')
hcxStuIpCurrDstFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrDstFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrDstFiltStat.setDescription(' Contains the number of IP packets from this ComPort dropped due to destination address filtering in the current 15 minute collection period.')
hcxStuIpCurrBootpReqFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrBootpReqFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrBootpReqFiltStat.setDescription(' Contains the number of bootp Req packets from this ComPort dropped due to filtering in the current 15 minute collection period.')
hcxStuIpCurrBootpReplyFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrBootpReplyFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrBootpReplyFiltStat.setDescription(' Contains the number of bootp Reply packets from this ComPort dropped due to filtering in the current 15 minute collection period.')
hcxStuIpCurrDhcpSnoopFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrDhcpSnoopFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrDhcpSnoopFiltStat.setDescription(' Contains the number of DHCP Ack packets from this ComPort snooped due to filtering in the current 15 minute collection period.')
hcxStuIpPrevArpFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevArpFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevArpFiltStat.setDescription(' Contains the number of ARP packets from this ComPort dropped due to authentication filtering in the previous 15 minute collection period.')
hcxStuIpPrevSrcFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevSrcFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevSrcFiltStat.setDescription(' Contains the number of IP packets from this ComPort dropped due to source address filtering in the previous 15 minute collection period.')
hcxStuIpPrevDstFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevDstFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevDstFiltStat.setDescription(' Contains the number of IP packets from this ComPort dropped due to destination address filtering in the previous 15 minute collection period.')
hcxStuIpPrevBootpReqFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevBootpReqFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevBootpReqFiltStat.setDescription(' Contains the number of bootp Req packets from this ComPort dropped due to filtering in the previous 15 minute collection period.')
hcxStuIpPrevBootpReplyFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevBootpReplyFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevBootpReplyFiltStat.setDescription(' Contains the number of bootp Reply packets from this ComPort dropped due to filtering in the previous 15 minute collection period.')
hcxStuIpPrevDhcpSnoopFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevDhcpSnoopFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevDhcpSnoopFiltStat.setDescription(' Contains the number of DHCP Ack packets from this ComPort snooped due to filtering in the previous 15 minute collection period.')
hcxStuIpClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuIpClearStats.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpClearStats.setDescription(' This attribute is used to clear all IP Filter statistics counters in this group. This operation is only possible if the hcxStatsControl attribute is set to wrapCurr.')
hcxStuL2CurrSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuL2CurrSnapFiltStat.setDescription(' Contains the number of SNAP-encoded IEEE 802.3 packets filtered in the current 15 min collection period.')
hcxStuL2CurrNonSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrNonSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuL2CurrNonSnapFiltStat.setDescription(' Contains the number of non-SNAP-encoded IEEE 802.3 packets filtered in the current 15 min collection period.')
hcxStuL2CurrEnetFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrEnetFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrEnetFiltStat.setDescription(' Contains the number of Ethernet packets filtered in the current 15 min collection period.')
hcxStuL2CurrArpIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrArpIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrArpIpv4FiltStat.setDescription(' Contains the number of ARP for IPv4 packets filtered in the current 15 min collection period.')
hcxStuL2CurrIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrIpv4FiltStat.setDescription(' Contains the number of IPv4 packets filtered in the current 15 min collection period.')
hcxStuL2CurrIpv6FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrIpv6FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrIpv6FiltStat.setDescription(' Contains the number of IPv6 packets filtered in the current 15 min collection period.')
hcxStuL2CurrIpxFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrIpxFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrIpxFiltStat.setDescription(' Contains the number of IPX packets filtered in the current 15 min collection period.')
hcxStuL2CurrAppletalkFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrAppletalkFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrAppletalkFiltStat.setDescription(' Contains the number of Appletalk packets filtered in the current 15 min collection period.')
hcxStuL2CurrOthersFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2CurrOthersFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2CurrOthersFiltStat.setDescription(' Contains the number of packets that are non of the above that are filtered in the current 15 min collection period.')
hcxStuIpCurrNetbiosFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpCurrNetbiosFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpCurrNetbiosFiltStat.setDescription(' Contains the number of Netbios packets filtered in the current 15 min collection period.')
hcxStuL2PrevSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuL2PrevSnapFiltStat.setDescription(' Contains the number of SNAP-encoded IEEE 802.3 packets filtered in the previous 15 min collection period.')
hcxStuL2PrevNonSnapFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevNonSnapFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuL2PrevNonSnapFiltStat.setDescription(' Contains the number of non-SNAP-encoded IEEE 802.3 packets filtered in the previous 15 min collection period.')
hcxStuL2PrevEnetFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevEnetFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevEnetFiltStat.setDescription(' Contains the number of Ethernet packets filtered in the previous 15 min collection period.')
hcxStuL2PrevArpIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevArpIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevArpIpv4FiltStat.setDescription(' Contains the number of ARP for IPv4 packets filtered in the previous 15 min collection period.')
hcxStuL2PrevIpv4FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevIpv4FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevIpv4FiltStat.setDescription(' Contains the number of IPv4 packets filtered in the previous 15 min collection period.')
hcxStuL2PrevIpv6FiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevIpv6FiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevIpv6FiltStat.setDescription(' Contains the number of IPv6 packets filtered in the previous 15 min collection period.')
hcxStuL2PrevIpxFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevIpxFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevIpxFiltStat.setDescription(' Contains the number of IPX packets filtered in the previous 15 min collection period.')
hcxStuL2PrevAppletalkFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevAppletalkFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevAppletalkFiltStat.setDescription(' Contains the number of Appletalk packets filtered in the previous 15 min collection period.')
hcxStuL2PrevOthersFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuL2PrevOthersFiltStat.setStatus('deprecated')
if mibBuilder.loadTexts: hcxStuL2PrevOthersFiltStat.setDescription(' Contains the number of packets that are non of the above that are filtered in the previous 15 min collection period.')
hcxStuIpPrevNetbiosFiltStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 55, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuIpPrevNetbiosFiltStat.setStatus('current')
if mibBuilder.loadTexts: hcxStuIpPrevNetbiosFiltStat.setDescription(' Contains the number of Netbios packets filtered in the previous 15 min collection period.')
mibBuilder.exportSymbols("COM21-HCXSTU-MIB", hcxStuIpArpFiltInvalidAddr=hcxStuIpArpFiltInvalidAddr, hcxStuDstIpAddrIPAddr=hcxStuDstIpAddrIPAddr, hcxStuIpPrevSrcFiltStat=hcxStuIpPrevSrcFiltStat, hcxStuUpstreamTest=hcxStuUpstreamTest, Com21RowStatus=Com21RowStatus, hcxStuL2PrevIpv6FiltStat=hcxStuL2PrevIpv6FiltStat, hcxStuAuthorized=hcxStuAuthorized, hcxStuIpArpFiltBadServAddr=hcxStuIpArpFiltBadServAddr, hcxStuRxShelfId=hcxStuRxShelfId, hcxStuPingTestAction=hcxStuPingTestAction, hcxStuDnstrmFwdCntrl=hcxStuDnstrmFwdCntrl, hcxStuConfSwImage=hcxStuConfSwImage, hcxStuAcqRangeFail=hcxStuAcqRangeFail, hcxStuL2ArpIpv4FiltEnbl=hcxStuL2ArpIpv4FiltEnbl, hcxStuSrcIpAddrIPStatus=hcxStuSrcIpAddrIPStatus, hcxStuL2IpxFiltEnbl=hcxStuL2IpxFiltEnbl, hcxStuIpCurrArpFiltStat=hcxStuIpCurrArpFiltStat, hcxStuIpPrevBootpReqFiltStat=hcxStuIpPrevBootpReqFiltStat, hcxStuEthLpbkTestLatency=hcxStuEthLpbkTestLatency, hcxStuAcqFailInfo=hcxStuAcqFailInfo, hcxStuEthLpbkTestUpRate=hcxStuEthLpbkTestUpRate, hcxStuL2CurrSnapFiltStat=hcxStuL2CurrSnapFiltStat, hcxStuL2PrevIpv4FiltStat=hcxStuL2PrevIpv4FiltStat, hcxStuL2PrevOthersFiltStat=hcxStuL2PrevOthersFiltStat, hcxStuL2AppletalkFiltEnbl=hcxStuL2AppletalkFiltEnbl, hcxStuL2PrevSnapFiltStat=hcxStuL2PrevSnapFiltStat, hcxStuL2NonSnapFiltEnbl=hcxStuL2NonSnapFiltEnbl, hcxStuIpBootpReplyFiltEnbl=hcxStuIpBootpReplyFiltEnbl, hcxStuStatsCollect=hcxStuStatsCollect, com21HcxStuIpFiltStatsTable=com21HcxStuIpFiltStatsTable, hcxStuDeacqEvent=hcxStuDeacqEvent, hcxStuL2PrevAppletalkFiltStat=hcxStuL2PrevAppletalkFiltStat, hcxStuAcquired=hcxStuAcquired, hcxStuSrcIpAddrType=hcxStuSrcIpAddrType, hcxStuIpPrevDstFiltStat=hcxStuIpPrevDstFiltStat, FrequencyKhz=FrequencyKhz, hcxStuL2CurrArpIpv4FiltStat=hcxStuL2CurrArpIpv4FiltStat, hcxStuRetPathSelect=hcxStuRetPathSelect, hcxStuArpInvalidAddr=hcxStuArpInvalidAddr, com21HcxStuSrcIpAddrTable=com21HcxStuSrcIpAddrTable, com21HcxStuDstIpAddrGroup=com21HcxStuDstIpAddrGroup, hcxStuIpCurrNetbiosFiltStat=hcxStuIpCurrNetbiosFiltStat, hcxStuSrcIpAddrEntryId=hcxStuSrcIpAddrEntryId, hcxStuRxSlotId=hcxStuRxSlotId, hcxStuIpPrevDhcpSnoopFiltStat=hcxStuIpPrevDhcpSnoopFiltStat, hcxStuEthLpbkTestDuration=hcxStuEthLpbkTestDuration, hcxStuEthTestComplete=hcxStuEthTestComplete, com21HcxStuStatusGroup=com21HcxStuStatusGroup, hcxStuRangFailPowerHigh=hcxStuRangFailPowerHigh, hcxStuConfigured=hcxStuConfigured, hcxStuIpCurrBootpReqFiltStat=hcxStuIpCurrBootpReqFiltStat, com21HcxStu=com21HcxStu, com21HcxStuDstIpAddrTable=com21HcxStuDstIpAddrTable, hcxStuEthTestDnRate=hcxStuEthTestDnRate, hcxStuAcqEvent=hcxStuAcqEvent, PYSNMP_MODULE_ID=com21HcxStu, com21HcxStuIpFiltTable=com21HcxStuIpFiltTable, hcxStuAcqOnlineFail=hcxStuAcqOnlineFail, hcxStuL2PrevEnetFiltStat=hcxStuL2PrevEnetFiltStat, hcxStuPingTestComplete=hcxStuPingTestComplete, StuGain=StuGain, hcxStuL2PrevNonSnapFiltStat=hcxStuL2PrevNonSnapFiltStat, com21HcxStuIpFiltStatsEntry=com21HcxStuIpFiltStatsEntry, hcxStuDstIpAddrMacAddr=hcxStuDstIpAddrMacAddr, hcxStuL2PrevIpxFiltStat=hcxStuL2PrevIpxFiltStat, hcxStuDstIpAddrEntryId=hcxStuDstIpAddrEntryId, hcxStuL2CurrAppletalkFiltStat=hcxStuL2CurrAppletalkFiltStat, hcxStuSrcIpAddrIPAddr=hcxStuSrcIpAddrIPAddr, hcxStuPowerRangeState=hcxStuPowerRangeState, hcxStuRpmIPortId=hcxStuRpmIPortId, hcxStuL2CurrIpv6FiltStat=hcxStuL2CurrIpv6FiltStat, hcxStuIpCurrSrcFiltStat=hcxStuIpCurrSrcFiltStat, hcxStuEthTestResult=hcxStuEthTestResult, hcxStuL2Ipv4FiltEnbl=hcxStuL2Ipv4FiltEnbl, hcxStuEth8022Filter=hcxStuEth8022Filter, com21HcxStuIpFiltEntry=com21HcxStuIpFiltEntry, hcxStuLedFlashTest=hcxStuLedFlashTest, hcxStuL2OthersFiltEnbl=hcxStuL2OthersFiltEnbl, hcxIncompSwVersion=hcxIncompSwVersion, hcxStuL2CurrNonSnapFiltStat=hcxStuL2CurrNonSnapFiltStat, hcxUnavailSwVersion=hcxUnavailSwVersion, hcxStuIpFiltMacAddr=hcxStuIpFiltMacAddr, com21HcxStuSrcIpAddrGroup=com21HcxStuSrcIpAddrGroup, hcxStuModelName=hcxStuModelName, hcxStuIpSrcFiltEnable=hcxStuIpSrcFiltEnable, com21HcxStuSrcIpAddrEntry=com21HcxStuSrcIpAddrEntry, hcxStuIpDstFiltEnable=hcxStuIpDstFiltEnable, com21HcxStuStatusTable=com21HcxStuStatusTable, com21HcxStuIpFiltGroup=com21HcxStuIpFiltGroup, hcxStuDstIpAddrIPStatus=hcxStuDstIpAddrIPStatus, hcxStuArpBadServerAddr=hcxStuArpBadServerAddr, hcxStuIpPrevBootpReplyFiltStat=hcxStuIpPrevBootpReplyFiltStat, hcxStuDstIpAddrIPMask=hcxStuDstIpAddrIPMask, com21HcxStuIpFiltStatsGroup=com21HcxStuIpFiltStatsGroup, hcxStuIpBootpReqFiltEnbl=hcxStuIpBootpReqFiltEnbl, com21HcxStuDstIpAddrEntry=com21HcxStuDstIpAddrEntry, hcxStuL2CurrOthersFiltStat=hcxStuL2CurrOthersFiltStat, hcxStuL2PrevArpIpv4FiltStat=hcxStuL2PrevArpIpv4FiltStat, hcxStuRangFailHighClear=hcxStuRangFailHighClear, com21HcxStuStatusEntry=com21HcxStuStatusEntry, hcxStuIpDhcpSnoopFiltEnbl=hcxStuIpDhcpSnoopFiltEnbl, hcxStuL2CurrIpv4FiltStat=hcxStuL2CurrIpv4FiltStat, hcxStuServiceType=hcxStuServiceType, hcxStuSrcIpAddrEtherIPAddr=hcxStuSrcIpAddrEtherIPAddr, hcxStuRangFailLowClear=hcxStuRangFailLowClear, hcxStuIpClearStats=hcxStuIpClearStats, hcxStuRxPortId=hcxStuRxPortId, hcxStuSrcIpAddrUserMacAddr=hcxStuSrcIpAddrUserMacAddr, hcxStuVlanId=hcxStuVlanId, hcxStuSrcIpAddrIPMask=hcxStuSrcIpAddrIPMask, hcxStuL2SnapFiltEnbl=hcxStuL2SnapFiltEnbl, hcxStuIpCurrBootpReplyFiltStat=hcxStuIpCurrBootpReplyFiltStat, hcxStuEthTestAction=hcxStuEthTestAction, hcxStuSrcIpAddrLeaseTimer=hcxStuSrcIpAddrLeaseTimer, hcxStuIpNetbiosFiltEnbl=hcxStuIpNetbiosFiltEnbl, hcxStuIpCurrDstFiltStat=hcxStuIpCurrDstFiltStat, hcxStuIpFiltStatsMacAddr=hcxStuIpFiltStatsMacAddr, hcxStuIpPrevArpFiltStat=hcxStuIpPrevArpFiltStat, hcxStuL2EnetFiltEnbl=hcxStuL2EnetFiltEnbl, hcxStuIpPrevNetbiosFiltStat=hcxStuIpPrevNetbiosFiltStat, hcxStuStatusMacAddr=hcxStuStatusMacAddr, hcxStuSrcIpAddrMacAddr=hcxStuSrcIpAddrMacAddr, hcxStuL2CurrIpxFiltStat=hcxStuL2CurrIpxFiltStat, hcxStuL2Ipv6FiltEnbl=hcxStuL2Ipv6FiltEnbl, hcxStuIpArpFiltEnable=hcxStuIpArpFiltEnable, hcxStuIpCurrDhcpSnoopFiltStat=hcxStuIpCurrDhcpSnoopFiltStat, hcxStuRangFailPowerLow=hcxStuRangFailPowerLow, hcxStuL2CurrEnetFiltStat=hcxStuL2CurrEnetFiltStat, hcxStuPingTestResult=hcxStuPingTestResult)
