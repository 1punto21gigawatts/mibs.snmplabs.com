#
# PySNMP MIB module PDN-HEALTHANDSTATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-HEALTHANDSTATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_devStatus, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-devStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, ModuleIdentity, ObjectIdentity, MibIdentifier, IpAddress, Counter32, iso, Counter64, NotificationType, Bits, NotificationType, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "iso", "Counter64", "NotificationType", "Bits", "NotificationType", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
devStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1))
devHealthAndStatus = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devHealthAndStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devHealthAndStatus.setDescription('Health and Status of the device. Health & Status is represented as a concatenation of health and status message strings, where each message string is separated by a semi-colon. Refer to device-specific user documentation for a complete description of the Health and Status codes.')
devSelfTestResults = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSelfTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: devSelfTestResults.setDescription('Self-test results. Self-test (or power-up test) results summarizes the test results of each CCA, where each CCA test result is separated by a semi-colon. Refer to device-specific user documentation for a complete description of the self test codes and messages.')
devAbortStatus = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devAbortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devAbortStatus.setDescription('Abort Status. The devAbortStatus object is used to retrieve the latest abort status that is stored in the agent. The agent will need to save the latest abort information in non-volatile memory so that it will be available immediately after a fatal reset. How long the latest failure information is remembered after this point is an implementation issue. Refer to device-specific user documentation for a complete description of the abort codes and/or messages.')
devSNMPSetStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 4), )
if mibBuilder.loadTexts: devSNMPSetStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: devSNMPSetStatusTable.setDescription('A table containing SNMP Set command Statuses when an error occurs. It contains maximum of 5 entries. Oldest entry is pushed out when the table is full and a new entry is added.')
devSNMPSetStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 4, 1), ).setIndexNames((0, "PDN-HEALTHANDSTATUS-MIB", "devSNMPSetReqId"))
if mibBuilder.loadTexts: devSNMPSetStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devSNMPSetStatusEntry.setDescription('The information regarding each SNMP Set command Status when en error occurs. Each entry is index by a request ID generated by the client and attached to the UDP when the Set command is sent.')
devSNMPSetReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSNMPSetReqId.setStatus('mandatory')
if mibBuilder.loadTexts: devSNMPSetReqId.setDescription('The Request ID which identifies the SNMP Set command in error.')
devSNMPSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSNMPSetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devSNMPSetStatus.setDescription('Indicates the error message string associated with the Set command of this row in the table.')
devAuthenticationFailureIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devAuthenticationFailureIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: devAuthenticationFailureIpAddress.setDescription('Authentication Failure Ip Address is used when a authenticationFailure trap is generated. The single varbind represents the ip address causing the error. If the ip address is not known, 0.0.0.0 is used.')
devLastTrapString = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devLastTrapString.setStatus('mandatory')
if mibBuilder.loadTexts: devLastTrapString.setDescription('This object contains a textual description of the last trap that was processed by the device. The exact text in the description is device specific and should be contained user documentation outside of this MIB. It is recommended that the important information is contained within the first 100 characters.')
devFailureStatus = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: devFailureStatus.setDescription(' Device Failure status. Conditions that cause failure are further described in the device documentation.')
devStatusTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devStatusTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: devStatusTrapEnable.setDescription(' This object provides ability to enable or disable individual enterprise traps. The object is bit map represented as a sum. The bit positions are: 1 deviceSelfTestFailure 2 deviceFailure')
devSelfTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 9), )
if mibBuilder.loadTexts: devSelfTestResultTable.setStatus('mandatory')
if mibBuilder.loadTexts: devSelfTestResultTable.setDescription('A table containing results of power on selftest for the whole unit.')
devSelfTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 9, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devSelfTestResultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: devSelfTestResultEntry.setDescription('The information regarding each SelfTest on each unit.')
devSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devSelfTestResult.setStatus('mandatory')
if mibBuilder.loadTexts: devSelfTestResult.setDescription('Self-test results. Self-test (or power-up test) results summarizes the test results of each interface, where each CCA test result is separated by a semi-colon. Refer to device-specific user documentation for a complete description of the self test codes and messages.')
devSelfTestFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1) + (0,1)).setObjects(("IF-MIB", "ifIndex"), ("PDN-HEALTHANDSTATUS-MIB", "devSelfTestResults"))
if mibBuilder.loadTexts: devSelfTestFailure.setDescription("This trap signifies that the sending protocol's device has failed self test. The variable binding for this trap would be the selfTest devSelfTestResults object of the Health and Status MIB. The exact format of this display string will be well-documented in the Operational Specifications of the device.")
deviceFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 4, 1) + (0,2)).setObjects(("IF-MIB", "ifIndex"), ("PDN-HEALTHANDSTATUS-MIB", "devFailureStatus"))
if mibBuilder.loadTexts: deviceFailure.setDescription(" This trap signifies that the sending protocol's device has failed and the failure was not a result of a device test.")
mibBuilder.exportSymbols("PDN-HEALTHANDSTATUS-MIB", devSelfTestResultTable=devSelfTestResultTable, devSNMPSetStatusTable=devSNMPSetStatusTable, devHealthAndStatus=devHealthAndStatus, devStatusTrapEnable=devStatusTrapEnable, devSelfTestResults=devSelfTestResults, devAbortStatus=devAbortStatus, devSNMPSetReqId=devSNMPSetReqId, devFailureStatus=devFailureStatus, devSNMPSetStatusEntry=devSNMPSetStatusEntry, devSelfTestResultEntry=devSelfTestResultEntry, devSNMPSetStatus=devSNMPSetStatus, devSelfTestResult=devSelfTestResult, devSelfTestFailure=devSelfTestFailure, devLastTrapString=devLastTrapString, devAuthenticationFailureIpAddress=devAuthenticationFailureIpAddress, devStatus=devStatus, deviceFailure=deviceFailure)
