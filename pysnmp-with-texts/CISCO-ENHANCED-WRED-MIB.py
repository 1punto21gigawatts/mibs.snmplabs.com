#
# PySNMP MIB module CISCO-ENHANCED-WRED-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENHANCED-WRED-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, MibIdentifier, Bits, ModuleIdentity, Unsigned32, Integer32, TimeTicks, Counter64, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibIdentifier", "Bits", "ModuleIdentity", "Unsigned32", "Integer32", "TimeTicks", "Counter64", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "Counter32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
ciscoEnhancedWredMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 222))
ciscoEnhancedWredMIB.setRevisions(('2001-12-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEnhancedWredMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEnhancedWredMIB.setLastUpdated('200112210000Z')
if mibBuilder.loadTexts: ciscoEnhancedWredMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEnhancedWredMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-wredmib@cisco.com')
if mibBuilder.loadTexts: ciscoEnhancedWredMIB.setDescription('Cisco WRED MIB - Overview Cisco Weighted Random Early Detection/Drop (WRED) is a method which avoids traffic congestion on an output interface. Congestion is detected by computing the average output queue size against queue thresholds, which can be configured either per IP precedence or differentiated services code point (DSCP) based. WRED support are on the IP fast switching and IP flow switching only. It does not apply to IP process switching. The purpose of this MIB is to provide Weighted Random Early Detection/Drop packet configuration and packet filtering information. This MIB provides the WRED information about the transmit (Tx) side and receive (Rx) side of the modules, for the managed systems that support WRED on both transmit side and receive side.')
ciscoEnhancedWredMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 1))
cewredTx = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 1))
cewredRx = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2))
cewredConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3))
cewredQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4))
cewredStat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5))
class CewredQueueNumber(TextualConvention, Unsigned32):
    description = 'An unique value, for each distributed round robin queue in the managed system.'
    status = 'current'

class CewredRedMechanism(TextualConvention, Integer32):
    description = 'This denotes the Random Early Detection mechanisms to be used by WRED. The possible mechanisms are as follows: precedence Based on IP precedence dscp Based on DSCP values '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("precedence", 1), ("dscp", 2))

class CewredRedProfile(TextualConvention, Unsigned32):
    description = 'A value which identifies the mapping between the precedence or DSCP value to a Random Early Detection profile.'
    status = 'current'

class CewredIndex(TextualConvention, Unsigned32):
    description = 'An unique value, greater than zero, which identifies unique entry in cewredConfigGlobTable.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

cewredTxTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 1, 1), )
if mibBuilder.loadTexts: cewredTxTable.setStatus('current')
if mibBuilder.loadTexts: cewredTxTable.setDescription('This table contains the mapping entries that associate WRED configuration with an egress interface. This table is used for creating or modifying or retrieving transmit side WRED information.')
cewredTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cewredTxEntry.setStatus('current')
if mibBuilder.loadTexts: cewredTxEntry.setDescription('Entries used for providing transmit side WRED information. If this entry got deleted, the corresponding cewredConfigGlobIndex (identified by cewredTxValue) associated entry in cewredConfigGlobTable is also deleted. If a entry corresponding to the value of cewredTxValue does not exist in the cewredConfigGlobTable, the value of cewredTxValue can be (re)used as an index to create a new entry in the cewredConfigGlobTable for building association between this mapping table and the cewredConfigGlobTable.')
cewredTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 1, 1, 1, 1), CewredIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredTxValue.setStatus('current')
if mibBuilder.loadTexts: cewredTxValue.setDescription('This object specifies the value of cewredConfigGlobIndex which associates the WRED configuration with ifIndex associated egress interface. This value can not be modified when cewredTxRowStatus is active(1). The value of this object must not be same as the values of the following objects: cewredRxIfValue, cewredRxValue, cewredRxMulticastValue. ')
cewredTxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredTxRowStatus.setStatus('current')
if mibBuilder.loadTexts: cewredTxRowStatus.setDescription('The status of this conceptual row. This object is used for creating, modifying and deleting entries in the cewredTxTable.')
cewredRxIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 1), )
if mibBuilder.loadTexts: cewredRxIfTable.setStatus('current')
if mibBuilder.loadTexts: cewredRxIfTable.setDescription('This table contains the mapping entries that associate WRED configuration with a source module and destination interface combination.')
cewredRxIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cewredRxIfEntry.setStatus('current')
if mibBuilder.loadTexts: cewredRxIfEntry.setDescription('Entries containing the mapping that associate the receive side WRED configuration to the physical entity of type PhysicalClass module(9) which supports WRED with per interface queueing on the receive side. If this entry got deleted, the corresponding cewredConfigGlobIndex (identified by cewredRxIfValue) associated entry in cewredConfigGlobTable is also deleted. If a entry corresponding to the value of cewredRxIfValue does not exist in the cewredConfigGlobTable, the value of cewredRxIfValue can be (re)used as an index to create a new entry in the cewredConfigGlobTable for building association between this mapping table and the cewredConfigGlobTable.')
cewredRxIfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 1, 1, 1), CewredIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredRxIfValue.setStatus('current')
if mibBuilder.loadTexts: cewredRxIfValue.setDescription("This object specifies the value of cewredConfigGlobIndex which associates the WRED configuration with the source module (identified by entPhysicalIndex) and destination interface (identified by the ifIndex) combination.This value can't be modified when cewredRxRowStatus is active(1). The value of this object must not be same as the values of the following objects: cewredTxValue, cewredRxValue, cewredRxMulticastValue. ")
cewredRxIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredRxIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cewredRxIfRowStatus.setDescription('The status of this conceptual row. This object is used for creating, modifying and deleting entries in the cewredRxIfTable.')
cewredRxTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 2), )
if mibBuilder.loadTexts: cewredRxTable.setStatus('current')
if mibBuilder.loadTexts: cewredRxTable.setDescription('This table contains the mapping entries that associate WRED configuration with a source module and destination module combination.')
cewredRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ENHANCED-WRED-MIB", "cewredRxSourceId"), (0, "CISCO-ENHANCED-WRED-MIB", "cewredRxDestId"))
if mibBuilder.loadTexts: cewredRxEntry.setStatus('current')
if mibBuilder.loadTexts: cewredRxEntry.setDescription('Entries containing the mapping that associate the receive side WRED configuration to the physical entity of type PhysicalClass module(9) which supports WRED with per module queueing on the receive side. If this entry got deleted, the corresponding cewredConfigGlobIndex (identified by cewredRxValue) associated entry in cewredConfigGlobTable is also deleted. If a entry corresponding to the value of cewredRxValue does not exist in the cewredConfigGlobTable, the value of cewredRxValue can be (re)used as an index to create a new entry in the cewredConfigGlobTable for building association between this mapping table and the cewredConfigGlobTable.')
cewredRxSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 2, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: cewredRxSourceId.setStatus('current')
if mibBuilder.loadTexts: cewredRxSourceId.setDescription('The entPhysicalIndex of the source module, supporting per module queueing on receive side to which WRED configuration was attached.')
cewredRxDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 2, 1, 2), PhysicalIndex())
if mibBuilder.loadTexts: cewredRxDestId.setStatus('current')
if mibBuilder.loadTexts: cewredRxDestId.setDescription('On the receive side, WRED configuration is applied on the traffic going from a source module to a destination module. This object represents the entPhysicalIndex of the destination module where source module is being represented by cewredRxSourceId.')
cewredRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 2, 1, 3), CewredIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredRxValue.setStatus('current')
if mibBuilder.loadTexts: cewredRxValue.setDescription("This object specifies the value which can be used by cewredConfigGlobIndex object, which associates WRED configuration with the source module (identified by cewredRxSourceId) and destination module (identified by cewredRxDestId) combination. This value can't be modified when cewredRxRowStatus is active(1). The value of this object must not be same as the values of the following objects: cewredTxValue, cewredRxIfValue, cewredRxMulticastValue. ")
cewredRxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredRxRowStatus.setStatus('current')
if mibBuilder.loadTexts: cewredRxRowStatus.setDescription('The status of this conceptual row. This object is used for creating, modifying and deleting entries in the cewredRxTable.')
cewredRxMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 3), )
if mibBuilder.loadTexts: cewredRxMulticastTable.setStatus('current')
if mibBuilder.loadTexts: cewredRxMulticastTable.setDescription('This table contains the mapping entries that associate WRED configuration on the multicast traffic of a module on the receive side.')
cewredRxMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cewredRxMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: cewredRxMulticastEntry.setDescription('Entries used to provide WRED information for the physical entities of type PhysicalClass module(9) that support WRED on multicast traffic on the receive side. If this entry got deleted, the corresponding cewredConfigGlobIndex (identified by cewredRxMulticastValue) associated entry in cewredConfigGlobTable is also deleted. If a entry corresponding to the value of cewredRxMulticastValue does not exist in the cewredConfigGlobTable, the value of cewredRxMulticastValue can be (re)used as an index to create a new entry in the cewredConfigGlobTable for building association between this mapping table and the cewredConfigGlobTable.')
cewredRxMulticastValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 3, 1, 1), CewredIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredRxMulticastValue.setStatus('current')
if mibBuilder.loadTexts: cewredRxMulticastValue.setDescription("This object specifies the value which can be used by cewredConfigGlobIndex object, which associates WRED configuration on the multicast traffic of the source module (identified by entPhysicalIndex) on the receive side. This value can't be modified when cewredRxMulticastRowStatus is active(1). The value of this object must not be same as the values of the following objects: cewredTxValue, cewredRxIfValue, cewredRxValue. ")
cewredRxMulticastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredRxMulticastRowStatus.setStatus('current')
if mibBuilder.loadTexts: cewredRxMulticastRowStatus.setDescription('The status of this conceptual row. This object is used for creating, modifying and deleting entries in the cewredRxMulticastTable.')
cewredConfigGlobTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1), )
if mibBuilder.loadTexts: cewredConfigGlobTable.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobTable.setDescription('A table of WRED global configuration variables.')
cewredConfigGlobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobIndex"))
if mibBuilder.loadTexts: cewredConfigGlobEntry.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobEntry.setDescription('A collection of configuration entries. On the transmit side of a module an Entry of this table is created/deleted when the interface is associated/disassociated respectively with random early detection. On the receive side, an entry of this table is created or deleted when the entries representing cewredConfigGlobIndex is associated/disassociated respectively with random early detection. An entry in this table created only when the corresponding entry providing the value for cewredConfigGlobIndex is created in one of the following mapping tables: cewredTxTable, cewredRxIfTable, cewredRxTable, cewredRxMulticastTable. Deletion of this entry will not cause the deletion of the corresponding entry (entry providing cewredConfigGlobIndex) in the mapping tables.')
cewredConfigGlobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1, 1, 1), CewredIndex())
if mibBuilder.loadTexts: cewredConfigGlobIndex.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobIndex.setDescription('Index into the cewredConfigGlobTable. For the managed systems which support WRED configuration on both transmit side and receive side, this index will be obtained by one of the following mapping table entries: cewredTxTable, cewredRxIfTable, cewredRxTable, cewredRxMulticastTable. This index will be obtained through cewredTxValue object in case of WRED applied on an interface on the transmit side. If WRED is applied on the receive side, this index will be obtained through cewredRxIfvalue if the module supports per module/interface queueing on the receive side, otherwise this index will be obtained through to cewredRxValue. For multicast on the receive side, this index will be obtained through cewredRxMulticastValue. For the managed systems, which only support interface level WRED configuration, this value can be equal to the ifIndex associated with the interface.')
cewredConfigGlobCosGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigGlobCosGroupName.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobCosGroupName.setDescription('The name of the class of service queue group under which all WRED parameters are configured. For the managed systems, which do not support class of service queue groups, this value will be a zero length string.')
cewredConfigGlobQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigGlobQueueWeight.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobQueueWeight.setDescription("The decay factor for the queue average calculation. Numbers are 2's exponent up to 16. The smaller the number, the faster it decays.")
cewredConfigGlobDscpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1, 1, 4), CewredRedMechanism()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigGlobDscpPrec.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobDscpPrec.setDescription("The classification mechanism used by WRED - precedence or DSCP-based. This entry can't be modified if there exists corresponding entry with different RED mechanism in the following cewredConfigRedTable. For example for a given cewredConfigGlobIndex, if there exists precedence based configuration in the cewredConfigRedTable, this value can't be changed to dscp(2).")
cewredConfigGlobRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigGlobRowStatus.setStatus('current')
if mibBuilder.loadTexts: cewredConfigGlobRowStatus.setDescription('The status of this conceptual row. This object is used for creating, modifying and deleting entries in the cewredConfigGlobTable. This value can be set to active(1) only if the corresponding row in one of the following mapping tables is having a row status value active(1): cewredTxTable, cewredRxIfTable, cewredRxTable, cewredRxMulticastTable.')
cewredConfigRedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2), )
if mibBuilder.loadTexts: cewredConfigRedTable.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedTable.setDescription('A table of WRED configuration values with respect to the IP precedence or DSCP value of packets.')
cewredConfigRedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobIndex"), (0, "CISCO-ENHANCED-WRED-MIB", "cewredConfigRedValue"))
if mibBuilder.loadTexts: cewredConfigRedEntry.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedEntry.setDescription('WRED IP precedence/DSCP configuration table entry. If the WRED configuration is per interface based, an entry of this table is created/deleted when a combination of interface and cewredConfigRedValue is associated/disassociated respectively with random early detection. On the receive side, an entry of this table is created or deleted when a combination of entries representing cewredConfigGlobIndex and cewredConfigRedValue is associated/disassociated respectively with random early detection.')
cewredConfigRedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cewredConfigRedValue.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedValue.setDescription('The IP precedence or DSCP value of this entry.')
cewredConfigRedQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 2), CewredQueueNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigRedQueueNumber.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedQueueNumber.setDescription('The queue number of the distributed round robin queue associated with this RedValue. For each queue there are RED parameters associated with it depending upon its precedence or DSCP value. For the managed systems which do not support multiple distributed round robin queues, this number will be 1.')
cewredConfigRedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 3), CewredRedProfile()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigRedProfile.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedProfile.setDescription('The value of the WRED profile associated with the cewredConfigRedValue. This object value will be equal to the WRED profile value for the managed systems that support a mapping of many precedences or DSCP values to a WRED profile, otherwise this object value will be same as the precedence or DSCP value associated with this entry.')
cewredConfigRedMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 4), Unsigned32()).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigRedMinThreshold.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedMinThreshold.setDescription('The average queue depth at which WRED begins to drop packets. Below this value no packets will be dropped.')
cewredConfigRedMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 5), Unsigned32()).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigRedMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedMaxThreshold.setDescription('The average queue depth at which WRED may begin to drop all packets. Above this value all the packets will be dropped')
cewredConfigRedPktsDropFract = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigRedPktsDropFract.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedPktsDropFract.setDescription('The fraction of packets to be dropped when the average queue depth is at cewredConfigRedMaxThreshold. The mark probability denominator maps to this object. For example if this value is 500, then one out of every 500 packets is to be dropped when the average queue length is at the maximum threshold.')
cewredConfigRedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cewredConfigRedRowStatus.setStatus('current')
if mibBuilder.loadTexts: cewredConfigRedRowStatus.setDescription('The status of this conceptual row. This object is used for creating, modifying and deleting entries in the cewredConfigRedTable. This value can be set to active(1) only if the corresponding row in one of the following mapping tables is having a row status value active(1): cewredTxTable, cewredRxIfTable, cewredRxTable, cewredRxMulticastTable.')
cewredQueueParamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1), )
if mibBuilder.loadTexts: cewredQueueParamTable.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamTable.setDescription('A table of WRED queue parameters.')
cewredQueueParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobIndex"), (0, "CISCO-ENHANCED-WRED-MIB", "cewredQueueParamNumber"))
if mibBuilder.loadTexts: cewredQueueParamEntry.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamEntry.setDescription('An entry in the table of WRED queue parameters. Entries represent the queue parameters of the distributed round robin queues.')
cewredQueueParamNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1, 1), CewredQueueNumber())
if mibBuilder.loadTexts: cewredQueueParamNumber.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamNumber.setDescription('The queue number associated with this entry. There can be multiple distributed round robin queues exists on the transmit side as well as on the receive side of the managed system. For each queue there are WRED parameters associated with it depend upon its precedence or DSCP value. For the managed systems which do not support multiple distributed round robin queues this number will be 1.')
cewredQueueParamWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cewredQueueParamWeight.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamWeight.setDescription('The weight of this queue. The weights give a relative bandwidth for each queue when there is congestion. The distributed round robin algorithm dequeues data from each queue for processing depending upon its weight.')
cewredQueueParamAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1, 3), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredQueueParamAverage.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamAverage.setDescription('The computed queue average length. This value is based on the Exponential weighting factor (cewredConfigGlobQueueWeight), the old average length of the queue and current queue size.')
cewredQueueParamMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1, 4), Gauge32()).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cewredQueueParamMaxAverage.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamMaxAverage.setDescription('Historically maximum value of cewredQueueParamAverage. Write is required only to clear this object, i.e, this object can only be set to zero.')
cewredQueueParamDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1, 5), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredQueueParamDepth.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamDepth.setDescription('The number of packets currently withheld in the queue and awaiting transmission.')
cewredQueueParamMaxDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 4, 1, 1, 6), Gauge32()).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cewredQueueParamMaxDepth.setStatus('current')
if mibBuilder.loadTexts: cewredQueueParamMaxDepth.setDescription('Historically maximum value of cewredQueueParamDepth. Write is required only to clear this object, i.e, this object can only be set to zero.')
cewredStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1), )
if mibBuilder.loadTexts: cewredStatTable.setStatus('current')
if mibBuilder.loadTexts: cewredStatTable.setDescription('A table of WRED status information with respect to the IP precedence or DSCP value of packets.')
cewredStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobIndex"), (0, "CISCO-ENHANCED-WRED-MIB", "cewredStatRedProfile"))
if mibBuilder.loadTexts: cewredStatEntry.setStatus('current')
if mibBuilder.loadTexts: cewredStatEntry.setDescription('The WRED status information entry.')
cewredStatRedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 1), CewredRedProfile())
if mibBuilder.loadTexts: cewredStatRedProfile.setStatus('current')
if mibBuilder.loadTexts: cewredStatRedProfile.setDescription('The value of the WRED profile associated with the entry. This value will be equal to the WRED profile value for the managed systems that support a mapping of many precedences or DSCP values to a WRED profile, otherwise this object value will be same as the precedence or DSCP value.')
cewredStatSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredStatSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: cewredStatSwitchedPkts.setDescription('The number of packets output by WRED.')
cewredStatRandomFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredStatRandomFilteredPkts.setStatus('current')
if mibBuilder.loadTexts: cewredStatRandomFilteredPkts.setDescription('The number of packets filtered/dropped when average queue length exceeds cewredRedConfigMinThreshold and less than cewredConfigRedMaxThreshold and meet a defined random drop policy pointed by the WRED config tables.')
cewredStatMaxFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredStatMaxFilteredPkts.setStatus('current')
if mibBuilder.loadTexts: cewredStatMaxFilteredPkts.setDescription('The number of packets filtered/dropped when average queue length exceeds cewredConfigRedMaxThreshold.')
cewredStatSwitchedPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredStatSwitchedPkts64.setStatus('current')
if mibBuilder.loadTexts: cewredStatSwitchedPkts64.setDescription('The number of packets output by WRED. This object is a 64-bit version of cewredStatSwitchedPkts.')
cewredStatRandomFilteredPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredStatRandomFilteredPkts64.setStatus('current')
if mibBuilder.loadTexts: cewredStatRandomFilteredPkts64.setDescription('The number of packets filtered/dropped when average queue length exceeds cewredRedConfigMinThreshold and less than cewredConfigRedMaxThreshold and meet a defined random drop policy pointed by the WRED config tables. This object is a 64-bit version of cewredStatRandomFilteredPkts.')
cewredStatMaxFilteredPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 222, 1, 5, 1, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cewredStatMaxFilteredPkts64.setStatus('current')
if mibBuilder.loadTexts: cewredStatMaxFilteredPkts64.setDescription('The number of packets filtered/dropped when average queue length exceeds cewredConfigRedMaxThreshold. This object is a 64-bit version of cewredStatMaxFilteredPkts.')
cewredMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 0))
cewredMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 3))
cewredMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 1))
cewredMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2))
cewredMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 1, 1)).setObjects(("CISCO-ENHANCED-WRED-MIB", "ciscoEnhancedWredGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cewredMIBCompliance = cewredMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cewredMIBCompliance.setDescription('The compliance statement for entities which implement WRED.')
ciscoEnhancedWredGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 1)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobQueueWeight"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobDscpPrec"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobRowStatus"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigRedMinThreshold"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigRedMaxThreshold"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigRedPktsDropFract"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigRedRowStatus"), ("CISCO-ENHANCED-WRED-MIB", "cewredQueueParamAverage"), ("CISCO-ENHANCED-WRED-MIB", "cewredStatRandomFilteredPkts"), ("CISCO-ENHANCED-WRED-MIB", "cewredStatMaxFilteredPkts"), ("CISCO-ENHANCED-WRED-MIB", "cewredStatRandomFilteredPkts64"), ("CISCO-ENHANCED-WRED-MIB", "cewredStatMaxFilteredPkts64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredGroup = ciscoEnhancedWredGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredGroup.setDescription('A collection of objects providing WRED monitoring feature.')
ciscoEnhancedWredDrrQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 2)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredConfigRedQueueNumber"), ("CISCO-ENHANCED-WRED-MIB", "cewredQueueParamWeight"), ("CISCO-ENHANCED-WRED-MIB", "cewredQueueParamMaxAverage"), ("CISCO-ENHANCED-WRED-MIB", "cewredQueueParamDepth"), ("CISCO-ENHANCED-WRED-MIB", "cewredQueueParamMaxDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredDrrQueueGroup = ciscoEnhancedWredDrrQueueGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredDrrQueueGroup.setDescription('A collection of objects providing distributed round robin queue parameters.')
ciscoEnhancedWredStatCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 3)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredStatSwitchedPkts"), ("CISCO-ENHANCED-WRED-MIB", "cewredStatSwitchedPkts64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredStatCountGroup = ciscoEnhancedWredStatCountGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredStatCountGroup.setDescription('A collection of objects providing random early detection/drop statistics.')
ciscoEnhancedWredCosQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 4)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredConfigGlobCosGroupName"), ("CISCO-ENHANCED-WRED-MIB", "cewredConfigRedProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredCosQueueGroup = ciscoEnhancedWredCosQueueGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredCosQueueGroup.setDescription('A collection of objects providing class of service information.')
ciscoEnhancedWredTxInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 5)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredTxValue"), ("CISCO-ENHANCED-WRED-MIB", "cewredTxRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredTxInfoGroup = ciscoEnhancedWredTxInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredTxInfoGroup.setDescription('A collection of objects providing transmit side WRED information.')
ciscoEnhancedWredRxIfInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 6)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredRxIfValue"), ("CISCO-ENHANCED-WRED-MIB", "cewredRxIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredRxIfInfoGroup = ciscoEnhancedWredRxIfInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredRxIfInfoGroup.setDescription('A collection of objects providing receive side WRED information, with the modules supporting per interface queueing.')
ciscoEnhancedWredRxInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 7)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredRxValue"), ("CISCO-ENHANCED-WRED-MIB", "cewredRxRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredRxInfoGroup = ciscoEnhancedWredRxInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredRxInfoGroup.setDescription('A collection of objects providing receive side WRED information, with the modules supporting per module queueing.')
ciscoEnhancedWredRxMcInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 222, 3, 2, 8)).setObjects(("CISCO-ENHANCED-WRED-MIB", "cewredRxMulticastValue"), ("CISCO-ENHANCED-WRED-MIB", "cewredRxMulticastRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedWredRxMcInfoGroup = ciscoEnhancedWredRxMcInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedWredRxMcInfoGroup.setDescription('A collection of objects providing receive side WRED information, with the modules supporting multicast queueing.')
mibBuilder.exportSymbols("CISCO-ENHANCED-WRED-MIB", cewredStatRandomFilteredPkts64=cewredStatRandomFilteredPkts64, cewredMIBConformance=cewredMIBConformance, cewredQueueParamNumber=cewredQueueParamNumber, ciscoEnhancedWredRxIfInfoGroup=ciscoEnhancedWredRxIfInfoGroup, cewredRxDestId=cewredRxDestId, ciscoEnhancedWredMIBObjects=ciscoEnhancedWredMIBObjects, cewredRxMulticastTable=cewredRxMulticastTable, cewredConfigGlobEntry=cewredConfigGlobEntry, cewredStatEntry=cewredStatEntry, cewredConfigGlobQueueWeight=cewredConfigGlobQueueWeight, cewredTxEntry=cewredTxEntry, cewredConfigRedMaxThreshold=cewredConfigRedMaxThreshold, cewredMIBCompliances=cewredMIBCompliances, cewredConfigRedPktsDropFract=cewredConfigRedPktsDropFract, cewredRxValue=cewredRxValue, cewredRxIfRowStatus=cewredRxIfRowStatus, cewredRxMulticastRowStatus=cewredRxMulticastRowStatus, cewredQueueParamDepth=cewredQueueParamDepth, ciscoEnhancedWredTxInfoGroup=ciscoEnhancedWredTxInfoGroup, cewredStatMaxFilteredPkts64=cewredStatMaxFilteredPkts64, cewredStat=cewredStat, ciscoEnhancedWredGroup=ciscoEnhancedWredGroup, cewredConfigGlobIndex=cewredConfigGlobIndex, cewredQueueParamWeight=cewredQueueParamWeight, cewredQueueParamEntry=cewredQueueParamEntry, cewredRxIfEntry=cewredRxIfEntry, cewredTxTable=cewredTxTable, cewredConfigRedRowStatus=cewredConfigRedRowStatus, cewredMIBCompliance=cewredMIBCompliance, cewredConfigGlobCosGroupName=cewredConfigGlobCosGroupName, ciscoEnhancedWredDrrQueueGroup=ciscoEnhancedWredDrrQueueGroup, ciscoEnhancedWredStatCountGroup=ciscoEnhancedWredStatCountGroup, cewredStatSwitchedPkts64=cewredStatSwitchedPkts64, CewredQueueNumber=CewredQueueNumber, cewredStatMaxFilteredPkts=cewredStatMaxFilteredPkts, cewredRxIfTable=cewredRxIfTable, cewredConfigRedEntry=cewredConfigRedEntry, cewredMIBGroups=cewredMIBGroups, ciscoEnhancedWredRxMcInfoGroup=ciscoEnhancedWredRxMcInfoGroup, ciscoEnhancedWredRxInfoGroup=ciscoEnhancedWredRxInfoGroup, cewredRxRowStatus=cewredRxRowStatus, cewredRxMulticastValue=cewredRxMulticastValue, cewredQueueParamTable=cewredQueueParamTable, cewredRxEntry=cewredRxEntry, cewredQueueParamMaxDepth=cewredQueueParamMaxDepth, cewredStatRedProfile=cewredStatRedProfile, cewredConfigRedProfile=cewredConfigRedProfile, cewredConfigRedTable=cewredConfigRedTable, cewredTxRowStatus=cewredTxRowStatus, cewredRxSourceId=cewredRxSourceId, PYSNMP_MODULE_ID=ciscoEnhancedWredMIB, CewredRedMechanism=CewredRedMechanism, CewredRedProfile=CewredRedProfile, cewredConfigRedValue=cewredConfigRedValue, cewredRxMulticastEntry=cewredRxMulticastEntry, cewredQueue=cewredQueue, cewredConfigGlobDscpPrec=cewredConfigGlobDscpPrec, cewredConfigRedQueueNumber=cewredConfigRedQueueNumber, cewredTxValue=cewredTxValue, cewredRxTable=cewredRxTable, cewredConfigGlobRowStatus=cewredConfigGlobRowStatus, cewredQueueParamAverage=cewredQueueParamAverage, cewredQueueParamMaxAverage=cewredQueueParamMaxAverage, cewredStatRandomFilteredPkts=cewredStatRandomFilteredPkts, CewredIndex=CewredIndex, cewredMIBNotifications=cewredMIBNotifications, cewredRx=cewredRx, cewredConfigGlobTable=cewredConfigGlobTable, cewredConfigRedMinThreshold=cewredConfigRedMinThreshold, cewredStatTable=cewredStatTable, cewredStatSwitchedPkts=cewredStatSwitchedPkts, ciscoEnhancedWredCosQueueGroup=ciscoEnhancedWredCosQueueGroup, ciscoEnhancedWredMIB=ciscoEnhancedWredMIB, cewredConfig=cewredConfig, cewredTx=cewredTx, cewredRxIfValue=cewredRxIfValue)
