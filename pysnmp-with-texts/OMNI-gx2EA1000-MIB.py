#
# PySNMP MIB module OMNI-gx2EA1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2EA1000-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
gx2Ea1000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Ea1000")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapIdentifier, trapNetworkElemOperState, trapChangedValueDisplayString, trapChangedObjectId, trapText, trapPerceivedSeverity, trapNetworkElemSerialNum, trapNETrapLastTrapTimeStamp, trapNetworkElemAvailStatus, trapChangedValueInteger, trapNetworkElemModelNumber, trapNetworkElemAdminState, trapNetworkElemAlarmStatus = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapIdentifier", "trapNetworkElemOperState", "trapChangedValueDisplayString", "trapChangedObjectId", "trapText", "trapPerceivedSeverity", "trapNetworkElemSerialNum", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAvailStatus", "trapChangedValueInteger", "trapNetworkElemModelNumber", "trapNetworkElemAdminState", "trapNetworkElemAlarmStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
Integer32, MibIdentifier, NotificationType, NotificationType, ModuleIdentity, ObjectIdentity, Counter64, IpAddress, Gauge32, TimeTicks, Counter32, Unsigned32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "NotificationType", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Counter64", "IpAddress", "Gauge32", "TimeTicks", "Counter32", "Unsigned32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2ea1000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 1))
gx2ea1000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2), )
if mibBuilder.loadTexts: gx2ea1000AnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000AnalogTable.setDescription('This table contains gx2Ea1000 specific parameters with nominal and current values.')
gx2ea1000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2ea1000AnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000AnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2ea1000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3), )
if mibBuilder.loadTexts: gx2ea1000DigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000DigitalTable.setDescription('This table contains gx2Ea1000 specific parameters with nominal and current values.')
gx2ea1000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2ea1000DigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000DigitalEntry.setDescription('This list contains digital parameters and descriptions.')
gx2ea1000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4), )
if mibBuilder.loadTexts: gx2ea1000StatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000StatusTable.setDescription('This table contains gx2Ea1000 specific parameters with nominal and current values.')
gx2ea1000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000StatusTableIndex"))
if mibBuilder.loadTexts: gx2ea1000StatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000StatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2ea1000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5), )
if mibBuilder.loadTexts: gx2ea1000FactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000FactoryTable.setDescription('This table contains gx2Ea1000 specific parameters with nominal and current values.')
gx2ea1000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2ea1000FactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000FactoryEntry.setDescription('This list contains Factory parameters and descriptions.')
gx2ea1000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000AnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000AnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ea1000labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOffsetNomMonitor.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelOffsetNomMonitor.setDescription('The value of this object provides the label of the Offset Monitor Analog parameter.')
ea1000uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomOffsetNomMonitor.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomOffsetNomMonitor.setDescription('The value of this object provides the Unit of Measure of the Offset Monitor Analog parameter.')
ea1000majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHighOffsetNomMonitor.setDescription('The value of this object provides the Major High alarm value of the Offset Monitor Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowOffsetNomMonitor.setDescription('The value of this object provides the Major Low alarm value of the Offset Monitor Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorHighOffsetNomMonitor.setDescription('The value of this object provides the Minor High alarm value of the Offset Monitor Analog parameter. This value is a float and is represented as an IEEE 32 bit number.')
ea1000minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorLowOffsetNomMonitor.setDescription('The value of this object provides the Minor Low alarm value of the Offset Monitor Analog parameter. This value is a float and is represented as an IEEE 32 bit number.')
ea1000currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueOffsetNomMonitor.setDescription('The value of this object provides the Current value of the Offset Monitor Analog parameter. This value is a float and is represented as an IEEE 32 bit number.')
ea1000stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagOffsetNomMonitor.setDescription('The value of this object provides the state of the Offset Monitor Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable)')
ea1000minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueOffsetNomMonitor.setDescription('The value of this object provides the minimum value the Offset Monitor Analog parameter can achive. This value is a float and is represented as an IEEE 32 bit number.')
ea1000maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueOffsetNomMonitor.setDescription('The value of this object provides the maximum value the Offset Monitor Analog parameter can achive. This value is a float and is represented as an IEEE 32 bit number.')
ea1000alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateOffsetNomMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateOffsetNomMonitor.setDescription('The value of this object provides the curent alarm state of the Offset Monitor Analog parameter.')
ea1000labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelOffsetNomCnt.setDescription('The value of this object provides the label of the Offset Control Analog parameter.')
ea1000uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomOffsetNomCnt.setDescription('The value of this object provides the label of the Offset Control Analog parameter.')
ea1000majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: ea1000majorHighOffsetNomCnt.setDescription('The value of this object provides the Major High alarm value of the Offset Control Analog parameter. This value is a float and is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: ea1000majorLowOffsetNomCnt.setDescription('The value of this object provides the Major Low alarm value of the Offset Control Analog parameter. This value is a float and is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorHighOffsetNomCnt.setDescription('The value of this object provides the Minor High alarm value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowOffsetNomCnt.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorLowOffsetNomCnt.setDescription('The value of this object provides the Minor Low alarm value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000currentValueOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueOffsetNomCnt.setDescription('The value of this object provides the Current value of the Offset Control Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagOffsetNomCnt.setDescription('The value of this object provides the state of the Offset Control Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable)')
ea1000minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueOffsetNomCnt.setDescription('The value of this object provides the minimum value the Offset Control Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueOffsetNomCnt.setDescription('The value of this object provides the maximum value the Offset Control Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateOffsetNomCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateOffsetNomCnt.setDescription('The value of this object provides the curent alarm state of the Offset Control Analog parameter.')
ea1000labelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOptPower.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelOptPower.setDescription('The value of this object provides the label of the Optical Power Analog parameter.')
ea1000uomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomOptPower.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomOptPower.setDescription('The value of this object provides the Unit of Measure of the Optical Power Analog parameter.')
ea1000majorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHighOptPower.setDescription('The value of this object provides the Major High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowOptPower.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighOptPower.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorHighOptPower.setDescription('The value of this object provides the Minor High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowOptPower.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorLowOptPower.setDescription('The value of this object provides the Minor Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000currentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueOptPower.setDescription('The value of this object provides the Current value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagOptPower.setDescription('The value of this object provides the state of the Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueOptPower.setDescription('The value of this object provides the minimum value the Optical Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueOptPower.setDescription('The value of this object provides the maximum value the Optical Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateOptPower.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateOptPower.setDescription('The value of this object provides the curent alarm state of the Optical Power Analog parameter.')
ea1000labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserTemp.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelLaserTemp.setDescription('The value of this object provides the label of the Laser Temperature Analog parameter.')
ea1000uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomLaserTemp.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomLaserTemp.setDescription('The value of this object provides the Unit of Measure of the Laser Temperature Analog parameter.')
ea1000majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHighLaserTemp.setDescription('The value of this object provides the Major High alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowLaserTemp.setDescription('The value of this object provides the Major Low alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorHighLaserTemp.setDescription('The value of this object provides the Minor High alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorLowLaserTemp.setDescription('The value of this object provides the Minor Low alarm value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueLaserTemp.setDescription('The value of this object provides the Current value of the Laser Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagLaserTemp.setDescription('The value of this object provides the state of the Laser Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueLaserTemp.setDescription('The value of this object provides the minimum value the Laser Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueLaserTemp.setDescription('The value of this object provides the maximum value the Laser Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateLaserTemp.setDescription('The value of this object provides the curent alarm state of the Laser Temperature Analog parameter.')
ea1000labelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserBias.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelLaserBias.setDescription('The value of this object provides the label of the Laser Bias Current Analog parameter.')
ea1000uomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomLaserBias.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomLaserBias.setDescription('The value of this object provides the Unit of Measure of the Laser Bias Analog parameter.')
ea1000majorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHighLaserBias.setDescription('The value of this object provides the Major High alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowLaserBias.setDescription('The value of this object provides the Major Low alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighLaserBias.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorHighLaserBias.setDescription('The value of this object provides the Minor High alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowLaserBias.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorLowLaserBias.setDescription('The value of this object provides the Minor Low alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000currentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueLaserBias.setDescription('The value of this object provides the Current value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagLaserBias.setDescription('The value of this object provides the state of the Laser Bias Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueLaserBias.setDescription('The value of this object provides the minimum value the Laser Bias Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueLaserBias.setDescription('The value of this object provides the maximum value the Laser Bias Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateLaserBias.setDescription('The value of this object provides the curent alarm state of the Laser Bias Analog parameter.')
ea1000labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelTecCurrent.setDescription('The value of this object provides the label of the TEC Current Analog parameter.')
ea1000uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomTecCurrent.setDescription('The value of this object provides the Unit of Measure of the TEC Current Analog parameter..')
ea1000majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHighTecCurrent.setDescription('The value of this object provides the Major High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowTecCurrent.setDescription('The value of this object provides the Major Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorHighTecCurrent.setDescription('The value of this object provides the Minor High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorLowTecCurrent.setDescription('The value of this object provides the Minor Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueTecCurrent.setDescription('The value of this object provides the Current value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagTecCurrent.setDescription('The value of this object provides the state of the TEC Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueTecCurrent.setDescription('The value of this object provides the minimum value the TEC Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueTecCurrent.setDescription('The value of this object provides the maximum value the TEC Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateTecCurrent.setDescription('The value of this object provides the curent alarm state of the TEC Current Analog parameter.')
ea1000labelModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelModuleTemp.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelModuleTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
ea1000uomModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomModuleTemp.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomModuleTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
ea1000majorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHighModuleTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowModuleTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorHighModuleTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorLowModuleTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000currentValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueModuleTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagModuleTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueModuleTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueModuleTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateModuleTemp.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateModuleTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
ea1000labelFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFan1Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelFan1Speed.setDescription('The value of this object provides the label of the Fan 1 Speed Analog parameter.')
ea1000uomFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomFan1Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomFan1Speed.setDescription('The value of this object provides the Unit of Measure of the Fan 1 Speed Analog parameter.')
ea1000majorHighFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighFan1Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000majorHighFan1Speed.setDescription('The value of this object provides the Major High alarm value of the Fan 1 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000majorLowFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowFan1Speed.setDescription('The value of this object provides the Major Low alarm value of the Fan 1 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighFan1Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorHighFan1Speed.setDescription('The value of this object provides the Minor High alarm value of the Fan 1 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorLowFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorLowFan1Speed.setDescription('The value of this object provides the Minor Low alarm value of the Fan 1 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000currentValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueFan1Speed.setDescription('The value of this object provides the Current value of the Fan 1 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagFan1Speed.setDescription('The value of this object provides the state of the Fan 1 Speed Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueFan1Speed.setDescription('The value of this object provides the minimum value the Fan 1 Speed Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueFan1Speed.setDescription('The value of this object provides the maximum value the Fan 1 Speed Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateFan1Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateFan1Speed.setDescription('The value of this object provides the curent alarm state of the Fan 1 Speed Analog parameter.')
ea1000labelFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFan2Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelFan2Speed.setDescription('The value of this object provides the label of the Fan 2 Speed Analog parameter.')
ea1000uomFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomFan2Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000uomFan2Speed.setDescription('The value of this object provides the Unit of Measure of the Fan 2 Speed Analog parameter.')
ea1000majorHighFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighFan2Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000majorHighFan2Speed.setDescription('The value of this object provides the Major High alarm value of the Fan 2 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000majorLowFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLowFan2Speed.setDescription('The value of this object provides the Major Low alarm value of the Fan 2 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHighFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighFan2Speed.setStatus('optional')
if mibBuilder.loadTexts: ea1000minorHighFan2Speed.setDescription('The value of this object provides the Minor High alarm value of the Fan 2 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number. In this version of the Firmware and MIB this Parameter is not used and is optional. All reads will return the Unused Parameter (10,000,000)')
ea1000minorLowFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorLowFan2Speed.setDescription('The value of this object provides the Minor Low alarm value of the Fan 2 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000currentValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValueFan2Speed.setDescription('The value of this object provides the Current value of the Fan 2 Speed Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlagFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlagFan2Speed.setDescription('The value of this object provides the state of the Fan 2 Speed Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValueFan2Speed.setDescription('The value of this object provides the minimum value the Fan 2 Speed Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValueFan2Speed.setDescription('The value of this object provides the maximum value the Fan 2 Speed Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmStateFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateFan2Speed.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmStateFan2Speed.setDescription('The value of this object provides the curent alarm state of the Fan 2 Speed Analog parameter.')
ea1000label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000label12Volt.setStatus('optional')
if mibBuilder.loadTexts: ea1000label12Volt.setDescription('The value of this object provides the label of the 12v Current Analog parameter.')
ea1000uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uom12Volt.setStatus('optional')
if mibBuilder.loadTexts: ea1000uom12Volt.setDescription('The value of this object provides the Unit of Measure of the 12v Current Analog parameter.')
ea1000majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorHigh12Volt.setDescription('The value of this object provides the Major High alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000majorLow12Volt.setDescription('The value of this object provides the Major Low alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorHigh12Volt.setDescription('The value of this object provides the Minor High alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minorLow12Volt.setDescription('The value of this object provides the Minor Low alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000currentValue12Volt.setDescription('The value of this object provides the Current value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlag12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateFlag12Volt.setDescription('The value of this object provides the state of the 12v Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000minValue12Volt.setDescription('The value of this object provides the minimum value the 12v Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000maxValue12Volt.setDescription('The value of this object provides the maximum value the 12v Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
ea1000alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmState12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000alarmState12Volt.setDescription('The value of this object provides the curent alarm state of the 12v Current Analog parameter.')
gx2ea1000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000DigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000DigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ea1000labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelRfInput.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelRfInput.setDescription('The value of this object provides the label of the RF Input Control Digital parameter.')
ea1000enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumRfInput.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumRfInput.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
ea1000valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueRfInput.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueRfInput.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagRfInput.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagRfInput.setDescription('The value of this object provides the state of the RF Input Control Digital parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOptOutput.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelOptOutput.setDescription('The value of this object provides the label of the Optical Output Control Digital parameter.')
ea1000enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumOptOutput.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumOptOutput.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
ea1000valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueOptOutput.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueOptOutput.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagOptOutput.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagOptOutput.setDescription('The value of this object provides the ea1000state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserMode.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelLaserMode.setDescription('The value of this object provides the label of the Laser Mode Digital parameter.')
ea1000enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumLaserMode.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumLaserMode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
ea1000valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueLaserMode.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueLaserMode.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagLaserMode.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagLaserMode.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelAttenSetting.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelAttenSetting.setDescription('The value of this object provides the label of the Attenuation Setting Ditital Parameter.')
ea1000enumAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumAttenSetting.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumAttenSetting.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
ea1000valueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("attn0pt0", 1), ("attn0pt5", 2), ("attn1pt0", 3), ("attn1pt5", 4), ("attn2pt0", 5), ("attn2pt5", 6), ("attn3pt0", 7), ("attn3pt5", 8), ("attn4pt0", 9), ("attn4pt5", 10), ("attn5pt0", 11), ("attn5pt5", 12), ("attn6pt0", 13), ("attn6pt5", 14), ("attn7pt0", 15), ("attn7pt5", 16), ("attn8pt0", 17), ("attn8pt5", 18), ("attn9pt0", 19), ("attn9pt5", 20), ("attn10pt0", 21), ("attn10pt5", 22), ("attn11pt0", 23), ("attn11pt5", 24), ("attn12pt0", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueAttenSetting.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagAttenSetting.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagAttenSetting.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserSecMode.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelLaserSecMode.setDescription('The value of this object provides the label of the Laser Secondary Mode Digital parameter.')
ea1000enumLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumLaserSecMode.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumLaserSecMode.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
ea1000valueLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw", 1), ("video", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueLaserSecMode.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueLaserSecMode.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagLaserSecMode.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagLaserSecMode.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelVideoOffset.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelVideoOffset.setDescription('The value of this object provides the label of the Video Offset Digital parameter.')
ea1000enumVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumVideoOffset.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumVideoOffset.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1..')
ea1000valueVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("minus1dB", 1), ("minus2dB", 2), ("minus3dB", 3), ("minus4dB", 4), ("minus5dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueVideoOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueVideoOffset.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagVideoOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagVideoOffset.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelFactoryDefault.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
ea1000enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: ea1000enumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
ea1000valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueFactoryDefault.setDescription('The value of this object is the current value of the parameter.')
ea1000stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2ea1000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000StatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000StatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ea1000labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelBoot.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
ea1000valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
ea1000stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFlash.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
ea1000valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
ea1000stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
ea1000valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
ea1000stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserDataCRC.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelLaserDataCRC.setDescription('The value of this object provides the label of the Laser Data CRC Status parameter.')
ea1000valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueLaserDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueLaserDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
ea1000stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagLaserDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagLaserDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
ea1000valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueAlarmDataCrc.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
ea1000stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagAlarmDataCrc.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
ea1000labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelRFInputStatus.setStatus('optional')
if mibBuilder.loadTexts: ea1000labelRFInputStatus.setDescription('The value of this object provides the label of the RF Input Status parameter.')
ea1000valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueRFInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000valueRFInputStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
ea1000stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagRFInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000stateflagRFInputStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2ea1000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000FactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2ea1000FactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
ea1000bootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bootControlByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000bootControlByteValue.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
ea1000bootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bootStatusByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000bootStatusByteValue.setDescription('This object indicates the status of the last boot')
ea1000bank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bank1CRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000bank1CRCValue.setDescription('This object provides the CRC code of bank 0.')
ea1000bank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bank2CRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000bank2CRCValue.setDescription('This object provides the CRC code of bank 1.')
ea1000prgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000prgEEPROMByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000prgEEPROMByteValue.setDescription('This object indicates if the EEPROM has been programmed')
ea1000factoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000factoryCRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000factoryCRCValue.setDescription('This object provides the CRC code for the Factory data.')
ea1000calculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("laserData", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000calculateCRCValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000calculateCRCValue.setDescription('This object indicates which of the Emnums will have the CRC calculated.')
ea1000hourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000hourMeterValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000hourMeterValue.setDescription('This object provides the hour meter reading of the module.')
ea1000flashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashPrgCntAValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000flashPrgCntAValue.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
ea1000flashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashPrgCntBValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000flashPrgCntBValue.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
ea1000flashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashBankARevValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000flashBankARevValue.setDescription('This object provides the revision of flash bank 0.')
ea1000flashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashBankBRevValue.setStatus('mandatory')
if mibBuilder.loadTexts: ea1000flashBankBRevValue.setDescription('This object provides the revision of flash bank 1.')
trapEA1000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000ConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapEA1000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000ConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapEA1000RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000RFInputAlarm.setDescription('This trap is issued when the Laser Modules RF input parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000RFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000RFOverloadAlarm.setDescription('This trap is issued when the Laser Modules RF overload parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000RFOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000RFOffsetAlarm.setDescription('This trap is issued when the Laser Modules RF Offset parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000OpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000OpticalPowerAlarm.setDescription('This trap is issued when the Laser Modules Optical Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000LaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000LaserBiasAlarm.setDescription('This trap is issued when the Laser Bias parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000LaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000LaserTempAlarm.setDescription('This trap is issued when the Laser Temperature parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000TECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000TECCurrentAlarm.setDescription('This trap is issued when the Laser Modules TEC Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000Fan1SpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000Fan1SpeedAlarm.setDescription('This trap is issued when the Laser Modules Fan 1 Speed parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000Fan2SpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000Fan2SpeedAlarm.setDescription('This trap is issued when the Laser Modules Fan 2 Speed parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA100012vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA100012vAlarm.setDescription('This trap is issued when the Laser Modules 12 Volt parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapEA1000ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000ModuleTempAlarm.setDescription('This trap is issued when the Laser Module Temperature goes out of range.')
trapEA1000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000FlashAlarm.setDescription('This trap is issued when the Laser Modules detects an error during Flash memory operations.')
trapEA1000LaserBiasCntLoopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000LaserBiasCntLoopAlarm.setDescription('This trap is issued when the Laser Modules detects an error in its Laser Bias control loop operation.')
trapEA1000BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000BankBootAlarm.setDescription('This trap is issued when the Laser Modules detects an error while booting from bank 0 or bank 1.')
trapEA1000LaserBiasCntLoopInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000LaserBiasCntLoopInitAlarm.setDescription('This trap is issued when the Laser Bias Control loop init fails.')
trapEA1000RFParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000RFParamInitAlarm.setDescription('This trap is issued when the RF parameter Init fails.')
trapEA1000TECParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000TECParamInitAlarm.setDescription('This trap is issued when the TEC Parameter Init fails.')
trapEA1000AttnTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000AttnTableInitAlarm.setDescription('This trap is issued when the Attenuator Table Init fails.')
trapEA1000PowerMeterTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000PowerMeterTableInitAlarm.setDescription('This trap is issued when the Power Meter Table Init fails.')
trapEA1000LaserDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000LaserDataCRCAlarm.setDescription('This trap is issued when the Laser Data CRC is incorrect.')
trapEA1000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000AlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapEA1000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000FactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
trapEA1000UserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000UserRFOffAlarm.setDescription('This trap is issued when the the User RF is turned off.')
trapEA1000UserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000UserOpticalOffAlarm.setDescription('This trap is issued when the User Optical Power is turned off.')
trapEA1000ResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapEA1000ResetFactoryDefaultAlarm.setDescription('This trap is issued when the Factory Default Reset occurs.')
mibBuilder.exportSymbols("OMNI-gx2EA1000-MIB", gx2ea1000DigitalTableIndex=gx2ea1000DigitalTableIndex, gx2ea1000FactoryEntry=gx2ea1000FactoryEntry, ea1000minorLow12Volt=ea1000minorLow12Volt, ea1000stateFlagTecCurrent=ea1000stateFlagTecCurrent, ea1000valueLaserDataCRC=ea1000valueLaserDataCRC, trapEA1000LaserBiasAlarm=trapEA1000LaserBiasAlarm, trapEA1000PowerMeterTableInitAlarm=trapEA1000PowerMeterTableInitAlarm, gx2ea1000FactoryTable=gx2ea1000FactoryTable, ea1000alarmStateTecCurrent=ea1000alarmStateTecCurrent, ea1000labelLaserMode=ea1000labelLaserMode, ea1000minorHighOptPower=ea1000minorHighOptPower, ea1000minValueTecCurrent=ea1000minValueTecCurrent, ea1000stateflagAttenSetting=ea1000stateflagAttenSetting, ea1000bootControlByteValue=ea1000bootControlByteValue, ea1000minorLowFan1Speed=ea1000minorLowFan1Speed, ea1000minorHighTecCurrent=ea1000minorHighTecCurrent, ea1000majorHighOffsetNomCnt=ea1000majorHighOffsetNomCnt, ea1000labelLaserTemp=ea1000labelLaserTemp, trapEA1000ConfigChangeDisplayString=trapEA1000ConfigChangeDisplayString, ea1000minorHighLaserTemp=ea1000minorHighLaserTemp, ea1000uomLaserBias=ea1000uomLaserBias, trapEA1000AlarmDataCRCAlarm=trapEA1000AlarmDataCRCAlarm, trapEA1000LaserBiasCntLoopAlarm=trapEA1000LaserBiasCntLoopAlarm, ea1000labelOptPower=ea1000labelOptPower, ea1000majorHighOptPower=ea1000majorHighOptPower, trapEA1000ConfigChangeInteger=trapEA1000ConfigChangeInteger, ea1000maxValueLaserTemp=ea1000maxValueLaserTemp, ea1000alarmStateOffsetNomMonitor=ea1000alarmStateOffsetNomMonitor, ea1000majorHighTecCurrent=ea1000majorHighTecCurrent, ea1000currentValue12Volt=ea1000currentValue12Volt, ea1000stateFlagLaserTemp=ea1000stateFlagLaserTemp, ea1000alarmStateFan1Speed=ea1000alarmStateFan1Speed, ea1000labelRFInputStatus=ea1000labelRFInputStatus, ea1000maxValueModuleTemp=ea1000maxValueModuleTemp, ea1000majorLowModuleTemp=ea1000majorLowModuleTemp, trapEA1000LaserTempAlarm=trapEA1000LaserTempAlarm, trapEA1000TECCurrentAlarm=trapEA1000TECCurrentAlarm, ea1000alarmState12Volt=ea1000alarmState12Volt, ea1000currentValueFan1Speed=ea1000currentValueFan1Speed, trapEA1000RFOffsetAlarm=trapEA1000RFOffsetAlarm, ea1000minValueFan2Speed=ea1000minValueFan2Speed, ea1000valueBoot=ea1000valueBoot, ea1000majorHighFan1Speed=ea1000majorHighFan1Speed, ea1000labelAttenSetting=ea1000labelAttenSetting, gx2ea1000StatusTable=gx2ea1000StatusTable, ea1000enumLaserSecMode=ea1000enumLaserSecMode, ea1000alarmStateLaserBias=ea1000alarmStateLaserBias, ea1000factoryCRCValue=ea1000factoryCRCValue, ea1000minorLowLaserTemp=ea1000minorLowLaserTemp, ea1000majorHigh12Volt=ea1000majorHigh12Volt, ea1000minorHighFan2Speed=ea1000minorHighFan2Speed, ea1000minValueModuleTemp=ea1000minValueModuleTemp, ea1000uomFan2Speed=ea1000uomFan2Speed, ea1000minValueFan1Speed=ea1000minValueFan1Speed, ea1000alarmStateOffsetNomCnt=ea1000alarmStateOffsetNomCnt, ea1000labelFan1Speed=ea1000labelFan1Speed, ea1000currentValueLaserTemp=ea1000currentValueLaserTemp, ea1000maxValueLaserBias=ea1000maxValueLaserBias, ea1000valueRfInput=ea1000valueRfInput, ea1000labelFlash=ea1000labelFlash, ea1000minorLowOffsetNomMonitor=ea1000minorLowOffsetNomMonitor, ea1000labelAlarmDataCrc=ea1000labelAlarmDataCrc, ea1000stateflagFactoryDefault=ea1000stateflagFactoryDefault, ea1000stateflagVideoOffset=ea1000stateflagVideoOffset, gx2ea1000Descriptor=gx2ea1000Descriptor, ea1000valueFactoryDataCRC=ea1000valueFactoryDataCRC, ea1000minorLowTecCurrent=ea1000minorLowTecCurrent, ea1000stateflagAlarmDataCrc=ea1000stateflagAlarmDataCrc, ea1000alarmStateLaserTemp=ea1000alarmStateLaserTemp, ea1000maxValueFan1Speed=ea1000maxValueFan1Speed, ea1000maxValueOffsetNomMonitor=ea1000maxValueOffsetNomMonitor, ea1000currentValueOffsetNomCnt=ea1000currentValueOffsetNomCnt, ea1000stateflagBoot=ea1000stateflagBoot, ea1000stateFlagFan1Speed=ea1000stateFlagFan1Speed, ea1000stateFlagFan2Speed=ea1000stateFlagFan2Speed, ea1000majorLowOffsetNomMonitor=ea1000majorLowOffsetNomMonitor, ea1000valueFactoryDefault=ea1000valueFactoryDefault, ea1000valueFlash=ea1000valueFlash, ea1000uomOptPower=ea1000uomOptPower, ea1000minorHighLaserBias=ea1000minorHighLaserBias, ea1000minorHighFan1Speed=ea1000minorHighFan1Speed, ea1000minorLowOptPower=ea1000minorLowOptPower, ea1000labelTecCurrent=ea1000labelTecCurrent, gx2ea1000FactoryTableIndex=gx2ea1000FactoryTableIndex, ea1000uomModuleTemp=ea1000uomModuleTemp, trapEA1000OpticalPowerAlarm=trapEA1000OpticalPowerAlarm, ea1000alarmStateModuleTemp=ea1000alarmStateModuleTemp, ea1000labelVideoOffset=ea1000labelVideoOffset, gx2ea1000StatusTableIndex=gx2ea1000StatusTableIndex, ea1000stateflagOptOutput=ea1000stateflagOptOutput, ea1000bank1CRCValue=ea1000bank1CRCValue, ea1000currentValueLaserBias=ea1000currentValueLaserBias, ea1000stateflagLaserMode=ea1000stateflagLaserMode, ea1000valueAlarmDataCrc=ea1000valueAlarmDataCrc, ea1000uomTecCurrent=ea1000uomTecCurrent, ea1000labelFan2Speed=ea1000labelFan2Speed, ea1000labelFactoryDefault=ea1000labelFactoryDefault, ea1000enumFactoryDefault=ea1000enumFactoryDefault, ea1000majorLowFan2Speed=ea1000majorLowFan2Speed, ea1000stateflagLaserDataCRC=ea1000stateflagLaserDataCRC, ea1000maxValueTecCurrent=ea1000maxValueTecCurrent, trapEA1000UserOpticalOffAlarm=trapEA1000UserOpticalOffAlarm, ea1000uomFan1Speed=ea1000uomFan1Speed, ea1000majorLowOffsetNomCnt=ea1000majorLowOffsetNomCnt, trapEA1000BankBootAlarm=trapEA1000BankBootAlarm, ea1000currentValueFan2Speed=ea1000currentValueFan2Speed, ea1000minorHighModuleTemp=ea1000minorHighModuleTemp, ea1000majorHighLaserTemp=ea1000majorHighLaserTemp, ea1000minValueOffsetNomMonitor=ea1000minValueOffsetNomMonitor, ea1000minValue12Volt=ea1000minValue12Volt, ea1000hourMeterValue=ea1000hourMeterValue, ea1000valueLaserSecMode=ea1000valueLaserSecMode, ea1000minorHighOffsetNomMonitor=ea1000minorHighOffsetNomMonitor, ea1000majorHighModuleTemp=ea1000majorHighModuleTemp, ea1000bootStatusByteValue=ea1000bootStatusByteValue, trapEA1000RFParamInitAlarm=trapEA1000RFParamInitAlarm, trapEA1000UserRFOffAlarm=trapEA1000UserRFOffAlarm, ea1000stateflagRFInputStatus=ea1000stateflagRFInputStatus, ea1000labelLaserSecMode=ea1000labelLaserSecMode, ea1000valueRFInputStatus=ea1000valueRFInputStatus, gx2ea1000AnalogTable=gx2ea1000AnalogTable, ea1000valueAttenSetting=ea1000valueAttenSetting, ea1000labelFactoryDataCRC=ea1000labelFactoryDataCRC, ea1000labelOffsetNomMonitor=ea1000labelOffsetNomMonitor, ea1000currentValueTecCurrent=ea1000currentValueTecCurrent, ea1000minorHigh12Volt=ea1000minorHigh12Volt, ea1000minorHighOffsetNomCnt=ea1000minorHighOffsetNomCnt, ea1000prgEEPROMByteValue=ea1000prgEEPROMByteValue, ea1000bank2CRCValue=ea1000bank2CRCValue, trapEA1000FlashAlarm=trapEA1000FlashAlarm, ea1000minValueOptPower=ea1000minValueOptPower, ea1000flashPrgCntAValue=ea1000flashPrgCntAValue, ea1000labelModuleTemp=ea1000labelModuleTemp, ea1000labelLaserBias=ea1000labelLaserBias, ea1000majorLowOptPower=ea1000majorLowOptPower, ea1000minorLowFan2Speed=ea1000minorLowFan2Speed, trapEA100012vAlarm=trapEA100012vAlarm, ea1000minorLowLaserBias=ea1000minorLowLaserBias, ea1000enumOptOutput=ea1000enumOptOutput, trapEA1000LaserDataCRCAlarm=trapEA1000LaserDataCRCAlarm, trapEA1000TECParamInitAlarm=trapEA1000TECParamInitAlarm, ea1000currentValueOptPower=ea1000currentValueOptPower, ea1000label12Volt=ea1000label12Volt, ea1000enumRfInput=ea1000enumRfInput, trapEA1000ModuleTempAlarm=trapEA1000ModuleTempAlarm, ea1000enumLaserMode=ea1000enumLaserMode, ea1000flashBankARevValue=ea1000flashBankARevValue, ea1000stateFlag12Volt=ea1000stateFlag12Volt, trapEA1000LaserBiasCntLoopInitAlarm=trapEA1000LaserBiasCntLoopInitAlarm, ea1000labelOptOutput=ea1000labelOptOutput, trapEA1000RFInputAlarm=trapEA1000RFInputAlarm, ea1000stateFlagModuleTemp=ea1000stateFlagModuleTemp, gx2ea1000StatusEntry=gx2ea1000StatusEntry, ea1000minValueLaserBias=ea1000minValueLaserBias, ea1000majorHighLaserBias=ea1000majorHighLaserBias, ea1000maxValue12Volt=ea1000maxValue12Volt, ea1000majorLowLaserBias=ea1000majorLowLaserBias, trapEA1000ResetFactoryDefaultAlarm=trapEA1000ResetFactoryDefaultAlarm, trapEA1000Fan1SpeedAlarm=trapEA1000Fan1SpeedAlarm, ea1000uomLaserTemp=ea1000uomLaserTemp, ea1000stateflagRfInput=ea1000stateflagRfInput, gx2ea1000DigitalEntry=gx2ea1000DigitalEntry, ea1000minValueOffsetNomCnt=ea1000minValueOffsetNomCnt, ea1000maxValueOptPower=ea1000maxValueOptPower, ea1000labelOffsetNomCnt=ea1000labelOffsetNomCnt, ea1000maxValueFan2Speed=ea1000maxValueFan2Speed, gx2ea1000AnalogTableIndex=gx2ea1000AnalogTableIndex, trapEA1000FactoryDataCRCAlarm=trapEA1000FactoryDataCRCAlarm, ea1000stateflagFactoryDataCRC=ea1000stateflagFactoryDataCRC, ea1000maxValueOffsetNomCnt=ea1000maxValueOffsetNomCnt, ea1000valueOptOutput=ea1000valueOptOutput, ea1000stateflagLaserSecMode=ea1000stateflagLaserSecMode, ea1000labelLaserDataCRC=ea1000labelLaserDataCRC, trapEA1000AttnTableInitAlarm=trapEA1000AttnTableInitAlarm, ea1000enumVideoOffset=ea1000enumVideoOffset, ea1000currentValueOffsetNomMonitor=ea1000currentValueOffsetNomMonitor, ea1000minValueLaserTemp=ea1000minValueLaserTemp, ea1000labelBoot=ea1000labelBoot, trapEA1000RFOverloadAlarm=trapEA1000RFOverloadAlarm, ea1000stateFlagOffsetNomMonitor=ea1000stateFlagOffsetNomMonitor, ea1000alarmStateOptPower=ea1000alarmStateOptPower, ea1000majorLowTecCurrent=ea1000majorLowTecCurrent, ea1000majorLowFan1Speed=ea1000majorLowFan1Speed, ea1000labelRfInput=ea1000labelRfInput, ea1000majorLow12Volt=ea1000majorLow12Volt, ea1000calculateCRCValue=ea1000calculateCRCValue, ea1000uomOffsetNomCnt=ea1000uomOffsetNomCnt, ea1000valueLaserMode=ea1000valueLaserMode, gx2ea1000AnalogEntry=gx2ea1000AnalogEntry, gx2ea1000DigitalTable=gx2ea1000DigitalTable, ea1000flashBankBRevValue=ea1000flashBankBRevValue, Float=Float, ea1000alarmStateFan2Speed=ea1000alarmStateFan2Speed, ea1000majorHighOffsetNomMonitor=ea1000majorHighOffsetNomMonitor, ea1000enumAttenSetting=ea1000enumAttenSetting, ea1000valueVideoOffset=ea1000valueVideoOffset, ea1000stateFlagOptPower=ea1000stateFlagOptPower, ea1000majorLowLaserTemp=ea1000majorLowLaserTemp, ea1000currentValueModuleTemp=ea1000currentValueModuleTemp, ea1000stateFlagLaserBias=ea1000stateFlagLaserBias, ea1000stateFlagOffsetNomCnt=ea1000stateFlagOffsetNomCnt, trapEA1000Fan2SpeedAlarm=trapEA1000Fan2SpeedAlarm, ea1000uom12Volt=ea1000uom12Volt, ea1000minorLowModuleTemp=ea1000minorLowModuleTemp, ea1000flashPrgCntBValue=ea1000flashPrgCntBValue, ea1000stateflagFlash=ea1000stateflagFlash, ea1000majorHighFan2Speed=ea1000majorHighFan2Speed, ea1000minorLowOffsetNomCnt=ea1000minorLowOffsetNomCnt, ea1000uomOffsetNomMonitor=ea1000uomOffsetNomMonitor)
