#
# PySNMP MIB module TIMETRA-CFLOWD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-CFLOWD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Bits, TimeTicks, Counter64, MibIdentifier, Counter32, iso, NotificationType, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "Counter64", "MibIdentifier", "Counter32", "iso", "NotificationType", "ModuleIdentity", "IpAddress")
RowStatus, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "DisplayString", "TextualConvention")
tmnxSRConfs, tmnxSRNotifyPrefix, tmnxSRObjs, timetraSRMIBModules = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "tmnxSRNotifyPrefix", "tmnxSRObjs", "timetraSRMIBModules")
TmnxOperState, TmnxEnabledDisabled, TmnxStatus, TItemDescription, TmnxAdminState = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxOperState", "TmnxEnabledDisabled", "TmnxStatus", "TItemDescription", "TmnxAdminState")
timetraCflowdMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 19))
timetraCflowdMIBModule.setRevisions(('1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1901-11-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraCflowdMIBModule.setRevisionsDescriptions(('Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-CFLOWD-MIB.', 'Rev 2.0 15 Jan 2004 00:00 2.0 release of the TIMETRA-CFLOWD-MIB.', 'Rev 1.2 15 Aug 2003 00:00 1.2 release of the TIMETRA-CFLOWD-MIB.', 'Rev 1.0 20 Jan 2003 00:00 1.0 Release of the TIMETRA-CFLOWD-MIB.', 'Rev 0.1 15 Jan 2003 00:00 Initial version of the TIMETRA-CFLOWD-MIB.',))
if mibBuilder.loadTexts: timetraCflowdMIBModule.setLastUpdated('0501240000Z')
if mibBuilder.loadTexts: timetraCflowdMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraCflowdMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com ')
if mibBuilder.loadTexts: timetraCflowdMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Alcatel Cflowd traffic flow analysis utility. Copyright 2003-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxCflowdObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19))
tmnxCflowdGeneralObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1))
tmnxCflowdNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 2))
tmnxCflowdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19))
tmnxCflowdNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19))
tmnxCflowdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0))
class TmnxCflowdAggScheme(TextualConvention, Bits):
    description = "The value of TmnxCflowdAggScheme is a bit mask which specifies the aggregation scheme(s) used to aggregate multiple individual flows into an aggregated flow for export to a remote host collector. If no aggregation scheme is specified, {}, no data will be exported to a remote collector host. If the 'raw (5)' scheme is specified, flow data is exported without aggregation in version 5 format. All other aggregation types use version 8 format to export the flow data to this remote host collector."
    status = 'current'
    namedValues = NamedValues(("asMatrix", 0), ("protocolPort", 1), ("sourcePrefix", 2), ("destinationPrefix", 3), ("sourceDestinationPrefix", 4), ("raw", 5))

class TmnxCflowdTemplateSet(TextualConvention, Integer32):
    description = 'The value of TmnxCflowdTemplateSet specifies the set of templates sent to the collector when using cflowd version 9 or 10. The recognized template-sets are: notApplicable (0) -- No cflowd packets will be sent to the collector basic (1) -- Basic flow data is sent. mplsIp (2) -- Extended flow data is sent that includes IP and MPLS information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("basic", 1), ("mplsIp", 2))

tmnxCflowdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 1), TmnxStatus().clone('delete')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdStatus.setDescription("The desired state for Cflowd on this virtual router. An attempt to set tmnxCflowdStatus to 'delete' will fail if the Cflowd protocol is not in the administrative outOfService state, i.e. tmnxCflowdAdminStatus must first be set to 'outOfService'.")
tmnxCflowdActiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdActiveTimeout.setDescription('The value of tmnxCflowdActiveTimeout specifies the maximum amount of time, in minutes, before an active flow will be exported. If an individual flow is active for this amount of time, the flow is exported and a new flow is created.')
tmnxCflowdInactiveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdInactiveTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdInactiveTimeout.setDescription('The value of tmnxCflowdInactiveTimeout specifies the amount of time, in seconds, that must elapse without a packet matching a flow before the flow is considered inactive.')
tmnxCflowdCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 250000)).clone(65536)).setUnits('flows').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdCacheSize.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdCacheSize.setDescription('The value of tmnxCflowdCacheSize specifies the maximum number of active flows to be maintained in the flow cache table.')
tmnxCflowdSampleRate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1000)).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdSampleRate.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdSampleRate.setDescription("The value of tmnxCflowdSampleRate specifies the rate at which traffic is sampled and forwarded for Cflowd analysis. A value of one (1) causes all packets to be analyzed. The default value '1000' causes every 1000th packet to be analyzed.")
tmnxCflowdOverflow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdOverflow.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdOverflow.setDescription('The value of tmnxCflowdOverflow specifies the percentage number of flows to be flushed when the flow cache size has been exceeded.')
tmnxCflowdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 7), TmnxAdminState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAdminStatus.setDescription('The value of tmnxCflowdAdminStatus indicates the desired administrative state for the Cflowd data analysis.')
tmnxCflowdOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 8), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdOperStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdOperStatus.setDescription('The value of tmnxCflowdOperStatus indicates the current operational status of the Cflowd data analysis.')
tmnxCflowdActiveFlows = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdActiveFlows.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdActiveFlows.setDescription('The value of tmnxCflowdActiveFlows is a gauge that indicates the current number of active flows being collected.')
tmnxCflowdAggregation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 10), TmnxCflowdAggScheme()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregation.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregation.setDescription("The value of tmnxCflowdAggregation is a bit mask which specifies the aggregation scheme(s) currently used to aggregate multiple individual flows into an aggregated flow for export to one or more remote host collectors configured in the tmnxCFHostTable. If no aggregation scheme is specified, {}, no data will be exported. If the 'raw (5)' scheme is specified, flow data is exported without aggregation in version 5 format. All other aggregation types use version 8 format to export the flow data to the remote host collector.")
tmnxCFHostTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostTableLastChanged.setDescription('timestamp of last change to tmnxCFHostTable.')
tmnxCflowdMaxCollectors = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdMaxCollectors.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdMaxCollectors.setDescription('The value of tmnxCflowdMaxCollectors specifies the maximum number of row entries that can be created in the tmnxCFHostTable.')
tmnxCflowdTotalPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTotalPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTotalPktsRcvd.setDescription('The value of tmnxCflowdTotalPktsRcvd indicates the total number of packets received for Cflowd.')
tmnxCflowdTotalPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTotalPktsDropped.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTotalPktsDropped.setDescription('The value of tmnxCflowdTotalPktsDropped indicates the total number of packets dropped for Cflowd.')
tmnxCflowdTemplateRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxCflowdTemplateRetransmit.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateRetransmit.setDescription('The value of tmnxCflowdTemplateRetransmit specifies the period of time, in seconds, for a template to be retransmitted.')
tmnxCflowdGeneralStatisticsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16))
tmnxCflowdGenRawFlowsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsCreated.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsCreated.setDescription('The value of tmnxCflowdGenRawFlowsCreated indicates the number of raw flows created by system.')
tmnxCflowdGenAggrFlowsCreated = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsCreated.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsCreated.setDescription('The value of tmnxCflowdGenAggrFlowsCreated indicates the number of aggregate flows created by system.')
tmnxCflowdGenRawFlowsMatched = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsMatched.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsMatched.setDescription('The value of tmnxCflowdGenRawFlowsMatched indicates the number of raw patckets matched to an existing raw flow.')
tmnxCflowdGenAggrFlowsMatched = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsMatched.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsMatched.setDescription('The value of tmnxCflowdGenAggrFlowsMatched indicates the number of packets matched to an existing aggregate flow.')
tmnxCflowdGenRawFlowsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsFlushed.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenRawFlowsFlushed.setDescription('The value of tmnxCflowdGenRawFlowsFlushed indicates the number of raw flows flushed.')
tmnxCflowdGenAggrFlowsFlushed = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsFlushed.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenAggrFlowsFlushed.setDescription('The value of tmnxCflowdGenAggrFlowsMatched indicates the number of aggregate flows flushed.')
tmnxCflowdGenOverflowEvents = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenOverflowEvents.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenOverflowEvents.setDescription('The value of tmnxCflowdGenOverflowEvents indicates the number of times the flow cache has entered the overflow state.')
tmnxCflowdGenDroppedFlows = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 1, 16, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdGenDroppedFlows.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGenDroppedFlows.setDescription('The value of tmnxCflowdGenDroppedFlows indicates the number of times a flow was dropped. Data from dropped flows are not reported to any collector.')
tmnxCFHostTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3), )
if mibBuilder.loadTexts: tmnxCFHostTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostTable.setDescription('A table of all Cflowd remote collector host definitions.')
tmnxCFHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"))
if mibBuilder.loadTexts: tmnxCFHostEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostEntry.setDescription("Information about a particular Cflowd remote collector host entry. Entries in the tmnxCFHostTable are created and destroyed via SNMP Set requests to tmnxCFHostRowStatus. There is no StorageType object, entries have a presumed StorageType of 'nonVolatile'. ")
tmnxCFHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: tmnxCFHostAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostAddress.setDescription('The value of tmnxCFHostAddress specifies the IP address of a remote Cflowd collector host to receive the exported Cflowd data.')
tmnxCFHostUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2055))
if mibBuilder.loadTexts: tmnxCFHostUdpPort.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostUdpPort.setDescription('The value of tmnxCFHostUdpPort specifies the UDP port number on the remote Cflowd collector host to receive the exported Cflowd data.')
tmnxCFHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostRowStatus.setDescription("Row entries in this table are created and destroyed via SNMP set requests. A row cannot be destroyed if the value of tmnxCFHostAdminStatus is not 'outOfService'.")
tmnxCFHostEntryLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostEntryLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostEntryLastChanged.setDescription('The value of tmnxCFHostEntryLastChanged is the sysUpTime when this row entry was last changed.')
tmnxCFHostDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostDescription.setDescription('The value of tmnxCFHostDescription is a user provided description string for this Cflowd remote collector host. It can consist of any printable, seven-bit ASCII characters up to 80 characters in length.')
tmnxCFHostAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 6), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostAdminStatus.setDescription('The value of tmnxCFHostAdminStatus indicates the desired administrative state for this Cflowd remote collector host.')
tmnxCFHostOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 7), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostOperStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostOperStatus.setDescription('The value of tmnxCFHostOperStatus indicates the current operational status of this Cflowd remote collector host.')
tmnxCFHostASType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("origin", 1), ("peer", 2))).clone('origin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostASType.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostASType.setDescription("The value of tmnxCFHostASType specifies which style of AS reporting is used in the exported flow data. An AS type of 'origin' reflects the endpoints of the AS path which the flow is following. An AS type of 'peer' reflects the AS of the previous and next hops for the flow.")
tmnxCFHostAggregation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 9), TmnxCflowdAggScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostAggregation.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostAggregation.setDescription("The value of tmnxCFHostAggregation is a bit mask which specifies the aggregation scheme(s) used to aggregate multiple individual flows into an aggregated flow for export to this remote host collector. If no aggregation scheme is specified, {}, no data will be exported for this remote collector host. If the 'raw (5)' scheme is specified, flow data is exported without aggregation in version 5 format. All other aggregation types use version 8 format to export the flow data to this remote host collector.")
tmnxCFHostRecordsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostRecordsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostRecordsSent.setDescription('The value of tmnxCFHostRecordsSent is the number of Cflowd records that have been transmitted to this remote collector host. This object is only applicable for a remote collector host with tmnxCFHostVersion set to either 5, 8 or 10.')
tmnxCFHostLastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostLastPktSent.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostLastPktSent.setDescription('The value of tmnxCFHostLastPktSent is the sysUpTime when the last Cflowd packet was sent to this remote collector host.')
tmnxCFHostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 5), ValueRangeConstraint(8, 10), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostVersion.setDescription('The value of tmnxCFHostVersion specifies the version of this remote collector host. The following table indicates which objects are either limited, or not supported for a particular version: Version Object Restrictions -------- ----------------------- --------------- 5 tmnxCFHostAggregation not supported tmnxCFHostTemplateSet not supported tmnxCFHostPacketsSent use tmnxCFHostRecordsSent 8 tmnxCFHostTemplateSet not supported tmnxCFHostPacketsSent use tmnxCFHostRecordsSent 9 tmnxCFHostASType not supported tmnxCFHostAggregation not supported tmnxCFHostRecordsSent use tmnxCFHostPacketsSent 10 tmnxCFHostASType not supported tmnxCFHostAggregation not supported tmnxCFHostPacketsSent use tmnxCFHostRecordsSent')
tmnxCFHostTemplateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 13), TmnxCflowdTemplateSet().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCFHostTemplateSet.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostTemplateSet.setDescription("The value of tmnxCFHostTemplateSet specifies the template-set used by this remote collector host. If the tmnxCFHostVersion is not set to the version 9 or 10, the tmnxCFHostTemplateSet is limited to 'notApplicable(0)'. When the tmnxCFHostVersion is set to version 9 or 10 the tmnxCFHostTemplateSet is defaulted to 'basic (1)'.")
tmnxCFHostPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCFHostPacketsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxCFHostPacketsSent.setDescription('The value of tmnxCFHostPacketsSent is the number of Cflowd packets that have been transmitted to this remote collector host. This object is only applicable for a remote collector host with tmnxCFHostVersion set to 9.')
tmnxCflowdVersionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4), )
if mibBuilder.loadTexts: tmnxCflowdVersionStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionStatsTable.setDescription('The tmnxCflowdVersionStatsTable consists of the overall statistics based on collector version.')
tmnxCflowdVersionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionIndex"))
if mibBuilder.loadTexts: tmnxCflowdVersionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionStatsEntry.setDescription('The tmnxCflowdVersionStatsEntry contains the information pertaining to the system wide statistics for the specified version index.')
tmnxCflowdVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(5, 5), ValueRangeConstraint(8, 10), )))
if mibBuilder.loadTexts: tmnxCflowdVersionIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionIndex.setDescription('The value of tmnxCflowdVersionIndex specifies the row in the tmnxCflowdVersionStatsTable that pertains to the cflowd collector version.')
tmnxCflowdVersionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 2), TmnxEnabledDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionStatus.setDescription('The value of tmnxCflowdVersionStatus indicates whether or not the version is in use in the system.')
tmnxCflowdVersionSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionSent.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionSent.setDescription('The value of tmnxCflowdVersionSent indicates the number of packets transmitted for the specified version.')
tmnxCflowdVersionOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionOpen.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionOpen.setDescription('The value of tmnxCflowdVersionOpen indicates the number of open packets pending for the specified version.')
tmnxCflowdVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdVersionErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdVersionErrors.setDescription('The value of tmnxCflowdVersionErrors indicates the number of errored packets for the specified version.')
tmnxCflowdV5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5), )
if mibBuilder.loadTexts: tmnxCflowdV5StatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdV5StatsTable.setDescription('The tmnxCflowdV5StatsTable consists of the version 5 statistics for a particular remote collector host.')
tmnxCflowdV5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"))
if mibBuilder.loadTexts: tmnxCflowdV5StatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdV5StatsEntry.setDescription('The tmnxCflowdV5StatsEntry contains the statistics information pertaining to the specified remote collector host.')
tmnxCflowdV5Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdV5Sent.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdV5Sent.setDescription('The value of tmnxCflowdV5Sent indicates the number of packets transmitted for the specified remote collector host.')
tmnxCflowdV5Open = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdV5Open.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdV5Open.setDescription('The value of tmnxCflowdV5Open indicates the number of open packets pending for the specified remote collector host.')
tmnxCflowdV5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdV5Errors.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdV5Errors.setDescription('The value of tmnxCflowdV5Errors indicates the number of errored packets for the specified remote collector host.')
tmnxCflowdAggregationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6), )
if mibBuilder.loadTexts: tmnxCflowdAggregationStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationStatsTable.setDescription('The tmnxCflowdAggregationStatsTable consists of the overall statistics based on aggregation type.')
tmnxCflowdAggregationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationIndex"))
if mibBuilder.loadTexts: tmnxCflowdAggregationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationStatsEntry.setDescription('The tmnxCflowdAggregationStatsEntry contains the information pertaining to the remote collector host statistics for the specified aggregation index.')
tmnxCflowdAggregationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nonAggregate", 0), ("asMatrix", 1), ("protocolPort", 2), ("sourcePrefix", 3), ("destinationPrefix", 4), ("sourceDestinationPrefix", 5), ("raw", 6))))
if mibBuilder.loadTexts: tmnxCflowdAggregationIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationIndex.setDescription('The value of tmnxCflowdAggregationIndex specifies the row in the tmnxCflowdAggregationStatsTable that pertains to the cflowd collector aggregation type.')
tmnxCflowdAggregationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 2), TmnxEnabledDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationStatus.setDescription('The value of tmnxCflowdAggregationStatus indicates whether or not the aggregation is in use in the remote collector host entry.')
tmnxCflowdAggregationSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationSent.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationSent.setDescription('The value of tmnxCflowdAggregationSent indicates the number of packets transmitted for the specified aggregation type.')
tmnxCflowdAggregationOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationOpen.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationOpen.setDescription('The value of tmnxCflowdAggregationOpen indicates the number of open packets pending for the specified aggregation type.')
tmnxCflowdAggregationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdAggregationErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdAggregationErrors.setDescription('The value of tmnxCflowdAggregationErrors indicates the number of errored packets for the specified aggregation type.')
tmnxCflowdTemplateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7), )
if mibBuilder.loadTexts: tmnxCflowdTemplateStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateStatsTable.setDescription('The tmnxCflowdTemplateStatsTable consists of the overall statistics based on template flows for a specified remote collector host entry.')
tmnxCflowdTemplateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1), ).setIndexNames((0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostAddress"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCFHostUdpPort"), (0, "TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateFlowIndex"))
if mibBuilder.loadTexts: tmnxCflowdTemplateStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateStatsEntry.setDescription('The tmnxCflowdTemplateStatsEntry contains the information pertaining to the remote collector host statistics for the specified template index.')
tmnxCflowdTemplateFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("mpls", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: tmnxCflowdTemplateFlowIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateFlowIndex.setDescription('The value of tmnxCflowdTemplateFlowIndex specifies the row in the tmnxCflowdTemplateStatsTable that pertains to the cflowd collector Template type.')
tmnxCflowdTemplateLastTxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateLastTxTime.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateLastTxTime.setDescription('The value of tmnxCflowdTemplateLastTxTime indicates the time, since system startup, when the specified template was last transmitted.')
tmnxCflowdTemplateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateSent.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateSent.setDescription('The value of tmnxCflowdTemplateSent indicates the number of packets transmitted for the specified Template type.')
tmnxCflowdTemplateOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateOpen.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateOpen.setDescription('The value of tmnxCflowdTemplateOpen indicates the number of open packets pending for the specified Template type.')
tmnxCflowdTemplateErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCflowdTemplateErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdTemplateErrors.setDescription('The value of tmnxCflowdTemplateErrors indicates the number of errored packets for the specified Template type.')
tmnxCflowdFlowFailureReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("tmnxCflowdMemAllocFailure", 0), ("tmnxCflowdRTLookupFailure", 1), ("tmnxCflowdTimerCreateFailure", 2), ("tmnxCflowdUDPSendFailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCflowdFlowFailureReasonCode.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdFlowFailureReasonCode.setDescription('Used by tmnxCflowdFlowCreateFailure and tmnxCflowdFlowFlushFailure to report the failure reason code.')
tmnxCflowdFlowUnsuppIPProtoNum = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 19, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCflowdFlowUnsuppIPProtoNum.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdFlowUnsuppIPProtoNum.setDescription('tmnxCflowdFlowUnsuppIPProtoNum is used to specify the unsupported IP protocol for the tmnxCflowdFlowUnsuppProto event. This object was made obsolete in 7x50 SR Release 8.0.')
tmnxCflowdCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 1))
if mibBuilder.loadTexts: tmnxCflowdCreated.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdCreated.setDescription('The tmnxCflowdCreated event is generated when Cflowd instance is created on the system. This notification was made obsolete in 7x50 SR Release 8.0.')
tmnxCflowdCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 2))
if mibBuilder.loadTexts: tmnxCflowdCreateFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdCreateFailure.setDescription('The tmnxCflowdCreateFailure event is generated when Cflowd instance creation fails on the system.')
tmnxCflowdDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 3))
if mibBuilder.loadTexts: tmnxCflowdDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdDeleted.setDescription('The tmnxCflowdDeleted event is generated when Cflowd instance is removed from the system. This notification was made obsolete in 7x50 SR Release 8.0.')
tmnxCflowdStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 4)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdAdminStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdOperStatus"))
if mibBuilder.loadTexts: tmnxCflowdStateChange.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdStateChange.setDescription('The tmnxCflowdStateChange event is triggered when tmnxCflowdAdminStatus or tmnxCflowdOperStatus reports a change.')
tmnxCflowdCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 5))
if mibBuilder.loadTexts: tmnxCflowdCleared.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdCleared.setDescription('The tmnxCflowdCleared event is triggered when the Cflowd statistics are cleared. This notification was made obsolete in 7x50 SR Release 8.0.')
tmnxCflowdFlowCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 6)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if mibBuilder.loadTexts: tmnxCflowdFlowCreateFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdFlowCreateFailure.setDescription('The tmnxCflowdFlowCreateFailure event is generated when the creation of a Cflowd flow fails.')
tmnxCflowdFlowFlushFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 7)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if mibBuilder.loadTexts: tmnxCflowdFlowFlushFailure.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdFlowFlushFailure.setDescription('The tmnxCflowdFlowFlushFailure event is generated when the flushing of a Cflowd flow fails. This notification was made obsolete in 7x50 SR Release 8.0. It was replaced by tmnxCflowdPacketTxFailure.')
tmnxCflowdFlowUnsuppProto = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 8)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppIPProtoNum"))
if mibBuilder.loadTexts: tmnxCflowdFlowUnsuppProto.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdFlowUnsuppProto.setDescription('The tmnxCflowdFlowUnsuppProto event is generated in case of an unsupported IP protocol. This notification was made obsolete in 7x50 SR Release 8.0.')
tmnxCflowdPacketTxFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 19, 0, 9)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCFHostVersion"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if mibBuilder.loadTexts: tmnxCflowdPacketTxFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdPacketTxFailure.setDescription('The tmnxCflowdPacketTxFailure event is generated when a cflowd packet fails to transmit from an active collector host.')
tmnxCflowdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1))
tmnxCflowdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2))
tmnxCflowdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 1)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdCompliance = tmnxCflowdCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdCompliance.setDescription('The compliance statement for revision 2.0 of TIMETRA-CFLOWD-MIB.')
tmnxCflowdComplianceV6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 2)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroupV6v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdComplianceV6v0 = tmnxCflowdComplianceV6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdComplianceV6v0.setDescription('The compliance statement of TIMETRA-CFLOWD-MIB for release 6.0.')
tmnxCflowdComplianceV8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 3)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroupV6v0"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationV8v0Group"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGroupV8v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdComplianceV8v0 = tmnxCflowdComplianceV8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdComplianceV8v0.setDescription('The compliance statement of TIMETRA-CFLOWD-MIB for release 8.0.')
tmnxCflowdComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 1, 4)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGlobalGroupV6v0"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdHostGroup"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdNotificationV8v0Group"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGroupV8v0"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdStatisticsV10v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdComplianceV10v0 = tmnxCflowdComplianceV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdComplianceV10v0.setDescription('The compliance statement of TIMETRA-CFLOWD-MIB for release 10.0.')
tmnxCflowdGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 1)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdActiveTimeout"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdInactiveTimeout"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdCacheSize"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdSampleRate"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdOverflow"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAdminStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdOperStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdActiveFlows"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregation"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdMaxCollectors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdGlobalGroup = tmnxCflowdGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGlobalGroup.setDescription('The group of objects supporting management of Cflowd general capabilities on Alcatel 7x50 SR series systems.')
tmnxCflowdHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 2)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCFHostTableLastChanged"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostRowStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostEntryLastChanged"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostDescription"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostAdminStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostOperStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostASType"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostAggregation"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostRecordsSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostLastPktSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdHostGroup = tmnxCflowdHostGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdHostGroup.setDescription('The group of objects supporting management of Cflowd hosts on Alcatel 7x50 SR series systems.')
tmnxCflowdNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 3)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppIPProtoNum"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotifyObjsGroup = tmnxCflowdNotifyObjsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdNotifyObjsGroup.setDescription('The group of objects supporting Cflowd notifications on Alcatel 7x50 SR series systems.')
tmnxCflowdNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 4)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdCreated"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdDeleted"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdStateChange"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdCleared"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFlushFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotificationGroup = tmnxCflowdNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxCflowdNotificationGroup.setDescription('The group of notifications supporting the Cflowd feature on Alcatel 7x50 SR series systems.')
tmnxCflowdGlobalGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 5)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdTotalPktsRcvd"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTotalPktsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdGlobalGroupV6v0 = tmnxCflowdGlobalGroupV6v0.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGlobalGroupV6v0.setDescription('The group of objects supporting management of Cflowd general capabilities on Alcatel 7xx0 SR series systems for release 6.0.')
tmnxCflowdObsoleteV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 6)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowUnsuppIPProtoNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdObsoleteV8v0Group = tmnxCflowdObsoleteV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdObsoleteV8v0Group.setDescription('The group of objects that were made obsolete On Alcatel 7xx0 SR series systems for release 8.0.')
tmnxCflowdGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 7)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateRetransmit"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateLastTxTime"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostVersion"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostTemplateSet"), ("TIMETRA-CFLOWD-MIB", "tmnxCFHostPacketsSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionOpen"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdVersionErrors"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdV5Sent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdV5Open"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdV5Errors"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationStatus"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationOpen"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdAggregationErrors"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateSent"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateOpen"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdTemplateErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdGroupV8v0 = tmnxCflowdGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdGroupV8v0.setDescription('The group of objects added in release 8.0 to support management of Cflowd capabilities on Alcatel 7xx0 SR series systems.')
tmnxCflowdNotifyObjsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 8)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowFailureReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotifyObjsV8v0Group = tmnxCflowdNotifyObjsV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdNotifyObjsV8v0Group.setDescription('The group of objects supporting Cflowd notifications on Alcatel 7x50 SR series systems.')
tmnxCflowdNotificationV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 9)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdStateChange"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdFlowCreateFailure"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdPacketTxFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdNotificationV8v0Group = tmnxCflowdNotificationV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdNotificationV8v0Group.setDescription('The group of notifications supporting the Cflowd feature on Alcatel 7x50 SR series systems.')
tmnxCflowdStatisticsV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 19, 2, 10)).setObjects(("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenRawFlowsCreated"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenAggrFlowsCreated"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenRawFlowsMatched"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenAggrFlowsMatched"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenRawFlowsFlushed"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenAggrFlowsFlushed"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenOverflowEvents"), ("TIMETRA-CFLOWD-MIB", "tmnxCflowdGenDroppedFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCflowdStatisticsV10v0Group = tmnxCflowdStatisticsV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxCflowdStatisticsV10v0Group.setDescription('The group of objects enhancing Cflowd statistics on Alcatel 7x50 SR series systems in release 10.0.')
mibBuilder.exportSymbols("TIMETRA-CFLOWD-MIB", tmnxCflowdGroupV8v0=tmnxCflowdGroupV8v0, tmnxCflowdVersionStatsTable=tmnxCflowdVersionStatsTable, tmnxCFHostASType=tmnxCFHostASType, tmnxCflowdGenDroppedFlows=tmnxCflowdGenDroppedFlows, tmnxCFHostLastPktSent=tmnxCFHostLastPktSent, tmnxCflowdSampleRate=tmnxCflowdSampleRate, tmnxCFHostDescription=tmnxCFHostDescription, tmnxCflowdGenAggrFlowsMatched=tmnxCflowdGenAggrFlowsMatched, tmnxCFHostTemplateSet=tmnxCFHostTemplateSet, tmnxCflowdInactiveTimeout=tmnxCflowdInactiveTimeout, tmnxCflowdNotificationsPrefix=tmnxCflowdNotificationsPrefix, tmnxCflowdNotificationGroup=tmnxCflowdNotificationGroup, tmnxCflowdAggregationStatsEntry=tmnxCflowdAggregationStatsEntry, tmnxCflowdCreateFailure=tmnxCflowdCreateFailure, tmnxCflowdAggregation=tmnxCflowdAggregation, tmnxCflowdTemplateStatsTable=tmnxCflowdTemplateStatsTable, tmnxCflowdV5StatsEntry=tmnxCflowdV5StatsEntry, tmnxCflowdVersionStatus=tmnxCflowdVersionStatus, tmnxCflowdV5Open=tmnxCflowdV5Open, tmnxCflowdNotifications=tmnxCflowdNotifications, tmnxCFHostTableLastChanged=tmnxCFHostTableLastChanged, tmnxCFHostRowStatus=tmnxCFHostRowStatus, tmnxCflowdMaxCollectors=tmnxCflowdMaxCollectors, tmnxCflowdAggregationIndex=tmnxCflowdAggregationIndex, tmnxCflowdActiveTimeout=tmnxCflowdActiveTimeout, tmnxCflowdGenRawFlowsCreated=tmnxCflowdGenRawFlowsCreated, tmnxCflowdFlowUnsuppProto=tmnxCflowdFlowUnsuppProto, tmnxCflowdTemplateFlowIndex=tmnxCflowdTemplateFlowIndex, tmnxCflowdConformance=tmnxCflowdConformance, tmnxCflowdGlobalGroupV6v0=tmnxCflowdGlobalGroupV6v0, tmnxCflowdV5Sent=tmnxCflowdV5Sent, tmnxCflowdNotifyObjsGroup=tmnxCflowdNotifyObjsGroup, tmnxCflowdAggregationErrors=tmnxCflowdAggregationErrors, tmnxCflowdGenAggrFlowsFlushed=tmnxCflowdGenAggrFlowsFlushed, tmnxCflowdDeleted=tmnxCflowdDeleted, tmnxCflowdObjs=tmnxCflowdObjs, tmnxCflowdStatus=tmnxCflowdStatus, tmnxCflowdFlowFailureReasonCode=tmnxCflowdFlowFailureReasonCode, tmnxCflowdComplianceV6v0=tmnxCflowdComplianceV6v0, tmnxCflowdComplianceV10v0=tmnxCflowdComplianceV10v0, timetraCflowdMIBModule=timetraCflowdMIBModule, PYSNMP_MODULE_ID=timetraCflowdMIBModule, tmnxCFHostVersion=tmnxCFHostVersion, tmnxCflowdVersionErrors=tmnxCflowdVersionErrors, tmnxCflowdFlowUnsuppIPProtoNum=tmnxCflowdFlowUnsuppIPProtoNum, tmnxCflowdOverflow=tmnxCflowdOverflow, tmnxCflowdStateChange=tmnxCflowdStateChange, tmnxCFHostAdminStatus=tmnxCFHostAdminStatus, tmnxCflowdTotalPktsRcvd=tmnxCflowdTotalPktsRcvd, tmnxCflowdActiveFlows=tmnxCflowdActiveFlows, tmnxCflowdCleared=tmnxCflowdCleared, tmnxCFHostTable=tmnxCFHostTable, TmnxCflowdAggScheme=TmnxCflowdAggScheme, tmnxCflowdVersionIndex=tmnxCflowdVersionIndex, tmnxCflowdV5Errors=tmnxCflowdV5Errors, tmnxCflowdGeneralObjs=tmnxCflowdGeneralObjs, tmnxCFHostRecordsSent=tmnxCFHostRecordsSent, tmnxCflowdFlowCreateFailure=tmnxCflowdFlowCreateFailure, tmnxCflowdAggregationStatus=tmnxCflowdAggregationStatus, tmnxCflowdVersionSent=tmnxCflowdVersionSent, tmnxCflowdCompliances=tmnxCflowdCompliances, tmnxCflowdAggregationSent=tmnxCflowdAggregationSent, tmnxCflowdPacketTxFailure=tmnxCflowdPacketTxFailure, tmnxCFHostPacketsSent=tmnxCFHostPacketsSent, tmnxCflowdVersionOpen=tmnxCflowdVersionOpen, TmnxCflowdTemplateSet=TmnxCflowdTemplateSet, tmnxCflowdGenAggrFlowsCreated=tmnxCflowdGenAggrFlowsCreated, tmnxCflowdV5StatsTable=tmnxCflowdV5StatsTable, tmnxCflowdHostGroup=tmnxCflowdHostGroup, tmnxCFHostEntry=tmnxCFHostEntry, tmnxCflowdTemplateStatsEntry=tmnxCflowdTemplateStatsEntry, tmnxCflowdCacheSize=tmnxCflowdCacheSize, tmnxCflowdOperStatus=tmnxCflowdOperStatus, tmnxCflowdGroups=tmnxCflowdGroups, tmnxCflowdObsoleteV8v0Group=tmnxCflowdObsoleteV8v0Group, tmnxCflowdGlobalGroup=tmnxCflowdGlobalGroup, tmnxCflowdTemplateErrors=tmnxCflowdTemplateErrors, tmnxCflowdAggregationStatsTable=tmnxCflowdAggregationStatsTable, tmnxCflowdNotificationV8v0Group=tmnxCflowdNotificationV8v0Group, tmnxCFHostEntryLastChanged=tmnxCFHostEntryLastChanged, tmnxCflowdCreated=tmnxCflowdCreated, tmnxCflowdNotifyObjsV8v0Group=tmnxCflowdNotifyObjsV8v0Group, tmnxCflowdGenOverflowEvents=tmnxCflowdGenOverflowEvents, tmnxCflowdVersionStatsEntry=tmnxCflowdVersionStatsEntry, tmnxCflowdAdminStatus=tmnxCflowdAdminStatus, tmnxCflowdStatisticsV10v0Group=tmnxCflowdStatisticsV10v0Group, tmnxCflowdGenRawFlowsMatched=tmnxCflowdGenRawFlowsMatched, tmnxCflowdCompliance=tmnxCflowdCompliance, tmnxCflowdTotalPktsDropped=tmnxCflowdTotalPktsDropped, tmnxCflowdComplianceV8v0=tmnxCflowdComplianceV8v0, tmnxCflowdTemplateRetransmit=tmnxCflowdTemplateRetransmit, tmnxCflowdTemplateLastTxTime=tmnxCflowdTemplateLastTxTime, tmnxCflowdGeneralStatisticsObjs=tmnxCflowdGeneralStatisticsObjs, tmnxCFHostAddress=tmnxCFHostAddress, tmnxCflowdGenRawFlowsFlushed=tmnxCflowdGenRawFlowsFlushed, tmnxCflowdTemplateSent=tmnxCflowdTemplateSent, tmnxCFHostUdpPort=tmnxCFHostUdpPort, tmnxCFHostOperStatus=tmnxCFHostOperStatus, tmnxCflowdTemplateOpen=tmnxCflowdTemplateOpen, tmnxCFHostAggregation=tmnxCFHostAggregation, tmnxCflowdNotificationObjects=tmnxCflowdNotificationObjects, tmnxCflowdAggregationOpen=tmnxCflowdAggregationOpen, tmnxCflowdFlowFlushFailure=tmnxCflowdFlowFlushFailure)
