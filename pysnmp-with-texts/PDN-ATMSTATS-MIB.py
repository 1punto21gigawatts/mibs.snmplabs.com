#
# PySNMP MIB module PDN-ATMSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-ATMSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
atmVclVci, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVclVpi")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdnAtm, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnAtm")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Counter64, Counter32, iso, Bits, ObjectIdentity, Unsigned32, IpAddress, MibIdentifier, Integer32, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Counter64", "Counter32", "iso", "Bits", "ObjectIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "Integer32", "Gauge32", "NotificationType")
DisplayString, TimeInterval, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "TextualConvention", "RowStatus")
pdnAtmStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3))
pdnAtmStatsMIB.setRevisions(('1902-03-28 00:00', '1900-04-13 00:00', '1999-05-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnAtmStatsMIB.setRevisionsDescriptions((' D.GOUGH Added pdnAtmStatTable to count HEC and OCD errors per interface.', 'Z. Pan o added pdnAtmVclCurrTable - a current 15 minute cells stats and pdnAtmVclHistTable - 96 - 15 minute history cells stats', 'J. Strain o Initial - VPL and VCL Stats Table',))
if mibBuilder.loadTexts: pdnAtmStatsMIB.setLastUpdated('0002281200Z')
if mibBuilder.loadTexts: pdnAtmStatsMIB.setOrganization('Paradyne Networks MIB Working Group')
if mibBuilder.loadTexts: pdnAtmStatsMIB.setContactInfo('Paradyne Networks 331 Newman Springs Road Red Bank, NJ 07701 www.paradyne.com General Comments to: mibwg_team@eng.paradyne.com')
if mibBuilder.loadTexts: pdnAtmStatsMIB.setDescription('This MIB Module supports ATM Statistics ')
pdnAtmVplStat = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1))
pdnAtmVclStat = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2))
pdnAtmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 3))
pdnAtmVplStatTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1), )
if mibBuilder.loadTexts: pdnAtmVplStatTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatTable.setDescription('This table contains all statistic counters per VPL. It is used to monitor the usage of the VPL in terms of incoming cells and outgoing cells.')
pdnAtmVplStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1), ).setIndexNames((0, "PDN-ATMSTATS-MIB", "pdnAtmVplStatIfIndex"), (0, "PDN-ATMSTATS-MIB", "pdnAtmVplStatVpi"))
if mibBuilder.loadTexts: pdnAtmVplStatEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatEntry.setDescription('Each entry in this table represents a VPL.')
pdnAtmVplStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatIfIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
pdnAtmVplStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatVpi.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatVpi.setDescription('The VPI value of the VPL.')
pdnAtmVplStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatTotalCellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatTotalCellIns.setDescription('The total number of valid ATM cells received by this VPL including both CLP=0 and CLP=1 cells. The cells are counted prior to the application of the traffic policing.')
pdnAtmVplStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatClp0CellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatClp0CellIns.setDescription('The number of valid ATM cells received by this VPL with CLP=0. The cells are counted prior to the application of the traffic policing.')
pdnAtmVplStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatTotalDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatTotalDiscards.setDescription('The total number of valid ATM cells discarded by the traffic policing entity. This includes cells originally received with CLP=0 and CLP=1.')
pdnAtmVplStatClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatClp0Discards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatClp0Discards.setDescription('The total number of valid ATM cells received with CLP=0 an discarded by the traffic policing entity.')
pdnAtmVplStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatTotalCellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatTotalCellOuts.setDescription('The total number of valid ATM cells transmitted by this VPL. This includes both CLP=0 and CLP=1 cells.')
pdnAtmVplStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatClp0CellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatClp0CellOuts.setDescription('The total number of valid ATM cells transmitted with CLP=0 by this VPL.')
pdnAtmVplStatTaggedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVplStatTaggedOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVplStatTaggedOuts.setDescription('The total number of valid ATM cells tagged by the traffic policing entity from CLP=0 to CLP=1 and transmitted by this VPL.')
pdnAtmVclStatTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2), )
if mibBuilder.loadTexts: pdnAtmVclStatTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatTable.setDescription('This table contains all statistic counters per VCL. It is used to monitor the usage of the VCL in terms of incoming cells and outgoing cells.')
pdnAtmVclStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1), ).setIndexNames((0, "PDN-ATMSTATS-MIB", "pdnAtmVclStatIfIndex"), (0, "PDN-ATMSTATS-MIB", "pdnAtmVclStatVpi"), (0, "PDN-ATMSTATS-MIB", "pdnAtmVclStatVci"))
if mibBuilder.loadTexts: pdnAtmVclStatEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatEntry.setDescription('Each entry in this table represents a VCL.')
pdnAtmVclStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatIfIndex.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
pdnAtmVclStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatVpi.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatVpi.setDescription('The VPI value of the VCL.')
pdnAtmVclStatVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatVci.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatVci.setDescription('The VCI value of the VCL.')
pdnAtmVclStatTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatTotalCellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatTotalCellIns.setDescription('The total number of valid ATM cells received by this VCL including both CLP=0 and CLP=1 cells. The cells are counted prior to the application of the traffic policing.')
pdnAtmVclStatClp0CellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatClp0CellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatClp0CellIns.setDescription('The number of valid ATM cells received by this VCL with CLP=0. The cells are counted prior to the application of the traffic policing.')
pdnAtmVclStatTotalDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatTotalDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatTotalDiscards.setDescription('The total number of valid ATM cells discarded by the traffic policing entity. This includes cells originally received with CLP=0 and CLP=1.')
pdnAtmVclStatClp0Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatClp0Discards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatClp0Discards.setDescription('The total number of valid ATM cells received with CLP=0 an discarded by the traffic policing entity.')
pdnAtmVclStatTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatTotalCellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatTotalCellOuts.setDescription('The total number of valid ATM cells transmitted by this VCL. This includes both CLP=0 and CLP=1 cells.')
pdnAtmVclStatClp0CellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatClp0CellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatClp0CellOuts.setDescription('The total number of valid ATM cells transmitted with CLP=0 by this VCL.')
pdnAtmVclStatTaggedOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclStatTaggedOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatTaggedOuts.setDescription('The total number of valid ATM cells tagged by the traffic policing entity from CLP=0 to CLP=1 and transmitted by this VCL.')
pdnAtmVclStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmVclStatRowStatus.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclStatRowStatus.setDescription('This object is used to create a new row or delete an existing row in this table. When a new row is added, statistics are collected for the VCL. Statistics collection is terminated by deletion of the row.')
pdnAtmVclCurrTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3), )
if mibBuilder.loadTexts: pdnAtmVclCurrTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrTable.setDescription('This table maintains per-TP statistics for the fifteen-minute interval currently being collected.')
pdnAtmVclCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: pdnAtmVclCurrEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrEntry.setDescription('An entry in this table for VCL termination points. Each VCL Termination Point automatically has an entry in this table associated with it.')
pdnAtmVclCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3, 1, 1), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclCurrElapsedTime.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrElapsedTime.setDescription('Amount of time, measured in seconds, that statistics for this entry (the current interval) have been counted.')
pdnAtmVclCurrTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclCurrTotalCellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrTotalCellIns.setDescription('The total number of valid ATM cells received by this VCL. This number corresponds to that of toal cells recieved from CPE if this interface is a DSL ATM interface')
pdnAtmVclCurrTotalInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclCurrTotalInDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrTotalInDiscards.setDescription('The number of discarded received cells.')
pdnAtmVclCurrTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclCurrTotalCellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrTotalCellOuts.setDescription('The number of cells that have been successfully sent. This number corresponds to that of toal cells transmitted to CPE if this interface is a DSL ATM interface')
pdnAtmVclCurrTotalOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclCurrTotalOutDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclCurrTotalOutDiscards.setDescription('The number of discarded transmitted cells since this interval.')
pdnAtmVclHistTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4), )
if mibBuilder.loadTexts: pdnAtmVclHistTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistTable.setDescription('This table maintains per-interface statistics for previous fifteen-minute intervals.')
pdnAtmVclHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "PDN-ATMSTATS-MIB", "pdnAtmVclHistIndex"))
if mibBuilder.loadTexts: pdnAtmVclHistEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistEntry.setDescription('An entry in History Data table for VCL termination points. Each VCL Termination Point automatically has an entry in this table associated with it.')
pdnAtmVclHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pdnAtmVclHistIndex.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistIndex.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics in this entry was collected. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
pdnAtmVclHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclHistElapsedTime.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistElapsedTime.setDescription('Amount of Time, measured in units of 0.01 second, that statistics for this entry(the current interval) have been counted.')
pdnAtmVclHistTotalCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclHistTotalCellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistTotalCellIns.setDescription('The total number of valid ATM cells received by this VCL during this interval. This number corresponds to that of toal cells recieved from CPE if this interface is a DSL ATM interface')
pdnAtmVclHistTotalInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclHistTotalInDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistTotalInDiscards.setDescription('The number of discarded received cells during this interval.')
pdnAtmVclHistTotalCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclHistTotalCellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistTotalCellOuts.setDescription('The number of cells that have been successfully sent during this interval. This number corresponds to that of toal cells transmitted to CPE if this interface is a DSL ATM interface')
pdnAtmVclHistTotalOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmVclHistTotalOutDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmVclHistTotalOutDiscards.setDescription('The number of discarded transmitted cells during this interval.')
pdnAtmStatTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 3, 1), )
if mibBuilder.loadTexts: pdnAtmStatTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmStatTable.setDescription('This table contains all statistic counters per interface. It is used to monitor the errors in terms of incoming cells.')
pdnAtmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmStatEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmStatEntry.setDescription('Each entry in this table represents a error count per interface.')
pdnAtmStatHECErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmStatHECErrors.setStatus('current')
if mibBuilder.loadTexts: pdnAtmStatHECErrors.setDescription('The total number of ATM cells discarded on this interface due to a HEC violation.')
pdnAtmStatLCDErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmStatLCDErrors.setStatus('current')
if mibBuilder.loadTexts: pdnAtmStatLCDErrors.setDescription('The total number of Loss of Cell Delineataion events (LCD) that occured on this interface.')
mibBuilder.exportSymbols("PDN-ATMSTATS-MIB", pdnAtmVclHistTable=pdnAtmVclHistTable, pdnAtmVclHistTotalCellOuts=pdnAtmVclHistTotalCellOuts, pdnAtmStatTable=pdnAtmStatTable, pdnAtmStat=pdnAtmStat, pdnAtmVclCurrElapsedTime=pdnAtmVclCurrElapsedTime, pdnAtmVplStatTotalDiscards=pdnAtmVplStatTotalDiscards, pdnAtmVplStatTaggedOuts=pdnAtmVplStatTaggedOuts, PYSNMP_MODULE_ID=pdnAtmStatsMIB, pdnAtmVclStatTotalDiscards=pdnAtmVclStatTotalDiscards, pdnAtmVclHistTotalInDiscards=pdnAtmVclHistTotalInDiscards, pdnAtmVplStatClp0CellIns=pdnAtmVplStatClp0CellIns, pdnAtmVplStatTotalCellOuts=pdnAtmVplStatTotalCellOuts, pdnAtmVclStatTotalCellOuts=pdnAtmVclStatTotalCellOuts, pdnAtmVclStatVci=pdnAtmVclStatVci, pdnAtmVclStatTotalCellIns=pdnAtmVclStatTotalCellIns, pdnAtmVplStat=pdnAtmVplStat, pdnAtmVclCurrEntry=pdnAtmVclCurrEntry, pdnAtmVplStatEntry=pdnAtmVplStatEntry, pdnAtmVclStatTaggedOuts=pdnAtmVclStatTaggedOuts, pdnAtmVplStatTable=pdnAtmVplStatTable, pdnAtmStatLCDErrors=pdnAtmStatLCDErrors, pdnAtmVclCurrTable=pdnAtmVclCurrTable, pdnAtmVclHistTotalOutDiscards=pdnAtmVclHistTotalOutDiscards, pdnAtmVclStatClp0CellIns=pdnAtmVclStatClp0CellIns, pdnAtmVclStat=pdnAtmVclStat, pdnAtmVclHistElapsedTime=pdnAtmVclHistElapsedTime, pdnAtmVplStatClp0Discards=pdnAtmVplStatClp0Discards, pdnAtmVclCurrTotalCellOuts=pdnAtmVclCurrTotalCellOuts, pdnAtmVclStatVpi=pdnAtmVclStatVpi, pdnAtmVclStatClp0Discards=pdnAtmVclStatClp0Discards, pdnAtmVclHistIndex=pdnAtmVclHistIndex, pdnAtmVclHistTotalCellIns=pdnAtmVclHistTotalCellIns, pdnAtmVclCurrTotalOutDiscards=pdnAtmVclCurrTotalOutDiscards, pdnAtmStatHECErrors=pdnAtmStatHECErrors, pdnAtmVplStatClp0CellOuts=pdnAtmVplStatClp0CellOuts, pdnAtmVplStatTotalCellIns=pdnAtmVplStatTotalCellIns, pdnAtmVclCurrTotalCellIns=pdnAtmVclCurrTotalCellIns, pdnAtmVclHistEntry=pdnAtmVclHistEntry, pdnAtmVclStatEntry=pdnAtmVclStatEntry, pdnAtmVplStatIfIndex=pdnAtmVplStatIfIndex, pdnAtmVclStatTable=pdnAtmVclStatTable, pdnAtmVplStatVpi=pdnAtmVplStatVpi, pdnAtmVclStatClp0CellOuts=pdnAtmVclStatClp0CellOuts, pdnAtmStatsMIB=pdnAtmStatsMIB, pdnAtmVclCurrTotalInDiscards=pdnAtmVclCurrTotalInDiscards, pdnAtmStatEntry=pdnAtmStatEntry, pdnAtmVclStatIfIndex=pdnAtmVclStatIfIndex, pdnAtmVclStatRowStatus=pdnAtmVclStatRowStatus)
