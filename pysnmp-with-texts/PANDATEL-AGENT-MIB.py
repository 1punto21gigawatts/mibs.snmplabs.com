#
# PySNMP MIB module PANDATEL-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, Integer32, ObjectIdentity, Unsigned32, MibIdentifier, IpAddress, enterprises, iso, NotificationType, Counter64, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Integer32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "enterprises", "iso", "NotificationType", "Counter64", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
pandatel = MibIdentifier((1, 3, 6, 1, 4, 1, 760))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 10000))
agentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1))
agentNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentNetAddress.setDescription("The administrative network address of this unit's agent, e.g. the IP address.")
agentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: agentSubnetMask.setDescription("The administrative SubNet mask of this unit's agent.")
agentPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: agentPhysAddress.setDescription("The physical address of this unit's agent.")
agentMgmtAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("inband", 2), ("outband", 3), ("proxy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtAccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: agentMgmtAccessMode.setDescription("The mode this unit's agent can be reached.")
agentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: agentHardwareRevision.setDescription("The hardware revision of this unit's agent. This is intended to be of the type like 1.00a, but can also contain any textual description.")
agentSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSoftwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: agentSoftwareRevision.setDescription("The software revision of this unit's agent. This is intended to be of the type like 1.00a, but can also contain any textual description.")
agentTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7), )
if mibBuilder.loadTexts: agentTrapReceiverTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentTrapReceiverTable.setDescription("This entity's Trap Receiver Table.")
agentSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8), )
if mibBuilder.loadTexts: agentSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentSecurityTable.setDescription("This entity's Security Table.")
agTrapReceiverTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1), ).setIndexNames((0, "PANDATEL-AGENT-MIB", "agTrapReceiverNetAddress"))
if mibBuilder.loadTexts: agTrapReceiverTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agTrapReceiverTableEntry.setDescription("One entry in this entity's Trap Receiver Table, consisting of the trap receiver's IP address and the community string to be used with it.")
agTrapReceiverNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTrapReceiverNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: agTrapReceiverNetAddress.setDescription('The network address of this trap receiver, e.g. the IP Address.')
agTrapReceiverTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTrapReceiverTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: agTrapReceiverTrapCommunity.setDescription('The community string used for traps to this receiver.')
agTrapReceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTrapReceiverType.setStatus('mandatory')
if mibBuilder.loadTexts: agTrapReceiverType.setDescription('All entries return the value 1 (valid) for this object. Setting this object to the value 2 (invalid) deletes the entry from the trap receiver table.')
agSecTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8, 1), ).setIndexNames((0, "PANDATEL-AGENT-MIB", "agSecSecurityLevel"))
if mibBuilder.loadTexts: agSecTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agSecTableEntry.setDescription("One entry in this entity's security table, consisting of the security level and the community string to be used with it.")
agSecSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("read-only-sysgroup", 1), ("read-all-mgmt-objs", 2), ("standard-mgmt-access", 3), ("administrator-access", 4), ("high-security-access", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: agSecSecurityLevel.setDescription('The security level that is indicated by using the security community string.')
agSecCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSecCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: agSecCommunity.setDescription('The community string used for identification of the desired security level.')
agentMgmtSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 9))
agentAuthRestrictMode = MibScalar((1, 3, 6, 1, 4, 1, 760, 1, 10000, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notRestricted", 2), ("restricted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthRestrictMode.setStatus('mandatory')
if mibBuilder.loadTexts: agentAuthRestrictMode.setDescription('Restricting management authorization means that only snmp requests from members of the trap receiver table will be accepted. Requests from other sources will instead cause an authentication trap, if enabled. When not restricted, snmp requests from any manager who uses a valid community will be accepted, although traps will be sent only to those destinations that are included in the trap receiver table.')
mibBuilder.exportSymbols("PANDATEL-AGENT-MIB", agentSubnetMask=agentSubnetMask, agentPhysAddress=agentPhysAddress, agentMgmtAccessMode=agentMgmtAccessMode, agentSecurityTable=agentSecurityTable, agentGroup=agentGroup, agSecSecurityLevel=agSecSecurityLevel, agentTrapReceiverTable=agentTrapReceiverTable, agSecTableEntry=agSecTableEntry, agTrapReceiverTableEntry=agTrapReceiverTableEntry, agentHardwareRevision=agentHardwareRevision, agSecCommunity=agSecCommunity, mibs=mibs, agentAuthRestrictMode=agentAuthRestrictMode, agentMgmtSecurity=agentMgmtSecurity, agentSoftwareRevision=agentSoftwareRevision, agTrapReceiverType=agTrapReceiverType, pandatel=pandatel, agentNetAddress=agentNetAddress, agTrapReceiverTrapCommunity=agTrapReceiverTrapCommunity, agTrapReceiverNetAddress=agTrapReceiverNetAddress, agent=agent)
