#
# PySNMP MIB module CISCO-OPTICAL-MONITORING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OPTICAL-MONITORING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter64, NotificationType, iso, ModuleIdentity, ObjectIdentity, MibIdentifier, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter64", "NotificationType", "iso", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Bits")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoOpticalMonitoringMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 83))
ciscoOpticalMonitoringMIB.setRevisions(('2001-12-04 11:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoOpticalMonitoringMIB.setRevisionsDescriptions(('Initial version of the MIB.',))
if mibBuilder.loadTexts: ciscoOpticalMonitoringMIB.setLastUpdated('200112041130Z')
if mibBuilder.loadTexts: ciscoOpticalMonitoringMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoOpticalMonitoringMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: gsr-netman@cisco.com')
if mibBuilder.loadTexts: ciscoOpticalMonitoringMIB.setDescription("This MIB module is used to monitor optical parameters of a network element.This MIB deals with the operating parameters of the optical layer. The optical layer is a term that defines all the devices/systems that deal with the conversion of data in it's electrical form to optical form, transmission of the optical data, reception, and finally re-conversion to electrical signals.")
ciscoOpticalMonMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 1))
comParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1))
comParametersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1), )
if mibBuilder.loadTexts: comParametersTable.setReference('ITU recommendations G.783, G.784, G.953')
if mibBuilder.loadTexts: comParametersTable.setStatus('current')
if mibBuilder.loadTexts: comParametersTable.setDescription('This table lists the instrumented parameters of all interfaces on the network element whose optical parameters are to be monitored.')
comParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: comParametersEntry.setStatus('current')
if mibBuilder.loadTexts: comParametersEntry.setDescription('Only the ifIndices of optical interfaces whose parameters need to be monitored will be used to index this table.')
comTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: comTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: comTxBiasCurrent.setDescription('This holds the value of the laser diode forward bias current for the interface being instrumented, and is an indication of the Tx optical power.')
comTxPowerSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comTxPowerSupported.setStatus('current')
if mibBuilder.loadTexts: comTxPowerSupported.setDescription('Boolean to indicate if the interface being instrumented supports comTxPower. comTxPowerSupported is set to true if the interface supports the comTxPower object, and set to false otherwise.')
comTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('microWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: comTxPower.setStatus('current')
if mibBuilder.loadTexts: comTxPower.setDescription('This object holds the value of the transmitter optical power for the interface being instrumented. The optical is proportional to the laser diode current. This object makes sense only if comTxPowerSupported is true. All values must be converted to microWatts.')
comTxLaserTempSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comTxLaserTempSupported.setStatus('current')
if mibBuilder.loadTexts: comTxLaserTempSupported.setDescription('Boolean to indicate if the interface being instrumented supports comTxLaserTemp. comTxLaserTempSupported is set to true if the interface supports the comTxLaserTemp object, and set to false otherwise.')
comTxLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-253, 200))).setUnits(' Degree Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: comTxLaserTemp.setStatus('current')
if mibBuilder.loadTexts: comTxLaserTemp.setDescription('This object holds the value of the transmitter laser diode temperature for the interface being instrumented. This object indicates the health of the transmitter.')
comRxPowerACDC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('microWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: comRxPowerACDC.setStatus('current')
if mibBuilder.loadTexts: comRxPowerACDC.setDescription('This object holds the value of the total power (AC + DC) at the optical Rx of the interface. All values must be converted to microWatts.')
comRxPowerACSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comRxPowerACSupported.setStatus('current')
if mibBuilder.loadTexts: comRxPowerACSupported.setDescription('Boolean to indicate if comRxPowerAC is supported by the interface being instrumented. comRxPowerACSupported is set to true if the interface supports the comRxPowerAC object,and set to false otherwise.')
comRxPowerAC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 83, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('microWatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: comRxPowerAC.setStatus('current')
if mibBuilder.loadTexts: comRxPowerAC.setDescription('This object holds the value of the AC power at the optical Receiver of the interface. Not all interfaces support this object.This object makes sense only if comRxPowerACSupported is true. All values must be converted to microWatts.')
ciscoOpticalMonMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 2))
ciscoOpticalMonMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 2, 0))
ciscoOpticalMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 3))
ciscoOpticalMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 3, 1))
ciscoOpticalMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 83, 3, 2))
ciscoOpticalMonMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 83, 3, 1, 1)).setObjects(("CISCO-OPTICAL-MONITORING-MIB", "ciscoOpticalMonMIBParamGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOpticalMonMIBCompliance = ciscoOpticalMonMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoOpticalMonMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Optical Monitoring MIB.')
ciscoOpticalMonMIBParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 83, 3, 2, 1)).setObjects(("CISCO-OPTICAL-MONITORING-MIB", "comTxBiasCurrent"), ("CISCO-OPTICAL-MONITORING-MIB", "comTxPowerSupported"), ("CISCO-OPTICAL-MONITORING-MIB", "comTxPower"), ("CISCO-OPTICAL-MONITORING-MIB", "comTxLaserTempSupported"), ("CISCO-OPTICAL-MONITORING-MIB", "comTxLaserTemp"), ("CISCO-OPTICAL-MONITORING-MIB", "comRxPowerACDC"), ("CISCO-OPTICAL-MONITORING-MIB", "comRxPowerACSupported"), ("CISCO-OPTICAL-MONITORING-MIB", "comRxPowerAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoOpticalMonMIBParamGroup = ciscoOpticalMonMIBParamGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoOpticalMonMIBParamGroup.setDescription('Parameters of the optical interfaces.')
mibBuilder.exportSymbols("CISCO-OPTICAL-MONITORING-MIB", ciscoOpticalMonMIBNotifPrefix=ciscoOpticalMonMIBNotifPrefix, ciscoOpticalMonMIBCompliance=ciscoOpticalMonMIBCompliance, comRxPowerACDC=comRxPowerACDC, ciscoOpticalMonMIBNotifications=ciscoOpticalMonMIBNotifications, ciscoOpticalMonMIBGroups=ciscoOpticalMonMIBGroups, comTxPowerSupported=comTxPowerSupported, comTxLaserTemp=comTxLaserTemp, comParameters=comParameters, comRxPowerACSupported=comRxPowerACSupported, comParametersEntry=comParametersEntry, ciscoOpticalMonMIBParamGroup=ciscoOpticalMonMIBParamGroup, comTxPower=comTxPower, ciscoOpticalMonitoringMIB=ciscoOpticalMonitoringMIB, ciscoOpticalMonMIBCompliances=ciscoOpticalMonMIBCompliances, comParametersTable=comParametersTable, comRxPowerAC=comRxPowerAC, comTxLaserTempSupported=comTxLaserTempSupported, ciscoOpticalMonMIBObjects=ciscoOpticalMonMIBObjects, comTxBiasCurrent=comTxBiasCurrent, ciscoOpticalMonMIBConformance=ciscoOpticalMonMIBConformance, PYSNMP_MODULE_ID=ciscoOpticalMonitoringMIB)
