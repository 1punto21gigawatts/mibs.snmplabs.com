#
# PySNMP MIB module BNET-ATM-ATOM-AUG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BNET-ATM-ATOM-AUG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
atmVclVci, atmVclVpi = mibBuilder.importSymbols("ATM-MIB", "atmVclVci", "atmVclVpi")
atmSoftPVccLeafReference, = mibBuilder.importSymbols("ATM-SOFT-PVC-MIB", "atmSoftPVccLeafReference")
AtmAddr, = mibBuilder.importSymbols("ATM-TC-MIB", "AtmAddr")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
s5AtmTop, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5AtmTop")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Counter32, ModuleIdentity, MibIdentifier, ObjectIdentity, IpAddress, Gauge32, Unsigned32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Counter32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "IpAddress", "Gauge32", "Unsigned32", "TimeTicks", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bnetAtmAug = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3))
bnetAtmDeviceAtmAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 1), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmDeviceAtmAddr.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmDeviceAtmAddr.setDescription('The ATM address which applies for this particular device. Where multiple addresses apply, include only primary one.')
bnetAtmLearnAddrs = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("learnAddrs", 2), ("forgetAddrs", 3))).clone('learnAddrs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bnetAtmLearnAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmLearnAddrs.setDescription('When set to learnAddrs, atmAddrVcl and atmVclAddrBind tables will keep track of ATM Addresses.')
atmfAddressClientTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3), )
if mibBuilder.loadTexts: atmfAddressClientTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressClientTable.setDescription('Provides additional detail about each ATM client.')
atmfAddressClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1), ).setIndexNames((0, "BNET-ATM-ATOM-AUG-MIB", "atmfAddressPort"), (0, "BNET-ATM-ATOM-AUG-MIB", "atmfAddressAtmAddress"))
if mibBuilder.loadTexts: atmfAddressClientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressClientEntry.setDescription('An entry with information about an ATM client.')
atmfAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressPort.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressPort.setDescription(' Uni Port ')
atmfAddressAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 2), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressAtmAddress.setDescription('ATM Address')
atmfAddressClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("cnTurbo", 2), ("cnCircuitSaver", 3), ("laneTurbo", 4), ("laneCircuitSaver", 5), ("external", 6), ("les", 7), ("bus", 8), ("les-bus", 9), ("lecs", 10), ("spvc", 11))).clone('external')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressClientType.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressClientType.setDescription('Indicates the type of client.')
atmfAddressClientCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfAddressClientCallCount.setStatus('mandatory')
if mibBuilder.loadTexts: atmfAddressClientCallCount.setDescription('Indicates number of calls currently up, which involve this particular client address.')
bnetAtmSoftPVccExtnTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 4), )
if mibBuilder.loadTexts: bnetAtmSoftPVccExtnTable.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmSoftPVccExtnTable.setDescription('The table used to maintain Soft Permanent Virtual Channel Connection (Soft PVCCs) circuit ids. The Soft PVCC table is applicable only to switches.')
bnetAtmSoftPVccExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-SOFT-PVC-MIB", "atmSoftPVccLeafReference"))
if mibBuilder.loadTexts: bnetAtmSoftPVccExtnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmSoftPVccExtnEntry.setDescription('Each entry in this table represents the circuit id of a Soft Permanent Virtual Channel Connection (Soft PVCC).')
bnetAtmSoftPVccCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 14, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bnetAtmSoftPVccCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: bnetAtmSoftPVccCircuitId.setDescription('This is the circuit id for a Soft PVCC.')
mibBuilder.exportSymbols("BNET-ATM-ATOM-AUG-MIB", atmfAddressClientType=atmfAddressClientType, bnetAtmSoftPVccCircuitId=bnetAtmSoftPVccCircuitId, bnetAtmDeviceAtmAddr=bnetAtmDeviceAtmAddr, bnetAtmSoftPVccExtnEntry=bnetAtmSoftPVccExtnEntry, bnetAtmAug=bnetAtmAug, bnetAtmSoftPVccExtnTable=bnetAtmSoftPVccExtnTable, atmfAddressClientTable=atmfAddressClientTable, atmfAddressPort=atmfAddressPort, atmfAddressClientCallCount=atmfAddressClientCallCount, atmfAddressAtmAddress=atmfAddressAtmAddress, bnetAtmLearnAddrs=bnetAtmLearnAddrs, atmfAddressClientEntry=atmfAddressClientEntry)
