#
# PySNMP MIB module EXTREME-POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, extremeV2Traps = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "extremeV2Traps")
pethPsePortGroupIndex, pethPsePortIndex, pethMainPseGroupIndex = mibBuilder.importSymbols("POWER-ETHERNET-MIB", "pethPsePortGroupIndex", "pethPsePortIndex", "pethMainPseGroupIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
extremePoE = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 27))
if mibBuilder.loadTexts: extremePoE.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremePoE.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremePoE.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremePoE.setDescription('Extreme Power over Ethernet MIB objects')
extremePethMain = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1))
extremePethPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2))
extremePethSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 27, 4))
extremePethSystemAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 27, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSystemAdminEnable.setStatus('current')
if mibBuilder.loadTexts: extremePethSystemAdminEnable.setDescription('Controls whether inline power is provided by the system.')
extremePethSystemDisconnectPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 27, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowestPriority", 1), ("denyPort", 2))).clone('denyPort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSystemDisconnectPrecedence.setStatus('current')
if mibBuilder.loadTexts: extremePethSystemDisconnectPrecedence.setDescription('Controls the disconnect function of power management. When the power drain exceeds the available power budget, due to a rise in power consumption after power is allocated to the ports, the PoE controller disconnects one of the ports to prevent overload on the power supply. There are two controls: Lowest-priority: next port connected causes a shutdown of the lowest priority port. Deny-port: next port is denied power, regardless of priority.')
extremePethSystemUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 27, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSystemUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: extremePethSystemUsageThreshold.setDescription('The usage threshold expressed in percents for comparing the measured power and initiating an alarm if the threshold is exceeded.')
extremePethSystemPowerSupplyMode = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 27, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redundant", 1), ("loadSharing", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSystemPowerSupplyMode.setStatus('current')
if mibBuilder.loadTexts: extremePethSystemPowerSupplyMode.setDescription('Controls whether the power supply operate in redundant or load-sharing mode. Systems which do not provide redundant or load-sharing operations will return an error on setting, and notApplicable on read.')
extremePethSystemLegacyEnable = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 27, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSystemLegacyEnable.setStatus('current')
if mibBuilder.loadTexts: extremePethSystemLegacyEnable.setDescription('Controls whether legacy is supported by the system. This is only supported on S300-24 stackables currently.')
extremePethPseSlotTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2), )
if mibBuilder.loadTexts: extremePethPseSlotTable.setStatus('current')
if mibBuilder.loadTexts: extremePethPseSlotTable.setDescription('A table of objects that provides power management capabilities per slot.')
extremePethPseSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1), ).setIndexNames((0, "EXTREME-POE-MIB", "extremePethSlotNumber"))
if mibBuilder.loadTexts: extremePethPseSlotEntry.setStatus('current')
if mibBuilder.loadTexts: extremePethPseSlotEntry.setDescription('A set of objects that display and control the power characteristics of a slot.')
extremePethSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: extremePethSlotNumber.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotNumber.setDescription('Slot number. This is the same as the Group Index')
extremePethSlotPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 2), Integer32()).setUnits('watts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSlotPowerLimit.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotPowerLimit.setDescription('The configured maximum amount of inline power available to slot. The operational power available to the slot is based upon other operational and configuration parameters, such as the power-supply mode and status. This number is provided by the object extremePethSlotMaxAvailPower. extremePethSlotPowerLimit may be greater than extremePethSlotMaxAvailPower, however, cannot exceed the maximum slot capacity, provided by extremePethSlotMaxCapacity')
extremePethSlotConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 3), Gauge32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotConsumptionPower.setDescription("The amount of power allocated to PoE devices on the slot expressed in mWatts. The amount of power allocated to a PoE device is based upon the PoE device class and/or the port's extremePethPortViolationPrecedence setting. For example, in the default configuration of extremePethPortViolationPrecedence set to maxAdvertisedOperator(3), and the extremePethPortOperatorLimit set to 15400, a PoE device is allocated 15.4 watts.")
extremePethSlotClearConnectHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSlotClearConnectHistory.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotClearConnectHistory.setDescription('Clears the port connection history of the specified slot. Reading the value always reurns clear(2).')
extremePethSlotReservedConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 5), Gauge32()).setUnits('Milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotReservedConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotReservedConsumptionPower.setDescription('The amount of reserved power consumed on the slot expressed in Milliwatts.')
extremePethSlotCommonConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 6), Gauge32()).setUnits('Milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotCommonConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotCommonConsumptionPower.setDescription('The amount of common power allocated on the slot expressed in Milliwatts. This value is computed by the formula: extremePethSlotConsumptionPower - extremePethSlotReservedConsumptionPower.')
extremePethSlotAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSlotAdminEnable.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotAdminEnable.setDescription('Controls whether inline power is provided by the slot.')
extremePethSlotPoeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initializing", 1), ("operational", 2), ("downloadFail", 3), ("calibrationRequired", 4), ("invalidFirmware", 5), ("mismatchVersion", 6), ("updating", 7), ("invalidDevice", 8), ("notOperational", 9), ("other", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotPoeStatus.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotPoeStatus.setDescription('Describes the status of the PoE system on the slot. initializing - PoE controller is under initialization, operational - PoE controller is operational and is ready or providing power, downloadFail - PoE controller required update and the update failed, PoE reset is required to re-update, calibrationRequired - PoE contoller is operational, however calibration is required to provide power, invalidFirmware - PoE controller contains invalid firmware, mismatchVersion - PoE controller update completed, however version mismatches expected, reboot, updating - PoE controller is being updated, invalidDevice - PoE controller detected an invalid/bad PoE device. notOperational - PoE controller is not yet operational other - PoE controller is in undefined stats.')
extremePethSlotPoeResetSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSlotPoeResetSystem.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotPoeResetSystem.setDescription('Resets the PoE system on the slot. Reading returns clear(2)')
extremePethSlotMaxAvailPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 10), Gauge32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotMaxAvailPower.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotMaxAvailPower.setDescription('The maximum power available to the slot expressed in Watts. The value depends on various configuration parameters and power-supply modes and status.')
extremePethSlotMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 11), Gauge32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotMaxCapacity.setDescription('The maximum capacity of the slot expressed in Watts. This provides the hardware limitation of the slot. Actual amount of power is dependant on system status. The object extremePethSlotPowerLimit must not be greater than this amount.')
extremePethSlotBackupPSU = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 3), ("notApplicable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethSlotBackupPSU.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotBackupPSU.setDescription('Controls the backup power supply for inline power for the slot. A system which does not allow the backup PSU to be configured will return an error upon setting.')
extremePethSlotPSUActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotPSUActive.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotPSUActive.setDescription('Inline Power supply status indication for the slot. Indicates which PSU is currently active. In the case of a failover a none indication can occur until one of the PSU has finished powering up.')
extremePethSlotMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 14), Gauge32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotMeasuredPower.setDescription('The measured amount of power for all PoE device on the slot.')
extremePethSlotMainPseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethSlotMainPseIndex.setStatus('current')
if mibBuilder.loadTexts: extremePethSlotMainPseIndex.setDescription('The index into the PethMainPseTable. Provides the mapping of the slot identifier to pethMainPseGroupIndex.')
extremePethPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1), )
if mibBuilder.loadTexts: extremePethPsePortTable.setStatus('current')
if mibBuilder.loadTexts: extremePethPsePortTable.setDescription('A table of objects that extends the standard pethPsePortTable.')
extremePethPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1), ).setIndexNames((0, "POWER-ETHERNET-MIB", "pethPsePortGroupIndex"), (0, "POWER-ETHERNET-MIB", "pethPsePortIndex"))
if mibBuilder.loadTexts: extremePethPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: extremePethPsePortEntry.setDescription('A set of objects that display and control the power characteristics of a powerEthernet PSE port. This table extends the standard pethPsePortTable.')
extremePethPortOperatorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 20000)).clone(15400)).setUnits('Milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethPortOperatorLimit.setStatus('current')
if mibBuilder.loadTexts: extremePethPortOperatorLimit.setDescription('Controls individual port maximum power level.')
extremePethPortReservedBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('Milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethPortReservedBudget.setStatus('current')
if mibBuilder.loadTexts: extremePethPortReservedBudget.setDescription('Controls individual port maximum power level. Value is 0 or in the range of 3000..20000')
extremePethPortViolationPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("advertisedClass", 1), ("operatorLimit", 2), ("maxAdvertisedOperator", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethPortViolationPrecedence.setStatus('current')
if mibBuilder.loadTexts: extremePethPortViolationPrecedence.setDescription('Sets the violation precedence for the specified ports. A value of advertised-class will remove/deny power in the case an 802.3af compliant PD consumes power beyond its advertised class limit. A value of operator-limit will remove/deny power should the PD consume power beyond the configured operator-limit. A value of max-class-operator will remove/deny power if the PD consumes power beyond the maximum of the detected class limit and the operator-limit. A value of none will remove/deny power in case the PD device exceeds the maximum allowable wattage according to regulatory maximum of 20 W. Default is max-class-operator which allows operation of both 802.3af compliant and legacy PDs.')
extremePethPortClearFault = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethPortClearFault.setStatus('current')
if mibBuilder.loadTexts: extremePethPortClearFault.setDescription('Clears the fault condition. Reading always returns clear(2).')
extremePethPortResetPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePethPortResetPower.setStatus('current')
if mibBuilder.loadTexts: extremePethPortResetPower.setDescription('Resets the power on the port. Reading always returns clear(2)')
extremePethPortMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 27, 2, 1, 1, 6), Gauge32()).setUnits('Milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePethPortMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: extremePethPortMeasuredPower.setDescription('The amount of power consumed on the port expressed in Milliwatts.')
mibBuilder.exportSymbols("EXTREME-POE-MIB", extremePethPsePortTable=extremePethPsePortTable, extremePethPortViolationPrecedence=extremePethPortViolationPrecedence, extremePethPsePortEntry=extremePethPsePortEntry, extremePethPortResetPower=extremePethPortResetPower, extremePethSlotBackupPSU=extremePethSlotBackupPSU, extremePethSlotPSUActive=extremePethSlotPSUActive, extremePethSlotCommonConsumptionPower=extremePethSlotCommonConsumptionPower, extremePethPortOperatorLimit=extremePethPortOperatorLimit, extremePethMain=extremePethMain, extremePethSlotReservedConsumptionPower=extremePethSlotReservedConsumptionPower, extremePethSlotMaxAvailPower=extremePethSlotMaxAvailPower, extremePethSlotPowerLimit=extremePethSlotPowerLimit, extremePethSystem=extremePethSystem, extremePethSystemLegacyEnable=extremePethSystemLegacyEnable, extremePethSlotPoeResetSystem=extremePethSlotPoeResetSystem, extremePethSlotMainPseIndex=extremePethSlotMainPseIndex, extremePethSystemPowerSupplyMode=extremePethSystemPowerSupplyMode, extremePoE=extremePoE, extremePethPortMeasuredPower=extremePethPortMeasuredPower, extremePethSlotConsumptionPower=extremePethSlotConsumptionPower, extremePethPortReservedBudget=extremePethPortReservedBudget, extremePethSlotPoeStatus=extremePethSlotPoeStatus, extremePethPort=extremePethPort, extremePethSlotNumber=extremePethSlotNumber, extremePethSystemDisconnectPrecedence=extremePethSystemDisconnectPrecedence, PYSNMP_MODULE_ID=extremePoE, extremePethPseSlotTable=extremePethPseSlotTable, extremePethSlotMaxCapacity=extremePethSlotMaxCapacity, extremePethSystemAdminEnable=extremePethSystemAdminEnable, extremePethPseSlotEntry=extremePethPseSlotEntry, extremePethSlotAdminEnable=extremePethSlotAdminEnable, extremePethSystemUsageThreshold=extremePethSystemUsageThreshold, extremePethSlotMeasuredPower=extremePethSlotMeasuredPower, extremePethPortClearFault=extremePethPortClearFault, extremePethSlotClearConnectHistory=extremePethSlotClearConnectHistory)
