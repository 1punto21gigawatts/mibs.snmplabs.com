#
# PySNMP MIB module DKSF-707-2-X-X-1 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DKSF-707-2-X-X-1
# Produced by pysmi-0.3.4 at Wed May  1 12:47:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
snmpTraps, = mibBuilder.importSymbols("SNMPv2-MIB", "snmpTraps")
TimeTicks, IpAddress, Gauge32, NotificationType, iso, MibIdentifier, Bits, ObjectIdentity, Unsigned32, Counter32, ModuleIdentity, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Gauge32", "NotificationType", "iso", "MibIdentifier", "Bits", "ObjectIdentity", "Unsigned32", "Counter32", "ModuleIdentity", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, TimeStamp, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "TruthValue", "DisplayString")
uniPingServerSolutionV3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25728, 707))
uniPingServerSolutionV3.setRevisions(('2015-02-09 00:00', '2014-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: uniPingServerSolutionV3.setRevisionsDescriptions(('added npGsmSendSms', 'initial release',))
if mibBuilder.loadTexts: uniPingServerSolutionV3.setLastUpdated('201502090000Z')
if mibBuilder.loadTexts: uniPingServerSolutionV3.setOrganization('Alentis Electronics')
if mibBuilder.loadTexts: uniPingServerSolutionV3.setContactInfo('developers@netping.ru')
if mibBuilder.loadTexts: uniPingServerSolutionV3.setDescription('MIB for NetPing SMS gsm bridge')
lightcom = MibIdentifier((1, 3, 6, 1, 4, 1, 25728))
npTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 90))
npTrapEmailTo = MibScalar((1, 3, 6, 1, 4, 1, 25728, 90, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTrapEmailTo.setStatus('current')
if mibBuilder.loadTexts: npTrapEmailTo.setDescription('user-specified e-mail for NetPing Trap Forwarding Service')
npGsm = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800))
npGsmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 1))
npGsmFailed = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("failed", 1), ("fatalError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmFailed.setStatus('current')
if mibBuilder.loadTexts: npGsmFailed.setDescription("Firmware's GSM module status")
npGsmRegistration = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("impossible", 0), ("homeNetwork", 1), ("searching", 2), ("denied", 3), ("unknown", 4), ("roaming", 5), ("infoUpdate", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmRegistration.setStatus('current')
if mibBuilder.loadTexts: npGsmRegistration.setDescription('Status of modem registration in GSM network (AT+CREG? result)')
npGsmStrength = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmStrength.setStatus('current')
if mibBuilder.loadTexts: npGsmStrength.setDescription('GSM signal strength. 0..31 = 0..100%, 99 = unknown or n/a, 255 = updating info')
npGsmSendSms = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npGsmSendSms.setStatus('current')
if mibBuilder.loadTexts: npGsmSendSms.setDescription('Send arbitrary SMS. Format: [phone_number,phone_number,...] Message One to four destination phone numbers If [] and numbers omitted, mesagge will be sent to preset numbers from SMS setup Only Latin characters allowed in message body')
npGsmUnparsedRxSms = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmUnparsedRxSms.setStatus('current')
if mibBuilder.loadTexts: npGsmUnparsedRxSms.setDescription('Received unparsed Sms with unknown starting word')
npGsmUnparsedRxSmsFrom = MibScalar((1, 3, 6, 1, 4, 1, 25728, 3800, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npGsmUnparsedRxSmsFrom.setStatus('current')
if mibBuilder.loadTexts: npGsmUnparsedRxSmsFrom.setDescription('Source phone of received unparsed (unknown) Sms')
npGsmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 2))
npGsmTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0))
npGsmTrap = NotificationType((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0, 1)).setObjects(("DKSF-707-2-X-X-1", "npGsmFailed"), ("DKSF-707-2-X-X-1", "npGsmRegistration"), ("DKSF-707-2-X-X-1", "npGsmStrength"))
if mibBuilder.loadTexts: npGsmTrap.setStatus('current')
if mibBuilder.loadTexts: npGsmTrap.setDescription('GSM modem or SMS firmware problems')
npGsmTrapUnparsedSms = NotificationType((1, 3, 6, 1, 4, 1, 25728, 3800, 2, 0, 2)).setObjects(("DKSF-707-2-X-X-1", "npGsmUnparsedRxSms"), ("DKSF-707-2-X-X-1", "npGsmUnparsedRxSmsFrom"))
if mibBuilder.loadTexts: npGsmTrapUnparsedSms.setStatus('current')
if mibBuilder.loadTexts: npGsmTrapUnparsedSms.setDescription('forwarding of SMS with wrong starting keyword')
npReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 25728, 911))
npSoftReboot = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npSoftReboot.setStatus('current')
if mibBuilder.loadTexts: npSoftReboot.setDescription('Write 1 to reboot device after current operations completition')
npResetStack = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npResetStack.setStatus('current')
if mibBuilder.loadTexts: npResetStack.setDescription('Write 1 to re-initialize network stack')
npForcedReboot = MibScalar((1, 3, 6, 1, 4, 1, 25728, 911, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npForcedReboot.setStatus('current')
if mibBuilder.loadTexts: npForcedReboot.setDescription('Write 1 to immediate forced reboot')
mibBuilder.exportSymbols("DKSF-707-2-X-X-1", npReboot=npReboot, npGsmTraps=npGsmTraps, PYSNMP_MODULE_ID=uniPingServerSolutionV3, npGsmUnparsedRxSms=npGsmUnparsedRxSms, npGsmTrapPrefix=npGsmTrapPrefix, npGsm=npGsm, npGsmRegistration=npGsmRegistration, npGsmStrength=npGsmStrength, npGsmTrap=npGsmTrap, uniPingServerSolutionV3=uniPingServerSolutionV3, npGsmFailed=npGsmFailed, npSoftReboot=npSoftReboot, npGsmSendSms=npGsmSendSms, npGsmUnparsedRxSmsFrom=npGsmUnparsedRxSmsFrom, npGsmInfo=npGsmInfo, npTrapInfo=npTrapInfo, npForcedReboot=npForcedReboot, lightcom=lightcom, npResetStack=npResetStack, npGsmTrapUnparsedSms=npGsmTrapUnparsedSms, npTrapEmailTo=npTrapEmailTo)
