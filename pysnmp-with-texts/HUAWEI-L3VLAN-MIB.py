#
# PySNMP MIB module HUAWEI-L3VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-L3VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Counter64, Bits, iso, Counter32, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Bits", "iso", "Counter32", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "IpAddress")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hwL3Vlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100))
if mibBuilder.loadTexts: hwL3Vlan.setLastUpdated('200308110900Z')
if mibBuilder.loadTexts: hwL3Vlan.setOrganization('Huawei Technologies Co., Ltd.')
if mibBuilder.loadTexts: hwL3Vlan.setContactInfo('R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com')
if mibBuilder.loadTexts: hwL3Vlan.setDescription('The HUAWEI-L3VLAN-MIB contains objects to manage level 3 vlan. Through the MIB,you can get the detail information of each vlan,such as VLANID,encapsulated type,the statistics of the received and sent packets and so on.')
hwL3VlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1))
hwSubIfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 1), )
if mibBuilder.loadTexts: hwSubIfVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanTable.setDescription('This table contains the information of vlans encapsulated by the sub-interfaces.')
hwSubIfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 1, 1), ).setIndexNames((0, "HUAWEI-L3VLAN-MIB", "hwSubIfIndex"), (0, "HUAWEI-L3VLAN-MIB", "hwSubIfVlanId"))
if mibBuilder.loadTexts: hwSubIfVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanEntry.setDescription('Provides the information of a sub-interface vlan entry.')
hwSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwSubIfIndex.setDescription('Interface index(es) of port(s) present on the device.')
hwSubIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwSubIfVlanId.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanId.setDescription('This object specifies the vlan id encapsulated by the sub-interface.')
hwSubIfVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dot1q", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanType.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanType.setDescription('This object specifies the vlan type encapsulated by the sub-interface.')
hwSubIfVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanStatus.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanStatus.setDescription('This object specifies the status of the sub-interface vlan table.')
hwVLANMibRoutertVlanCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2), )
if mibBuilder.loadTexts: hwVLANMibRoutertVlanCountTable.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibRoutertVlanCountTable.setDescription('Per vid router statistics table includes the number of packets that each vlan is received and sent.')
hwVLANMibRoutertVlanCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2, 1), ).setIndexNames((0, "HUAWEI-L3VLAN-MIB", "hwVLANMibRouterPort"), (0, "HUAWEI-L3VLAN-MIB", "hwVLANMibRouterVID"))
if mibBuilder.loadTexts: hwVLANMibRoutertVlanCountEntry.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibRoutertVlanCountEntry.setDescription('Entry of vLANMibRoutertVlanCountTable')
hwVLANMibRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibRouterPort.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibRouterPort.setDescription('Interface index(es) of trunk port(s) present on the device.')
hwVLANMibRouterVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibRouterVID.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibRouterVID.setDescription('The vlan id.')
hwVLANMibRouterVlanPacketTran = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibRouterVlanPacketTran.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibRouterVlanPacketTran.setDescription('The number of packets transmitted to vlan')
hwVLANMibRouterVlanPacketSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibRouterVlanPacketSent.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibRouterVlanPacketSent.setDescription('Number of packets sent by vlan')
hwVLANMibClearVidStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unavailable", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVLANMibClearVidStatistics.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibClearVidStatistics.setDescription('Setting the object to clear(1) will clear the counters of a row of the hwVLANMibRoutertVlanCountTable. When a clear action had been finished, or there is no clear action , the value of the object would be unavailable(0).')
hwSubIfVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3), )
if mibBuilder.loadTexts: hwSubIfVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyTable.setDescription('This table contains the information of vlan and 8021P/DSCP/EtherType policy encapsulated by the sub-interfaces.')
hwSubIfVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1), ).setIndexNames((0, "HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyIfIndex"), (0, "HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyVlanId"))
if mibBuilder.loadTexts: hwSubIfVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyEntry.setDescription('Provides the information of a sub-interface vlan policy entry.')
hwSubIfVlanPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwSubIfVlanPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyIfIndex.setDescription('Interface index(es) of port(s) present on the device.')
hwSubIfVlanPolicyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwSubIfVlanPolicyVlanId.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyVlanId.setDescription('This object specifies the vlan id encapsulated by the sub-interface. when the vlan id is zero it means to configure the interface as the untagged sub-interface, When configure vlan as a range, hwSubIfVlanPolicyVlanId is the start vlan id and hwSubIfVlanPolicyVlanIdEnd is the end vlan id.')
hwSubIfVlanPolicyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1q", 1), ("dot1qTerm", 2), ("stacking", 3), ("untagged", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanPolicyIfType.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyIfType.setDescription('Indicates the sub-interface type as follows: dot1q(1): indicates vlan-type dot1q sub-interface. dot1qTerm(2): indicates dot1q termination sub-interface. stacking(3): indicates qinq stacking sub-interface. untagged(4): indicates untagged sub-interface. ')
hwSubIfVlanPolicyVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanPolicyVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyVlanIdEnd.setDescription('When configure vlan as a range, hwSubIfVlanPolicyVlanId is the start vlan id and hwSubIfVlanPolicyVlanIdEnd is the end vlan id.')
hwSubIfVlanPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("type8021P", 1), ("typeDSCP", 2), ("typeEtherType", 3), ("default", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanPolicyType.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyType.setDescription('Indicates the type of vlan policy as follows: 8021p(1): indicates IEEE 802.1P encapsulation. dscp(2): indicates Differentiated Services CodePoint. eth-type(3): indicates EtherType,For example PPPOE. default(4):indicates the default policy. ')
hwSubIfVlanPolicyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanPolicyValue.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyValue.setDescription("Indicates the information of vlan policy as follows: Each octet within this value specifies a set of eight priorities. When the policy type is 8021p, the first octet specifying 8021p priority 0 through 7; When the policy type is dscp, the first octet specifying dscp priority 0 through 7, the second octet specifying priority 8 through 15, etc; When the policy type is eth-type, the most significant bit of the first octet specifying EtherType PPPOE. Within each octet, the most significant bit represents the lowest numbered priority, and the least significant bit represents the highest numbered priority. Thus, each priority is represented by a single bit within the value of this object. If that bit has a value of '1' then that priority is included in the set of priorities; the priority is not included if its bit has a value of '0'. ")
hwSubIfVlanPolicyGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanPolicyGroupId.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyGroupId.setDescription('Group-management id.')
hwSubIfVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 1, 3, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSubIfVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanPolicyRowStatus.setDescription('This object specifies the status of the sub-interface vlan table.')
hwL3VlanTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 2))
hwL3VlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 3))
hwL3VlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 3, 1))
hwL3VlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 3, 1, 1)).setObjects(("HUAWEI-L3VLAN-MIB", "hwSubIfVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwL3VlanCompliance = hwL3VlanCompliance.setStatus('current')
if mibBuilder.loadTexts: hwL3VlanCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-L3VLAN-MIB.')
hwL3VlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 3, 2))
hwSubIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 100, 3, 2, 1)).setObjects(("HUAWEI-L3VLAN-MIB", "hwSubIfVlanType"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanId"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanStatus"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyIfType"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyVlanIdEnd"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyType"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyValue"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyGroupId"), ("HUAWEI-L3VLAN-MIB", "hwSubIfVlanPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSubIfVlanGroup = hwSubIfVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwSubIfVlanGroup.setDescription('Standard sub-interface vlan group.')
mibBuilder.exportSymbols("HUAWEI-L3VLAN-MIB", hwVLANMibRoutertVlanCountTable=hwVLANMibRoutertVlanCountTable, hwSubIfVlanPolicyTable=hwSubIfVlanPolicyTable, hwSubIfVlanEntry=hwSubIfVlanEntry, hwSubIfVlanPolicyVlanId=hwSubIfVlanPolicyVlanId, hwL3VlanMIBObjects=hwL3VlanMIBObjects, hwSubIfIndex=hwSubIfIndex, hwL3VlanCompliance=hwL3VlanCompliance, hwSubIfVlanPolicyIfIndex=hwSubIfVlanPolicyIfIndex, hwL3Vlan=hwL3Vlan, hwSubIfVlanPolicyVlanIdEnd=hwSubIfVlanPolicyVlanIdEnd, hwSubIfVlanPolicyEntry=hwSubIfVlanPolicyEntry, hwVLANMibRouterVlanPacketSent=hwVLANMibRouterVlanPacketSent, hwVLANMibRoutertVlanCountEntry=hwVLANMibRoutertVlanCountEntry, hwSubIfVlanType=hwSubIfVlanType, hwSubIfVlanPolicyGroupId=hwSubIfVlanPolicyGroupId, hwL3VlanCompliances=hwL3VlanCompliances, PYSNMP_MODULE_ID=hwL3Vlan, hwSubIfVlanTable=hwSubIfVlanTable, hwSubIfVlanStatus=hwSubIfVlanStatus, hwVLANMibRouterPort=hwVLANMibRouterPort, hwSubIfVlanGroup=hwSubIfVlanGroup, hwVLANMibRouterVlanPacketTran=hwVLANMibRouterVlanPacketTran, hwSubIfVlanPolicyRowStatus=hwSubIfVlanPolicyRowStatus, hwSubIfVlanPolicyValue=hwSubIfVlanPolicyValue, hwL3VlanConformance=hwL3VlanConformance, hwL3VlanGroups=hwL3VlanGroups, hwSubIfVlanId=hwSubIfVlanId, hwVLANMibClearVidStatistics=hwVLANMibClearVidStatistics, hwSubIfVlanPolicyType=hwSubIfVlanPolicyType, hwVLANMibRouterVID=hwVLANMibRouterVID, hwL3VlanTraps=hwL3VlanTraps, hwSubIfVlanPolicyIfType=hwSubIfVlanPolicyIfType)
