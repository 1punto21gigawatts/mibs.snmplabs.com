#
# PySNMP MIB module DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:46:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
microsoft, software = mibBuilder.importSymbols("MSFT-MIB", "microsoft", "software")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Gauge32, Bits, IpAddress, MibIdentifier, ObjectIdentity, Counter32, TimeTicks, NotificationType, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Gauge32", "Bits", "IpAddress", "MibIdentifier", "ObjectIdentity", "Counter32", "TimeTicks", "NotificationType", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 3))
dhcpPar = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 3, 1))
dhcpScope = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 3, 2))
parDhcpStartTime = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpStartTime.setDescription('Dhcp Server start time')
parDhcpTotalNoOfDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfDiscovers.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfDiscovers.setDescription('This variable indicates the number of discovery messages received')
parDhcpTotalNoOfRequests = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfRequests.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfRequests.setDescription('This variable indicates the number of requests received')
parDhcpTotalNoOfReleases = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfReleases.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfReleases.setDescription('This variable indicates the number of releases received')
parDhcpTotalNoOfOffers = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfOffers.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfOffers.setDescription('This variable indicates the number of offers sent')
parDhcpTotalNoOfAcks = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfAcks.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfAcks.setDescription('This variable indicates the number of acks received')
parDhcpTotalNoOfNacks = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfNacks.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfNacks.setDescription('This variable indicates the number of nacks received')
parDhcpTotalNoOfDeclines = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parDhcpTotalNoOfDeclines.setStatus('mandatory')
if mibBuilder.loadTexts: parDhcpTotalNoOfDeclines.setDescription('This variable indicates the number of declines')
scopeTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 3, 2, 1), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: scopeTable.setStatus('mandatory')
if mibBuilder.loadTexts: scopeTable.setDescription('A list of subnets maintained by the server')
scopeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 3, 2, 1, 1), ).setMaxAccess("readonly").setIndexNames((0, "DHCP-MIB", "SubnetAdd"))
if mibBuilder.loadTexts: scopeTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scopeTableEntry.setDescription('This is the row corresponding to a subnet')
subnetAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subnetAdd.setStatus('mandatory')
if mibBuilder.loadTexts: subnetAdd.setDescription('This is the subnet address ')
noAddInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noAddInUse.setStatus('mandatory')
if mibBuilder.loadTexts: noAddInUse.setDescription('This is the no. of addresses in use')
noAddFree = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noAddFree.setStatus('mandatory')
if mibBuilder.loadTexts: noAddFree.setDescription('This is the no. of addresses that are free ')
noPendingOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noPendingOffers.setStatus('mandatory')
if mibBuilder.loadTexts: noPendingOffers.setDescription('This is the no. of addresses that are currently in the offer state')
mibBuilder.exportSymbols("DHCP-MIB", dhcp=dhcp, parDhcpTotalNoOfReleases=parDhcpTotalNoOfReleases, parDhcpTotalNoOfAcks=parDhcpTotalNoOfAcks, noAddInUse=noAddInUse, scopeTableEntry=scopeTableEntry, parDhcpStartTime=parDhcpStartTime, noPendingOffers=noPendingOffers, subnetAdd=subnetAdd, parDhcpTotalNoOfDeclines=parDhcpTotalNoOfDeclines, parDhcpTotalNoOfOffers=parDhcpTotalNoOfOffers, noAddFree=noAddFree, dhcpScope=dhcpScope, parDhcpTotalNoOfNacks=parDhcpTotalNoOfNacks, parDhcpTotalNoOfRequests=parDhcpTotalNoOfRequests, parDhcpTotalNoOfDiscovers=parDhcpTotalNoOfDiscovers, dhcpPar=dhcpPar, scopeTable=scopeTable)
