#
# PySNMP MIB module Wellfleet-DCMMW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-DCMMW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, IpAddress, MibIdentifier, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, ObjectIdentity, ModuleIdentity, iso, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "ObjectIdentity", "ModuleIdentity", "iso", "Counter64", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfDCMmwGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDCMmwGroup")
wfDCMmw = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1))
wfDCMmwDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwDelete.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwDelete.setDescription('DCMMW is dynamically loaded. This object specifies that the users can perform a set operation on this object in order to create/delete DCMMW base record. Default is created.')
wfDCMmwDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwDisable.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwDisable.setDescription('Enables or Disables DCMMW Subsystem. By disabling DCMMW, can disable the DCM board.')
wfDCMmwImageName = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwImageName.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwImageName.setDescription('A textual string to describe the name of DCM image to be download on to DCM. The image name should be a fully qualified filename. For ex: vol:filename.')
wfDCMmwBootOption = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("download", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwBootOption.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwBootOption.setDescription("Specifies DCM's image load mode to DCMMW. If the option specified is local, DCMMW will not load a new image to DCM's shared memory. If the option specified is download, then DCMMW will load an image into DCM's shared memory. Name of the image is specified using wfDCMMWImageName")
wfDCMmwImageSaveMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("nosave", 2))).clone('save')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwImageSaveMode.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwImageSaveMode.setDescription("Specifies DCM's image save mode. If the mode is save, then DCMMW indicates it to DCM, to save the image on to its(DCM's) FLASH memory. This saved image will be used by DCM in its next boot time if the boot option is set to local. If the mode is nosave then the image will not be saved.")
wfDCMmwCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("shmem", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwCfgMode.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwCfgMode.setDescription("Specifies whether DCMMW should let DCM use the config info from the shared memory or use the config info from DCM's FLASH memory. If the mode is local, then DCMMW will write `0' in DCM's config file, which indicates the DCM that it should use the config info from its FLASH memory. If the mode is shared memory, then DCMMW will write the config info in DCM's config file, for DCM to use.")
wfDCMmwWriteConfigInfo = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("nosave", 2))).clone('save')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwWriteConfigInfo.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwWriteConfigInfo.setDescription('DCMMW uses this object to specify DCM whether it should commit the configuration information into its Flash memory or not')
wfDCMmwRMONMaxHost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 8128)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwRMONMaxHost.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwRMONMaxHost.setDescription('Indicates the maximum number of hosts each RMON host control entry on DCM will store. When the table reaches this value, entries will be deleted based on an LRU algorithm. The max limit depends on the amount of memory installed in DCM. It is in the range 2048..8128. DCMMW uses this object to provide the value to DCM. Check the MIB object wfDCMmwRMONHost to verify the number of hosts that got configured in the RMON host control entry.')
wfDCMmwRMONDfltHost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwRMONDfltHost.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwRMONDfltHost.setDescription('DCMMW uses this to specify DCM that it should create or not create the hostControlTable. If enabled DCMMW indicates DCM to create default host entries for the interface it is configured to.')
wfDCMmwRMONDfltMtrix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMmwRMONDfltMtrix.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwRMONDfltMtrix.setDescription('DCMMW uses this to specify DCM that it should create or not create the matrixControlTable. If enabled DCMMW indicates DCM to create default matrix entries for the interface it is configured to.')
wfDCMmwRMONHost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMmwRMONHost.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwRMONHost.setDescription('This specifies the configured number of hosts in each RMON host control entry on DCM')
wfDCMRmonAgent = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMRmonAgent.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMRmonAgent.setDescription('The state of the RMON agent. A ready state(1) indicates that the RMON agent instrumentation is up and ready to process SNMP requests')
wfDCMMemSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMMemSize.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMMemSize.setDescription("This specifies DCM board's memory size.")
wfDCMHwRev = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMHwRev.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMHwRev.setDescription("This specifies DCM board's HW revision number")
wfDCMFwRev = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMFwRev.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMFwRev.setDescription("This specifies DCM board's FW revision number")
wfDCMAgentImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMAgentImageVersion.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMAgentImageVersion.setDescription("This specifies DCM board's Agent Image version number")
wfDCMmwNumDCM = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMmwNumDCM.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMmwNumDCM.setDescription('This specifies how many DCMs are present')
wfDCMTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2), )
if mibBuilder.loadTexts: wfDCMTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMTable.setDescription('Table containing DCM records')
wfDCMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1), ).setIndexNames((0, "Wellfleet-DCMMW-MIB", "wfDCMIndex"))
if mibBuilder.loadTexts: wfDCMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMEntry.setDescription('Information concerning a specific DCM entry. Each DCM entry corresponds to a physical probe.')
wfDCMDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMDelete.setDescription('Create/Delete flag. Default is created. User can perform a set operation on this object to create/delete a DCMEntry instance.')
wfDCMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMIndex.setDescription('An index that uniquely identifies an entry in the DCM table. Each such entry defines one DCM.')
wfDCMDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMDisable.setDescription('Enables or Disables the DCM')
wfDCMOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMOperStatus.setDescription('This object indicates the operational state of the DCM')
wfDCMStreamCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMStreamCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMStreamCount.setDescription('This object indicates the number of Streams this DCM configured to support.')
wfDCMIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 9))).clone(namedValues=NamedValues(("ether", 6), ("tokenring", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMIntfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMIntfType.setDescription('This object identifies the type of interface this DCM is configured to.')
wfDCMImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMImageName.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMImageName.setDescription('A textual string to describe the name of the DCM image to be download on to the DCM. The image name should be a fully qualified filename. For ex: vol:filename.')
wfDCMBootOption = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("download", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMBootOption.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMBootOption.setDescription("Specifies DCM's image load mode to DCMMW. If the option specified is local, DCMMW will not load a new image to DCM's shared memory. If the option specified is download, then DCMMW will load an image into DCM's shared memory. Name of the image is specified using wfDCMMWImageName")
wfDCMImageSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("nosave", 2))).clone('save')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMImageSaveMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMImageSaveMode.setDescription("Specifies DCM's image save mode. If the mode is save, then DCMMW indicates it to DCM, to save the image on to its(DCM's) FLASH memory. This saved image will be used by DCM in its next boot time if the boot option is set to local. If the mode is nosave then the image will not be saved.")
wfDCMCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("shmem", 2))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMCfgMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMCfgMode.setDescription("Specifies whether DCMMW should let DCM use the config info from the shared memory or use the config info from DCM's FLASH memory. If the mode is local, then DCMMW will write `0' in DCM's config file, which indicates the DCM that it should use the config info from its FLASH memory. If the mode is shared memory, then DCMMW will write the config info in DCM's config file, for DCM to use.")
wfDCMSaveConfigInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("nosave", 2))).clone('save')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMSaveConfigInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMSaveConfigInfo.setDescription('DCMMW uses this object to specify DCM whether it should commit the configuration information into its Flash memory or not')
wfDCMRMONMaxHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 8128)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMRMONMaxHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMRMONMaxHost.setDescription('Indicates the maximum number of hosts each RMON host control entry on DCM will store. When the table reaches this value, entries will be deleted based on an LRU algorithm. The max limit depends on the amount of memory installed in DCM. It is in the range 2048..8128. DCMMW uses this object to provide the value to DCM. Check the MIB object wfDCMmwRMONHost to verify the number of hosts that got configured in the RMON host control entry.')
wfDCMRMONDfltHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMRMONDfltHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMRMONDfltHost.setDescription('DCMMW uses this to specify DCM that it should create or not create the hostControlTable. If enabled DCMMW indicates DCM to create default host entries for the interface it is configured to.')
wfDCMRMONDfltMtrix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMRMONDfltMtrix.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMRMONDfltMtrix.setDescription('DCMMW uses this to specify DCM that it should create or not create the matrixControlTable. If enabled DCMMW indicates DCM to create default matrix entries for the interface it is configured to.')
wfDCMRMONHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMRMONHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMRMONHost.setDescription('This specifies the configured number of hosts in each RMON host control entry on DCM')
wfDCMmemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMmemSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMmemSize.setDescription("This specifies DCM board's memory size")
wfDCMhwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMhwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMhwRev.setDescription("This specifies DCM board's HW revision number")
wfDCMfwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMfwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMfwRev.setDescription("This specifies DCM board's FW revision number")
wfDCMagentImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMagentImageVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMagentImageVersion.setDescription("This specifies DCM board's Agent Image version number")
wfDCMRmonObjectSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rmon", 1), ("rmon2", 2))).clone('rmon')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDCMRmonObjectSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfDCMRmonObjectSupport.setDescription('Allows a user to specify whether they want to access RMON and RMON2 stats rmon2(2), or just RMON stats rmon(1) from a specific DCM. This attribute is only used when two DCMs are present on a system. If only one DCM is present the default value will be rmon(2) and sets to this attribute will have no affect.')
wfDCMStreamTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 3), )
if mibBuilder.loadTexts: wfDCMStreamTable.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMStreamTable.setDescription('Table containing DCM stream records')
wfDCMStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 3, 1), ).setIndexNames((0, "Wellfleet-DCMMW-MIB", "wfDCMStreamDCMIndex"), (0, "Wellfleet-DCMMW-MIB", "wfDCMStreamIndex"))
if mibBuilder.loadTexts: wfDCMStreamEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMStreamEntry.setDescription('Information concerning a specific DCM stream entry. Each stream entry corresponds to the interface the DCM is associated with.')
wfDCMStreamDCMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMStreamDCMIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMStreamDCMIndex.setDescription('An index that identifies the DCM entry of which this stream is associated with.')
wfDCMStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMStreamIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMStreamIndex.setDescription('An index that uniquely identifies the particular stream this entry is associated with.')
wfDCMStreamDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMStreamDisable.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMStreamDisable.setDescription('Enables or Disables DCM stream')
wfDCMStreamDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 16, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDCMStreamDataSource.setStatus('obsolete')
if mibBuilder.loadTexts: wfDCMStreamDataSource.setDescription('This object identifies the source of the data that this DCM stream entry is configured to analyze. This is the ifIndex value of the stream(interface).')
mibBuilder.exportSymbols("Wellfleet-DCMMW-MIB", wfDCMRMONDfltHost=wfDCMRMONDfltHost, wfDCMmwRMONMaxHost=wfDCMmwRMONMaxHost, wfDCMRMONMaxHost=wfDCMRMONMaxHost, wfDCMStreamTable=wfDCMStreamTable, wfDCMMemSize=wfDCMMemSize, wfDCMmwDisable=wfDCMmwDisable, wfDCMDisable=wfDCMDisable, wfDCMFwRev=wfDCMFwRev, wfDCMagentImageVersion=wfDCMagentImageVersion, wfDCMmwCfgMode=wfDCMmwCfgMode, wfDCMhwRev=wfDCMhwRev, wfDCMSaveConfigInfo=wfDCMSaveConfigInfo, wfDCMmwRMONDfltMtrix=wfDCMmwRMONDfltMtrix, wfDCMStreamIndex=wfDCMStreamIndex, wfDCMmwWriteConfigInfo=wfDCMmwWriteConfigInfo, wfDCMmwImageName=wfDCMmwImageName, wfDCMDelete=wfDCMDelete, wfDCMImageSaveMode=wfDCMImageSaveMode, wfDCMIndex=wfDCMIndex, wfDCMmwBootOption=wfDCMmwBootOption, wfDCMStreamCount=wfDCMStreamCount, wfDCMOperStatus=wfDCMOperStatus, wfDCMIntfType=wfDCMIntfType, wfDCMmwDelete=wfDCMmwDelete, wfDCMStreamDCMIndex=wfDCMStreamDCMIndex, wfDCMStreamDisable=wfDCMStreamDisable, wfDCMAgentImageVersion=wfDCMAgentImageVersion, wfDCMBootOption=wfDCMBootOption, wfDCMCfgMode=wfDCMCfgMode, wfDCMTable=wfDCMTable, wfDCMmwNumDCM=wfDCMmwNumDCM, wfDCMImageName=wfDCMImageName, wfDCMRMONHost=wfDCMRMONHost, wfDCMmwImageSaveMode=wfDCMmwImageSaveMode, wfDCMmw=wfDCMmw, wfDCMfwRev=wfDCMfwRev, wfDCMmwRMONDfltHost=wfDCMmwRMONDfltHost, wfDCMStreamDataSource=wfDCMStreamDataSource, wfDCMmemSize=wfDCMmemSize, wfDCMRMONDfltMtrix=wfDCMRMONDfltMtrix, wfDCMHwRev=wfDCMHwRev, wfDCMRmonObjectSupport=wfDCMRmonObjectSupport, wfDCMmwRMONHost=wfDCMmwRMONHost, wfDCMRmonAgent=wfDCMRmonAgent, wfDCMEntry=wfDCMEntry, wfDCMStreamEntry=wfDCMStreamEntry)
