#
# PySNMP MIB module CISCO-LWAPP-DOT11-LDAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOT11-LDAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
cLWlanIndex, = mibBuilder.importSymbols("CISCO-LWAPP-WLAN-MIB", "cLWlanIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Counter32, Counter64, ObjectIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Gauge32, Bits, iso, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "iso", "NotificationType", "Unsigned32")
StorageType, TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoLwappDot11LdapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 614))
ciscoLwappDot11LdapMIB.setRevisions(('2009-12-10 00:00', '2007-01-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappDot11LdapMIB.setRevisionsDescriptions(('A new textual-convention named CldlBindType has been defined. The range for cldlServerTimeout has been modified from 1-3600 to 2-30 due to modification in back-end code. The following objects have been added to cldlServerTable. 1)cldlServerBindType 2)cldlServerAuthBindUserName 3)cldlServerAuthBindPassword The group ciscoLwappDot11LdapMIBConfigGroupSup1 has been added. ciscoLwappDot11LdapMIBCompliance has been deprecated by ciscoLwappDot11LdapMIBComplianceRev1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIB.setLastUpdated('200912100000Z')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIB.setDescription('This MIB is intended to be implemented on all those devices operating as Central controllers, that terminate the Light Weight Access Point Protocol tunnel from Cisco Light-weight LWAPP Access Points. Information provided by this MIB is used to manage LDAP features on the controller. The relationship between CC and the LWAPP APs can be depicted as follows: +......+ +......+ +......+ + + + + + + + CC + + CC + + CC + + + + + + + +......+ +......+ +......+ .. . . .. . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + AP + + AP + + AP + + AP + + + + + + + + + +......+ +......+ +......+ +......+ . . . . . . . . . . . . . . . . . . . +......+ +......+ +......+ +......+ + + + + + + + + + MN + + MN + + MN + + MN + + + + + + + + + +......+ +......+ +......+ +......+ The LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Gratuitous Probe Response (GPR) The Gratuitous Probe Response feature aids in conserving battery power of WLAN-enabled cell phones by providing a high rate packet on the order of tens of milliseconds such that these kind of phones can wake up and wait at predefined intervals, to reduce battery power. The GPR packet is transmitted from the AP at a predefined time interval. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the Central Controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Mobile Node and client are used interchangeably. Lightweight Directory Access Protocol ( LDAP ) LDAP is a protocol used for obtaining directory services and runs over TCP/IP. Transport Layer Security ( TLS ) This is a cryptographic protocol which provides secure communication over the network. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol')
ciscoLwappDot11LdapMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 0))
ciscoLwappDot11LdapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 1))
ciscoLwappDot11LdapMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 2))
cldlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1))
cldlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 2))
class CldlBindType(TextualConvention, Integer32):
    description = 'This textual convention represents the kind of authentications done by the LDAP server. The semantics are as follows. anonymous(1) - This indicates that the LDAP server accepts anonymous authentication attempts. authenticated(2) - This indicates that the LDAP server authenticates based on the credentials provided in the form of username/password.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("anonymous", 1), ("authenticated", 2))

cldlServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1), )
if mibBuilder.loadTexts: cldlServerTable.setStatus('current')
if mibBuilder.loadTexts: cldlServerTable.setDescription('This table lists the information about LDAP servers configured on the controller. Entries are added or deleted by the user through the use of cldlServerRowStatus.')
cldlServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerIndex"))
if mibBuilder.loadTexts: cldlServerEntry.setStatus('current')
if mibBuilder.loadTexts: cldlServerEntry.setDescription('Each entry corresponds to a row in cldlServerTable and represents the information about an LDAP server the controller would contact for its operations.')
cldlServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cldlServerIndex.setStatus('current')
if mibBuilder.loadTexts: cldlServerIndex.setDescription('This object uniquely identifies an entry in cldlServerTable.')
cldlServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerAddressType.setStatus('current')
if mibBuilder.loadTexts: cldlServerAddressType.setDescription('This object represents the type of the network address made available through cldlServerAddress.')
cldlServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerAddress.setStatus('current')
if mibBuilder.loadTexts: cldlServerAddress.setDescription('This object represents the address of the LDAP server that can be contacted by the controller for the purpose of authentication, authorization and accounting.')
cldlServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 4), InetPortNumber().clone(389)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerPortNum.setStatus('current')
if mibBuilder.loadTexts: cldlServerPortNum.setDescription('This object represents the port number at which the controller contacts the LDAP server.')
cldlServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerState.setStatus('current')
if mibBuilder.loadTexts: cldlServerState.setDescription("This object indicates whether the LDAP server is currently in use by the controller. A value of 'true' indicates that the LDAP server is in use. A value of 'false' indicates that the LDAP server is not in use.")
cldlServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 30))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerTimeout.setStatus('current')
if mibBuilder.loadTexts: cldlServerTimeout.setDescription('This object represents the retransmit time-out value for this LDAP server. If there is no response from the LDAP server, the controller will wait for this duration, before retransmitting.')
cldlServerUserBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerUserBase.setStatus('current')
if mibBuilder.loadTexts: cldlServerUserBase.setDescription('This object represents the name of the sub-tree in the LDAP server that contains the information about all the users in that sub-tree.')
cldlServerUserNameAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerUserNameAttribute.setStatus('current')
if mibBuilder.loadTexts: cldlServerUserNameAttribute.setDescription('This object represents the attribute that stores the name of the user.')
cldlServerUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerUserName.setStatus('current')
if mibBuilder.loadTexts: cldlServerUserName.setDescription('This object represents the name of the user. This is the value for the attribute identified by cldlServerUserNameAttribute.')
cldlServerSecurityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerSecurityEnable.setStatus('current')
if mibBuilder.loadTexts: cldlServerSecurityEnable.setDescription("This object indicates whether the LDAP transactions are secured. A value of 'true' indicates that all the LDAP transactions of the controller are secured the use of TLS tunnel. A value of 'false' indicates that the LDAP transactions are not secured.")
cldlServerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerStorageType.setStatus('current')
if mibBuilder.loadTexts: cldlServerStorageType.setDescription('This object represents the storage type for this conceptual row.')
cldlServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cldlServerRowStatus.setDescription('This object represents the status column for a conceptual row in this table.')
cldlServerBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 13), CldlBindType().clone('anonymous')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerBindType.setStatus('current')
if mibBuilder.loadTexts: cldlServerBindType.setDescription('This object represents the kind of authentication the Controller does with the LDAP server.')
cldlServerAuthBindUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerAuthBindUserName.setStatus('current')
if mibBuilder.loadTexts: cldlServerAuthBindUserName.setDescription("This object represents the name used by the Controller for the authentication with the LDAP server. For values other than 'authenticated', as identified through cldlServerBindType, this object will be populated with an empty string.")
cldlServerAuthBindPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 1, 1, 15), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldlServerAuthBindPassword.setStatus('current')
if mibBuilder.loadTexts: cldlServerAuthBindPassword.setDescription("This object represents the password used by the Controller for authentication with the LDAP server. For security purposes, this object will be populated with the string '****', when a valid password has been configured. For values other than 'authenticated', as identified through cldlServerBindType, this object will be populated with an empty string.")
cldlWlanLdapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 2), )
if mibBuilder.loadTexts: cldlWlanLdapTable.setStatus('current')
if mibBuilder.loadTexts: cldlWlanLdapTable.setDescription('This table helps to map LDAP servers for WLANs from cldlServerTable through the use of cldlServerIndex. When a client gets associated to a WLAN, the controller uses those LDAP servers that are mapped to that WLAN for access to information about the clients. The creation of a new row in cLWlanConfigTable, through an explicit network management action, results in creation of an entry in this table. Similarly, deletion of a row in cLWlanConfigTable through user action causes the deletion of corresponding row in this table. This table has an one-to-one relationship with cLWlanConfigTable of CISCO-LWAPP-WLAN-MIB. There exists an entry in this table for each corresponding entry in the cLWlanConfigTable.')
cldlWlanLdapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-WLAN-MIB", "cLWlanIndex"))
if mibBuilder.loadTexts: cldlWlanLdapEntry.setStatus('current')
if mibBuilder.loadTexts: cldlWlanLdapEntry.setDescription('Each entry represents a conceptual row in cldlWlanLdapTable and represents the LDAP configuration for a particular WLAN identified by cLWlanIndex.')
cldlWlanLdapPrimaryServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldlWlanLdapPrimaryServerIndex.setStatus('current')
if mibBuilder.loadTexts: cldlWlanLdapPrimaryServerIndex.setDescription('The object represents the value that maps to the primary LDAP server for this WLAN. A value of 0 indicates that the primary LDAP server is not configured for this WLAN.')
cldlWlanLdapSecondaryServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldlWlanLdapSecondaryServerIndex.setStatus('current')
if mibBuilder.loadTexts: cldlWlanLdapSecondaryServerIndex.setDescription('The object represents the value that maps to the secondary LDAP server for this WLAN. A value of 0 indicates that the primary LDAP server is not configured for this WLAN.')
cldlWlanLdapTertiaryServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 614, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldlWlanLdapTertiaryServerIndex.setStatus('current')
if mibBuilder.loadTexts: cldlWlanLdapTertiaryServerIndex.setDescription('The object represents the value that maps to the tertiary LDAP server for this WLAN. A value of 0 indicates that the primary LDAP server is not configured for this WLAN.')
ciscoLwappDot11LdapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 2, 1))
ciscoLwappDot11LdapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 614, 2, 2))
ciscoLwappDot11LdapMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 614, 2, 1, 1)).setObjects(("CISCO-LWAPP-DOT11-LDAP-MIB", "ciscoLwappDot11LdapMIBConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11LdapMIBCompliance = ciscoLwappDot11LdapMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappDot11LdapMIB module.')
ciscoLwappDot11LdapMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 614, 2, 1, 2)).setObjects(("CISCO-LWAPP-DOT11-LDAP-MIB", "ciscoLwappDot11LdapMIBConfigGroup"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "ciscoLwappDot11LdapMIBConfigGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11LdapMIBComplianceRev1 = ciscoLwappDot11LdapMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappDot11LdapMIB module.')
ciscoLwappDot11LdapMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 614, 2, 2, 1)).setObjects(("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerAddressType"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerAddress"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerPortNum"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerState"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerTimeout"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerUserBase"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerUserNameAttribute"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerUserName"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerSecurityEnable"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerRowStatus"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerStorageType"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlWlanLdapPrimaryServerIndex"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlWlanLdapSecondaryServerIndex"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlWlanLdapTertiaryServerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11LdapMIBConfigGroup = ciscoLwappDot11LdapMIBConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIBConfigGroup.setDescription('This collection of objects specifies the LDAP configuration on the controller.')
ciscoLwappDot11LdapMIBConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 614, 2, 2, 2)).setObjects(("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerBindType"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerAuthBindUserName"), ("CISCO-LWAPP-DOT11-LDAP-MIB", "cldlServerAuthBindPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11LdapMIBConfigGroupSup1 = ciscoLwappDot11LdapMIBConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappDot11LdapMIBConfigGroupSup1.setDescription("This group of objects supplements the ciscoLwappDot11LdapMIBConfigGroup, to configure the information about the Controller's authentication done with the LDAP server.")
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-LDAP-MIB", cldlServerTimeout=cldlServerTimeout, PYSNMP_MODULE_ID=ciscoLwappDot11LdapMIB, cldlServerAuthBindUserName=cldlServerAuthBindUserName, cldlWlanLdapPrimaryServerIndex=cldlWlanLdapPrimaryServerIndex, cldlServerPortNum=cldlServerPortNum, cldlServerSecurityEnable=cldlServerSecurityEnable, cldlServerIndex=cldlServerIndex, cldlServerUserName=cldlServerUserName, cldlServerAuthBindPassword=cldlServerAuthBindPassword, ciscoLwappDot11LdapMIBConfigGroupSup1=ciscoLwappDot11LdapMIBConfigGroupSup1, ciscoLwappDot11LdapMIBComplianceRev1=ciscoLwappDot11LdapMIBComplianceRev1, ciscoLwappDot11LdapMIBConfigGroup=ciscoLwappDot11LdapMIBConfigGroup, ciscoLwappDot11LdapMIBNotifs=ciscoLwappDot11LdapMIBNotifs, cldlServerStorageType=cldlServerStorageType, cldlWlanLdapEntry=cldlWlanLdapEntry, ciscoLwappDot11LdapMIBCompliances=ciscoLwappDot11LdapMIBCompliances, cldlConfig=cldlConfig, cldlWlanLdapTable=cldlWlanLdapTable, cldlServerEntry=cldlServerEntry, ciscoLwappDot11LdapMIBObjects=ciscoLwappDot11LdapMIBObjects, cldlServerRowStatus=cldlServerRowStatus, ciscoLwappDot11LdapMIBCompliance=ciscoLwappDot11LdapMIBCompliance, ciscoLwappDot11LdapMIBConform=ciscoLwappDot11LdapMIBConform, cldlServerBindType=cldlServerBindType, cldlServerAddress=cldlServerAddress, CldlBindType=CldlBindType, cldlServerAddressType=cldlServerAddressType, cldlServerUserBase=cldlServerUserBase, cldlServerTable=cldlServerTable, cldlServerUserNameAttribute=cldlServerUserNameAttribute, ciscoLwappDot11LdapMIB=ciscoLwappDot11LdapMIB, cldlWlanLdapSecondaryServerIndex=cldlWlanLdapSecondaryServerIndex, ciscoLwappDot11LdapMIBGroups=ciscoLwappDot11LdapMIBGroups, cldlWlanLdapTertiaryServerIndex=cldlWlanLdapTertiaryServerIndex, cldlServerState=cldlServerState, cldlStatus=cldlStatus)
