#
# PySNMP MIB module A3COM-HUAWEI-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, NotificationType, Counter32, iso, TimeTicks, Integer32, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "NotificationType", "Counter32", "iso", "TimeTicks", "Integer32", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "IpAddress")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
h3cDomain = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46))
if mibBuilder.loadTexts: h3cDomain.setLastUpdated('200908050000Z')
if mibBuilder.loadTexts: h3cDomain.setOrganization('H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDomain.setContactInfo('Platform Team Beijing Institute H3C Tech, Inc. Http://www.h3c.com E-mail:support@h3c.com ')
if mibBuilder.loadTexts: h3cDomain.setDescription('The MIB module is used for managing domain.')
class H3cModeOfDomainScheme(TextualConvention, Integer32):
    description = 'The scheme mode of the domain. none: indicates the domain has no scheme. local:indicates the domain will use local-server as a scheme. radius:indicates the domain will use radius scheme. tacacs:indicates the domain will use tacacs scheme.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("local", 2), ("radius", 3), ("tacacs", 4))

class H3cAAATypeDomainScheme(TextualConvention, Integer32):
    description = 'The service type of the server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("accounting", 1), ("authentication", 2), ("authorization", 3), ("none", 4))

class H3cAccessModeofDomainScheme(TextualConvention, Integer32):
    description = 'The access mode of the domain.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("default", 1), ("login", 2), ("lanAccess", 3), ("portal", 4), ("ppp", 5), ("gcm", 6), ("dvpn", 7), ("dhcp", 8), ("voice", 9), ("superauthen", 10), ("command", 11), ("wapi", 12))

h3cDomainControl = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 1))
h3cDomainDefault = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDomainDefault.setStatus('current')
if mibBuilder.loadTexts: h3cDomainDefault.setDescription("Specifies default domain on the equipment. Default value is 'system'.")
h3cDomainTables = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2))
h3cDomainInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1), )
if mibBuilder.loadTexts: h3cDomainInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cDomainInfoTable.setDescription('The (conceptual) table listing the domains.')
h3cDomainInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOMAIN-MIB", "h3cDomainName"))
if mibBuilder.loadTexts: h3cDomainInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDomainInfoEntry.setDescription('An entry (conceptual row) representing a domain.')
h3cDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: h3cDomainName.setStatus('current')
if mibBuilder.loadTexts: h3cDomainName.setDescription('An index uniquely identifies a domain. ')
h3cDomainState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainState.setStatus('current')
if mibBuilder.loadTexts: h3cDomainState.setDescription('The state of the domain, which reflects whether the domain is active. Default value is active.')
h3cDomainMaxAccessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainMaxAccessNum.setStatus('current')
if mibBuilder.loadTexts: h3cDomainMaxAccessNum.setDescription('The maximum number which the domain allows to access. If the value is set to 0, the access limit will be disabled.')
h3cDomainVlanAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("integer", 1), ("string", 2), ("vlanlist", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainVlanAssignMode.setStatus('current')
if mibBuilder.loadTexts: h3cDomainVlanAssignMode.setDescription('The vlan assignment mode. The mode SHOULD be the same as the mode of corresponding server. 1 (integer) - Integer Vlan assignment mode. 2 (string) - String Vlan assignment mode. 3 (vlanlist) - VLAN-List Vlan assignment mode. The default value is integer.')
h3cDomainIdleCutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIdleCutEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIdleCutEnable.setDescription('The idle cut control. Setting this attribute to true, the connection will be cut when the flow is less than h3cDomainIdleCutMinFlow and lasts h3cDomainIdleCutMaxTime. Default value is false.')
h3cDomainIdleCutMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIdleCutMaxTime.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIdleCutMaxTime.setDescription('The maximal time of idle-cut. The unit is minute. If the value of h3cDomainIdleCutEnable is false, the value of h3cDomainIdleCutMaxTime is meaningless.')
h3cDomainIdleCutMinFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10240000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIdleCutMinFlow.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIdleCutMinFlow.setDescription('The minimal flow of idle-cut. The unit is byte. If the value of h3cDomainIdleCutEnable is false, the value of h3cDomainIdleCutMinFlow is meaningless.')
h3cDomainMessengerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainMessengerEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDomainMessengerEnable.setDescription('The messenger service control. If set h3cDomainMessengerEnable to true, h3cDomainMessengerLimitTime and h3cDomainMessengerSpanTime must be set to valid values. Default value is false.')
h3cDomainMessengerLimitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainMessengerLimitTime.setStatus('current')
if mibBuilder.loadTexts: h3cDomainMessengerLimitTime.setDescription('The messenger service limit time. The unit is minute. If the value of h3cDomainMessengerEnable is false, the value of h3cDomainMessengerLimitTime is meaningless.')
h3cDomainMessengerSpanTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainMessengerSpanTime.setStatus('current')
if mibBuilder.loadTexts: h3cDomainMessengerSpanTime.setDescription('The messenger service span time. The unit is minute. It must be a multiple of 5. If the value of h3cDomainMessengerEnable is false, the value of h3cDomainMessengerSpanTime is meaningless.')
h3cDomainSelfServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSelfServiceEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSelfServiceEnable.setDescription('The self service control. If set h3cDomainSelfServiceEnable to true, h3cDomainSelfServiceURL must be set to a valid value. Default value is FALSE.')
h3cDomainSelfServiceURL = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSelfServiceURL.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSelfServiceURL.setDescription('Self-service URL(Uniform Resource Locator) of the domain.')
h3cDomainAccFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("reject", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainAccFailureAction.setStatus('current')
if mibBuilder.loadTexts: h3cDomainAccFailureAction.setDescription('Defines the action that authentication should be taken if authentication succeeds but the associated accounting start fails. 1 (ignore) - treat as authentication success; ignore accounting start failure. 2 (reject) - treat as authentication failed if corresponding accounting start fails. Default value is reject.')
h3cDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDomainRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which supports active status and CreateAndGo, Destroy operation. To destroy an existent row, the domain of the row MUST NOT be used by user.')
h3cDomainCurrentAccessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDomainCurrentAccessNum.setStatus('current')
if mibBuilder.loadTexts: h3cDomainCurrentAccessNum.setDescription('The current access number of the domain.')
h3cDomainSchemeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2), )
if mibBuilder.loadTexts: h3cDomainSchemeTable.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeTable.setDescription('The (conceptual) table listing schemes of all domains.')
h3cDomainSchemeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOMAIN-MIB", "h3cDomainName"), (0, "A3COM-HUAWEI-DOMAIN-MIB", "h3cDomainSchemeIndex"))
if mibBuilder.loadTexts: h3cDomainSchemeEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeEntry.setDescription('An entry (conceptual row) representing an IP pool of a domain')
h3cDomainSchemeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cDomainSchemeIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeIndex.setDescription('The scheme index of domain, which is an identifier of a domain scheme.')
h3cDomainSchemeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 2), H3cModeOfDomainScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSchemeMode.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeMode.setDescription('The scheme mode of the domain. Setting h3cDomainSchemeMode to none(1) indicates the domain has none scheme. Setting h3cDomainSchemeMode to local(2) indicates the domain will use local-server as a scheme. Setting h3cDomainSchemeMode to radius(3) or tacacs(4) indicates the domain will use radius or tacacs scheme. If set h3cDomainSchemeMode to radius(3) or tacacs(4), h3cDomainAuthSchemeName and h3cDomainAcctSchemeName must be set to valid values. And if h3cDomainSchemeMode is set to none(1) or local(2), the value of h3cDomainAuthSchemeName and h3cDomainAcctSchemeName will be ignored.')
h3cDomainAuthSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainAuthSchemeName.setStatus('current')
if mibBuilder.loadTexts: h3cDomainAuthSchemeName.setDescription('The authentication scheme name of domain. If h3cDomainSchemeMode is set to radius or tacacs, the h3cDomainAuthSchemeName must be configured with a valid value.')
h3cDomainAcctSchemeName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainAcctSchemeName.setStatus('current')
if mibBuilder.loadTexts: h3cDomainAcctSchemeName.setDescription('The accounting scheme name of the domain. If h3cDomainSchemeMode is set to radius or tacacs, the h3cDomainAcctSchemeName must be configured with a valid value.')
h3cDomainSchemeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSchemeRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which supports active status and createAndGo, destroy operation. To create a new row, h3cDomainSchemeMode must be specified. To destroy an existent row, the scheme of the row MUST NOT be used by user.')
h3cDomainSchemeAAAType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 6), H3cAAATypeDomainScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSchemeAAAType.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeAAAType.setDescription('Service Type of the server.')
h3cDomainSchemeAAAName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSchemeAAAName.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeAAAName.setDescription('The scheme name of the domain, whether the scheme represents accounting, authentication or authorization references the object h3cDomainSchemeAAAType. The value of the object must be valid if the value of h3cDomainSchemeMode is radius or tacacs, the value of the object will be ignored if the value of h3cDomainSchemeMode is none or local. If the domain has no scheme, there will be a null string. If this object is supported, the objects h3cDomainAuthSchemeName and h3cDomainAcctSchemeName will be ignored.')
h3cDomainSchemeAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 2, 1, 8), H3cAccessModeofDomainScheme()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainSchemeAccessMode.setStatus('current')
if mibBuilder.loadTexts: h3cDomainSchemeAccessMode.setDescription('The access mode of the domain scheme.')
h3cDomainIpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3), )
if mibBuilder.loadTexts: h3cDomainIpPoolTable.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolTable.setDescription('The (conceptual) table listing IP pools of all domains.')
h3cDomainIpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOMAIN-MIB", "h3cDomainName"), (0, "A3COM-HUAWEI-DOMAIN-MIB", "h3cDomainIpPoolNum"))
if mibBuilder.loadTexts: h3cDomainIpPoolEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolEntry.setDescription('An entry (conceptual row) representing an IP pool of a domain.')
h3cDomainIpPoolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: h3cDomainIpPoolNum.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolNum.setDescription('The number of IP pool, which is an identifier of an IP pool.')
h3cDomainIpPoolLowIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIpPoolLowIpAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolLowIpAddrType.setDescription('The low IP addresses type (IPv4 or IPv6) of IP pool.')
h3cDomainIpPoolLowIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIpPoolLowIpAddr.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolLowIpAddr.setDescription('The low IP address of IP pool.')
h3cDomainIpPoolLen = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIpPoolLen.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolLen.setDescription('The length of IP pool. Default value is 1.')
h3cDomainIpPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 46, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDomainIpPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDomainIpPoolRowStatus.setDescription('This object is responsible for managing the creation, deletion and modification of rows, which supports active status and CreateAndGo, Destroy operation. To create a new row, h3cDomainIpPoolNum and h3cDomainIpPoolLowIpAddr must be specified. To destroy an existent row, the IP pool of this row MUST NOT be used by user.')
mibBuilder.exportSymbols("A3COM-HUAWEI-DOMAIN-MIB", h3cDomainIpPoolLen=h3cDomainIpPoolLen, h3cDomainIpPoolLowIpAddr=h3cDomainIpPoolLowIpAddr, h3cDomainMessengerEnable=h3cDomainMessengerEnable, h3cDomainIpPoolRowStatus=h3cDomainIpPoolRowStatus, h3cDomain=h3cDomain, h3cDomainSchemeTable=h3cDomainSchemeTable, h3cDomainIpPoolTable=h3cDomainIpPoolTable, h3cDomainMaxAccessNum=h3cDomainMaxAccessNum, H3cAAATypeDomainScheme=H3cAAATypeDomainScheme, h3cDomainSchemeAccessMode=h3cDomainSchemeAccessMode, h3cDomainInfoTable=h3cDomainInfoTable, h3cDomainDefault=h3cDomainDefault, h3cDomainSchemeEntry=h3cDomainSchemeEntry, h3cDomainCurrentAccessNum=h3cDomainCurrentAccessNum, h3cDomainSelfServiceURL=h3cDomainSelfServiceURL, h3cDomainState=h3cDomainState, h3cDomainTables=h3cDomainTables, h3cDomainAuthSchemeName=h3cDomainAuthSchemeName, h3cDomainIdleCutEnable=h3cDomainIdleCutEnable, h3cDomainRowStatus=h3cDomainRowStatus, h3cDomainIdleCutMinFlow=h3cDomainIdleCutMinFlow, PYSNMP_MODULE_ID=h3cDomain, h3cDomainSchemeAAAType=h3cDomainSchemeAAAType, h3cDomainSchemeMode=h3cDomainSchemeMode, h3cDomainControl=h3cDomainControl, h3cDomainVlanAssignMode=h3cDomainVlanAssignMode, H3cAccessModeofDomainScheme=H3cAccessModeofDomainScheme, h3cDomainIdleCutMaxTime=h3cDomainIdleCutMaxTime, h3cDomainAccFailureAction=h3cDomainAccFailureAction, h3cDomainMessengerLimitTime=h3cDomainMessengerLimitTime, h3cDomainIpPoolLowIpAddrType=h3cDomainIpPoolLowIpAddrType, H3cModeOfDomainScheme=H3cModeOfDomainScheme, h3cDomainSchemeRowStatus=h3cDomainSchemeRowStatus, h3cDomainSchemeAAAName=h3cDomainSchemeAAAName, h3cDomainSelfServiceEnable=h3cDomainSelfServiceEnable, h3cDomainIpPoolEntry=h3cDomainIpPoolEntry, h3cDomainIpPoolNum=h3cDomainIpPoolNum, h3cDomainAcctSchemeName=h3cDomainAcctSchemeName, h3cDomainMessengerSpanTime=h3cDomainMessengerSpanTime, h3cDomainInfoEntry=h3cDomainInfoEntry, h3cDomainSchemeIndex=h3cDomainSchemeIndex, h3cDomainName=h3cDomainName)
