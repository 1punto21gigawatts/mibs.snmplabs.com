#
# PySNMP MIB module CPQHSV110V3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQHSV110V3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Unsigned32, TimeTicks, NotificationType, ModuleIdentity, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Counter64, NotificationType, iso, Counter32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Unsigned32", "TimeTicks", "NotificationType", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Counter64", "NotificationType", "iso", "Counter32", "Bits", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
compaq = MibIdentifier((1, 3, 6, 1, 4, 1, 232))
cpqElementManager = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136))
cpqHSV = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1))
cpqHSVAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 1))
cpqHSVServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 2))
hsvObject = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 3))
maHSVMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 4))
scell = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 2))
host = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3))
nsc = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4))
shelf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8))
agManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: agManufacturer.setDescription('The name of the StorageWorks HSV Agent manufacturer.')
agMajVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMajVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agMajVersion.setDescription('StorageWorks HSV Agent Major Version Number (e.g., 3 for 3.0).')
agMinVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMinVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agMinVersion.setDescription('StorageWorks HSV Agent Minor Version Number (e.g., 0 for 3.0).')
agHostName = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agHostName.setStatus('mandatory')
if mibBuilder.loadTexts: agHostName.setDescription('The Host System Network Name where the agent resides.')
agEnterprise = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnterprise.setStatus('mandatory')
if mibBuilder.loadTexts: agEnterprise.setDescription('The Enterprise ID subtree for StorageWorks HSV Agent MIB is registered.')
agDescription = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDescription.setStatus('mandatory')
if mibBuilder.loadTexts: agDescription.setDescription('The StorageWorks HSV Agent description.')
agStatusTable = MibTable((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7), )
if mibBuilder.loadTexts: agStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: agStatusTable.setDescription('This table holds the status information for each HSV Management Agent.')
agentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1), ).setIndexNames((0, "CPQHSV110V3-MIB", "agentEntryIndex"))
if mibBuilder.loadTexts: agentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentEntry.setDescription('The Agent information entry.')
agentEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentEntryIndex.setDescription('The index into agentStatusTable .')
agentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentStatus.setDescription('This variable reports the overall status of the Agent. INFORMATIONAL: Normal Operating Condition MINOR: Warning Condition MAJOR: Failure or Failure Immanent CRITICAL: Agent condition is critical or unknown')
agentEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEventCode.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventCode.setDescription('The management agent event code.')
agentEventLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEventLevel.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventLevel.setDescription('The management event level.')
agentEventTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEventTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventTimeDate.setDescription('The date and time the event occurred dd-mm-yyyy/hr:min:sec.')
agentEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 1, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEventDescription.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventDescription.setDescription('The Description of the management agent event.')
srvCPU = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvCPU.setStatus('mandatory')
if mibBuilder.loadTexts: srvCPU.setDescription('The server CPU type (e.g., 80486).')
srvComputerType = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvComputerType.setStatus('mandatory')
if mibBuilder.loadTexts: srvComputerType.setDescription('The server Computer type (e.g., PC/AT).')
srvModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvModel.setStatus('mandatory')
if mibBuilder.loadTexts: srvModel.setDescription('The server model number.')
srvSubModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvSubModel.setStatus('mandatory')
if mibBuilder.loadTexts: srvSubModel.setDescription('The server submodel number.')
srvBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: srvBiosVersion.setDescription('The server BIOS Version.')
srvOS = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvOS.setStatus('mandatory')
if mibBuilder.loadTexts: srvOS.setDescription('The server operating system name (e.g., WINNT).')
srvOSMajVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvOSMajVersion.setStatus('mandatory')
if mibBuilder.loadTexts: srvOSMajVersion.setDescription('The server OS major version number (e.g., 3 for WINNT 3.51).')
srvOSMinVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srvOSMinVersion.setStatus('mandatory')
if mibBuilder.loadTexts: srvOSMinVersion.setDescription('The server OS minor version number (e.g., 51 for WINNT 3.51).')
maHSVMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maHSVMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: maHSVMibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
maHSVMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maHSVMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: maHSVMibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
scellTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellTotal.setStatus('mandatory')
if mibBuilder.loadTexts: scellTotal.setDescription('The total number of StorageCells (storage pools) present in the Fusion System.')
scellStatusTable = MibTable((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2), )
if mibBuilder.loadTexts: scellStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: scellStatusTable.setDescription('This table holds the status information for each StorageCell.')
scellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1), ).setIndexNames((0, "CPQHSV110V3-MIB", "scellEntryIndex"))
if mibBuilder.loadTexts: scellEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scellEntry.setDescription('The StorageCell information entry.')
scellEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scellEntryIndex.setDescription('The index into scellStatusTable .')
scellName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellName.setStatus('mandatory')
if mibBuilder.loadTexts: scellName.setDescription('The StorageCell Name.')
scellUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellUUID.setStatus('mandatory')
if mibBuilder.loadTexts: scellUUID.setDescription('The StorageCell unique ID.')
scellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("informational", 1), ("minor", 2), ("major", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scellStatus.setDescription('This variable reports the overall status of the StorageCell. INFORMATIONAL: Normal Operating Condition MINOR: Warning Condition MAJOR: Failure or Failure Immanent CRITICAL: Condition is critical or unknown')
scellEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellEventDescription.setStatus('mandatory')
if mibBuilder.loadTexts: scellEventDescription.setDescription('The StorageCell Event Description.')
scellEventTimeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellEventTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: scellEventTimeDate.setDescription('The StorageCell Event Time and Date.')
scellEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellEventCode.setStatus('mandatory')
if mibBuilder.loadTexts: scellEventCode.setDescription('The StorageCell Event Code.')
scellSWComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellSWComponent.setStatus('mandatory')
if mibBuilder.loadTexts: scellSWComponent.setDescription('The Event Code Software Component ID.')
scellECode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellECode.setStatus('mandatory')
if mibBuilder.loadTexts: scellECode.setDescription('The StorageCell Event Code event number.')
scellCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellCAC.setStatus('mandatory')
if mibBuilder.loadTexts: scellCAC.setDescription('The event code Corrective Action Code.')
scellEIP = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellEIP.setStatus('mandatory')
if mibBuilder.loadTexts: scellEIP.setDescription('The Event Code EIP Type.')
scellNameDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scellNameDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: scellNameDateTime.setDescription('The StorageCell Name: Date & Time of Event.')
hostTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostTotal.setStatus('mandatory')
if mibBuilder.loadTexts: hostTotal.setDescription('The total number of hosts attached the Fusion System.')
hostStatusTable = MibTable((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 2), )
if mibBuilder.loadTexts: hostStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: hostStatusTable.setDescription('This table holds the status information for each Host.')
hostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 2, 1), ).setIndexNames((0, "CPQHSV110V3-MIB", "hostEntryIndex"))
if mibBuilder.loadTexts: hostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hostEntry.setDescription('The Host information entry.')
hostEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hostEntryIndex.setDescription('The index into hostStatusTable .')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription('The Host Name.')
hostUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostUUID.setStatus('mandatory')
if mibBuilder.loadTexts: hostUUID.setDescription('The Host unique ID.')
hostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("informational", 0), ("minor", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hostStatus.setDescription('This variable reports the overall status of the Host. INFORMATIONAL: Normal Operating Condition MINOR: Warning Condition MAJOR: Failure or Failure Immanent CRITICAL: Condition is critical or unknown')
nscTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscTotal.setStatus('mandatory')
if mibBuilder.loadTexts: nscTotal.setDescription('The total number of Network Storage Controllers present in the Fusion System.')
nscStatusTable = MibTable((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 2), )
if mibBuilder.loadTexts: nscStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nscStatusTable.setDescription('This table holds the status information for each Network Storage Controller.')
nscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 2, 1), ).setIndexNames((0, "CPQHSV110V3-MIB", "nscEntryIndex"))
if mibBuilder.loadTexts: nscEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nscEntry.setDescription('The NSC information entry.')
nscEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nscEntryIndex.setDescription('The index into nscStatusTable .')
nscName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscName.setStatus('mandatory')
if mibBuilder.loadTexts: nscName.setDescription('The Network Storage Controller Name.')
nscUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscUUID.setStatus('mandatory')
if mibBuilder.loadTexts: nscUUID.setDescription('The NSC unique ID.')
nscStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("informational", 0), ("minor", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscStatus.setDescription('This variable reports the overall status of the Network Storage Controller. INFORMATIONAL: Normal Operating Condition MINOR: Warning Condition MAJOR: Failure or Failure Immanent CRITICAL: Condition is critical or unknown')
shelfTotal = MibScalar((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTotal.setStatus('mandatory')
if mibBuilder.loadTexts: shelfTotal.setDescription('The total number of disk shelves present in the HSV system.')
shelfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2), )
if mibBuilder.loadTexts: shelfStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: shelfStatusTable.setDescription('This table holds the status information for each Shelf.')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1), ).setIndexNames((0, "CPQHSV110V3-MIB", "shelfEntryIndex"))
if mibBuilder.loadTexts: shelfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: shelfEntry.setDescription('The Shelf information entry.')
shelfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: shelfEntryIndex.setDescription('The index into shelfStatusTable .')
shelfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: shelfStatus.setDescription('This variable reports the overall status of the Shelf. OTHER: unknown or undeterminable OK: Normal Operating Condition DEGRADED: Warning Condition FAILED: Failure')
shelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfId.setStatus('mandatory')
if mibBuilder.loadTexts: shelfId.setDescription('The Shelf Id (shelf number).')
shelfElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfElementType.setStatus('mandatory')
if mibBuilder.loadTexts: shelfElementType.setDescription('The Shelf Element type. 01: Disk 02: Power Supply 03: Fan 04: Temp Sensor 06: Alarm Horn 07: EMU 12: LCD 15: GBIC 16: Language 17: Comm Port 18: Volt Sensor 19: Amp Sensor 128:Enclosure 130:Back plane 255:Host')
shelfElementNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfElementNum.setStatus('mandatory')
if mibBuilder.loadTexts: shelfElementNum.setDescription('Which particular Element of that type.')
shelfErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 136, 1, 3, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: shelfErrorCode.setDescription("The Element Type's Error Code.")
emuEventTrapInformative = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "shelfId"), ("CPQHSV110V3-MIB", "shelfElementType"), ("CPQHSV110V3-MIB", "shelfElementNum"), ("CPQHSV110V3-MIB", "shelfErrorCode"))
if mibBuilder.loadTexts: emuEventTrapInformative.setDescription('An EMU Informational event has occurred scellNameDateTime: StorageCell name, and date/time emuShelfId: disk shelf number in the cabinet emuElementType: the element type 01: Disk 02: Pwr Supply 03: Fan 04: Temp Sensor 06: Alarm Horn 07: EMU 12: LCD 15: Xcvr 16: Lang 17: Comm Port 18: Volt Sensor 19: Amp Sensor 128:Encl 130:Back plane emuErrorCode: error number ')
emuEventTrapNoncritical = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "shelfId"), ("CPQHSV110V3-MIB", "shelfElementType"), ("CPQHSV110V3-MIB", "shelfElementNum"), ("CPQHSV110V3-MIB", "shelfErrorCode"))
if mibBuilder.loadTexts: emuEventTrapNoncritical.setDescription('An EMU Non-critical event has occurred scellNameDateTime: StorageCell name, and date/time emuShelfId: disk shelf number in the cabinet emuElementType: the element type 01: Disk 02: Pwr Supply 03: Fan 04: Temp Sensor 06: Alarm Horn 07: EMU 12: LCD 15: Xcvr 16: Lang 17: Comm Port 18: Volt Sensor 19: Amp Sensor 128:Encl 130:Back plane emuErrorCode: error number ')
emuEventTrapCritical = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "shelfId"), ("CPQHSV110V3-MIB", "shelfElementType"), ("CPQHSV110V3-MIB", "shelfElementNum"), ("CPQHSV110V3-MIB", "shelfErrorCode"))
if mibBuilder.loadTexts: emuEventTrapCritical.setDescription('An EMU Critical event has occurred scellNameDateTime: StorageCell name, and date/time emuShelfId: disk shelf number in the cabinet emuElementType: the element type 01: Disk 02: Pwr Supply 03: Fan 04: Temp Sensor 06: Alarm Horn 07: EMU 12: LCD 15: Xcvr 16: Lang 17: Comm Port 18: Volt Sensor 19: Amp Sensor 128:Encl 130:Back plane emuErrorCode: error number ')
emuEventTrapUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "shelfId"), ("CPQHSV110V3-MIB", "shelfElementType"), ("CPQHSV110V3-MIB", "shelfElementNum"), ("CPQHSV110V3-MIB", "shelfErrorCode"))
if mibBuilder.loadTexts: emuEventTrapUnrecoverable.setDescription('An EMU Unrecoverable event has occurred scellNameDateTime: StorageCell name, and date/time emuShelfId: disk shelf number in the cabinet emuElementType: the element type 01: Disk 02: Pwr Supply 03: Fan 04: Temp Sensor 06: Alarm Horn 07: EMU 12: LCD 15: Xcvr 16: Lang 17: Comm Port 18: Volt Sensor 19: Amp Sensor 128:Encl 130:Back plane emuErrorCode: error number ')
sCellEventTrap_1_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600256)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_1_0.setDescription('Severity: Normal -- informational in nature. During Executive Services initialization the system time value was set to the value contained in the time field. The action field contains one of the following codes which describes the condition that caused the time value to be chosen: <UL><LI>0 = TOY clock unavailable; time reset to default date and time. <LI>1 = TOY clock time value was less than or equal to the last known time value previously stored in nonvolatile memory; time reset to default date and time. <LI>2 = EDC was bad for last known time value previously stored in nonvolatile memory; time reset to default date and time. <LI>3 = TOY clock not running; time reset to default date and time. <LI>4 = TOY clock time value believed to be accurate; time set to TOY clock time value. </UL>')
sCellEventTrap_1_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600257)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_1_1.setDescription("Severity: Normal -- informational in nature. The system time value was set to the value contained in the time field by a call to the EXEC$SET_TIME service. As part of setting the time in a dual HSV110 controller configuration, the times are synchronized. The action field contains one of the following codes which describes the action taken: <UL><LI>0 = The time was set to the time value on this HSV110 controller. <LI>1 = The master HSV110 controller requested the slave HSV110 controller to set its time to the time value. <LI>2 = The slave HSV110 controller set the local time to the time value. <LI>3 = The HSV110 controller's TOY clock was set to the time value. </UL>")
sCellEventTrap_3_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600768)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_0.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the node_name field has failed in communicating with the Cabinet (Rack) Bus Interface Controller.')
sCellEventTrap_3_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600769)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_1.setDescription("Severity: Critical -- failure or failure imminent. The physical disk drive identified by the device field has been rendered inoperable. <UL><LI>If the flags.quorum_disk flag is nonzero, the physical disk drive is the Storage System Quorum disk identified in the quorum_sequence field. <LI>If the flags.inq_state flag is nonzero, the content of the inq_data and capacity fields is valid. <LI>If the rss_flags.member_abnormal flag is nonzero, the content of the member_state field is valid. </UL>The rack_num field will not be valid until a future release. <P> The reason_code field contains a code giving the reason the physical disk drive has been rendered inoperable: <UL><LI>0x001 = CS IO failure <LI>0x002 = Scrubber IO failure <LI>0x003 = Attempt to set CBIT on normal drive <LI>0x004 = Attempt to set CBIT on merging drive <LI>0x100 = The Target Discovery Service Descriptor retry count has been exceeded <LI>0x101 = Inoperable for Bad Block Replacement <LI>0x102 = The soft error count has been exceeded <LI>0x103 = The number of exchange timeouts permitted was exceeded <LI>0x104 = Communication with drive has failed an excessive number of times <LI>0x105 = The number of retries has been exceeded <LI>0x106 = Medium/Hardware Errors encountered on this physical disk drive <LI>0x107 = The number of Directed LIP's has surpassed the threshold <LI>0x200 = Smart event from a physical disk drive not in Storage System <LI>0x201 = Smart event from a physical disk drive not a Volume <LI>0x202 = Smart event from a physical disk drive not a RSS <LI>0x203 = Failure predicted from physical disk drive <LI>0x204 = Can't read from physical disk drive from the poll <LI>0x205 = Failure predicted from physical disk drive while deleting Disk Group <LI>0x206 = physical disk drive forced inoperative from maintenance command for temporary POID <LI>0x207 = physical disk drive forced inoperative from maintenance command for POID <LI>0x208 = Bad block recovery failed or can't read FPAB <LI>0x209 = Failure to remove volume from Storage System <LI>0x20A = Failure to update metadata </UL>")
sCellEventTrap_3_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600770)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_2.setDescription('Severity: Warning -- not failed but attention recommended or required. A physical disk drive will not be used because the maximum number of physical disk drives already exist in the current Storage System. The affected physical disk drive is identified in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The location of the physical disk drive is contained in the rack_num, dencl_num, and bay fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the reason_code, flags, rss_flags, inq_data, quorum_sequence, capacity, and member_state fields is undefined.')
sCellEventTrap_3_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600771)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_3.setDescription('Severity: Normal -- informational in nature. A HSV110 controller has begun booting. That controller is identified in the node_name field. Note that in this case the content of the scell_tag field is undefined.')
sCellEventTrap_3_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600772)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_4.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the node_name field has finished the process of bringing the Storage System, identified in the scell_tag field, online.')
sCellEventTrap_3_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600773)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_5.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the node_name field has been joined into the Storage System.')
sCellEventTrap_3_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600774)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_6.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the node_name field has been ousted from the Storage System identified in the scell_tag field.')
sCellEventTrap_3_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600775)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_7.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the node_name field is now the Storage System, identified in the scell_tag field, master.')
sCellEventTrap_3_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13600776)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_3_8.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the node_name field has been brought into the Storage System identified in the scell_tag field.')
sCellEventTrap_4_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601024)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_0.setDescription('Severity: Undetermined -- more information needed to determine severity. HSV110 controller operation was terminated due to an unrecoverable event detected by either software or hardware or due to an action initiated via the Storage System Management Interface.')
sCellEventTrap_4_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601025)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_1.setDescription("Severity: Undetermined -- more information needed to determine severity. An HSV110 controller has sent a last gasp message prior to terminating operation. The terminated HSV110 controller is identified in the lter.terminating_ctrlr field. The lter.termination_event.u.value field contains the termination cause (i.e., termination code). The lter.termination_event.termination_location field contains the termination location. The lter.termination_time field contains the termination date and time. The lter.seq field contains the index of the HSV110 controller's Last Termination Event Array element assigned to the termination event. The lter.sw_version, lter.baselevel_id, and lter.ctrlr_model_id fields identify the software level and controller model information. The lter.uptime field contains a value that represents the number of seconds the HSV110 controller has executed functional code since its first power up. Note that the reporting_ctrlr header field identifies the HSV110 controller that received the last gasp message. All other header fields reflect information supplied by the terminating controller.")
sCellEventTrap_4_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601026)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_2.setDescription('Severity: Critical -- failure or failure imminent. A machine check occurred while a termination event was being processed. The post-termination operation being performed at the time the event occurred can be derived from the lter.reuea_index field. Note: The lteihd and lter fields may not describe the event that caused the HSV110 controller to terminate operation depending on how far termination processing got before the machine check occurred.')
sCellEventTrap_4_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601027)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_3.setDescription("Severity: Critical -- failure or failure imminent. An unexpected event occurred while a termination event was being processed. The value contained in the uei.type field describes the event as follows: <UL><LI>0 = Unrecognized Unexpected Event code. <LI>1 = Power failure before initialization could complete. <LI>2 = Recursive termination before initialization could complete. <LI>3 = Terminated during the first part post-termination preparation. <LI>4 = Terminated during the load of the G3 Glue registers. <LI>5 = Terminated during the second part post-termination preparation. <LI>6 = Terminated during event report block load. <LI>7 = Terminated during initialization of all hardware components and software data structures in preparation for restart. <LI>8 = Terminated during execution of an unrecognized post-termination operation (premature). <LI>9 = Power failure during execution of a post-termination operation. <LI>A = No good entries found in Termination Event Array. (Note that this condition is expected following the first boot of a newly manufactured HSV110 controller. In that case this event can be safely ignored; no action is necessary.) <LI>B = The EDC of one or more Termination Event Array entries is bad. <LI>C = Termination Event Array entry control block revision is different. <LI>D = Termination Event Array entry information block revision is different. <LI>E = Termination Event Array entry up time value is greater than the system's up time value. <LI>F = Termination Event Array entry up time value is less than the previous entry's up time value. <LI>10= Termination Event Array entry sequence number value is less than the previous entry's sequence number value. <LI>11= Detected an unrecognized dump/restart control code. <LI>12= Failed to terminate the entity dump loop. <LI>13= Unexpected dump entity size. <LI>14= Unexpected Event Log Packet processing stage code. <LI>15= Number of Termination Parameters supplied not equal to maximum allowed as required. </UL><P> The post-termination operation being performed at the time the unexpected event occurred is contained in the uei.pto field. Note: The lteihd and lter fields may not describe the event that caused the HSV110 controller to terminate operation depending on how far termination processing got before the unexpected event occurred.")
sCellEventTrap_4_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601028)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_4.setDescription('Severity: Normal -- informational in nature. The Storage System Event Log validation completed successfully. The content of the cinfo.scelcbi.status field, the cinfo.scelcbi structure, and the minfo.scelmi structure show the validated state of the Storage System Event Log. The meaning of the status value contained in the cinfo.scelcbi.status field is as follows: <UL><LI>0 = No problems found. </UL><P> Note: The content of the ainfo fields, cinfo.sctelcbi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_4_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601029)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_5.setDescription("Severity: Normal -- informational in nature. The Storage System Event Log validation failed. The content of the cinfo.scelcbi.status field, the cinfo.scelcbi structure, and the minfo.scelmi structure show the state of the Storage System Event Log at the time of the failure. The content and state of the Storage System Event Log have been initialized to their initial operational settings. The meaning of the status value contained in the cinfo.scelcbi.status field is as follows: <UL><LI>1 = Cookie value is not as expected. <LI>2 = Event data overflows the buffer. <LI>3 = Event data size is not a multiple of 4 bytes, is less than the minimum, or is greater than the maximum. <LI>4 = Event Information Packet type is greater than the maximum. <LI>5 = Event information size is not a multiple of 4 bytes, is less than the minimum, is greater than the maximum, doesn't match the Event Information Packet type size, or when combined with the entry header size doesn't equal the entry size. <LI>6 = Event code is zero. <LI>7 = Event is out of sequence. <LI>8 = Dead space area at the end of a partially packed buffer contains a nonzero value. <LI>9 = An event data block containing a nonzero value was found after end of event data was detected. <LI>A = Sequence number reset flag not set as expected. <LI>B = The event log contains no entries. <LI>C = Event data block read failed during maintenance verification. <LI>D = Event data block read failed during maintenance completion. <LI>E = Event data block erase failed during maintenance completion. <LI>F = Control block read failed during maintenance verification. <LI>17= The event log was destroyed and prepared for re-initialization. </UL><P> Note: The content of the ainfo fields, cinfo.sctelcbi structure, and minfo.sctelmi structure is undefined.")
sCellEventTrap_4_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601030)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_6.setDescription('Severity: Critical -- failure or failure imminent. Event reports were lost due to an insufficient supply of Event Log Packets on the HSV110 controller that is the Storage System Master. The ainfo.events_not_reported field shows the number of event reports lost. Note: The content of the ainfo.quiesce_type field, ainfo.remote_event field cinfo.sctelcbi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_4_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601031)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_7.setDescription('Severity: Critical -- failure or failure imminent. Event reports were lost due to an insufficient supply of Event Log Packets on the HSV110 controller that is not the Storage System Master. The ainfo.events_not_reported field shows the number of event reports lost. Note: The content of the ainfo.quiesce_type field, ainfo.remote_event field cinfo.sctelcbi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_4_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601032)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_8.setDescription('Severity: Normal -- informational in nature. The Storage System Termination Event Log has become inaccessible. The content of the cinfo.sctelcbi.status field, the cinfo.sctelcbi structure, and the minfo.sctelmi structure show the current state of the Storage System Termination Event Log. The meaning of the status value contained in the cinfo.sctelcbi.status field is as follows: <UL><LI>F = Control block read failed during maintenance verification. <LI>10= Control block write failed during maintenance verification. <LI>11= Event data block write failed during maintenance update. <LI>12= Control block write failed during maintenance completion. <LI>13= Storage System Termination Event Log related send was unsuccessful or the master found that the Storage System Termination Event Log is inaccessible. <LI>16= Event data block read failed during retrieval request. </UL><P> Note: The content of the ainfo fields, cinfo.scelcbi structure, and minfo.scelmi structure is undefined.')
sCellEventTrap_4_9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601033)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_9.setDescription('Severity: Normal -- informational in nature. The Storage System Termination Event Log validation completed successfully. The content of the cinfo.sctelcbi.status field, the cinfo.sctelcbi structure, and the minfo.sctelmi structure show the validated state of the Storage System Termination Event Log. The meaning of the status value contained in the cinfo.sctelcbi.status field is as follows: <UL><LI>0 = No problems found. </UL><P> Note: The content of the ainfo fields, cinfo.scelcbi structure, and minfo.scelmi structure is undefined.')
sCellEventTrap_4_a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601034)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_a.setDescription('Severity: Normal -- informational in nature. The Storage System Termination Event Log validation failed. The content of the cinfo.sctelcbi.status field, the cinfo.sctelcbi structure, and the minfo.sctelmi structure show the state of the Storage System Termination Event Log at the time of the failure. The meaning of the status value contained in the cinfo.sctelcbi.status field is as follows: <UL><LI>F = Control block read failed during maintenance verification. <LI>10= Control block write failed during maintenance verification. <LI>11= Event data block write failed during maintenance update. <LI>12= Control block write failed during maintenance completion. <LI>13= Storage System Termination Event Log related send was unsuccessful or the master found that the Storage System Termination Event Log is inaccessible. <LI>16= Event data block read failed during retrieval request. <LI>17= The log was destroyed and prepared for re-initialization. </UL><P> Note: The content of the ainfo fields, cinfo.scelcbi structure, and minfo.scelmi structure is undefined.')
sCellEventTrap_4_b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601035)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_b.setDescription('Severity: Normal -- informational in nature. The Storage System Termination Event Log has been updated with the termination event information obtained from the HSV110 controller that is not the Storage System Master. The content of the cinfo.sctelcbi.status field, the cinfo.sctelcbi structure, and the minfo.sctelmi structure show the updated state of the Storage System Termination Event Log. The meaning of the status value contained in the cinfo.sctelcbi.status field is as follows: <UL><LI>0 = No problems found. </UL><P> Note: The content of the ainfo fields, cinfo.scelcbi structure, and minfo.scelmi structure is undefined.')
sCellEventTrap_4_c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601036)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_c.setDescription('Severity: Critical -- failure or failure imminent. The Fault Manager on the Storage System Master received an invalid Event Information Packet from the remote Fault Manager. The header information from the invalid Event Information Packet is contained in the ainfo.remote_event field. Note: The content of the ainfo.quiesce_type field, ainfo.events_not_reported field, cinfo.scelcbi structure, cinfo.sctelcbi structure, minfo.scelmi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_4_d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601037)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_d.setDescription('Severity: Normal -- informational in nature. The Fault Manager operation was made quiescent. If the ainfo.quiesce_type field is equal to 0, the operation was performed on both HSV110 controllers. If the ainfo.quiesce_type field is equal to 1, the operation was performed only on the HSV110 controller that is not the Storage System Master. Note: The content of the ainfo.events_not_reported field, cinfo.scelcbi structure, cinfo.sctelcbi structure, minfo.scelmi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_4_e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601038)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_e.setDescription('Severity: Undetermined -- more information needed to determine severity. An HSV110 controller sent a last gasp message prior to terminating operation with an indication that the HSV110 controller identified in the lter.terminating_ctrlr field should also terminate operation.')
sCellEventTrap_4_f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601039)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_f.setDescription('Severity: Normal -- informational in nature. This HSV110 controller sent its termination event information to the HSV110 controller that is the Storage System Master. The content of the cinfo.sctelcbi.status field, the cinfo.sctelcbi structure, and the minfo.sctelmi structure show the updated state of the Storage System Termination Event Log. The meaning of the status value contained in the cinfo.sctelcbi.status field is as follows: <UL><LI>0 = No problems found. </UL><P> Note: The content of the ainfo fields, cinfo.scelcbi structure, and minfo.scelmi structure is undefined.')
sCellEventTrap_4_10 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601040)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_10.setDescription('Severity: Critical -- failure or failure imminent. Event reports were lost due to an insufficient supply of ISR Event Log Packets on the HSV110 controller that is the Storage System Master. The ainfo.events_not_reported field shows the number of event reports lost. Note: The content of the ainfo.quiesce_type field, ainfo.remote_event field cinfo.sctelcbi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_4_11 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601041)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_4_11.setDescription('Severity: Critical -- failure or failure imminent. Event reports were lost due to an insufficient supply of ISR Event Log Packets on the HSV110 controller that is not the Storage System Master. The ainfo.events_not_reported field shows the number of event reports lost. Note: The content of the ainfo.quiesce_type field, ainfo.remote_event field cinfo.sctelcbi structure, and minfo.sctelmi structure is undefined.')
sCellEventTrap_6_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601536)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_0.setDescription('Severity: Critical -- failure or failure imminent. A physical disk drive has reported that it has exceeded its failure prediction threshold. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the physical disk drive is contained in the cmd field. The sense data obtained from the physical disk drive as a result of the failure prediction threshold exceeded error is contained in the error field. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601537)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1.setDescription('Severity: Warning -- not failed but attention recommended or required. A Fibre Channel port on the HSV110 controller has failed to respond. The identity of the affected Fibre Channel port is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number of the affected Fibre Channel port is contained in the port field. The peb array contains the port event block information. The peq_frz_prod_index field contains the index to the port event block in use when the Tachyon chip entered the frozen state. The peq_prod_index field contains the index to the next port event block. The peq_cons_index field contains the index to the next port event block to be acted upon. The failure_cause field contains the internal routing value as follows: <UL><LI>1 - Excessive exchange timeouts on loop <LI>2 - Excessive link errors on loop <LI>3 - Exhausted Link Down retries on loop with signal <LI>4 - Exhausted Link Down retries on loop with loss of signal <LI>5 - Excessive link inits on loop without completing device discovery </UL>')
sCellEventTrap_6_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601538)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_2.setDescription('Severity: Normal -- informational in nature. A physical disk drive has reported a check condition error. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the physical disk drive is contained in the cmd field. The sense data obtained from the physical disk drive as a result of the check condition error is contained in the error field. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601539)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_3.setDescription('Severity: Warning -- not failed but attention recommended or required. An exchange sent to a physical disk drive or another HSV110 controller via the mirror port or a Fibre Channel port has timed out. The identity of the intended recipient is contained in the device field. The Fibre Channel port over which the frame was sent is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port number over which the frame was sent is contained in the port field. The arbitrated loop physical address of the intended recipient is contained in the al_pa field. The missing_port and missing_cerp_id fields are unused. The location of the intended recipient is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The number of timeouts detected is contained in the num_times field. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601540)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_4.setDescription('Severity: Warning -- not failed but attention recommended or required. Work was unexpectedly sent to this HSV110 controller by a physical disk drive or another HSV110 controller. This HSV110 controller did not originate the work. The identity of the sender is contained in the device field. The Fibre Channel port over which the unexpected work was received is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port number over which the unexpected work was received is contained in the port field. The arbitrated loop physical address of the sender is contained in the al_pa field. The location of the sender is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The hdr_cdb field contains the command descriptor block and Fibre Channel header information associated with the unexpected work.')
sCellEventTrap_6_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601541)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_5.setDescription('Severity: Warning -- not failed but attention recommended or required. Work has been sent to a physical disk drive or another HSV110 controller via the mirror port but it did not respond. The identity of the intended target is contained in the device field. The Fibre Channel port over which the work was sent is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port over which the work was sent is contained in the port field. The arbitrated loop physical address of the intended target is contained in the al_pa field. The location of the intended target is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the intended target is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601543)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_7.setDescription('Severity: Warning -- not failed but attention recommended or required. A Target Discovery Service Descriptor exchange sent to a physical disk drive has timed out. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the physical disk drive is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601544)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_8.setDescription("Severity: Normal -- informational in nature. An excessive number of link errors were detected on a HSV110 controller's Fibre Channel port. The identity of the affected Fibre Channel port is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number of the affected Fibre Channel port is contained in the port field. This is an informational event triggered by the occurrence of an excessive number of Tachyon chip link status errors detected within a particular link status error type. The number of occurrences of each link status error type is contained in a separate type-specific field (e.g., loss_of_signal, bad_rx_char, etc.). The HSV110 controller checks each of its Fibre Channel port's for excessive link status errors periodically.")
sCellEventTrap_6_9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601545)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_9.setDescription('Severity: Critical -- failure or failure imminent. A physical disk drive has reported numerous failure prediction threshold exceeded errors. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The num_times field is the number of failure prediction threshold exceeded errors reported by the physical disk drive in the previous minute. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601546)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_a.setDescription('Severity: Normal -- informational in nature. A physical disk drive has reported numerous check condition errors. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The num_times field is the number of check condition errors reported by the physical disk drive in the previous minute. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601547)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_b.setDescription('Severity: Warning -- not failed but attention recommended or required. A non-data exchange sent to a physical disk drive has timed out. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the physical disk drive is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601548)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_c.setDescription('Severity: Normal -- informational in nature. A loop switch has been detected on a Fibre Channel port. The identity of the Fibre Channel port is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number is contained in the port field. Note that in this case the content of the device, al_pa, rack_num, dencl_num, bay, fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The missing_port and missing_cerp_id fields are unused. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601549)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_d.setDescription('Severity: Normal -- informational in nature. The location of a physical disk drive previously reported as unknown is now known. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is contained in the rack_num, dencl_num, and bay fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of fed_class, al_pa and num_times fields are undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601550)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_e.setDescription('Severity: Critical -- failure or failure imminent. A Drive Enclosure Environmental Monitoring Unit requested a code update but the code update could not be found, so the update was not performed. The identity of the affected Drive Enclosure Environmental Monitoring Unit is contained in the device field. The Fibre Channel port used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the Drive Enclosure Environmental Monitoring Unit is contained in the rack_num and dencl_num fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the al_pa, bay, fed_class and num_times field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601551)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_f.setDescription('Severity: Critical -- failure or failure imminent. The Drive Enclosure Environmental Monitoring Unit is able to communicate with a physical disk drive but this HSV110 controller is unable to communicate with that physical disk drive on the Fibre Channel bus. The identity of the Drive Enclosure Environmental Monitoring Unit is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is contained in the rack_num, dencl_num, and bay fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the al_pa, fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_10 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601552)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_10.setDescription('Severity: Undetermined -- more information needed to determine severity. A HSV110 controller is unable to communicate with this Drive Enclosure Environmental Monitoring Unit. The Drive Enclosure Environmental Monitoring Unit identified in the device field has stopped communicating with the HSV110 controller. The Fibre Channel port used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the Drive Enclosure Environmental Monitoring Unit is contained in the rack_num and dencl_num fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the bay, al_pa, fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_12 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601554)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_12.setDescription('Severity: Normal -- informational in nature. The retry count for a task assigned to a Drive Enclosure Environmental Monitoring Unit has been exhausted. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The peb array contains the task list that was intended to be sent to the Drive Enclosure Environmental Monitoring Unit. The peq_frz_prod_index field contains the task that was being retried. The peq_prod_index field contains the drive enclosure where the physical disk drive used to communicate with the Drive Enclosure Environmental Monitoring Unit is located. The peq_cons_index field identifies the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) used to communicate with the physical disk drive that was used to communicate with the Drive Enclosure Environmental Monitoring Unit. The failure_cause field contains the bay where the physical disk drive used to communicate with the Drive Enclosure Environmental Monitoring Unit.')
sCellEventTrap_6_13 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601555)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_13.setDescription('Severity: Normal -- informational in nature. A Drive Enclosure Environmental Monitoring Unit is able to communicate with this HSV110 controller. The identity of the Drive Enclosure Environmental Monitoring Unit is contained in the device field. The Fibre Channel port used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the Drive Enclosure Environmental Monitoring Unit is contained in the rack_num and dencl_num fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the bay, fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_14 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601556)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_14.setDescription('Severity: Critical -- failure or failure imminent. There are too many drive enclosures attached to a Fibre Channel port. The Fibre Channel port with too many drive enclosures attached to the HSV110 controller is contained in the cerp_id field. Note that in this case the content of the bay, fed_class, rack_num, dencl_num and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The missing_port and missing_cerp_id fields are unused. The location of the identified in the cerp_id field. The device, missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_15 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601557)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_15.setDescription('Severity: Critical -- failure or failure imminent. The cable connected to the I/O module is attached to the wrong Fibre Channel port. The Fibre Channel port incorrectly attached to the HSV110 controller is contained in the cerp_id field. Note that in this case the content of the device, missing_port, missing_cerp_id, bay, fed_class, rack_num, dencl_num and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_16 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601558)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_16.setDescription('Severity: Critical -- failure or failure imminent. A HSV110 controller does not have an address on the enclosure address bus. The HSV110 controller location cannot be identified. Note that in this case the content of the missing_port, missing_cerp_id, bay, fed_class, rack_num, dencl_num, al_pa, device, cerp_id, port, enclosures array and num_times fields is undefined.')
sCellEventTrap_6_18 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601560)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_18.setDescription('Severity: Normal -- informational in nature. A Drive Enclosure Environmental Monitoring Unit has begun updating its code. Do not power down this drive enclosure until the code update has completed. The identity of the Drive Enclosure Environmental Monitoring Unit is contained in the device field. The Fibre Channel port used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the Drive Enclosure Environmental Monitoring Unit is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. In addition, the device field may contain all zeroes. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that the content of the fed_class, al_pa, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_19 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601561)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_19.setDescription('Severity: Normal -- informational in nature. A Drive Enclosure Environmental Monitoring Unit has completed updating its code. It is now safe to power down this drive enclosure. The identity of the Drive Enclosure Environmental Monitoring Unit is contained in the device field. The Fibre Channel port used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Drive Enclosure Environmental Monitoring Unit is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the Drive Enclosure Environmental Monitoring Unit is contained in the rack_num and dencl_num fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, al_pa, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601562)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1a.setDescription('Severity: Critical -- failure or failure imminent. A physical disk drive has exceeded its soft error threshold. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, cdb, and sense_data fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601563)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1b.setDescription('Severity: Normal -- informational in nature. A HSV110 controller now has an address on the enclosure address bus. The HSV110 controller location has been identified. The location of the HSV110 controller is contained in the rack_num and dencl_num fields. Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the bay, fed_class, al_pa, cerp_id, port, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The missing_port and missing_cerp_id fields are unused. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601564)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1c.setDescription('Severity: Warning -- not failed but attention recommended or required. An outbound frame targeted to a physical disk drive has timed out. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the physical disk drive is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601565)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1d.setDescription('Severity: Warning -- not failed but attention recommended or required. A Fibre Channel exchange to a physical disk drive has completed but is missing data. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the physical disk drive is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601566)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1e.setDescription('Severity: Critical -- failure or failure imminent. A HSV110 controller has detected only one port of a Fibre Channel device. This Fibre Channel device has entered the Single Port on Fibre state which should be corrected as soon as possible. The identity of the Fibre Channel device is contained in the device field. The Fibre Channel port still able to communicate with the Fibre Channel device is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number able to communicate with the Fibre Channel device is contained in the port field. The Fibre Channel port unable to communicate with the Fibre Channel device is contained in the missing_cerp_id field. The HSV110 controller internal Fibre Channel port number unable to communicate with the Fibre Channel device is contained in the missing_port field. The arbitrated loop physical address of the Fibre Channel device is contained in the al_pa field. The location of the Fibre Channel device is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_1f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601567)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_1f.setDescription('Severity: Normal -- informational in nature. A previously reported Fibre Channel device with only one port has been corrected and redundancy has been restored. The device is no longer in the Single Port on Fibre state. The identity of the Fibre Channel device is contained in the device field. The Fibre Channel port used to communicate with the Fibre Channel device is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Fibre Channel device is contained in the port field. The missing_port and missing_cerp_id fields are unused. The arbitrated loop physical address of the Fibre Channel device is contained in the al_pa field. The location of the Fibre Channel device is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_20 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601568)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_20.setDescription('Severity: Critical -- failure or failure imminent. An unsupported Fibre Channel device has been detected. The drive has been failed to prevent possible data corruption or system instability. The identity of the Fibre Channel device is contained in the device field. The Fibre Channel port used to communicate with the Fibre Channel device is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Fibre Channel device is contained in the port field. The arbitrated loop physical address of the Fibre Channel device is contained in the al_pa field. The missing_port and missing_cerp_id fields are unused. The location of the Fibre Channel device is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_21 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601569)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_21.setDescription('Severity: Normal -- informational in nature. A Fibre Channel device with the incorrect block size has been detected. The identity of the Fibre Channel device is contained in the device field. The Fibre Channel port used to communicate with the Fibre Channel device is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Fibre Channel device is contained in the port field. The arbitrated loop physical address of the Fibre Channel device is contained in the al_pa field. The missing_port and missing_cerp_id fields are unused. The location of the Fibre Channel device is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_23 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601571)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_23.setDescription('Severity: Normal -- informational in nature. A HSV110 controller is about to retry a failed port. The Fibre Channel port that is about to be retried is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number about to be retried is contained in the port field. Note that in this case the content of the bay, rack_num, fed_class, al_pa, dencl_num, device, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The missing_port and missing_cerp_id fields are unused. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_24 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601572)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_24.setDescription('Severity: Normal -- informational in nature. A HSV110 controller has successfully retried a failed port. The Fibre Channel port that has been restarted is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number that has been restarted is contained in the port field. Note that in this case the content of the bay, rack_num, fed_class, al_pa, dencl_num, device, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The missing_port and missing_cerp_id fields are unused. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_25 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601573)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_25.setDescription('Severity: Critical -- failure or failure imminent. A Drive Enclosure Environmental Monitoring Unit has failed to assign a hard address to a physical disk drive on the loop. The device field contains the identity of the enclosure. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The al_pa field contains the expected AL_PA, and the num_times field contains the actual AL_PA. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note that in this case the content of the fed_class is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_26 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601574)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_26.setDescription('Severity: Critical -- failure or failure imminent. A Drive Enclosure Environmental Monitoring Unit has failed to assign an address to a physical disk drive on the loop. This has occurred because another physical disk drive has already obtained this AL_PA. The device field contains the identity of the enclosure. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The al_pa field contains the AL_PA that was stolen. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_27 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601575)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_27.setDescription('Severity: Critical -- failure or failure imminent. A Drive Enclosure Environmental Monitoring Unit has failed to assign address(s) to a physical disk drive on the loop. Soft addressing was detected for this enclosure. The device field contains the identity of the enclosure. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The missing_port and missing_cerp_id fields are unused. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, al_pa, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_28 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601576)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_28.setDescription('Severity: Normal -- informational in nature. The retry count for an OB task assigned to a Drive Enclosure Environmental Monitoring Unit has been exhausted. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The peb array contains the task list that was intended to be sent to the Drive Enclosure Environmental Monitoring Unit. The peq_frz_prod_index field contains the task that was being retried. The peq_prod_index field contains the drive enclosure where the physical disk drive used to communicate with the Drive Enclosure Environmental Monitoring Unit is located. The peq_cons_index field identifies the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) used to communicate with the physical disk drive that was used to communicate with the Drive Enclosure Environmental Monitoring Unit. The failure_cause field contains the bay where the physical disk drive used to communicate with the Drive Enclosure Environmental Monitoring Unit.')
sCellEventTrap_6_29 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601577)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_29.setDescription('Severity: Normal -- informational in nature. The HSV110 controller has sent a Basic Link Service command Abort Sequence Frame. The original work is described in this event. The identity of the intended target is contained in the device field. The Fibre Channel port over which the work was sent is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port over which the work was sent is contained in the port field. The arbitrated loop physical address of the intended target is contained in the al_pa field. The location of the intended target is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the intended target is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_2a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601578)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_2a.setDescription('Severity: Normal -- informational in nature. The HSV110 controller has sent an Extended Link Service command Reinstate Recovery Qualifier. The original work is described in this event. The identity of the intended target is contained in the device field. The Fibre Channel port over which the work was sent is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port over which the work was sent is contained in the port field. The arbitrated loop physical address of the intended target is contained in the al_pa field. The location of the intended target is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The Fibre Channel Exchange Descriptor class is contained in the fed_class field. The command issued to the intended target is contained in the cmd field. Note that in this case the content of the error field is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_2b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601579)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_2b.setDescription('Severity: Critical -- failure or failure imminent. A physical disk drive was bypassed rendering it unusable. The physical disk drive is unusable because a Drive Enclosure Environmental Monitoring Unit bypassed a drive bay or the physical disk drive left itself bypassed. The physical disk drive is not available to the HSV110 controllers and will not be displayed by the HSV element manager GUI. The physical disk drive fault led will be lit to indicate that it is unusable. The Fibre Channel port over which this condition was detected is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port over which this condition was detected is contained in the port field. The al_pa field is invalid. The location of the physical disk drive is as indicated by the content of the rack_num, dencl_num, and bay fields. Note that the content of the rack_num field will not be valid until a future release. The bypass_reason field is used to indicate how the physical disk drive was bypassed: <UL><LI>1 = The physical disk drive left itself bypassed <LI>2 = The Drive Enclosure Environmental Monitoring Unit bypassed the drive bay </UL>The Drive Enclosure Environmental Monitoring Unit is identified in the device field. Additionally, the content of the pid, rev, and enclosures array fields is undefined in this case.')
sCellEventTrap_6_2c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601580)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_2c.setDescription('Severity: Normal -- informational in nature. One or more media defects were detected on a physical disk drive. The affected physical disk drive is identified in the device field. The Fibre Channel port over which the media defect(s) was detected is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port number over which the media defect(s) was detected is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The Logical Block Address of each media defect is contained in a separate entry of the hdr_cdb array. Only nonzero values in the hdr_cdb array entries are valid. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release.')
sCellEventTrap_6_2d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601581)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_2d.setDescription('Severity: Normal -- informational in nature. An HSV110 controller issued a directed LIP to an arbitrated loop physical address. The Fibre Channel port over which the directed LIP was issued is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port number over which the directed LIP was issued is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field.')
sCellEventTrap_6_2e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601582)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_2e.setDescription('Severity: Normal -- informational in nature. An HSV110 controller has detected Loop Receiver Failures. The Fibre Channel port over which the Loop Receiver Failures were detected is identified in the cerp_id field. The HSV110 controller internal Fibre Channel port number over which the Loop Receiver Failures were detected is contained in the port field. The counts and the AL_PAs of the Loop Receiver Failures are contained in a separate entry of the hdr_cdb array. Only nonzero values in the hdr_cdb array entries are valid. The affected HSV110 controller is identified in the device field. Note that in this case the content of the al_pa, dencl_num, bay, and rack_num fields are undefined.')
sCellEventTrap_6_30 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601584)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_30.setDescription('Severity: Critical -- failure or failure imminent. A HSV110 controller has detected only one port of all Fibre Channel devices in an enclosure. These Fibre Channel devices have entered the Single Port on Fibre state which should be corrected as soon as possible. The identity of the Fibre Channel device enclosure is contained in the device field. The Fibre Channel port still able to communicate with the Fibre Channel device is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number able to communicate with the Fibre Channel device is contained in the port field. The Fibre Channel port unable to communicate with the Fibre Channel device is contained in the missing_cerp_id field. The HSV110 controller internal Fibre Channel port number unable to communicate with the Fibre Channel device is contained in the missing_port field. The al_pa and bay fields are invalid. The location of the Fibre Channel enclosure is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_31 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601585)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_31.setDescription('Severity: Normal -- informational in nature. A previously reported Fibre Channel device enclosure with only one port has been corrected and redundancy has been restored. The devices in the enclosure are no longer in the Single Port on Fibre state. The identity of the Fibre Channel device enclosure is contained in the device field. The Fibre Channel port used to communicate with the Fibre Channel device enclosure is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Fibre Channel device is contained in the port field. The al_pa, bay, missing_port, and missing_cerp_id fields are invalid. The location of the Fibre Channel device is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. Note also that in this case the content of the fed_class, and num_times fields is undefined. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_6_32 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601586)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_32.setDescription('Severity: Critical -- failure or failure imminent. A HSV110 controller has detected only one port of all Fibre Channel devices on a loop. These Fibre Channel devices have entered the Single Port on Fibre state which should be corrected as soon as possible. The device, al_pa, dencl_num, and bay fields are all invalid. The Fibre Channel port still able to communicate with the Fibre Channel device is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number able to communicate with the Fibre Channel device is contained in the port field. The Fibre Channel port unable to communicate with the Fibre Channel device is contained in the missing_cerp_id field. The HSV110 controller internal Fibre Channel port number unable to communicate with the Fibre Channel device is contained in the missing_port field.')
sCellEventTrap_6_33 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601587)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_33.setDescription('Severity: Normal -- informational in nature. A previously reported Fibre Channel loop with only one port has been corrected and redundancy has been restored. The devices on the loop are no longer in the Single Port on Fibre state. The device, al_pa, dencl_num, bay, missing_port, and missing_cerp_id fields are invalid. The Fibre Channel port used to communicate with the Fibre Channel devices is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the Fibre Channel devices is contained in the port field.')
sCellEventTrap_6_34 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601588)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_34.setDescription('Severity: Normal -- informational in nature. A HSV110 controller has been told to enable a device port, and that device port was not disabled during boot diagnostics. The Fibre Channel port that was enabled is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number enabled is contained in the port field. Note that in this case the contents of the bay, rack_num, fed_class, al_pa, dencl_num, device, enclosure array, and num_times fields are undefined. The missing_port and missing_cerp_id fields are unused.')
sCellEventTrap_6_35 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601589)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_35.setDescription("Severity: Critical -- failure or failure imminent. An unrecognized Fibre Channel physical disk drive firmware revision has been detected by the physical disk drive firmware load process. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The bypass_reason field is invalid. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num, al_pa and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The pid field contains the SCSI Inquiry Product Identification obtained from the physical disk drive. The rev field contains the current firmware revision obtained from the physical disk drive. The new_rev field contains the latest firmware version known to the controller, or blanks if the isn't a known version. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_6_36 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601590)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_36.setDescription("Severity: Critical -- failure or failure imminent. An unsupported Fibre Channel physical disk drive firmware revision has been detected by the physical disk drive firmware load process. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The bypass_reason field is invalid. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num, al_pa and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The pid field contains the SCSI Inquiry Product Identification obtained from the physical disk drive. The rev field contains the current firmware revision obtained from the physical disk drive. The new_rev field contains the latest firmware version known to the controller, or blanks if the isn't a known version. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_6_37 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601591)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_37.setDescription("Severity: Normal -- informational in nature. A Fibre Channel physical disk drive firmware revision has been detected by the physical disk drive firmware load process that is later than the latest known supported revision. If the location information is 0, it indicates the type of drive, not a specific drive. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The bypass_reason field is invalid. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num, al_pa and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The pid field contains the SCSI Inquiry Product Identification obtained from the physical disk drive. The rev field contains the current firmware revision obtained from the physical disk drive. The new_rev field contains the latest firmware version known to the controller, or blanks if the isn't a known version. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_6_38 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601592)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_38.setDescription("Severity: Normal -- informational in nature. A Fibre Channel physical disk drive firmware revision has been detected by the physical disk drive firmware load process that has a newer supported revision available. If the location information is 0, it indicates the type of drive, not a specific drive. The identity of the physical disk drive is contained in the device field. The Fibre Channel port used to communicate with the physical disk drive is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number used to communicate with the physical disk drive is contained in the port field. The arbitrated loop physical address of the physical disk drive is contained in the al_pa field. The bypass_reason field is invalid. The location of the physical disk drive is determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num, dencl_num, and bay fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num, al_pa and bay fields is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num, dencl_num, and bay fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. The identity contained in the device field should be used to confirm the last known location values. </UL>Note that the content of the rack_num field will not be valid until a future release. The pid field contains the SCSI Inquiry Product Identification obtained from the physical disk drive. The rev field contains the current firmware revision obtained from the physical disk drive. The new_rev field contains the latest firmware version known to the controller, or blanks if the isn't a known version. The enclosures array shows the drive enclosures available on the Fibre Channel port identified in the cerp_id field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_6_39 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601593)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_39.setDescription('Severity: Normal -- informational in nature. The HSV110 controller bypassed a device bay in an attempt to restore operability. The identity of the bay is indicated by the rack_num, dencl_num, and bay fields. All other fields are invalid.')
sCellEventTrap_6_3a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601594)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_3a.setDescription('Severity: Normal -- informational in nature. The HSV110 controller is attempting to recovery devices on the indicated port. All other fields are invalid.')
sCellEventTrap_6_3b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601595)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_3b.setDescription('Severity: Normal -- informational in nature. The HSV110 controller has finished error recovery attempts on the indicated port. All other fields are invalid.')
sCellEventTrap_6_3c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601596)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_3c.setDescription('Severity: Normal -- informational in nature. The HSV110 controller been requested to unbypass device bays on the indicated port. All other fields are invalid.')
sCellEventTrap_6_3d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601597)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_3d.setDescription('Severity: Undetermined -- more information needed to determine severity. The HSV110 controller has detected a enclosure on the CAB bus that does not have a Fibre Channel connection. All fields except port and rack are invalid. other fields are invalid.')
sCellEventTrap_6_3e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601598)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_6_3e.setDescription('Severity: Critical -- failure or failure imminent. The HSV110 controller has detected an enclosure on the Fibre Channel but is unable to communicate with the EMU on the CAB bus or the EMU is reporting an invalid enclosure number. All fields except port and rack are invalid. other fields are invalid.')
sCellEventTrap_7_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601792)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_0.setDescription('Severity: Warning -- not failed but attention recommended or required. Allocation of a Virtual Disk has stalled due to insufficient space in the Disk Group caused by the failure or pulling of a physical disk drive. The tag1 field contains the identity of the Virtual Disk. The tag2 field contains the identity of the Disk Group. The values that may be found in the state field are as follows: <UL><LI>0 = Attempting to retry the allocation <LI>1 = Awaiting a leveling event (a drive needs to be inserted) </UL>')
sCellEventTrap_7_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601793)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_1.setDescription('Severity: Warning -- not failed but attention recommended or required. Expansion of a Virtual Disk has stalled due to insufficient space in the Disk Group caused by the failure or pulling of a physical disk drive. The tag1 field contains the identity of the Virtual Disk. The tag2 field contains the identity of the Disk Group. The values that may be found in the state field are as follows: <UL><LI>0 = Attempting to retry the expansion <LI>1 = Awaiting a leveling event (a drive needs to be inserted) </UL>')
sCellEventTrap_7_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601794)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_2.setDescription('Severity: Normal -- informational in nature. Leveling of capacity in a Disk Group has started. The identity of the Disk Group is contained in the tag1 field.')
sCellEventTrap_7_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601795)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_3.setDescription('Severity: Normal -- informational in nature. Leveling of capacity in a Disk Group has finished. The identity of the Disk Group is contained in the tag1 field.')
sCellEventTrap_7_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601796)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_4.setDescription('Severity: Normal -- informational in nature. A member management operation has started due to the appearance or disappearance of a physical disk drive. If available, the tag1 field contains the identity of the physical disk drive. The tag2 field contains the disk unit block in which physical disk drive resides. The values that may be found in the state field are as follows: <UL><LI>2 = Reconstructing <LI>4 = Migrating <LI>6 = Reverting </UL>')
sCellEventTrap_7_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601797)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_5.setDescription('Severity: Normal -- informational in nature. A member management operation has finished. If available, the tag1 field contains the identity of the physical disk drive. The tag2 field contains the disk unit block in which the physical disk drive resides. The values that may be found in the state field are as follows: <UL><LI>2 = Reconstructing <LI>4 = Migrating <LI>6 = Reverting </UL>The status field contains one of the following values: <UL><LI>1 = PSEGS NONE ( Reconstruction of data was successful ) <LI>2 = PSEGS RAID0 ( Could not reconstruct RAID0 data ) <LI>4 = PSEGS RAID5 ( Could not reconstruct RAID5 data ) <LI>8 = PSEGS RAID1 ( Could not reconstruct RAID1 data ) </UL>')
sCellEventTrap_7_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601798)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_6.setDescription('Severity: Normal -- informational in nature. A Disk Group has started changing its internal structure due to the appearance or disappearance of a Volume. The identity of the Disk Group is contained in the tag1 field. The values that may be found in the state field are as follows: <UL><LI>4 = Merge began <LI>8 = Split began </UL>')
sCellEventTrap_7_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601799)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_7.setDescription('Severity: Normal -- informational in nature. A Disk Group has finished changing its internal structure due to the appearance or disappearance of a volume. The identity of the Disk Group is contained in the tag1 field. The values that may be found in the state field are as follows: <UL><LI>4 = Merge completed <LI>8 = Split completed </UL>')
sCellEventTrap_7_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13601800)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_7_8.setDescription('Severity: Normal -- informational in nature. Deallocation of a Virtual Disk has failed after three attempts due to unknown circumstances. This will more than likely be caused by failing physical drives. The deletion will be restarted when a resync/reboot occurs. The tag1 field contains the identity of the Virtual Disk. The tag2 field contains the identity of the Disk Group. The values that may be found in the status field indicate the returned status from the delete operation.')
sCellEventTrap_9_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602305)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1.setDescription('Severity: Normal -- informational in nature. The state of the Physical Disk Drive identified in the handle field has transitioned to the NORMAL state. The value.ul1 field contains the new state: 1 (NORMAL). The value.ul2 field contains the old state. The state values that may be in the value.ul2 field are as follows: <UL><LI>2 = Degraded <LI>3 = Failed <LI>4 = Not present <LI>5 = Single Port on Fibre </UL>The enclosure number, bay number, and rack number where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], attribute.value.u32[2] fields, respectively. The attribute.type field contains value 1. The rack number in the attribute.value.u32[2] field will not contain a valid value until a future release.')
sCellEventTrap_9_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602306)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2.setDescription("Severity: Normal -- informational in nature. The state of a Volume has changed. The identity of the affected Volume is contained in the handle field. The add_handle field contains the identity of the Physical Disk Drive that is associated with that Volume. The enclosure number, bay number, and rack number where the associated Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], and attribute.value.u32[2] fields, respectively. The internal identification of that Volume's Redundant Storage Set is contained in the attribute.value.u32[3] field. The attribute.type field contains the value of 1. The value.ul1 field contains the new state. The value.ul2 field contains the old state. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>1 = Normal - Volume is present and operating normally <LI>2 = Migrating - Data from this volume is being moved to other storage in this Disk Group <LI>3 = Missing - Volume is inaccessible <LI>4 = Reconstructing - Volume is inaccessible; redundant data is being regenerated and moved to other storage in this Disk Group <LI>5 = Completing - This previously inaccessible volume has become accessible; data migration is being completed <LI>6 = Reverting - This previously inaccessible volume has become accessible; data is being regenerated <LI>7 = Failed - Volume is not being used in the Disk Group; disk errors are preventing normal usage </UL>")
sCellEventTrap_9_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602307)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3.setDescription('Severity: Normal -- informational in nature. The state of the internal Logical Disk associated with the Virtual Disk identified in the handle field has changed. The value.ul1 field contains the new state. The value.ul2 field contains the old state. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>1 = Normal <LI>2 = Replacement delay in progress <LI>3 = Redundancy lost, restore in progress <LI>4 = Redundancy lost, restore stalled <LI>5 = Failed <LI>6 = Creation in progress <LI>7 = Snapshot is inoperative due to lack of snapshot space <LI>8 = Deletion in progress <LI>9 = Capacity change in progress <LI>10 = Inoperative due to data lost <LI>11 = Capacity reservation in progress <LI>12 = Capacity unreservation in progress </UL>')
sCellEventTrap_9_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602308)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_4.setDescription('Severity: Normal -- informational in nature. The state of the HSV110 controller identified in the handle field has transitioned to the NORMAL state. The value.ul1 field contains the new state: 1 (NORMAL). The value.ul2 field contains the old state: 3 (FAILED).')
sCellEventTrap_9_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602309)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_5.setDescription('Severity: Normal -- informational in nature. The state of a battery assembly within the HSV110 controller identified in the handle field has changed. The value.ul1 field contains the new state. The value.ul2 field contains the old state. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>1 = Battery System Hold-up Time is greater than 96 hours <LI>3 = Battery System Hold-up Time is greater than 0 and less than 96 hours <LI>5 = Battery System Hold-up Time is zero hours </UL>')
sCellEventTrap_9_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602310)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_6.setDescription("Severity: Undetermined -- more information needed to determine severity. A Volume has transitioned to the MISSING state. The affected Volume is identified in the handle field. The add_handle field contains the identity of the Physical Disk Drive that is associated with that Volume. The enclosure number, bay number, and rack number where the associated Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], and attribute.value.u32[2] fields, respectively. The internal identification of that Volume's Redundant Storage Set is contained in the attribute.value.u32[3] field. The attribute.type field contains the value of 1. The value.ul1 field contains the new state. The value.ul2 field contains the old state. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>1 = Normal - Volume is present and operating normally <LI>2 = Migrating - Data from this volume is being moved to other storage in this Disk Group <LI>4 = Reconstructing - Volume is inaccessible; redundant data is being regenerated and moved to other storage in this Disk Group <LI>5 = Completing - This previously inaccessible volume has become accessible; data migration is being completed <LI>6 = Reverting - This previously inaccessible volume has become accessible; data is being regenerated <LI>7 = Failed - Volume is not being used in the Disk Group; disk errors are preventing normal usage </UL>")
sCellEventTrap_9_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602311)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_7.setDescription("Severity: Normal -- informational in nature. The state of the Fibre Channel port identified in the attribute.value.str field and located on the rear panel of the HSV110 controller identified in the handle field has transitioned to the NORMAL state. The attribute.type field contains the value 4. The value.ul1 field contains the new state: 1 (NORMAL). The value.ul2 field contains the old state: 2 (FAILED). <P> Note that the HSV110 controller's internal identity of the affected Fibre Channel port is contained in the secondary_id field.")
sCellEventTrap_9_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602312)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_8.setDescription('Severity: Warning -- not failed but attention recommended or required. The Occupancy Alarm Level threshold has been reached for the Disk Group identified in the handle field.')
sCellEventTrap_9_9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602313)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_9.setDescription("Severity: Normal -- informational in nature. The Resource Availability state of a Volume has transitioned to the SUFFICIENT state. The affected Volume is identified in the handle field. The add_handle field contains the identity of the Physical Disk Drive that is associated with that Volume. The enclosure number, bay number, and rack number where the associated Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], and attribute.value.u32[2] fields, respectively. The internal identification of that Volume's Redundant Storage Set is contained in the attribute.value.u32[3] field. The attribute.type field contains the value of 1. The value.ul1 field contains the new state: 0 (SUFFICIENT). The value.ul2 field contains the old state: 1 (INSUFFICIENT).")
sCellEventTrap_9_a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602314)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_a.setDescription('Severity: Normal -- informational in nature. The Data Availability state of the internal Logical Disk associated with the Virtual Disk identified in the handle field has transitioned to the NORMAL state. The value.ul1 field contains the new state: 0 (NORMAL). The value.ul2 field contains the old state: 1 (DATA LOST).')
sCellEventTrap_9_c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602316)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_c.setDescription('Severity: Normal -- informational in nature. The Snapclone Logical Disk identified in the handle field has completed the unsharing operation. The secondary_id field contains the noid of the associated successor internal Logical Disk.')
sCellEventTrap_9_d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602317)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d.setDescription('Severity: Normal -- informational in nature. The state of the Quorum Disk flag of a Volume has changed. The affected Volume is identified in the handle field. The value.ul1 field contains the new state of the Quorum Disk flag. The value.ul2 field contains the old state of the Quorum Disk flag. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>0 = Not quorum disk <LI>1 = Quorum disk </UL>')
sCellEventTrap_9_e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602318)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_e.setDescription('Severity: Critical -- failure or failure imminent. The temperature trip point for a temperature sensor located within an HSV110 controller has been reached. The HSV110 controller is identified in the handle field. The value.ul1 field contains the current temperature reading from I2C sensor 1 in degrees celsius while the value.ul2 field contains the adjusted reading from I2C sensor 2. The set temperature trip point is contained in the secondary_id field.')
sCellEventTrap_9_f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602319)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_f.setDescription('Severity: Warning -- not failed but attention recommended or required. The temperature within the HSV110 controller identified in the handle field is approaching its trip point. The value.ul1 field contains the current temperature reading from I2C sensor 1 in degrees celsius while the value.ul2 field contains the adjusted reading from I2C sensor 2. The secondary_id field contains the set temperature trip point in Celsius.')
sCellEventTrap_9_11 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602321)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_11.setDescription("Severity: Normal -- informational in nature. The Blower Present flag for the '1' blower assembly located within the HSV110 controller identified in the handle field has transitioned from the NOT PRESENT to PRESENT state indicating that the blower has been reinstalled. The secondary_id field contains the '1' blower assembly internal identifier value: 1. The value.ul1 field contains the new state of the Blower Present flag: 1 (PRESENT). The value.ul2 field contains the old state of the Blower Present flag: 0 (NOT PRESENT).")
sCellEventTrap_9_12 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602322)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_12.setDescription("Severity: Critical -- failure or failure imminent. The '1' blower located within the HSV110 controller identified in the handle field is running slower than the lowest acceptable speed. The secondary_id field contains the '1' blower assembly internal identifier value: 1. The value.ul1 field contains the current speed of the '1' blower. The value.ul2 field contains the lowest acceptable speed for the '1' blower.")
sCellEventTrap_9_13 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602323)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_13.setDescription('Severity: Normal -- informational in nature. One of the voltage sensors located within the HSV110 controller identified in the handle field has reported a voltage that is out of range. The value.ul1 field contains the out of range voltage value. The secondary_id field contains the specific voltage threshold value (i.e., 12V, 5V, 3.3V, 2.5V or 2V). Note that the voltages are expressed in millivolts--e.g.,12.5V is expressed as 12500.')
sCellEventTrap_9_14 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602324)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_14.setDescription("Severity: Undetermined -- more information needed to determine severity. The state of a Volume has transitioned to the FAILED state. The affected Volume is identified in the handle field. The add_handle field contains the identity of the Physical Disk Drive that is associated with that Volume. The enclosure number, bay number, and rack number where the associated Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], and attribute.value.u32[2] fields, respectively. The internal identification of that Volume's Redundant Storage Set is contained in the attribute.value.u32[3] field. The attribute.type field contains the value of 1. The value.ul1 field contains the new state: 7 (FAILED). The value.ul2 field contains the old state. The state values that may be found in the value.ul2 fields are as follows: <UL><LI>1 = Normal - Volume is present and operating normally <LI>2 = Migrating - Data from this volume is being moved to other storage in this Disk Group <LI>3 = Missing - Volume is inaccessible <LI>4 = Reconstructing - Volume is inaccessible; redundant data is being regenerated and moved to other storage in this Disk Group <LI>5 = Completing - This previously inaccessible volume has become accessible; data migration is being completed <LI>6 = Reverting - This previously inaccessible volume has become accessible; data is being regenerated </UL>")
sCellEventTrap_9_15 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602325)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_15.setDescription('Severity: Undetermined -- more information needed to determine severity. An HSV110 controller has failed. The state of the HSV110 controller identified in the handle field has transitioned to the FAILED state. The value.ul1 field contains the new state: 3 (FAILED). The value.ul2 field contains the old state: 1 (NORMAL).')
sCellEventTrap_9_16 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602326)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_16.setDescription('Severity: Normal -- informational in nature. The temperature within the HSV110 controller identified in the handle field has returned to its normal operating range. The value.ul1 field contains the current temperature reading in celsius from I2C sensor 1, while the value.ul2 field contains the adjusted reading from I2C sensor 2.')
sCellEventTrap_9_17 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602327)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_17.setDescription("Severity: Critical -- failure or failure imminent. An HSV110 controller's battery assembly has been removed. The Battery Present flag for battery assembly '1' located within the HSV110 controller identified in the handle field has changed from PRESENT to NOT PRESENT indicating that the battery assembly was removed. The secondary_id field contains the battery assembly '1' internal identifier value: 1. The value.ul1 field contains the new state of the Battery Present flag: 0 (NOT PRESENT). The value.ul2 field contains the old state of the Battery Present flag: 1 (PRESENT).")
sCellEventTrap_9_18 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602328)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_18.setDescription("Severity: Normal -- informational in nature. The Battery In Use flag for battery assembly '1' located within the HSV110 controller identified in the handle field has transitioned from the NOT IN USE to IN USE state indicating that the battery assembly is functioning properly. The secondary_id field contains the battery assembly '1' internal identifier value: 1. The value.ul1 field contains the new state of the Battery In Use flag: 1 (IN USE). The value.ul2 field contains the old state of the Battery In Use flag: 0 (NOT IN USE).")
sCellEventTrap_9_19 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602329)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_19.setDescription('Severity: Normal -- informational in nature. One of the voltage sensors located within the HSV110 controller identified in the handle field has reported a voltage that indicates that a voltage that was previously out of range has returned to the normal range. The value.ul1 field contains the normal range voltage value. The secondary_id field contains the voltage threshold value (i.e., 12V, 5V, 3.3V, 2.5V or 2V). Note that the voltages are expressed in thousands--e.g., 12.5V is expressed as 12500.')
sCellEventTrap_9_1a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602330)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1a.setDescription('Severity: Warning -- not failed but attention recommended or required. The battery assembly voltage regulator located within the HSV110 controller identified in the handle field is offline.')
sCellEventTrap_9_1b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602331)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1b.setDescription('Severity: Normal -- informational in nature. The state of the Disk Group identified in the handle field has transitioned to the NORMAL state. The value.ul1 field contains the new Disk Group state: 1 (NORMAL). The value.ul2 field contains the old Disk Group state. The state values that may be found in the value.ul2 field are as follows: <UL><LI>2 = Disk Group with no redundancy is inoperative <LI>3 = Disk Group with parity redundancy is inoperative <LI>4 = Disk Group with mirrored redundancy is inoperative <LI>5 = Disk Group with no redundancy is inoperative, marked for re-use <LI>6 = Disk Group with parity redundancy is inoperative, marked for re-use <LI>7 = Disk Group with mirrored redundancy is inoperative, marked for re-use </UL>')
sCellEventTrap_9_1c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602332)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1c.setDescription('Severity: Normal -- informational in nature. The Occupancy Alarm Level for the Disk Group identified in the handle field has returned to the normal range.')
sCellEventTrap_9_1d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602333)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1d.setDescription("Severity: Critical -- failure or failure imminent. An HSV110 controller's battery assembly has malfunctioned. The Battery In Use flag for battery assembly '1' located within the HSV110 controller identified in the handle field has transitioned from the IN USE to NOT IN USE state indicating that the battery assembly has malfunctioned. The secondary_id field contains the battery assembly '1' internal identifier value: 1. The value.ul1 field contains the new state of the Battery In Use flag: 0 (NOT IN USE). The value.ul2 field contains the old state of the Battery In Use flag: 1 (IN USE).")
sCellEventTrap_9_1e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602334)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1e.setDescription("Severity: Normal -- informational in nature. The Battery Present flag for battery assembly '1' located within the HSV110 controller identified in the handle field has changed from NOT PRESENT to PRESENT indicating that the battery assembly was reinstalled. The secondary_id field contains the battery assembly '1' internal identifier value: 1. The value.ul1 field contains the new state of the Battery Present flag: 1 (PRESENT). The value.ul2 field contains the old state of the Battery Present flag: 0 (NOT PRESENT).")
sCellEventTrap_9_1f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602335)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_1f.setDescription("Severity: Critical -- failure or failure imminent. An HSV110 controller's battery assembly has been removed. The Battery Present flag for battery assembly '2' located within the HSV110 controller identified in the handle field has changed from PRESENT to NOT PRESENT indicating that the battery assembly was removed. The secondary_id field contains the battery assembly '2' internal identifier value: 2. The value.ul1 field contains the new state of the Battery Present flag: 0 (NOT PRESENT). The value.ul2 field contains the old state of the Battery Present flag: 1 (PRESENT).")
sCellEventTrap_9_20 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602336)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_20.setDescription("Severity: Normal -- informational in nature. The Battery Present flag for battery assembly '2' located within the HSV110 controller identified in the handle field has changed from NOT PRESENT to PRESENT indicating that the battery assembly was reinstalled. The secondary_id field contains the battery assembly '2' internal identifier value: 2. The value.ul1 field contains the new state of the Battery Present flag: 1 (PRESENT). The value.ul2 field contains the old state of the Battery Present flag: 0 (NOT PRESENT).")
sCellEventTrap_9_21 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602337)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_21.setDescription("Severity: Normal -- informational in nature. The Battery In Use flag for battery assembly '2' located within the HSV110 controller identified in the handle field has transitioned from the NOT IN USE to IN USE state indicating that the battery assembly is functioning properly. The secondary_id field contains the battery assembly '2' internal identifier value: 2. The value.ul1 field contains the new state of the Battery In Use flag: 1 (IN USE). The value.ul2 field contains the old state of the Battery In Use flag: 0 (NOT IN USE).")
sCellEventTrap_9_22 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602338)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_22.setDescription("Severity: Critical -- failure or failure imminent. An HSV110 controller's battery assembly has malfunctioned. The Battery In Use flag for battery assembly '2' located within the HSV110 controller identified in the handle field has transitioned from the IN USE to NOT IN USE state indicating that the battery assembly has malfunctioned. The secondary_id field contains the battery assembly '2' internal identifier value: 2. The value.ul1 field contains the new state of the Battery In Use flag: 0 (NOT IN USE). The value.ul2 field contains the old state of the Battery In Use flag: 1 (IN USE).")
sCellEventTrap_9_23 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602339)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_23.setDescription("Severity: Critical -- failure or failure imminent. The Blower Present flag for the '2' blower assembly located within the HSV110 controller identified in the handle field has transitioned from the PRESENT to NOT PRESENT state indicating that the blower has been removed. The secondary_id field contains the '2' blower assembly internal identifier value: 2. The value.ul1 field contains the new state of the Blower Present flag: 0 (NOT PRESENT). The value.ul2 field contains the old state of the Blower Present flag: 1 (PRESENT).")
sCellEventTrap_9_24 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602340)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_24.setDescription("Severity: Normal -- informational in nature. The Blower Present flag for the '2' blower assembly located within the HSV110 controller identified in the handle field has transitioned from the NOT PRESENT to PRESENT state indicating that the blower has been reinstalled. The secondary_id field contains the '2' blower assembly internal identifier value: 2. The value.ul1 field contains the new state of the Blower Present flag: 1 (PRESENT). The value.ul2 field contains the old state of the Blower Present flag: 0 (NOT PRESENT).")
sCellEventTrap_9_25 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602341)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_25.setDescription("Severity: Critical -- failure or failure imminent. The '2' blower located within the HSV110 controller identified in the handle field is running slower than the lowest acceptable speed. The secondary_id field contains the '2' blower assembly internal identifier value: 2. The value.ul1 field contains the current speed of the '2' blower. The value.ul2 field contains the lowest acceptable speed for the '2' blower.")
sCellEventTrap_9_26 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602342)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_26.setDescription("Severity: Critical -- failure or failure imminent. An HSV110 controller's '1' blower/power supply assembly has been removed or AC power has been removed from the power supply. The HSV110 controller is identified in the handle field. The secondary_id field contains the '1' blower/power supply assembly internal identifier value: 1. The value.ul1 field contains the new state of the Blower/Power Supply Present flag: 0 (NOT PRESENT). The value.ul2 field contains the old state of the Blower/Power Supply Present flag: 1 (PRESENT).")
sCellEventTrap_9_27 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602343)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_27.setDescription("Severity: Normal -- informational in nature. An HSV110 controller's '1' blower/power supply assembly has been reinstalled or AC power has been restored to the power supply. The HSV110 controller is identified in the handle field. The secondary_id field contains the '1' blower/power supply assembly internal identifier value: 1. The value.ul1 field contains the new state of the Blower/Power Supply Present flag: 1 (PRESENT). The value.ul2 field contains the old state of the Blower/Power Supply Present flag: 0 (NOT PRESENT).")
sCellEventTrap_9_28 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602344)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_28.setDescription("Severity: Critical -- failure or failure imminent. An HSV110 controller's '2' blower/power supply assembly has been removed or AC power has been removed from the power supply. The HSV110 controller is identified in the handle field. The secondary_id field contains the '2' blower/power supply assembly internal identifier value: 2. The value.ul1 field contains the new state of the Blower/Power Supply Present flag: 0 (NOT PRESENT). The value.ul2 field contains the old state of the Blower/Power Supply Present flag: 1 (PRESENT).")
sCellEventTrap_9_29 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602345)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_29.setDescription("Severity: Normal -- informational in nature. An HSV110 controller's '2' blower/power supply assembly has been reinstalled or AC power has been restored to the power supply. The HSV110 controller is identified in the handle field. The secondary_id field contains the '2' blower/power supply assembly internal identifier value: 2. The value.ul1 field contains the new state of the Blower/Power Supply Present flag: 1 (PRESENT). The value.ul2 field contains the old state of the Blower/Power Supply Present flag: 0 (NOT PRESENT).")
sCellEventTrap_9_2a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602346)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2a.setDescription("Severity: Critical -- failure or failure imminent. The '1' blower/power supply located within the HSV110 controller identified in the handle field is running slower than the lowest acceptable speed. The secondary_id field contains the '1' blower/power supply assembly internal identifier value: 1. The value.ul1 field contains the current speed of the '1' blower/power supply. The value.ul2 field contains the lowest acceptable speed for the '1' blower/power supply.")
sCellEventTrap_9_2b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602347)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2b.setDescription("Severity: Critical -- failure or failure imminent. The '2' blower/power supply located within the HSV110 controller identified in the handle field is running slower than the lowest acceptable speed. The secondary_id field contains the '2' blower/power supply assembly internal identifier value: 2. The value.ul1 field contains the current speed of the '2' blower/power supply. The value.ul2 field contains the lowest acceptable speed for the '2' blower/power supply.")
sCellEventTrap_9_2c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602348)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2c.setDescription('Severity: Warning -- not failed but attention recommended or required. The state of a battery assembly within the HSV110 controller identified in the handle field has transitioned to the Battery System Hold-up Time is zero hours state. The value.ul1 field contains the new state 5: (Battery System Hold-up Time is zero hours). The value.ul2 field contains the old state. The state values that may be found in the value.ul2 field are as follows: <UL><LI>1 = Battery System Hold-up Time is greater than 96 hours <LI>3 = Battery System Hold-up Time is greater than 0 and less than 96 hours <LI>5 = Battery System Hold-up Time is zero hours </UL>')
sCellEventTrap_9_2d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602349)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2d.setDescription("Severity: Undetermined -- more information needed to determine severity. The Resource Availability state of a Volume has transitioned to the INSUFFICIENT state. The affected Volume is identified in the handle field. The add_handle field contains the identity of the Physical Disk Drive that is associated with that Volume. The enclosure number, bay number, and rack number where the associated Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], and attribute.value.u32[2] fields, respectively. The internal identification of that Volume's Redundant Storage Set is contained in the attribute.value.u32[3] field. The attribute.type field contains the value of 1. The value.ul1 field contains the new state: 1 (INSUFFICIENT). The value.ul2 field contains the old state: 0 (SUFFICIENT).")
sCellEventTrap_9_2e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602350)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2e.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field rejected a login attempt. The value.ul1 and value.ul2 fields contain words [0] and [1], respectively, of the World Wide Name of the host adapter that originated the rejected login attempt. The secondary_id field contains the reason for the rejection as follows: <UL><LI>50 = The host is already logged in <LI>101 = Maximum number of logins is exceeded <LI>102 = Invalid cookie was sent <LI>106 = The password is not set on the HSV110 controller </UL>')
sCellEventTrap_9_2f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602351)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_2f.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field processed a Storage System Management Interface command with the result of non-success return code. The value.ul1 field contains internal the command type. The value.ul2 field contains the internal return code. The attribute.value.obj field contains the internal target and internal version of the command.')
sCellEventTrap_9_30 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602352)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_30.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field has updated the physical disk drive map for the loop pair identified in the secondary_id field. The value.ul1 field contains the new internal map generation number. The value.ul2 field contains the old internal map generation number.')
sCellEventTrap_9_31 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602353)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_31.setDescription('Severity: Critical -- failure or failure imminent. The state of the Physical Disk Drive identified in the handle field has transitioned to the DEGRADED state. The value.ul1 field contains the new state: 2 (DEGRADED). The value.ul2 field contains the old state. The state values that may be in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>3 = Failed <LI>4 = Not present <LI>5 = Single Port on Fibre </UL>The enclosure number, bay number, and rack number where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], attribute.value.u32[2] fields, respectively. The attribute.type field contains value 1. The rack number in the attribute.value.u32[2] field will not contain a valid value until a future release.')
sCellEventTrap_9_32 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602354)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_32.setDescription('Severity: Critical -- failure or failure imminent. The state of the Physical Disk Drive identified in the handle field has transitioned to the FAILED state. The value.ul1 field contains the new state: 3 (FAILED). The value.ul2 field contains the old state. The state values that may be in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>2 = Degraded <LI>4 = Not present <LI>5 = Single Port on Fibre </UL>The enclosure number, bay number, and rack number where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], attribute.value.u32[2] fields, respectively. The attribute.type field contains value 1. The rack number in the attribute.value.u32[2] field will not contain a valid value until a future release.')
sCellEventTrap_9_33 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602355)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_33.setDescription('Severity: Normal -- informational in nature. The Derived Unit identified in the handle field was created. The add_handle field contains the identity of the Storage System Virtual Disk that is associated with that Derived Unit. The attribute.value.obj field contains the identity of the Virtual Disk associated with that Derived Unit.')
sCellEventTrap_9_34 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602356)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_34.setDescription('Severity: Normal -- informational in nature. The internal Logical Disk associated with the Virtual Disk identified in the handle field was created. The add_handle field contains the identity of the Disk Group where this internal Logical Disk was created. The attribute.value.u64[0] field contains the size (in blocks) of the internal Logical Disk. The attribute.value.u32[2] field contains the redundancy type of the internal Logical Disk. The attribute.type field contains the value 5. The values that may be found in the attribute.value.u32[2] field are as follows: <UL><LI>1 = Vraid0 <LI>2 = Vraid1 <LI>3 = Vraid5 </UL>')
sCellEventTrap_9_35 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602357)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_35.setDescription('Severity: Normal -- informational in nature. The Disk Group identified in the handle field was created. The attribute.value.u32[0] field contains the number of physical disk drives within the Disk Group. The attribute.type field contains the value 1.')
sCellEventTrap_9_36 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602358)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_36.setDescription('Severity: Normal -- informational in nature. The Physical Disk Drive identified in the handle field was discovered. The enclosure, bay and rack where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1] and attribute.value.u32[2] fields, respectively. The attribute.type field contains the value 1.')
sCellEventTrap_9_37 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602359)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_37.setDescription('Severity: Normal -- informational in nature. The Presented Unit identified in the handle field was created. The add_handle field contains the identity of the Storage System Virtual Disk that is associated with the Presented Unit. This Presented Unit is associated with the Virtual Disk identified in the attribute.value.obj.handle field. The add_handle2 field contains the associated Storage System Host path, and add_data[0] and add_data[1] contains the host LUN number.')
sCellEventTrap_9_38 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602360)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_38.setDescription('Severity: Normal -- informational in nature. The Storage System Host path identified in the handle field was created.')
sCellEventTrap_9_39 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602361)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_39.setDescription('Severity: Normal -- informational in nature. The Storage System Virtual Disk identified in the handle field was created.')
sCellEventTrap_9_3a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602362)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3a.setDescription('Severity: Normal -- informational in nature. A Volume was created. The Volume is identified in the handle field. The add_handle field contains the identity of the Physical Disk Drive that is associated with that Volume. The enclosure number, bay number, and rack number where the associated Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], and attribute.value.u32[2] fields, respectively. The attribute.type field contains the value of 1.')
sCellEventTrap_9_3b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602363)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3b.setDescription('Severity: Normal -- informational in nature. The Derived Unit identified in the handle field was deleted. The add_handle field contains the identity of the Storage System Virtual Disk that was associated with the Derived Unit. This Derived Unit is associated with the Virtual Disk identified in the attribute.value.obj.handle field.')
sCellEventTrap_9_3c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602364)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3c.setDescription('Severity: Normal -- informational in nature. The internal Logical Disk associated with the Virtual Disk identified in the handle field was deleted.')
sCellEventTrap_9_3d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602365)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3d.setDescription('Severity: Normal -- informational in nature. The Disk Group identified in the handle field was deleted.')
sCellEventTrap_9_3e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602366)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3e.setDescription('Severity: Critical -- failure or failure imminent. The Physical Disk Drive identified in the handle field has disappeared. The enclosure, bay and rack where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1] and attribute.value.u32[2] fields, respectively. The attribute.type field contains the value 1.')
sCellEventTrap_9_3f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602367)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_3f.setDescription('Severity: Normal -- informational in nature. The Presented Unit identified in the handle field was deleted. The add_handle field contains the identity of the Storage System Virtual Disk that was associated with the Presented Unit. This Presented Unit is associated with the Virtual Disk identified in the attribute.value.obj.handle field.')
sCellEventTrap_9_40 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602368)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_40.setDescription('Severity: Normal -- informational in nature. The Storage System Host path identified in the handle field was deleted.')
sCellEventTrap_9_41 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602369)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_41.setDescription('Severity: Normal -- informational in nature. The Storage System Virtual Disk identified in the handle field was deleted. The Storage System Virtual Disk is associated with the Virtual Disk identified in the add_handle field.')
sCellEventTrap_9_43 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602371)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_43.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field has joined the Storage System. If the handle field is zero, the HSV110 controller identity could not be obtained due to an unexpected state transition.')
sCellEventTrap_9_44 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602372)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_44.setDescription('Severity: Undetermined -- more information needed to determine severity. An HSV110 controller has left the Storage System. The HSV110 controller is identified in the handle field. If the handle field is zero, the HSV110 controller identity could not be obtained due to an unexpected state transition.')
sCellEventTrap_9_45 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602373)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_45.setDescription('Severity: Normal -- informational in nature. A Storage System has been deleted by an HSV110 controller. The Storage System is identified in the handle field. The HSV110 controller is identified in the add_handle field. If the handle field or add_handle field is zero, the corresponding identity could not be obtained due to an unexpected state transition.')
sCellEventTrap_9_46 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602374)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_46.setDescription('Severity: Normal -- informational in nature. The Data Replication Group identified in the handle field was created.')
sCellEventTrap_9_47 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602375)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_47.setDescription('Severity: Normal -- informational in nature. The Data Replication Group identified in the handle field was deleted.')
sCellEventTrap_9_48 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602376)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_48.setDescription('Severity: Normal -- informational in nature. The internal Logical Disk associated with the Snapshot Virtual Disk identified in the handle field was created. The add_handle field contains the identity of the Disk Group where this internal Logical Disk was created. The attribute.value.u64[0] field contains the size (in blocks) of the reserved capacity of the internal Logical Disk. The attribute.value.u32[2] field contains the redundancy type of the internal Logical Disk. The attribute.value.u32[3] field contains the noid of the associated successor internal Logical Disk. The attribute.type field contains the value 6. The values that may be found in the attribute.value.u32[2] field are as follows: <UL><LI>1 = Vraid0 <LI>2 = Vraid1 <LI>3 = Vraid5 </UL>')
sCellEventTrap_9_49 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602377)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_49.setDescription('Severity: Normal -- informational in nature. The internal Logical Disk associated with the Copy of the Virtual Disk identified in the handle field was created. The add_handle field contains the identity of the Disk Group where this internal Logical Disk was created. The attribute.value.u64[0] field contains the size (in blocks) of the reserved capacity of the target Virtual Disk. The attribute.value.u32[2] field contains the redundancy type of the internal Logical Disk. The attribute.value.u32[3] field contains the noid of the associated successor internal Logical Disk. The attribute.type field contains the value 6. The values that may be found in the attribute.value.u32[2] field are as follows: <UL><LI>1 = Vraid0 <LI>2 = Vraid1 <LI>3 = Vraid5 </UL>')
sCellEventTrap_9_65 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602405)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_65.setDescription('Severity: Normal -- informational in nature. The Host Operating System mode of the Storage System Host identified in the handle field has changed. The old_attr.type and new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old Host Operating System mode. The new_attr.value.u32[0] field contains the new Host Operating System mode. The values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>0 = Unknown <LI>1 = User defined <LI>2 = Unused <LI>3 = WINNT with SecurePath <LI>4 = VMS <LI>5 = TRU64 UNIX <LI>6 = Sun UNIX <LI>7 = NetWare <LI>8 = HP <LI>9 = IBM <LI>10 = LINUX <LI>11 = SCO UNIX </UL>')
sCellEventTrap_9_66 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602406)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_66.setDescription('Severity: Normal -- informational in nature. Time was set on the Storage System identified in the handle field.')
sCellEventTrap_9_67 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602407)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_67.setDescription('Severity: Normal -- informational in nature. The LUN of the Presented Unit identified in the handle field has changed. The old_attr.type field and the new_attr.type fields contain the value 1. The old_attr.value.u32[0..1] fields contain the value of the old LUN. The new_attr.value.u32[0..1] fields contain the value of the new LUN. The secondary_id field contains the noid portion of the handle for the Storage System Virtual Disk associated with the Presented Unit. This Presented Unit is associated with the Virtual Disk identified in the add_handle field.')
sCellEventTrap_9_68 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602408)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_68.setDescription('Severity: Normal -- informational in nature. The Device Addition Policy of the Storage System identified in the handle field has changed. The old_attr.type field and the new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old Device Addition Policy. The new_attr.value.u32[0] field contains the new Device Addition Policy. The policy values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Manual policy <LI>2 = Automatic policy </UL>')
sCellEventTrap_9_69 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602409)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_69.setDescription('Severity: Normal -- informational in nature. The Quiescent state of the Storage System Virtual Disk identified in the handle field has changed. The old_attr.type field and the new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old Quiescent state. The new_attr.value.u32[0] field contains the new Quiescent state. The state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>0 = Not quiescent <LI>1 = Quiescent </UL>This Storage System Virtual Disk is associated with the Virtual Disk identified in the add_handle field.')
sCellEventTrap_9_6a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602410)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_6a.setDescription('Severity: Normal -- informational in nature. The Enabled/Disabled state of the Storage System Virtual Disk identified in the handle field has changed. The old_attr.type field and the new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old Enabled/Disabled state. The new_attr.value.u32[0] field contains the new Enabled/Disabled state. The state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Disabled <LI>2 = Enabled </UL>This Storage System Virtual Disk is associated with the Virtual Disk identified in the add_handle field.')
sCellEventTrap_9_6b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602411)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_6b.setDescription('Severity: Normal -- informational in nature. The Cache Policy of the Storage System Virtual Disk identified in the handle field has changed. <P> The old_attr.type field and the new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old Write Cache Policy. The new_attr.value.u32[0] field contains the new Write Cache Policy. The policy values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Writethrough <LI>2 = Writeback </UL><P> The old_attr.value.u32[1] field contains the old Read Cache Policy. The new_attr.value.u32[1] field contains the new Read Cache Policy. The policy values that may be found in the old_attr.value.u32[1] and new_attr.value.u32[1] fields are as follows: <UL><LI>1 = Read cache on <LI>2 = Read cache off </UL><P> The old_attr.value.u32[2] field contains the old Cache Mirroring Policy. The new_attr.value.u32[2] field contains the new Cache Mirroring Policy. The policy values that may be found in the old_attr.value.u32[2] and new_attr.value.u32[2] fields are as follows: <UL><LI>1 = Mirror <LI>2 = No mirror </UL>This Storage System Virtual Disk is associated with the Virtual Disk identified in the add_handle field.')
sCellEventTrap_9_6c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602412)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_6c.setDescription("Severity: Normal -- informational in nature. The Usage state of a Volume changed. The affected Volume is identified in the handle field. The old_attr.value.u32[0] field contains the old Usage state. The new_attr.value.u32[0] field contains the new Usage state. The Usage state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Disk Group <LI>2 = Reserved <LI>4 - 20 = temporary usage reserved for drive code load </UL>This Volume is associated with the Disk Group identified in the add_handle field, if either the old Usage state or the new Usage state is 1. The secondary_id field contains the internal identification of that Volume's Redundant Storage Set.")
sCellEventTrap_9_6d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602413)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_6d.setDescription('Severity: Normal -- informational in nature. The Disk Failure Protection Level of the Disk Group identified in the handle field has changed. The old_attr.type and new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old number of physical disk drives available for use. The new_attr.value.u32[0] field contains the new number of physical disk drives available for use.')
sCellEventTrap_9_6e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602414)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_6e.setDescription('Severity: Normal -- informational in nature. The Write Protected state of the Derived Unit identified in the handle field has changed. This Derived Unit is associated with the Virtual Disk identified in the add_handle field. The secondary_id field contains the noid portion of the handle for the Storage System Virtual Disk associated with the Derived Unit. The old_attr.type field and the new_attr.type fields contain the value 1. The old_attr.value.u32[0] field contains the old Write Protected state. The new_attr.value.u32[0] field contains the new Write Protected state. The Write Protected state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>0 = Write protect off <LI>1 = Write protect on </UL>This Derived Unit is associated with the Virtual Disk identified in the add_handle field.')
sCellEventTrap_9_70 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602416)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_70.setDescription('Severity: Warning -- not failed but attention recommended or required. The Physical Disk Drive identified in the handle field has experienced numerous communication failures on a particular Fibre Channel port identified in the new_attr.value.str field. The old_attr.value.u32[0] field contains the internal port ID. The enclosure number, bay number, and rack number where the Physical Disk Drive is located are contained in the old_attr.value.u32[1], old_attr.value.u32[2], old_attr.value.u32[3] fields, respectively. The old_attr.type field contains value 1. The new_attr.value.str field contains the cerp_id of the Fibre Channel port. The new_attr.type field contains value 4.')
sCellEventTrap_9_71 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602417)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_71.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field received a request to shutdown. <P> The old_attr.type field and field contain the value 1. The old_attr.value.u32[0] field indicates the type of restart that was requested as follows: <UL><LI>0 = None -- no restart <LI>1 = Regular -- full restart, host system connectivity is lost until the controller returns to normal operation <LI>2 = Fast -- resynchronization, restart of the controller in a manner that has little or no impact on host system connectivity </UL><P> The old_attr.value.u32[1] field indicates whether the other HSV110 controller of the pair was requested to remain operational or to also shutdown as follows: <UL><LI>0 = Remain operational <LI>1 = Coupled shutdown </UL><P> The old_attr.value.u32[2] field indicates whether the HSV110 controller was requested to remain in the power on state or power itself off as follows: <UL><LI>0 = Remain in the power on state <LI>1 = Power itself off </UL><P> The old_attr.value.u32[3] field value indicates whether the Physical Disk Drive enclosure(s) was requested to remain in the power on state or to be powered off as follows: <UL><LI>0 = Remain in the power on state <LI>1 = Powered off </UL><P> The old_attr.value.u32[4] field value indicates whether the battery assemblies located within the HSV110 controller were requested to be enabled or disabled as follows: <UL><LI>0 = Enabled <LI>1 = Disabled </UL><P> The old_attr.value.u32[5] field contains the number of seconds the shutdown operation was requested to be delayed.')
sCellEventTrap_9_72 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602418)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_72.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field has completed its shutdown preparations. <P> The old_attr.type field contain the value 1. The old_attr.value.u32[0] field value indicates the result of the HSV110 controller Cache Memory shutdown operation as follows: <UL><LI>1 = Success <LI>2 = Failure <LI>3 = Not applicable </UL><P> The old_attr.value.u32[1] field contains the internal Storage System Management Interface cache shutdown status code. <P> The old_attr.value.u32[2] field value indicates the result of the Physical Disk Drive enclosure(s) power off operation as follows: <UL><LI>1 = Success <LI>2 = Failure <LI>3 = Not applicable </UL><P> The old_attr.value.u32[3] field contains the internal Storage System Management Interface Physical Disk Drive enclosure(s) power off status code. <P> The old_attr.value.u32[4] field value indicates the result of the battery assemblies disable operation as follows: <UL><LI>1 = Success <LI>2 = Failure <LI>3 = Not applicable </UL><P> The old_attr.value.u32[5] field value indicates the battery assemblies disable operation failure mode as follows: <UL><LI>0 = No failure indicated. <LI>1 = Failed only on the HSV110 controller identified in the handle field. <LI>2 = Failed only on the other HSV110 controller of the pair. <LI>3 = Failed on both HSV110 controllers. </UL>')
sCellEventTrap_9_73 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602419)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_73.setDescription('Severity: Normal -- informational in nature. The Failsafe state of the Data Replication Group identified in the handle field has changed. The old_attr.value.u32[0] field contains the old Failsafe state. The new_attr.value.u32[0] field contains the new Failsafe state. The Failsafe state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Failsafe Disabled <LI>2 = Failsafe Enabled </UL>')
sCellEventTrap_9_74 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602420)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_74.setDescription('Severity: Normal -- informational in nature. The Mode of the Data Replication Group identified in the handle field has changed. The old_attr.value.u32[0] field contains the old Mode. The new_attr.value.u32[0] field contains the new Mode. The Mode values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>0 = Normal Active Source <LI>1 = Normal Active Destination <LI>2 = Active/Active (Master) <LI>3 = Active/Active (Non-Master) </UL>')
sCellEventTrap_9_75 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602421)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_75.setDescription('Severity: Normal -- informational in nature. The Operational state of a Data Replication Group has changed to Synchronous or Asynchronous. The old_attr.value.u32[0] field contains the old Operation state. The new_attr.value.u32[0] field contains the new Operation state. The Operation state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Synchronous <LI>2 = Asynchronous </UL>')
sCellEventTrap_9_76 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602422)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_76.setDescription('Severity: Normal -- informational in nature. The Read Only attribute of the Data Replication Group identified in the handle field has changed. The old_attr.value.u32[0] field contains the old Read Only attribute. The new_attr.value.u32[0] field contains the new Read Only attribute. The Read Only attribute values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>0 = Data Replication Destination Storage System Virtual Disk disabled for read access. <LI>1 = Data Replication Destination Storage System Virtual Disk enabled for read access. </UL>')
sCellEventTrap_9_77 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602423)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_77.setDescription('Severity: Normal -- informational in nature. A Data Replication Group failover has occurred. The handle field contains the identity of the Data Replication Group. The old_attr.value.u32[0] field contains the old Role. The new_attr.value.u32[0] field contains the new Role. <UL><LI>0 = Normal Active Source <LI>1 = Normal Active Destination <LI>2 = Active/Active (Master) <LI>3 = Active/Active (Non-Master) </UL>')
sCellEventTrap_9_78 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602424)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_78.setDescription('Severity: Normal -- informational in nature. A Data Replication Group has been suspended or resumed. The handle field contains the identity of the Data Replication Group. The old_attr.value.u32[0] field contains the old Suspend state. The new_attr.value.u32[0] field contains the new Suspend state. The Suspend state values that may be found in the old_attr.value.u32[0] and new_attr.value.u32[0] fields are as follows: <UL><LI>1 = Connection between the Data Replication Source and Data Replication Destination is active. <LI>2 = Connection between the Data Replication Source and Data Replication Destination is inactive. </UL>')
sCellEventTrap_9_79 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602425)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_79.setDescription('Severity: Normal -- informational in nature. A Storage System Virtual Disk was added to a Data Replication Group. The Storage System Virtual Disk is identified in the add_handle field. The Data Replication Group is identified in the handle field.')
sCellEventTrap_9_7a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602426)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_7a.setDescription('Severity: Normal -- informational in nature. A Storage System Virtual Disk was removed from a Data Replication Group. The Storage System Virtual Disk is identified in the add_handle field. The Data Replication Group is identified in the handle field.')
sCellEventTrap_9_c8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602504)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_c8.setDescription('Severity: Undetermined -- more information needed to determine severity. The Data Availability state of the internal Logical Disk associated with the Virtual Disk identified in the handle field has transitioned to the DATA LOST state. The value.ul1 field contains the new state: 1 (DATA LOST). The value.ul2 field contains the old state: 0 (NORMAL).')
sCellEventTrap_9_c9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602505)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_c9.setDescription('Severity: Undetermined -- more information needed to determine severity. The state of the Disk Group identified in the handle field has transitioned to an INOPERATIVE state. The value.ul1 field contains the new Disk Group state. The value.ul2 field contains the old Disk Group state. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>1 = Normal <LI>2 = Disk Group with no redundancy is inoperative <LI>3 = Disk Group with parity redundancy is inoperative <LI>4 = Disk Group with mirrored redundancy is inoperative <LI>5 = Disk Group with no redundancy is inoperative, marked for re-use <LI>6 = Disk Group with parity redundancy is inoperative, marked for re-use <LI>7 = Disk Group with mirrored redundancy is inoperative, marked for re-use </UL>')
sCellEventTrap_9_ca = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602506)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_ca.setDescription('Severity: Undetermined -- more information needed to determine severity. The state of the internal Logical Disk associated with the Virtual Disk identified in the handle field has transitioned to the FAILED state. The value.ul1 field contains the new state: 5 (FAILED). The value.ul2 field contains the old state. The state values that may be found in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>2 = Replacement delay in progress <LI>3 = Redundancy lost, restore in progress <LI>4 = Redundancy lost, restore stalled <LI>6 = Creation in progress <LI>7 = Snapshot is inoperative due to lack of snapshot space <LI>8 = Deletion in progress <LI>9 = Capacity change in progress <LI>10 = Inoperative due to data lost <LI>11 = Capacity reservation in progress <LI>12 = Capacity unreservation in progress </UL>')
sCellEventTrap_9_cb = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602507)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_cb.setDescription('Severity: Critical -- failure or failure imminent. The state of the internal Logical Disk associated with the Virtual Disk identified in the handle field has transitioned to the SNAPSHOT OVERCOMMIT state. The value.ul1 field contains the new state: 7 (SNAPSHOT OVERCOMMIT). The value.ul2 field contains the old state. The state values that may be found in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>2 = Replacement delay in progress <LI>3 = Redundancy lost, restore in progress <LI>4 = Redundancy lost, restore stalled <LI>5 = Failed <LI>6 = Creation in progress <LI>8 = Deletion in progress <LI>9 = Capacity change in progress <LI>10 = Inoperative due to device data lost <LI>11 = Capacity reservation in progress <LI>12 = Capacity unreservation in progress </UL>')
sCellEventTrap_9_cc = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602508)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_cc.setDescription('Severity: Undetermined -- more information needed to determine severity. The state of the internal Logical Disk associated with the Virtual Disk identified in the handle field has transitioned to the DEVICE DATA LOST state. The value.ul1 field contains the new state: 10 (DEVICE DATA LOST). The value.ul2 field contains the old state. The state values that may be found in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>2 = Replacement delay in progress <LI>3 = Redundancy lost restore, in progress <LI>4 = Redundancy lost restore, stalled <LI>5 = Failed <LI>6 = Creation in progress <LI>7 = Snapshot is inoperative due to lack of snapshot space <LI>8 = Deletion in progress <LI>9 = Capacity change in progress <LI>11 = Capacity reservation in progress <LI>12 = Capacity unreservation in progress </UL>')
sCellEventTrap_9_cd = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602509)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_cd.setDescription("Severity: Undetermined -- more information needed to determine severity. The state of the Fibre Channel port identified in the attribute.value.str field and located on the rear panel of the HSV110 controller identified in the handle field has transitioned to the FAILED state. The attribute.type field contains the value 4. The value.ul1 field contains the new state: 2 (FAILED). The value.ul2 field contains the old state: 1 (NORMAL). <P> Note that the HSV110 controller's internal identity of the affected Fibre Channel port is contained in the secondary_id field.")
sCellEventTrap_9_ce = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602510)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_ce.setDescription('Severity: Normal -- informational in nature. The state of the Disk Group identified in the handle field has transitioned to an INOPERATIVE MARKED state. The value.ul1 field contains the new Disk Group state. The value.ul2 field contains the old Disk Group state. The state values that may be found in the value.ul1 and value.ul2 fields are as follows: <UL><LI>1 = Normal <LI>2 = Disk Group with no redundancy is inoperative <LI>3 = Disk Group with parity redundancy is inoperative <LI>4 = Disk Group with mirrored redundancy is inoperative <LI>5 = Disk Group with no redundancy is inoperative, marked for re-use <LI>6 = Disk Group with parity redundancy is inoperative, marked for re-use <LI>7 = Disk Group with mirrored redundancy is inoperative, marked for re-use </UL>')
sCellEventTrap_9_cf = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602511)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_cf.setDescription('Severity: Warning -- not failed but attention recommended or required. The state of the Physical Disk Drive identified in the handle field has transitioned to the NOT PRESENT state. The value.ul1 field contains the new state: 4 (NOT PRESENT). The value.ul2 field contains the old state. The state values that may be in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>2 = Degraded <LI>3 = Failed <LI>5 = Single Port on Fibre </UL>The enclosure number, bay number, and rack number where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], attribute.value.u32[2] fields, respectively. The attribute.type field contains value 1. The rack number in the attribute.value.u32[2] field will not contain a valid value until a future release.')
sCellEventTrap_9_d0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602512)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d0.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field no longer needs attention.')
sCellEventTrap_9_d1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602513)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d1.setDescription('Severity: Undetermined -- more information needed to determine severity. The HSV110 controller identified in the handle field needs attention.')
sCellEventTrap_9_d2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602514)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d2.setDescription("Severity: Critical -- failure or failure imminent. The Blower Present flag for the '1' blower assembly located within the HSV110 controller identified in the handle field has transitioned from the PRESENT to NOT PRESENT state indicating that the blower has been removed. The secondary_id field contains the '1' blower assembly internal identifier value: 1. The value.ul1 field contains the new state of the Blower Present flag: 0 (NOT PRESENT). The value.ul2 field contains the old state of the Blower Present flag: 1 (PRESENT).")
sCellEventTrap_9_d3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602515)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d3.setDescription('Severity: Undetermined -- more information needed to determine severity. At least one Virtual Disk associated with the Data Replication Group identified in the handle field has transitioned to the INOPERATIVE state. The remaining Virtual Disks associated with this Data Replication Group have been forced INOPERATIVE. The value.ul1 field contains the new Data Replication Group member state: 2 (INOPERATIVE). The value.ul2 field contains the old Data Replication Group member state: 1 (OPERATIVE).')
sCellEventTrap_9_d4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602516)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d4.setDescription('Severity: Normal -- informational in nature. All the Virtual Disks associated with the Data Replication Group identified in the handle field have transitioned to the OPERATIVE state. The value.ul1 field contains the new Data Replication Group member state: 1 (OPERATIVE). The value.ul2 field contains the old Data Replication Group member state: 2 (INOPERATIVE).')
sCellEventTrap_9_d5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602517)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d5.setDescription('Severity: Normal -- informational in nature. The state of the Physical Disk Drive identified in the handle field has transitioned to the Single Port on Fibre state. The value.ul1 field contains the new state: 5 (SINGLE PORT ON FIBRE). The value.ul2 field contains the old state. The state values that may be in the value.ul2 field are as follows: <UL><LI>1 = Normal <LI>2 = Degraded <LI>3 = Failed <LI>4 = Not Present </UL>The enclosure number, bay number, and rack number where the Physical Disk Drive is located are contained in the attribute.value.u32[0], attribute.value.u32[1], attribute.value.u32[2] fields, respectively. The attribute.type field contains value 1. The rack number in the attribute.value.u32[2] field will not contain a valid value until a future release.')
sCellEventTrap_9_d6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602518)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d6.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field has been shutdown because the temperature sensors do not agree and the system temperature can not be accurately determined. The value.ul1 field contains the current temperature reported in celsius from I2C sensor 1, while the value.ul2 field contains the reading from I2C sensor 2.')
sCellEventTrap_9_d7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602519)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_9_d7.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified in the handle field has been shutdown because the temperature sensors can not be accessed and the system temperature can not be accurately determined. The value.ul1 field contains the status from the attempted I2C access.')
sCellEventTrap_b_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13602816)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_b_0.setDescription('Severity: Normal -- informational in nature. The HSV110 controller identified by the node_name field has begun a resynchronization operation (i.e., a restart of the controllers in a manner that has little or no impact on host system connectivity). The information.pc field contains the program counter of resynchronization operation initiator. The information.flags field contains reboot flags value. The information.code field contains the resynchronization operation event code value.')
sCellEventTrap_c_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603072)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_0.setDescription('Severity: Normal -- informational in nature. The specified Destination Virtual Disk has successfully completed a Full Copy. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603073)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_1.setDescription('Severity: Critical -- failure or failure imminent. The specified Source Virtual Disk has transitioned to the Logging state because the alternate Storage System is not accessible or the Data Replication Group is suspended. The following fields are not valid: status, blocks, vda, port, cerp_id, side.')
sCellEventTrap_c_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603074)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_2.setDescription('Severity: Critical -- failure or failure imminent. The specified Source Virtual Disk has transitioned to the Logging state because the Destination Virtual Disk is not accessible. The following fields are not valid: status, blocks, vda, port, cerp_id, side.')
sCellEventTrap_c_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603075)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_3.setDescription('Severity: Normal -- informational in nature. The specified Destination Virtual Disk has transitioned to the Merging state, because the alternate Storage System or Destination Virtual Disk is now accessible or resumed. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603076)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_4.setDescription('Severity: Critical -- failure or failure imminent. A Data Replication Group has entered the Failsafe Locked state due to an inaccessible or inoperative destination. Either the Destination Virtual Disk is not accessible or a Virtual Disk in the Data Replication Group is inoperative. The following fields are not valid: status, blocks, vda, port, cerp_id, side.')
sCellEventTrap_c_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603077)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_5.setDescription('Severity: Critical -- failure or failure imminent. A Data Replication Group has entered the Failsafe Locked state due to an inoperative source. Either the Source Virtual Disk is not accessible or a Virtual Disk in the Data Replication Group is inoperative. The following fields are not valid: status, blocks, vda, port, cerp_id, side.')
sCellEventTrap_c_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603078)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_6.setDescription('Severity: Critical -- failure or failure imminent. An unrecoverable read error occurred on the specified Source Virtual Disk during the Full Copy. The Virtual Disk address specified in the vda field indicates the first block in error. The Full Copy was terminated.')
sCellEventTrap_c_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603079)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_7.setDescription('Severity: Critical -- failure or failure imminent. A Full Copy terminated prior to completion. A remote copy error occurred due to an inaccessible alternate Storage System. The Virtual Disk address specified in the vda field indicates the first block in error. The Full Copy will continue when the Data Replication Destination is restored.')
sCellEventTrap_c_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603080)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_8.setDescription('Severity: Critical -- failure or failure imminent. A Full Copy terminated prior to completion. A remote copy error occurred due to an inaccessible Destination Virtual Disk. The Virtual Disk address specified in the vda field indicates the first block in error. The Full Copy will continue when the Data Replication Destination is restored.')
sCellEventTrap_c_9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603081)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_9.setDescription('Severity: Warning -- not failed but attention recommended or required. A Data Replication Log has been reset due to insufficient Disk Group capacity. The Data Replication Destination has been marked for a Full Copy. The following fields are not valid: status, blocks, vda, port, cerp_id, side.')
sCellEventTrap_c_a = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603082)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_a.setDescription('Severity: Normal -- informational in nature. A Data Replication Log has been reset due to a Data Replication Group failover. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603084)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_c.setDescription('Severity: Normal -- informational in nature. A Destination Data Replication Group has successfully completed a Merge. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603087)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_f.setDescription('Severity: Normal -- informational in nature. A Data Replication Group is no longer in a Failsafe Locked state. The following fields are not valid: status, blocks, vda, port, cerp_id, side.')
sCellEventTrap_c_10 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603088)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_10.setDescription('Severity: Normal -- informational in nature. A Destination Data Replication Group has been marked for a Full Copy. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_11 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603089)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_11.setDescription('Severity: Normal -- informational in nature. A Storage System has discovered that a Data Replication Group failover has taken place. This Virtual Disk is transitioning from a Data Replication Source role to a Data Replication Destination role. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_12 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603090)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_12.setDescription('Severity: Normal -- informational in nature. This Data Replication Group is transitioning from a Data Replication Destination role to a Data Replication Source role. The following fields are not valid: status, blocks, vda.')
sCellEventTrap_c_15 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603093)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_c_15.setDescription('Severity: Normal -- informational in nature. The Data Replication Path between this Site and the Alternate Site has closed, possibly due to a connection failure between the specified host port and the Alternate Site. The following fields are not valid: group_name_uuid, group_uuid, source_scvd_uuid, status, block, vda.')
sCellEventTrap_d_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603328)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_0.setDescription('Severity: Critical -- failure or failure imminent. Unrecognized event reported by a Drive Enclosure Environmental Monitoring Unit. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. The event was reported by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The content of the alarm_error_code field could not be translated into a known event. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603329)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_1.setDescription('Severity: Critical -- failure or failure imminent. A physical disk drive that is not Fibre Channel compatible or cannot operate at the link rate established by the drive enclosure I/O modules was detected. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. This problem was detected during spin up of the physical disk drive installed in the drive enclosure bay identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603330)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_2.setDescription('Severity: Warning -- not failed but attention recommended or required. A physical disk drive is improperly installed or missing. This could affect the drive enclosure air flow and cause an over temperature condition. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The affected drive enclosure bay is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603331)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_3.setDescription('Severity: Warning -- not failed but attention recommended or required. A physical disk drive was removed while software-activated drive locking was enabled on a drive enclosure that does not support drive locking. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The affected drive enclosure bay is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603332)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_4.setDescription('Severity: Critical -- failure or failure imminent. A physical disk drive that is capable of operating at the loop link rate established by the drive enclosure I/O module was found to be running at a different rate. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The affected physical disk drive is installed in the drive enclosure bay identified in the alarm_error_code.field.en field. The Fibre Channel loop on which the problem was detected is identified by the content of the alarm_error_code.field.ec field as follows: <UL><LI>4 = loop A <LI>5 = loop B </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_33 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603379)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_33.setDescription('Severity: Warning -- not failed but attention recommended or required. The AC input to a drive enclosure power supply has been lost. This makes the remaining power supply a single point of failure. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the affected power supply (1 or 2) is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_34 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603380)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_34.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure power supply is improperly installed or missing. This could affect the drive enclosure air flow and cause an over temperature condition. The operational power supply will automatically shut down after a short period of time, thereby disabling the drive enclosure. This condition remains active until either the problem is corrected, or the operational power supply shuts down, whichever occurs first. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the affected power supply (1 or 2) is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_35 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603381)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_35.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure power supply component has failed. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the affected power supply (1 or 2) is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_47 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603399)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_47.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure blower is not operating properly. This could affect the drive enclosure air flow and cause an over temperature condition. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the affected blower (1 or 2) is identified in the alarm_error_code.field.en field. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = The blower is operating at a speed that is outside of the Drive Enclosure Environmental Monitoring Unit specified range, possibly because of a bearing problem. <LI>2 = The blower is operating at a speed that is significantly outside of the Drive Enclosure Environmental Monitoring Unit specified range, possibly because of a bearing problem. <LI>3 = The blower has stopped. NOTE: The other blower (if operational) now operates at high speed and is a single point of failure. A single blower operating at high speed can provide sufficient air flow to cool an enclosure and the elements for up to 100 hours. However, operating an enclosure at temperatures approaching an overheating threshold can damage elements and may reduce the MTBF of a specific element. Hewlett-Packard therefore recommends immediate replacement of the defective blower. <LI>4 = The power supply reported an internal blower error. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_4b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603403)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_4b.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure blower is improperly installed or missing. This affects the drive enclosure air flow and can cause an over temperature condition. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the affected blower (1 or 2) is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_4c = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603404)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_4c.setDescription("Severity: Critical -- failure or failure imminent. Both drive enclosure blowers are missing. This severely affects the drive enclosure air flow and can cause an over temperature condition. The operational power supply(s) will automatically shut down after a short period of time, thereby disabling the drive enclosure. This condition remains active until either the problem is corrected, or the operational power supply(s) shut down, whichever occurs first. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. Note that this event is preceded by a 'drive enclosure blower is improperly installed or missing' event that identifies the location of the first missing blower. The location of the second missing blower (1 or 2) is identified in the alarm_error_code.field.en field of this event. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_d_5b = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603419)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_5b.setDescription("Severity: Warning -- not failed but attention recommended or required. A drive enclosure temperature sensor out of range condition has been reported by one of the drive enclosure elements. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the temperature sensor (1 through 11) is identified in the alarm_error_code.field.en field as follows: <UL><LI>1 = Power Supply 1 Exhaust <LI>2 = Power Supply 2 Exhaust <LI>3 = Drive Enclosure Environmental Monitoring Unit <LI>4 = Drive Bay 1 <LI>5 = Drive Bay 2 <LI>6 = Drive Bay 3 <LI>7 = Drive Bay 4 <LI>8 = Drive Bay 5 <LI>9 = Drive Bay 6 <LI>A = Drive Bay 7 <LI>B = Drive Bay 8 <LI>C = Drive Bay 9 <LI>D = Drive Bay 10 <LI>E = Drive Bay 11 <LI>F = Drive Bay 12 <LI>10 = Drive Bay 13 <LI>11 = Drive Bay 14 </UL><P> The temperature sensor out of range condition is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = The element temperature is approaching, but has not reached, the high temperature CRITICAL threshold. Continued operation under these conditions may result in a CRITICAL condition and may reduce an element's MTBF. <LI>2 = The element temperature is above the high temperature CRITICAL threshold. Continued operation under these conditions may result in element failure. <LI>3 = The element temperature is approaching, but has not reached, the low temperature CRITICAL threshold. Continued operation under these conditions may result in a CRITICAL condition and may reduce an element's MTBF. <LI>4 = The element temperature has reached the low temperature CRITICAL threshold. Continued operation under these conditions may result in element failure. </UL><P> The actual temperature threshold values can be found in the HSV element manager GUI. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_d_5f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603423)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_5f.setDescription('Severity: Critical -- failure or failure imminent. The average temperature of two of the three temperature sensor groups (i.e., Drive Enclosure Environmental Monitoring Unit, Disk Drives, and Power Supplies) exceeds the CRITICAL level. The operational power supply(s) will automatically shut down after a short period of time, thereby disabling the drive enclosure. This condition remains active until either the problem is corrected, or the operational power supply(s) shut down, whichever occurs first. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. Note that in this case the content of the alarm_error_code.field.en field is undefined. <P> The actual temperature threshold values can be found in the HSV element manager GUI. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_6f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603439)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_6f.setDescription('Severity: Warning -- not failed but attention recommended or required. An internal Drive Enclosure Environmental Monitoring Unit error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = An internal Drive Enclosure Environmental Monitoring Unit clock error has occurred. <LI>2 = The Inter-IC (I2C) bus is not processing data and the Drive Enclosure Environmental Monitoring Unit is unable to monitor or report the status of the elements or enclosures. <LI>5 = A Backplane NVRAM error has occurred. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_71 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603441)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_71.setDescription('Severity: Normal -- informational in nature. An internal Drive Enclosure Environmental Monitoring Unit error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>3 = A drive enclosure power supply was shut down. <LI>16 = The Drive Enclosure Environmental Monitoring Unit ESI data has been corrupted. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_72 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603442)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_72.setDescription('Severity: Warning -- not failed but attention recommended or required. A Drive Enclosure Environmental Monitoring Unit is unable to collect data for the SCSI-3 Enclosure Services (SES) page. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_7e = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603454)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_7e.setDescription('Severity: Warning -- not failed but attention recommended or required. Invalid data was read from a Drive Enclosure Environmental Monitoring Unit NVRAM. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_7f = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603455)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_7f.setDescription('Severity: Warning -- not failed but attention recommended or required. An internal Drive Enclosure Environmental Monitoring Unit error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>11 = The Drive Enclosure Environmental Monitoring Unit cannot write data to the NVRAM. <LI>12 = The Drive Enclosure Environmental Monitoring Unit cannot read data from the NVRAM. <LI>13 = The Field Programmable Gate Array (FPGA) that controls the ESI bus failed to load information required for Drive Enclosure Environmental Monitoring Unit operation. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_82 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603458)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_82.setDescription("Severity: Warning -- not failed but attention recommended or required. A drive enclosure's address is incorrect or the enclosure has no address. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_d_83 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603459)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_83.setDescription('Severity: Critical -- failure or failure imminent. A Drive Enclosure Environmental Monitoring Unit has experienced a hardware failure. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>15 = Drive Enclosure Environmental Monitoring Unit hardware failure DP. <LI>18 = Drive Enclosure Environmental Monitoring Unit hardware failed BT. <LI>19 = Drive Enclosure Environmental Monitoring Unit ESI driver failure. </UL>')
sCellEventTrap_d_85 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603461)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_85.setDescription('Severity: Warning -- not failed but attention recommended or required. A drive enclosure power supply failed to respond to a shut down command. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the Drive Enclosure Environmental Monitoring Unit is the affected element. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_8d = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603469)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_8d.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure transceiver error has been detected. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the transceiver (1 through 4) is identified in the alarm_error_code.field.en field as follows: <UL><LI>1 = Transceiver 01 <LI>2 = Transceiver 02 <LI>3 = Transceiver 03 <LI>4 = Transceiver 04 </UL><P> The transceiver error condition is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = The transceivers on this link are not the same type or they are incompatible with the drive enclosure I/O module. This error prevents the controller from establishing a link with the enclosure drives and eliminates the enclosure dual-loop capability. <LI>2 = The transceiver can no longer detect a data signal. This error prevents the controller from transferring data on a loop and eliminates the enclosure dual-loop capability. <LI>3 = The system has detected an FC-AL bus fault involving a transceiver. This error prevents the controller from transferring data on a loop and eliminates the enclosure dual-loop capability. <LI>4 = The transceiver that was previously in this location has been removed. <LI>5 = The transceiver in the specified location has detected invalid Fibre Channel characters. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_a1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603489)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_a1.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure power supply voltage sensor out of range condition has been reported. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the voltage sensor (1 through 4) is identified in the alarm_error_code.field.en field as follows: <UL><LI>1 = Power Supply 1 +5 VDC <LI>2 = Power Supply 1 +12 VDC <LI>3 = Power Supply 2 +5 VDC <LI>4 = Power Supply 2 +12 VDC </UL><P> The voltage sensor out of range condition is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = The element voltage is approaching, but has not reached, the high voltage CRITICAL threshold. Continued operation under these conditions may result in a CRITICAL condition. <LI>2 = The element voltage is above the high voltage CRITICAL threshold. <LI>3 = The element voltage is approaching, but has not reached, the low voltage CRITICAL threshold. Continued operation under these conditions may result in a CRITICAL condition. <LI>4 = The element voltage has reached the low voltage CRITICAL threshold. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_b5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603509)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_b5.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure power supply current sensor out of range condition has been reported. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the current sensor (1 through 4) is identified in the alarm_error_code.field.en field as follows: <UL><LI>1 = Power Supply 1 +5 VDC <LI>2 = Power Supply 1 +12 VDC <LI>3 = Power Supply 2 +5 VDC <LI>4 = Power Supply 2 +12 VDC </UL><P> The current sensor out of range condition is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = The element current is approaching, but has not reached, the high current CRITICAL threshold. Continued operation under these conditions may result in a CRITICAL condition. <LI>2 = The element current is above the high current CRITICAL threshold. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_d8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603544)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_d8.setDescription('Severity: Warning -- not failed but attention recommended or required. A drive enclosure backplane invalid NVRAM read error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit.This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the drive enclosure is the affected element. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_d9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603545)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_d9.setDescription('Severity: Critical -- failure or failure imminent. A drive enclosure backplane error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The alarm_error_code.field.en field contains the value 1 signifying that the drive enclosure is the affected element. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>11 = Unable to write data to the NVRAM. This problem prevents communication between elements in the enclosure. <LI>12 = Unable to read data from the NVRAM. This problem prevents communication between elements in the enclosure. <LI>13 = NVRAM has not been initialized properly. This is a manufacturing error. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_dd = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603549)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_dd.setDescription("Severity: Critical -- failure or failure imminent. A drive enclosure I/O module error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the I/O module (A (01) and B (02)) is identified in the alarm_error_code.field.en field. The cause of the improper operation is described by the content of the alarm_error_code.field.ec field as follows: <UL><LI>1 = The I/O module's Fibre Channel link speed is not supported by the backplane. This error prevents the controller from establishing a link with enclosure drives and eliminates the enclosure dual-loop capability. <LI>11 = Unable to write data to the I/O module NVRAM. <LI>12 = Unable to read data from the I/O module NVRAM. <LI>13 = The I/O module that was in this location has been removed. </UL><P> The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.")
sCellEventTrap_d_de = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603550)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_de.setDescription('Severity: Warning -- not failed but attention recommended or required. A drive enclosure I/O module is unable to communicate with the Drive Enclosure Environmental Monitoring Unit. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit. This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the I/O module (A (01) and B (02)) is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_ec = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603564)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_ec.setDescription('Severity: Warning -- not failed but attention recommended or required. A drive enclosure I/O module invalid NVRAM read error has occurred. The handle field contains the WWN of the drive enclosure containing the Drive Enclosure Environmental Monitoring Unit.This problem was detected by the Drive Enclosure Environmental Monitoring Unit located in the drive enclosure determined by the content of the dencl_num field as follows: <UL><LI>If dencl_num is less than 99, the location is as indicated by the content of the rack_num and dencl_num fields. <LI>If dencl_num is equal to 99, the location is unknown. Note that the content of the rack_num field is undefined in this case. <LI>If dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the rack_num and dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the rack_num field will not be valid until a future release. The location of the I/O module (A (01) or B (02)) is identified in the alarm_error_code.field.en field. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_d_f0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13603568)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_d_f0.setDescription('Severity: Normal -- informational in nature. The status has changed on one or more of the drive enclosures. This is an informational event triggered by the occurrence of a change in the status of a drive enclosure. This event is generated for the HSV element manager GUI and contains no user information. The content of the handle, alarm_error_code field, dencl_num, and rack_num fields have no meaning for this event. The enclosures array shows the drive enclosures available on the Fibre Channel loop pair (0 = Loop A, 1 = Loop B) identified in the loop field. The location of an available drive enclosure is determined by the content of the enclosures.dencl_num field as follows: <UL><LI>If enclosures.dencl_num is less than 99, the location is as indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. <LI>If enclosures.dencl_num is equal to 99, the enclosures array entry is not used. Note that the content of the enclosures.rack_num field is undefined in this case. <LI>If enclosures.dencl_num is greater than 99, the HSV110 controller does not have proof of the current location but the last known location is indicated by the content of the enclosures.rack_num and enclosures.dencl_num fields. Subtract 100 from the content of those fields to determine the actual last known location. If there have been no configuration changes, the last known location values will be accurate. </UL>Note that the content of the enclosures.rack_num field will not be valid until a future release.')
sCellEventTrap_42_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13616896)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_42_0.setDescription('Severity: Normal -- informational in nature. Indicated Host Fibre Channel port transitioned to link down.')
sCellEventTrap_42_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13616897)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_42_1.setDescription('Severity: Normal -- informational in nature. Indicated Host Fibre Channel port transitioned to link failed.')
sCellEventTrap_42_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13616899)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_42_3.setDescription("Severity: Normal -- informational in nature. An excessive number of link errors were detected on a HSV110 controller's Fibre Channel port. The identity of the affected Fibre Channel port is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number of the affected Fibre Channel port is contained in the port field. This is an informational event triggered by the occurrence of an excessive number of Tachyon chip link status errors detected within a particular link status error type. The number of occurrences of each link status error type is contained in a separate type-specific field (e.g., loss_of_signal, bad_rx_char, etc.). The HSV110 controller checks each of its Fibre Channel port's for excessive link status errors periodically.")
sCellEventTrap_42_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13616900)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_42_4.setDescription('Severity: Warning -- not failed but attention recommended or required. A Fibre Channel port on the HSV110 controller has failed to respond. The identity of the affected Fibre Channel port is contained in the cerp_id field. The HSV110 controller internal Fibre Channel port number of the affected Fibre Channel port is contained in the port field. The peb array contains the port event block information. The peq_frz_prod_index field contains the index to the port event block in use when the Tachyon chip entered the frozen state. The peq_prod_index field contains the index to the next port event block. The peq_cons_index field contains the index to the next port event block to be acted upon.')
sCellEventTrap_42_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13616901)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_42_5.setDescription('Severity: Normal -- informational in nature. Indicated Host Fibre Channel port transitioned to link wedged.')
sCellEventTrap_83_0 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633536)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_0.setDescription("Severity: Critical -- failure or failure imminent. A failure was detected during the execution of this HSV110 controller's on board diagnostics.")
sCellEventTrap_83_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633537)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_1.setDescription("Severity: Warning -- not failed but attention recommended or required. A GBIC SFF Serial ID Data check code failure was detected during the execution of this HSV110 controller's on board diagnostics.")
sCellEventTrap_83_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633538)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_2.setDescription("Severity: Critical -- failure or failure imminent. A battery assembly failure was detected during the execution of this HSV110 controller's on board diagnostics.")
sCellEventTrap_83_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633539)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_3.setDescription("Severity: Critical -- failure or failure imminent. A battery assembly failure was detected during the execution of this HSV110 controller's on board diagnostics.")
sCellEventTrap_83_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633540)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_4.setDescription("Severity: Critical -- failure or failure imminent. A battery assembly communication failure was detected during the execution of this HSV110 controller's on board diagnostics.")
sCellEventTrap_83_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633541)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_5.setDescription("Severity: Critical -- failure or failure imminent. A battery assembly communication failure was detected during the execution of this HSV110 controller's on board diagnostics.")
sCellEventTrap_83_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,13633542)).setObjects(("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "scellSWComponent"), ("CPQHSV110V3-MIB", "scellECode"), ("CPQHSV110V3-MIB", "scellCAC"), ("CPQHSV110V3-MIB", "scellEIP"))
if mibBuilder.loadTexts: sCellEventTrap_83_6.setDescription("Severity: Critical -- failure or failure imminent. A soft cache memory ECC error or indication of low battery voltage was detected during the execution of this HSV110 controller's on board diagnostics.")
mngmtAgentTrap_1 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1.setDescription('Object Already Exists')
mngmtAgentTrap_2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2.setDescription('Supplied Buffer Too Small')
mngmtAgentTrap_3 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3.setDescription('Object Already Assigned')
mngmtAgentTrap_4 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4.setDescription('Insufficient Available Data Storage')
mngmtAgentTrap_5 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5.setDescription('Internal Error')
mngmtAgentTrap_6 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6.setDescription('Invalid status for logical disk')
mngmtAgentTrap_7 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_7.setDescription('Invalid Class')
mngmtAgentTrap_8 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8.setDescription('Invalid Function')
mngmtAgentTrap_9 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9.setDescription('Invalid Logical Disk Block State')
mngmtAgentTrap_10 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10.setDescription('Invalid Loop Configuration')
mngmtAgentTrap_11 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_11.setDescription('Invalid Parameter')
mngmtAgentTrap_12 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12.setDescription('Invalid Parameter handle')
mngmtAgentTrap_13 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13.setDescription('Invalid Parameter Id')
mngmtAgentTrap_14 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14.setDescription('Invalid Quorum Configuration')
mngmtAgentTrap_15 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15.setDescription('Invalid Target Handle')
mngmtAgentTrap_16 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16.setDescription('Invalid Target Id')
mngmtAgentTrap_17 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17.setDescription('Invalid Time')
mngmtAgentTrap_18 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18.setDescription('Media is Inaccessible')
mngmtAgentTrap_19 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_19.setDescription('No Fibre Channel Port')
mngmtAgentTrap_20 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20.setDescription('No Image')
mngmtAgentTrap_21 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21.setDescription('No Permission')
mngmtAgentTrap_22 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_22.setDescription('Storage system not initialized')
mngmtAgentTrap_23 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_23.setDescription('Not a Loop Port')
mngmtAgentTrap_24 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_24.setDescription('Not a Participating Controller')
mngmtAgentTrap_25 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25.setDescription('Objects in your system are in use, and their state prevents the operation you wish to perform.')
mngmtAgentTrap_26 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26.setDescription('Parameter Object Does Not Exist')
mngmtAgentTrap_27 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27.setDescription('Target Object Does Not Exist')
mngmtAgentTrap_28 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_28.setDescription('Timeout')
mngmtAgentTrap_29 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_29.setDescription('Unknown Id')
mngmtAgentTrap_30 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_30.setDescription('Unknown Parameter Handle')
mngmtAgentTrap_31 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_31.setDescription('Unrecoverable Media Error')
mngmtAgentTrap_32 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_32.setDescription('Invalid State')
mngmtAgentTrap_33 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_33.setDescription('Transport Error')
mngmtAgentTrap_34 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_34.setDescription('Volume is Missing')
mngmtAgentTrap_35 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_35.setDescription('Invalid Cursor')
mngmtAgentTrap_36 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_36.setDescription('Invalid Target for the Operation')
mngmtAgentTrap_37 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_37.setDescription('No More Events')
mngmtAgentTrap_38 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_38.setDescription('Lock Busy')
mngmtAgentTrap_39 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_39.setDescription('Time Not Set')
mngmtAgentTrap_40 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_40.setDescription('Not a Supported Version')
mngmtAgentTrap_41 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_41.setDescription('No Logical Disk for Vdisk')
mngmtAgentTrap_42 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_42.setDescription('Logical disk Presented')
mngmtAgentTrap_43 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000043)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_43.setDescription('Operation Denied On Slave')
mngmtAgentTrap_44 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000044)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_44.setDescription('Not licensed for data replication')
mngmtAgentTrap_45 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000045)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_45.setDescription('Not DR group member')
mngmtAgentTrap_46 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000046)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_46.setDescription('Invalid DR mode')
mngmtAgentTrap_47 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_47.setDescription('Invalid DR State')
mngmtAgentTrap_48 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_48.setDescription("Security credentials needed. Please update your system's ID and password in the Storage System Access menu.")
mngmtAgentTrap_49 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_49.setDescription("Security credentials supplied were invalid. Please update your system's ID and password in the Storage System Access menu.")
mngmtAgentTrap_50 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000050)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_50.setDescription("Security credentials supplied were invalid. Please update your system's ID and password in the Storage System Access menu.")
mngmtAgentTrap_51 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000051)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_51.setDescription('Storage system connection down')
mngmtAgentTrap_52 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000052)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_52.setDescription('DR group empty')
mngmtAgentTrap_53 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000053)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_53.setDescription('Incompatible attribute')
mngmtAgentTrap_54 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000054)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_54.setDescription('Vdisk is a DR group member')
mngmtAgentTrap_55 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000055)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_55.setDescription('Vdisk is a DR log unit')
mngmtAgentTrap_56 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000056)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_56.setDescription('Cache batteries failed or missing.')
mngmtAgentTrap_57 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000057)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_57.setDescription('Vdisk is not presented')
mngmtAgentTrap_58 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000058)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_58.setDescription('Other controller failed')
mngmtAgentTrap_59 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000059)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_59.setDescription('Maximum Number of Objects Exceeded.')
mngmtAgentTrap_60 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000060)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_60.setDescription('Max size')
mngmtAgentTrap_61 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000061)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_61.setDescription("Password mismatch. Please update your system's password in the Storage System Access menu. Continued attempts to access this storage system with an incorrect password will disable management of this storage system.")
mngmtAgentTrap_62 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000062)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_62.setDescription('DR group is merging')
mngmtAgentTrap_63 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000063)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_63.setDescription('DR group is logging')
mngmtAgentTrap_64 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000064)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_64.setDescription('Connection is suspended')
mngmtAgentTrap_65 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000065)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_65.setDescription('Bad image header')
mngmtAgentTrap_66 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000066)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_66.setDescription('Bad image')
mngmtAgentTrap_67 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000067)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_67.setDescription('Image too large')
mngmtAgentTrap_68 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000068)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_68.setDescription('EMU not available')
mngmtAgentTrap_69 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000069)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_69.setDescription('EMU indefinite delay')
mngmtAgentTrap_70 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000070)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_70.setDescription('Image incompatible with system configuration. Version conflict in upgrade or downgrade not allowed.')
mngmtAgentTrap_71 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000071)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_71.setDescription('Bad image segment')
mngmtAgentTrap_72 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000072)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_72.setDescription('Image already loaded')
mngmtAgentTrap_73 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000073)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_73.setDescription('Image Write Error')
mngmtAgentTrap_74 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000074)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_74.setDescription('Logical Disk Sharing')
mngmtAgentTrap_75 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000075)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_75.setDescription('Bad Image Size')
mngmtAgentTrap_76 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000076)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_76.setDescription('Image Load Busy')
mngmtAgentTrap_77 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000077)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_77.setDescription('Volume Failure Predicted')
mngmtAgentTrap_78 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000078)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_78.setDescription('Background allocation on the destination member is in progress. This action must complete before any others can be initiated .')
mngmtAgentTrap_79 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000079)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_79.setDescription('Invalid Predecessor Vdisk Condition')
mngmtAgentTrap_80 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000080)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_80.setDescription('Invalid Volume Usage')
mngmtAgentTrap_81 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000081)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_81.setDescription('Minimum Volumes In Disk Group')
mngmtAgentTrap_82 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000082)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_82.setDescription('Shutdown In Progress')
mngmtAgentTrap_83 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000083)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_83.setDescription('Not Ready')
mngmtAgentTrap_84 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000084)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_84.setDescription('Is Snapshot')
mngmtAgentTrap_85 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000085)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_85.setDescription('Cannot add or remove DR group member. Mirror cache must be active for this Vdisk. Check controller cache condition.')
mngmtAgentTrap_86 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000086)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_86.setDescription('Inoperative')
mngmtAgentTrap_87 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000087)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_87.setDescription('Disk group inoperative or less than 8 disks in group')
mngmtAgentTrap_88 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000088)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_88.setDescription('Storage system inoperative')
mngmtAgentTrap_89 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000089)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_89.setDescription('Failsafe Locked')
mngmtAgentTrap_90 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000090)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_90.setDescription('Data Flush Incomplete')
mngmtAgentTrap_91 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000091)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_91.setDescription('Redundancy Mirrored Inoperative')
mngmtAgentTrap_92 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000092)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_92.setDescription('Duplicate LUN')
mngmtAgentTrap_93 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000093)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_93.setDescription('Other remote controller failed')
mngmtAgentTrap_94 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000094)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_94.setDescription('Unknown remote Vdisk')
mngmtAgentTrap_95 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000095)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_95.setDescription('Unknown remote DR group')
mngmtAgentTrap_96 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000096)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_96.setDescription('PLDMC failed')
mngmtAgentTrap_97 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000097)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_97.setDescription('Storage system could not be locked. System busy. Try command again. ')
mngmtAgentTrap_98 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000098)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_98.setDescription('Error on remote storage system.')
mngmtAgentTrap_99 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000099)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_99.setDescription('This operation can only be completed when the source-destination connection is down.')
mngmtAgentTrap_100 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000100)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_100.setDescription('Login required - password changed.')
mngmtAgentTrap_101 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000101)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_101.setDescription("Numerous login attempts have been detected that uses an incorrect password. Please update your system's password in the Storage System Access menu.")
mngmtAgentTrap_102 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000102)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_102.setDescription('Invalid cookie')
mngmtAgentTrap_103 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000103)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_103.setDescription('Login timed out')
mngmtAgentTrap_104 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000104)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_104.setDescription('Max snapshot depth reached')
mngmtAgentTrap_105 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000105)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_105.setDescription('Attribute mismatch')
mngmtAgentTrap_106 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000106)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_106.setDescription('The password has been set in Command View EVA. The same password still needs to be set in the controllers.')
mngmtAgentTrap_107 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000107)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_107.setDescription('Not host port')
mngmtAgentTrap_108 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000108)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_108.setDescription('Duplicate Lun WWID')
mngmtAgentTrap_109 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000109)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_109.setDescription('System Inoperative')
mngmtAgentTrap_110 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000110)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_110.setDescription('SnapClone Active')
mngmtAgentTrap_111 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000111)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_111.setDescription('Emu Load Busy')
mngmtAgentTrap_112 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000112)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_112.setDescription('Duplicate User Name')
mngmtAgentTrap_113 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000113)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_113.setDescription('Drive Reserved For Code Load')
mngmtAgentTrap_114 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000114)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_114.setDescription('Already Presented')
mngmtAgentTrap_115 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000115)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_115.setDescription('Invalid remote storage system')
mngmtAgentTrap_116 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000116)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_116.setDescription('No Lock')
mngmtAgentTrap_117 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000117)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_117.setDescription('Maximum Number of Members Exceeded')
mngmtAgentTrap_118 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000118)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_118.setDescription('Max Destinations')
mngmtAgentTrap_119 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000119)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_119.setDescription('Empty User Name')
mngmtAgentTrap_120 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000120)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_120.setDescription('Storage system already initialized')
mngmtAgentTrap_121 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000121)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_121.setDescription('Already Open')
mngmtAgentTrap_122 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000122)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_122.setDescription('Session Not Open')
mngmtAgentTrap_123 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000123)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_123.setDescription('Not Marked Inoperative')
mngmtAgentTrap_124 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000124)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_124.setDescription('Media Not Available')
mngmtAgentTrap_125 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000125)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_125.setDescription('Battery System Failed')
mngmtAgentTrap_126 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000126)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_126.setDescription('DR Group Member Is Cache Data Lost')
mngmtAgentTrap_127 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000127)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_127.setDescription('Internal Lock Collision')
mngmtAgentTrap_128 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000128)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_128.setDescription('OCP Error')
mngmtAgentTrap_129 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000129)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_129.setDescription('Mirror Offline')
mngmtAgentTrap_130 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000130)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_130.setDescription('This operation cannot be completed if failsafe mode is enabled.')
mngmtAgentTrap_131 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000131)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_131.setDescription('Drive firmware load abort due to Raid0 virtual disk(s).')
mngmtAgentTrap_132 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000132)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_132.setDescription('Fibre channel ports are unavailable.')
mngmtAgentTrap_133 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136000133)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_133.setDescription('The storage system has reached its maximum number of DR relationship.')
mngmtAgentTrap_1000 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001000)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1000.setDescription('Logical Disk Condition Change')
mngmtAgentTrap_1001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1001.setDescription('Storage system is FULL **critical**')
mngmtAgentTrap_1002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1002.setDescription('Storage system is almost FULL. Disk group at or above maximum capacity warning level.')
mngmtAgentTrap_1003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1003.setDescription('Controller Cache Battery Condition Change')
mngmtAgentTrap_1004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1004.setDescription('Controller Cache Condition Change')
mngmtAgentTrap_1005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1005.setDescription('Controller Condition Change')
mngmtAgentTrap_1006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1006.setDescription('Controller FC Port Condition Change')
mngmtAgentTrap_1007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1007.setDescription('Physical Device Condition Change')
mngmtAgentTrap_1008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1008.setDescription('Physical Store Condition Change')
mngmtAgentTrap_1009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1009.setDescription('Host condition change')
mngmtAgentTrap_1010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1010.setDescription('Storage system time has been set')
mngmtAgentTrap_1011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1011.setDescription('Volume Condition change')
mngmtAgentTrap_1012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1012.setDescription('Volume insufficient_resources condition change')
mngmtAgentTrap_1013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1013.setDescription('Volume Quorum Disk change')
mngmtAgentTrap_1014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136001014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_1014.setDescription('The state of an object in the system has changed. View adjacent events for more detail.')
mngmtAgentTrap_2001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2001.setDescription('Startup Failed')
mngmtAgentTrap_2002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2002.setDescription('Management agent event log cleared successfully')
mngmtAgentTrap_2003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2003.setDescription('Invalid name specified for storage system')
mngmtAgentTrap_2004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2004.setDescription('Storage system is not initialized')
mngmtAgentTrap_2006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2006.setDescription('Invalid name specified for Vdisk')
mngmtAgentTrap_2007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2007.setDescription('Vdisk name exceeds maximum length')
mngmtAgentTrap_2008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2008.setDescription('Invalid parameter specified for Vdisk')
mngmtAgentTrap_2010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2010.setDescription('Specified Vdisk size exceeds available size')
mngmtAgentTrap_2011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2011.setDescription('There are not enough disk drives to create a disk group')
mngmtAgentTrap_2012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2012.setDescription('Number of devices exceeds the available number of disks')
mngmtAgentTrap_2013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2013.setDescription('Number of devices is less than the minimum number required to create a disk group')
mngmtAgentTrap_2016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2016.setDescription('Completed unpresenting virtual disk to host')
mngmtAgentTrap_2021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2021.setDescription('Invalid refresh interval value. Should be numeric and non-negative.')
mngmtAgentTrap_2022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2022.setDescription('Invalid security message. Should not be blank.')
mngmtAgentTrap_2023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2023.setDescription('Vdisk Create Complete')
mngmtAgentTrap_2025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2025.setDescription('Storage system successfully initialized')
mngmtAgentTrap_2026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2026.setDescription('Device Added Successfully')
mngmtAgentTrap_2030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2030.setDescription('Refresh Interval Changed')
mngmtAgentTrap_2031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2031.setDescription('Security Message Changed')
mngmtAgentTrap_2032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2032.setDescription('Present Vdisk to a Host - Complete')
mngmtAgentTrap_2033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2033.setDescription('Control Startup Complete')
mngmtAgentTrap_2034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2034.setDescription('Change Device Usage Complete')
mngmtAgentTrap_2035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2035.setDescription('Control Shutdown - Complete')
mngmtAgentTrap_2036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2036.setDescription('Controller Shutdown - Complete')
mngmtAgentTrap_2038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2038.setDescription('Control Memory Allocation Failure')
mngmtAgentTrap_2040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2040.setDescription('Access level denied or session activity timeout. Please log in again.')
mngmtAgentTrap_2041 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2041.setDescription('Vdisk Snapshot - Completed')
mngmtAgentTrap_2042 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2042.setDescription('Vdisk Snapclone - Completed')
mngmtAgentTrap_2047 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2047.setDescription('Host record added successfully')
mngmtAgentTrap_2048 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2048.setDescription('Logical component deleted successfully')
mngmtAgentTrap_2049 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2049.setDescription('Invalid host adapter ID')
mngmtAgentTrap_2050 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002050)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2050.setDescription('Specified device is already a member of the system')
mngmtAgentTrap_2051 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002051)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2051.setDescription('Create Folder - Completed')
mngmtAgentTrap_2052 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002052)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2052.setDescription('Change Object Properties - Completed')
mngmtAgentTrap_2057 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002057)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2057.setDescription('Completed disk group creation')
mngmtAgentTrap_2058 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002058)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2058.setDescription('Added host port')
mngmtAgentTrap_2059 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002059)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2059.setDescription('Discarded host port')
mngmtAgentTrap_2060 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002060)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2060.setDescription('EMU/Shelf code load complete')
mngmtAgentTrap_2061 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002061)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2061.setDescription('Operation will exceed the available capacity of the disk group')
mngmtAgentTrap_2062 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002062)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2062.setDescription('Controller(s) code load complete')
mngmtAgentTrap_2063 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002063)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2063.setDescription('The target device is not in the right condition to perform the operation')
mngmtAgentTrap_2064 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002064)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2064.setDescription('Storage system Device Addition Policy changed successfully')
mngmtAgentTrap_2065 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002065)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2065.setDescription('Maximum number of disk groups exceeded')
mngmtAgentTrap_2066 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002066)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2066.setDescription('Nsa object discard failed.')
mngmtAgentTrap_2067 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002067)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2067.setDescription('There are not enough disks to meet the minimum number requirement')
mngmtAgentTrap_2068 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002068)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2068.setDescription('Entry added successfully in the password file')
mngmtAgentTrap_2069 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002069)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2069.setDescription('Entry updated successfully in the password file')
mngmtAgentTrap_2070 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002070)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2070.setDescription('Entry discarded successfully in the password file')
mngmtAgentTrap_2071 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002071)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2071.setDescription('Storage system is not responding in a timely manner and has been placed into an unknown state. This may be due to a prior command with an excessively long execution time, high I/O load, or a network communications error. Recovery will automatically occur when the storage system is able to respond. ')
mngmtAgentTrap_2072 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002072)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2072.setDescription('Object not found. Operation on this object is completed')
mngmtAgentTrap_2073 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002073)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2073.setDescription('There is no more available space to create a Vdisk')
mngmtAgentTrap_2074 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002074)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2074.setDescription('Name or comments contains invalid character(s)')
mngmtAgentTrap_2075 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002075)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2075.setDescription('Duplicate - Another object with the same name exists.')
mngmtAgentTrap_2076 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002076)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2076.setDescription('No healthy disk group(s) to create a Vdisk. Resolve any abnormal conditions in the disk group first.')
mngmtAgentTrap_2077 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002077)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2077.setDescription('Operating System ID must be a valid number.')
mngmtAgentTrap_2078 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002078)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2078.setDescription('Watchdog successfully started')
mngmtAgentTrap_2079 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002079)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2079.setDescription('Watchdog successfully stopped')
mngmtAgentTrap_2080 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002080)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2080.setDescription('Delete Event Config List failed')
mngmtAgentTrap_2081 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002081)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2081.setDescription('Disk group meltdown repaired successfully.')
mngmtAgentTrap_2082 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002082)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2082.setDescription('There are no available LUNs to present this Vdisk.')
mngmtAgentTrap_2083 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002083)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2083.setDescription('Controller time synchronization turned on.')
mngmtAgentTrap_2084 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002084)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2084.setDescription('Controller time synchronization turned off.')
mngmtAgentTrap_2085 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002085)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2085.setDescription('System login failed. Invalid password.')
mngmtAgentTrap_2086 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002086)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2086.setDescription('System is not set for password validation.')
mngmtAgentTrap_2087 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002087)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2087.setDescription('Agent is already logged in to this system.')
mngmtAgentTrap_2088 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002088)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2088.setDescription('Storage system time set to custom time. Controller time synchronization automatically turned off.')
mngmtAgentTrap_2089 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002089)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2089.setDescription('Storage system time set to SAN appliance time.')
mngmtAgentTrap_2090 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002090)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2090.setDescription('Storage system time set to browser time. Controller time synchronization automatically turned off.')
mngmtAgentTrap_2091 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002091)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2091.setDescription('Storage system time set to controller time. Controller time synchronization automatically turned off.')
mngmtAgentTrap_2092 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002092)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2092.setDescription('Unable to find DR Group on remote storage system.')
mngmtAgentTrap_2093 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002093)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2093.setDescription('A host must have at least one port. Cannot delete the only host port available.')
mngmtAgentTrap_2095 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002095)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2095.setDescription('Host creation failed. Maximum number of hosts reached.')
mngmtAgentTrap_2096 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002096)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2096.setDescription('Port already exists for this host.')
mngmtAgentTrap_2097 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002097)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2097.setDescription('Error reading parameter string. String is empty.')
mngmtAgentTrap_2098 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002098)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2098.setDescription('Command could not be completed on Master. Controller not found.')
mngmtAgentTrap_2099 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002099)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2099.setDescription('Command could not be completed on Slave. Controller not found.')
mngmtAgentTrap_2100 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002100)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2100.setDescription('Password access for all known storage systems is already enabled or set.')
mngmtAgentTrap_2102 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002102)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2102.setDescription('The local storage system has reached the maximum allowable DR relationship.')
mngmtAgentTrap_2103 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136002103)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_2103.setDescription('The remote storage system has reached the maximum allowable DR relationship.')
mngmtAgentTrap_3001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3001.setDescription('Event Manager Offline')
mngmtAgentTrap_3002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3002.setDescription('Event Manager Online')
mngmtAgentTrap_3003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3003.setDescription('Event Manager - Startup Failed')
mngmtAgentTrap_3004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3004.setDescription('Event Manager - Startup Complete')
mngmtAgentTrap_3007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3007.setDescription('Event Manager - Shutdown Complete')
mngmtAgentTrap_3009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3009.setDescription('Unable to open NSA Local Event Log File')
mngmtAgentTrap_3012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3012.setDescription('Unable to open Local Temp Event File - possibly no initialized SC')
mngmtAgentTrap_3013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3013.setDescription('Unable to clear NSA Local Event Log File')
mngmtAgentTrap_3015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3015.setDescription('Unable to clear NSA Event Log File')
mngmtAgentTrap_3016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3016.setDescription('Local log file found on startup')
mngmtAgentTrap_3017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3017.setDescription('Event Queue Flush Error')
mngmtAgentTrap_3019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3019.setDescription('EM File Manager Online')
mngmtAgentTrap_3020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3020.setDescription('EM File Manager Offline')
mngmtAgentTrap_3021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3021.setDescription('EM Log Manager Online')
mngmtAgentTrap_3022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3022.setDescription('EM Log Manager Offline')
mngmtAgentTrap_3024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3024.setDescription('Local NSA logfile is empty')
mngmtAgentTrap_3025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3025.setDescription('Event Queue Online')
mngmtAgentTrap_3028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3028.setDescription('Status Descriptions Unavailable')
mngmtAgentTrap_3029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3029.setDescription('EM Description Mngr Online')
mngmtAgentTrap_3035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3035.setDescription('EM: NSA log file unavailable')
mngmtAgentTrap_3036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3036.setDescription('EM Memory Allocation Error')
mngmtAgentTrap_3037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3037.setDescription('EM: Local Event Configuration File Unavailable')
mngmtAgentTrap_3038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3038.setDescription('EM: MLD Notification File Unavailable - retrieving local backup copy')
mngmtAgentTrap_3039 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3039.setDescription('EM: Local Notification Host List File Unavailable')
mngmtAgentTrap_3044 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003044)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3044.setDescription('Override this description with missing filename')
mngmtAgentTrap_3045 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003045)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3045.setDescription("Invalid storage system event sequence number - can't retrieve event")
mngmtAgentTrap_3046 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003046)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3046.setDescription("Invalid SC termination event sequence number - can't retrieve event")
mngmtAgentTrap_3047 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3047.setDescription('EM: Event config file unavailable from MLD - retrieving local backup copy')
mngmtAgentTrap_3048 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3048.setDescription('EM: Local user defined event state file unavailable')
mngmtAgentTrap_3049 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3049.setDescription('EM: EMU event monitoring thread unable to start')
mngmtAgentTrap_3050 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003050)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3050.setDescription('EM: EMU event - this description will be overwritten')
mngmtAgentTrap_3051 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003051)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3051.setDescription('EM: Failed to write Event Config file to MLD')
mngmtAgentTrap_3053 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003053)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3053.setDescription('EM: Event Configuration Filename Error or File empty')
mngmtAgentTrap_3054 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003054)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3054.setDescription('EM: Notification Hostlist Filename Error or File empty')
mngmtAgentTrap_3055 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003055)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3055.setDescription('EM: Event Config List Object Reference Error')
mngmtAgentTrap_3056 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003056)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3056.setDescription('EM: SC Parse File successfully uploaded')
mngmtAgentTrap_3057 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003057)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3057.setDescription('EM: SC Parse File upload failed')
mngmtAgentTrap_3058 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003058)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3058.setDescription('EM: Contents of the uploaded parse file invalid - unexpected contents')
mngmtAgentTrap_3059 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003059)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3059.setDescription('EM: Parse file is empty')
mngmtAgentTrap_3060 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003060)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3060.setDescription('Storage system being shutdown due to a command failure.')
mngmtAgentTrap_3061 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003061)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3061.setDescription('EM: Could not retrieve a storage system event')
mngmtAgentTrap_3062 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003062)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3062.setDescription('EM: Init SC Event config list failed')
mngmtAgentTrap_3063 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003063)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3063.setDescription('Could not initialize Comm infrastructure for event logging to system log')
mngmtAgentTrap_3064 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003064)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3064.setDescription('EM: Storage system pointer is NULL!')
mngmtAgentTrap_3065 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003065)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3065.setDescription('EM: Failed to log event to the Appliance event log: check if log is full')
mngmtAgentTrap_3066 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003066)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3066.setDescription('EM: Description Mngr initialize storage system failed')
mngmtAgentTrap_3067 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003067)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3067.setDescription('EM: Description file too small. File read problem Or Incomplete file.')
mngmtAgentTrap_3068 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003068)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3068.setDescription("EM: Can't init NT Event object pointer")
mngmtAgentTrap_3069 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003069)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3069.setDescription("EM: Can't init NT Notification object pointer")
mngmtAgentTrap_3070 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003070)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3070.setDescription('EM: Appliance Event Logging Failure - log may be full')
mngmtAgentTrap_3071 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003071)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3071.setDescription('EM: SCMI returned bad additional events number')
mngmtAgentTrap_3072 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003072)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3072.setDescription('EM: SCMI returned zero sized SC Event')
mngmtAgentTrap_3075 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003075)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3075.setDescription('EventQueue index passed is out of bounds')
mngmtAgentTrap_3076 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003076)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3076.setDescription('EM: An abnormal number of duplicate events logged - dropping duplicates')
mngmtAgentTrap_3077 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003077)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3077.setDescription('EM: Update of the MLD Status Description file failed')
mngmtAgentTrap_3078 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003078)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3078.setDescription('EM: NsaStatusDescriptions.txt open file error')
mngmtAgentTrap_3079 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003079)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3079.setDescription('EM: NsaStatusDescriptions.txt file error - file size discrepancy from mld list')
mngmtAgentTrap_3080 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003080)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3080.setDescription('SC Event Log has been cleared and restarted. Possible RAID1 Meltdown.')
mngmtAgentTrap_3081 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003081)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3081.setDescription('Invalid logType parameter')
mngmtAgentTrap_3083 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003083)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3083.setDescription('Log file is empty')
mngmtAgentTrap_3084 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003084)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3084.setDescription('Storage System with this WWN is not visible to this agent or the WWN is invalid')
mngmtAgentTrap_3086 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003086)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3086.setDescription('Parsefile for current firmware version not found. Upload correct parse file.')
mngmtAgentTrap_3090 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003090)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3090.setDescription('The contents of this file appear to be invalid')
mngmtAgentTrap_3091 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003091)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3091.setDescription('The MIB failed to build due to a missing parse file.')
mngmtAgentTrap_3092 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003092)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3092.setDescription('MLD description file is older than local file but system is downrev')
mngmtAgentTrap_3094 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003094)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3094.setDescription("System is initialized: can't get activeQ events")
mngmtAgentTrap_3095 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136003095)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_3095.setDescription('Failed to write file - file could not be opened.')
mngmtAgentTrap_4000 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004000)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4000.setDescription('MLD Manager Subsystem Error')
mngmtAgentTrap_4001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4001.setDescription('MLD Manager Offline')
mngmtAgentTrap_4004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4004.setDescription('MLD Manager Startup Complete')
mngmtAgentTrap_4005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4005.setDescription('MLD Manager Abnormal Startup')
mngmtAgentTrap_4007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4007.setDescription('MLD Manager Shutdown Complete')
mngmtAgentTrap_4011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4011.setDescription('Invalid Host IP Address specified')
mngmtAgentTrap_4012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4012.setDescription('Unable to open the NsaMldMgr.dat file for Write')
mngmtAgentTrap_4013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4013.setDescription('Unable to open the NsaMldMgr.dat file for Read')
mngmtAgentTrap_4014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4014.setDescription('Agent Uid does not exist')
mngmtAgentTrap_4015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4015.setDescription('Unable to find object')
mngmtAgentTrap_4016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4016.setDescription('Unable to store object')
mngmtAgentTrap_4017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4017.setDescription('Unable to find storage system object')
mngmtAgentTrap_4018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4018.setDescription('Unable to create MLD')
mngmtAgentTrap_4020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4020.setDescription('lastSafeChoiceDelay Expired')
mngmtAgentTrap_4021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4021.setDescription('crashDetectDelay Expired')
mngmtAgentTrap_4023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4023.setDescription('Unable to read Copy1 of MLD')
mngmtAgentTrap_4024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4024.setDescription('Copy 1 of MLD Invalid')
mngmtAgentTrap_4025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4025.setDescription('Invalid Copy block of MLD')
mngmtAgentTrap_4027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4027.setDescription('MLD database capacity not equal to true MLD capacity')
mngmtAgentTrap_4028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4028.setDescription('Backup range out of bounds of copy 1 range')
mngmtAgentTrap_4029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4029.setDescription('MLD Manager Lock Crash DetectDelay has expired, just taking lock!')
mngmtAgentTrap_4030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4030.setDescription('MLD Copy 1 Restored')
mngmtAgentTrap_4031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4031.setDescription('MLD Copy 2 Restored')
mngmtAgentTrap_4032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4032.setDescription('Unable to find UidAssoc Object')
mngmtAgentTrap_4033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4033.setDescription('Unable to store UID Association Object')
mngmtAgentTrap_4034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4034.setDescription('Unable to find UidAssoc Object')
mngmtAgentTrap_4035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4035.setDescription('Unable to read last Fusion event read')
mngmtAgentTrap_4036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4036.setDescription('MLD Notification Queue Empty')
mngmtAgentTrap_4037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4037.setDescription('Unable to find Notification Object')
mngmtAgentTrap_4040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4040.setDescription('Unable to read Event Log Pointer')
mngmtAgentTrap_4041 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4041.setDescription('Unable to read Event Log')
mngmtAgentTrap_4042 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4042.setDescription('Unable to store Event Log')
mngmtAgentTrap_4043 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004043)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4043.setDescription('Unable to read Event Log')
mngmtAgentTrap_4047 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4047.setDescription('Previously Read Object Properties do not Match')
mngmtAgentTrap_4048 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4048.setDescription('Previously Read Object Properties do not Match')
mngmtAgentTrap_4049 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4049.setDescription('Unable to read Notification Host List')
mngmtAgentTrap_4050 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004050)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4050.setDescription('Unable to store Notification Host List')
mngmtAgentTrap_4051 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004051)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4051.setDescription('Unable to store Notification Host List and free Lock')
mngmtAgentTrap_4052 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004052)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4052.setDescription('Unable to read Event Configuration List')
mngmtAgentTrap_4053 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004053)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4053.setDescription('Unable to store Event Configuration List')
mngmtAgentTrap_4054 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004054)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4054.setDescription('Unable to store Event Configuration List and free Lock')
mngmtAgentTrap_4058 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004058)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4058.setDescription('MLD Manager Mutex Timeout error')
mngmtAgentTrap_4059 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136004059)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_4059.setDescription('MLD Manager list is empty')
mngmtAgentTrap_5001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5001.setDescription('Monitor Startup Complete')
mngmtAgentTrap_5002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5002.setDescription('Monitor Startup Failed')
mngmtAgentTrap_5003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5003.setDescription('Monitor ShutDown Complete')
mngmtAgentTrap_5004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5004.setDescription('Monitor Memory Allocation Failure')
mngmtAgentTrap_5005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5005.setDescription('Monitor Mark Agent as Inactive')
mngmtAgentTrap_5006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5006.setDescription('Monitor create thread error')
mngmtAgentTrap_5007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5007.setDescription('Monitor create timer error')
mngmtAgentTrap_5008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5008.setDescription('Monitor agent registration - Complete')
mngmtAgentTrap_5010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5010.setDescription('Monitor initiated a storage system management shutdown because of controller failures')
mngmtAgentTrap_5011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5011.setDescription('Unknown storage system rediscovery complete ')
mngmtAgentTrap_5012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5012.setDescription('Start monitoring thread for storage system - Complete')
mngmtAgentTrap_5013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5013.setDescription('Start monitoring thread for storage system - Fail')
mngmtAgentTrap_5014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5014.setDescription('Monitoring thread for storage system terminated')
mngmtAgentTrap_5015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5015.setDescription('Rediscover unknown storage system - Error')
mngmtAgentTrap_5016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5016.setDescription('Controller time synchronized to appliance time.')
mngmtAgentTrap_5017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5017.setDescription('Appliance and controller time checked for synchronization.')
mngmtAgentTrap_5018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5018.setDescription('Controller and appliance time are the same. No need to synchronize.')
mngmtAgentTrap_5019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136005019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_5019.setDescription('Exception caught in monitoring process.')
mngmtAgentTrap_6001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6001.setDescription('Ready')
mngmtAgentTrap_6002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6002.setDescription('Index Out of Range')
mngmtAgentTrap_6003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6003.setDescription('Cannot access storage system. Communications error.')
mngmtAgentTrap_6004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6004.setDescription('No controllers found')
mngmtAgentTrap_6005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6005.setDescription('Invalid Index')
mngmtAgentTrap_6006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6006.setDescription('Memory allocation failure')
mngmtAgentTrap_6007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6007.setDescription('No physical stores found')
mngmtAgentTrap_6008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6008.setDescription('No storage system found')
mngmtAgentTrap_6009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6009.setDescription('No disk group found')
mngmtAgentTrap_6010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6010.setDescription('Too many disk groups')
mngmtAgentTrap_6011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6011.setDescription('No volumes found')
mngmtAgentTrap_6012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6012.setDescription('No Logical Disks Found')
mngmtAgentTrap_6013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6013.setDescription('Context ID changed during operation')
mngmtAgentTrap_6014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6014.setDescription('No Name')
mngmtAgentTrap_6015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6015.setDescription('Name Size Exceeded')
mngmtAgentTrap_6016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6016.setDescription('Shutdown Complete')
mngmtAgentTrap_6017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6017.setDescription('Mutex Creation Failure')
mngmtAgentTrap_6018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6018.setDescription('The command has timed out. Storage system is busy processing previous command.')
mngmtAgentTrap_6019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6019.setDescription('No MLD Handle Set')
mngmtAgentTrap_6020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6020.setDescription('Failed Transport Layer Communication - No Such Id')
mngmtAgentTrap_6021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6021.setDescription('Failed Transport Layer Communication - TimeOut')
mngmtAgentTrap_6022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6022.setDescription('No initialized storage system objects found')
mngmtAgentTrap_6023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6023.setDescription('No Attached Port Found')
mngmtAgentTrap_6024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6024.setDescription('Failed to get SCMI Object Handle')
mngmtAgentTrap_6025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6025.setDescription('Shutdown Both Restart And Power Off Requested')
mngmtAgentTrap_6026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6026.setDescription('Shutdown Drive Shelf Power Off But No Enclosure Power Off Requested')
mngmtAgentTrap_6027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6027.setDescription('Shutdown Disable Battery But No Enclosure Power Off Requested')
mngmtAgentTrap_6028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6028.setDescription('Shutdown Disable Battery But Shutdown Unconditional Requested')
mngmtAgentTrap_6029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6029.setDescription('Shutdown Delay Out Of Range')
mngmtAgentTrap_6030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6030.setDescription('Cache Write Failure')
mngmtAgentTrap_6031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6031.setDescription('Battery Disable Failure')
mngmtAgentTrap_6032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6032.setDescription('Drive Shelf Disable Failure')
mngmtAgentTrap_6033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6033.setDescription('Battery Disable Failed on Both Controllers Batteries')
mngmtAgentTrap_6034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6034.setDescription('Battery Disable Failed on This Controllers Battery')
mngmtAgentTrap_6035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6035.setDescription('Battery Disable Failed on the Other Controllers Battery')
mngmtAgentTrap_6036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6036.setDescription('Requested disk failure protection level is set. Actual level will change when sufficient disk space is available.')
mngmtAgentTrap_6037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6037.setDescription('Physical Store Contains Stale or Foreign Volume Information.')
mngmtAgentTrap_6038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136006038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_6038.setDescription('Controller Resynchronization or Reboot Occurred. Context Error')
mngmtAgentTrap_8001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8001.setDescription('Invalid Operation')
mngmtAgentTrap_8002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8002.setDescription('Storage system already created')
mngmtAgentTrap_8003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8003.setDescription('Controller already part of storage system configuration')
mngmtAgentTrap_8004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8004.setDescription('Physical Store Count Below Minimum')
mngmtAgentTrap_8005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8005.setDescription('Controller not part of storage system configuration')
mngmtAgentTrap_8006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8006.setDescription('Failed to uninitialize storage system')
mngmtAgentTrap_8007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8007.setDescription('Storage system File Open Error')
mngmtAgentTrap_8008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8008.setDescription('Storage system File Write Error')
mngmtAgentTrap_8009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8009.setDescription('Storage system File Read Error')
mngmtAgentTrap_8010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8010.setDescription('Name too long')
mngmtAgentTrap_8011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8011.setDescription('No String Error')
mngmtAgentTrap_8012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8012.setDescription('No MLD Handle Found')
mngmtAgentTrap_8013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8013.setDescription('No Controllers Found')
mngmtAgentTrap_8014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8014.setDescription('Controller Not Found On Loop')
mngmtAgentTrap_8015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8015.setDescription('No Disk Groups Found')
mngmtAgentTrap_8016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8016.setDescription('No Volumes Found')
mngmtAgentTrap_8017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8017.setDescription('No Physical Stores Found')
mngmtAgentTrap_8018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8018.setDescription('No Vdisks Found')
mngmtAgentTrap_8019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8019.setDescription('No Hosts Found')
mngmtAgentTrap_8020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8020.setDescription('Name already exists')
mngmtAgentTrap_8021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8021.setDescription('Folder is not empty')
mngmtAgentTrap_8022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8022.setDescription('Spares goal could not be met')
mngmtAgentTrap_8023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8023.setDescription('Storage system object found')
mngmtAgentTrap_8024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8024.setDescription('Storage system object not found')
mngmtAgentTrap_8025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8025.setDescription('New Physical Store Detected But Not Found In Physical Store List')
mngmtAgentTrap_8026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8026.setDescription('MldManager Handle is NULL')
mngmtAgentTrap_8027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8027.setDescription('NscMngrInterface Handle is NULL')
mngmtAgentTrap_8028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8028.setDescription('ScLockMngr Handle is NULL')
mngmtAgentTrap_8029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8029.setDescription('Storage system initialization failed')
mngmtAgentTrap_8030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8030.setDescription('MldMngr, NscMngrInterfaceMngr, or ScLockMngr Handle is NULL')
mngmtAgentTrap_8031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8031.setDescription('Storage system initialization failed')
mngmtAgentTrap_8032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8032.setDescription('Storage system discovery failed')
mngmtAgentTrap_8033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8033.setDescription('Storage system already uninitialized or does not exist')
mngmtAgentTrap_8034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8034.setDescription('Get Total Storage Failed')
mngmtAgentTrap_8035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8035.setDescription('Storage system is uninitialized')
mngmtAgentTrap_8036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8036.setDescription('Get Total Storage Available Failed')
mngmtAgentTrap_8037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8037.setDescription('Get Total Storage Occupied Failed')
mngmtAgentTrap_8038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8038.setDescription('Get Total Storage Free Failed')
mngmtAgentTrap_8039 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8039.setDescription('Get Disk Group Failed')
mngmtAgentTrap_8040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8040.setDescription('Get Disk Group List Failed')
mngmtAgentTrap_8041 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8041.setDescription('Get Disk Group Count Failed')
mngmtAgentTrap_8042 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8042.setDescription('Create Volume Failed')
mngmtAgentTrap_8043 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008043)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8043.setDescription('Get Volume Failed')
mngmtAgentTrap_8044 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008044)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8044.setDescription('Get Volumes Failed')
mngmtAgentTrap_8045 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008045)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8045.setDescription('Get Volumes Count Failed')
mngmtAgentTrap_8046 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008046)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8046.setDescription('Get Vdisk Failed')
mngmtAgentTrap_8047 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8047.setDescription('Get Vdisk List Failed')
mngmtAgentTrap_8048 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8048.setDescription('Get Physical Store Failed')
mngmtAgentTrap_8049 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8049.setDescription('Get Physical Stores Failed')
mngmtAgentTrap_8050 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008050)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8050.setDescription('Get Physical Stores Count Failed')
mngmtAgentTrap_8051 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008051)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8051.setDescription('Create Vdisk Failed')
mngmtAgentTrap_8052 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008052)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8052.setDescription('Delete Vdisk Failed')
mngmtAgentTrap_8053 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008053)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8053.setDescription('Get Device Addition Policy Failed')
mngmtAgentTrap_8054 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008054)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8054.setDescription('Get Spares Current Failed')
mngmtAgentTrap_8055 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008055)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8055.setDescription('Get Spares Goal Failed')
mngmtAgentTrap_8056 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008056)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8056.setDescription('Get storage system events failed')
mngmtAgentTrap_8057 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008057)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8057.setDescription('Get Volume Replacement Delay Failed')
mngmtAgentTrap_8058 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008058)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8058.setDescription('Set Device Addition Policy Failed')
mngmtAgentTrap_8059 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008059)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8059.setDescription('Set Spares Goal Failed')
mngmtAgentTrap_8060 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008060)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8060.setDescription('Set Volume Replacement Delay Failed')
mngmtAgentTrap_8061 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008061)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8061.setDescription('Create controller Failed')
mngmtAgentTrap_8062 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008062)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8062.setDescription('Update controller Failed')
mngmtAgentTrap_8063 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008063)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8063.setDescription('Create Host Failed')
mngmtAgentTrap_8064 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008064)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8064.setDescription('Discard Host Failed')
mngmtAgentTrap_8065 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008065)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8065.setDescription('Get Host Failed')
mngmtAgentTrap_8066 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008066)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8066.setDescription('Get Host List Failed')
mngmtAgentTrap_8067 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008067)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8067.setDescription('Get Host Count Failed')
mngmtAgentTrap_8068 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008068)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8068.setDescription('Get Presented Unit List Failed')
mngmtAgentTrap_8069 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008069)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8069.setDescription('Get Presented Unit Count Failed')
mngmtAgentTrap_8070 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008070)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8070.setDescription('Free View Failed')
mngmtAgentTrap_8071 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008071)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8071.setDescription('Storage system shutdown Failed')
mngmtAgentTrap_8073 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008073)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8073.setDescription('Get Derived Unit List Failed')
mngmtAgentTrap_8074 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008074)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8074.setDescription('Get Derived Unit Count Failed')
mngmtAgentTrap_8075 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008075)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8075.setDescription('Get Vdisk list failed')
mngmtAgentTrap_8076 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008076)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8076.setDescription('Get Vdisk count failed')
mngmtAgentTrap_8077 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008077)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8077.setDescription('Error while building Vdisk root view')
mngmtAgentTrap_8078 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008078)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8078.setDescription('Error while building host root view')
mngmtAgentTrap_8079 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008079)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8079.setDescription('Error while building disk group root view')
mngmtAgentTrap_8080 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008080)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8080.setDescription('Error while building hardware root view')
mngmtAgentTrap_8081 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008081)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8081.setDescription('Specified time format is incorrect')
mngmtAgentTrap_8082 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008082)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8082.setDescription('Error creating/opening time synchronization file.')
mngmtAgentTrap_8083 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008083)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8083.setDescription('NSCList reordered.')
mngmtAgentTrap_8084 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008084)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8084.setDescription('NscList mutex Get error')
mngmtAgentTrap_8085 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008085)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8085.setDescription('Storage System is managed by another agent')
mngmtAgentTrap_8086 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008086)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8086.setDescription('Memory allocation failure')
mngmtAgentTrap_8087 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008087)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8087.setDescription('Failed to obtain list of DR Groups')
mngmtAgentTrap_8088 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008088)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8088.setDescription('Failed to obtain count of DR Groups')
mngmtAgentTrap_8089 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008089)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8089.setDescription('Failed to build DR Group view')
mngmtAgentTrap_8090 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136008090)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_8090.setDescription('No Devices found on Controller Back End Loops')
mngmtAgentTrap_9001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9001.setDescription('Vdisk File Open Error')
mngmtAgentTrap_9002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9002.setDescription('Vdisk File Write Error')
mngmtAgentTrap_9003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9003.setDescription('Vdisk File Read Error')
mngmtAgentTrap_9004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9004.setDescription('Vdisk name too long')
mngmtAgentTrap_9005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9005.setDescription('Vdisk No String Error')
mngmtAgentTrap_9006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9006.setDescription('Vdisk No Object Error')
mngmtAgentTrap_9007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9007.setDescription('Vdisk still exists')
mngmtAgentTrap_9008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9008.setDescription('Vdisk Invalid Value')
mngmtAgentTrap_9009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9009.setDescription('An outstanding command is still in progress for the Vdisk')
mngmtAgentTrap_9010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9010.setDescription('Requested Vdisk size exceeds the available size')
mngmtAgentTrap_9011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9011.setDescription('Vdisk size may be expanded but not reduced')
mngmtAgentTrap_9012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9012.setDescription('Operation on a fast Vdisk deletion completed')
mngmtAgentTrap_9013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9013.setDescription('Operation on a fast Vdisk creation completed')
mngmtAgentTrap_9014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9014.setDescription('Operation on a fast Vdisk size expansion completed')
mngmtAgentTrap_9015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9015.setDescription('Vdisk cache data lost error')
mngmtAgentTrap_9016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9016.setDescription('Vdisk data lost error resolved')
mngmtAgentTrap_9017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9017.setDescription('Operation rejected - The Vdisk has a sharing relationship with another object ')
mngmtAgentTrap_9018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9018.setDescription('Operation on this Vdisk was rejected due to its degraded condition')
mngmtAgentTrap_9019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9019.setDescription('Operation on this Vdisk can only be performed if it is presented to a host')
mngmtAgentTrap_9020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9020.setDescription('Cache policies cannot be modified if Vdisk is presented to a host')
mngmtAgentTrap_9021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9021.setDescription('Allowed property changes successful. (Cache policy changes not allowed while Vdisk is presented to a host.)')
mngmtAgentTrap_9022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9022.setDescription('Requested redundancy type cannot be implemented with the current disk group condition.')
mngmtAgentTrap_9023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9023.setDescription('Your Vdisk was created but cannot be presented at this time. It can be presented when it is fully allocated.')
mngmtAgentTrap_9025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9025.setDescription('Vdisk device data lost error')
mngmtAgentTrap_9026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9026.setDescription('The most significant hex character in a World Wide LUN Name must be a 6.')
mngmtAgentTrap_9027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9027.setDescription('Virtual disk cache and inoperative data lost error')
mngmtAgentTrap_9028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9028.setDescription('Virtual disk inoperative data lost error')
mngmtAgentTrap_9029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9029.setDescription('Virtual disk condition failed because of an inoperative data lost error.')
mngmtAgentTrap_9030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9030.setDescription('Vdisk is a snapshot. The following properties cannot be changed: Preferred Path, Requested Size, Write-Back Cache Policy.')
mngmtAgentTrap_9031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9031.setDescription('The World Wide LUN Name cannot be changed for a presented Vdisk Active member or snapshot.')
mngmtAgentTrap_9032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9032.setDescription('Unknown property, request rejected')
mngmtAgentTrap_9033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9033.setDescription('This Vdisk was deleted as the indirect result of another user command.')
mngmtAgentTrap_9034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9034.setDescription('The requested allocation policy cannot be satisfied. A different allocation policy is already in use by another snapshot in the same family.')
mngmtAgentTrap_9035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9035.setDescription('The deletion of this Vdisk cannot take place. The original Vdisk that this is being snapcloned from is in a VRaid1 Meltdown state which must first be resolved.')
mngmtAgentTrap_9036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136009036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_9036.setDescription('Synchronous creation of virtual disk has been aborted due to an internal error. Switching to asynchronous mode to complete the virtual disk creation.')
mngmtAgentTrap_10001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10001.setDescription('Storage Object Broker Ready')
mngmtAgentTrap_10004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10004.setDescription('Storage system is not initialized')
mngmtAgentTrap_10006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10006.setDescription('SOB Memory Allocation Failure')
mngmtAgentTrap_10010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10010.setDescription('Your initialized system must have at least one disk group')
mngmtAgentTrap_10011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10011.setDescription('Cannot talk to all available controllers')
mngmtAgentTrap_10012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10012.setDescription('Command rejected - Folder is not empty')
mngmtAgentTrap_10013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10013.setDescription('Command rejected - Vdisk(s) or a data replication log are contained in this disk group')
mngmtAgentTrap_10014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10014.setDescription('Command rejected - Vdisk(s) are presented to this host')
mngmtAgentTrap_10015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10015.setDescription('Command rejected - This Vdisk has a sharing relationship with another object ')
mngmtAgentTrap_10017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10017.setDescription('Command rejected - Number of disk groups will exceed the maximum allowable number ')
mngmtAgentTrap_10018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10018.setDescription('Cannot access the password file ')
mngmtAgentTrap_10019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10019.setDescription('Enterprise Login - Complete')
mngmtAgentTrap_10020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10020.setDescription('Command rejected - Disks in the group would go below the minimum required number.')
mngmtAgentTrap_10021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10021.setDescription('Rediscovery of controllers - Complete')
mngmtAgentTrap_10022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10022.setDescription('Unable to establish communication with controller, check all connections. ')
mngmtAgentTrap_10023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10023.setDescription('Disk Group Data Lost Error Resolution Sequence 3 - Disk group resolved to normal')
mngmtAgentTrap_10024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10024.setDescription('Disk Group Data Lost Error Resolution Sequence 1 - Failed Vdisks marked for deletion')
mngmtAgentTrap_10025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10025.setDescription('Disk Group Data Lost Error Resolution Sequence 2 - Failed Vdisks deleted')
mngmtAgentTrap_10026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10026.setDescription('Disk Group Data Lost Error Resolution Sequence 3 - Disk group deleted')
mngmtAgentTrap_10027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10027.setDescription('Creating the Vdisk would exceed the maximum allowable Vdisk count')
mngmtAgentTrap_10028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10028.setDescription('Volume insufficient resources')
mngmtAgentTrap_10029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10029.setDescription('Process mutex is locked')
mngmtAgentTrap_10030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10030.setDescription('Invalid URL request type')
mngmtAgentTrap_10031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10031.setDescription('Invalid URL object type')
mngmtAgentTrap_10035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10035.setDescription('The snapshot/Snapclone license cannot be validated. Either the license key has not been entered, or there is a system communication failure.')
mngmtAgentTrap_10036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10036.setDescription('A data replication license cannot be validated. Either the license key has not been entered, or there is a system communication failure.')
mngmtAgentTrap_10037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10037.setDescription('Object name should not be empty or exceed its maximum length')
mngmtAgentTrap_10038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10038.setDescription('Object comments exceeds maximum length')
mngmtAgentTrap_10039 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10039.setDescription('Vdisk does not meet the requirements to be part of a DR group.')
mngmtAgentTrap_10040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10040.setDescription('The Eva selected as the Destination for the DR group is invalid. Either it has a DR relationship with another EVA or it is not the same EVA that the source EVA presently has a DR relationship with.')
mngmtAgentTrap_10041 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10041.setDescription('Cannot group the specified disk device because the disk is already in a disk group.')
mngmtAgentTrap_10042 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10042.setDescription('Cannot ungroup the specified disk device because the disk is not grouped.')
mngmtAgentTrap_10043 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010043)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10043.setDescription('Object ID provided, or object type, is invalid for the requested operation.')
mngmtAgentTrap_10044 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136010044)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_10044.setDescription('Specified remote disk group does not exist.')
mngmtAgentTrap_11001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136011001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_11001.setDescription('Agent startup complete')
mngmtAgentTrap_11002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136011002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_11002.setDescription('Agent shutdown complete')
mngmtAgentTrap_11003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136011003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_11003.setDescription('Insufficient memory to create a new object, Heap may be full!')
mngmtAgentTrap_11004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136011004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_11004.setDescription('Agent Startup Failed')
mngmtAgentTrap_12001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136012001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12001.setDescription('Nsc Manager Interface No controllers Found')
mngmtAgentTrap_12002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136012002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12002.setDescription('Nsc Manager Interface Index Out Of Range')
mngmtAgentTrap_12003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136012003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12003.setDescription('Unable to process command at this time. Retry the command or check all connections. ')
mngmtAgentTrap_12004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136012004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12004.setDescription('Nsc Manager Interface Initialization Complete')
mngmtAgentTrap_12005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136012005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12005.setDescription('Nsc Manager Interface Initialization Failed')
mngmtAgentTrap_12008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136012008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_12008.setDescription('No Disk Groups Available For Access')
mngmtAgentTrap_13002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13002.setDescription('Notification Mngr Online')
mngmtAgentTrap_13003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13003.setDescription('Notification Mngr Offline')
mngmtAgentTrap_13004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13004.setDescription('NM Startup Complete')
mngmtAgentTrap_13007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13007.setDescription('Notification Failed')
mngmtAgentTrap_13009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13009.setDescription('Notification Failed - Network Error')
mngmtAgentTrap_13012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13012.setDescription('NM Prev Failed Notification Successfully Notified')
mngmtAgentTrap_13015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13015.setDescription('NM SNMP Packet Failed')
mngmtAgentTrap_13017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13017.setDescription('NM Memory Allocation Error')
mngmtAgentTrap_13018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13018.setDescription('NM StorageCell handle is NULL')
mngmtAgentTrap_13019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13019.setDescription('NM User defined event state file is empty')
mngmtAgentTrap_13020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136013020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_13020.setDescription('NM Notification Failed - Notification Matrix is NULL ')
mngmtAgentTrap_14001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14001.setDescription('View Already Exists')
mngmtAgentTrap_14002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14002.setDescription('View Is Not Set')
mngmtAgentTrap_14003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14003.setDescription('No View Object(s) Found')
mngmtAgentTrap_14004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14004.setDescription('View Index Is Out Of Range')
mngmtAgentTrap_14005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14005.setDescription('View Object - Invalid Object Condition')
mngmtAgentTrap_14006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14006.setDescription('View Object - Invalid Object Type')
mngmtAgentTrap_14007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14007.setDescription('View List Pointer is NULL')
mngmtAgentTrap_14008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14008.setDescription('View Object Pointer is NULL')
mngmtAgentTrap_14009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14009.setDescription('Building View List Object - Complete')
mngmtAgentTrap_14010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14010.setDescription('Building View List Object - Failed')
mngmtAgentTrap_14012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14012.setDescription('View Find by UID Failed')
mngmtAgentTrap_14013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14013.setDescription('View Find by Type Failed')
mngmtAgentTrap_14017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136014017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_14017.setDescription('View Find by Type by Name Failed')
mngmtAgentTrap_15001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15001.setDescription('Tree View Symbol Not Found')
mngmtAgentTrap_15002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15002.setDescription('Tree View Id Symbol Not Found')
mngmtAgentTrap_15003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15003.setDescription('Tree Cursor Symbol Not Found')
mngmtAgentTrap_15004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15004.setDescription('Tree Cursor Id Symbol Not Found')
mngmtAgentTrap_15005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15005.setDescription('Tree Sibling Symbol Not Found')
mngmtAgentTrap_15006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15006.setDescription('Tree Total Children Symbol Not Found')
mngmtAgentTrap_15007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15007.setDescription('Tree Expansion Symbol Not Found')
mngmtAgentTrap_15008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15008.setDescription('Tree Contraction Symbol Not Found')
mngmtAgentTrap_15009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136015009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_15009.setDescription('Tree Invalid Descriptor String')
mngmtAgentTrap_16001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16001.setDescription('Ema Short Status - Reissue Command')
mngmtAgentTrap_16004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16004.setDescription('Ema Invalid Handle Set In Request Packet')
mngmtAgentTrap_16005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16005.setDescription('Ema No Pstore At Referenced Location')
mngmtAgentTrap_16008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16008.setDescription('Ema No Device Found')
mngmtAgentTrap_16010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16010.setDescription('Ema Could Not Find SubEnclosure in Configuration List')
mngmtAgentTrap_16012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16012.setDescription('Ema Non-specific error occurred ')
mngmtAgentTrap_16013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16013.setDescription('Ema Shelf WWN Could Not Be Accessed Through A Drive')
mngmtAgentTrap_16014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16014.setDescription('Ema EMU Failed To Enter Primary Mode')
mngmtAgentTrap_16015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16015.setDescription('Ema EMU Failed To Exit Primary Mode')
mngmtAgentTrap_16016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16016.setDescription('Ema Downloaded File Does Not Contain Valid Fibre Channel Loader [status:1]')
mngmtAgentTrap_16017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16017.setDescription('Ema Downloaded File Format Is Not Recognized [status:2]')
mngmtAgentTrap_16018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16018.setDescription('Ema Incorrect Firmware In Downloaded File [status:3]')
mngmtAgentTrap_16019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16019.setDescription('Ema Downloaded Loader is Too Large [status:4]')
mngmtAgentTrap_16020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16020.setDescription('Ema Invalid Checksum [status:5]')
mngmtAgentTrap_16021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16021.setDescription('Ema Previous Offset Plus Previous Length Not Equal To Current Offset [status:6]')
mngmtAgentTrap_16022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16022.setDescription('Ema Downloaded Loader Terminated Incorrectly [status:7]')
mngmtAgentTrap_16023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16023.setDescription('Ema EMU Out Of Memory [status:8]')
mngmtAgentTrap_16024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16024.setDescription('Ema EMU CDB Timeout -- Download Aborted [status:9]')
mngmtAgentTrap_16025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16025.setDescription('Ema EMU Internal State Machine Error [status:10]')
mngmtAgentTrap_16026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16026.setDescription('Ema EMU Flash Erasure Failure [status:11]')
mngmtAgentTrap_16027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16027.setDescription('Ema EMU In Primary Mode - Cannot Download To Primary EMU [status:12]')
mngmtAgentTrap_16028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16028.setDescription('Ema Previous Offset Plus Previous Length Greater Than Total Size [status:13]')
mngmtAgentTrap_16029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16029.setDescription('Ema Current Total Size Different From Previous Total Size [status:14]')
mngmtAgentTrap_16030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16030.setDescription('Ema Could Not Restore Reporting Group Number. Final Download Record Error')
mngmtAgentTrap_16031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16031.setDescription('Ema Could Not Recovery From Invop. Invop Retries Exhausted')
mngmtAgentTrap_16032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16032.setDescription('Ema Requested WWN Does Not Match Enclosure WWN')
mngmtAgentTrap_16033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16033.setDescription('Ema EMU Enclosure Services Error Occurred. EMU May Be Unavailable or Not Installed')
mngmtAgentTrap_16034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16034.setDescription('Ema SCSI Error Occurred While Trying To Communicate With EMU')
mngmtAgentTrap_16035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16035.setDescription('Ema Could Not Open EMU Firmware File')
mngmtAgentTrap_16036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16036.setDescription('Ema EMU Firmware File Name Is Null')
mngmtAgentTrap_16037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16037.setDescription('Ema EMU Firmware Download Retries Exhausted. Manual Download May Be Required')
mngmtAgentTrap_16038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16038.setDescription('Ema EMU Current Firmware Version Matches Upgrade Firmware Version. No Upgrade Will Be Performed.')
mngmtAgentTrap_16039 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16039.setDescription('Ema EMU Firmware Upgrade Success')
mngmtAgentTrap_16040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136016040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_16040.setDescription('Ema EMU In Load State. Do Not Power Off. Reload EMU Firmware ')
mngmtAgentTrap_17001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17001.setDescription('Drive Code Load Descriptor File Open Error')
mngmtAgentTrap_17002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17002.setDescription('Drive Code Load Descriptor File Parsing Error - Invalid Line')
mngmtAgentTrap_17003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17003.setDescription('Drive Code Load Image File Open Error, ')
mngmtAgentTrap_17004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17004.setDescription('Drive Code Load Image File Error Getting File Size')
mngmtAgentTrap_17005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17005.setDescription('Drive Code Load Image File Buffer Allocation Error')
mngmtAgentTrap_17006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17006.setDescription('Drive Code Load Image File Read Error')
mngmtAgentTrap_17007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17007.setDescription('Drive Code Load Drive Firmware Update Failed ')
mngmtAgentTrap_17008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17008.setDescription('Drive Code Load Drive Inquiry Failed')
mngmtAgentTrap_17009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17009.setDescription('Drive Code Load Format Command Failed')
mngmtAgentTrap_17012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17012.setDescription('Drive Code Load Get Physical Store Condition Failed')
mngmtAgentTrap_17013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17013.setDescription('Drive Code Load Get Volume Condition Failed')
mngmtAgentTrap_17014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17014.setDescription('Drive Code Load Drive Spin Up Error')
mngmtAgentTrap_17015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17015.setDescription('Drive Code Load - Complete')
mngmtAgentTrap_17016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17016.setDescription('Drive Code Load Disk Group Migration In Progress')
mngmtAgentTrap_17017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136017017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_17017.setDescription('Drive Code Load Unable To Code Load Disks Part Of A Group ')
mngmtAgentTrap_18001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18001.setDescription('Api Created Element Success')
mngmtAgentTrap_18002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18002.setDescription('Api Created Storage Success')
mngmtAgentTrap_18003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18003.setDescription('Api Created Storage Client Success')
mngmtAgentTrap_18004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18004.setDescription('Api Set Storage Success')
mngmtAgentTrap_18005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18005.setDescription('Api Set Element Success')
mngmtAgentTrap_18006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18006.setDescription('Api Deleted Element Success')
mngmtAgentTrap_18007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18007.setDescription('Api Deleted Storage Success')
mngmtAgentTrap_18008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18008.setDescription('Api Deleted Storage Client Success')
mngmtAgentTrap_18009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18009.setDescription('Api Created Snapshot Success ')
mngmtAgentTrap_18010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18010.setDescription('Api Created Clone Success')
mngmtAgentTrap_18018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18018.setDescription('Api Unable To Get The Lock')
mngmtAgentTrap_18019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18019.setDescription('Api Created PresentedUnit Success')
mngmtAgentTrap_18022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18022.setDescription('Api Create DiskGroup Success')
mngmtAgentTrap_18024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18024.setDescription('Api Create Folder Success')
mngmtAgentTrap_18025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18025.setDescription('Api Delete Folder Success')
mngmtAgentTrap_18028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18028.setDescription('Api Set Folder Success')
mngmtAgentTrap_18034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18034.setDescription('Api Invalid User Name Or Password Error')
mngmtAgentTrap_18036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18036.setDescription('Api Delete Presented Unit Success')
mngmtAgentTrap_18038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18038.setDescription('Api Set Diskgroup Success ')
mngmtAgentTrap_18039 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18039.setDescription('Api Set Disk Success')
mngmtAgentTrap_18040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18040.setDescription('Api Delete Storage Family Success ')
mngmtAgentTrap_18041 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18041.setDescription('Api Set Storage Family Success')
mngmtAgentTrap_18042 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18042.setDescription('Api Control Memory Allocation Failure')
mngmtAgentTrap_18045 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018045)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18045.setDescription('Api Element Codeload Success ')
mngmtAgentTrap_18047 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18047.setDescription('Api Disk Codeload Success')
mngmtAgentTrap_18048 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18048.setDescription('Api Monitor Codeload Success')
mngmtAgentTrap_18049 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18049.setDescription('Api Added Port WWID Success')
mngmtAgentTrap_18050 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018050)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18050.setDescription('Api Set Storage Client Success')
mngmtAgentTrap_18051 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018051)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18051.setDescription('Api Invalid Operation')
mngmtAgentTrap_18052 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018052)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18052.setDescription('Api Deleted Port WWID Success')
mngmtAgentTrap_18059 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018059)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18059.setDescription('Api Set Power Success')
mngmtAgentTrap_18060 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018060)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18060.setDescription('Api Element Is Not Initialized')
mngmtAgentTrap_18063 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018063)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18063.setDescription('Api Error trying to delete a disk group')
mngmtAgentTrap_18065 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018065)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18065.setDescription('Api A storage (Vdisk) operation is in progress. Try again later.')
mngmtAgentTrap_18066 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018066)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18066.setDescription('Api The storage (Vdisk) condition is invalid. The storage may be in error. Try again later.')
mngmtAgentTrap_18067 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018067)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18067.setDescription('Api Error calling get Vdisk condition. Vdisk may be deleted. Try again later.')
mngmtAgentTrap_18068 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018068)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18068.setDescription('Api Invalid initialization of the API. Cannot start monitoring process. Storage system management limited.')
mngmtAgentTrap_18070 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018070)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18070.setDescription('Api A command is currently under execution from another API call. Try again later.')
mngmtAgentTrap_18071 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018071)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18071.setDescription('Api The server has not completed initialization, cannot process the request.')
mngmtAgentTrap_18073 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018073)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18073.setDescription('Api Removal of disk from disk group successful')
mngmtAgentTrap_18074 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018074)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18074.setDescription('Api Disk(s) added to disk group successfully')
mngmtAgentTrap_18075 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018075)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18075.setDescription('Api Modify monitor properties successful')
mngmtAgentTrap_18076 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018076)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18076.setDescription('Api Element name too long. Maximum is 20 characters.')
mngmtAgentTrap_18080 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018080)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18080.setDescription('Api The snapshot/Snapclone license cannot be validated. Either the license key has not been entered, or there is a system communication failure.')
mngmtAgentTrap_18081 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136018081)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_18081.setDescription("Api The folder operation is not valid for the specified folder. Either the folder is a root folder and cannot be modified, or it is a disk group folder for which you should use 'Set Group' command.")
mngmtAgentTrap_20001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20001.setDescription('LicMngr Memory Allocation Failure')
mngmtAgentTrap_20002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20002.setDescription('LicMngr Startup Complete')
mngmtAgentTrap_20003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20003.setDescription('LicMngr Startup Failed')
mngmtAgentTrap_20004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20004.setDescription('License successfully checked out')
mngmtAgentTrap_20005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20005.setDescription('License checkout failed')
mngmtAgentTrap_20011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20011.setDescription('License Line has an incorrect format')
mngmtAgentTrap_20013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20013.setDescription('License Library runtime error')
mngmtAgentTrap_20015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20015.setDescription('Failed to retrieve Node WWN from storage system')
mngmtAgentTrap_20016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20016.setDescription('Failed to retrieve license list from MLD')
mngmtAgentTrap_20017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20017.setDescription('Failed to write license list to MLD')
mngmtAgentTrap_20018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20018.setDescription('This license line appears to be invalid')
mngmtAgentTrap_20019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20019.setDescription('MLD Manager Handle is NULL - unable to update MLD License List')
mngmtAgentTrap_20020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20020.setDescription('LicMngr: Storage system handle is NULL')
mngmtAgentTrap_20021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20021.setDescription('The license you entered is a valid license but not for the Node WWN and/or firmware version on this controller pair')
mngmtAgentTrap_20022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20022.setDescription('Function name string is null or in an incorrect format')
mngmtAgentTrap_20023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136020023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_20023.setDescription('Version string is null or in an incorrect format')
mngmtAgentTrap_21001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21001.setDescription('HSV Upgrade Manager Image File Open Error')
mngmtAgentTrap_21002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21002.setDescription('HSV Upgrade Manager Image File Buffer Allocation Error')
mngmtAgentTrap_21003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21003.setDescription('HSV Upgrade Manager Image File Read Error')
mngmtAgentTrap_21004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21004.setDescription('HSV Upgrade Manager Event File Write Error')
mngmtAgentTrap_21006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21006.setDescription('HSV Upgrade Manager Global Header Edc Compute Error')
mngmtAgentTrap_21007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21007.setDescription('HSV Upgrade Manager Image Header Edc Compute Error')
mngmtAgentTrap_21008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21008.setDescription('HSV Upgrade Manager Image Type Exceeds Max Image Count')
mngmtAgentTrap_21009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21009.setDescription('HSV Upgrade Manager Image Type Not Controller Image')
mngmtAgentTrap_21010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21010.setDescription('HSV Upgrade Manager Image Size Exceeded')
mngmtAgentTrap_21011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21011.setDescription('HSV Upgrade Manager Event File Open Error')
mngmtAgentTrap_21012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21012.setDescription('HSV Upgrade Manager Image Edc Compute Error')
mngmtAgentTrap_21013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21013.setDescription('HSV Upgrade Manager Begin Text Not Found')
mngmtAgentTrap_21014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21014.setDescription('HSV Upgrade Manager After Text Not Found')
mngmtAgentTrap_21015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21015.setDescription('HSV Upgrade Manager File Format Version Mismatch')
mngmtAgentTrap_21016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21016.setDescription('HSV Upgrade Manager Global Header Format Version Mismatch')
mngmtAgentTrap_21017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21017.setDescription('HSV Upgrade Manager Product Information Was Not Found')
mngmtAgentTrap_21018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21018.setDescription('HSV Upgrade Manager Event File Was Not Found')
mngmtAgentTrap_21019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136021019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_21019.setDescription('HSV Upgrade Manager All Images Match Versions Already Loaded')
mngmtAgentTrap_22001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136022001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_22001.setDescription('Trace: Unable to write management agent trace file')
mngmtAgentTrap_22002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136022002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_22002.setDescription('Trace: file write succeeded')
mngmtAgentTrap_23002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136023002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_23002.setDescription('Diagnostic The view list has errors')
mngmtAgentTrap_23003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136023003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_23003.setDescription('Diagnostic Memory allocation failure')
mngmtAgentTrap_24001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136024001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_24001.setDescription('Windows system error')
mngmtAgentTrap_24002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136024002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_24002.setDescription('Lock is already taken')
mngmtAgentTrap_24003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136024003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_24003.setDescription('Lock is not taken')
mngmtAgentTrap_24004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136024004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_24004.setDescription('Request timed out')
mngmtAgentTrap_25001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25001.setDescription('No path to controller')
mngmtAgentTrap_25002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25002.setDescription('Thread is not running')
mngmtAgentTrap_25003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25003.setDescription('No physical stores')
mngmtAgentTrap_25004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25004.setDescription('Loop context ID changed')
mngmtAgentTrap_25005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25005.setDescription('Storage Cell context ID changed')
mngmtAgentTrap_25006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25006.setDescription('Cache Write Failure')
mngmtAgentTrap_25007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25007.setDescription('Battery Disable Failure')
mngmtAgentTrap_25008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25008.setDescription('Drive Shelf Disable Failure')
mngmtAgentTrap_25009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25009.setDescription('Shutdown Both Restart And Power Off Requested')
mngmtAgentTrap_25010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25010.setDescription('Shutdown Drive Shelf Power Off But No Enclosure Power Off Requested')
mngmtAgentTrap_25011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25011.setDescription('Shutdown Disable Battery But No Enclosure Power Off Requested')
mngmtAgentTrap_25012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25012.setDescription('Shutdown Disable Battery But Shutdown Unconditional Requested')
mngmtAgentTrap_25013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25013.setDescription('Shutdown Delay Out Of Range')
mngmtAgentTrap_25014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25014.setDescription('Invalid Storage Cell name')
mngmtAgentTrap_25015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25015.setDescription('Requested spares goal cannot be satisfied')
mngmtAgentTrap_25016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25016.setDescription('No valid LDAD found')
mngmtAgentTrap_25017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25017.setDescription('Mismatched MLD size')
mngmtAgentTrap_25018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25018.setDescription('Codeload image file error')
mngmtAgentTrap_25019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136025019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_25019.setDescription('Storage System is not initialized')
mngmtAgentTrap_26002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26002.setDescription('Invalid data replication operation')
mngmtAgentTrap_26005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26005.setDescription('DR group name exceeds maximum length')
mngmtAgentTrap_26006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26006.setDescription('DR group created successfully')
mngmtAgentTrap_26007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26007.setDescription('Data replication invalid mode for DR Group create ')
mngmtAgentTrap_26008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26008.setDescription('A duplicate DR group name exists in the specified source or destination DR group.')
mngmtAgentTrap_26009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26009.setDescription('Data replication invalid operation while DR Groups exist')
mngmtAgentTrap_26010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26010.setDescription('Data replication root folder does not exist')
mngmtAgentTrap_26011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26011.setDescription('DR group discarded')
mngmtAgentTrap_26012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26012.setDescription('Data replication unknown remote storage system')
mngmtAgentTrap_26013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26013.setDescription('Data replication Error. A conflicting Vdisk name exists on the remote storage system.')
mngmtAgentTrap_26014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26014.setDescription('Data Replication Error. Invalid Remote Vdisk Name specified.')
mngmtAgentTrap_26015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26015.setDescription('Data Replication Error. Remote Vdisk size cannot be modified.')
mngmtAgentTrap_26016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136026016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_26016.setDescription('Data Replication Error. Remote Vdisk should be unpresented to proceed with the discard/detach operation.')
mngmtAgentTrap_27001 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027001)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27001.setDescription('The element manager has successfully initialized storage system. Command issued through XML Interface.')
mngmtAgentTrap_27002 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027002)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27002.setDescription('The element manager has successfully created a virtual disk. Command issued through the XML Interface.')
mngmtAgentTrap_27003 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027003)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27003.setDescription('The element manager has successfully created a disk group. Command issued through the XML Interface.')
mngmtAgentTrap_27004 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027004)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27004.setDescription('The element manager has successfully created a DRM group. Command issued through the XML Interface.')
mngmtAgentTrap_27005 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027005)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27005.setDescription('The element manager has successfully created a host. Command issued through the XML Interface.')
mngmtAgentTrap_27006 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027006)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27006.setDescription('The element manager has successfully created a presented unit. Command issued through the XML Interface.')
mngmtAgentTrap_27007 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027007)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27007.setDescription('The element manager has successfully created a virtual disk folder. Command issued through the XML Interface.')
mngmtAgentTrap_27008 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027008)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27008.setDescription('The element manager has successfully created a host folder. Command issued through the XML Interface.')
mngmtAgentTrap_27009 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027009)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27009.setDescription('The element manager has successfully created a disk group folder. Command issued through the XML Interface.')
mngmtAgentTrap_27010 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027010)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27010.setDescription('The element manager has successfully created a DRM group folder. Command issued through the XML Interface.')
mngmtAgentTrap_27011 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027011)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27011.setDescription('The element manager has successfully created a folder. Command issued through the XML Interface.')
mngmtAgentTrap_27012 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027012)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27012.setDescription('The element manager has successfully created a snapshot. Command issued through the XML Interface.')
mngmtAgentTrap_27013 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027013)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27013.setDescription('The element manager has successfully created a snapclone. Command issued through the XML Interface.')
mngmtAgentTrap_27014 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027014)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27014.setDescription('The element manager has successfully uninitialized the storage system. Command issued through the XML Interface.')
mngmtAgentTrap_27015 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027015)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27015.setDescription('The element manager has successfully deleted a virtual disk. Command issued through the XML Interface.')
mngmtAgentTrap_27016 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027016)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27016.setDescription('The element manager has successfully deleted a disk group. Command issued through the XML Interface.')
mngmtAgentTrap_27017 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027017)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27017.setDescription('The element manager has successfully deleted a DRM group. Command issued through the XML Interface.')
mngmtAgentTrap_27018 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027018)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27018.setDescription('The element manager has successfully deleted a host. Command issued through the XML Interface.')
mngmtAgentTrap_27019 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027019)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27019.setDescription('The element manager has successfully deleted a presented unit. Command issued through the XML Interface.')
mngmtAgentTrap_27020 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027020)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27020.setDescription('The element manager has successfully deleted a virtual disk folder. Command issued through the XML Interface.')
mngmtAgentTrap_27021 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027021)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27021.setDescription('The element manager has successfully deleted a host folder. Command issued through the XML Interface.')
mngmtAgentTrap_27022 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027022)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27022.setDescription('The element manager has successfully deleted a disk group folder. Command issued through the XML Interface.')
mngmtAgentTrap_27023 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027023)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27023.setDescription('The element manager has successfully deleted a DRM group folder. Command issued through the XML Interface.')
mngmtAgentTrap_27024 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027024)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27024.setDescription('The element manager has successfully deleted a folder. Command issued through the XML Interface.')
mngmtAgentTrap_27025 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027025)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27025.setDescription('The element manager has successfully deleted a snapshot. Command issued through the XML Interface.')
mngmtAgentTrap_27026 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027026)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27026.setDescription('The element manager has successfully modified the properties of a storage system. Command issued through the XML Interface.')
mngmtAgentTrap_27027 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027027)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27027.setDescription('The element manager has successfully modified the properties of a virtual disk. Command issued through the XML Interface.')
mngmtAgentTrap_27028 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027028)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27028.setDescription('The element manager has successfully modified the properties of a disk group. Command issued through the XML Interface.')
mngmtAgentTrap_27029 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027029)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27029.setDescription('The element manager has successfully modified the properties of a DRM group. Command issued through the XML Interface.')
mngmtAgentTrap_27030 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027030)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27030.setDescription('The element manager has successfully modified the properties of a host. Command issued through the XML Interface.')
mngmtAgentTrap_27031 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027031)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27031.setDescription('The element manager has successfully modified the properties of a presented unit. Command issued through the XML Interface.')
mngmtAgentTrap_27032 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027032)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27032.setDescription('The element manager has successfully modified the properties of a virtual disk folder. Command issued through the XML Interface.')
mngmtAgentTrap_27033 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027033)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27033.setDescription('The element manager has successfully modified the properties of a host folder. Command issued through the XML Interface.')
mngmtAgentTrap_27034 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027034)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27034.setDescription('The element manager has successfully modified the properties of a hardware root folder. Command issued through the XML Interface.')
mngmtAgentTrap_27035 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027035)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27035.setDescription('The element manager has successfully modified the properties of a disk group folder. Command issued through the XML Interface.')
mngmtAgentTrap_27036 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027036)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27036.setDescription('The element manager has successfully modified the properties of a DRM group folder. Command issued through the XML Interface.')
mngmtAgentTrap_27037 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027037)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27037.setDescription('The element manager has successfully modified the properties of a DRM group root folder. Command issued through the XML Interface.')
mngmtAgentTrap_27038 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027038)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27038.setDescription('The element manager has successfully modified the properties of a folder. Command issued through the XML Interface.')
mngmtAgentTrap_27039 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027039)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27039.setDescription('The element manager has successfully modified the properties of a snapshot. Command issued through the XML Interface.')
mngmtAgentTrap_27040 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027040)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27040.setDescription('The element manager has successfully modified the properties of a disk. Command issued through the XML Interface.')
mngmtAgentTrap_27041 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027041)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27041.setDescription('The element manager has successfully modified the properties of a disk shelf. Command issued through the XML Interface.')
mngmtAgentTrap_27042 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027042)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27042.setDescription('The element manager has successfully modified the properties of a controller. Command issued through the XML Interface.')
mngmtAgentTrap_27043 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027043)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27043.setDescription('The element manager has successfully modified the properties of a controller shelf. Command issued through the XML Interface.')
mngmtAgentTrap_27044 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027044)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27044.setDescription('The element manager has successfully modified the properties of a cabinet. Command issued through the XML Interface.')
mngmtAgentTrap_27045 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027045)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27045.setDescription('The element manager has successfully reserved an object. Command issued through the XML Interface.')
mngmtAgentTrap_27046 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027046)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27046.setDescription('The element manager has successfully released an object. Command issued through the XML Interface.')
mngmtAgentTrap_27047 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027047)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27047.setDescription('XML cache mutex timeout.')
mngmtAgentTrap_27048 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027048)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27048.setDescription('XML cache memory allocation error.')
mngmtAgentTrap_27049 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,136027049)).setObjects(("CPQHSV110V3-MIB", "hostName"), ("CPQHSV110V3-MIB", "scellNameDateTime"), ("CPQHSV110V3-MIB", "agentEventCode"), ("CPQHSV110V3-MIB", "agentEventDescription"))
if mibBuilder.loadTexts: mngmtAgentTrap_27049.setDescription('XML subsystem unknown error.')
mibBuilder.exportSymbols("CPQHSV110V3-MIB", emuEventTrapNoncritical=emuEventTrapNoncritical, mngmtAgentTrap_1005=mngmtAgentTrap_1005, mngmtAgentTrap_17007=mngmtAgentTrap_17007, sCellEventTrap_9_37=sCellEventTrap_9_37, mngmtAgentTrap_89=mngmtAgentTrap_89, sCellEventTrap_9_3d=sCellEventTrap_9_3d, mngmtAgentTrap_3012=mngmtAgentTrap_3012, mngmtAgentTrap_18039=mngmtAgentTrap_18039, mngmtAgentTrap_12008=mngmtAgentTrap_12008, sCellEventTrap_9_d1=sCellEventTrap_9_d1, mngmtAgentTrap_64=mngmtAgentTrap_64, mngmtAgentTrap_121=mngmtAgentTrap_121, mngmtAgentTrap_27030=mngmtAgentTrap_27030, sCellEventTrap_c_4=sCellEventTrap_c_4, mngmtAgentTrap_3061=mngmtAgentTrap_3061, sCellEventTrap_9_a=sCellEventTrap_9_a, mngmtAgentTrap_9007=mngmtAgentTrap_9007, mngmtAgentTrap_27021=mngmtAgentTrap_27021, sCellEventTrap_c_2=sCellEventTrap_c_2, mngmtAgentTrap_26016=mngmtAgentTrap_26016, mngmtAgentTrap_2077=mngmtAgentTrap_2077, mngmtAgentTrap_8062=mngmtAgentTrap_8062, mngmtAgentTrap_2003=mngmtAgentTrap_2003, mngmtAgentTrap_8088=mngmtAgentTrap_8088, mngmtAgentTrap_8071=mngmtAgentTrap_8071, mngmtAgentTrap_10012=mngmtAgentTrap_10012, mngmtAgentTrap_16=mngmtAgentTrap_16, mngmtAgentTrap_2007=mngmtAgentTrap_2007, mngmtAgentTrap_2102=mngmtAgentTrap_2102, mngmtAgentTrap_16036=mngmtAgentTrap_16036, sCellEventTrap_9_32=sCellEventTrap_9_32, mngmtAgentTrap_17005=mngmtAgentTrap_17005, mngmtAgentTrap_2064=mngmtAgentTrap_2064, srvSubModel=srvSubModel, shelf=shelf, sCellEventTrap_6_36=sCellEventTrap_6_36, mngmtAgentTrap_16004=mngmtAgentTrap_16004, mngmtAgentTrap_9006=mngmtAgentTrap_9006, mngmtAgentTrap_18041=mngmtAgentTrap_18041, mngmtAgentTrap_3022=mngmtAgentTrap_3022, sCellEventTrap_83_2=sCellEventTrap_83_2, mngmtAgentTrap_4001=mngmtAgentTrap_4001, sCellEventTrap_9_2d=sCellEventTrap_9_2d, mngmtAgentTrap_27017=mngmtAgentTrap_27017, mngmtAgentTrap_6014=mngmtAgentTrap_6014, sCellEventTrap_9_1=sCellEventTrap_9_1, mngmtAgentTrap_3078=mngmtAgentTrap_3078, sCellEventTrap_9_27=sCellEventTrap_9_27, mngmtAgentTrap_20003=mngmtAgentTrap_20003, sCellEventTrap_d_34=sCellEventTrap_d_34, mngmtAgentTrap_5006=mngmtAgentTrap_5006, sCellEventTrap_6_b=sCellEventTrap_6_b, mngmtAgentTrap_5005=mngmtAgentTrap_5005, mngmtAgentTrap_18059=mngmtAgentTrap_18059, mngmtAgentTrap_16032=mngmtAgentTrap_16032, mngmtAgentTrap_21015=mngmtAgentTrap_21015, mngmtAgentTrap_4043=mngmtAgentTrap_4043, sCellEventTrap_6_38=sCellEventTrap_6_38, mngmtAgentTrap_6037=mngmtAgentTrap_6037, mngmtAgentTrap_8043=mngmtAgentTrap_8043, mngmtAgentTrap_4031=mngmtAgentTrap_4031, mngmtAgentTrap_4053=mngmtAgentTrap_4053, mngmtAgentTrap_9015=mngmtAgentTrap_9015, mngmtAgentTrap_20001=mngmtAgentTrap_20001, sCellEventTrap_9_c8=sCellEventTrap_9_c8, mngmtAgentTrap_27004=mngmtAgentTrap_27004, mngmtAgentTrap_8028=mngmtAgentTrap_8028, mngmtAgentTrap_8058=mngmtAgentTrap_8058, sCellEventTrap_9_13=sCellEventTrap_9_13, mngmtAgentTrap_8038=mngmtAgentTrap_8038, mngmtAgentTrap_9018=mngmtAgentTrap_9018, sCellEventTrap_c_c=sCellEventTrap_c_c, sCellEventTrap_9_68=sCellEventTrap_9_68, sCellEventTrap_9_1f=sCellEventTrap_9_1f, mngmtAgentTrap_10044=mngmtAgentTrap_10044, mngmtAgentTrap_21014=mngmtAgentTrap_21014, mngmtAgentTrap_27018=mngmtAgentTrap_27018, sCellEventTrap_83_5=sCellEventTrap_83_5, scellECode=scellECode, mngmtAgentTrap_3015=mngmtAgentTrap_3015, mngmtAgentTrap_4034=mngmtAgentTrap_4034, mngmtAgentTrap_2004=mngmtAgentTrap_2004, sCellEventTrap_6_34=sCellEventTrap_6_34, scellEventTimeDate=scellEventTimeDate, mngmtAgentTrap_4016=mngmtAgentTrap_4016, mngmtAgentTrap_6017=mngmtAgentTrap_6017, mngmtAgentTrap_10037=mngmtAgentTrap_10037, agentEntryIndex=agentEntryIndex, scellSWComponent=scellSWComponent, mngmtAgentTrap_3083=mngmtAgentTrap_3083, sCellEventTrap_9_4=sCellEventTrap_9_4, sCellEventTrap_83_3=sCellEventTrap_83_3, mngmtAgentTrap_21002=mngmtAgentTrap_21002, mngmtAgentTrap_93=mngmtAgentTrap_93, mngmtAgentTrap_3001=mngmtAgentTrap_3001, srvBiosVersion=srvBiosVersion, mngmtAgentTrap_27001=mngmtAgentTrap_27001, mngmtAgentTrap_17015=mngmtAgentTrap_17015, sCellEventTrap_d_71=sCellEventTrap_d_71, mngmtAgentTrap_14=mngmtAgentTrap_14, mngmtAgentTrap_2093=mngmtAgentTrap_2093, mngmtAgentTrap_3039=mngmtAgentTrap_3039, sCellEventTrap_9_d0=sCellEventTrap_9_d0, mngmtAgentTrap_5018=mngmtAgentTrap_5018, mngmtAgentTrap_40=mngmtAgentTrap_40, shelfEntry=shelfEntry, sCellEventTrap_c_3=sCellEventTrap_c_3, srvModel=srvModel, mngmtAgentTrap_11003=mngmtAgentTrap_11003, mngmtAgentTrap_20=mngmtAgentTrap_20, mngmtAgentTrap_25013=mngmtAgentTrap_25013, mngmtAgentTrap_8074=mngmtAgentTrap_8074, mngmtAgentTrap_2071=mngmtAgentTrap_2071, mngmtAgentTrap_16008=mngmtAgentTrap_16008, mngmtAgentTrap_8024=mngmtAgentTrap_8024, srvComputerType=srvComputerType, mngmtAgentTrap_21010=mngmtAgentTrap_21010, sCellEventTrap_6_35=sCellEventTrap_6_35, mngmtAgentTrap_10017=mngmtAgentTrap_10017, sCellEventTrap_9_2b=sCellEventTrap_9_2b, mngmtAgentTrap_4=mngmtAgentTrap_4, mngmtAgentTrap_12002=mngmtAgentTrap_12002, mngmtAgentTrap_11001=mngmtAgentTrap_11001, sCellEventTrap_9_26=sCellEventTrap_9_26, sCellEventTrap_7_4=sCellEventTrap_7_4, mngmtAgentTrap_4027=mngmtAgentTrap_4027, mngmtAgentTrap_6032=mngmtAgentTrap_6032, sCellEventTrap_d_6f=sCellEventTrap_d_6f, mngmtAgentTrap_8008=mngmtAgentTrap_8008, mngmtAgentTrap_2080=mngmtAgentTrap_2080, mngmtAgentTrap_9027=mngmtAgentTrap_9027, mngmtAgentTrap_26009=mngmtAgentTrap_26009, mngmtAgentTrap_16005=mngmtAgentTrap_16005, agentEntry=agentEntry, mngmtAgentTrap_38=mngmtAgentTrap_38, sCellEventTrap_9_7=sCellEventTrap_9_7, mngmtAgentTrap_9002=mngmtAgentTrap_9002, mngmtAgentTrap_18024=mngmtAgentTrap_18024, mngmtAgentTrap_59=mngmtAgentTrap_59, mngmtAgentTrap_4049=mngmtAgentTrap_4049, mngmtAgentTrap_10013=mngmtAgentTrap_10013, sCellEventTrap_3_4=sCellEventTrap_3_4, mngmtAgentTrap_27031=mngmtAgentTrap_27031, mngmtAgentTrap_30=mngmtAgentTrap_30, mngmtAgentTrap_4059=mngmtAgentTrap_4059, sCellEventTrap_6_10=sCellEventTrap_6_10, sCellEventTrap_6_14=sCellEventTrap_6_14, mngmtAgentTrap_2052=mngmtAgentTrap_2052, sCellEventTrap_7_7=sCellEventTrap_7_7, sCellEventTrap_83_0=sCellEventTrap_83_0, sCellEventTrap_d_f0=sCellEventTrap_d_f0, mngmtAgentTrap_8027=mngmtAgentTrap_8027, mngmtAgentTrap_69=mngmtAgentTrap_69, mngmtAgentTrap_4015=mngmtAgentTrap_4015, mngmtAgentTrap_16013=mngmtAgentTrap_16013, cpqHSVServer=cpqHSVServer, scell=scell, mngmtAgentTrap_4018=mngmtAgentTrap_4018, mngmtAgentTrap_9004=mngmtAgentTrap_9004, sCellEventTrap_c_f=sCellEventTrap_c_f, mngmtAgentTrap_8039=mngmtAgentTrap_8039, mngmtAgentTrap_25004=mngmtAgentTrap_25004, mngmtAgentTrap_27023=mngmtAgentTrap_27023, mngmtAgentTrap_6026=mngmtAgentTrap_6026, mngmtAgentTrap_8087=mngmtAgentTrap_8087, mngmtAgentTrap_26015=mngmtAgentTrap_26015, mngmtAgentTrap_27016=mngmtAgentTrap_27016, mngmtAgentTrap_8052=mngmtAgentTrap_8052, mngmtAgentTrap_3092=mngmtAgentTrap_3092, mngmtAgentTrap_97=mngmtAgentTrap_97, sCellEventTrap_9_29=sCellEventTrap_9_29, mngmtAgentTrap_2047=mngmtAgentTrap_2047, mngmtAgentTrap_16026=mngmtAgentTrap_16026, mngmtAgentTrap_21003=mngmtAgentTrap_21003, sCellEventTrap_9_6b=sCellEventTrap_9_6b, mngmtAgentTrap_8066=mngmtAgentTrap_8066, mngmtAgentTrap_25014=mngmtAgentTrap_25014, mngmtAgentTrap_27037=mngmtAgentTrap_27037, mngmtAgentTrap_8047=mngmtAgentTrap_8047, mngmtAgentTrap_26002=mngmtAgentTrap_26002, mngmtAgentTrap_19=mngmtAgentTrap_19, sCellEventTrap_6_1d=sCellEventTrap_6_1d, sCellEventTrap_9_12=sCellEventTrap_9_12, sCellEventTrap_9_38=sCellEventTrap_9_38, sCellEventTrap_9_d3=sCellEventTrap_9_d3, mngmtAgentTrap_17012=mngmtAgentTrap_17012, mngmtAgentTrap_27022=mngmtAgentTrap_27022, mngmtAgentTrap_8012=mngmtAgentTrap_8012, sCellEventTrap_6_1b=sCellEventTrap_6_1b, sCellEventTrap_d_83=sCellEventTrap_d_83, mngmtAgentTrap_3055=mngmtAgentTrap_3055, mngmtAgentTrap_8086=mngmtAgentTrap_8086, mngmtAgentTrap_9008=mngmtAgentTrap_9008, mngmtAgentTrap_18001=mngmtAgentTrap_18001, sCellEventTrap_9_41=sCellEventTrap_9_41, sCellEventTrap_7_2=sCellEventTrap_7_2, mngmtAgentTrap_110=mngmtAgentTrap_110, mngmtAgentTrap_13017=mngmtAgentTrap_13017, sCellEventTrap_42_0=sCellEventTrap_42_0, mngmtAgentTrap_14003=mngmtAgentTrap_14003, sCellEventTrap_9_16=sCellEventTrap_9_16, mngmtAgentTrap_3002=mngmtAgentTrap_3002, hostStatusTable=hostStatusTable, sCellEventTrap_6_a=sCellEventTrap_6_a, mngmtAgentTrap_68=mngmtAgentTrap_68, mngmtAgentTrap_5014=mngmtAgentTrap_5014, mngmtAgentTrap_8068=mngmtAgentTrap_8068, mngmtAgentTrap_25018=mngmtAgentTrap_25018, mngmtAgentTrap_37=mngmtAgentTrap_37, mngmtAgentTrap_3038=mngmtAgentTrap_3038, sCellEventTrap_9_67=sCellEventTrap_9_67, mngmtAgentTrap_51=mngmtAgentTrap_51, mngmtAgentTrap_25009=mngmtAgentTrap_25009, mngmtAgentTrap_3047=mngmtAgentTrap_3047, mngmtAgentTrap_25003=mngmtAgentTrap_25003, mngmtAgentTrap_2035=mngmtAgentTrap_2035, mngmtAgentTrap_20019=mngmtAgentTrap_20019, mngmtAgentTrap_21009=mngmtAgentTrap_21009, mngmtAgentTrap_22001=mngmtAgentTrap_22001, scellNameDateTime=scellNameDateTime, mngmtAgentTrap_8056=mngmtAgentTrap_8056, mngmtAgentTrap_8090=mngmtAgentTrap_8090, mngmtAgentTrap_9003=mngmtAgentTrap_9003, mngmtAgentTrap_6010=mngmtAgentTrap_6010, mngmtAgentTrap_22002=mngmtAgentTrap_22002, mngmtAgentTrap_6013=mngmtAgentTrap_6013, maHSVMibRevMinor=maHSVMibRevMinor, mngmtAgentTrap_4011=mngmtAgentTrap_4011, mngmtAgentTrap_18074=mngmtAgentTrap_18074, mngmtAgentTrap_115=mngmtAgentTrap_115, mngmtAgentTrap_2038=mngmtAgentTrap_2038, hostUUID=hostUUID, mngmtAgentTrap_3063=mngmtAgentTrap_3063, mngmtAgentTrap_5013=mngmtAgentTrap_5013, mngmtAgentTrap_5017=mngmtAgentTrap_5017, mngmtAgentTrap_109=mngmtAgentTrap_109, mngmtAgentTrap_8081=mngmtAgentTrap_8081, mngmtAgentTrap_10042=mngmtAgentTrap_10042, mngmtAgentTrap_16014=mngmtAgentTrap_16014, mngmtAgentTrap_18066=mngmtAgentTrap_18066, sCellEventTrap_9_2=sCellEventTrap_9_2, mngmtAgentTrap_26005=mngmtAgentTrap_26005, mngmtAgentTrap_9=mngmtAgentTrap_9, mngmtAgentTrap_11002=mngmtAgentTrap_11002, mngmtAgentTrap_20020=mngmtAgentTrap_20020, sCellEventTrap_9_11=sCellEventTrap_9_11, mngmtAgentTrap_8018=mngmtAgentTrap_8018, mngmtAgentTrap_20015=mngmtAgentTrap_20015, agMajVersion=agMajVersion, mngmtAgentTrap_10027=mngmtAgentTrap_10027, mngmtAgentTrap_76=mngmtAgentTrap_76, shelfTotal=shelfTotal, sCellEventTrap_42_3=sCellEventTrap_42_3, sCellEventTrap_9_77=sCellEventTrap_9_77)
mibBuilder.exportSymbols("CPQHSV110V3-MIB", mngmtAgentTrap_8046=mngmtAgentTrap_8046, mngmtAgentTrap_17017=mngmtAgentTrap_17017, sCellEventTrap_83_4=sCellEventTrap_83_4, mngmtAgentTrap_61=mngmtAgentTrap_61, mngmtAgentTrap_4023=mngmtAgentTrap_4023, sCellEventTrap_9_f=sCellEventTrap_9_f, sCellEventTrap_6_2=sCellEventTrap_6_2, sCellEventTrap_9_30=sCellEventTrap_9_30, mngmtAgentTrap_8054=mngmtAgentTrap_8054, sCellEventTrap_9_49=sCellEventTrap_9_49, sCellEventTrap_7_6=sCellEventTrap_7_6, mngmtAgentTrap_2032=mngmtAgentTrap_2032, mngmtAgentTrap_4040=mngmtAgentTrap_4040, mngmtAgentTrap_21001=mngmtAgentTrap_21001, sCellEventTrap_9_39=sCellEventTrap_9_39, mngmtAgentTrap_12004=mngmtAgentTrap_12004, cpqHSV=cpqHSV, mngmtAgentTrap_9017=mngmtAgentTrap_9017, mngmtAgentTrap_10018=mngmtAgentTrap_10018, sCellEventTrap_9_47=sCellEventTrap_9_47, sCellEventTrap_9_48=sCellEventTrap_9_48, mngmtAgentTrap_8033=mngmtAgentTrap_8033, mngmtAgentTrap_27019=mngmtAgentTrap_27019, mngmtAgentTrap_3070=mngmtAgentTrap_3070, mngmtAgentTrap_11=mngmtAgentTrap_11, mngmtAgentTrap_8051=mngmtAgentTrap_8051, mngmtAgentTrap_27006=mngmtAgentTrap_27006, sCellEventTrap_4_5=sCellEventTrap_4_5, sCellEventTrap_c_7=sCellEventTrap_c_7, sCellEventTrap_d_1=sCellEventTrap_d_1, mngmtAgentTrap_8044=mngmtAgentTrap_8044, mngmtAgentTrap_3009=mngmtAgentTrap_3009, mngmtAgentTrap_9020=mngmtAgentTrap_9020, mngmtAgentTrap_47=mngmtAgentTrap_47, mngmtAgentTrap_15008=mngmtAgentTrap_15008, mngmtAgentTrap_17001=mngmtAgentTrap_17001, sCellEventTrap_6_1e=sCellEventTrap_6_1e, sCellEventTrap_9_d=sCellEventTrap_9_d, mngmtAgentTrap_4007=mngmtAgentTrap_4007, mngmtAgentTrap_8006=mngmtAgentTrap_8006, sCellEventTrap_4_a=sCellEventTrap_4_a, mngmtAgentTrap_5011=mngmtAgentTrap_5011, mngmtAgentTrap_9032=mngmtAgentTrap_9032, mngmtAgentTrap_4054=mngmtAgentTrap_4054, mngmtAgentTrap_16028=mngmtAgentTrap_16028, sCellEventTrap_c_5=sCellEventTrap_c_5, mngmtAgentTrap_75=mngmtAgentTrap_75, mngmtAgentTrap_15001=mngmtAgentTrap_15001, mngmtAgentTrap_10025=mngmtAgentTrap_10025, mngmtAgentTrap_87=mngmtAgentTrap_87, mngmtAgentTrap_21012=mngmtAgentTrap_21012, mngmtAgentTrap_2040=mngmtAgentTrap_2040, agentEventLevel=agentEventLevel, mngmtAgentTrap_2091=mngmtAgentTrap_2091, mngmtAgentTrap_3013=mngmtAgentTrap_3013, sCellEventTrap_6_26=sCellEventTrap_6_26, mngmtAgentTrap_27042=mngmtAgentTrap_27042, sCellEventTrap_9_d2=sCellEventTrap_9_d2, mngmtAgentTrap_125=mngmtAgentTrap_125, mngmtAgentTrap_6036=mngmtAgentTrap_6036, mngmtAgentTrap_2058=mngmtAgentTrap_2058, mngmtAgentTrap_6012=mngmtAgentTrap_6012, mngmtAgentTrap_130=mngmtAgentTrap_130, mngmtAgentTrap_8080=mngmtAgentTrap_8080, mngmtAgentTrap_18002=mngmtAgentTrap_18002, mngmtAgentTrap_8067=mngmtAgentTrap_8067, mngmtAgentTrap_8030=mngmtAgentTrap_8030, sCellEventTrap_6_d=sCellEventTrap_6_d, sCellEventTrap_6_3e=sCellEventTrap_6_3e, mngmtAgentTrap_57=mngmtAgentTrap_57, sCellEventTrap_9_65=sCellEventTrap_9_65, mngmtAgentTrap_8077=mngmtAgentTrap_8077, sCellEventTrap_6_30=sCellEventTrap_6_30, mngmtAgentTrap_3058=mngmtAgentTrap_3058, mngmtAgentTrap_20023=mngmtAgentTrap_20023, mngmtAgentTrap_18042=mngmtAgentTrap_18042, mngmtAgentTrap_4050=mngmtAgentTrap_4050, mngmtAgentTrap_27009=mngmtAgentTrap_27009, mngmtAgentTrap_27014=mngmtAgentTrap_27014, mngmtAgentTrap_10021=mngmtAgentTrap_10021, mngmtAgentTrap_16010=mngmtAgentTrap_16010, mngmtAgentTrap_10014=mngmtAgentTrap_10014, mngmtAgentTrap_14010=mngmtAgentTrap_14010, mngmtAgentTrap_9029=mngmtAgentTrap_9029, mngmtAgentTrap_3025=mngmtAgentTrap_3025, sCellEventTrap_4_f=sCellEventTrap_4_f, mngmtAgentTrap_17014=mngmtAgentTrap_17014, sCellEventTrap_1_0=sCellEventTrap_1_0, mngmtAgentTrap_3057=mngmtAgentTrap_3057, mngmtAgentTrap_21008=mngmtAgentTrap_21008, mngmtAgentTrap_16016=mngmtAgentTrap_16016, mngmtAgentTrap_21011=mngmtAgentTrap_21011, mngmtAgentTrap_18003=mngmtAgentTrap_18003, mngmtAgentTrap_10022=mngmtAgentTrap_10022, mngmtAgentTrap_105=mngmtAgentTrap_105, sCellEventTrap_3_5=sCellEventTrap_3_5, mngmtAgentTrap_23003=mngmtAgentTrap_23003, mngmtAgentTrap_24=mngmtAgentTrap_24, mngmtAgentTrap_18028=mngmtAgentTrap_18028, mngmtAgentTrap_2026=mngmtAgentTrap_2026, mngmtAgentTrap_4000=mngmtAgentTrap_4000, mngmtAgentTrap_18076=mngmtAgentTrap_18076, mngmtAgentTrap_27028=mngmtAgentTrap_27028, mngmtAgentTrap_117=mngmtAgentTrap_117, mngmtAgentTrap_17003=mngmtAgentTrap_17003, mngmtAgentTrap_27044=mngmtAgentTrap_27044, sCellEventTrap_9_6c=sCellEventTrap_9_6c, mngmtAgentTrap_8031=mngmtAgentTrap_8031, mngmtAgentTrap_2070=mngmtAgentTrap_2070, mngmtAgentTrap_15006=mngmtAgentTrap_15006, mngmtAgentTrap_17009=mngmtAgentTrap_17009, mngmtAgentTrap_18065=mngmtAgentTrap_18065, sCellEventTrap_c_0=sCellEventTrap_c_0, sCellEventTrap_9_cf=sCellEventTrap_9_cf, mngmtAgentTrap_4048=mngmtAgentTrap_4048, mngmtAgentTrap_9034=mngmtAgentTrap_9034, mngmtAgentTrap_13020=mngmtAgentTrap_13020, sCellEventTrap_83_1=sCellEventTrap_83_1, sCellEventTrap_6_f=sCellEventTrap_6_f, sCellEventTrap_9_33=sCellEventTrap_9_33, mngmtAgentTrap_14007=mngmtAgentTrap_14007, mngmtAgentTrap_18052=mngmtAgentTrap_18052, mngmtAgentTrap_2089=mngmtAgentTrap_2089, mngmtAgentTrap_27047=mngmtAgentTrap_27047, mngmtAgentTrap_43=mngmtAgentTrap_43, scellStatus=scellStatus, mngmtAgentTrap_16027=mngmtAgentTrap_16027, mngmtAgentTrap_8=mngmtAgentTrap_8, sCellEventTrap_6_28=sCellEventTrap_6_28, mngmtAgentTrap_2034=mngmtAgentTrap_2034, mngmtAgentTrap_13012=mngmtAgentTrap_13012, mngmtAgentTrap_9013=mngmtAgentTrap_9013, mngmtAgentTrap_2072=mngmtAgentTrap_2072, scellTotal=scellTotal, mngmtAgentTrap_18022=mngmtAgentTrap_18022, mngmtAgentTrap_6008=mngmtAgentTrap_6008, mngmtAgentTrap_5016=mngmtAgentTrap_5016, mngmtAgentTrap_2099=mngmtAgentTrap_2099, mngmtAgentTrap_48=mngmtAgentTrap_48, sCellEventTrap_6_1f=sCellEventTrap_6_1f, mngmtAgentTrap_8049=mngmtAgentTrap_8049, mngmtAgentTrap_18018=mngmtAgentTrap_18018, sCellEventTrap_9_40=sCellEventTrap_9_40, mngmtAgentTrap_5=mngmtAgentTrap_5, mngmtAgentTrap_2063=mngmtAgentTrap_2063, mngmtAgentTrap_20011=mngmtAgentTrap_20011, mngmtAgentTrap_20017=mngmtAgentTrap_20017, mngmtAgentTrap_18060=mngmtAgentTrap_18060, mngmtAgentTrap_31=mngmtAgentTrap_31, mngmtAgentTrap_2088=mngmtAgentTrap_2088, mngmtAgentTrap_6020=mngmtAgentTrap_6020, mngmtAgentTrap_18071=mngmtAgentTrap_18071, mngmtAgentTrap_6038=mngmtAgentTrap_6038, shelfStatus=shelfStatus, mngmtAgentTrap_44=mngmtAgentTrap_44, mngmtAgentTrap_8014=mngmtAgentTrap_8014, mngmtAgentTrap_6027=mngmtAgentTrap_6027, mngmtAgentTrap_111=mngmtAgentTrap_111, mngmtAgentTrap_8009=mngmtAgentTrap_8009, sCellEventTrap_9_ce=sCellEventTrap_9_ce, sCellEventTrap_6_4=sCellEventTrap_6_4, mngmtAgentTrap_3095=mngmtAgentTrap_3095, mngmtAgentTrap_27020=mngmtAgentTrap_27020, mngmtAgentTrap_13=mngmtAgentTrap_13, mngmtAgentTrap_4004=mngmtAgentTrap_4004, sCellEventTrap_9_36=sCellEventTrap_9_36, mngmtAgentTrap_18005=mngmtAgentTrap_18005, mngmtAgentTrap_2021=mngmtAgentTrap_2021, mngmtAgentTrap_2022=mngmtAgentTrap_2022, mngmtAgentTrap_2065=mngmtAgentTrap_2065, mngmtAgentTrap_18025=mngmtAgentTrap_18025, sCellEventTrap_4_1=sCellEventTrap_4_1, mngmtAgentTrap_3075=mngmtAgentTrap_3075, mngmtAgentTrap_8005=mngmtAgentTrap_8005, sCellEventTrap_9_73=sCellEventTrap_9_73, sCellEventTrap_9_79=sCellEventTrap_9_79, mngmtAgentTrap_4021=mngmtAgentTrap_4021, mngmtAgentTrap_21007=mngmtAgentTrap_21007, sCellEventTrap_1_1=sCellEventTrap_1_1, agentEventTimeDate=agentEventTimeDate, sCellEventTrap_c_9=sCellEventTrap_c_9, sCellEventTrap_6_9=sCellEventTrap_6_9, mngmtAgentTrap_25015=mngmtAgentTrap_25015, maHSVMibRevMajor=maHSVMibRevMajor, mngmtAgentTrap_8020=mngmtAgentTrap_8020, mngmtAgentTrap_8073=mngmtAgentTrap_8073, mngmtAgentTrap_13004=mngmtAgentTrap_13004, hostEntry=hostEntry, mngmtAgentTrap_17002=mngmtAgentTrap_17002, mngmtAgentTrap_4012=mngmtAgentTrap_4012, mngmtAgentTrap_4047=mngmtAgentTrap_4047, sCellEventTrap_6_5=sCellEventTrap_6_5, mngmtAgentTrap_10011=mngmtAgentTrap_10011, sCellEventTrap_6_3d=sCellEventTrap_6_3d, mngmtAgentTrap_6022=mngmtAgentTrap_6022, mngmtAgentTrap_9033=mngmtAgentTrap_9033, sCellEventTrap_9_cd=sCellEventTrap_9_cd, sCellEventTrap_d_4b=sCellEventTrap_d_4b, mngmtAgentTrap_4017=mngmtAgentTrap_4017, sCellEventTrap_9_5=sCellEventTrap_9_5, agent=agent, mngmtAgentTrap_4035=mngmtAgentTrap_4035, agentEventDescription=agentEventDescription, mngmtAgentTrap_18073=mngmtAgentTrap_18073, sCellEventTrap_9_d5=sCellEventTrap_9_d5, mngmtAgentTrap_26008=mngmtAgentTrap_26008, sCellEventTrap_6_18=sCellEventTrap_6_18, sCellEventTrap_9_74=sCellEventTrap_9_74, mngmtAgentTrap_6004=mngmtAgentTrap_6004, sCellEventTrap_9_43=sCellEventTrap_9_43, sCellEventTrap_9_21=sCellEventTrap_9_21, shelfElementType=shelfElementType, mngmtAgentTrap_2016=mngmtAgentTrap_2016, mngmtAgentTrap_2073=mngmtAgentTrap_2073, cpqElementManager=cpqElementManager, mngmtAgentTrap_2059=mngmtAgentTrap_2059, mngmtAgentTrap_95=mngmtAgentTrap_95, mngmtAgentTrap_27007=mngmtAgentTrap_27007, mngmtAgentTrap_2081=mngmtAgentTrap_2081, mngmtAgentTrap_2092=mngmtAgentTrap_2092, mngmtAgentTrap_8017=mngmtAgentTrap_8017, mngmtAgentTrap_2083=mngmtAgentTrap_2083, nscEntry=nscEntry, mngmtAgentTrap_16039=mngmtAgentTrap_16039, mngmtAgentTrap_3077=mngmtAgentTrap_3077, mngmtAgentTrap_18075=mngmtAgentTrap_18075, mngmtAgentTrap_3094=mngmtAgentTrap_3094, mngmtAgentTrap_25002=mngmtAgentTrap_25002, mngmtAgentTrap_6031=mngmtAgentTrap_6031, sCellEventTrap_4_6=sCellEventTrap_4_6, mngmtAgentTrap_4013=mngmtAgentTrap_4013, mngmtAgentTrap_71=mngmtAgentTrap_71, mngmtAgentTrap_9014=mngmtAgentTrap_9014, sCellEventTrap_d_de=sCellEventTrap_d_de, sCellEventTrap_6_2e=sCellEventTrap_6_2e, hsvObject=hsvObject, mngmtAgentTrap_8053=mngmtAgentTrap_8053, mngmtAgentTrap_2062=mngmtAgentTrap_2062, mngmtAgentTrap_10028=mngmtAgentTrap_10028, mngmtAgentTrap_8089=mngmtAgentTrap_8089, mngmtAgentTrap_16023=mngmtAgentTrap_16023, mngmtAgentTrap_25005=mngmtAgentTrap_25005, mngmtAgentTrap_122=mngmtAgentTrap_122, mngmtAgentTrap_6021=mngmtAgentTrap_6021, mngmtAgentTrap_27032=mngmtAgentTrap_27032, mngmtAgentTrap_3029=mngmtAgentTrap_3029, mngmtAgentTrap_100=mngmtAgentTrap_100, mngmtAgentTrap_14006=mngmtAgentTrap_14006, sCellEventTrap_9_28=sCellEventTrap_9_28, mngmtAgentTrap_2074=mngmtAgentTrap_2074, mngmtAgentTrap_104=mngmtAgentTrap_104, mngmtAgentTrap_10031=mngmtAgentTrap_10031, mngmtAgentTrap_18070=mngmtAgentTrap_18070, sCellEventTrap_7_3=sCellEventTrap_7_3)
mibBuilder.exportSymbols("CPQHSV110V3-MIB", mngmtAgentTrap_21006=mngmtAgentTrap_21006, sCellEventTrap_9_1d=sCellEventTrap_9_1d, mngmtAgentTrap_5008=mngmtAgentTrap_5008, sCellEventTrap_6_19=sCellEventTrap_6_19, mngmtAgentTrap_10043=mngmtAgentTrap_10043, mngmtAgentTrap_18063=mngmtAgentTrap_18063, mngmtAgentTrap_3016=mngmtAgentTrap_3016, mngmtAgentTrap_3049=mngmtAgentTrap_3049, mngmtAgentTrap_8026=mngmtAgentTrap_8026, mngmtAgentTrap_18040=mngmtAgentTrap_18040, mngmtAgentTrap_18067=mngmtAgentTrap_18067, mngmtAgentTrap_3028=mngmtAgentTrap_3028, mngmtAgentTrap_1013=mngmtAgentTrap_1013, mngmtAgentTrap_18050=mngmtAgentTrap_18050, mngmtAgentTrap_92=mngmtAgentTrap_92, mngmtAgentTrap_3004=mngmtAgentTrap_3004, mngmtAgentTrap_4037=mngmtAgentTrap_4037, mngmtAgentTrap_2066=mngmtAgentTrap_2066, mngmtAgentTrap_26006=mngmtAgentTrap_26006, mngmtAgentTrap_9035=mngmtAgentTrap_9035, sCellEventTrap_9_d7=sCellEventTrap_9_d7, sCellEventTrap_9_3c=sCellEventTrap_9_3c, mngmtAgentTrap_6015=mngmtAgentTrap_6015, mngmtAgentTrap_27010=mngmtAgentTrap_27010, mngmtAgentTrap_27045=mngmtAgentTrap_27045, mngmtAgentTrap_6033=mngmtAgentTrap_6033, mngmtAgentTrap_6001=mngmtAgentTrap_6001, sCellEventTrap_9_22=sCellEventTrap_9_22, mngmtAgentTrap_5003=mngmtAgentTrap_5003, sCellEventTrap_9_45=sCellEventTrap_9_45, mngmtAgentTrap_8070=mngmtAgentTrap_8070, mngmtAgentTrap_3053=mngmtAgentTrap_3053, mngmtAgentTrap_103=mngmtAgentTrap_103, mngmtAgentTrap_49=mngmtAgentTrap_49, mngmtAgentTrap_4033=mngmtAgentTrap_4033, sCellEventTrap_d_a1=sCellEventTrap_d_a1, sCellEventTrap_6_7=sCellEventTrap_6_7, mngmtAgentTrap_2086=mngmtAgentTrap_2086, mngmtAgentTrap_2075=mngmtAgentTrap_2075, mngmtAgentTrap_3054=mngmtAgentTrap_3054, sCellEventTrap_9_2a=sCellEventTrap_9_2a, sCellEventTrap_d_3=sCellEventTrap_d_3, sCellEventTrap_9_3a=sCellEventTrap_9_3a, mngmtAgentTrap_90=mngmtAgentTrap_90, mngmtAgentTrap_8007=mngmtAgentTrap_8007, sCellEventTrap_83_6=sCellEventTrap_83_6, mngmtAgentTrap_18007=mngmtAgentTrap_18007, mngmtAgentTrap_24004=mngmtAgentTrap_24004, mngmtAgentTrap_13018=mngmtAgentTrap_13018, sCellEventTrap_6_2a=sCellEventTrap_6_2a, mngmtAgentTrap_16001=mngmtAgentTrap_16001, mngmtAgentTrap_86=mngmtAgentTrap_86, mngmtAgentTrap_2013=mngmtAgentTrap_2013, mngmtAgentTrap_9019=mngmtAgentTrap_9019, mngmtAgentTrap_2=mngmtAgentTrap_2, mngmtAgentTrap_6025=mngmtAgentTrap_6025, mngmtAgentTrap_3076=mngmtAgentTrap_3076, mngmtAgentTrap_10015=mngmtAgentTrap_10015, shelfElementNum=shelfElementNum, mngmtAgentTrap_6003=mngmtAgentTrap_6003, mngmtAgentTrap_6034=mngmtAgentTrap_6034, mngmtAgentTrap_8022=mngmtAgentTrap_8022, mngmtAgentTrap_8040=mngmtAgentTrap_8040, mngmtAgentTrap_84=mngmtAgentTrap_84, mngmtAgentTrap_8084=mngmtAgentTrap_8084, mngmtAgentTrap_13003=mngmtAgentTrap_13003, sCellEventTrap_b_0=sCellEventTrap_b_0, mngmtAgentTrap_14017=mngmtAgentTrap_14017, mngmtAgentTrap_2033=mngmtAgentTrap_2033, mngmtAgentTrap_77=mngmtAgentTrap_77, shelfEntryIndex=shelfEntryIndex, mngmtAgentTrap_2082=mngmtAgentTrap_2082, mngmtAgentTrap_6=mngmtAgentTrap_6, mngmtAgentTrap_4051=mngmtAgentTrap_4051, mngmtAgentTrap_8004=mngmtAgentTrap_8004, mngmtAgentTrap_9012=mngmtAgentTrap_9012, mngmtAgentTrap_60=mngmtAgentTrap_60, mngmtAgentTrap_11004=mngmtAgentTrap_11004, sCellEventTrap_9_23=sCellEventTrap_9_23, mngmtAgentTrap_73=mngmtAgentTrap_73, mngmtAgentTrap_54=mngmtAgentTrap_54, sCellEventTrap_9_ca=sCellEventTrap_9_ca, sCellEventTrap_4_d=sCellEventTrap_4_d, sCellEventTrap_d_35=sCellEventTrap_d_35, mngmtAgentTrap_8036=mngmtAgentTrap_8036, sCellEventTrap_9_cc=sCellEventTrap_9_cc, mngmtAgentTrap_3021=mngmtAgentTrap_3021, mngmtAgentTrap_4020=mngmtAgentTrap_4020, mngmtAgentTrap_4029=mngmtAgentTrap_4029, mngmtAgentTrap_4032=mngmtAgentTrap_4032, sCellEventTrap_d_d8=sCellEventTrap_d_d8, sCellEventTrap_42_1=sCellEventTrap_42_1, compaq=compaq, sCellEventTrap_6_3b=sCellEventTrap_6_3b, sCellEventTrap_9_46=sCellEventTrap_9_46, mngmtAgentTrap_1002=mngmtAgentTrap_1002, mngmtAgentTrap_132=mngmtAgentTrap_132, mngmtAgentTrap_9026=mngmtAgentTrap_9026, mngmtAgentTrap_74=mngmtAgentTrap_74, nscStatus=nscStatus, mngmtAgentTrap_2011=mngmtAgentTrap_2011, mngmtAgentTrap_6005=mngmtAgentTrap_6005, mngmtAgentTrap_6030=mngmtAgentTrap_6030, mngmtAgentTrap_15007=mngmtAgentTrap_15007, mngmtAgentTrap_15=mngmtAgentTrap_15, mngmtAgentTrap_106=mngmtAgentTrap_106, mngmtAgentTrap_2085=mngmtAgentTrap_2085, mngmtAgentTrap_5007=mngmtAgentTrap_5007, mngmtAgentTrap_8078=mngmtAgentTrap_8078, sCellEventTrap_6_33=sCellEventTrap_6_33, mngmtAgentTrap_24002=mngmtAgentTrap_24002, mngmtAgentTrap_10019=mngmtAgentTrap_10019, agentEventCode=agentEventCode, sCellEventTrap_7_5=sCellEventTrap_7_5, mngmtAgentTrap_2036=mngmtAgentTrap_2036, mngmtAgentTrap_13007=mngmtAgentTrap_13007, sCellEventTrap_9_1b=sCellEventTrap_9_1b, mngmtAgentTrap_4024=mngmtAgentTrap_4024, mngmtAgentTrap_25019=mngmtAgentTrap_25019, scellStatusTable=scellStatusTable, mngmtAgentTrap_4041=mngmtAgentTrap_4041, mngmtAgentTrap_17004=mngmtAgentTrap_17004, mngmtAgentTrap_3066=mngmtAgentTrap_3066, mngmtAgentTrap_6035=mngmtAgentTrap_6035, sCellEventTrap_9_15=sCellEventTrap_9_15, mngmtAgentTrap_2050=mngmtAgentTrap_2050, mngmtAgentTrap_12005=mngmtAgentTrap_12005, sCellEventTrap_4_10=sCellEventTrap_4_10, sCellEventTrap_6_13=sCellEventTrap_6_13, mngmtAgentTrap_2087=mngmtAgentTrap_2087, sCellEventTrap_9_70=sCellEventTrap_9_70, mngmtAgentTrap_9016=mngmtAgentTrap_9016, mngmtAgentTrap_25016=mngmtAgentTrap_25016, sCellEventTrap_42_4=sCellEventTrap_42_4, sCellEventTrap_6_2c=sCellEventTrap_6_2c, mngmtAgentTrap_4058=mngmtAgentTrap_4058, mngmtAgentTrap_20002=mngmtAgentTrap_20002, sCellEventTrap_d_7e=sCellEventTrap_d_7e, mngmtAgentTrap_2103=mngmtAgentTrap_2103, mngmtAgentTrap_2100=mngmtAgentTrap_2100, host=host, sCellEventTrap_6_3a=sCellEventTrap_6_3a, mngmtAgentTrap_3019=mngmtAgentTrap_3019, sCellEventTrap_9_2e=sCellEventTrap_9_2e, mngmtAgentTrap_2096=mngmtAgentTrap_2096, sCellEventTrap_7_1=sCellEventTrap_7_1, sCellEventTrap_d_d9=sCellEventTrap_d_d9, mngmtAgentTrap_16034=mngmtAgentTrap_16034, sCellEventTrap_9_35=sCellEventTrap_9_35, mngmtAgentTrap_16035=mngmtAgentTrap_16035, mngmtAgentTrap_2048=mngmtAgentTrap_2048, mngmtAgentTrap_8016=mngmtAgentTrap_8016, mngmtAgentTrap_27027=mngmtAgentTrap_27027, mngmtAgentTrap_3071=mngmtAgentTrap_3071, mngmtAgentTrap_27025=mngmtAgentTrap_27025, mngmtAgentTrap_1014=mngmtAgentTrap_1014, sCellEventTrap_9_7a=sCellEventTrap_9_7a, mngmtAgentTrap_18004=mngmtAgentTrap_18004, mngmtAgentTrap_9009=mngmtAgentTrap_9009, mngmtAgentTrap_27038=mngmtAgentTrap_27038, mngmtAgentTrap_2042=mngmtAgentTrap_2042, mngmtAgentTrap_2079=mngmtAgentTrap_2079, mngmtAgentTrap_6018=mngmtAgentTrap_6018, sCellEventTrap_9_3e=sCellEventTrap_9_3e, sCellEventTrap_6_31=sCellEventTrap_6_31, scellUUID=scellUUID, mngmtAgentTrap_2006=mngmtAgentTrap_2006, mngmtAgentTrap_8013=mngmtAgentTrap_8013, sCellEventTrap_3_0=sCellEventTrap_3_0, sCellEventTrap_3_1=sCellEventTrap_3_1, sCellEventTrap_6_20=sCellEventTrap_6_20, sCellEventTrap_9_6a=sCellEventTrap_9_6a, mngmtAgentTrap_114=mngmtAgentTrap_114, mngmtAgentTrap_20018=mngmtAgentTrap_20018, sCellEventTrap_9_c=sCellEventTrap_9_c, sCellEventTrap_9_6e=sCellEventTrap_9_6e, sCellEventTrap_9_69=sCellEventTrap_9_69, mngmtAgentTrap_20013=mngmtAgentTrap_20013, sCellEventTrap_d_0=sCellEventTrap_d_0, sCellEventTrap_d_4c=sCellEventTrap_d_4c, mngmtAgentTrap_10=mngmtAgentTrap_10, mngmtAgentTrap_35=mngmtAgentTrap_35, mngmtAgentTrap_3056=mngmtAgentTrap_3056, mngmtAgentTrap_18045=mngmtAgentTrap_18045, mngmtAgentTrap_2012=mngmtAgentTrap_2012, mngmtAgentTrap_18048=mngmtAgentTrap_18048, mngmtAgentTrap_52=mngmtAgentTrap_52, sCellEventTrap_9_d6=sCellEventTrap_9_d6, mngmtAgentTrap_8075=mngmtAgentTrap_8075, mngmtAgentTrap_16017=mngmtAgentTrap_16017, mngmtAgentTrap_120=mngmtAgentTrap_120, mngmtAgentTrap_3024=mngmtAgentTrap_3024, sCellEventTrap_4_e=sCellEventTrap_4_e, mngmtAgentTrap_1004=mngmtAgentTrap_1004, sCellEventTrap_6_32=sCellEventTrap_6_32, sCellEventTrap_9_6d=sCellEventTrap_9_6d, mngmtAgentTrap_16021=mngmtAgentTrap_16021, hostTotal=hostTotal, mngmtAgentTrap_118=mngmtAgentTrap_118, mngmtAgentTrap_6002=mngmtAgentTrap_6002, mngmtAgentTrap_10035=mngmtAgentTrap_10035, mngmtAgentTrap_17008=mngmtAgentTrap_17008, sCellEventTrap_3_7=sCellEventTrap_3_7, sCellEventTrap_3_8=sCellEventTrap_3_8, mngmtAgentTrap_27008=mngmtAgentTrap_27008, mngmtAgentTrap_15003=mngmtAgentTrap_15003, mngmtAgentTrap_133=mngmtAgentTrap_133, mngmtAgentTrap_18081=mngmtAgentTrap_18081, mngmtAgentTrap_39=mngmtAgentTrap_39, mngmtAgentTrap_2041=mngmtAgentTrap_2041, mngmtAgentTrap_3090=mngmtAgentTrap_3090, agHostName=agHostName, mngmtAgentTrap_3072=mngmtAgentTrap_3072, mngmtAgentTrap_4042=mngmtAgentTrap_4042, sCellEventTrap_9_3f=sCellEventTrap_9_3f, mngmtAgentTrap_18036=mngmtAgentTrap_18036, mngmtAgentTrap_27046=mngmtAgentTrap_27046, nscUUID=nscUUID, scellEIP=scellEIP, mngmtAgentTrap_4030=mngmtAgentTrap_4030, nscName=nscName, mngmtAgentTrap_4014=mngmtAgentTrap_4014, mngmtAgentTrap_82=mngmtAgentTrap_82, mngmtAgentTrap_8003=mngmtAgentTrap_8003, mngmtAgentTrap_8069=mngmtAgentTrap_8069, mngmtAgentTrap_8034=mngmtAgentTrap_8034, sCellEventTrap_6_21=sCellEventTrap_6_21, mngmtAgentTrap_27048=mngmtAgentTrap_27048, sCellEventTrap_3_2=sCellEventTrap_3_2, mngmtAgentTrap_27024=mngmtAgentTrap_27024, mngmtAgentTrap_20021=mngmtAgentTrap_20021, mngmtAgentTrap_27041=mngmtAgentTrap_27041, mngmtAgentTrap_10026=mngmtAgentTrap_10026, sCellEventTrap_9_17=sCellEventTrap_9_17, sCellEventTrap_d_33=sCellEventTrap_d_33, nscEntryIndex=nscEntryIndex, mngmtAgentTrap_8021=mngmtAgentTrap_8021, mngmtAgentTrap_2023=mngmtAgentTrap_2023, agStatusTable=agStatusTable, mngmtAgentTrap_8061=mngmtAgentTrap_8061, sCellEventTrap_9_6=sCellEventTrap_9_6, mngmtAgentTrap_26007=mngmtAgentTrap_26007, sCellEventTrap_d_dd=sCellEventTrap_d_dd, mngmtAgentTrap_36=mngmtAgentTrap_36, mngmtAgentTrap_53=mngmtAgentTrap_53, sCellEventTrap_42_5=sCellEventTrap_42_5, mngmtAgentTrap_85=mngmtAgentTrap_85, mngmtAgentTrap_1010=mngmtAgentTrap_1010, mngmtAgentTrap_2084=mngmtAgentTrap_2084, mngmtAgentTrap_2068=mngmtAgentTrap_2068, sCellEventTrap_9_31=sCellEventTrap_9_31, mngmtAgentTrap_3050=mngmtAgentTrap_3050, mngmtAgentTrap_3059=mngmtAgentTrap_3059, mngmtAgentTrap_6024=mngmtAgentTrap_6024)
mibBuilder.exportSymbols("CPQHSV110V3-MIB", mngmtAgentTrap_3017=mngmtAgentTrap_3017, mngmtAgentTrap_13015=mngmtAgentTrap_13015, mngmtAgentTrap_10004=mngmtAgentTrap_10004, mngmtAgentTrap_14009=mngmtAgentTrap_14009, mngmtAgentTrap_3064=mngmtAgentTrap_3064, mngmtAgentTrap_21019=mngmtAgentTrap_21019, mngmtAgentTrap_83=mngmtAgentTrap_83, mngmtAgentTrap_27005=mngmtAgentTrap_27005, mngmtAgentTrap_91=mngmtAgentTrap_91, sCellEventTrap_9_8=sCellEventTrap_9_8, mngmtAgentTrap_63=mngmtAgentTrap_63, mngmtAgentTrap_66=mngmtAgentTrap_66, sCellEventTrap_6_23=sCellEventTrap_6_23, mngmtAgentTrap_6023=mngmtAgentTrap_6023, mngmtAgentTrap_5004=mngmtAgentTrap_5004, mngmtAgentTrap_4036=mngmtAgentTrap_4036, emuEventTrapInformative=emuEventTrapInformative, sCellEventTrap_6_1=sCellEventTrap_6_1, sCellEventTrap_d_ec=sCellEventTrap_d_ec, mngmtAgentTrap_14001=mngmtAgentTrap_14001, sCellEventTrap_6_8=sCellEventTrap_6_8, mngmtAgentTrap_16033=mngmtAgentTrap_16033, sCellEventTrap_9_1e=sCellEventTrap_9_1e, mngmtAgentTrap_8015=mngmtAgentTrap_8015, mngmtAgentTrap_10010=mngmtAgentTrap_10010, mngmtAgentTrap_13019=mngmtAgentTrap_13019, emuEventTrapUnrecoverable=emuEventTrapUnrecoverable, sCellEventTrap_3_6=sCellEventTrap_3_6, mngmtAgentTrap_21018=mngmtAgentTrap_21018, mngmtAgentTrap_16015=mngmtAgentTrap_16015, mngmtAgentTrap_27011=mngmtAgentTrap_27011, mngmtAgentTrap_10039=mngmtAgentTrap_10039, mngmtAgentTrap_29=mngmtAgentTrap_29, sCellEventTrap_7_8=sCellEventTrap_7_8, mngmtAgentTrap_18051=mngmtAgentTrap_18051, mngmtAgentTrap_16031=mngmtAgentTrap_16031, mngmtAgentTrap_26012=mngmtAgentTrap_26012, mngmtAgentTrap_22=mngmtAgentTrap_22, sCellEventTrap_d_5f=sCellEventTrap_d_5f, sCellEventTrap_6_1c=sCellEventTrap_6_1c, mngmtAgentTrap_1008=mngmtAgentTrap_1008, sCellEventTrap_6_24=sCellEventTrap_6_24, mngmtAgentTrap_3007=mngmtAgentTrap_3007, mngmtAgentTrap_20016=mngmtAgentTrap_20016, cpqHSVAgent=cpqHSVAgent, sCellEventTrap_9_44=sCellEventTrap_9_44, mngmtAgentTrap_45=mngmtAgentTrap_45, mngmtAgentTrap_101=mngmtAgentTrap_101, mngmtAgentTrap_9010=mngmtAgentTrap_9010, mngmtAgentTrap_21016=mngmtAgentTrap_21016, mngmtAgentTrap_3044=mngmtAgentTrap_3044, sCellEventTrap_4_11=sCellEventTrap_4_11, sCellEventTrap_d_47=sCellEventTrap_d_47, mngmtAgentTrap_2097=mngmtAgentTrap_2097, sCellEventTrap_d_8d=sCellEventTrap_d_8d, mngmtAgentTrap_55=mngmtAgentTrap_55, mngmtAgentTrap_3068=mngmtAgentTrap_3068, mngmtAgentTrap_16012=mngmtAgentTrap_16012, mngmtAgentTrap_3=mngmtAgentTrap_3, mngmtAgentTrap_24003=mngmtAgentTrap_24003, sCellEventTrap_d_7f=sCellEventTrap_d_7f, mngmtAgentTrap_18006=mngmtAgentTrap_18006, mngmtAgentTrap_8057=mngmtAgentTrap_8057, sCellEventTrap_c_a=sCellEventTrap_c_a, sCellEventTrap_4_3=sCellEventTrap_4_3, mngmtAgentTrap_107=mngmtAgentTrap_107, mngmtAgentTrap_3003=mngmtAgentTrap_3003, mngmtAgentTrap_126=mngmtAgentTrap_126, mngmtAgentTrap_10030=mngmtAgentTrap_10030, sCellEventTrap_6_12=sCellEventTrap_6_12, mngmtAgentTrap_18049=mngmtAgentTrap_18049, sCellEventTrap_9_1a=sCellEventTrap_9_1a, mngmtAgentTrap_9030=mngmtAgentTrap_9030, sCellEventTrap_9_76=sCellEventTrap_9_76, mngmtAgentTrap_3060=mngmtAgentTrap_3060, shelfId=shelfId, mngmtAgentTrap_3091=mngmtAgentTrap_3091, mngmtAgentTrap_18009=mngmtAgentTrap_18009, mngmtAgentTrap_2095=mngmtAgentTrap_2095, mngmtAgentTrap_113=mngmtAgentTrap_113, agDescription=agDescription, mngmtAgentTrap_8050=mngmtAgentTrap_8050, mngmtAgentTrap_2002=mngmtAgentTrap_2002, mngmtAgentTrap_2067=mngmtAgentTrap_2067, mngmtAgentTrap_27015=mngmtAgentTrap_27015, shelfStatusTable=shelfStatusTable, mngmtAgentTrap_10036=mngmtAgentTrap_10036, mngmtAgentTrap_15009=mngmtAgentTrap_15009, nscStatusTable=nscStatusTable, mngmtAgentTrap_129=mngmtAgentTrap_129, mngmtAgentTrap_1=mngmtAgentTrap_1, mngmtAgentTrap_27039=mngmtAgentTrap_27039, mngmtAgentTrap_18008=mngmtAgentTrap_18008, mngmtAgentTrap_10020=mngmtAgentTrap_10020, mngmtAgentTrap_6028=mngmtAgentTrap_6028, sCellEventTrap_9_cb=sCellEventTrap_9_cb, mngmtAgentTrap_94=mngmtAgentTrap_94, mngmtAgentTrap_27049=mngmtAgentTrap_27049, srvOSMinVersion=srvOSMinVersion, mngmtAgentTrap_127=mngmtAgentTrap_127, mngmtAgentTrap_88=mngmtAgentTrap_88, mngmtAgentTrap_2061=mngmtAgentTrap_2061, sCellEventTrap_c_6=sCellEventTrap_c_6, mngmtAgentTrap_25011=mngmtAgentTrap_25011, mngmtAgentTrap_3067=mngmtAgentTrap_3067, mngmtAgentTrap_96=mngmtAgentTrap_96, sCellEventTrap_6_3c=sCellEventTrap_6_3c, mngmtAgentTrap_17006=mngmtAgentTrap_17006, scellCAC=scellCAC, mngmtAgentTrap_112=mngmtAgentTrap_112, mngmtAgentTrap_2078=mngmtAgentTrap_2078, mngmtAgentTrap_2069=mngmtAgentTrap_2069, mngmtAgentTrap_8010=mngmtAgentTrap_8010, mngmtAgentTrap_8019=mngmtAgentTrap_8019, mngmtAgentTrap_21013=mngmtAgentTrap_21013, mngmtAgentTrap_23002=mngmtAgentTrap_23002, mngmtAgentTrap_26013=mngmtAgentTrap_26013, mngmtAgentTrap_8060=mngmtAgentTrap_8060, sCellEventTrap_9_78=sCellEventTrap_9_78, mngmtAgentTrap_6019=mngmtAgentTrap_6019, sCellEventTrap_7_0=sCellEventTrap_7_0, sCellEventTrap_d_2=sCellEventTrap_d_2, mngmtAgentTrap_33=mngmtAgentTrap_33, sCellEventTrap_9_24=sCellEventTrap_9_24, mngmtAgentTrap_3037=mngmtAgentTrap_3037, mngmtAgentTrap_6011=mngmtAgentTrap_6011, mngmtAgentTrap_18=mngmtAgentTrap_18, sCellEventTrap_6_c=sCellEventTrap_6_c, mngmtAgentTrap_8037=mngmtAgentTrap_8037, mngmtAgentTrap_3045=mngmtAgentTrap_3045, mngmtAgentTrap_65=mngmtAgentTrap_65, mngmtAgentTrap_10024=mngmtAgentTrap_10024, mngmtAgentTrap_10041=mngmtAgentTrap_10041, mngmtAgentTrap_27029=mngmtAgentTrap_27029, mngmtAgentTrap_27040=mngmtAgentTrap_27040, mngmtAgentTrap_26011=mngmtAgentTrap_26011, mngmtAgentTrap_27026=mngmtAgentTrap_27026, sCellEventTrap_4_b=sCellEventTrap_4_b, sCellEventTrap_9_71=sCellEventTrap_9_71, mngmtAgentTrap_9005=mngmtAgentTrap_9005, mngmtAgentTrap_3081=mngmtAgentTrap_3081, mngmtAgentTrap_13009=mngmtAgentTrap_13009, mngmtAgentTrap_8011=mngmtAgentTrap_8011, mngmtAgentTrap_18019=mngmtAgentTrap_18019, mngmtAgentTrap_1000=mngmtAgentTrap_1000, mngmtAgentTrap_2031=mngmtAgentTrap_2031, mngmtAgentTrap_6009=mngmtAgentTrap_6009, mngmtAgentTrap_3036=mngmtAgentTrap_3036, sCellEventTrap_4_7=sCellEventTrap_4_7, mngmtAgentTrap_25012=mngmtAgentTrap_25012, mngmtAgentTrap_8001=mngmtAgentTrap_8001, mngmtAgentTrap_3048=mngmtAgentTrap_3048, agMinVersion=agMinVersion, sCellEventTrap_6_3=sCellEventTrap_6_3, mngmtAgentTrap_21017=mngmtAgentTrap_21017, mngmtAgentTrap_25008=mngmtAgentTrap_25008, sCellEventTrap_d_85=sCellEventTrap_d_85, mngmtAgentTrap_5010=mngmtAgentTrap_5010, mngmtAgentTrap_8041=mngmtAgentTrap_8041, agentStatus=agentStatus, mngmtAgentTrap_108=mngmtAgentTrap_108, sCellEventTrap_9_2c=sCellEventTrap_9_2c, sCellEventTrap_4_2=sCellEventTrap_4_2, mngmtAgentTrap_2008=mngmtAgentTrap_2008, mngmtAgentTrap_46=mngmtAgentTrap_46, sCellEventTrap_c_11=sCellEventTrap_c_11, sCellEventTrap_d_b5=sCellEventTrap_d_b5, mngmtAgentTrap_27=mngmtAgentTrap_27, mngmtAgentTrap_32=mngmtAgentTrap_32, mngmtAgentTrap_50=mngmtAgentTrap_50, sCellEventTrap_9_14=sCellEventTrap_9_14, sCellEventTrap_c_1=sCellEventTrap_c_1, mngmtAgentTrap_2030=mngmtAgentTrap_2030, mngmtAgentTrap_4005=mngmtAgentTrap_4005, mngmtAgentTrap_8045=mngmtAgentTrap_8045, mngmtAgentTrap_18038=mngmtAgentTrap_18038, mngmtAgentTrap_25001=mngmtAgentTrap_25001, mngmtAgentTrap_18047=mngmtAgentTrap_18047, sCellEventTrap_9_34=sCellEventTrap_9_34, sCellEventTrap_c_12=sCellEventTrap_c_12, mngmtAgentTrap_6016=mngmtAgentTrap_6016, mngmtAgentTrap_79=mngmtAgentTrap_79, mngmtAgentTrap_17016=mngmtAgentTrap_17016, mngmtAgentTrap_27034=mngmtAgentTrap_27034, sCellEventTrap_6_27=sCellEventTrap_6_27, mngmtAgentTrap_4025=mngmtAgentTrap_4025, mngmtAgentTrap_18010=mngmtAgentTrap_18010, mngmtAgentTrap_16029=mngmtAgentTrap_16029, mngmtAgentTrap_14013=mngmtAgentTrap_14013, mngmtAgentTrap_9036=mngmtAgentTrap_9036, mngmtAgentTrap_18080=mngmtAgentTrap_18080, sCellEventTrap_9_75=sCellEventTrap_9_75, nscTotal=nscTotal, sCellEventTrap_4_0=sCellEventTrap_4_0, mngmtAgentTrap_4028=mngmtAgentTrap_4028, sCellEventTrap_9_c9=sCellEventTrap_9_c9, mngmtAgentTrap_58=mngmtAgentTrap_58, mngmtAgentTrap_16024=mngmtAgentTrap_16024, mngmtAgentTrap_26010=mngmtAgentTrap_26010, srvCPU=srvCPU, sCellEventTrap_9_3=sCellEventTrap_9_3, sCellEventTrap_d_5b=sCellEventTrap_d_5b, sCellEventTrap_6_16=sCellEventTrap_6_16, sCellEventTrap_9_9=sCellEventTrap_9_9, mngmtAgentTrap_9025=mngmtAgentTrap_9025, mngmtAgentTrap_3086=mngmtAgentTrap_3086, mngmtAgentTrap_9011=mngmtAgentTrap_9011, sCellEventTrap_9_19=sCellEventTrap_9_19, mngmtAgentTrap_67=mngmtAgentTrap_67, mngmtAgentTrap_15005=mngmtAgentTrap_15005, mngmtAgentTrap_2010=mngmtAgentTrap_2010, mngmtAgentTrap_2098=mngmtAgentTrap_2098, nsc=nsc, sCellEventTrap_9_2f=sCellEventTrap_9_2f, mngmtAgentTrap_1003=mngmtAgentTrap_1003, sCellEventTrap_6_2d=sCellEventTrap_6_2d, mngmtAgentTrap_26=mngmtAgentTrap_26, mngmtAgentTrap_8076=mngmtAgentTrap_8076, mngmtAgentTrap_4052=mngmtAgentTrap_4052, mngmtAgentTrap_5012=mngmtAgentTrap_5012, sCellEventTrap_4_9=sCellEventTrap_4_9, mngmtAgentTrap_9023=mngmtAgentTrap_9023, mngmtAgentTrap_27043=mngmtAgentTrap_27043, mngmtAgentTrap_16030=mngmtAgentTrap_16030, mngmtAgentTrap_9031=mngmtAgentTrap_9031, mngmtAgentTrap_62=mngmtAgentTrap_62, mngmtAgentTrap_42=mngmtAgentTrap_42, agManufacturer=agManufacturer, mngmtAgentTrap_14012=mngmtAgentTrap_14012, mngmtAgentTrap_27012=mngmtAgentTrap_27012, mngmtAgentTrap_28=mngmtAgentTrap_28, mngmtAgentTrap_2001=mngmtAgentTrap_2001, mngmtAgentTrap_2057=mngmtAgentTrap_2057, mngmtAgentTrap_72=mngmtAgentTrap_72, sCellEventTrap_9_25=sCellEventTrap_9_25, mngmtAgentTrap_8025=mngmtAgentTrap_8025, scellName=scellName, sCellEventTrap_9_20=sCellEventTrap_9_20, mngmtAgentTrap_119=mngmtAgentTrap_119, mngmtAgentTrap_7=mngmtAgentTrap_7, mngmtAgentTrap_123=mngmtAgentTrap_123, mngmtAgentTrap_3065=mngmtAgentTrap_3065, mngmtAgentTrap_5002=mngmtAgentTrap_5002, mngmtAgentTrap_23=mngmtAgentTrap_23, mngmtAgentTrap_8079=mngmtAgentTrap_8079, hostStatus=hostStatus, mngmtAgentTrap_15002=mngmtAgentTrap_15002, mngmtAgentTrap_25007=mngmtAgentTrap_25007, sCellEventTrap_9_18=sCellEventTrap_9_18, mngmtAgentTrap_3084=mngmtAgentTrap_3084, sCellEventTrap_9_e=sCellEventTrap_9_e, mngmtAgentTrap_8023=mngmtAgentTrap_8023, mngmtAgentTrap_2051=mngmtAgentTrap_2051, mngmtAgentTrap_3069=mngmtAgentTrap_3069)
mibBuilder.exportSymbols("CPQHSV110V3-MIB", mngmtAgentTrap_9001=mngmtAgentTrap_9001, mngmtAgentTrap_6007=mngmtAgentTrap_6007, mngmtAgentTrap_27035=mngmtAgentTrap_27035, mngmtAgentTrap_34=mngmtAgentTrap_34, mngmtAgentTrap_1007=mngmtAgentTrap_1007, sCellEventTrap_6_25=sCellEventTrap_6_25, mngmtAgentTrap_3080=mngmtAgentTrap_3080, mngmtAgentTrap_81=mngmtAgentTrap_81, mngmtAgentTrap_16040=mngmtAgentTrap_16040, mngmtAgentTrap_27013=mngmtAgentTrap_27013, mngmtAgentTrap_27003=mngmtAgentTrap_27003, mngmtAgentTrap_1012=mngmtAgentTrap_1012, scellEntryIndex=scellEntryIndex, mngmtAgentTrap_12=mngmtAgentTrap_12, mngmtAgentTrap_27036=mngmtAgentTrap_27036, mngmtAgentTrap_1001=mngmtAgentTrap_1001, mngmtAgentTrap_12001=mngmtAgentTrap_12001, mngmtAgentTrap_21004=mngmtAgentTrap_21004, mngmtAgentTrap_8048=mngmtAgentTrap_8048, mngmtAgentTrap_41=mngmtAgentTrap_41, mngmtAgentTrap_10006=mngmtAgentTrap_10006, mngmtAgentTrap_14005=mngmtAgentTrap_14005, mngmtAgentTrap_25017=mngmtAgentTrap_25017, hostName=hostName, sCellEventTrap_9_72=sCellEventTrap_9_72, mngmtAgentTrap_3079=mngmtAgentTrap_3079, mngmtAgentTrap_10001=mngmtAgentTrap_10001, sCellEventTrap_6_2b=sCellEventTrap_6_2b, sCellEventTrap_c_15=sCellEventTrap_c_15, mngmtAgentTrap_5019=mngmtAgentTrap_5019, mngmtAgentTrap_131=mngmtAgentTrap_131, mngmtAgentTrap_2049=mngmtAgentTrap_2049, sCellEventTrap_9_3b=sCellEventTrap_9_3b, mngmtAgentTrap_9028=mngmtAgentTrap_9028, mngmtAgentTrap_20004=mngmtAgentTrap_20004, mngmtAgentTrap_8085=mngmtAgentTrap_8085, mngmtAgentTrap_80=mngmtAgentTrap_80, mngmtAgentTrap_25=mngmtAgentTrap_25, mngmtAgentTrap_14004=mngmtAgentTrap_14004, mngmtAgentTrap_3046=mngmtAgentTrap_3046, srvOSMajVersion=srvOSMajVersion, mngmtAgentTrap_20022=mngmtAgentTrap_20022, mngmtAgentTrap_16018=mngmtAgentTrap_16018, mngmtAgentTrap_9022=mngmtAgentTrap_9022, mngmtAgentTrap_8042=mngmtAgentTrap_8042, mngmtAgentTrap_1006=mngmtAgentTrap_1006, mngmtAgentTrap_2025=mngmtAgentTrap_2025, mngmtAgentTrap_8064=mngmtAgentTrap_8064, mngmtAgentTrap_8065=mngmtAgentTrap_8065, sCellEventTrap_6_15=sCellEventTrap_6_15, mngmtAgentTrap_17013=mngmtAgentTrap_17013, mngmtAgentTrap_16037=mngmtAgentTrap_16037, sCellEventTrap_9_66=sCellEventTrap_9_66, mngmtAgentTrap_56=mngmtAgentTrap_56, mngmtAgentTrap_8032=mngmtAgentTrap_8032, mngmtAgentTrap_12003=mngmtAgentTrap_12003, mngmtAgentTrap_18034=mngmtAgentTrap_18034, mngmtAgentTrap_16025=mngmtAgentTrap_16025, mngmtAgentTrap_2090=mngmtAgentTrap_2090, mngmtAgentTrap_8002=mngmtAgentTrap_8002, agEnterprise=agEnterprise, srvOS=srvOS, mngmtAgentTrap_16020=mngmtAgentTrap_16020, mngmtAgentTrap_8035=mngmtAgentTrap_8035, mngmtAgentTrap_10029=mngmtAgentTrap_10029, mngmtAgentTrap_9021=mngmtAgentTrap_9021, mngmtAgentTrap_10040=mngmtAgentTrap_10040, mngmtAgentTrap_8059=mngmtAgentTrap_8059, hostEntryIndex=hostEntryIndex, sCellEventTrap_6_1a=sCellEventTrap_6_1a, mngmtAgentTrap_78=mngmtAgentTrap_78, mngmtAgentTrap_18068=mngmtAgentTrap_18068, emuEventTrapCritical=emuEventTrapCritical, mngmtAgentTrap_14008=mngmtAgentTrap_14008, sCellEventTrap_9_d4=sCellEventTrap_9_d4, mngmtAgentTrap_128=mngmtAgentTrap_128, mngmtAgentTrap_6029=mngmtAgentTrap_6029, mngmtAgentTrap_13002=mngmtAgentTrap_13002, mngmtAgentTrap_10038=mngmtAgentTrap_10038, scellEventDescription=scellEventDescription, mngmtAgentTrap_2076=mngmtAgentTrap_2076, mngmtAgentTrap_3020=mngmtAgentTrap_3020, mngmtAgentTrap_15004=mngmtAgentTrap_15004, mngmtAgentTrap_25006=mngmtAgentTrap_25006, mngmtAgentTrap_5001=mngmtAgentTrap_5001, mngmtAgentTrap_1009=mngmtAgentTrap_1009, mngmtAgentTrap_26014=mngmtAgentTrap_26014, mngmtAgentTrap_8082=mngmtAgentTrap_8082, mngmtAgentTrap_5015=mngmtAgentTrap_5015, mngmtAgentTrap_8063=mngmtAgentTrap_8063, sCellEventTrap_9_1c=sCellEventTrap_9_1c, mngmtAgentTrap_3062=mngmtAgentTrap_3062, sCellEventTrap_4_c=sCellEventTrap_4_c, sCellEventTrap_6_39=sCellEventTrap_6_39, sCellEventTrap_c_8=sCellEventTrap_c_8, mngmtAgentTrap_102=mngmtAgentTrap_102, mngmtAgentTrap_16019=mngmtAgentTrap_16019, sCellEventTrap_4_8=sCellEventTrap_4_8, mngmtAgentTrap_16038=mngmtAgentTrap_16038, mngmtAgentTrap_20005=mngmtAgentTrap_20005, mngmtAgentTrap_98=mngmtAgentTrap_98, sCellEventTrap_c_10=sCellEventTrap_c_10, maHSVMibRev=maHSVMibRev, mngmtAgentTrap_25010=mngmtAgentTrap_25010, scellEventCode=scellEventCode, mngmtAgentTrap_24001=mngmtAgentTrap_24001, sCellEventTrap_6_37=sCellEventTrap_6_37, sCellEventTrap_d_4=sCellEventTrap_d_4, scellEntry=scellEntry, mngmtAgentTrap_2060=mngmtAgentTrap_2060, mngmtAgentTrap_1011=mngmtAgentTrap_1011, mngmtAgentTrap_21=mngmtAgentTrap_21, sCellEventTrap_4_4=sCellEventTrap_4_4, mngmtAgentTrap_3035=mngmtAgentTrap_3035, mngmtAgentTrap_8029=mngmtAgentTrap_8029, mngmtAgentTrap_8083=mngmtAgentTrap_8083, mngmtAgentTrap_27002=mngmtAgentTrap_27002, mngmtAgentTrap_27033=mngmtAgentTrap_27033, mngmtAgentTrap_16022=mngmtAgentTrap_16022, mngmtAgentTrap_14002=mngmtAgentTrap_14002, shelfErrorCode=shelfErrorCode, sCellEventTrap_6_0=sCellEventTrap_6_0, mngmtAgentTrap_116=mngmtAgentTrap_116, mngmtAgentTrap_124=mngmtAgentTrap_124, mngmtAgentTrap_8055=mngmtAgentTrap_8055, mngmtAgentTrap_6006=mngmtAgentTrap_6006, sCellEventTrap_d_72=sCellEventTrap_d_72, mngmtAgentTrap_10023=mngmtAgentTrap_10023, sCellEventTrap_d_82=sCellEventTrap_d_82, mngmtAgentTrap_99=mngmtAgentTrap_99, mngmtAgentTrap_3051=mngmtAgentTrap_3051, mngmtAgentTrap_70=mngmtAgentTrap_70, sCellEventTrap_6_e=sCellEventTrap_6_e, sCellEventTrap_3_3=sCellEventTrap_3_3, sCellEventTrap_6_29=sCellEventTrap_6_29, mngmtAgentTrap_17=mngmtAgentTrap_17)
