#
# PySNMP MIB module ORiNOCO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ORiNOCO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, enterprises, Counter64, Gauge32, Counter32, Unsigned32, ModuleIdentity, Integer32, iso, NotificationType, Bits, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "Counter64", "Gauge32", "Counter32", "Unsigned32", "ModuleIdentity", "Integer32", "iso", "NotificationType", "Bits", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, TimeInterval, MacAddress, DateAndTime, TruthValue, DisplayString, TimeStamp, RowStatus, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "MacAddress", "DateAndTime", "TruthValue", "DisplayString", "TimeStamp", "RowStatus", "PhysAddress")
orinoco = ModuleIdentity((1, 3, 6, 1, 4, 1, 11898, 2))
if mibBuilder.loadTexts: orinoco.setLastUpdated('0408100000Z')
if mibBuilder.loadTexts: orinoco.setOrganization('Proxim Corporation')
if mibBuilder.loadTexts: orinoco.setContactInfo('Daniel R. Borges Proxim Corporation WiFi Research and Development 935 Stewart Drive Sunnyvale, CA 94085 USA Tel: +1.408.731.2654 Fax: +1.408.731.3673 Email: drborges@proxim.com')
if mibBuilder.loadTexts: orinoco.setDescription('MIB Definition used in the ORiNOCO Wireless Product Line: iso(1).org(3).dod(6).internet(1).private(4).enterprises(1). agere(11898).orinoco(2)')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 4094)

class InterfaceBitmask(TextualConvention, Integer32):
    description = 'An Interface Bitmask used to enable or disable access or functionality of an interface in the system. Each bit in this object represents a network interface in the system consistent with the ifIndex object in MIB-II. The value for this object is interpreted as a bitfield, where the value of 1 means enabled. Examples of Usage: 1. For a system with the following interfaces (AP-2000 & AP-4000): - Ethernet If = 1 - Loopback If = 2 - Wireless If A = 3 - Wireless If B = 4 Interface Bitmask usage: - 00000000 (0x00): All Interfaces disabled - 00000001 (0x01): Ethernet If enabled - 00000010 (0x02): All Interfaces disabled - 00000011 (0x03): Ethernet If enabled - 00000100 (0x04): Wireless If A enabled - 00000110 (0x06): Wireless If A enabled - 00001000 (0x08): Wireless If B enabled - 00001010 (0x0A): Wireless If B enabled - 00001101 (0x0D): All Interfaces enabled - 00001111 (0x0F): All Interfaces enabled (see Note) Note: The software loopback interface bit is ignored in the usage of the interface bitmask object. 2. For a system with the following interfaces (AP-600, AP-700 & Tsunami Multipoint Devices): - Ethernet If = 1 - Loopback If = 2 - Wireless If A = 3 Interface Bitmask usage: - 00000000 (0x00): All Interfaces disabled - 00000001 (0x01): Ethernet If enabled - 00000010 (0x02): All Interfaces disabled - 00000011 (0x03): Ethernet If enabled - 00000100 (0x04): Wireless If A enabled - 00000101 (0x05): All Interfaces enabled - 00000110 (0x06): Wireless If A enabled - 00000111 (0x07): All Interfaces enabled (see Note) Note: The software loopback interface bit is ignored in the usage of the interface bitmask object. 3. For a system with the following interfaces (BG-2000): - Ethernet WAN If = 1 - Ethernet LAN If = 2 - Wireless If A = 3 Inteface Bitmask usage: - 00000000 (0x00): all Interfaces disabled - 00000001 (0x01): Ethernet WAN If enabled - 00000010 (0x02): Ethernet LAN If enabled - 00000011 (0x03): Ethernet WAN and LAN If enabled - 00000100 (0x04): Wireless If A enabled - 00000101 (0x05): Ethernet WAN and Wireless If A enabled - 00000110 (0x06): Ethernet LAN and Wireless If A enabled - 00000111 (0x07): All Interfaces enabled'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class ObjStatus(TextualConvention, Integer32):
    description = 'The status textual convention is used to enable or disable functionality or a feature.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class WEPKeyType(DisplayString):
    description = 'The WEPKeyType textual convention is used to define the object type used to configured WEP Keys.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class ObjStatusActive(TextualConvention, Integer32):
    description = 'The status textual convention is used to activate, deactivate, and delete a table row.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("inactive", 2), ("deleted", 3))

class DisplayString80(DisplayString):
    description = 'The DisplayString80 textual convention is used to define a string that can consist of 0 - 80 alphanumeric characters.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 80)

class DisplayString55(DisplayString):
    description = 'The DisplayString55 textual convention is used to define a string that can consist of 0 - 55 alphanumeric characters this textual convention is used for Temperature log messages.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 55)

class DisplayString32(DisplayString):
    description = 'The DisplayString32 textual convention is used to define a string that can consist of 0 - 32 alphanumeric characters.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

agere = MibIdentifier((1, 3, 6, 1, 4, 1, 11898))
orinocoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1))
orinocoNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 2))
orinocoConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 3))
orinocoGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 3, 1))
orinocoCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 3, 2))
orinocoProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4))
ap1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 1))
rg1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 2))
as1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 3))
as2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 4))
ap500 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 5))
ap2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 6))
bg2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 7))
rg1100 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 8))
tmp11 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 9))
ap600 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 10))
ap2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 11))
ap4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 12))
ap700 = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 4, 13))
orinocoSys = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1))
orinocoIf = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2))
orinocoNet = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3))
orinocoSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4))
orinocoFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5))
orinocoRADIUS = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6))
orinocoTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7))
orinocoTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8))
orinocoSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 9))
orinocoIAPP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10))
orinocoLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11))
orinocoLinkInt = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12))
orinocoUPSD = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 13))
orinocoQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14))
orinocoDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15))
orinocoHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16))
orinocoWDS = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17))
orinocoTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18))
orinocoIPARP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 19))
orinocoSpanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 20))
orinocoSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21))
orinocoPPPoE = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22))
orinocoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23))
orinocoDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24))
orinocoAOL = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 25))
orinocoNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26))
orinocoSpectraLink = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 29))
orinocoVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30))
orinocoDMZ = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31))
orinocoOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32))
orinocoStationStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33))
orinocoSNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34))
orinocoSysInvMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1))
orinocoSysFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19))
orinocoSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21))
orinocoTempLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23))
orinocoWirelessIf = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1))
orinocoEthernetIf = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2))
orinocoWORPIf = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5))
orinocoWORPIfSat = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3))
orinocoWORPIfSiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4))
orinocoWORPIfRoaming = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5))
orinocoWORPIfDDRS = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6))
orinocoWORPIfBSU = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7))
orinocoWORPIfSatConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1))
orinocoWORPIfSatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2))
orinocoWORPIfBSUStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1))
orinocoNetIP = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1))
orinocoRADIUSAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1))
orinocoRADIUSAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2))
orinocoRADIUSSvrProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10))
orinocoProtocolFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1))
orinocoAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2))
orinocoStaticMACAddressFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3))
orinocoStormThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4))
orinocoPortFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5))
orinocoAdvancedFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6))
orinocoPacketForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 7))
orinocoIBSSTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 8))
orinocoIntraCellBlocking = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9))
orinocoSecurityGw = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 10))
orinocoDHCPServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1))
orinocoDHCPClient = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 2))
orinocoDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3))
orinocoDNSClient = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 5))
orinocoRAD = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4))
orinocoRogueScan = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8))
oriSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemReboot.setStatus('current')
if mibBuilder.loadTexts: oriSystemReboot.setDescription('This object is used to reboot the device. The value assigned to this object is the number of seconds until the next reboot.')
oriSystemContactEmail = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemContactEmail.setStatus('current')
if mibBuilder.loadTexts: oriSystemContactEmail.setDescription('This object is used to identify the email address of the contact person for this managed device.')
oriSystemContactPhoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemContactPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: oriSystemContactPhoneNumber.setDescription('This object is used to identify the phone number of the contact person for this managed device.')
oriSystemFlashUpdate = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemFlashUpdate.setStatus('current')
if mibBuilder.loadTexts: oriSystemFlashUpdate.setDescription('When this variable is set, all the objects that are to be comitted to flash will be written to flash. This will be done immediately after the value is set, regardless of the value set.')
oriSystemFlashBackupInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemFlashBackupInterval.setStatus('current')
if mibBuilder.loadTexts: oriSystemFlashBackupInterval.setDescription('This object is used for the backup time interval for flash memory to be udpated.')
oriSystemEmergencyResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemEmergencyResetToDefault.setStatus('current')
if mibBuilder.loadTexts: oriSystemEmergencyResetToDefault.setDescription('This object is used to reset the device to factory default values. When this variable is set to 1, all the objects shall be set to factory default values. The default value for this object should be 0.')
oriSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("gateway", 2))).clone('bridge')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemMode.setStatus('current')
if mibBuilder.loadTexts: oriSystemMode.setDescription('This object represents the mode the system is configured to operate in, either bridge or gateway/router mode.')
oriSystemEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 11), )
if mibBuilder.loadTexts: oriSystemEventLogTable.setStatus('current')
if mibBuilder.loadTexts: oriSystemEventLogTable.setDescription('This table contains system event log information that can include events, errors, and informational messages. This is a circular buffer with a limit 100 entries.')
oriSystemEventLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 11, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSystemEventLogMessage"))
if mibBuilder.loadTexts: oriSystemEventLogTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSystemEventLogTableEntry.setDescription('This object represents an entry in the system event log table.')
oriSystemEventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemEventLogMessage.setStatus('current')
if mibBuilder.loadTexts: oriSystemEventLogMessage.setDescription('This object is used to store system event log information. This is also used as the index to the table.')
oriSystemEventLogTableReset = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemEventLogTableReset.setStatus('current')
if mibBuilder.loadTexts: oriSystemEventLogTableReset.setDescription('This object is used to reset/clear the event log table. When this object is the set all entries in the event log table are deleted/cleared.')
oriSystemEventLogMask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemEventLogMask.setStatus('current')
if mibBuilder.loadTexts: oriSystemEventLogMask.setDescription('This object is used to control what events will be logged by the event log facility. It is a mask, each bit is used to enable/disable a corresponding set of log messages. The OR2000 uses the standard syslog priorities and facilities. The Mask should only be set to mask specific facilities. The facilities are: LOG_KERN (0<<3) kernel messages LOG_USER (1<<3) random user-level messages LOG_MAIL (2<<3) mail system LOG_DAEMON (3<<3) system daemons LOG_AUTH (4<<3) authorization messages LOG_SYSLOG (5<<3) messages generated internally by syslogd LOG_LPR (6<<3) line printer subsystem LOG_NEWS (7<<3) network news subsystem LOG_UUCP (8<<3) UUCP subsystem LOG_CRON (9<<3) clock daemon LOG_AUTHPRIV (10<<3) authorization messages (private) LOG_FTP (11<<3) ftp daemon LOG_NTP (12<<3) NTP subsystem LOG_SECURITY (13<<3) security subsystems (firewalling, etc.) LOG_CONSOLE (14<<3) /dev/console output - other codes through 15 reserved for system use LOG_LOCAL0 (16<<3) reserved for local use LOG_LOCAL1 (17<<3) reserved for local use LOG_LOCAL2 (18<<3) reserved for local use LOG_LOCAL3 (19<<3) reserved for local use LOG_LOCAL4 (20<<3) reserved for local use LOG_LOCAL5 (21<<3) reserved for local use LOG_LOCAL6 (22<<3) reserved for local use LOG_LOCAL7 (23<<3) reserved for local use On the BG2000: Each nibble (4 bits == 1 hex digit == a nibble) represents a category of log messages. There are 4 levels of messages per category (1 bit per level per category). The least significant bit is a higher priority message. As follows: security - nibble 1, bits 1-4 errors - nibble 2, bits 5-8 system startup - nibble 3, bits 9-12 warnings - nibble 4, bits 13-16 information - nibble 5, bits 17-20 0x00000 - No events will be logged. 0x000F0 - Only errors will be logged. 0x0F0F0 - Warnings and errors will be logged. 0xFFFFF - All events will be logged.')
oriSystemAccessUserName = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemAccessUserName.setStatus('current')
if mibBuilder.loadTexts: oriSystemAccessUserName.setDescription('This object represents the system access user name for the supported management interfaces (Telnet and HTTP).')
oriSystemAccessPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemAccessPassword.setStatus('current')
if mibBuilder.loadTexts: oriSystemAccessPassword.setDescription('This object represents the system access password for the supported management interfaces (Telnet and HTTP). This object should be treated as write-only and returned as asterisks.')
oriSystemAccessLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemAccessLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: oriSystemAccessLoginTimeout.setDescription('This object represents the login timeout in seconds. The default value should be 60 seconds (1 minute).')
oriSystemAccessIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemAccessIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: oriSystemAccessIdleTimeout.setDescription('This object represents the inactivity or idle timeout in seconds. The default value should be 900 seconds (15 minutes).')
oriSystemEventLogNumberOfMessages = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemEventLogNumberOfMessages.setStatus('current')
if mibBuilder.loadTexts: oriSystemEventLogNumberOfMessages.setDescription('This object represents the number of messages currently stored in the event log table.')
oriSystemAccessMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemAccessMaxSessions.setStatus('current')
if mibBuilder.loadTexts: oriSystemAccessMaxSessions.setDescription('This object controls the maximum number of simultaneous telnet, http, and serial managmenent sessions.')
oriSystemCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSystemCountryCode.setStatus('current')
if mibBuilder.loadTexts: oriSystemCountryCode.setDescription('This attribute identifies the country in which the station is operating. The first two octets of this string is the two character country code as described in document ISO/IEC 3166-1. Below is the list of mapping of country codes to country names. AL - ALBANIA DZ - ALGERIA AR - ARGENTINA AM - ARMENIA AU - AUSTRALIA AT - AUSTRIA AZ - AZERBAIJAN BH - BAHRAIN BY - BELARUS BE - BELGIUM BZ - BELIZE BO - BOLIVIA BR - BRAZIL BN - BRUNEI DARUSSALAM BG - BULGARIA CA - CANADA CL - CHILE CN - CHINA CO - COLOMBIA CR - COSTA RICA HR - CROATIA CY - CYPRUS CZ - CZECH REPUBLIC DK - DENMARK DO - DOMINICAN REPUBLIC EC - ECUADOR EG - EGYPT EE - ESTONIA FI - FINLAND FR - FRANCE GE - GEORGIA DE - GERMANY GR - GREECE GT - GUATEMALA HK - HONG KONG HU - HUNGARY IS - ICELAND IN - INDIA ID - INDONESIA IR - IRAN IE - IRELAND I1 - IRELAND - 5.8GHz IL - ISRAEL IT - ITALY JP - JAPAN J2 - JAPAN2 JO - JORDAN KZ - KAZAKHSTAN KP - NORTH KOREA KR - KOREA REPUBLIC K2 - KOREA REPUBLIC2 KW - KUWAIT LV - LATVIA LB - LEBANON LI - LIECHTENSTEIN LT - LITHUANIA LU - LUXEMBOURG MO - MACAU MK - MACEDONIA MY - MALAYSIA MX - MEXICO MC - MONACO MA - MOROCCO NL - NETHERLANDS NZ - NEW ZEALAND NO - NORWAY OM - OMAN PK - PAKISTAN PA - PANAMA PE - PERU PH - PHILIPPINES PL - POLAND PT - PORTUGAL PR - PUERTO RICO QA - QATAR RO - ROMANIA RU - RUSSIA SA - SAUDI ARABIA SG - SINGAPORE SK - SLOVAK REPUBLIC SI - SLOVENIA ZA - SOUTH AFRICA ES - SPAIN SE - SWEDEN CH - SWITZERLAND SY - SYRIA TW - TAIWAN TH - THAILAND TR - TURKEY UA - UKRAINE AE - UNITED ARAB EMIRATES GB - UNITED KINGDOM G1 - UNITED KINGDOM - 5.8GHz US - UNITED STATES UW - UNITED STATES - World U1 - UNITED STATES - DFS UY - URUGUAY VE - VENEZUELA VN - VIETNAM')
oriSystemHwType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2))).clone('indoor')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemHwType.setStatus('current')
if mibBuilder.loadTexts: oriSystemHwType.setDescription('This attribute identifies the type of TMP11 hardware i.e. Indoor or Outdoor.')
oriSystemInvMgmtComponentTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: oriSystemInvMgmtComponentTable.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtComponentTable.setDescription('This table contains the inventory management objects for the system components.')
oriSystemInvMgmtComponentTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSystemInvMgmtTableComponentIndex"))
if mibBuilder.loadTexts: oriSystemInvMgmtComponentTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtComponentTableEntry.setDescription('This object represents an entry in the system inventory management component table.')
oriSystemInvMgmtTableComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentIndex.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentIndex.setDescription('This object represents the table index.')
oriSystemInvMgmtTableComponentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentSerialNumber.setDescription('This object identifies the system component serial number.')
oriSystemInvMgmtTableComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentName.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentName.setDescription('This object identifies the system component name.')
oriSystemInvMgmtTableComponentId = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentId.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentId.setDescription('This object identifies the system component identification.')
oriSystemInvMgmtTableComponentVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentVariant.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentVariant.setDescription('This object identifies the system component variant number.')
oriSystemInvMgmtTableComponentReleaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentReleaseVersion.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentReleaseVersion.setDescription('This object identifies the system component release version number.')
oriSystemInvMgmtTableComponentMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentMajorVersion.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentMajorVersion.setDescription('This object identifies the system component major version number.')
oriSystemInvMgmtTableComponentMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentMinorVersion.setStatus('current')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentMinorVersion.setDescription('This object identifies the system component minor version number.')
oriSystemInvMgmtTableComponentIfTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentIfTable.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentIfTable.setDescription('This table contains the inventory management objects for the system components. This table has been deprecated.')
oriSystemInvMgmtTableComponentIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSystemInvMgmtTableComponentIndex"), (0, "ORiNOCO-MIB", "oriSystemInvMgmtInterfaceTableIndex"))
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentIfTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtTableComponentIfTableEntry.setDescription('This object represents an entry in the system component interface table. This object has been deprecated.')
oriSystemInvMgmtInterfaceTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceTableIndex.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceTableIndex.setDescription('This object identifies the interface table index. This object has been deprecated.')
oriSystemInvMgmtInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceId.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceId.setDescription('This object identifies the system component interface identification. This object has been deprecated.')
oriSystemInvMgmtInterfaceRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("actor", 1), ("supplier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceRole.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceRole.setDescription('This object identifies the system component interface role. This object has been deprecated.')
oriSystemInvMgmtInterfaceVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceVariant.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceVariant.setDescription("This object identifies the system component's interface variant number. This object has been deprecated.")
oriSystemInvMgmtInterfaceBottomNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceBottomNumber.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceBottomNumber.setDescription("This object identifies the system component's interface bottom number. This object has been deprecated.")
oriSystemInvMgmtInterfaceTopNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceTopNumber.setStatus('deprecated')
if mibBuilder.loadTexts: oriSystemInvMgmtInterfaceTopNumber.setDescription("This object identifies the system component's interface top number. This object has been deprecated.")
oriSystemFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19, 1), )
if mibBuilder.loadTexts: oriSystemFeatureTable.setStatus('current')
if mibBuilder.loadTexts: oriSystemFeatureTable.setDescription('This table contains a list of features that the current image supports and indicates if this features is licensed (enabled) or not (disabled). Each row represents a supported and/or licensed feature. Supported indicates if the current image supports the image while Licensed indicates that a license is available to use this feature. Based on the license information in this table, some MIB groups/subgroups/tables will be enabled or disabled.')
oriSystemFeatureTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSystemFeatureTableCode"))
if mibBuilder.loadTexts: oriSystemFeatureTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSystemFeatureTableEntry.setDescription('This object represents an entry in the system feature license table.')
oriSystemFeatureTableCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("bandwidthWiFi", 1), ("bandwidthWDS", 2), ("bandwidthWORPUp", 3), ("bandwidthTurboCell", 4), ("bandwidthADSL", 5), ("bandwidthCable", 6), ("bandwidthPhone", 7), ("maxStationsWiFi", 8), ("maxLinksWDS", 9), ("maxStationsWORP", 10), ("maxStationsTurboCell", 11), ("maxPPPoESessions", 12), ("managementHTTP", 13), ("remoteLinkTest", 14), ("routingStatic", 15), ("routingRIP", 16), ("routingOSPF", 17), ("spanningTreeProtocol", 18), ("linkIntegrity", 19), ("dHCPServer", 20), ("dHCPRelayAgent", 21), ("proxyARP", 22), ("filteringStatic", 23), ("authRADIUS", 24), ("acctRADIUS", 25), ("throttlingRADIUS", 26), ("filterIP", 27), ("ieee802dot1x", 28), ("nse", 29), ("iAPP", 30), ("dNSRedirect", 31), ("aOLNATGateway", 32), ("hereUare", 33), ("spectralink", 34), ("vLANTagging", 35), ("satMaxUsers", 36), ("bandwidthWORPDown", 37), ("disableSecWifiIf", 38), ("initialProductType", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemFeatureTableCode.setStatus('current')
if mibBuilder.loadTexts: oriSystemFeatureTableCode.setDescription('This object identifies the code for the licensed feature and is used as index for this table.')
oriSystemFeatureTableSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemFeatureTableSupported.setStatus('current')
if mibBuilder.loadTexts: oriSystemFeatureTableSupported.setDescription('This object represents the maximum value for the feature as supported by the current image. For boolean features zero means not supported, non-zero value means supported.')
oriSystemFeatureTableLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemFeatureTableLicensed.setStatus('current')
if mibBuilder.loadTexts: oriSystemFeatureTableLicensed.setDescription('This object represents the maximum value for the feature as enforced by the license(s). For boolean features zero means not licensed, non-zero value means licensed.')
oriSystemFeatureTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 19, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSystemFeatureTableDescription.setStatus('current')
if mibBuilder.loadTexts: oriSystemFeatureTableDescription.setDescription('This object represents a textual description for the licensed feature.')
oriSyslogStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogStatus.setStatus('current')
if mibBuilder.loadTexts: oriSyslogStatus.setDescription('This object is used to enable or disable the syslog feature.')
oriSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSyslogPort.setStatus('current')
if mibBuilder.loadTexts: oriSyslogPort.setDescription('This object represents the UDP destination port number for syslog services. The standard syslog port is 514.')
oriSyslogPriority = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogPriority.setStatus('current')
if mibBuilder.loadTexts: oriSyslogPriority.setDescription('This object represents the lowest message priority to be logged by the syslog service.')
oriSyslogHeartbeatStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogHeartbeatStatus.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHeartbeatStatus.setDescription('This object is used to enable or disable logging of heartbeat messages by the syslog service.')
oriSyslogHeartbeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHeartbeatInterval.setDescription('This object is used to configure interval (in seconds) for which heartbeat messages will be logged.')
oriSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 6), )
if mibBuilder.loadTexts: oriSyslogHostTable.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHostTable.setDescription('This table is used to configure syslog hosts.')
oriSyslogHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 6, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSyslogHostTableIndex"))
if mibBuilder.loadTexts: oriSyslogHostTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHostTableEntry.setDescription('This object represents an entry for the syslog host table.')
oriSyslogHostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSyslogHostTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHostTableIndex.setDescription('This object represents an index in the syslog host table.')
oriSyslogHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHostIPAddress.setDescription('This object represents the IP address of the host running the syslog daemon.')
oriSyslogHostComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogHostComment.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHostComment.setDescription('This object represents an optional comment for the syslog host, for example the host name or a reference.')
oriSyslogHostTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 21, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSyslogHostTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriSyslogHostTableEntryStatus.setDescription('This object is used to enable, disable, delete, or create an entry in the syslog host table.')
oriUnitTemp = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriUnitTemp.setStatus('current')
if mibBuilder.loadTexts: oriUnitTemp.setDescription('This object is used for the internal unit temperature in degrees celsius. The range of the temperature is -30 to 60 degrees celsius.')
oriTempLoggingInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTempLoggingInterval.setStatus('current')
if mibBuilder.loadTexts: oriTempLoggingInterval.setDescription('This object is used for logging interval. The valid values are 1,5,10,15,20,25,30,35,40,45,50,55,and 60.')
oriTempLogTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23, 3), )
if mibBuilder.loadTexts: oriTempLogTable.setStatus('current')
if mibBuilder.loadTexts: oriTempLogTable.setDescription('This table contains temperature log information. This is a circular buffer with a limit 576 entries.')
oriTempLogTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriTempLogMessage"))
if mibBuilder.loadTexts: oriTempLogTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriTempLogTableEntry.setDescription('This object represents an entry in the temperature log table.')
oriTempLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23, 3, 1, 1), DisplayString55()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTempLogMessage.setStatus('current')
if mibBuilder.loadTexts: oriTempLogMessage.setDescription('This object is used to store temperature log information. This is also used as the index to the table.')
oriTempLogTableReset = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 1, 23, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTempLogTableReset.setStatus('current')
if mibBuilder.loadTexts: oriTempLogTableReset.setDescription('This object is used for resetting the temperature log table.')
oriWirelessIfPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: oriWirelessIfPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfPropertiesTable.setDescription('This table contains information on the properties and capabilities of the wireless interface(s) present in the device.')
oriWirelessIfPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriWirelessIfPropertiesIndex"))
if mibBuilder.loadTexts: oriWirelessIfPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfPropertiesEntry.setDescription('This object represents the entry in the wireless interface properties table.')
oriWirelessIfPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfPropertiesIndex.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfPropertiesIndex.setDescription('This object represents a unique value for each interface in the system and is used as index to this table.')
oriWirelessIfNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('My Wireless Network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfNetworkName.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfNetworkName.setDescription('This object represents the network name (SSID) for this wireless interface.')
oriWirelessIfMediumReservation = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347)).clone(2347)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfMediumReservation.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfMediumReservation.setDescription('This object represents the medium reservation value. The range for this parameter is 0 - 2347. The medium reservation specifies the number of octects in a frame above which a RTS/CTS handshake is performed. The default value should be 2347, which disables RTS/CTS mode.')
oriWirelessIfInterferenceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfInterferenceRobustness.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfInterferenceRobustness.setDescription('This object enables or disables the interference robustness feature. The default value for this object should be disable.')
oriWirelessIfDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfDTIMPeriod.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfDTIMPeriod.setDescription('This object represents the delivery traffic indication map period. This is the interval between the transmission of multicast frames on the wireless inteface. It is expressed in the Beacon messages. The recommended default value for this object is 1.')
oriWirelessIfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfChannel.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfChannel.setDescription('This object represents the radio frequency channel for this wireless interface. The default value for the channel is based on the regulatory domain.')
oriWirelessIfDistancebetweenAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("large", 1), ("medium", 2), ("small", 3), ("minicell", 4), ("microcell", 5))).clone('large')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfDistancebetweenAPs.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfDistancebetweenAPs.setDescription('This object identifies the distance between access points. The default value for this parameter should be large.')
oriWirelessIfMulticastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfMulticastRate.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfMulticastRate.setDescription('This object is used to configure the multicast rate, but it is dependent on the type of wireless NIC. The value of this object is given in 500 Kbps units. This object can be configured to one of the values defined by the supported multicast rates objects (oriWirelessIfSupportedMulticastRates). For 802.11b Wireless NICs: This object identifies multicast rate of the wireless interface. This is dependent on the distance between APs. When the distance between APs object is set to small, minicell, or microcell the multicast rates can be set to 11 Mbit/s (22 in 500 Kbps units), 5.5 Mbit/s (11), 2 Mbit/s (4), and 1 Mbit/s (2). When this object is set to medium, the allowed rates are 5.5 Mbit/s (11), 2 Mbit/s (4), 1 Mbit/s (2). When this object is set to large, then the multicast rates can be set to 2 Mbits/s (4) or 1 Mbits/s (2). The default value for this object should be 2 Mbits/sec (4). For 802.11a, g, and a/g Wireless NICs: This object is used to set the multicast rate for beacons, frames used for protection mechanism (CTS), and other multicast and broadcast frames.')
oriWirelessIfClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfClosedSystem.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfClosedSystem.setDescription("This object is used as a flag which identifies whether the device will accept association requests to this interface, for client stations configured with a network name of 'ANY'. When this object is disabled, it will accept association requests from client stations with a network name of 'ANY'. If this object is set to enable then the interface will only accept association requests that match the interface's network name (SSID). The default value for this object should be disable.")
oriWirelessIfAllowedSupportedDataRates = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfAllowedSupportedDataRates.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfAllowedSupportedDataRates.setDescription('This object reflects the transmit rates supported by the wireless interface. The values of this object are given in units of 500 kbps. Examples for supported data rates: - 802.11b PHY (DSSS - 2.4 GHz) - 0 = Auto Fallback - 2 = 1 Mbps - 4 = 2 Mbps - 11 = 5.5 Mbps - 22 = 11 Mbps - 802.11a PHY (OFDM - 5 GHz) - 0 = Auto Fallback - 12 = 6 Mbps - 18 = 9 Mbps - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 108 = 54 Mbps - 802.11a PHY (OFDM - 5 GHz) with Turbo Mode Enabled - 0 = Auto Fallback - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 144 = 72 Mbps - 192 = 96 Mbps - 216 = 108 Mbps - 802.11g PHY (ERP) in 802.11g only mode - 0 = Auto Fallback - 12 = 6 Mbps - 18 = 9 Mbps - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 108 = 54 Mbps - 802.11g PHY (ERP) in 802.11b/g mode - 0 = Auto Fallback - 2 = 1 Mbps - 4 = 2 Mbps - 11 = 5.5 Mbps - 12 = 6 Mbps - 18 = 9 Mbps - 22 = 11 Mbps - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 108 = 54 Mbps')
oriWirelessIfRegulatoryDomainList = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfRegulatoryDomainList.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfRegulatoryDomainList.setDescription('This object specifies a single regulatory domain (not a list) which is supported by the wireless interface.')
oriWirelessIfAllowedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfAllowedChannels.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfAllowedChannels.setDescription('This object reflects the radio frequency channels that the interface supports.')
oriWirelessIfMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 13), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfMACAddress.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfMACAddress.setDescription('This object represents the MAC address of the wireless interface present in the device. This object has been deprecated.')
oriWirelessIfLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfLoadBalancing.setDescription('This object is used to configure the load balancing feature for the wireless interface.')
oriWirelessIfMediumDensityDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfMediumDensityDistribution.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfMediumDensityDistribution.setDescription('This object is used to configure the medium density distribution feature for the wireless interface.')
oriWirelessIfTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfTxRate.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfTxRate.setDescription('This object is used to configure the transmit rate for unicast traffic for the wireless interface. This object is dependent on the transmit rates supported by the wireless interface (refer to MIB object - oriWirelessIfAllowedSupportedDataRates and dot11PHYType). The values of this object are given in units of 500 kbps. A value of zero (0) is interpreted as auto fallback. Examples for configuring this object: - 802.11b PHY (DSSS - 2.4 GHz) - 0 = Auto Fallback - 2 = 1 Mbps - 4 = 2 Mbps - 11 = 5.5 Mbps - 22 = 11 Mbps - 802.11a PHY (OFDM - 5 GHz) - 0 = Auto Fallback - 12 = 6 Mbps - 18 = 9 Mbps - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 108 = 54 Mbps - 802.11a PHY (OFDM - 5 GHz) with Turbo Mode Enabled - 0 = Auto Fallback - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 144 = 72 Mbps - 192 = 96 Mbps - 216 = 108 Mbps - 802.11g PHY (ERP) in 802.11g only mode - 0 = Auto Fallback - 12 = 6 Mbps - 18 = 9 Mbps - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 108 = 54 Mbps - 802.11g PHY (ERP) in 802.11b/g mode - 0 = Auto Fallback - 2 = 1 Mbps - 4 = 2 Mbps - 11 = 5.5 Mbps - 12 = 6 Mbps - 18 = 9 Mbps - 22 = 11 Mbps - 24 = 12 Mbps - 36 = 18 Mbps - 48 = 24 Mbps - 72 = 36 Mbps - 96 = 48 Mbps - 108 = 54 Mbps The default value for this object should be zero (0) auto fallback.')
oriWirelessIfAutoChannelSelectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfAutoChannelSelectStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfAutoChannelSelectStatus.setDescription('This object is used to configure the automatic frequency channel feature for the wireless interface. If this object is enabled, the frequency channel object can not be set, but the frequency channel selected will be given in that object. The default value for this object should be enable.')
oriWirelessIfBandwidthLimitIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 18), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfBandwidthLimitIn.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfBandwidthLimitIn.setDescription('This object represents the input bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration or by a license. A written value will only take effect after reboot.')
oriWirelessIfBandwidthLimitOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 19), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfBandwidthLimitOut.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfBandwidthLimitOut.setDescription('This object represents the output bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration or by a license. A written value will only take effect after reboot.')
oriWirelessIfTurboModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 20), ObjStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfTurboModeStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfTurboModeStatus.setDescription('This object is used to enable or disable turbo mode support. Turbo mode is only supported for 802.11a PHY (OFDM - 5 GHz) and 802.11g (ERP - 2.4 GHz) wireless NICs and can only be enabled when super mode is enabled. When Turbo mode is enabled the data rates will be doubled (refer to oriWirelessIfAllowedSupportedDataRates object description).')
oriWirelessIfSupportedOperationalModes = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSupportedOperationalModes.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSupportedOperationalModes.setDescription('This object provides information on the wireless operational modes supported by the NIC. Depending on the wireless NIC in the device different wireless operational modes can be configured. The possible supported modes can be: - 802.11b only - 802.11g only - 802.11b/g - 802.11a only - 802.11g-wifi')
oriWirelessIfOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dot11b-only", 1), ("dot11g-only", 2), ("dot11bg", 3), ("dot11a-only", 4), ("dot11g-wifi", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfOperationalMode.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfOperationalMode.setDescription('This object is used to set the wireless NIC Operational mode. Depending on the wireless NIC in the device different wireless operational modes can be configured. The supported modes are: - 802.11b only - 802.11g only - 802.11b/g - 802.11a only - 802.11g-wifi')
oriWirelessIfPreambleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfPreambleType.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfPreambleType.setDescription('This object identifies the wireless interface preamble type based on the wireless operational mode configured.')
oriWirelessIfProtectionMechanismStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 24), ObjStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfProtectionMechanismStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfProtectionMechanismStatus.setDescription('This object indicates if protection mechanism is enabled or not based on the wireless operational mode configured.')
oriWirelessIfSupportedMulticastRates = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSupportedMulticastRates.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSupportedMulticastRates.setDescription('This object represents the multicast rates supported by the wireless NIC and the operational mode configured.')
oriWirelessIfCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfCapabilities.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfCapabilities.setDescription('This object provides information on the wireless capabilities and features supported by the wireless NIC. Each bit in this object defines a capability/feature supported by the wireless NIC. If the bit is set, the capability/feature is supported, otherwise it is not. The following list provides a definition of the bits in this object: b0 - Distance Between APs b1 - Multicast Rate b2 - Closed System b3 - Load Balancing b4 - Medium Density Distribution b5 - Auto Channel Select b6 - Turbo Mode b7 - Interference Robustness b8 - Wireless Distribution System (WDS) b9 - Transmit Power Control (TPC) b10 - Multiple SSIDs b11 - SpectraLink VoIP b12 - Remote Link Test b13 to b255 - Reserved')
oriWirelessIfLBTxTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfLBTxTimeThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfLBTxTimeThreshold.setDescription("Maximum allowed Tx processing time, in mS, where Tx processing time is measured from time a packet enters AP from the DS to the time it successfully leaves the AP's Radio.")
oriWirelessIfLBAdjAPTimeDiffThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfLBAdjAPTimeDiffThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfLBAdjAPTimeDiffThreshold.setDescription("Maximum allowed difference in mS between adjacent AP's Tx processing time.")
oriWirelessIfACSFrequencyBandScan = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfACSFrequencyBandScan.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfACSFrequencyBandScan.setDescription('This object is used to configure the frequency bands that the auto channel select algorithm will scan through. Each bit in this object represents a band or subset of channels in the 5 GHz or 2.4 GHz space. The value of this object is interpreted as a bitfield, where the value of 1 means enable ACS scan for that band. The following list provides a definition of the bits in this object: b0 - U-NII Lower Band = 5.15 - 5.25 GHz (36, 40, 44, 48) b1 - U-NII Middle Band = 5.25 - 5.35 GHz (52, 56, 60, 64) b2 - U-NII Upper Band = 5.725 - 5.825 GHz (149, 153, 157, 161) b3 - H Band = 5.50 - 5.700 GHz (100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140) b4 - 5 GHz ISM Band = 5.825 GHz (165) b5 to b255 - Reserved')
oriWirelessIfSecurityPerSSIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 30), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfSecurityPerSSIDStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSecurityPerSSIDStatus.setDescription('This object is used to enable or disable the security per SSID feature. Once this object is enabled, the administrator should use the Wireless Interface SSID table (oriWirelessIfSSIDTable to configure the security related management objects.')
oriWirelessIfDFSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 31), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfDFSStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfDFSStatus.setDescription('This object is used to enable/disable dynamic frequency selection. This functionality is dependent on the regulatory domain of the wireless NIC.')
oriWirelessIfAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("controllable", 3), ("disabled", 4))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfAntenna.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfAntenna.setDescription('This object is used to configure the antenna. The administrator can select controllable, external, internal, or disable the antenna.')
oriWirelessIfTPCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ValueRangeConstraint(6, 6), ValueRangeConstraint(9, 9), ValueRangeConstraint(12, 12), ValueRangeConstraint(15, 15), ValueRangeConstraint(18, 18), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfTPCMode.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfTPCMode.setDescription('This object is used to configure the transmit power control of the wireless NIC. The transmit power is defined in dBm and can be configured in increments 3 dBms.')
oriWirelessIfSuperModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 34), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfSuperModeStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSuperModeStatus.setDescription('This object is used to enable/disable super mode support. Super Mode increases the overall throughput of the wireless interface by implementing fast frame, bursting, and compression. When super mode is enabled, the channels that can be used in the 2.4 GHz and 5.0 GHz spectrum are limited (refer to oriWirelessIfAllowedChannels for the allowed channels). The super mode feature is only supported for 802.11a (OFDM - 5 GHz) and 802.11g (ERP - 2.4 GHz) wireless NICs.')
oriWirelessIfWSSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfWSSStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfWSSStatus.setDescription('This object is used for the Wireless System Shutdown feature. This feature allows an administrator to shut down wireless services to clients. When this object is set to down wireless client services will be shutdown/disabled, but WDS links will still remain up.')
oriWirelessIfSupportedAuthenticationModes = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSupportedAuthenticationModes.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSupportedAuthenticationModes.setDescription('This object is used to provide information on the authentication modes supported by the wireless interface. The possible authentication modes are: - none: no authentication mode - dot1x: 802.1x authentication mode - psk: psk authentication mode')
oriWirelessIfSupportedCipherModes = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSupportedCipherModes.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSupportedCipherModes.setDescription('This object is used to provide information on the cipher modes/types supported by the wireless interface. The possible cipher modes/types are: - none: no cipher/encryption mode - wep: wep encryption mode - tkip: tkip encryption mode - aes: aes encryption mode')
oriWirelessIfQoSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 38), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfQoSStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfQoSStatus.setDescription('This object is used to enable/disable Quality of Service (QoS) on the wireless interface.')
oriWirelessIfQoSMaxMediumThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfQoSMaxMediumThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfQoSMaxMediumThreshold.setDescription('This object is used to specify the QoS admission control maximum medium threshold. The maximum medium threshold will apply to all access categories and is given in a percentage of the medium.')
oriWirelessIfAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfAntennaGain.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfAntennaGain.setDescription('This object represents Antenna Gain value (including cable loss) that will be added to the radar detetection parameters.')
oriWirelessIfSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2), )
if mibBuilder.loadTexts: oriWirelessIfSecurityTable.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSecurityTable.setDescription('This table contains information on the security management objects for the wireless interface(s) present in the device.')
oriWirelessIfSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriWirelessIfSecurityIndex"))
if mibBuilder.loadTexts: oriWirelessIfSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSecurityEntry.setDescription('This object represents an entry in the wireless interface security table.')
oriWirelessIfSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSecurityIndex.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSecurityIndex.setDescription('This object represents a unique value for each interface in the system and is used as index to this table.')
oriWirelessIfEncryptionOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("rcFour128", 3), ("aes", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionOptions.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfEncryptionOptions.setDescription("This object sets the wireless interface's security capabilities (such as WEP and other standard and proprietary security features). AES encryption is only for 802.11a and supports only OCB mode integrity check.")
oriWirelessIfEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionStatus.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfEncryptionStatus.setDescription('This object is used to enable or disable WEP encryption for the wireless interface.')
oriWirelessIfEncryptionKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey1.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey1.setDescription('This object represents Encryption Key 1. This object should be treated as write-only and returned as asterisks.')
oriWirelessIfEncryptionKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey2.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey2.setDescription('This object represents Encryption Key 2. This object should be treated as write-only and returned as asterisks.')
oriWirelessIfEncryptionKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey3.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey3.setDescription('This object represents Encryption Key 3. This object should be treated as write-only and returned as asterisks.')
oriWirelessIfEncryptionKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey4.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfEncryptionKey4.setDescription('This object represents Encryption Key 4. This object should be treated as write-only and returned as asterisks.')
oriWirelessIfEncryptionTxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfEncryptionTxKey.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfEncryptionTxKey.setDescription('This object indicates which encryption key is used to encrypt data that is sent via the wireless interfaces. When this object is configured to 0, then Encryption Key 1 will be used. When this object is configured to 1, then Encryption Key 2 will be used. When this object is configured to 2, then Encryption Key 3 will be used. When this object is configured to 3, then Encryption Key 4 will be used. The default value for this object should be key 0.')
oriWirelessIfDenyNonEncryptedData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfDenyNonEncryptedData.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfDenyNonEncryptedData.setDescription('This parameter indicates if this interface will accept or deny non-encrypted data. The default value for this parameters is disabled.')
oriWirelessIfProfileCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfProfileCode.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfProfileCode.setDescription('The object represents the profile code of the wirelesss interface. This information is comprised of a vendor indication and a capability indication (example: bronze or gold card).')
oriWirelessIfSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3), )
if mibBuilder.loadTexts: oriWirelessIfSSIDTable.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTable.setDescription('This table is used to configure the SSIDs for the wireless interface in the device.')
oriWirelessIfSSIDTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ORiNOCO-MIB", "oriWirelessIfSSIDTableIndex"))
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEntry.setDescription('This object represents an entry in the respective table. In this case each table entry represents a VLAN ID.')
oriWirelessIfSSIDTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableIndex.setDescription('This object represents the index to the SSID Table.')
oriWirelessIfSSIDTableSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSSID.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSSID.setDescription('This object represents the wireless card SSID string (wireless network name).')
oriWirelessIfSSIDTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 3), VlanId().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableVLANID.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableVLANID.setDescription('This object represents the VLAN Identifier (ID).')
oriWirelessIfSSIDTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableStatus.setDescription('This object represents the wireless SSID table row/entry status.')
oriWirelessIfSSIDTableSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("dot1x", 2), ("mixed", 3), ("wpa", 4), ("wpa-psk", 5), ("wep", 6))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSecurityMode.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSecurityMode.setDescription('This object is used to configure the security mode for this table entry (SSID). This object is deprecated.')
oriWirelessIfSSIDTableBroadcastSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 6), ObjStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableBroadcastSSID.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableBroadcastSSID.setDescription('This object is used to enable/disable a broadcast SSID in the SSID table. A single entry in the SSID table can be enabled to broadcast SSID in beacon messages.')
oriWirelessIfSSIDTableClosedSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 7), ObjStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableClosedSystem.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableClosedSystem.setDescription('This object is used to enable/disable the closed system feature for this table entry (SSID).')
oriWirelessIfSSIDTableSupportedSecurityModes = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSupportedSecurityModes.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSupportedSecurityModes.setDescription('This object is used to provide information on the supported security modes by the wireless interface(s). The possible security modes can be: - None: no security mode enabled. - dot1x: 802.1x authentication enabled. - mixed: mixed WEP and 802.1x. - wpa: WiFi Protected Access enabled. - wpa-psk: WiFi Protected Access with Preshared Keys enabled. - wep: WEP Encryption enabled (no authentication) This object is deprecated.')
oriWirelessIfSSIDTableEncryptionKey0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 9), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey0.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey0.setDescription('This object represents Encryption Key 0. This object should be treated as write-only and returned as asterisks. This object is deprecated.')
oriWirelessIfSSIDTableEncryptionKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 10), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey1.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey1.setDescription('This object represents Encryption Key 1. This object should be treated as write-only and returned as asterisks. This object is deprecated.')
oriWirelessIfSSIDTableEncryptionKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 11), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey2.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey2.setDescription('This object represents Encryption Key 2. This object should be treated as write-only and returned as asterisks. This object is deprecated.')
oriWirelessIfSSIDTableEncryptionKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 12), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey3.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKey3.setDescription('This object represents Encryption Key 3. This object should be treated as write-only and returned as asterisks. This object is deprecated.')
oriWirelessIfSSIDTableEncryptionTxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionTxKey.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionTxKey.setDescription('This object indicates which encryption key is used to encrypt data that is sent via the wireless interfaces. The default value for this object should be key 0. This object is deprecated.')
oriWirelessIfSSIDTableEncryptionKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sixtyFourBits", 1), ("oneHundredTwentyEightBits", 2), ("oneHundredFiftyTwoBits", 3))).clone('sixtyFourBits')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKeyLength.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableEncryptionKeyLength.setDescription('This object represents the encryption key length, the supported key lengths are 64 bits (40 + 24 for IV), 128 bits (104 + 24 for IV), and 152 bits (128 + 24 for IV). This object is deprecated.')
oriWirelessIfSSIDTableRekeyingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 65535), )).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRekeyingInterval.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRekeyingInterval.setDescription('This object represents the encryption rekeying interval. if this object is configured to zero (0) rekeying is disabled. The units of this object is seconds.')
oriWirelessIfSSIDTablePSKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTablePSKValue.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTablePSKValue.setDescription('The Pre-Shared Key (PSK) for when RSN in PSK mode is the selected authentication suite. In that case, the PMK will obtain its value from this object. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero. This object is deprecated.')
oriWirelessIfSSIDTablePSKPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTablePSKPassPhrase.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTablePSKPassPhrase.setDescription('The PSK, for when RSN in PSK mode is the selected authentication suite, is configured by oriWirelessIfSSIDTablePSKValue. An alternative manner of setting the PSK uses the password-to-key algorithm defined in the standard. This variable provides a means to enter a pass phrase. When this object is written, the RSN entity shall use the password-to-key algorithm specified in the standard to derive a pre-shared and populate oriWirelessIfSSIDTablePSKValue with this key. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero. This object is deprecated.')
oriWirelessIfSSIDTableDenyNonEncryptedData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 18), ObjStatus().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableDenyNonEncryptedData.setStatus('deprecated')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableDenyNonEncryptedData.setDescription('This object is used to enable/disable deny non encrypted data. This function is only supported when the security mode is configured to WEP or Mixed Mode; it is not supported for 802.1x, WPA, and WPA-PSK security modes. This object is deprecated.')
oriWirelessIfSSIDTableSSIDAuthorizationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 19), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSSIDAuthorizationStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSSIDAuthorizationStatus.setDescription('This object is used to enable or disable SSID Authorization.')
oriWirelessIfSSIDTableMACAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 20), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableMACAccessControl.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableMACAccessControl.setDescription('This object is used to enable or disable MAC Access Control feature/filter for this SSID.')
oriWirelessIfSSIDTableRADIUSMACAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 21), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSMACAccessControl.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSMACAccessControl.setDescription('This object is used to enables RADIUS Access Control based on wireless stations MAC Address.')
oriWirelessIfSSIDTableSecurityProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSecurityProfile.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableSecurityProfile.setDescription('This object is used to configure the security profile that will be used for this SSID. The security profile is defined in the Security Profile Table in the orinocoSecurity group.')
oriWirelessIfSSIDTableRADIUSDot1xProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 23), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSDot1xProfile.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSDot1xProfile.setDescription('This object is used to configure the RADIUS server profile that will be used for 802.1x authentication for this SSID. The RADIUS profile is defined in the RADIUS Server Table in the orinocoRADIUSSvrProfile group.')
oriWirelessIfSSIDTableRADIUSMACAuthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 24), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSMACAuthProfile.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSMACAuthProfile.setDescription('This object is used to configure the RADIUS server profile that will be used for MAC based RADIUS authentication for this SSID. The RADIUS profile is defined in the RADIUS Server Table in the orinocoRADIUSSvrProfile group.')
oriWirelessIfSSIDTableRADIUSAccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 25), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSAccountingStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSAccountingStatus.setDescription('This object is used to enable or disable the RADIUS Accounting service per SSID.')
oriWirelessIfSSIDTableRADIUSAccountingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSAccountingProfile.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableRADIUSAccountingProfile.setDescription('This object is used to configure the RADIUS server profile that will be used for Accounting for this SSID. The RADIUS profile is defined in the RADIUS Server Table in the orinocoRADIUSSvrProfile group.')
oriWirelessIfSSIDTableQoSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 3, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriWirelessIfSSIDTableQoSPolicy.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfSSIDTableQoSPolicy.setDescription('This object is used to configure the QoS policy that will be used for this SSID. The QoS profile is defined in the QoS Policy Table in the orinocoQoS group.')
oriWirelessIfTxPowerControl = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 1, 4), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfTxPowerControl.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfTxPowerControl.setDescription('This object is used to enable or disable Transmit (Tx) Power Control feature.')
oriEthernetIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2, 1), )
if mibBuilder.loadTexts: oriEthernetIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: oriEthernetIfConfigTable.setDescription('This table is used to configure the ethernet interface(s) for the device.')
oriEthernetIfConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriEthernetIfConfigTableIndex"))
if mibBuilder.loadTexts: oriEthernetIfConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriEthernetIfConfigTableEntry.setDescription('This object represents an entry in the ethernet interface configuration table.')
oriEthernetIfConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriEthernetIfConfigTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriEthernetIfConfigTableIndex.setDescription('This object represents the index of the ethernet configuraiton table.')
oriEthernetIfConfigSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tenMegabitPerSecHalfDuplex", 1), ("tenMegabitPerSecFullDuplex", 2), ("tenMegabitPerSecAutoDuplex", 3), ("onehundredMegabitPerSecHalfDuplex", 4), ("onehundredMegabitPerSecFullDuplex", 5), ("autoSpeedHalfDuplex", 6), ("autoSpeedAutoDuplex", 7), ("onehundredMegabitPerSecAutoDuplex", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriEthernetIfConfigSettings.setStatus('current')
if mibBuilder.loadTexts: oriEthernetIfConfigSettings.setDescription("This object is used to configure the Ethernet interface's speed. Some devices support all the configuration options listed above, while others support only a subset of the configuration options.")
oriEthernetIfConfigBandwidthLimitIn = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2, 1, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriEthernetIfConfigBandwidthLimitIn.setStatus('current')
if mibBuilder.loadTexts: oriEthernetIfConfigBandwidthLimitIn.setDescription('This object represents the input bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration, or by a license. A written value will only take effect after reboot.')
oriEthernetIfConfigBandwidthLimitOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 2, 1, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriEthernetIfConfigBandwidthLimitOut.setStatus('current')
if mibBuilder.loadTexts: oriEthernetIfConfigBandwidthLimitOut.setDescription('This object represents the output bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration, or by a license. A written value will only take effect after reboot.')
oriIfWANInterfaceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIfWANInterfaceMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriIfWANInterfaceMACAddress.setDescription('This object represents the MAC address of the WAN interface.')
oriWORPIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: oriWORPIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTable.setDescription('This table is used to configure the mode, time-outs, and protocol objects for wireless interface(s) that are configured to run WORP.')
oriWORPIfConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriWORPIfConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableEntry.setDescription('This object represents an entry in the WORP Interface Configuration Table.')
oriWORPIfConfigTableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("ap", 2), ("base", 3), ("satellite", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableMode.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableMode.setDescription('The running mode of this interface: - If set to disabled, the interface is disabled. - If set to AP, the interface will run in standard IEEE802.11 mode. - If set to Base, the interface will be a WORP master interface and be able to connect to multiple WORP satellites. - If set to Satellite, the interface will be a WORP slave interface.')
oriWORPIfConfigTableBaseStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableBaseStationName.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableBaseStationName.setDescription('The name of the base station. For a base this name will default to the MIB-II sysName; for a satellite to empty (if not registered to any base) or the name it is registered to. When a name is set for a satellite, the satellite will only register on a base with this name.')
oriWORPIfConfigTableMaxSatellites = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableMaxSatellites.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableMaxSatellites.setDescription('The maximum of remotes allowed on this interface. Please note that this value will also be limited by the image and the license.')
oriWORPIfConfigTableRegistrationTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableRegistrationTimeout.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableRegistrationTimeout.setDescription('This object represents the Timeout of regristration and authentication, configurable between 1sec and 10sec.')
oriWORPIfConfigTableRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableRetries.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableRetries.setDescription('The number of times a data message will be retransmitted, configurable between 0 and 10. The value 0 allows unreliable operation for streaming applications.')
oriWORPIfConfigTableNetworkSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableNetworkSecret.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableNetworkSecret.setDescription('The NetworkSecret is a string that must be the same for all stations in a certain network. If a station has another secret configured as the base, the base will not allow the station to register. This object should be treated as write-only and returned as asterisks.')
oriWORPIfConfigTableNoSleepMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 1, 1, 7), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfConfigTableNoSleepMode.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfConfigTableNoSleepMode.setDescription('This object is used to enable or disable sleep mode. If this object is enabled, a subscriber unit will not go into sleep mode when they have no data to send.')
oriWORPIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: oriWORPIfStatTable.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTable.setDescription('This table is used to monitor the statistics of interfaces that run WORP.')
oriWORPIfStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriWORPIfStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableEntry.setDescription('This object represents an entry in the WORP Interface Statistics Table.')
oriWORPIfStatTableRemotePartners = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRemotePartners.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRemotePartners.setDescription('The number of remote partners. For a satellite, this parameter will always be zero or one.')
oriWORPIfStatTableAverageLocalSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableAverageLocalSignal.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableAverageLocalSignal.setDescription('The current signal level calculated over all inbound packets. This variable indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfStatTableAverageLocalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableAverageLocalNoise.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableAverageLocalNoise.setDescription('The current noise level calculated over all inbound packets. This variable indicates the running average of the local noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfStatTableAverageRemoteSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableAverageRemoteSignal.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableAverageRemoteSignal.setDescription('The current remote signal level calculated over the inbound packets send by this station. This variable indicates the running average over all registered stations of the remote signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfStatTableAverageRemoteNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableAverageRemoteNoise.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableAverageRemoteNoise.setDescription('The current average remote noise level calculated over the inbound packets send by this station. This variable indicates the running average over all registered stations of the remote noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfStatTableBaseStationAnnounces = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableBaseStationAnnounces.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableBaseStationAnnounces.setDescription('The number of Base Station Announces Broadcasts (BSAB) sent (base) or received (satellite) on this interface.')
oriWORPIfStatTableRegistrationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationRequests.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationRequests.setDescription('The number of Registration Requests (RREQ) sent (satellite) or received (base) on this interface.')
oriWORPIfStatTableRegistrationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationRejects.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationRejects.setDescription('The number of Registration Rejects (RREJ) sent (base) or received (satellite) on this interface.')
oriWORPIfStatTableAuthenticationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableAuthenticationRequests.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableAuthenticationRequests.setDescription('The number of Authentication Requests (AREQ) sent (satellite) or received (base) on this interface.')
oriWORPIfStatTableAuthenticationConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableAuthenticationConfirms.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableAuthenticationConfirms.setDescription('The number of Authentication Confirms (ACFM) sent (base) or received (satellite) on this interface.')
oriWORPIfStatTableRegistrationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationAttempts.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationAttempts.setDescription('The number of times a Registration Attempt has been initiated.')
oriWORPIfStatTableRegistrationIncompletes = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationIncompletes.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationIncompletes.setDescription('The number of registration attempts that is not completed yet. For a satellite this parameters will always be zero or one.')
oriWORPIfStatTableRegistrationTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationTimeouts.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationTimeouts.setDescription('The number of times the registration procedure timed out.')
oriWORPIfStatTableRegistrationLastReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("noMoreAllowed", 2), ("incorrectParameter", 3), ("roaming", 4), ("timeout", 5), ("lowQuality", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationLastReason.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRegistrationLastReason.setDescription('The reason for why the last registration was aborted or failed.')
oriWORPIfStatTablePollData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTablePollData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTablePollData.setDescription('The number of polls with data sent (base) or received (satellite).')
oriWORPIfStatTablePollNoData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTablePollNoData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTablePollNoData.setDescription('The number of polls with no data sent (base) or received (satellite).')
oriWORPIfStatTableReplyData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableReplyData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableReplyData.setDescription('The number of poll replies with data sent (satellite) or received (base). This counter does not include replies with the MoreData flag set (see ReplyMoreData).')
oriWORPIfStatTableReplyMoreData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableReplyMoreData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableReplyMoreData.setDescription('The number of poll replies with data sent (satellite) or received (base) with the MoreData flag set (see also ReplyData).')
oriWORPIfStatTableReplyNoData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableReplyNoData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableReplyNoData.setDescription('The number of poll replies with no data sent (satellite) or received (base).')
oriWORPIfStatTableRequestForService = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableRequestForService.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableRequestForService.setDescription('The number of requests for service sent (satellite) or received (base).')
oriWORPIfStatTableSendSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableSendSuccess.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableSendSuccess.setDescription('The number of data packets sent that were acknowledged and did not need a retransmit.')
oriWORPIfStatTableSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableSendRetries.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableSendRetries.setDescription('The number of data packets sent that needed retransmition but were finally received succesfully by the remote partner.')
oriWORPIfStatTableSendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableSendFailures.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableSendFailures.setDescription('The number of data packets sent that were (finally) not received succesfully by the remote partner.')
oriWORPIfStatTableReceiveSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableReceiveSuccess.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableReceiveSuccess.setDescription('The number of data packets received that were acknowledged and did not need a retransmit of the remote partner.')
oriWORPIfStatTableReceiveRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableReceiveRetries.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableReceiveRetries.setDescription('The number of data packets received that needed retransmition by the remote partner but were finally received succesfully.')
oriWORPIfStatTableReceiveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTableReceiveFailures.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTableReceiveFailures.setDescription('The number of data packets that were (finally) not received succesfully.')
oriWORPIfStatTablePollNoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfStatTablePollNoReplies.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfStatTablePollNoReplies.setDescription('The number of times a poll was sent but no reply was received. This object only applies to the base.')
oriWORPIfSatConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigStatus.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigStatus.setDescription('This object is used to enable or disable the per-satellite config from the base device.')
oriWORPIfSatConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2), )
if mibBuilder.loadTexts: oriWORPIfSatConfigTable.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTable.setDescription('This table contains wireless stations statistics.')
oriWORPIfSatConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriWORPIfSatConfigTableIndex"))
if mibBuilder.loadTexts: oriWORPIfSatConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableEntry.setDescription('This object represents an entry in the WORP Interface Satellite Statistics Table.')
oriWORPIfSatConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableIndex.setDescription('This object is used to index the protocol filter table.')
oriWORPIfSatConfigTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableEntryStatus.setDescription('This object is used to enable, disable, delete, create the Ethernet protocols in this table.')
oriWORPIfSatConfigTableMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMacAddress.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMacAddress.setDescription('This object represents the MAC address of the satellite for which the statistics are gathered.')
oriWORPIfSatConfigTableMinimumBandwidthLimitDownlink = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMinimumBandwidthLimitDownlink.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMinimumBandwidthLimitDownlink.setDescription('This object represents the minimum input bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration or by a license. A written value will only take effect after reboot.')
oriWORPIfSatConfigTableMaximumBandwidthLimitDownlink = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMaximumBandwidthLimitDownlink.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMaximumBandwidthLimitDownlink.setDescription('This object represents the maximum input bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration or by a license. A written value will only take effect after reboot.')
oriWORPIfSatConfigTableMinimumBandwidthLimitUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMinimumBandwidthLimitUplink.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMinimumBandwidthLimitUplink.setDescription('This object represents the minimum output bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration or by a license. A written value will only take effect after reboot.')
oriWORPIfSatConfigTableMaximumBandwidthLimitUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMaximumBandwidthLimitUplink.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableMaximumBandwidthLimitUplink.setDescription('This object represents the maximum output bandwidth limit of the interface in increments of 64 kbps. The value can be limited by a previous written value, the negotiation process during registration or by a license. A written value will only take effect after reboot.')
oriWORPIfSatConfigTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSatConfigTableComment.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatConfigTableComment.setDescription('This object is used for an optional comment associated to the per Satellite config Table entry.')
oriWORPIfSatStatTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1), )
if mibBuilder.loadTexts: oriWORPIfSatStatTable.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTable.setDescription('This table contains wireless stations statistics.')
oriWORPIfSatStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriStationStatTableIndex"))
if mibBuilder.loadTexts: oriWORPIfSatStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableEntry.setDescription('This object represents an entry in the WORP Interface Satellite Statistics Table.')
oriWORPIfSatStatTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableIndex.setDescription('This object represents the table index for SatStat Table.')
oriWORPIfSatStatTableMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableMacAddress.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableMacAddress.setDescription('This object represents the MAC address of the satellite for which the statistics are gathered.')
oriWORPIfSatStatTableAverageLocalSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageLocalSignal.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageLocalSignal.setDescription('The current signal level calculated over all inbound packets. This variable indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfSatStatTableAverageLocalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageLocalNoise.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageLocalNoise.setDescription('The current noise level calculated over all inbound packets. This variable indicates the running average of the local noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfSatStatTableAverageRemoteSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageRemoteSignal.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageRemoteSignal.setDescription('The current remote signal level calculated over the inbound packets send by this station. This variable indicates the running average over all registered stations of the remote signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfSatStatTableAverageRemoteNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageRemoteNoise.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableAverageRemoteNoise.setDescription('The current average remote noise level calculated over the inbound packets send by this station. This variable indicates the running average over all registered stations of the remote noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfSatStatTablePollData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTablePollData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTablePollData.setDescription('The number of polls with data sent (base) or received (satellite).')
oriWORPIfSatStatTablePollNoData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTablePollNoData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTablePollNoData.setDescription('The number of polls with no data sent (base) or received (satellite).')
oriWORPIfSatStatTableReplyData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableReplyData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableReplyData.setDescription('The number of poll replies with data sent (satellite) or received (base). This counter does not include replies with the MoreData flag set (see ReplyMoreData).')
oriWORPIfSatStatTableReplyNoData = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableReplyNoData.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableReplyNoData.setDescription('The number of poll replies with no data sent (satellite) or received (base).')
oriWORPIfSatStatTableRequestForService = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableRequestForService.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableRequestForService.setDescription('The number of requests for service sent (satellite) or received (base).')
oriWORPIfSatStatTableSendSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableSendSuccess.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableSendSuccess.setDescription('The number of data packets sent that were acknowledged and did not need a retransmit.')
oriWORPIfSatStatTableSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableSendRetries.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableSendRetries.setDescription('The number of data packets sent that needed retransmition but were finally received succesfully by the remote partner.')
oriWORPIfSatStatTableSendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableSendFailures.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableSendFailures.setDescription('The number of data packets sent that were (finally) not received succesfully by the remote partner.')
oriWORPIfSatStatTableReceiveSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableReceiveSuccess.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableReceiveSuccess.setDescription('The number of data packets received that were acknowledged and did not need a retransmit of the remote partner.')
oriWORPIfSatStatTableReceiveRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableReceiveRetries.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableReceiveRetries.setDescription('The number of data packets received that needed retransmition by the remote partner but were finally received succesfully.')
oriWORPIfSatStatTableReceiveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableReceiveFailures.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableReceiveFailures.setDescription('The number of data packets that were (finally) not received succesfully.')
oriWORPIfSatStatTablePollNoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTablePollNoReplies.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTablePollNoReplies.setDescription('The number of times a poll was sent but no reply was received. This object only applies to the base.')
oriWORPIfSatStatTableLocalTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableLocalTxRate.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableLocalTxRate.setDescription('This object represents the Transmit Data Rate of the BSU.')
oriWORPIfSatStatTableRemoteTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 3, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSatStatTableRemoteTxRate.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSatStatTableRemoteTxRate.setDescription('This object represents the Transmit Data Rate of the SU which is registered to this SU.')
oriWORPIfSiteSurveyOperation = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("test", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyOperation.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyOperation.setDescription('This object is used to enable or disable the site survey mode. The site survey is going to show user the wireless signal level, noise level and SNR value.')
oriWORPIfSiteSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2), )
if mibBuilder.loadTexts: oriWORPIfSiteSurveyTable.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyTable.setDescription('This table contains the information for the stations currently associated with the access point.')
oriWORPIfSiteSurveySignalQualityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriWORPIfSiteSurveyTableIndex"))
if mibBuilder.loadTexts: oriWORPIfSiteSurveySignalQualityTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveySignalQualityTableEntry.setDescription('This object represents the entry in the Remote Link Test table.')
oriWORPIfSiteSurveyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyTableIndex.setDescription('This object represents a unique entry in the table.')
oriWORPIfSiteSurveyBaseMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyBaseMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyBaseMACAddress.setDescription('This object represents the MAC address of the base unit being tested with.')
oriWORPIfSiteSurveyBaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyBaseName.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyBaseName.setDescription('This object identifies the name of the base unit being tested with..')
oriWORPIfSiteSurveyMaxSatAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyMaxSatAllowed.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyMaxSatAllowed.setDescription('This object identifies the maximum number of satellites is allowed to be registered with the base unit being tested with.')
oriWORPIfSiteSurveyNumSatRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyNumSatRegistered.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyNumSatRegistered.setDescription('This object identifies the maximum number of satellites is allowed to be registered with the base unit being tested with.')
oriWORPIfSiteSurveyCurrentSatRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyCurrentSatRegistered.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyCurrentSatRegistered.setDescription('This object identifies the maximum number of satellites is allowed to be registered with the base unit being tested with.')
oriWORPIfSiteSurveyLocalSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyLocalSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyLocalSignalLevel.setDescription('The current signal level (in dB) for the Site Survey from this station. This object indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfSiteSurveyLocalNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyLocalNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyLocalNoiseLevel.setDescription('The current noise level (in dB) for the Site Survey to this station. This object indicates the running average of the local noise level.')
oriWORPIfSiteSurveyLocalSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyLocalSNR.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyLocalSNR.setDescription('The current signal to noise ratio for the Site Survey to this station.')
oriWORPIfSiteSurveyRemoteSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyRemoteSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyRemoteSignalLevel.setDescription('The current signal level (in dB) for the Site Survey from the base with which the current satellite is registered. This object indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriWORPIfSiteSurveyRemoteNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyRemoteNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyRemoteNoiseLevel.setDescription('The current noise level (in dB) for the Site Survey from the base with which the current satellite is registered.')
oriWORPIfSiteSurveyRemoteSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWORPIfSiteSurveyRemoteSNR.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfSiteSurveyRemoteSNR.setDescription('The current SNR (in dB) for the Site Survey from the base with which the current satellite is registered.')
oriWORPIfDDRSStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSStatus.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSStatus.setDescription('This is object is used to enable/disable the WORP DDRS feature on the BSU.')
oriWORPIfDDRSDefDataRate = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 108))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSDefDataRate.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSDefDataRate.setDescription('This is the data rate that shall be used only when DDRS is enabled. This is to specify default data rate on BSU. The possible values of the variable shall be: 1. 802.11a normal mode 6Mbps 2. 802.11a normal mode 9Mbps 3. 802.11a normal mode 12Mbps 4. 802.11a normal mode 18Mbps 5. 802.11a normal mode 24Mbps 6. 802.11a normal mode 36Mbps 7. 802.11a normal mode 48Mbps 8. 802.11a normal mode 54Mbps 9. 802.11a turbo mode 12Mbps 10. 802.11a turbo mode 18Mbps 11. 802.11a turbo mode 24Mbps 12. 802.11a turbo mode 36Mbps 13. 802.11a turbo mode 48Mbps 14. 802.11a turbo mode 72Mbps 15. 802.11a turbo mode 96Mbps 16. 802.11a turbo mode 108Mbps')
oriWORPIfDDRSMaxDataRate = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 108)).clone(36)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMaxDataRate.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMaxDataRate.setDescription('This is the data rate that shall be used only when DDRS is enabled. This is to limit maximum possible data rate that is set by DDRS on BSU. The possible values of the variable shall be: 1. 802.11a normal mode 6Mbps 2. 802.11a normal mode 9Mbps 3. 802.11a normal mode 12Mbps 4. 802.11a normal mode 18Mbps 5. 802.11a normal mode 24Mbps 6. 802.11a normal mode 36Mbps 7. 802.11a normal mode 48Mbps 8. 802.11a normal mode 54Mbps 9. 802.11a turbo mode 12Mbps 10. 802.11a turbo mode 18Mbps 11. 802.11a turbo mode 24Mbps 12. 802.11a turbo mode 36Mbps 13. 802.11a turbo mode 48Mbps 14. 802.11a turbo mode 72Mbps 15. 802.11a turbo mode 96Mbps 16. 802.11a turbo mode 108Mbps')
oriWORPIfDDRSMinReqSNRdot11an6Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an6Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an6Mbps.setDescription('This is to specify the minimum required SNR for data rate of 6Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 6dB.')
oriWORPIfDDRSMinReqSNRdot11an9Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an9Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an9Mbps.setDescription('This is to specify the minimum required SNR for data rate of 9Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 7dB.')
oriWORPIfDDRSMinReqSNRdot11an12Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an12Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an12Mbps.setDescription('This is to specify the minimum required SNR for data rate of 12Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 9dB.')
oriWORPIfDDRSMinReqSNRdot11an18Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an18Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an18Mbps.setDescription('This is to specify the minimum required SNR for data rate of 18Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 11dB.')
oriWORPIfDDRSMinReqSNRdot11an24Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an24Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an24Mbps.setDescription('This is to specify the minimum required SNR for data rate of 24Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 14dB.')
oriWORPIfDDRSMinReqSNRdot11an36Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an36Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an36Mbps.setDescription('This is to specify the minimum required SNR for data rate of 36Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 18dB.')
oriWORPIfDDRSMinReqSNRdot11an48Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an48Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an48Mbps.setDescription('This is to specify the minimum required SNR for data rate of 48Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 22dB.')
oriWORPIfDDRSMinReqSNRdot11an54Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an54Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11an54Mbps.setDescription('This is to specify the minimum required SNR for data rate of 54Mbps on 802.11a radio, normal mode. The value should be in dB and in the range 0..50 dB. The default value should be 25dB.')
oriWORPIfDDRSMinReqSNRdot11at12Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at12Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at12Mbps.setDescription('This is to specify the minimum required SNR for data rate of 12Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 6dB.')
oriWORPIfDDRSMinReqSNRdot11at18Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at18Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at18Mbps.setDescription('This is to specify the minimum required SNR for data rate of 18Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 7dB.')
oriWORPIfDDRSMinReqSNRdot11at24Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at24Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at24Mbps.setDescription('This is to specify the minimum required SNR for data rate of 24Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 9dB.')
oriWORPIfDDRSMinReqSNRdot11at36Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at36Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at36Mbps.setDescription('This is to specify the minimum required SNR for data rate of 36Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 11dB.')
oriWORPIfDDRSMinReqSNRdot11at48Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at48Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at48Mbps.setDescription('This is to specify the minimum required SNR for data rate of 48Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 14dB.')
oriWORPIfDDRSMinReqSNRdot11at72Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at72Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at72Mbps.setDescription('This is to specify the minimum required SNR for data rate of 72Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 18dB.')
oriWORPIfDDRSMinReqSNRdot11at96Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at96Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at96Mbps.setDescription('This is to specify the minimum required SNR for data rate of 96Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 22dB.')
oriWORPIfDDRSMinReqSNRdot11at108Mbps = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at108Mbps.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSMinReqSNRdot11at108Mbps.setDescription('This is to specify the minimum required SNR for data rate of 108Mbps on 802.11a radio, turbo mode. The value should be in dB and in the range 0..50 dB. The default value should be 25dB.')
oriWORPIfDDRSDataRateIncAvgSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateIncAvgSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateIncAvgSNRThreshold.setDescription('This is to specify average SNR threshold for data rate increase. The value should be in dB and in the range 0..50 dB. The default value should be 4 dB.')
oriWORPIfDDRSDataRateIncReqSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateIncReqSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateIncReqSNRThreshold.setDescription('This is to specify average SNR threshold for data rate decrease. The value should be in dB and in the range 0..50 dB. The default value should be 6 dB.')
oriWORPIfDDRSDataRateDecReqSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateDecReqSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateDecReqSNRThreshold.setDescription('This is to specify SNRreq threshold for data rate reduction. The value should be in dB and in the range 0..50 dB. The default value should be 3 dB.')
oriWORPIfDDRSDataRateIncPercentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateIncPercentThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateIncPercentThreshold.setDescription('This object specifies the threshold percentage of retransmissions for DDRS data rate increase.')
oriWORPIfDDRSDataRateDecPercentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 6, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateDecPercentThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfDDRSDataRateDecPercentThreshold.setDescription('This object specifies the threshold percentage of retransmissions for DDRS data rate decrease.')
oriWORPIfRoamingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5, 1), ObjStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfRoamingStatus.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfRoamingStatus.setDescription('This object is used to enable/disable Roaming between BSUs.')
oriWORPIfRoamingSlowScanThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfRoamingSlowScanThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfRoamingSlowScanThreshold.setDescription('This object specifies the threshold for initiating slow scanning procedure. The units of this object is dBs.')
oriWORPIfRoamingFastScanThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfRoamingFastScanThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfRoamingFastScanThreshold.setDescription('This object specifies the threshold for initiating fast scanning procedure. The units of this object is dBs.')
oriWORPIfRoamingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfRoamingThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfRoamingThreshold.setDescription('This object specifies the threshold for roaming threshold. The units of this object is dBs.')
oriWORPIfRoamingSlowScanPercentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfRoamingSlowScanPercentThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfRoamingSlowScanPercentThreshold.setDescription('This object specifies the threshold percentage of retransmissions for initiating slow scanning procedure.')
oriWORPIfRoamingFastScanPercentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPIfRoamingFastScanPercentThreshold.setStatus('current')
if mibBuilder.loadTexts: oriWORPIfRoamingFastScanPercentThreshold.setDescription('This object specifies the threshold percentage of retransmissions for initiating fast scanning procedure.')
orinocoWORPIfBSUStatMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatMACAddress.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatMACAddress.setDescription('This object represents the MAC address of BSU to which the SU is registered.')
orinocoWORPIfBSUStatLocalTxRate = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatLocalTxRate.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatLocalTxRate.setDescription('This object represents the Transmit Data Rate of the SU.')
orinocoWORPIfBSUStatRemoteTxRate = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatRemoteTxRate.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatRemoteTxRate.setDescription('This object represents the Transmit Data Rate of the BSU to which the SU is registered.')
orinocoWORPIfBSUStatAverageLocalSignal = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageLocalSignal.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageLocalSignal.setDescription("The current signal level calculated over all inbound packets. This variable indicates the running average of the SU's local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).")
orinocoWORPIfBSUStatAverageLocalNoise = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageLocalNoise.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageLocalNoise.setDescription("The current noise level calculated over all inbound packets. This variable indicates the running average of the SU's local noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).")
orinocoWORPIfBSUStatAverageRemoteSignal = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageRemoteSignal.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageRemoteSignal.setDescription("The current remote signal level calculated over the inbound packets received at SU, sent by the BSU. This variable indicates the running average of the SU's Rx Signal level(i.e. BSU's Tx Signal level) all registered stations of the remote signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).")
orinocoWORPIfBSUStatAverageRemoteNoise = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 2, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageRemoteNoise.setStatus('current')
if mibBuilder.loadTexts: orinocoWORPIfBSUStatAverageRemoteNoise.setDescription("The current remote noise level calculated over the inbound packets received at SU, sent by the BSU. This variable indicates the running average of the SU's Rx Noise level(i.e. BSU's Tx Noise level) all registered stations of the remote noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).")
oriNetworkIPConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: oriNetworkIPConfigTable.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPConfigTable.setDescription('This table contains the Network IP configuration for the network interface(s) of the device. For bridge mode, only the address assigned to the Ethernet interface (index 1) will be used.')
oriNetworkIPConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriNetworkIPConfigTableIndex"))
if mibBuilder.loadTexts: oriNetworkIPConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPConfigTableEntry.setDescription('This object represents an entry for the network IP configuration for each interface in the system.')
oriNetworkIPConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriNetworkIPConfigTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPConfigTableIndex.setDescription('This object represents an index or interface number in the network IP configuration table.')
oriNetworkIPConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNetworkIPConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPConfigIPAddress.setDescription('This object represents the IP Address of the network interface.')
oriNetworkIPConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNetworkIPConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPConfigSubnetMask.setDescription('This object represents the subnet mask of the network interface.')
oriNetworkIPDefaultRouterIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNetworkIPDefaultRouterIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPDefaultRouterIPAddress.setDescription('This object represents the IP address of the gateway or router of the device.')
oriNetworkIPDefaultTTL = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNetworkIPDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPDefaultTTL.setDescription('The default value inserted into the Time-To-Live (TTL) field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.')
oriNetworkIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNetworkIPAddressType.setStatus('current')
if mibBuilder.loadTexts: oriNetworkIPAddressType.setDescription('This object identifies if the device is configured to be assigned a static or dynamic IP address using a DHCP client.')
oriSNMPReadPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 1), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPReadPassword.setStatus('current')
if mibBuilder.loadTexts: oriSNMPReadPassword.setDescription('This object represents the read-only community name used in the SNMP protocol. This object is used for reading objects from the SNMP agent. This object should be treated as write-only and returned as asterisks.')
oriSNMPReadWritePassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 2), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPReadWritePassword.setStatus('current')
if mibBuilder.loadTexts: oriSNMPReadWritePassword.setDescription('This objecgt represents the read-write community name used in the SNMP protocol. This object is used for reading and writing objects to and from the SNMP Agent. This object should be treated as write-only and returned as asterisks.')
oriSNMPAuthorizedManagerCount = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSNMPAuthorizedManagerCount.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAuthorizedManagerCount.setDescription('This object reflects the number of entries in the Management IP Access Table.')
oriSNMPAccessTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4), )
if mibBuilder.loadTexts: oriSNMPAccessTable.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTable.setDescription('This table is used configure management stations that are authorized to manage the device. This table applies to the supported management services/interfaces (SNMP, HTTP, and Telnet). This table is limited to 20 entries.')
oriSNMPAccessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSNMPAccessTableIndex"))
if mibBuilder.loadTexts: oriSNMPAccessTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableEntry.setDescription('This object identifies an entry in the Management IP Access Table.')
oriSNMPAccessTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSNMPAccessTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableIndex.setDescription('This object represents the index for the Management IP Access Table.')
oriSNMPAccessTableIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPAccessTableIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableIPAddress.setDescription('This object represents the IP address of the management station authorized to manage the device.')
oriSNMPAccessTableIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPAccessTableIPMask.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableIPMask.setDescription('This object represents the IP subnet mask. This object can be used to grant access to a complete subnet.')
oriSNMPAccessTableInterfaceBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1, 4), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPAccessTableInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableInterfaceBitmask.setDescription('This object is used to control the interface access for each table entry in the Management IP Access Table.')
oriSNMPAccessTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPAccessTableComment.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableComment.setDescription('This object is used for an optional comment associated to the Management IP Access Table entry.')
oriSNMPAccessTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPAccessTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableEntryStatus.setDescription('This object is used to enable, disable, delete, or create an entry in the Management IP Access Table.')
oriSNMPTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5), )
if mibBuilder.loadTexts: oriSNMPTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTable.setDescription('This table contains the information regarding the trap host that will receive SNMP traps sent by the device. This table is limited 10 entries.')
oriSNMPTrapHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSNMPTrapHostTableIndex"))
if mibBuilder.loadTexts: oriSNMPTrapHostTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTableEntry.setDescription('This object identifies an entry in the SNMP Trap Host Table.')
oriSNMPTrapHostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSNMPTrapHostTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTableIndex.setDescription('This object is used as an index for the SNMP Trap Host Table.')
oriSNMPTrapHostTableIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPTrapHostTableIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTableIPAddress.setDescription('This object represents the IP address of the management station that will receive SNMP Traps from the device.')
oriSNMPTrapHostTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPTrapHostTablePassword.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTablePassword.setDescription("This object represents the password that is sent with the SNMP trap messages to allow the host to accept or reject the traps. The trap host will only accept SNMP traps if this password matches the host's password. This object should be treated as write-only and returned as asterisks.")
oriSNMPTrapHostTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPTrapHostTableComment.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTableComment.setDescription('This object is used for an optional comment associated to the SNMP Trap Host Table entry.')
oriSNMPTrapHostTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPTrapHostTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapHostTableEntryStatus.setDescription('This object is used to enable, disable, delete, create an entry in the SNMP Trap Host Table.')
oriSNMPInterfaceBitmask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 7), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriSNMPInterfaceBitmask.setDescription('This object is used to control the interface access for SNMP based management (not HTTP and Telnet).')
oriSNMPErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSNMPErrorMessage.setStatus('current')
if mibBuilder.loadTexts: oriSNMPErrorMessage.setDescription('This object is used to provide additional information in case of an SNMP error.')
oriSNMPAccessTableStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPAccessTableStatus.setStatus('current')
if mibBuilder.loadTexts: oriSNMPAccessTableStatus.setDescription('This object is used to enable or disable the Management IP Access Table. If this object is disabled, the check based on source IP address for the enteries in the Management IP Access Table will not be performed.')
oriSNMPTrapType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmp-v1", 1), ("snmp-v2c", 2))).clone('snmp-v1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPTrapType.setStatus('current')
if mibBuilder.loadTexts: oriSNMPTrapType.setDescription('This object is used to configure the SNMP trap/notification type that will be generated.')
oriSNMPSecureManagementStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPSecureManagementStatus.setStatus('current')
if mibBuilder.loadTexts: oriSNMPSecureManagementStatus.setDescription("This object is used to enable or disable the secure Management feature for the Access Point. With this object enabled, view based access control will be enforced on all forms of management including SNMPv1/v2c, HTTP, WEB, HTTPS, SSH, serial, and Telnet. Also SNMPv3 user security model will be enabled. The default SNMPv3 user is defined as userName 'administrator', with SHA authentication and DES privacy protocols.")
oriSNMPV3AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 32)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPV3AuthPassword.setStatus('current')
if mibBuilder.loadTexts: oriSNMPV3AuthPassword.setDescription('This object represents the SNMPv3 administrator authentication password. This object should be treated as write-only and returned as asterisks.')
oriSNMPV3PrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 32)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNMPV3PrivPassword.setStatus('current')
if mibBuilder.loadTexts: oriSNMPV3PrivPassword.setDescription('This object represents the SNMPv3 administrator privacy password. This object should be treated as write-only and returned as asterisks.')
oriProtocolFilterOperationType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passthru", 1), ("block", 2))).clone('block')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterOperationType.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterOperationType.setDescription('This object is used to passthru (allow) or block (deny) packets with protocols in the protocol filter table.')
oriProtocolFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: oriProtocolFilterTable.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterTable.setDescription('This table contains the two byte hexadecimal values of the protocols. The packets whose protocol field matches with any of the entries in this table will be forwarded or dropped based on value of oriProtocolFilterFlag. This table is limited to 256 ethernet protocols (enteries).')
oriProtocolFilterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriProtocolFilterTableIndex"))
if mibBuilder.loadTexts: oriProtocolFilterTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterTableEntry.setDescription('This object represents an entry in the protocol filter table.')
oriProtocolFilterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriProtocolFilterTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterTableIndex.setDescription('This object is used to index the protocol filter table.')
oriProtocolFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterProtocol.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterProtocol.setDescription('This object represents a two byte hexadecimal value for the Ethernet protocol to be filtered (the protocol field of the Ethernet packet).')
oriProtocolFilterProtocolComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterProtocolComment.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterProtocolComment.setDescription('This object is used as an optional comment for the ethernet protocol to be filtered.')
oriProtocolFilterTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterTableEntryStatus.setDescription('This object is used to enable, disable, delete, create the Ethernet protocols in this table.')
oriProtocolFilterTableInterfaceBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1, 5), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterTableInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterTableInterfaceBitmask.setDescription('This object is isued to control protocol filtering per interface for each entry in this table.')
oriProtocolFilterProtocolString = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterProtocolString.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterProtocolString.setDescription('This object represents the value in the protocol field of the Ethernet packet. The value is of 4-digit Hex format. Example: The value of IP protocol is 0800. The value of ARP protocol is 0806.')
oriProtocolFilterInterfaceBitmask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 1, 3), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProtocolFilterInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriProtocolFilterInterfaceBitmask.setDescription('This object is isued to control protocol filtering per interface for the table.')
oriAccessControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriAccessControlStatus.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlStatus.setDescription('This object is used to enable or disable MAC Access Control feature/filter in the device.')
oriAccessControlOperationType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passthru", 1), ("block", 2))).clone('passthru')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriAccessControlOperationType.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlOperationType.setDescription('This flag determines whether the stations with MAC addresses listed in the access control table will be allowed or denied access. This flag is used only if oriAccessControlStatus is enabled. This table is limited to 1000 MAC Address entries.')
oriAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: oriAccessControlTable.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlTable.setDescription('This table contains the information about MAC addresses of the wireless stations that are either allowed or disallowed access (based on oriAccessControlOperation) through this device. This table is used only if oriAccessControlStatus is enabled.')
oriAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriAccessControlTableIndex"))
if mibBuilder.loadTexts: oriAccessControlEntry.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlEntry.setDescription('This object represents the entry in the access control table.')
oriAccessControlTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriAccessControlTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlTableIndex.setDescription('This object is used as an index for the access control table.')
oriAccessControlTableMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 3, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriAccessControlTableMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlTableMACAddress.setDescription('This object represents the MAC address of the wireless station that can access the device.')
oriAccessControlTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriAccessControlTableComment.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlTableComment.setDescription('This object is used as an optional comment associated to the access control table entry.')
oriAccessControlTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriAccessControlTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriAccessControlTableEntryStatus.setDescription('This object is used to enable, disable, delete, create the entries in the Access Control Table.')
oriStaticMACAddressFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: oriStaticMACAddressFilterTable.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterTable.setDescription('This table provides the MAC address of the stations on the wired and the wireless interface; the MAC addresses will be given in pairs. Stations listed in the Static MAC Address filter will have no traffic forwarded by the device. This way Multicast traffic exchanged between stations or servers can be prevented, from being transmitted over the wireless medium when both stations are actually located on the wired backbone. This table is limited to 200 entries.')
oriStaticMACAddressFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriStaticMACAddressFilterTableIndex"))
if mibBuilder.loadTexts: oriStaticMACAddressFilterEntry.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterEntry.setDescription('This object identifies the entry in the Static MAC address filter table.')
oriStaticMACAddressFilterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStaticMACAddressFilterTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterTableIndex.setDescription('This object is used as an index for the Static MAC address filter table.')
oriStaticMACAddressFilterWiredAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStaticMACAddressFilterWiredAddress.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterWiredAddress.setDescription('This object represents the MAC address of the station on the wired interface of the device.')
oriStaticMACAddressFilterWiredMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStaticMACAddressFilterWiredMask.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterWiredMask.setDescription('This mask determines the presence of wildcard characters in the MAC address of the station on the wired interface. The value F (hex digit) in the mask indicates the presence of a wildcard character and the value 0 indicates its absence.')
oriStaticMACAddressFilterWirelessAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStaticMACAddressFilterWirelessAddress.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterWirelessAddress.setDescription('This object represents the MAC address of the station on the wireless interface.')
oriStaticMACAddressFilterWirelessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStaticMACAddressFilterWirelessMask.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterWirelessMask.setDescription('The mask that determines the presence of wildcard characters in the MAC address of the station on the wireless side. The value F (hex digit) indicates the presence of a wildcard character and the hex digit 0 indicates its absense.')
oriStaticMACAddressFilterTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStaticMACAddressFilterTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterTableEntryStatus.setDescription('This object is used to enable, disable, delete, create an entry in the Static MAC Address Table.')
oriStaticMACAddressFilterComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 3, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStaticMACAddressFilterComment.setStatus('current')
if mibBuilder.loadTexts: oriStaticMACAddressFilterComment.setDescription('This object is used for an optional comment associated to the access control table entry.')
oriBroadcastAddressThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriBroadcastAddressThreshold.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastAddressThreshold.setDescription('If broadcast rate from any device (identified by its MAC address) exceeds the limit specified by this value, the device will ignore all subsequent messages issued by the particular network device, or ignore all messages of that type. Valid values for address threshold is between 0 - 255 frames per second. Initial Value is 0 (Disable Storm Threshold Protection).')
oriMulticastAddressThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriMulticastAddressThreshold.setStatus('current')
if mibBuilder.loadTexts: oriMulticastAddressThreshold.setDescription('If multicast rate from any device (identified by its MAC address) exceeds the limit specified by this value, the device will ignore all subsequent messages issued by the particular network device, or ignore all messages of that type. Valid values for address threshold is between 0 - 255 frames per second. Initial Value is 0 (Disable Storm Threshold Protection).')
oriStormThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4, 3), )
if mibBuilder.loadTexts: oriStormThresholdTable.setStatus('current')
if mibBuilder.loadTexts: oriStormThresholdTable.setDescription('The table containing broadcast and multicast threshold values for each interface.')
oriStormThresholdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriStormThresholdTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriStormThresholdTableEntry.setDescription('This object represents an entry in the storm threshold filter table.')
oriStormThresholdIfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStormThresholdIfBroadcast.setStatus('current')
if mibBuilder.loadTexts: oriStormThresholdIfBroadcast.setDescription('This parameter specifies a set of Broadcast Storm thresholds for each interface/port of the device, identifying separate values for the number of Broadcast messages/second. Default value is zero, which means disabled.')
oriStormThresholdIfMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStormThresholdIfMulticast.setStatus('current')
if mibBuilder.loadTexts: oriStormThresholdIfMulticast.setDescription('This parameter specifies a set of Multicast Storm thresholds for each interface/port of the device, identifying separate values for the number of Multicast messages/second. Default value is zero, which means disabled.')
oriPortFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterStatus.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterStatus.setDescription('This object is used to enable or disable port filtering.')
oriPortFilterOperationType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passthru", 1), ("block", 2))).clone('passthru')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterOperationType.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterOperationType.setDescription('This object determines whether the stations with ports listed in the port filter table must be allowed (passthru) or denied (block) to access the device. This object is used only if oriPacketFilterStatus is enabled.')
oriPortFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3), )
if mibBuilder.loadTexts: oriPortFilterTable.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTable.setDescription('This table contains the Port number of packets to be filtered. The packets whose port field matches with any of the enabled entries in this table will be blocked (dropped). This table is limited to 256 entries.')
oriPortFilterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriPortFilterTableEntryIndex"))
if mibBuilder.loadTexts: oriPortFilterTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntry.setDescription('This parameter represents the entry in the port filter table.')
oriPortFilterTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPortFilterTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntryIndex.setDescription('This object is used as the index for the port filter table. This table supports up to 256 entries.')
oriPortFilterTableEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterTableEntryPort.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntryPort.setDescription('This object represents the port number of the packets to be filtered.')
oriPortFilterTableEntryPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterTableEntryPortType.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntryPortType.setDescription('This object specifies the port type.')
oriPortFilterTableEntryInterfaceBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1, 4), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterTableEntryInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntryInterfaceBitmask.setDescription('This object is used to control port filtering per interface for each entry in the table.')
oriPortFilterTableEntryComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterTableEntryComment.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntryComment.setDescription('This object is used for an optional comment associated to the port filter table entry.')
oriPortFilterTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPortFilterTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriPortFilterTableEntryStatus.setDescription('This object is used to enable, disable, delete, create an entry in the Port Filter Table.')
oriBroadcastFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: oriBroadcastFilteringTable.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastFilteringTable.setDescription('The table entries for broadcast filters. This table shall contain 5 entries.')
oriBroadcastFilteringTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriBroadcastFilteringTableIndex"))
if mibBuilder.loadTexts: oriBroadcastFilteringTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastFilteringTableEntry.setDescription('This object represents an entry in the broadcast filtering table.')
oriBroadcastFilteringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriBroadcastFilteringTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastFilteringTableIndex.setDescription('This object represents the index of the Broadcast Filtering table.')
oriBroadcastFilteringProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriBroadcastFilteringProtocolName.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastFilteringProtocolName.setDescription('This object represents the broadcast protocol name to be filtered.')
oriBroadcastFilteringDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernetToWireless", 1), ("wirelessToEthernet", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriBroadcastFilteringDirection.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastFilteringDirection.setDescription('This object represents the direction of the broadcast filter. The filter can be enabled for Ethernet to Wireless, Wireless to Ethernet, or both directions.')
oriBroadcastFilteringTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriBroadcastFilteringTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriBroadcastFilteringTableEntryStatus.setDescription('This object is used to enable or disable the broadcast filter table enteries.')
oriPacketForwardingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPacketForwardingStatus.setStatus('current')
if mibBuilder.loadTexts: oriPacketForwardingStatus.setDescription('This object is used to enable or disable the Packet Forwarding feature.')
oriPacketForwardingMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 7, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPacketForwardingMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriPacketForwardingMACAddress.setDescription('This object represents the MAC Address to which all frames will be forwarded by the device.')
oriPacketForwardingInterface = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPacketForwardingInterface.setStatus('current')
if mibBuilder.loadTexts: oriPacketForwardingInterface.setDescription('This object is used to configure the interface or port that frames will be forwarded to. If this object is not configured, value set to zero, then the bridge will forward the packets on the interface or port the MAC address was learned on. If this object is not configured, value set to zero, and the bridge has not yet learned the MAC address then the frames will be forwarded on all interfaces and ports.')
oriIBSSTrafficOperation = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passthru", 1), ("block", 2))).clone('passthru')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIBSSTrafficOperation.setStatus('current')
if mibBuilder.loadTexts: oriIBSSTrafficOperation.setDescription('This object is used to control IntraBSS Traffic. If this object is set to the passthru, then IBSS traffic will be allowed; if this object is set to block, then IBSS traffic will be denied.')
oriIntraCellBlockingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingStatus.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingStatus.setDescription('This object is used to enable/disable IntraCell Blocking/Filtering.')
oriIntraCellBlockingMACTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2), )
if mibBuilder.loadTexts: oriIntraCellBlockingMACTable.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTable.setDescription('The MAC table entries for IntraCell Blocking filters. This table can contain up to a maximum of 250 entries.')
oriIntraCellBlockingMACTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriIntraCellBlockingMACTableIndex"))
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableEntry.setDescription('This object represents the entry in the IntraCell Blocking MAC Table.')
oriIntraCellBlockingMACTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableIndex.setDescription('This object is used as the index to the IntraCell Blocking MAC Table.')
oriIntraCellBlockingMACTableMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableMACAddress.setDescription('This object represents the MAC address of the SU which is allowed to communicate with other SUs with the same group ID.')
oriIntraCellBlockingMACTableGroupID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 3), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID1.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID1.setDescription('This object is used to activate/deactivate Group ID 1.')
oriIntraCellBlockingMACTableGroupID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 4), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID2.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID2.setDescription('This object is used to activate/deactivate Group ID 2.')
oriIntraCellBlockingMACTableGroupID3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 5), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID3.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID3.setDescription('This object is used to activate/deactivate Group ID 3.')
oriIntraCellBlockingMACTableGroupID4 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 6), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID4.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID4.setDescription('This object is used to activate/deactivate Group ID 4.')
oriIntraCellBlockingMACTableGroupID5 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 7), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID5.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID5.setDescription('This object is used to activate/deactivate Group ID 5.')
oriIntraCellBlockingMACTableGroupID6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 8), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID6.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID6.setDescription('This object is used to activate/deactivate Group ID 6.')
oriIntraCellBlockingMACTableGroupID7 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 9), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID7.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID7.setDescription('This object is used to activate/deactivate Group ID 7.')
oriIntraCellBlockingMACTableGroupID8 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 10), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID8.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID8.setDescription('This object is used to activate/deactivate Group ID 8.')
oriIntraCellBlockingMACTableGroupID9 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 11), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID9.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID9.setDescription('This object is used to activate/deactivate Group ID 9.')
oriIntraCellBlockingMACTableGroupID10 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 12), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID10.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID10.setDescription('This object is used to activate/deactivate Group ID 10.')
oriIntraCellBlockingMACTableGroupID11 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 13), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID11.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID11.setDescription('This object is used to activate/deactivate Group ID 11.')
oriIntraCellBlockingMACTableGroupID12 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 14), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID12.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID12.setDescription('This object is used to activate/deactivate Group ID 12.')
oriIntraCellBlockingMACTableGroupID13 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 15), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID13.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID13.setDescription('This object is used to activate/deactivate Group ID 13.')
oriIntraCellBlockingMACTableGroupID14 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 16), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID14.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID14.setDescription('This object is used to activate/deactivate Group ID 14.')
oriIntraCellBlockingMACTableGroupID15 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 17), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID15.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID15.setDescription('This object is used to activate/deactivate Group ID 15.')
oriIntraCellBlockingMACTableGroupID16 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 18), ObjStatusActive().clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID16.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableGroupID16.setDescription('This object is used to activate/deactivate Group ID 16.')
oriIntraCellBlockingMACTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingMACTableEntryStatus.setDescription('This object is used to enable, disable, delete, create the entries in the IntraCell Blocking MAC Table.')
oriIntraCellBlockingGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 3), )
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTable.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTable.setDescription('The Group table entries for IntraCell Blocking Group IDs. This table can contain a maximum of 16 entries.')
oriIntraCellBlockingGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriIntraCellBlockingGroupTableIndex"))
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableEntry.setDescription('This object represents the entry in the IntraCell Blocking Group Table.')
oriIntraCellBlockingGroupTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableIndex.setDescription('This object is used as the index to the IntraCell Blocking Group Table.')
oriIntraCellBlockingGroupTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableName.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableName.setDescription('This object represents the group name.')
oriIntraCellBlockingGroupTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriIntraCellBlockingGroupTableEntryStatus.setDescription('This object is used to enable, disable, delete, create the entries in the IntraCell Blocking Group Table.')
oriSecurityGwStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 10, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityGwStatus.setStatus('current')
if mibBuilder.loadTexts: oriSecurityGwStatus.setDescription('This object is used to enable/disable the Security Gateway feature.')
oriSecurityGwMac = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 5, 10, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityGwMac.setStatus('current')
if mibBuilder.loadTexts: oriSecurityGwMac.setDescription('This object represents the Security Gateway MAC Address to which all frames will be forwarded by the device.')
oriRADIUSClientInvalidServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSClientInvalidServerAddress.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSClientInvalidServerAddress.setDescription('This counter represents the total number of RADIUS access-response messages received from an unknown address since system startup.')
oriRADIUSMACAccessControl = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSMACAccessControl.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSMACAccessControl.setDescription('This object is used to enables RADIUS Access Control based on wireless stations MAC Address.')
oriRADIUSAuthorizationLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(7200, 43200), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthorizationLifeTime.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthorizationLifeTime.setDescription('This object represents the authorization lifetime for a certain MAC based RADIUS authenticated client. A value of zero (0) means that re-authorization is disabled. The units for this object is seconds.')
oriRADIUSMACAddressFormat = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dashDelimited", 1), ("colonDelimited", 2), ("singleDashDelimited", 3), ("noDelimiter", 4))).clone('dashDelimited')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSMACAddressFormat.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSMACAddressFormat.setDescription('This object is used to configure the MAC Address format that is to be used for communication with the RADIUS Server. Examples of MAC Address Format are: - Dash Delimited: 00-11-22-AA-BB-CC - Colon Delimited: 00:11:22:AA:BB:CC - Single Dash Delimited: 001122-AABBCC - No Delimiter: 001122AABBCC')
oriRADIUSLocalUserStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 7), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSLocalUserStatus.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSLocalUserStatus.setDescription('This object is used to enable/disable local user support when RADIUS based management is enabled.')
oriRADIUSLocalUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 32)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSLocalUserPassword.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSLocalUserPassword.setDescription('This object is the password to access the device when using the local username - root. This object should be treated as write-only and returned as asterisks.')
oriRADIUSbasedManagementAccessProfile = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSbasedManagementAccessProfile.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSbasedManagementAccessProfile.setDescription('This object is used to configure the RADIUS Server profile that will be used for RADIUS based management access. The RADIUS profile is defined in the RADIUS Server Table in the orinocoRADIUSSvrProfile group.')
oriRADIUSAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1), )
if mibBuilder.loadTexts: oriRADIUSAuthServerTable.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerTable.setDescription('This table represents the RADIUS servers that the device will communicated with for client authentication. Usually this table should have two members representing the primary and secondary (backup) RADIUS Authentication Servers.')
oriRADIUSAuthServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRADIUSAuthServerTableIndex"))
if mibBuilder.loadTexts: oriRADIUSAuthServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerTableEntry.setDescription('This object represents an entry in the RADIUS Authentication Server Table.')
oriRADIUSAuthServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthServerTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerTableIndex.setDescription('This object is used as an index to the RADIUS Authentication Server Table.')
oriRADIUSAuthServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("authentication", 1), ("accounting", 2), ("authAndAcct", 3), ("authdot1x", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthServerType.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerType.setDescription('This object indicates if the RADIUS server will provide Authentication service, Accounting service, or both.')
oriRADIUSAuthServerTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerTableEntryStatus.setDescription('This object identifies if the RADIUS server entry is enabled or disabled.')
oriRADIUSAuthServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAuthServerIPAddress.setDescription('This object represents the IP address of the RADIUS server.')
oriRADIUSAuthServerDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 5), Integer32().clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerDestPort.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerDestPort.setDescription('This object represents the RADIUS server authentication port - the default value is 1812.')
oriRADIUSAuthServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerSharedSecret.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerSharedSecret.setDescription('This object represents the shared secret between the RADIUS server and client. This object should be treated as write-only and returned as asterisks.')
oriRADIUSAuthServerResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerResponseTime.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerResponseTime.setDescription('This object represents the time (in seconds) for which the RADIUS client will wait, until another authentication request is sent to the server.')
oriRADIUSAuthServerMaximumRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerMaximumRetransmission.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerMaximumRetransmission.setDescription('This object represents the number of retransmissions of authentication requests by the RADIUS Client to the Server.')
oriRADIUSAuthClientAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessRequests.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessRequests.setDescription('This object represents the number of RADIUS Access Requests messages transmitted from the client to the server since client startup.')
oriRADIUSAuthClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessRetransmissions.setDescription('This object represents the number of RADIUS Access Requests retransmitted by the client to the server since system startup.')
oriRADIUSAuthClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessAccepts.setDescription('This object indicates the number of RADIUS Access Accept messages received since system startup.')
oriRADIUSAuthClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessChallenges.setDescription('This object represents the number of RADIUS Access Challenges messages received since system startup.')
oriRADIUSAuthClientAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessRejects.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientAccessRejects.setDescription('This object represents the number of RADIUS Access Rejects messages received since system startup.')
oriRADIUSAuthClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientMalformedAccessResponses.setDescription('This object represents the number of malformed RADIUS Access Response messages received since system startup.')
oriRADIUSAuthClientAuthInvalidAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientAuthInvalidAuthenticators.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientAuthInvalidAuthenticators.setDescription('This object represents the number of malformed RADIUS Access Response messages containing invalid authenticators received since system startup.')
oriRADIUSAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientTimeouts.setDescription('This object represents the total number of timeouts for RADIUS Access Request messages since system startup.')
oriRADIUSAuthServerNameOrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerNameOrIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerNameOrIPAddress.setDescription('This object is used to specify the RADIUS Server host name or IP Address.')
oriRADIUSAuthServerAddressingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddress", 1), ("name", 2))).clone('ipAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAuthServerAddressingFormat.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthServerAddressingFormat.setDescription('This object is used to specify the addressing format for configuring the RADIUS Server. If this object is configured to IP Address, then IP address should be used to specify the server. If this object is configured to name, then the host name should be specified.')
oriRADIUSAcctStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctStatus.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctStatus.setDescription('This object is used to enable or disable the RADIUS Accounting service. This object has been deprecated.')
oriRADIUSAcctInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctInactivityTimer.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctInactivityTimer.setDescription('This parameter represents the inactivity or idle timeout in minutes after which an Accounting Stop request is sent to the RADIUS Accounting server - the default value is 5 minutes. This object has been deprecated.')
oriRADIUSAcctServerTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3), )
if mibBuilder.loadTexts: oriRADIUSAcctServerTable.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerTable.setDescription('This table represents the RADIUS servers that the device will communicated with for accounting. Usually this table should have two members representing the primary and secondary (backup) RADIUS Accounting Servers. This object has been deprecated.')
oriRADIUSAcctServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRADIUSAcctServerTableIndex"))
if mibBuilder.loadTexts: oriRADIUSAcctServerTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerTableEntry.setDescription('This object represents an entry into the RADIUS Accouting Server Table. This object has been deprecated.')
oriRADIUSAcctServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctServerTableIndex.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerTableIndex.setDescription('This object is used as the index to the RADIUS Server Accounting table. This object has been deprecated.')
oriRADIUSAcctServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authentication", 1), ("accounting", 2), ("authAndAcct", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctServerType.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerType.setDescription('This object indicates if the RADIUS server will provide Authentication service, Accounting service, or both. This object has been deprecated.')
oriRADIUSAcctServerTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerTableEntryStatus.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerTableEntryStatus.setDescription('This object identifies if the RADIUS server entry is enabled or disabled. This object has been deprecated.')
oriRADIUSAcctServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerIPAddress.setDescription('This object represents the IP address of the RADIUS server. This object has been deprecated.')
oriRADIUSAcctServerDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 5), Integer32().clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerDestPort.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerDestPort.setDescription('This object represents the RADIUS server accounting port - the default value is 1813. This object has been deprecated.')
oriRADIUSAcctServerSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerSharedSecret.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerSharedSecret.setDescription('This object represents the shared secret between the RADIUS server and client. This object should be treated as write-only and returned as asterisks. This object has been deprecated.')
oriRADIUSAcctServerResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerResponseTime.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerResponseTime.setDescription('This object represents the time (in seconds) for which the RADIUS client will wait, until another accounting request is sent to the server. This object has been deprecated.')
oriRADIUSAcctServerMaximumRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerMaximumRetransmission.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerMaximumRetransmission.setDescription('This object represents the number of retransmissions of accounting requests by the RADIUS Client to the Server. This object has been deprecated.')
oriRADIUSAcctClientAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientAccountingRequests.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctClientAccountingRequests.setDescription('This object represents the number of Accounting Requests messages sent since system startup. This object has been deprecated.')
oriRADIUSAcctClientAccountingRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientAccountingRetransmissions.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctClientAccountingRetransmissions.setDescription('This object represents the number of Accounting Requests messages retransmitted sent since system startup. This object has been deprecated.')
oriRADIUSAcctClientAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientAccountingResponses.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctClientAccountingResponses.setDescription('This object represents the number of Accounting Response messages received since system startup. This object has been deprecated.')
oriRADIUSAcctClientAcctInvalidAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientAcctInvalidAuthenticators.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctClientAcctInvalidAuthenticators.setDescription('This object represents the number of Accounting Response messages which contain invalid authenticators received since system startup. This object has been deprecated.')
oriRADIUSAcctServerNameOrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerNameOrIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerNameOrIPAddress.setDescription('This object is used to specify the RADIUS Server host name or the IP Address. This object has been deprecated.')
oriRADIUSAcctServerAddressingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddress", 1), ("name", 2))).clone('ipAddress')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctServerAddressingFormat.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctServerAddressingFormat.setDescription('This object is used to specify the addressing format for configuring the RADIUS Server. If this object is configured to IP Address, then IP address should be used to specify the server. If this object is configured to name, then the host name should be specified. This object has been deprecated.')
oriRADIUSAcctUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSAcctUpdateInterval.setStatus('deprecated')
if mibBuilder.loadTexts: oriRADIUSAcctUpdateInterval.setDescription('This object is used to specify the interval in seconds at which RADIUS accounting update messages will be sent. This object has been deprecated.')
oriRADIUSSvrTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1), )
if mibBuilder.loadTexts: oriRADIUSSvrTable.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTable.setDescription('This table represents the RADIUS server profile that the device will communicated with for client authentication and/or accounting. This table has two indices - the first index indicates the profile number and the second index indicates primary and secondary/backup servers.')
oriRADIUSSvrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRADIUSSvrTableProfileIndex"), (0, "ORiNOCO-MIB", "oriRADIUSSvrTablePrimaryOrSecondaryIndex"))
if mibBuilder.loadTexts: oriRADIUSSvrTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableEntry.setDescription('This object represents an entry in the RADIUS Server Table.')
oriRADIUSSvrTableProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSSvrTableProfileIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableProfileIndex.setDescription('This object represents the RADIUS Server profile index.')
oriRADIUSSvrTablePrimaryOrSecondaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSSvrTablePrimaryOrSecondaryIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTablePrimaryOrSecondaryIndex.setDescription('This object is a second index to the RADIUS Server table, which identifies a server bein primary or secondary/backup.')
oriRADIUSSvrTableProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableProfileName.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableProfileName.setDescription('This object is used to specify a unique name for the RADIUS server profile.')
oriRADIUSSvrTableAddressingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipAddress", 1), ("name", 2))).clone('ipAddress')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableAddressingFormat.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableAddressingFormat.setDescription('This object is used to specify the addressing format for configuring the RADIUS Server. If this object is configured to IP Address, then IP address should be used to specify the server. If this object is configured to name, then the host name should be specified.')
oriRADIUSSvrTableNameOrIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableNameOrIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableNameOrIPAddress.setDescription('This object is used to specify the RADIUS Server host name or IP Address.')
oriRADIUSSvrTableDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 6), Integer32().clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableDestPort.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableDestPort.setDescription('This object represents the RADIUS server authentication port - the default value is 1812.')
oriRADIUSSvrTableSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableSharedSecret.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableSharedSecret.setDescription('This object represents the shared secret between the RADIUS server and client. This object should be treated as write-only and returned as asterisks.')
oriRADIUSSvrTableResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableResponseTime.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableResponseTime.setDescription('This object represents the time (in seconds) for which the RADIUS client will wait, until another authentication request is sent to the server.')
oriRADIUSSvrTableMaximumRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableMaximumRetransmission.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableMaximumRetransmission.setDescription('This object represents the number of retransmissions of authentication requests by the RADIUS Client to the Server.')
oriRADIUSSvrTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 10), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableVLANID.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableVLANID.setDescription('This object represents the VLAND ID that will be used to tag RADIUS messages from the client to the server.')
oriRADIUSSvrTableMACAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dashDelimited", 1), ("colonDelimited", 2), ("singleDashDelimited", 3), ("noDelimiter", 4))).clone('dashDelimited')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSSvrTableMACAddressFormat.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableMACAddressFormat.setDescription('This object is used to configure the MAC Address format that is to be used for communication with the RADIUS Server. Examples of MAC Address Format are: - Dash Delimited: 00-11-22-AA-BB-CC - Colon Delimited: 00:11:22:AA:BB:CC - Single Dash Delimited: 001122-AABBCC - No Delimiter: 001122AABBCC')
oriRADIUSSvrTableAuthorizationLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(900, 43200), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSSvrTableAuthorizationLifeTime.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableAuthorizationLifeTime.setDescription('This object represents the authorization lifetime for a certain MAC based RADIUS authenticated client. A value of zero (0) means that re-authorization is disabled. The units for this object is seconds.')
oriRADIUSSvrTableAccountingInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSSvrTableAccountingInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableAccountingInactivityTimer.setDescription('This parameter represents the client idle timeout in minutes. Once this timer has expired an Accounting Stop request is sent to the RADIUS Accounting Server.')
oriRADIUSSvrTableAccountingUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10080), ))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADIUSSvrTableAccountingUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableAccountingUpdateInterval.setDescription('This object is used to specify the interval in seconds at which RADIUS accounting update messages will be sent. This object is defined in minutes; a value of zero (0) disables the accouting updates.')
oriRADIUSSvrTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRADIUSSvrTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSSvrTableRowStatus.setDescription('This object represents the status of the RADIUS Server profile.')
oriRADIUSClientInvalidSvrAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSClientInvalidSvrAddress.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSClientInvalidSvrAddress.setDescription('This counter represents the total number of RADIUS access-response messages received from an unknown address since system startup.')
oriRADIUSAuthClientStatTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3), )
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTable.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTable.setDescription('This table is used to store RADIUS Authentication Client Statistics for the configured profiles.')
oriRADIUSAuthClientStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRADIUSAuthClientStatTableIndex"), (0, "ORiNOCO-MIB", "oriRADIUSAuthClientStatTablePrimaryOrSecondaryIndex"))
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableEntry.setDescription('This object represents an entry, primary and secondary/backup, in the RADIUS Authentication Client Statistics table.')
oriRADIUSAuthClientStatTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableIndex.setDescription('This object is used as an index to the RADIUS Authentication Client Statistics Table.')
oriRADIUSAuthClientStatTablePrimaryOrSecondaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTablePrimaryOrSecondaryIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTablePrimaryOrSecondaryIndex.setDescription('This object is used as an secondary index to the RADIUS Authentication Client Statistics Table, which is used to indicate primary and secondary/backup server statistics.')
oriRADIUSAuthClientStatTableAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessRequests.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessRequests.setDescription('This object represents the number of RADIUS Access Requests messages transmitted from the client to the server since client startup.')
oriRADIUSAuthClientStatTableAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessRetransmissions.setDescription('This object represents the number of RADIUS Access Requests retransmitted by the client to the server since system startup.')
oriRADIUSAuthClientStatTableAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessAccepts.setDescription('This object indicates the number of RADIUS Access Accept messages received since system startup.')
oriRADIUSAuthClientStatTableAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessChallenges.setDescription('This object represents the number of RADIUS Access Challenges messages received since system startup.')
oriRADIUSAuthClientStatTableAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessRejects.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableAccessRejects.setDescription('This object represents the number of RADIUS Access Rejects messages received since system startup.')
oriRADIUSAuthClientStatTableMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableMalformedAccessResponses.setDescription('This object represents the number of malformed RADIUS Access Response messages received since system startup.')
oriRADIUSAuthClientStatTableBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableBadAuthenticators.setDescription('This object represents the number of malformed RADIUS Access Response messages containing invalid authenticators received since system startup.')
oriRADIUSAuthClientStatTableTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableTimeouts.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAuthClientStatTableTimeouts.setDescription('This object represents the total number of timeouts for RADIUS Access Request messages since system startup.')
oriRADIUSAcctClientStatTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4), )
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTable.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTable.setDescription('This table is used to store RADIUS Accounting Client Statistics for the configured profiles.')
oriRADIUSAcctClientStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRADIUSAcctClientStatTableIndex"), (0, "ORiNOCO-MIB", "oriRADIUSAcctClientStatTablePrimaryOrSecondaryIndex"))
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableEntry.setDescription('This object represents an entry, primary and secondary/backup, in the RADIUS Accounting Client Statistics table.')
oriRADIUSAcctClientStatTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableIndex.setDescription('This object is used as an index to the RADIUS Accounting Client Statistics Table.')
oriRADIUSAcctClientStatTablePrimaryOrSecondaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTablePrimaryOrSecondaryIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTablePrimaryOrSecondaryIndex.setDescription('This object is used as an secondary index to the RADIUS Accounting Client Statistics Table, which is used to indicate primary and secondary/backup server statistics.')
oriRADIUSAcctClientStatTableAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableAccountingRequests.setDescription('This object represents the number of RADIUS Accounting Requests messages transmitted from the client to the server since client startup.')
oriRADIUSAcctClientStatTableAccountingRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableAccountingRetransmissions.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableAccountingRetransmissions.setDescription('This object represents the number of RADIUS Accounting Requests retransmitted by the client to the server since system startup.')
oriRADIUSAcctClientStatTableAccountingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableAccountingResponses.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableAccountingResponses.setDescription('This object indicates the number of RADIUS Accounting Response messages received since system startup.')
oriRADIUSAcctClientStatTableBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 6, 10, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: oriRADIUSAcctClientStatTableBadAuthenticators.setDescription('This object represents the number of malformed RADIUS Access Response messages containing invalid authenticators received since system startup.')
oriTelnetSessions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetSessions.setStatus('deprecated')
if mibBuilder.loadTexts: oriTelnetSessions.setDescription('This object is used to enable or disable telnet access and to specify the maximum number of active telnet sessions. When this object is set to 0, telnet access is disabled. When this object is set to something greater than 0, then it specifies the maximum number of active telnet sessions. This object has been deprecated.')
oriTelnetPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 2), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetPassword.setStatus('current')
if mibBuilder.loadTexts: oriTelnetPassword.setDescription('This object is the password to access the device via the telnet interface. This object should be treated as write-only and returned as asterisks.')
oriTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 3), Integer32().clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetPort.setStatus('current')
if mibBuilder.loadTexts: oriTelnetPort.setDescription('This object represents the TCP/IP port for which the telnet daemon/server will be accessible.')
oriTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: oriTelnetLoginTimeout.setDescription('This object represents the telnet login timeout in seconds.')
oriTelnetIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 36000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: oriTelnetIdleTimeout.setDescription('This object represents the telnet inactivity/idle timeout in seconds.')
oriTelnetInterfaceBitmask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 6), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriTelnetInterfaceBitmask.setDescription('This object is used to control interface access for telnet based management.')
oriTelnetSSHStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 7), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetSSHStatus.setStatus('current')
if mibBuilder.loadTexts: oriTelnetSSHStatus.setDescription('This object is used to enable or disable CLI access configuration using secure shell.')
oriTelnetSSHHostKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetSSHHostKeyStatus.setStatus('current')
if mibBuilder.loadTexts: oriTelnetSSHHostKeyStatus.setDescription('This object is used create or delete the SSH Public Host key of the device.')
oriTelnetSSHFingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTelnetSSHFingerPrint.setStatus('current')
if mibBuilder.loadTexts: oriTelnetSSHFingerPrint.setDescription('This object gives the fingerprint of the SSH Public Host key stored on the device.')
oriTelnetRADIUSAccessControl = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 7, 10), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTelnetRADIUSAccessControl.setStatus('current')
if mibBuilder.loadTexts: oriTelnetRADIUSAccessControl.setDescription('This object is used to enable/disable RADIUS Based Authentication for telnet based management.')
oriTFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 1), IpAddress().clone(hexValue="0a000002")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriTFTPServerIPAddress.setDescription('This object represents the IP address of the TFTP server.')
oriTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 2), DisplayString().clone('Filename')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPFileName.setStatus('current')
if mibBuilder.loadTexts: oriTFTPFileName.setDescription('This object represents the filename to upload or download to the TFTP server.')
oriTFTPFileType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("config", 1), ("image", 2), ("bootloader", 3), ("license", 4), ("certificate", 5), ("privatekey", 6), ("sshHostPublicKey", 7), ("sshHostPrivateKey", 8), ("cliBatchFile", 9), ("cliBatchLog", 10), ("templog", 11), ("eventlog", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPFileType.setStatus('current')
if mibBuilder.loadTexts: oriTFTPFileType.setDescription('This object is used for the device to know what type of file is being uploaded or downloaded.')
oriTFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("upload", 1), ("download", 2), ("downloadAndReboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPOperation.setStatus('current')
if mibBuilder.loadTexts: oriTFTPOperation.setDescription('This object represents the TFTP operation to be executed. The upload function shall transfer the specified file from the device to the TFTP server. The download function shall transfer the specified file from the TFTP server to the device. The download and reboot option, will perform the download and then reboot the device.')
oriTFTPFileMode = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("bin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPFileMode.setStatus('current')
if mibBuilder.loadTexts: oriTFTPFileMode.setDescription('This objects represents the file transfer mode for the TFTP protocol.')
oriTFTPOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("successful", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTFTPOperationStatus.setStatus('current')
if mibBuilder.loadTexts: oriTFTPOperationStatus.setDescription('This object represents the TFTP operation status. When a TFTP operation is idle (not in progress) this object will be set to 1. When a TFTP operation is in progress this object will be set to 2. When a TFTP operation has been successful this object will be set to 3. When a TFTP operation has failed this object will be set to 4.')
oriTFTPAutoConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 7), ObjStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPAutoConfigStatus.setStatus('current')
if mibBuilder.loadTexts: oriTFTPAutoConfigStatus.setDescription('This objects is used to enable/disable the Auto Configuration feature. This feature allows for a configuration file to be downloaded from a TFTP server so the AP can be configured via a config file.')
oriTFTPAutoConfigFilename = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPAutoConfigFilename.setStatus('current')
if mibBuilder.loadTexts: oriTFTPAutoConfigFilename.setDescription('This object is used to configure the name of the configuration file to be downloaded using the Auto Configuration feature. This filename can be configured directly via the end user or can be retrieved in the DHCP response message when the AP is configured for dynamic IP address assignment type.')
oriTFTPAutoConfigServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPAutoConfigServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriTFTPAutoConfigServerIPAddress.setDescription('This object is used to configure the TFTP server IP Address. This object can be configured directly via the end user or can be retrieved in the DHCP response message when the AP is configured for dynamic IP address assignment type.')
oriTFTPDowngrade = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("rel201", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPDowngrade.setStatus('current')
if mibBuilder.loadTexts: oriTFTPDowngrade.setDescription('On selection of this option, the software will downgrade the configuration file to the specified release from the current release')
oriSerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("baud2400", 1), ("baud4800", 2), ("baud9600", 3), ("baud19200", 4), ("baud38400", 5), ("baud57600", 6))).clone('baud9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSerialBaudRate.setStatus('current')
if mibBuilder.loadTexts: oriSerialBaudRate.setDescription('This object represents the baud rate for the serial interface - the default value is 9600.')
oriSerialDataBits = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8)).clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSerialDataBits.setStatus('current')
if mibBuilder.loadTexts: oriSerialDataBits.setDescription('This object represents the serial interface data bits - the default value is 8.')
oriSerialParity = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSerialParity.setStatus('current')
if mibBuilder.loadTexts: oriSerialParity.setDescription('This object is used for the serial interface parity check - the default value is none.')
oriSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bit1", 1), ("bit1dot5", 2), ("bit2", 3))).clone('bit1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: oriSerialStopBits.setDescription('This object indicates the serial interface stop bits - the default value is 1.')
oriSerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("xonxoff", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSerialFlowControl.setStatus('current')
if mibBuilder.loadTexts: oriSerialFlowControl.setDescription('This object is used for the serial interface flow control - the default value is none.')
oriIAPPStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIAPPStatus.setStatus('current')
if mibBuilder.loadTexts: oriIAPPStatus.setDescription('This object is used to enable or disable the IAPP feature.')
oriIAPPPeriodicAnnounceInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(80, 120, 160, 200))).clone(namedValues=NamedValues(("eighty", 80), ("oneHundredTwenty", 120), ("oneHundredSixty", 160), ("twoHundred", 200))).clone('oneHundredTwenty')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIAPPPeriodicAnnounceInterval.setStatus('current')
if mibBuilder.loadTexts: oriIAPPPeriodicAnnounceInterval.setDescription('This object represents interval in seconds for performing an IAPP announce operation by the device.')
oriIAPPAnnounceResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPAnnounceResponseTime.setStatus('current')
if mibBuilder.loadTexts: oriIAPPAnnounceResponseTime.setDescription('This object indicates the amount of time in seconds the device waits to send an IAPP announce response after an announce request message is sent.')
oriIAPPHandoverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(410, 512, 614, 717, 819))).clone(namedValues=NamedValues(("fourHundredTen", 410), ("fiveHundredTwelve", 512), ("sixHundredFourteen", 614), ("sevenHundredSeventeen", 717), ("eightHundredNineteen", 819))).clone('fiveHundredTwelve')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIAPPHandoverTimeout.setStatus('current')
if mibBuilder.loadTexts: oriIAPPHandoverTimeout.setDescription('This object represents the time in milliseconds the device waits before it resends a handover response message. This object is originally given in kuseconds, but has been converted to milliseconds.')
oriIAPPMaximumHandoverRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIAPPMaximumHandoverRetransmissions.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMaximumHandoverRetransmissions.setDescription('This object indicates the maximum amount of retransmission sent by the device for a handover request message.')
oriIAPPAnnounceRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPAnnounceRequestSent.setStatus('current')
if mibBuilder.loadTexts: oriIAPPAnnounceRequestSent.setDescription('This object represents the total number of IAPP Announce Request Messages sent since system startup.')
oriIAPPAnnounceRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPAnnounceRequestReceived.setStatus('current')
if mibBuilder.loadTexts: oriIAPPAnnounceRequestReceived.setDescription('This object represents the total number of IAPP Announce Request Messages received since system startup.')
oriIAPPAnnounceResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPAnnounceResponseSent.setStatus('current')
if mibBuilder.loadTexts: oriIAPPAnnounceResponseSent.setDescription('This object represents the total number of IAPP Announce Response Messages sent since system startup.')
oriIAPPAnnounceResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPAnnounceResponseReceived.setStatus('current')
if mibBuilder.loadTexts: oriIAPPAnnounceResponseReceived.setDescription('This object represents the total number of IAPP Announce Response Messages received since system startup.')
oriIAPPHandoverRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPHandoverRequestSent.setStatus('current')
if mibBuilder.loadTexts: oriIAPPHandoverRequestSent.setDescription('This object represents the total number of IAPP Handover Request messages sent since system startup.')
oriIAPPHandoverRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPHandoverRequestReceived.setStatus('current')
if mibBuilder.loadTexts: oriIAPPHandoverRequestReceived.setDescription('This object represents the total number of IAPP Handover Request messages received since system startup.')
oriIAPPHandoverRequestRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPHandoverRequestRetransmissions.setStatus('current')
if mibBuilder.loadTexts: oriIAPPHandoverRequestRetransmissions.setDescription('This object represents the total number of IAPP Handover Request retransmissions since system startup.')
oriIAPPHandoverResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPHandoverResponseSent.setStatus('current')
if mibBuilder.loadTexts: oriIAPPHandoverResponseSent.setDescription('This object represents the total number of IAPP Handover Response messages sent since system startup.')
oriIAPPHandoverResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPHandoverResponseReceived.setStatus('current')
if mibBuilder.loadTexts: oriIAPPHandoverResponseReceived.setDescription('This object represents the total number of IAPP Handover Response messages received since system startup.')
oriIAPPPDUsDropped = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPPDUsDropped.setStatus('current')
if mibBuilder.loadTexts: oriIAPPPDUsDropped.setDescription('This object represents the total number of IAPP packets dropped due to erroneous information within the packet since system startup.')
oriIAPPRoamingClients = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPRoamingClients.setStatus('current')
if mibBuilder.loadTexts: oriIAPPRoamingClients.setDescription('This object represents the total number of client that have roamed from one device to another. This parameter is per device and not a total counter of all the roaming clients for all devices on the network.')
oriIAPPMACIPTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21), )
if mibBuilder.loadTexts: oriIAPPMACIPTable.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTable.setDescription('This table contains a list of devices on the network that support IAPP and have the feature enabled.')
oriIAPPMACIPTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriIAPPMACIPTableIndex"))
if mibBuilder.loadTexts: oriIAPPMACIPTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTableEntry.setDescription('This object represents an entry in the IAPP table, which essentially is a device that supports IAPP and has the feature enabled.')
oriIAPPMACIPTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPMACIPTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTableIndex.setDescription('This object is used as the index for the IAPP MAC-IP table.')
oriIAPPMACIPTableSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPMACIPTableSystemName.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTableSystemName.setDescription('This object represents the System Name of the IAPP enabled device.')
oriIAPPMACIPTableIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPMACIPTableIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTableIPAddress.setDescription('This object represents the IP Address of the IAPP enabled device.')
oriIAPPMACIPTableBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPMACIPTableBSSID.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTableBSSID.setDescription('This object represents the BSSID (MAC address of wireless interface) of the IAPP enabled device.')
oriIAPPMACIPTableESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriIAPPMACIPTableESSID.setStatus('current')
if mibBuilder.loadTexts: oriIAPPMACIPTableESSID.setDescription('This object represents the ESSID (network name) of the IAPP enabled device.')
oriIAPPSendAnnounceRequestOnStart = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIAPPSendAnnounceRequestOnStart.setStatus('current')
if mibBuilder.loadTexts: oriIAPPSendAnnounceRequestOnStart.setDescription('This object is used to determine whether to send announce request on start.')
oriLinkTestTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 1), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestTimeOut.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestTimeOut.setDescription('The value of this object determines the time (in seconds) that a link test will continue without any SNMP requests for a Link Test Table entry. When the time expires the Link Test Table is cleared.')
oriLinkTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 3), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestInterval.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestInterval.setDescription('This object indicates the interval (in milliseconds) between sending link test frames to a station.')
oriLinkTestExplore = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tableTimedOut", 1), ("exploring", 2), ("exploreResultsAvailable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestExplore.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestExplore.setDescription('When this object is set to 2, the device will send out an explore request on all 802.11 interfaces and from the results build the Link Test table. This table is valid only while this object is set to 3.')
oriLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5), )
if mibBuilder.loadTexts: oriLinkTestTable.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestTable.setDescription('This table contains the information for the stations currently associated with the access point.')
oriLinkTestTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriLinkTestTableIndex"))
if mibBuilder.loadTexts: oriLinkTestTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestTableEntry.setDescription('This object represents the entry in the Remote Link Test table.')
oriLinkTestTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestTableIndex.setDescription('This object represents a unique value for each station. The value for each station must remain constant at least from one explore to the next.')
oriLinkTestInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLinkTestInProgress", 1), ("linkTestIinProgress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkTestInProgress.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestInProgress.setDescription('When this object is set to 2 the device will initiate a link test sequence with this station.')
oriLinkTestStationName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestStationName.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestStationName.setDescription('This object identifies the name of the station whom which the link test is being performed.')
oriLinkTestMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestMACAddress.setDescription('This object represents the MAC address that will be mapped to the IP Address of the station.')
oriLinkTestStationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestStationProfile.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestStationProfile.setDescription('This object represents the profile/capabilities for this station.')
oriLinkTestOurCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurCurSignalLevel.setDescription('The current signal level (in dB) for the link test from this station. This object indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriLinkTestOurCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurCurNoiseLevel.setDescription('The current noise level (in dB) for the link test to this station. This object indicates the running average of the local noise level.')
oriLinkTestOurCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurCurSNR.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurCurSNR.setDescription('The current signal to noise ratio for the link test to this station.')
oriLinkTestOurMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMinSignalLevel.setDescription('The minimum signal level during the link test to this station.')
oriLinkTestOurMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMinNoiseLevel.setDescription('The minimum noise level during the link test to this station.')
oriLinkTestOurMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMinSNR.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMinSNR.setDescription('The minimum signal to noise ratio during the link test to this station.')
oriLinkTestOurMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMaxSignalLevel.setDescription('The maximum signal level during the link test to this station.')
oriLinkTestOurMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMaxNoiseLevel.setDescription('The maximum noise level during the link test to this station.')
oriLinkTestOurMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMaxSNR.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMaxSNR.setDescription('The maximum signal to noise ratio during the link test to this station.')
oriLinkTestOurLowFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurLowFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurLowFrameCount.setDescription('The total number of frames sent at 1 Mbit/s speed during the link test to this station.')
oriLinkTestOurStandardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurStandardFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurStandardFrameCount.setDescription('The total number of frames sent at 2 Mbit/s speed during the link test to this station.')
oriLinkTestOurMediumFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurMediumFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurMediumFrameCount.setDescription('The total number of frames sent at 5.5 Mbit/s (for Turbo-8, it is 5 Mbit/s) speed during the link test to this station.')
oriLinkTestOurHighFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestOurHighFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestOurHighFrameCount.setDescription('The total number of frames sent at 11 Mbit/s (for Turbo-8, it is 8 Mbit/s) speed during the link test to this station.')
oriLinkTestHisCurSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisCurSignalLevel.setDescription('The current signal level for the link test to the remote station or access point.')
oriLinkTestHisCurNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisCurNoiseLevel.setDescription('The current noise level for the link test to the remote station or access point device.')
oriLinkTestHisCurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisCurSNR.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisCurSNR.setDescription('The current signal to noise ratio for the link test to the remote station or access point device.')
oriLinkTestHisMinSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMinSignalLevel.setDescription('The minimum signal level during the link test to the remote station or access point device.')
oriLinkTestHisMinNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMinNoiseLevel.setDescription('The minimum noise level during the link test to the remote station or access point device.')
oriLinkTestHisMinSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMinSNR.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMinSNR.setDescription('The minimum signal to noise ratio during the link test to the remote station or access point device.')
oriLinkTestHisMaxSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxSignalLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMaxSignalLevel.setDescription('The maximum signal level during the link test to the remote station or access point device.')
oriLinkTestHisMaxNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxNoiseLevel.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMaxNoiseLevel.setDescription('The maximum noise level during the link test to the remote station or access point device.')
oriLinkTestHisMaxSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMaxSNR.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMaxSNR.setDescription('The maximum signal to noise ratio during the link test to the remote station or access point device.')
oriLinkTestHisLowFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisLowFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisLowFrameCount.setDescription('The total number of frames sent at 1 Mbit/s speed during the link test to the remote station or access point device.')
oriLinkTestHisStandardFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisStandardFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisStandardFrameCount.setDescription('The total number of frames sent at 2 Mbit/s speed during the link test to the remote station or access point device.')
oriLinkTestHisMediumFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisMediumFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisMediumFrameCount.setDescription('The total number of frames sent at 5.5 Mbit/s (for Turbo-8, it is 5 Mbit/s) speed during the link test to the remote station or access point device.')
oriLinkTestHisHighFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestHisHighFrameCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestHisHighFrameCount.setDescription('The total number of frames sent at 11 Mbit/s (for Turbo-8, it is 5 Mbit/s) speed during the link test to the remote station or access point device.')
oriLinkTestInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestInterface.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestInterface.setDescription('This object represents the wireless interface number to which the Client has sent the Explore Response Message.')
oriLinkTestRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 5, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestRadioType.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestRadioType.setDescription('The Wireless Standard for example IEEE 802.11, 802.11b, 802.11a, or 802.11g being used by the remote station.')
oriLinkTestDataRateTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 6), )
if mibBuilder.loadTexts: oriLinkTestDataRateTable.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestDataRateTable.setDescription('This table contains counters for the data rates for the stations currently associated to the access point.')
oriLinkTestDataRateTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 6, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriLinkTestTableIndex"), (0, "ORiNOCO-MIB", "oriLinkTestDataRateTableIndex"))
if mibBuilder.loadTexts: oriLinkTestDataRateTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestDataRateTableEntry.setDescription('This object represents the entry in the Remote Link Test data rate counter table.')
oriLinkTestDataRateTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestDataRateTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestDataRateTableIndex.setDescription('This object is the second index to the Link Test Data Rate Counter Table. The data rates negotiated by the access point and client station will represent an index into this table. The data rates are defined in units of 500 Kbps.')
oriLinkTestDataRateTableRemoteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestDataRateTableRemoteCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestDataRateTableRemoteCount.setDescription('The total number of frames sent at the data rate value of the index during the link test to the remote station or access point device.')
oriLinkTestDataRateTableLocalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 11, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkTestDataRateTableLocalCount.setStatus('current')
if mibBuilder.loadTexts: oriLinkTestDataRateTableLocalCount.setDescription('The total number of frames sent at the data rate value of the index (oriLinkTestDataRateTableindex) during the link test to the client station indenfied by the index (oriLinkTestTableIndex).')
oriLinkIntStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkIntStatus.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntStatus.setDescription('This object is used to enable or disable the link integrity functionality.')
oriLinkIntPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 2), Integer32().clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkIntPollInterval.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntPollInterval.setDescription('This object is used to set the poll interval (in milliseconds) for the link integrity check. The valid values for this objects are multiples of 500 milliseconds, a value of zero is not supported.')
oriLinkIntPollRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkIntPollRetransmissions.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntPollRetransmissions.setDescription('This object is used to set the number of retransmissions for the link integrity check.')
oriLinkIntTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 4), )
if mibBuilder.loadTexts: oriLinkIntTable.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntTable.setDescription('This table contains the target IP addresses in order to perform the link integrity check. This table is limited to 5 entries.')
oriLinkIntTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 4, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriLinkIntTableIndex"))
if mibBuilder.loadTexts: oriLinkIntTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntTableEntry.setDescription('This object identifies the entry in the link integrity target table.')
oriLinkIntTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriLinkIntTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntTableIndex.setDescription('This object is used as an index for the link integrity target table.')
oriLinkIntTableTargetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkIntTableTargetIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntTableTargetIPAddress.setDescription('This object represents the IP address of the target machine for the link integrity check.')
oriLinkIntTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkIntTableComment.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntTableComment.setDescription('This object is used as an optional comment associated to the link integrity table entry.')
oriLinkIntTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriLinkIntTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriLinkIntTableEntryStatus.setDescription('This object is used to enable, disable, or delete an entry in the link integrity table.')
oriUPSDGPRInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriUPSDGPRInterval.setStatus('current')
if mibBuilder.loadTexts: oriUPSDGPRInterval.setDescription('This object is used to set the interval of GPR message (in 5ms step), 0 = disable GPR.')
oriUPSDMaxActiveSU = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriUPSDMaxActiveSU.setStatus('current')
if mibBuilder.loadTexts: oriUPSDMaxActiveSU.setDescription('This object is used to set the maximum actived SU per AP.')
oriUPSDE911Reserved = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriUPSDE911Reserved.setStatus('current')
if mibBuilder.loadTexts: oriUPSDE911Reserved.setDescription('This object is used to set the bandwidth allocated for E911calls.')
oriUPSDRoamingReserved = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriUPSDRoamingReserved.setStatus('current')
if mibBuilder.loadTexts: oriUPSDRoamingReserved.setDescription('This object is used to set the bandwidth allocated for roaming SU.')
oriQoSPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1), )
if mibBuilder.loadTexts: oriQoSPolicyTable.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyTable.setDescription('This table is used to configure Quality of Service policies to be used in the Access Point.')
oriQoSPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriQoSPolicyTableIndex"), (0, "ORiNOCO-MIB", "oriQoSPolicyTableSecIndex"))
if mibBuilder.loadTexts: oriQoSPolicyTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyTableEntry.setDescription('This object represents entries in the QoS Policy Table.')
oriQoSPolicyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSPolicyTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyTableIndex.setDescription('This object is used as the primary index to the QoS Policy Table.')
oriQoSPolicyTableSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSPolicyTableSecIndex.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyTableSecIndex.setDescription('This object is used as the secondary index to the QoS Policy Table.')
oriQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 3), DisplayString32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSPolicyName.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyName.setDescription('This object is used to specify a name for the QoS Policy.')
oriQoSPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inboundLayer2", 1), ("inboundLayer3", 2), ("outboundLayer2", 3), ("outboundLayer3", 4), ("spectralink", 5))).clone('inboundLayer2')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSPolicyType.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyType.setDescription('This object is used to specify the QoS policy type.')
oriQoSPolicyPriorityMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSPolicyPriorityMapping.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyPriorityMapping.setDescription('This object is used to configure the QoS priority mapping. The index from either the QoS 802.1D to 802.1p mapping table or the index from the 802.1D to IP DSCP mapping table should be specified depending on the policy type. For Layer 2 polices, an index from the QoS 802.1D to 802.1p mapping table should be specified. For Layer 3 policies, an index from the QoS 802.1D to IP DSCP mapping table should be specified. If a spectralink policy is configured, then this object is not used.')
oriQoSPolicyMarkingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 6), ObjStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSPolicyMarkingStatus.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyMarkingStatus.setDescription('This object is used to enable or disable QoS markings.')
oriQoSPolicyTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSPolicyTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: oriQoSPolicyTableRowStatus.setDescription('The object is used to configure the QoS Policy Table row status.')
oriQoSDot1DToDot1pMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 2), )
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTable.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTable.setDescription('This table is used to configure Quality of Service mappings between 802.1D and 802.1p priorities.')
oriQoSDot1DToDot1pMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriQoSDot1DToDot1pMappingTableIndex"), (0, "ORiNOCO-MIB", "oriQoSDot1dPriority"))
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTableEntry.setDescription('This object represents entries in the QoS 802.1D to 802.1p Mapping Table.')
oriQoSDot1DToDot1pMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTableIndex.setDescription('This object is used as the primary index to the QoS 802.1D to 802.1p mapping table.')
oriQoSDot1dPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSDot1dPriority.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1dPriority.setDescription('This object is used to specify the 802.1d priority and is used as the secondary index to the 802.1D to 802.1p mapping table.')
oriQoSDot1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSDot1pPriority.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1pPriority.setDescription('This object is used to specify the 802.1D priority to be mapped to a 802.1p priority.')
oriQoSDot1DToDot1pMappingTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToDot1pMappingTableRowStatus.setDescription('The object is used to configure the QoS 802.1D to 802.1p mapping table row status.')
oriQoSDot1DToIPDSCPMappingTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3), )
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTable.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTable.setDescription('This table is used to configure Quality of Service mappings between 802.1D to IP DSCP priorities.')
oriQoSDot1DToIPDSCPMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriQoSDot1DToIPDSCPMappingTableIndex"), (0, "ORiNOCO-MIB", "oriQoSDot1DToIPDSCPPriority"))
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTableEntry.setDescription('This object represents entries in the 802.1D to IP DSCP Mapping Table.')
oriQoSDot1DToIPDSCPMappingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTableIndex.setDescription('This object is used as the primary index to the 802.1D to IP DSCP mapping table.')
oriQoSDot1DToIPDSCPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPPriority.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPPriority.setDescription('This object is used to specify the 802.1D priority and is used as the secondary index to the 802.1D to IP DSCP mapping table.')
oriQoSIPDSCPLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSIPDSCPLowerLimit.setStatus('current')
if mibBuilder.loadTexts: oriQoSIPDSCPLowerLimit.setDescription('This object is used to specify IP DSCP lower limit.')
oriQoSIPDSCPUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSIPDSCPUpperLimit.setStatus('current')
if mibBuilder.loadTexts: oriQoSIPDSCPUpperLimit.setDescription('This object is used to specify IP DSCP upper limit.')
oriQoSDot1DToIPDSCPMappingTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 14, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: oriQoSDot1DToIPDSCPMappingTableRowStatus.setDescription('The object is used to configure the 802.1D to IP DSCP mapping table row status.')
oriDHCPServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerStatus.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerStatus.setDescription('This object indicates if the DHCP server is enabled or disabled in the device.')
oriDHCPServerIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2), )
if mibBuilder.loadTexts: oriDHCPServerIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTable.setDescription('This table contains the pools of IP Addresses that the DHCP server will assign to the DHCP clients. This table is limited to 20.')
oriDHCPServerIPPoolTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriDHCPServerIPPoolTableIndex"))
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableEntry.setDescription('This object represents entries in the DHCP IP Address Pool Table.')
oriDHCPServerIPPoolTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableIndex.setDescription('This object is used as the index for the IP Address Pool table.')
oriDHCPServerIPPoolTableStartIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableStartIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableStartIPAddress.setDescription('This object represents the start IP address for this DHCP IP Address IP Pool Table entry.')
oriDHCPServerIPPoolTableEndIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableEndIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableEndIPAddress.setDescription('This object represents the end IP address for this DHCP IP Address IP Pool Table entry.')
oriDHCPServerIPPoolTableWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableWidth.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableWidth.setDescription('This object represents the width or number of IP Address in the DHCP IP Address Pool table entry.')
oriDHCPServerIPPoolTableDefaultLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3600, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableDefaultLeaseTime.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableDefaultLeaseTime.setDescription('This object represents the default lease time, in seconds, for the IP address assigned by the DHCP server to the DHCP client.')
oriDHCPServerIPPoolTableMaximumLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3600, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableMaximumLeaseTime.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableMaximumLeaseTime.setDescription('This object represents the maximum lease time in seconds for the IP address assigned by the DHCP server to the DHCP client.')
oriDHCPServerIPPoolTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableComment.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableComment.setDescription('This object represents an optional comment for this table entry.')
oriDHCPServerIPPoolTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerIPPoolTableEntryStatus.setDescription('The object indicates the status of the DHCP IP Address Pool Table entry.')
oriDHCPServerDefaultGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerDefaultGatewayIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerDefaultGatewayIPAddress.setDescription('This object represents the IP Address of the gateway or router that the DHCP Server will assign to the DHCP client.')
oriDHCPServerSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriDHCPServerSubnetMask.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerSubnetMask.setDescription('This object represents the subnet mask to be provided to DHCP clients. This object is the same as the subnet mask for the device.')
oriDHCPServerNumIPPoolTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriDHCPServerNumIPPoolTableEntries.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerNumIPPoolTableEntries.setDescription('This object represents the number of entries in the DHCP IP Address Pool Table.')
oriDHCPServerPrimaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerPrimaryDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerPrimaryDNSIPAddress.setDescription('This object represents the primary DNS Server IP Address to be assinged to a DHCP Client.')
oriDHCPServerSecondaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPServerSecondaryDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDHCPServerSecondaryDNSIPAddress.setDescription('This object represents the secondary DNS Server IP Address to be assinged to a DHCP Client.')
oriDHCPClientID = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPClientID.setStatus('current')
if mibBuilder.loadTexts: oriDHCPClientID.setDescription('This object represents the DHCP client ID.')
oriDHCPClientInterfaceBitmask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 2, 2), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPClientInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriDHCPClientInterfaceBitmask.setDescription('This object indicates to which interface a DHCP Request in sent when the unit is in routing mode')
oriDHCPRelayStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPRelayStatus.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayStatus.setDescription('This object is used to enable and disable the DHCP Relay functionality.')
oriDHCPRelayDHCPServerTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 2), )
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTable.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTable.setDescription('This table contains a list of DHCP servers to which the DHCP Agent will communicate with.')
oriDHCPRelayDHCPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriDHCPRelayDHCPServerTableIndex"))
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableEntry.setDescription('This object represents and entry in the DHCP Server table.')
oriDHCPRelayDHCPServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableIndex.setDescription('This object is used as the index to this table. This table is limited to 10 entries.')
oriDHCPRelayDHCPServerTableIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableIpAddress.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableIpAddress.setDescription('This object represents the IP address of the DHCP server that shall receive DHCP requests from the device.')
oriDHCPRelayDHCPServerTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableComment.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableComment.setDescription('This object represents an optional comment in order to provide additional information or a unique identifier for the DHCP server (for example the server system name).')
oriDHCPRelayDHCPServerTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 15, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriDHCPRelayDHCPServerTableEntryStatus.setDescription('This object is used to enable, disable, delete or create an entry in the DHCP Server Table.')
oriHTTPInterfaceBitmask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 1), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriHTTPInterfaceBitmask.setDescription('This object is used to control interface access for HTTP based management.')
oriHTTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPPassword.setStatus('current')
if mibBuilder.loadTexts: oriHTTPPassword.setDescription('This object represents the login password in order to manage the device via a standard web browser. This object should be treated as write-only and returned as asterisks.')
oriHTTPPort = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPPort.setStatus('current')
if mibBuilder.loadTexts: oriHTTPPort.setDescription('This object represents the TCP/IP port by which the HTTP server will be accessible.')
oriHTTPWebSitenameTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4), )
if mibBuilder.loadTexts: oriHTTPWebSitenameTable.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSitenameTable.setDescription('This table is used to store the different website interfaces stored in the device. Different interfaces can be used to support multiple languages, user levels (novice, expert), etc.')
oriHTTPWebSitenameTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriHTTPWebSitenameTableIndex"))
if mibBuilder.loadTexts: oriHTTPWebSitenameTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSitenameTableEntry.setDescription('This object represents an entry is the HTTP website name table.')
oriHTTPWebSitenameTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriHTTPWebSitenameTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSitenameTableIndex.setDescription('This objects represents the index to the website interface table.')
oriHTTPWebSiteFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriHTTPWebSiteFilename.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSiteFilename.setDescription('This object represents the filename under which the website interface is stored in the device.')
oriHTTPWebSiteLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriHTTPWebSiteLanguage.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSiteLanguage.setDescription('This object represents the language of the website interface.')
oriHTTPWebSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriHTTPWebSiteDescription.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSiteDescription.setDescription('This object provides a description for the website interface.')
oriHTTPWebSitenameTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPWebSitenameTableStatus.setStatus('current')
if mibBuilder.loadTexts: oriHTTPWebSitenameTableStatus.setDescription('This object is used to enable, disable, or delete a website interface file.')
oriHTTPRefreshDelay = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPRefreshDelay.setStatus('current')
if mibBuilder.loadTexts: oriHTTPRefreshDelay.setDescription('This object is used for the automatic refresh delay for the website pages.')
oriHTTPHelpInformationLink = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPHelpInformationLink.setStatus('current')
if mibBuilder.loadTexts: oriHTTPHelpInformationLink.setDescription('This object is used to configure the link in the web interface for where help information can be retrieved.')
oriHTTPSSLStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 7), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPSSLStatus.setStatus('current')
if mibBuilder.loadTexts: oriHTTPSSLStatus.setDescription('This object is used to enable or disable SSL on HTTP based management.')
oriHTTPSSLPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPSSLPassphrase.setStatus('current')
if mibBuilder.loadTexts: oriHTTPSSLPassphrase.setDescription('This object is used to specify the SSL certificate passphrase on HTTP based management. This object should be treated as write-only and returned as asterisks.')
oriHTTPSetupWizardStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPSetupWizardStatus.setStatus('current')
if mibBuilder.loadTexts: oriHTTPSetupWizardStatus.setDescription('This object is used to enable or disable the HTT setup wizard. The user can manually disable this functionality or when the setup wizard completes it process successfully it sets this object to disable.')
oriHTTPRADIUSAccessControl = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 16, 10), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriHTTPRADIUSAccessControl.setStatus('current')
if mibBuilder.loadTexts: oriHTTPRADIUSAccessControl.setDescription('This object is used to enable/disable RADIUS Based Authentication for HTTP based management.')
oriWDSSetupTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 1), )
if mibBuilder.loadTexts: oriWDSSetupTable.setStatus('current')
if mibBuilder.loadTexts: oriWDSSetupTable.setDescription('This table is used in to configure the WDS feature in the device.')
oriWDSSetupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ORiNOCO-MIB", "oriWDSSetupTablePortIndex"))
if mibBuilder.loadTexts: oriWDSSetupTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWDSSetupTableEntry.setDescription('This object represents an entry in the WDS table. Note this table is index by ifIndex and WDS table index.')
oriWDSSetupTablePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriWDSSetupTablePortIndex.setStatus('current')
if mibBuilder.loadTexts: oriWDSSetupTablePortIndex.setDescription('This object represents the WDS port number.')
oriWDSSetupTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWDSSetupTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriWDSSetupTableEntryStatus.setDescription('This object is used to enable or disable a WDS table entry (link).')
oriWDSSetupTablePartnerMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 1, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWDSSetupTablePartnerMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriWDSSetupTablePartnerMACAddress.setDescription('This object represents the partner MAC address for a WDS table entry (link).')
oriWDSSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 2), )
if mibBuilder.loadTexts: oriWDSSecurityTable.setStatus('current')
if mibBuilder.loadTexts: oriWDSSecurityTable.setDescription('This table is used in to configure the WDS security modes for all entries in the WDS table.')
oriWDSSecurityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriWDSSecurityTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriWDSSecurityTableEntry.setDescription('This object represents an entry in the WDS security table. Note this table is index by ifIndex since the security configuration will apply for all the WDS links per interface.')
oriWDSSecurityTableSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("none", 1), ("wep", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWDSSecurityTableSecurityMode.setStatus('current')
if mibBuilder.loadTexts: oriWDSSecurityTableSecurityMode.setDescription('This object is used to configure the WDS security mode. Currently the supported WDS security modes are none and wep.')
oriWDSSecurityTableEncryptionKey0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 17, 2, 1, 2), WEPKeyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWDSSecurityTableEncryptionKey0.setStatus('current')
if mibBuilder.loadTexts: oriWDSSecurityTableEncryptionKey0.setDescription('This object represents the WDS Encryption Key 0. When the WDS security mode is configured to wep, this object must be configured to a valid value. This object should be treated as write-only and returned as asterisks.')
oriTrapVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1))
oriGenericTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriGenericTrapVariable.setStatus('current')
if mibBuilder.loadTexts: oriGenericTrapVariable.setDescription('This object is used to provide additional information on traps.')
oriTrapVarMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarMACAddress.setDescription('This object is used to store the MAC address of the device that has sent a trap.')
oriTrapVarTFTPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarTFTPIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarTFTPIPAddress.setDescription('This object is used to store the IP Address of the TFTP server.')
oriTrapVarTFTPFilename = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarTFTPFilename.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarTFTPFilename.setDescription('This object is used to store the name of the file on which the TFTP operation has occurred.')
oriTrapVarTFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarTFTPOperation.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarTFTPOperation.setDescription('This object is used to store the TFTP operation that failed, either download or upload.')
oriTrapVarUnauthorizedManagerIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarUnauthorizedManagerIPaddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarUnauthorizedManagerIPaddress.setDescription('This object is used to store the IP address of the unauthorized manager that has attempted to manage the device.')
oriTrapVarFailedAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarFailedAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarFailedAuthenticationType.setDescription('This trap variable is used to specify the client authentication method/type that failed. The authentication methods/types are dependant on the device and can range from the following: - MAC Access Control Table - RADIUS MAC Authentication - 802.1x Authentication specifying the EAP-Type - WORP Mutual Authentication - SSID Authorization Failure specifying the SSID - VLAN ID Authorization Failure specifying the VLAN ID')
oriTrapVarUnAuthorizedManagerCount = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarUnAuthorizedManagerCount.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarUnAuthorizedManagerCount.setDescription('This object represents a counter for the number of unauthorized SNMP managers that have attempted to modify and/or view the devices setup. When this number is incremented a trap should be sent out notifying the trap host(s) that an unauthorized station has attempted to configure or monitor the device the count should also be sent out in the trap message.')
oriTrapVarTaskSuspended = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarTaskSuspended.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarTaskSuspended.setDescription('This object is used to inform what task has been suspended on the device.')
oriTrapVarUnauthorizedClientMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 17), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarUnauthorizedClientMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarUnauthorizedClientMACAddress.setDescription('This object is used to store the MAC Address of an unauthorized client station.')
oriTrapVarWirelessCard = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pcCardA", 1), ("pcCardB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarWirelessCard.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarWirelessCard.setDescription('This object is used to determine on which Wireless Card, PC Card A or PC Card B, a wireless TRAP has occured on.')
oriTrapVarInterface = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarInterface.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarInterface.setDescription('This object is used to store the interface number.')
oriTrapVarBatchCLIFilename = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarBatchCLIFilename.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarBatchCLIFilename.setDescription('This object is used to store filename used for Batch CLI execution.')
oriTrapVarBatchCLIMessage = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarBatchCLIMessage.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarBatchCLIMessage.setDescription('This object is used to store message from Batch CLI execution.')
oriTrapVarBatchCLILineNumber = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarBatchCLILineNumber.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarBatchCLILineNumber.setDescription('This object is used to store line number of command executed in Batch CLI.')
oriTrapVarDHCPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarDHCPServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarDHCPServerIPAddress.setDescription('This object is used to store the DHCP Server IP Address from which the access point has received an IP address as a result of the a DHCP client request.')
oriTrapVarIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarIPAddress.setDescription('This object is a trap variable/object to store an IP address.')
oriTrapVarSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarSubnetMask.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarSubnetMask.setDescription('This object is a trap variable/object to store a subnet mask.')
oriTrapVarDefaultRouterIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriTrapVarDefaultRouterIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriTrapVarDefaultRouterIPAddress.setDescription('This object is a trap variable/object to store a default router or gateway IP address.')
oriConfigurationTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriConfigurationTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriConfigurationTrapsStatus.setDescription('This object is used to enable or disable the configuration related traps.')
oriSecurityTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriSecurityTrapsStatus.setDescription('This object is used to enable or disable the security related traps.')
oriWirelessIfTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWirelessIfTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfTrapsStatus.setDescription('This object is used to enable or disable the wireless interface/card related traps.')
oriOperationalTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriOperationalTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriOperationalTrapsStatus.setDescription('This object is used to enable or disable the operational related traps.')
oriFlashMemoryTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriFlashMemoryTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriFlashMemoryTrapsStatus.setDescription('This object is used to enable or disable the flash memory related traps.')
oriTFTPTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTFTPTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriTFTPTrapsStatus.setDescription('This object is used to enable or disable the TFTP related traps.')
oriTrapsImageStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriTrapsImageStatus.setStatus('current')
if mibBuilder.loadTexts: oriTrapsImageStatus.setDescription('This object is used to enable or disable the Image related traps.')
oriADSLIfTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriADSLIfTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriADSLIfTrapsStatus.setDescription('This object is used to enable or disable the ADSL interface related traps.')
oriWORPTrapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriWORPTrapsStatus.setStatus('current')
if mibBuilder.loadTexts: oriWORPTrapsStatus.setDescription('This object is used to enable or disable the WORP related traps.')
oriProxyARPStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriProxyARPStatus.setStatus('current')
if mibBuilder.loadTexts: oriProxyARPStatus.setDescription('This object is used to enable/disable the Proxy ARP functionality in the device.')
oriIPARPFilteringStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIPARPFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: oriIPARPFilteringStatus.setDescription('This object is used to enable/disable the IP/ARP functionality in the device.')
oriIPARPFilteringIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 19, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIPARPFilteringIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriIPARPFilteringIPAddress.setDescription('This object is used to specify the IP/ARP Filtering address in the device.')
oriIPARPFilteringSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 19, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriIPARPFilteringSubnetMask.setStatus('current')
if mibBuilder.loadTexts: oriIPARPFilteringSubnetMask.setDescription('This object is used to specify the IP/ARP Subnet Mask in the device.')
oriSpanningTreeStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSpanningTreeStatus.setStatus('current')
if mibBuilder.loadTexts: oriSpanningTreeStatus.setDescription('This object is used to enable/disable the spanning tree protocol in the device.')
oriSecurityConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dot1x", 2), ("mixedWepAnddot1x", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityConfiguration.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfiguration.setDescription('This object represents the supported security configuration options. This object has been deprecated.')
oriSecurityEncryptionKeyLengthTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 2), )
if mibBuilder.loadTexts: oriSecurityEncryptionKeyLengthTable.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityEncryptionKeyLengthTable.setDescription('This table is used to specify the encryption key length for the wireless interface(s). This table has been deprecated.')
oriSecurityEncryptionKeyLengthTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriSecurityEncryptionKeyLengthTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityEncryptionKeyLengthTableEntry.setDescription('This object represents an entry in the encryption key length table. This object has been deprecated.')
oriSecurityEncryptionKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sixtyFourBits", 1), ("oneHundredTwentyEightBits", 2))).clone('sixtyFourBits')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityEncryptionKeyLength.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityEncryptionKeyLength.setDescription('This object represents the encryption key length, the supported key lengths are 64 bits (40 + 24 for IV), and 128 bits (104 + 24 for IV). This object has been deprecated.')
oriSecurityRekeyingInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityRekeyingInterval.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityRekeyingInterval.setDescription('This object represents the encryption rekeying interval in seconds. This object has been deprecated.')
oriRADStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADStatus.setStatus('current')
if mibBuilder.loadTexts: oriRADStatus.setDescription('This object allows to enable or disable the RAD service in the device.')
oriRADInterval = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 1440)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADInterval.setStatus('current')
if mibBuilder.loadTexts: oriRADInterval.setDescription('This object is used to identify the interval at which the RAD feature will initialize. The units of this object is minutes.')
oriRADInterfaceBitmask = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 3), InterfaceBitmask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriRADInterfaceBitmask.setStatus('current')
if mibBuilder.loadTexts: oriRADInterfaceBitmask.setDescription('This object is used to configure the interface(s) on which the RAD feature will operate on.')
oriRADLastSuccessfulScanTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADLastSuccessfulScanTime.setStatus('current')
if mibBuilder.loadTexts: oriRADLastSuccessfulScanTime.setDescription('This object is the number of seconds that have elapsed since the last successful RAD scan since the AP has started up.')
oriRADAccessPointCount = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADAccessPointCount.setStatus('current')
if mibBuilder.loadTexts: oriRADAccessPointCount.setDescription('This object represents the number of access points that were discovered since the last RAD scan.')
oriRADScanResultsTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 6), )
if mibBuilder.loadTexts: oriRADScanResultsTable.setStatus('current')
if mibBuilder.loadTexts: oriRADScanResultsTable.setDescription('This table is used to store the RAD scan results. Each entry represents an access point scanned in the network.')
oriRADScanResultsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 6, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRADScanResultsTableIndex"))
if mibBuilder.loadTexts: oriRADScanResultsTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRADScanResultsTableEntry.setDescription('This object represents an entry in the RAD scan results table.')
oriRADScanResultsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADScanResultsTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriRADScanResultsTableIndex.setDescription('This object is used as the index to the scan results table.')
oriRADScanResultsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 6, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADScanResultsMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriRADScanResultsMACAddress.setDescription('This object represents the MAC address of the access point detected during a RAD scan.')
oriRADScanResultsFrequencyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRADScanResultsFrequencyChannel.setStatus('current')
if mibBuilder.loadTexts: oriRADScanResultsFrequencyChannel.setDescription('This object represents the frequency channel of the access point.')
oriRogueScanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 1), )
if mibBuilder.loadTexts: oriRogueScanConfigTable.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanConfigTable.setDescription('This table is used to configure the Rogue Scan feature per wireless network interface card.')
oriRogueScanConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriRogueScanConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanConfigTableEntry.setDescription('This object represents an entry in the Rogue Scan Config Table.')
oriRogueScanConfigTableScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bkScanMode", 1), ("contScanMode", 2))).clone('bkScanMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanConfigTableScanMode.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanConfigTableScanMode.setDescription('This object is used to configure the scan mode for the wireless NIC.')
oriRogueScanConfigTableScanCycleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanConfigTableScanCycleTime.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanConfigTableScanCycleTime.setDescription('This object is used to configure the rogue scan cycle time for the wireless NIC.')
oriRogueScanConfigTableScanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 1, 1, 3), ObjStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanConfigTableScanStatus.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanConfigTableScanStatus.setDescription('This object is used to enable/disable rogue scan on the wireless NIC.')
oriRogueScanStationCountWirelessCardA = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanStationCountWirelessCardA.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanStationCountWirelessCardA.setDescription("This object represents the number of stations that were discovered/detected on the device's wireless NIC A.")
oriRogueScanStationCountWirelessCardB = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanStationCountWirelessCardB.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanStationCountWirelessCardB.setDescription("This object represents the number of stations that were discovered/detected on the device's wireless NIC B.")
oriRogueScanResultsTableAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 7200)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanResultsTableAgingTime.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsTableAgingTime.setDescription('This object represents the aging time for the entries in RogueScanResultsTable, after which the entries are removed from RogueScanResultsTable.')
oriRogueScanResultsTableClearEntries = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanResultsTableClearEntries.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsTableClearEntries.setDescription('This object is used to remove the content/entries of RogueScanResultsTable. When this object is set, the content of the table shall be cleared.')
oriRogueScanResultsNotificationMode = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noNotification", 1), ("notifyAP", 2), ("notifyClient", 3), ("notifyAll", 4))).clone('notifyAll')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanResultsNotificationMode.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsNotificationMode.setDescription('This object is used to configure the trap/notification mode for detected stations during Rogue Scan.')
oriRogueScanResultsTrapReportType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reportSinceLastScan", 1), ("reportSinceStartOfScan", 2))).clone('reportSinceLastScan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriRogueScanResultsTrapReportType.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsTrapReportType.setDescription('This object is used to configure the trap/notification report type for detected stations during Rogue Scan.')
oriRogueScanResultsTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8), )
if mibBuilder.loadTexts: oriRogueScanResultsTable.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsTable.setDescription('This table is used to store the rogue scan results. Each entry represents a rogue wireless station detected in the network.')
oriRogueScanResultsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriRogueScanResultsTableIndex"))
if mibBuilder.loadTexts: oriRogueScanResultsTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsTableEntry.setDescription('This object represents an entry in the rogue scan results table.')
oriRogueScanResultsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanResultsTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsTableIndex.setDescription('This object is used as the index to the rogue scan results table.')
oriRogueScanResultsStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("infrastructureClient", 2), ("accessPoint", 3), ("ibssClient", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanResultsStationType.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsStationType.setDescription('This object represents the type of station detected during a rogue scan.')
oriRogueScanResultsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanResultsMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsMACAddress.setDescription('This object represents the MAC address of the station detected during a rogue scan.')
oriRogueScanResultsFrequencyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanResultsFrequencyChannel.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsFrequencyChannel.setDescription('This object represents the frequency channel on which the rogue wireless stations was detected.')
oriRogueScanResultsSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanResultsSNR.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsSNR.setDescription('This object represents the signal to noise ration (SNR) for the station detected during a rogue scan.')
oriRogueScanResultsBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 8, 8, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriRogueScanResultsBSSID.setStatus('current')
if mibBuilder.loadTexts: oriRogueScanResultsBSSID.setDescription('This object represents BSSID of the station detected during a rogue scan.')
oriSecurityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 5), )
if mibBuilder.loadTexts: oriSecurityConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfigTable.setDescription('This table is used to specify the security configuration for the wireless interface(s) in the access point.')
oriSecurityConfigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: oriSecurityConfigTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfigTableEntry.setDescription('This object represents an entry in the security configuration table.')
oriSecurityConfigTableSupportedSecurityModes = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSecurityConfigTableSupportedSecurityModes.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfigTableSupportedSecurityModes.setDescription('This object is used to provide information on the supported security modes by the wireless interface(s). The possible security modes can be: - None: no security mode enabled. - dot1x: 802.1x authentication enabled. - mixed: mixed WEP and 802.1x. - wpa: WiFi Protected Access enabled. - wpa-psk: WiFi Protected Access with Preshared Keys enabled.')
oriSecurityConfigTableSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("dot1x", 2), ("mixed", 3), ("wpa", 4), ("wpa-psk", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityConfigTableSecurityMode.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfigTableSecurityMode.setDescription('This object is used to configure the security mode. The supported security modes are: - None: no security mode enabled. - dot1x: 802.1x authentication enabled. - mixed: mixed WEP and 802.1x. - wpa: WiFi Protected Access enabled. - wpa-psk: WiFi Protected Access with Preshared Keys enabled.')
oriSecurityConfigTableRekeyingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityConfigTableRekeyingInterval.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfigTableRekeyingInterval.setDescription('This object represents the encryption rekeying interval in seconds.')
oriSecurityConfigTableEncryptionKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sixtyFourBits", 1), ("oneHundredTwentyEightBits", 2), ("oneHundredFiftyTwoBits", 3))).clone('sixtyFourBits')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityConfigTableEncryptionKeyLength.setStatus('deprecated')
if mibBuilder.loadTexts: oriSecurityConfigTableEncryptionKeyLength.setDescription('This object represents the encryption key length, the supported key lengths are 64 bits (40 + 24 for IV), 128 bits (104 + 24 for IV), and 152 bits (128 + 24 for IV).')
oriSecurityHwConfigResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 6), ObjStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityHwConfigResetStatus.setStatus('current')
if mibBuilder.loadTexts: oriSecurityHwConfigResetStatus.setDescription('This object is used to enable/disable the status of configuration reset using the hardware reset button.')
oriSecurityHwConfigResetPassword = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityHwConfigResetPassword.setStatus('current')
if mibBuilder.loadTexts: oriSecurityHwConfigResetPassword.setDescription('This object represents the configuration reset password. This object should be treated as write-only and returned as asterisks.')
oriSecurityProfileTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9), )
if mibBuilder.loadTexts: oriSecurityProfileTable.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTable.setDescription('This table is used to configure a security profile. A security profile can consist of single or muliple security modes.')
oriSecurityProfileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriSecurityProfileTableIndex"), (0, "ORiNOCO-MIB", "oriSecurityProfileTableSecModeIndex"))
if mibBuilder.loadTexts: oriSecurityProfileTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEntry.setDescription('This object represents an entry in the security profile table. This table is index by two indices - the first/primary index defines the security profile, the second index defines a single or multiple security policies per profile. The primary index is used in the wireless interface SSID table to specify which security profile to use per SSID. The admin/user can configure policies for different wireless station types by specifying a authentication and cipher mode/type. Below are examples of how to configure different STA types. STA Type Authentication Mode Cipher Mode ======== =================== =========== Non Secure None None WEP None WEP (64, 128, 152) 802.1x 802.1x WEP (64, 128) WPA 802.1x TKIP WPA-PSK PSK TKIP 802.11i 802.1x AES 802.11i-PSK PSK AES In the case of None, WEP, WPA-PSK, and 802.11i-PSK, MAC Access Control Table/List and RADIUS based MAC access control can be used to authenticate the wireless STA.')
oriSecurityProfileTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSecurityProfileTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableIndex.setDescription('This object represents the primary index of the Security Policy Table. This index is used to specify which security policy will be used per SSID, in the Wireless Interface SSID Table. A security policy can consist of a single or multiple security modes.')
oriSecurityProfileTableSecModeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSecurityProfileTableSecModeIndex.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableSecModeIndex.setDescription('This object is the secondary index to the Security Policy Table. This index will represent the different security modes per security profile.')
oriSecurityProfileTableAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dot1x", 2), ("psk", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSecurityProfileTableAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableAuthenticationMode.setDescription('This object is used to specify the authentication mode for the security mode.')
oriSecurityProfileTableCipherMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("tkip", 3), ("aes", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSecurityProfileTableCipherMode.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableCipherMode.setDescription('This object is used to specify the cipher mode/type for the security mode.')
oriSecurityProfileTableEncryptionKey0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 5), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey0.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey0.setDescription('This object represents Encryption Key 0. This object should be treated as write-only and returned as asterisks.')
oriSecurityProfileTableEncryptionKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 6), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey1.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey1.setDescription('This object represents Encryption Key 1. This object should be treated as write-only and returned as asterisks.')
oriSecurityProfileTableEncryptionKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 7), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey2.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey2.setDescription('This object represents Encryption Key 2. This object should be treated as write-only and returned as asterisks.')
oriSecurityProfileTableEncryptionKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 8), WEPKeyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey3.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKey3.setDescription('This object represents Encryption Key 3. This object should be treated as write-only and returned as asterisks.')
oriSecurityProfileTableEncryptionTxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionTxKey.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionTxKey.setDescription('This object indicates which encryption key is used to encrypt data that is sent via the wireless interfaces. The default value for this object should be key 0.')
oriSecurityProfileTableEncryptionKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sixtyFourBits", 1), ("oneHundredTwentyEightBits", 2), ("oneHundredFiftyTwoBits", 3))).clone('sixtyFourBits')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKeyLength.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableEncryptionKeyLength.setDescription('This object represents the encryption key length, the supported key lengths are 64 bits (40 + 24 for IV), 128 bits (104 + 24 for IV), and 152 bits (128 + 24 for IV).')
oriSecurityProfileTablePSKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTablePSKValue.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTablePSKValue.setDescription('The Pre-Shared Key (PSK) for when RSN in PSK mode is the selected authentication suite. In that case, the PMK will obtain its value from this object. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero.')
oriSecurityProfileTablePSKPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTablePSKPassPhrase.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTablePSKPassPhrase.setDescription('The PSK, for when RSN in PSK mode is the selected authentication suite, is configured by oriWirelessIfSSIDTablePSKValue. An alternative manner of setting the PSK uses the password-to-key algorithm defined in the standard. This variable provides a means to enter a pass phrase. When this object is written, the RSN entity shall use the password-to-key algorithm specified in the standard to derive a pre-shared and populate oriWirelessIfSSIDTablePSKValue with this key. This object is logically write-only. Reading this variable shall return unsuccessful status or null or zero.')
oriSecurityProfileTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 9, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oriSecurityProfileTableStatus.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileTableStatus.setDescription('This object represents the Table row status.')
oriSecurityProfileFourWEPKeySupport = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 21, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSecurityProfileFourWEPKeySupport.setStatus('current')
if mibBuilder.loadTexts: oriSecurityProfileFourWEPKeySupport.setDescription('This object is used to configure the security profile to use with four WEP keys. Currently only one security profile can be active which supports four WEP keys. Therefore this object is used to specify which profile will be using four WEP keys. The purpose of this object is to support legacy products/users that are still using four WEP keys.')
oriPPPoEStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoEStatus.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEStatus.setDescription('This object allows to enable or disable the PPPoE service in the device.')
oriPPPoEMaximumNumberOfSessions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 2), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoEMaximumNumberOfSessions.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMaximumNumberOfSessions.setDescription('This object represents the maximum number of PPPoE sessions.')
oriPPPoENumberOfActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoENumberOfActiveSessions.setStatus('current')
if mibBuilder.loadTexts: oriPPPoENumberOfActiveSessions.setDescription('This object represents the number of active PPPoE sessions.')
oriPPPoESessionTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4), )
if mibBuilder.loadTexts: oriPPPoESessionTable.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionTable.setDescription('This table is used to configure the PPPoE session information.')
oriPPPoESessionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriPPPoESessionTableIndex"))
if mibBuilder.loadTexts: oriPPPoESessionTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionTableEntry.setDescription('This object represents an entry in the PPPoE session table.')
oriPPPoESessionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionTableIndex.setDescription('This object is used as the index to the PPPoE Session Table.')
oriPPPoESessionWANConnectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alwaysOn", 1), ("onDemand", 2), ("manual", 3))).clone('alwaysOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionWANConnectMode.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionWANConnectMode.setDescription('This object represents the WAN connect mode.')
oriPPPoESessionIdleTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionIdleTimeOut.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionIdleTimeOut.setDescription('This object is used as a timeout for the PPPoE session to be disconnected from public side if idle for specified amount of time.')
oriPPPoESessionConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionConnectTime.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionConnectTime.setDescription('This object identifies the PPPoE session connect time.')
oriPPPoESessionConnectTimeLimitation = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionConnectTimeLimitation.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionConnectTimeLimitation.setDescription('This object represents the maximum connection time per session.')
oriPPPoESessionConfigPADITxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionConfigPADITxInterval.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionConfigPADITxInterval.setDescription('This object represents the time in seconds between PADI retries from the Host.')
oriPPPoESessionConfigPADIMaxNumberOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionConfigPADIMaxNumberOfRetries.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionConfigPADIMaxNumberOfRetries.setDescription('This object represents the number of times the Host sends a PADI.')
oriPPPoESessionBindingsNumberPADITx = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberPADITx.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberPADITx.setDescription('This object represents the number of PPPoE PADI transmitted.')
oriPPPoESessionBindingsNumberPADTTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberPADTTx.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberPADTTx.setDescription('This object represents the number of PPPoE PADT transmitted.')
oriPPPoESessionBindingsNumberServiceNameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberServiceNameErrors.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberServiceNameErrors.setDescription('This object represents the number of PPPoE Service-Name-Error tags received/transmitted.')
oriPPPoESessionBindingsNumberACSystemErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberACSystemErrors.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberACSystemErrors.setDescription('This object represents the number of PPPoE AC-System-Error tags received/transmitted.')
oriPPPoESessionBindingsNumberGenericErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberGenericErrorsRx.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberGenericErrorsRx.setDescription('This object represents the number of PPPoE Generic-Error tags received.')
oriPPPoESessionBindingsNumberGenericErrorsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberGenericErrorsTx.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberGenericErrorsTx.setDescription('This object represents the number of PPPoE Generic Error tags transmitted.')
oriPPPoESessionBindingsNumberMalformedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberMalformedPackets.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberMalformedPackets.setDescription('This object represents teh number of malformed PPPoE packets received.')
oriPPPoESessionBindingsNumberMultiplePADORx = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberMultiplePADORx.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionBindingsNumberMultiplePADORx.setDescription("This object represents the number of PPPoE multiple PADO's received after a PADI request.")
oriPPPoESessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionUserName.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionUserName.setDescription('This object represents the PPPoE user name.')
oriPPPoESessionUserNamePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionUserNamePassword.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionUserNamePassword.setDescription('This object represents the PPPoE user name password. This object should be treated as write-only and returned as asterisks.')
oriPPPoESessionServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionServiceName.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionServiceName.setDescription('This object represents the PPPoE service name.')
oriPPPoESessionISPName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionISPName.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionISPName.setDescription('This object represents the PPPoE ISP name.')
oriPPPoESessionTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionTableStatus.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionTableStatus.setDescription('This object represents the PPPoE ISP table entry status.')
oriPPPoESessionWANManualConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoESessionWANManualConnect.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionWANManualConnect.setDescription('This object is used to connect of disconnect the PPPoE session when the connect mode is set to manual.')
oriPPPoESessionWANConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("null", 1), ("start", 2), ("addingStack", 3), ("stackAdded", 4), ("stackAddError", 5), ("connectFailed", 6), ("authFailed", 7), ("up", 8), ("down", 9), ("suspended", 10), ("unknown", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoESessionWANConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: oriPPPoESessionWANConnectionStatus.setDescription('This object represents the state of the PPPoE WAN connection interface.')
oriPPPoEMACtoSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 5), )
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTable.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTable.setDescription('This table is used to map client MAC address to PPPoE Session information for an ISP.')
oriPPPoEMACtoSessionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 5, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriPPPoEMACtoSessionTableIndex"))
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableEntry.setDescription('This object represents an entry in the PPPoE MAC to Session table.')
oriPPPoEMACtoSessionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableIndex.setDescription('This object is used as the index to the PPPoE Session Table.')
oriPPPoEMACtoSessionTableMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 5, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableMACAddress.setDescription('This object represents the client MAC address.')
oriPPPoEMACtoSessionTableISPName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableISPName.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableISPName.setDescription('This object represents the ISP name.')
oriPPPoEMACtoSessionTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 22, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableStatus.setStatus('current')
if mibBuilder.loadTexts: oriPPPoEMACtoSessionTableStatus.setDescription('This object represents the PPPoE MAC to Session table entry status.')
oriConfigResetToDefaults = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bridgeMode", 1), ("gatewayMode", 2), ("gatewayModeDHCPClient", 3), ("gatewayModePPPoE", 4))).clone('gatewayMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriConfigResetToDefaults.setStatus('current')
if mibBuilder.loadTexts: oriConfigResetToDefaults.setDescription('This object represents the quickstart modes that the device can be configured in.')
oriConfigFileTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 2), )
if mibBuilder.loadTexts: oriConfigFileTable.setStatus('current')
if mibBuilder.loadTexts: oriConfigFileTable.setDescription('This table contains the current configuration files stored in the device. This table is used to manage the different configuration files.')
oriConfigFileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 2, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriConfigFileTableIndex"))
if mibBuilder.loadTexts: oriConfigFileTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriConfigFileTableEntry.setDescription('This object represents an entry in the configuration file table.')
oriConfigFileTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriConfigFileTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriConfigFileTableIndex.setDescription('This object represents the index to the configuration file table.')
oriConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriConfigFileName.setStatus('current')
if mibBuilder.loadTexts: oriConfigFileName.setDescription('This object represents the configuration file name.')
oriConfigFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriConfigFileStatus.setStatus('current')
if mibBuilder.loadTexts: oriConfigFileStatus.setDescription('This object represents the status of the configuration file. The possible options are: - Enable: active configuration file - Disable: inactive configuration file - Delete: in order to delete the configuration file')
oriConfigSaveFile = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriConfigSaveFile.setStatus('current')
if mibBuilder.loadTexts: oriConfigSaveFile.setDescription('This object saves the configuration to the specified name.')
oriConfigSaveKnownGood = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("saveKnownGood", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriConfigSaveKnownGood.setStatus('current')
if mibBuilder.loadTexts: oriConfigSaveKnownGood.setDescription('This object is used to identify the last know good configuration file used. Setting a value of 1 to this objecgt saves the current configuration as the known good configuration.')
oriDNSRedirectStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSRedirectStatus.setStatus('current')
if mibBuilder.loadTexts: oriDNSRedirectStatus.setDescription('This object is used to enable or disable the DNS Redirect functionality.')
oriDNSRedirectMaxResponseWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 2), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSRedirectMaxResponseWaitTime.setStatus('current')
if mibBuilder.loadTexts: oriDNSRedirectMaxResponseWaitTime.setDescription('This object represents the maximum response wait time for DNS redirect. The units for this object is seconds.')
oriDNSPrimaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSPrimaryDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDNSPrimaryDNSIPAddress.setDescription('This object represents the Primary DNS IP Address.')
oriDNSSecondaryDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSSecondaryDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDNSSecondaryDNSIPAddress.setDescription('This object represents the Secondary DNS IP Address.')
oriDNSClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSClientStatus.setStatus('current')
if mibBuilder.loadTexts: oriDNSClientStatus.setDescription('This object is used to enable or disable the DNS Client feature.')
oriDNSClientPrimaryServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSClientPrimaryServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDNSClientPrimaryServerIPAddress.setDescription('This object represents the Primary Server DNS IP Address.')
oriDNSClientSecondaryServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSClientSecondaryServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriDNSClientSecondaryServerIPAddress.setDescription('This object represents the Secondary Server DNS IP Address.')
oriDNSClientDefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 24, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDNSClientDefaultDomainName.setStatus('current')
if mibBuilder.loadTexts: oriDNSClientDefaultDomainName.setDescription('This object represents the default domain name for the DNS Client.')
oriAOLNATALGStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriAOLNATALGStatus.setStatus('current')
if mibBuilder.loadTexts: oriAOLNATALGStatus.setDescription('This object is used to enable/disable the AOL NAT Application Level Gateway (ALG) support.')
oriNATStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStatus.setStatus('current')
if mibBuilder.loadTexts: oriNATStatus.setDescription('This object is used to enable/disable the NAT feature.')
oriNATType = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATType.setStatus('current')
if mibBuilder.loadTexts: oriNATType.setDescription("A Bit Mask documenting the NAT device's actual configuration according to natTypeMask above. Its value may be one and only one of the options below: - Basic-NAT (Bit 0) - NAPT (Bit 1) - Bi-directional-NAT (Bit 2) - Twice-NAT (Bit 3) - RSA-IP-Server (Bit 4) - RSAP-IP-Server (Bit 5) - Bit 0, if set, indicates that Basic-NAT is configured. - Bit 1, if set, indicates that NAPT is configured. - Bit 2, if set, indicates that Bi-directional-NAT is configured. - Bit 3, if set, indicates that Twice-NAT is configured. - Bit 4, if set, indicates that RSA-IP-Server is configured. - Bit 5, if set, indicates that RSAP-IP-Server is configured.")
oriNATStaticBindStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticBindStatus.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticBindStatus.setDescription('This object is used to enable or disable static bind entries on the NAT device.')
oriNATPublicIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriNATPublicIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriNATPublicIPAddress.setDescription('This object is used to provide information on the NAT public IP Address.')
oriNATStaticIPBindTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 5), )
if mibBuilder.loadTexts: oriNATStaticIPBindTable.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticIPBindTable.setDescription('This table contains NAT IP bind specific information.')
oriNATStaticIPBindTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 5, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriNATStaticIPBindTableIndex"))
if mibBuilder.loadTexts: oriNATStaticIPBindTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticIPBindTableEntry.setDescription('This object is an entry in the NAT Static IP Bind Table.')
oriNATStaticIPBindTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriNATStaticIPBindTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticIPBindTableIndex.setDescription('This object is used as the index for the NAT static IP bind table.')
oriNATStaticIPBindLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticIPBindLocalAddress.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticIPBindLocalAddress.setDescription('This object represents the local IP address for this NAT Static IP bind Table entry.')
oriNATStaticIPBindRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticIPBindRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticIPBindRemoteAddress.setDescription('This object represents the remote IP address for this NAT Static IP bind Table entry.')
oriNATStaticIPBindTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticIPBindTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticIPBindTableEntryStatus.setDescription('The object indicates the status of the NAT Static IP Bind Table entry.')
oriNATStaticPortBindTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6), )
if mibBuilder.loadTexts: oriNATStaticPortBindTable.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindTable.setDescription('This table is used to configure NAT Port bind specific information.')
oriNATStaticPortBindTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriNATStaticPortBindTableIndex"))
if mibBuilder.loadTexts: oriNATStaticPortBindTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindTableEntry.setDescription('This object represents an entry in the NAT Static Port Bind Table.')
oriNATStaticPortBindTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriNATStaticPortBindTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindTableIndex.setDescription('This object is used as the index for the NAT static Port bind table.')
oriNATStaticPortBindLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticPortBindLocalAddress.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindLocalAddress.setDescription('This object represents the local IP address for this NAT Static Port bind Table entry.')
oriNATStaticPortBindStartPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticPortBindStartPortNumber.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindStartPortNumber.setDescription('This object represents the start port number for this NAT Static Port bind Table entry.')
oriNATStaticPortBindEndPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticPortBindEndPortNumber.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindEndPortNumber.setDescription('This object represents the end port number for this NAT Static Port bind Table entry.')
oriNATStaticPortBindPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticPortBindPortType.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindPortType.setDescription('This object represents the port type for this NAT Static Port bind Table entry.')
oriNATStaticPortBindTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 26, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriNATStaticPortBindTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriNATStaticPortBindTableEntryStatus.setDescription('The object indicates the status of the NAT Static Port Bind Table entry.')
oriSpectraLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 29, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSpectraLinkStatus.setStatus('current')
if mibBuilder.loadTexts: oriSpectraLinkStatus.setDescription('This object is used to enable or disable the SpectraLink VoIP feature.')
oriSpectraLinkLegacyDeviceSupport = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 29, 2), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSpectraLinkLegacyDeviceSupport.setStatus('current')
if mibBuilder.loadTexts: oriSpectraLinkLegacyDeviceSupport.setDescription('This object is used to enable/disable SpectraLink VoIP support for legacy SpectraLink devices/phones.')
oriVLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30, 1), ObjStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriVLANStatus.setStatus('current')
if mibBuilder.loadTexts: oriVLANStatus.setDescription('This object is used to enable or disable the VLAN feature.')
oriVLANMgmtIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30, 2), VlanId().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriVLANMgmtIdentifier.setStatus('current')
if mibBuilder.loadTexts: oriVLANMgmtIdentifier.setDescription('This object represents the VLAN management Identifier (ID).')
oriVLANIDTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30, 3), )
if mibBuilder.loadTexts: oriVLANIDTable.setStatus('deprecated')
if mibBuilder.loadTexts: oriVLANIDTable.setDescription('This table is used to configure the VLAN IDs for the device. This table has been deprecated.')
oriVLANIDTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30, 3, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriVLANIDTableIndex"))
if mibBuilder.loadTexts: oriVLANIDTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: oriVLANIDTableEntry.setDescription('This object represents an entry in the respective table. In this case each table entry represents a VLAN ID. This object has been deprecated.')
oriVLANIDTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriVLANIDTableIndex.setStatus('deprecated')
if mibBuilder.loadTexts: oriVLANIDTableIndex.setDescription('This object represents the index to the VLAN ID Table. This object has been deprecated.')
oriVLANIDTableIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 30, 3, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriVLANIDTableIdentifier.setStatus('deprecated')
if mibBuilder.loadTexts: oriVLANIDTableIdentifier.setDescription('This object represents the VLAN Identifier (ID). This object has been deprecated.')
oriDMZHostTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31, 1), )
if mibBuilder.loadTexts: oriDMZHostTable.setStatus('current')
if mibBuilder.loadTexts: oriDMZHostTable.setDescription("A table containing DMZ host IP information. Only if the system is in Gateway mode, and the NAT is enabled, and this table has valid 'enabled' entry, the DMZ takes effect.")
oriDMZHostTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriDMZHostTableIndex"))
if mibBuilder.loadTexts: oriDMZHostTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriDMZHostTableEntry.setDescription('This object represents an entry in the DMZ host IP Table.')
oriDMZHostTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriDMZHostTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriDMZHostTableIndex.setDescription('This object is used as the index for the DMZ host IP Table.')
oriDMZHostTableHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDMZHostTableHostIP.setStatus('current')
if mibBuilder.loadTexts: oriDMZHostTableHostIP.setDescription('This object represents the DMZ host IP address.')
oriDMZHostTableComment = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDMZHostTableComment.setStatus('current')
if mibBuilder.loadTexts: oriDMZHostTableComment.setDescription('This objecgt is used for an optional comment associated to the DMZ host IP Table entry.')
oriDMZHostTableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriDMZHostTableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: oriDMZHostTableEntryStatus.setDescription('The object indicates the status of the DMZ host IP Table entry.')
oriOEMName = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriOEMName.setStatus('current')
if mibBuilder.loadTexts: oriOEMName.setDescription('This object is used to specify the OEM name.')
oriOEMHomeUrl = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriOEMHomeUrl.setStatus('current')
if mibBuilder.loadTexts: oriOEMHomeUrl.setDescription('This object is used to specify the OEM home URL.')
oriOEMProductName = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriOEMProductName.setStatus('current')
if mibBuilder.loadTexts: oriOEMProductName.setDescription('This object represents the product name. It is the same name as shown in all management Web pages.')
oriOEMProductModel = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriOEMProductModel.setStatus('current')
if mibBuilder.loadTexts: oriOEMProductModel.setDescription('This object represents the product model.')
oriOEMLogoImageFile = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriOEMLogoImageFile.setStatus('current')
if mibBuilder.loadTexts: oriOEMLogoImageFile.setDescription('This object represents the name of logo image file.')
oriOEMNoNavLogoImageFile = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 32, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriOEMNoNavLogoImageFile.setStatus('current')
if mibBuilder.loadTexts: oriOEMNoNavLogoImageFile.setDescription('This object represents the name of no nav. logo image file.')
oriStationStatTable = MibTable((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1), )
if mibBuilder.loadTexts: oriStationStatTable.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTable.setDescription('This table contains wireless stations statistics.')
oriStationStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1), ).setIndexNames((0, "ORiNOCO-MIB", "oriStationStatTableIndex"))
if mibBuilder.loadTexts: oriStationStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableEntry.setDescription('This object represents an entry in the respective table. In this case each table entry represents a wireless station.')
oriStationStatTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableIndex.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableIndex.setDescription('This object represents the index of the stations statistics table. This table is limited to 500 entries.')
oriStationStatTableMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableMACAddress.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableMACAddress.setDescription('This object represents the MAC address of the station for which the statistics are gathered.')
oriStationStatTableIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableIPAddress.setDescription('This object represents the IP address of the stations for which the statistics are gathered. If the IP address is not known, 0.0.0.0 will be returned.')
oriStationStatTableInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInterface.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInterface.setDescription('This object represents the number of the interface on which the station is last seen.')
oriStationStatTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableName.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableName.setDescription('This object represents the name of the station. If the name is not known, an empty string will be returned.')
oriStationStatTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sta", 1), ("wds", 2), ("worpBase", 3), ("worpSatellite", 4), ("norc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableType.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableType.setDescription('This object represents the type of station.')
oriStationStatTableMACProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ieee802dot11", 1), ("ieee802dot11a", 2), ("ieee802dot11b", 3), ("worp", 4), ("ieee802dot11g", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableMACProtocol.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableMACProtocol.setDescription('This object represents the MAC protocol for this station.')
oriStationStatTableAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableAdminStatus.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableAdminStatus.setDescription('This object represents the administrative state for the station. The testing(3) state indicates that no operational packets can be passed.')
oriStationStatTableOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableOperStatus.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableOperStatus.setDescription('This object represents the current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
oriStationStatTableLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableLastChange.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableLastChange.setDescription('This object represents the value of sysUpTime at the time the station entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
oriStationStatTableLastState = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("registering", 2), ("authenticating", 3), ("registered", 4), ("timeout", 5), ("aborded", 6), ("rejected", 7), ("linktest", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableLastState.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableLastState.setDescription('This object represents the last state of this station.')
oriStationStatTableInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInOctets.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInOctets.setDescription('The total number of octets received from the station, including framing characters.')
oriStationStatTableInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInUcastPkts.setDescription('This object represents the number of unicast packets from the station that are further processed by either by the bridge/router or by the internal host.')
oriStationStatTableInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInNUcastPkts.setDescription('This object represents the number of non-unicast packets (i.e. broadcast or multicast) from the station that are further processed by either by the bridge/router or by the internal host.')
oriStationStatTableInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInDiscards.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInDiscards.setDescription('This object represents the number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to the internal bridge/router or the internal host. One possible reason for discarding such a packet could be to lack of buffer space.')
oriStationStatTableOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableOutOctets.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableOutOctets.setDescription('This object represents the total number of octets send to the station, including framing characters.')
oriStationStatTableOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableOutUcastPkts.setDescription('This object represents the number of packets that the internal bridge/router or the internal host requested be transmitted to the station, including those that were discarded or not sent.')
oriStationStatTableOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableOutNUcastPkts.setDescription('This object represents the number of packets that the internal bridge/router or the internal host requested be transmitted to a non-unicast (i.e. broadcast or multicast) address that includes the station. This counter includes those packets that were discarded or not sent.')
oriStationStatTableOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableOutDiscards.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableOutDiscards.setDescription('This object represents the number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to the internal bridge/router or the internal host. One possible reason for discarding such a packet could be to lack of buffer space.')
oriStationStatTableInSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInSignal.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInSignal.setDescription('This object represents the current signal level calculated over the inbound packets from this station. This variable indicates the running average of the local signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriStationStatTableInNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableInNoise.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableInNoise.setDescription('This object represents the current noise level calculated over the inbound packets from this station. This variable indicates the running average of the local noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriStationStatTableRemoteSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableRemoteSignal.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableRemoteSignal.setDescription('This object represents the current remote signal level calculated over the inbound packets from this station on the remote station. This variable indicates the running average of the remote signal level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriStationStatTableRemoteNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-102, -10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableRemoteNoise.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableRemoteNoise.setDescription('This object represents the current remote noise level calculated over the inbound packets from this station on the remote station. This variable indicates the running average of the remote noise level using the algorithm (3/4*oldvalue + 1/4*newvalue).')
oriStationStatTableLastInPktTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 1, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatTableLastInPktTime.setStatus('current')
if mibBuilder.loadTexts: oriStationStatTableLastInPktTime.setDescription('This object represents the value of sysUpTime at the time the last packet from the remote station was received.')
oriStationStatStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriStationStatStatus.setStatus('current')
if mibBuilder.loadTexts: oriStationStatStatus.setDescription('This object is used to enable or disable the monitoring of the wireless station statistics.')
oriStationStatNumberOfClients = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 33, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriStationStatNumberOfClients.setStatus('current')
if mibBuilder.loadTexts: oriStationStatNumberOfClients.setDescription('This object represents the number of active wireless clients associated to the access point.')
oriSNTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPStatus.setStatus('current')
if mibBuilder.loadTexts: oriSNTPStatus.setDescription('This object is used to enable or disable the SNTP functionality.')
oriSNTPPrimaryServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPPrimaryServerNameOrIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriSNTPPrimaryServerNameOrIPAddress.setDescription('This object represents the primary SNTP server IP address or host name.')
oriSNTPSecondaryServerNameOrIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPSecondaryServerNameOrIPAddress.setStatus('current')
if mibBuilder.loadTexts: oriSNTPSecondaryServerNameOrIPAddress.setDescription('This object represents the secondary SNTP server IP address or host name.')
oriSNTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))).clone(namedValues=NamedValues(("dateline", 1), ("samoa", 2), ("hawaii", 3), ("alaska", 4), ("pacific-us", 5), ("mountain-us", 6), ("arizona", 7), ("central-us", 8), ("mexico-city", 9), ("eastern-us", 10), ("indiana", 11), ("atlantic-canada", 12), ("santiago", 13), ("newfoundland", 14), ("brasilia", 15), ("buenos-aires", 16), ("mid-atlantic", 17), ("azores", 18), ("london", 19), ("western-europe", 20), ("eastern-europe", 21), ("cairo", 22), ("russia-iraq", 23), ("iran", 24), ("arabian", 25), ("afghanistan", 26), ("pakistan", 27), ("india", 28), ("bangladesh", 29), ("burma", 30), ("bangkok", 31), ("australia-wt", 32), ("hong-kong", 33), ("beijing", 34), ("japan-korea", 35), ("australia-ct", 36), ("australia-et", 37), ("central-pacific", 38), ("new-zealand", 39), ("tonga", 40), ("western-samoa", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPTimeZone.setStatus('current')
if mibBuilder.loadTexts: oriSNTPTimeZone.setDescription('This parameter is used for the device to know how to adjust GMT for local time.')
oriSNTPDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oriSNTPDateAndTime.setStatus('current')
if mibBuilder.loadTexts: oriSNTPDateAndTime.setDescription('This object represents the Date and Time. The format of this object is the same as the DateAndTime textual convention.')
oriSNTPDayLightSavingTime = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("plus-two", 1), ("plus-one", 2), ("unchanged", 3), ("minus-one", 4), ("minus-two", 5))).clone('unchanged')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPDayLightSavingTime.setStatus('current')
if mibBuilder.loadTexts: oriSNTPDayLightSavingTime.setDescription('This parameter indicates the number of hours to adjust for Daylight Saving Time.')
oriSNTPYear = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPYear.setStatus('current')
if mibBuilder.loadTexts: oriSNTPYear.setDescription('This object represents the year. This object can be used to manually configure the year in case the Date and Time is not retrieved from an SNTP server.')
oriSNTPMonth = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPMonth.setStatus('current')
if mibBuilder.loadTexts: oriSNTPMonth.setDescription('This object represents the month. This object can be used to manually configure the month in case the Date and Time is not retrieved from an SNTP server.')
oriSNTPDay = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPDay.setStatus('current')
if mibBuilder.loadTexts: oriSNTPDay.setDescription('This object represents the day of the month. This object can be used to manually configure the year in case the Date and Time is not retrieved from an SNTP server.')
oriSNTPHour = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPHour.setStatus('current')
if mibBuilder.loadTexts: oriSNTPHour.setDescription('This object represents the hour of day. This object can be used to manually configure the hour in case the Date and Time is not retrieved from an SNTP server.')
oriSNTPMinutes = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPMinutes.setStatus('current')
if mibBuilder.loadTexts: oriSNTPMinutes.setDescription('This object represents the minutes. This object can be used to manually configure the minutes in case the Date and Time is not retrieved from an SNTP server.')
oriSNTPSeconds = MibScalar((1, 3, 6, 1, 4, 1, 11898, 2, 1, 34, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oriSNTPSeconds.setStatus('current')
if mibBuilder.loadTexts: oriSNTPSeconds.setDescription('This object represents the number of seconds. This object can be used to manually configure the seconds in case the Date and Time is not retrieved from an SNTP server.')
oriConfigurationTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2))
if mibBuilder.loadTexts: oriConfigurationTraps.setStatus('current')
if mibBuilder.loadTexts: oriConfigurationTraps.setDescription('This is the configuration related trap/notification group.')
oriTrapDNSIPNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 3)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriTrapDNSIPNotConfigured.setStatus('current')
if mibBuilder.loadTexts: oriTrapDNSIPNotConfigured.setDescription('This traps is generated when the DNS IP Address has not been configured. Trap Severity Level: Major.')
oriTrapRADIUSAuthenticationNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 5)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriTrapRADIUSAuthenticationNotConfigured.setStatus('current')
if mibBuilder.loadTexts: oriTrapRADIUSAuthenticationNotConfigured.setDescription('This trap is generated when the RADIUS authentication information has not been configured. Trap Severity Level: Major.')
oriTrapRADIUSAccountingNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 6)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriTrapRADIUSAccountingNotConfigured.setStatus('current')
if mibBuilder.loadTexts: oriTrapRADIUSAccountingNotConfigured.setDescription('This trap is generated when the RADIUS accounting information has not been configured. Trap Severity Level: Major.')
oriTrapDuplicateIPAddressEncountered = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 7)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriTrapDuplicateIPAddressEncountered.setStatus('current')
if mibBuilder.loadTexts: oriTrapDuplicateIPAddressEncountered.setDescription('This trap is generated when the device has encountered another network device with he same IP Address. Trap Severity Level: Major.')
oriTrapDHCPRelayServerTableNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 8))
if mibBuilder.loadTexts: oriTrapDHCPRelayServerTableNotConfigured.setStatus('current')
if mibBuilder.loadTexts: oriTrapDHCPRelayServerTableNotConfigured.setDescription('This trap is generated when the DHCP relay agent server table is empty or not configured. Trap Severity Level: Major.')
oriTrapWORPIfNetworkSecretNotConfigured = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 9))
if mibBuilder.loadTexts: oriTrapWORPIfNetworkSecretNotConfigured.setStatus('current')
if mibBuilder.loadTexts: oriTrapWORPIfNetworkSecretNotConfigured.setDescription('This trap is generated when the system network authentication shared secret is not configured. Trap Severity Level: Major.')
oriTrapVLANIDInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 10)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriWirelessIfNetworkName"), ("ORiNOCO-MIB", "oriVLANIDTableIdentifier"))
if mibBuilder.loadTexts: oriTrapVLANIDInvalidConfiguration.setStatus('current')
if mibBuilder.loadTexts: oriTrapVLANIDInvalidConfiguration.setDescription('This trap is generated when a VLAN ID configuration is invalid. Trap Severity Level: Major.')
oriTrapAutoConfigFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 11)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTFTPAutoConfigFilename"), ("ORiNOCO-MIB", "oriTFTPAutoConfigServerIPAddress"))
if mibBuilder.loadTexts: oriTrapAutoConfigFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapAutoConfigFailure.setDescription('This trap is generated when the auto configuration failed. Trap Severity Level: Minor.')
oriTrapBatchExecFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 12)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarBatchCLIFilename"), ("ORiNOCO-MIB", "oriTrapVarBatchCLILineNumber"), ("ORiNOCO-MIB", "oriTrapVarBatchCLIMessage"))
if mibBuilder.loadTexts: oriTrapBatchExecFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapBatchExecFailure.setDescription('This trap is generated when the CLI Batch execution fails for the following reasons. - Illegal Command is parsed in the CLI Batch File. - Execution error is encountered while executing CLI Batch file. - Bigger File Size than 100 Kbytes Trap Severity Level: Minor.')
oriTrapBatchFileExecStart = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 13)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarBatchCLIFilename"))
if mibBuilder.loadTexts: oriTrapBatchFileExecStart.setStatus('current')
if mibBuilder.loadTexts: oriTrapBatchFileExecStart.setDescription('This trap is generated when the CLI Batch execution begins after file is uploaded. Trap Severity Level: Minor.')
oriTrapBatchFileExecEnd = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 2, 0, 14)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarBatchCLIFilename"), ("ORiNOCO-MIB", "oriTrapVarBatchCLIMessage"))
if mibBuilder.loadTexts: oriTrapBatchFileExecEnd.setStatus('current')
if mibBuilder.loadTexts: oriTrapBatchFileExecEnd.setDescription('This trap is generated when the execution of CLI Batch File Ends. Trap Severity Level: Minor.')
oriSecurityTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3))
if mibBuilder.loadTexts: oriSecurityTraps.setStatus('current')
if mibBuilder.loadTexts: oriSecurityTraps.setDescription('This is the security related trap/notification group.')
oriTrapInvalidEncryptionKey = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 1)).setObjects(("ORiNOCO-MIB", "oriTrapVarUnauthorizedClientMACAddress"))
if mibBuilder.loadTexts: oriTrapInvalidEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: oriTrapInvalidEncryptionKey.setDescription('This trap is generated when an invalid encryption key has been detected. Trap Severity Level: Critical.')
oriTrapAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 2)).setObjects(("ORiNOCO-MIB", "oriTrapVarUnauthorizedClientMACAddress"), ("ORiNOCO-MIB", "oriTrapVarFailedAuthenticationType"))
if mibBuilder.loadTexts: oriTrapAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapAuthenticationFailure.setDescription('This trap is generated when a client authentication failure has occurred. The authentication failures can range from: - MAC Access Control Table - RADIUS MAC Authentication - 802.1x Authentication specifying the EAP-Type - WORP Mutual Authentication - SSID Authorization Failure specifying the SSID - VLAN ID Authorization Failure specifying the VLAN ID Trap Severity Level: Major.')
oriTrapUnauthorizedManagerDetected = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 3)).setObjects(("ORiNOCO-MIB", "oriTrapVarUnauthorizedManagerIPaddress"), ("ORiNOCO-MIB", "oriTrapVarUnAuthorizedManagerCount"))
if mibBuilder.loadTexts: oriTrapUnauthorizedManagerDetected.setStatus('current')
if mibBuilder.loadTexts: oriTrapUnauthorizedManagerDetected.setDescription('This trap is generated when an unauthorized manager has attempted to view and/or modify parameters. Trap Severity Level: Major.')
oriTrapRADScanComplete = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 4)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapRADScanComplete.setStatus('current')
if mibBuilder.loadTexts: oriTrapRADScanComplete.setDescription('This trap is generated when an a RAD scan is successfully completed. Trap Severity Level: Informational.')
oriTrapRADScanResults = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 5)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapRADScanResults.setStatus('current')
if mibBuilder.loadTexts: oriTrapRADScanResults.setDescription('This trap is generated in order to provide information on the RAD Scan results. Trap Severity Level: Informational.')
oriTrapRogueScanStationDetected = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 6)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapRogueScanStationDetected.setStatus('current')
if mibBuilder.loadTexts: oriTrapRogueScanStationDetected.setDescription('This trap is generated when a rogue station is detected. Trap Severity Level: Informational.')
oriTrapRogueScanCycleComplete = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 3, 0, 7)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapRogueScanCycleComplete.setStatus('current')
if mibBuilder.loadTexts: oriTrapRogueScanCycleComplete.setDescription('This trap is generated when an a rogue scan is successfully completed. Trap Severity Level: Informational.')
oriWirelessIfTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4))
if mibBuilder.loadTexts: oriWirelessIfTraps.setStatus('current')
if mibBuilder.loadTexts: oriWirelessIfTraps.setDescription('This is the wireless interface or wireless card related trap/notification group.')
oriTrapWLCNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 1)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCNotPresent.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCNotPresent.setDescription('This trap is generated when a wireless interface/card is not present in the device. Trap Severity Level: Informational.')
oriTrapWLCFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 2)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCFailure.setDescription('This trap is generated when a general failure has occured with the wireless interface/card. Trap Severity Level: Critical.')
oriTrapWLCRemoval = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 3)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCRemoval.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCRemoval.setDescription('This trap is generated when the wireless interface/card has been removed from the device. Trap Severity Level: Critical.')
oriTrapWLCIncompatibleFirmware = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 4)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCIncompatibleFirmware.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCIncompatibleFirmware.setDescription('This trap is generated when the firmware of the wireless interface/card is incompatible. Trap Severity Level: Critical.')
oriTrapWLCVoltageDiscrepancy = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 5)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCVoltageDiscrepancy.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCVoltageDiscrepancy.setDescription('This trap is generated when a non 5 volt card or 3.3 volt wireless interface/card is inserted in the device. Trap Severity Level: Critical.')
oriTrapWLCIncompatibleVendor = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 6)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCIncompatibleVendor.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCIncompatibleVendor.setDescription('This trap is generated when an incompatible wireless vendor card is inserted or present in the device. Trap Severity Level: Critical.')
oriTrapWLCFirmwareDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 7)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWLCFirmwareDownloadFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCFirmwareDownloadFailure.setDescription('This trap is generated when a failure occurs during the firmware download process of the wireless interface/card. Trap Severity Level: Critical.')
oriTrapWLCFirmwareFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 8)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"), ("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapWLCFirmwareFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCFirmwareFailure.setDescription('This trap is generated when a failure occurs in the wireless interface/card firmware. Trap Severity Level: Critical.')
oriTrapWLCRadarInterferenceDetected = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 4, 0, 9)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"), ("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapWLCRadarInterferenceDetected.setStatus('current')
if mibBuilder.loadTexts: oriTrapWLCRadarInterferenceDetected.setDescription('This trap is generated when radar interference is detected on the channel being used by the wireless interface. The generic trap varible provides information on the channel where interference was detected. Trap Severity Level: Major.')
oriOperationalTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5))
if mibBuilder.loadTexts: oriOperationalTraps.setStatus('current')
if mibBuilder.loadTexts: oriOperationalTraps.setDescription('This is the operational related trap group group.')
oriTrapUnrecoverableSoftwareErrorDetected = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 1)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"), ("ORiNOCO-MIB", "oriTrapVarTaskSuspended"))
if mibBuilder.loadTexts: oriTrapUnrecoverableSoftwareErrorDetected.setStatus('current')
if mibBuilder.loadTexts: oriTrapUnrecoverableSoftwareErrorDetected.setDescription('This trap is generated when an unrecoverable software error has been detected. This trap can signify that a problem/error has occurred with one or more software modules. This error would cause the software watch dog timer to expire which would then cause the device to reboot. Trap Severity Level: Critical.')
oriTrapRADIUSServerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 2)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapRADIUSServerNotResponding.setStatus('current')
if mibBuilder.loadTexts: oriTrapRADIUSServerNotResponding.setDescription('This trap is generated when no response is received from the RADIUS server(s) for authentication requests sent from the RADIUS client in the device. Trap Severity Level: Major.')
oriTrapModuleNotInitialized = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 3)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapModuleNotInitialized.setStatus('current')
if mibBuilder.loadTexts: oriTrapModuleNotInitialized.setDescription('This trap is generated when a certain software or hardware module has not been initialized or failed to be initialized. Trap Severity Level: Major.')
oriTrapDeviceRebooting = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 5)).setObjects(("ORiNOCO-MIB", "oriTrapVarMACAddress"), ("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriSystemReboot"))
if mibBuilder.loadTexts: oriTrapDeviceRebooting.setStatus('current')
if mibBuilder.loadTexts: oriTrapDeviceRebooting.setDescription('This trap is generated when the device has received a request to be rebooted. Trap Severity Level: Informational.')
oriTrapTaskSuspended = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 6)).setObjects(("ORiNOCO-MIB", "oriTrapVarTaskSuspended"))
if mibBuilder.loadTexts: oriTrapTaskSuspended.setStatus('current')
if mibBuilder.loadTexts: oriTrapTaskSuspended.setDescription('This trap is generated when a task in the device has suspended. Trap Severity Level: Critical.')
oriTrapBootPFailed = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 7)).setObjects(("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriTrapBootPFailed.setStatus('current')
if mibBuilder.loadTexts: oriTrapBootPFailed.setDescription('This trap is generated when a response to the BootP request is not received, hence the access point device is not dynamically assigned an IP Address. Trap Severity Level: Major.')
oriTrapDHCPFailed = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 8)).setObjects(("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriTrapDHCPFailed.setStatus('current')
if mibBuilder.loadTexts: oriTrapDHCPFailed.setDescription('This trap is generated when a response to the DHCP client request is not received, hence the access point device is not dynamically assigned an IP Address. Trap Severity Level: Major.')
oriTrapDNSClientLookupFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 9)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapDNSClientLookupFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapDNSClientLookupFailure.setDescription('This trap is generated when the DNS client attempts to resolve a specified hostname (DNS lookup) and a failure occurs. This could be the result of the DNS server being unreachable or returning an error for the hostname lookup. This trap specified the hostname that was being resolved. Trap Severity Level: Major.')
oriTrapSNTPFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 10))
if mibBuilder.loadTexts: oriTrapSNTPFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapSNTPFailure.setDescription('This trap is generated when SNTP service is enabled and no response is received from the configured SNTP servers. Trap Severity Level: Major.')
oriTrapMaximumNumberOfSubscribersReached = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 11))
if mibBuilder.loadTexts: oriTrapMaximumNumberOfSubscribersReached.setStatus('current')
if mibBuilder.loadTexts: oriTrapMaximumNumberOfSubscribersReached.setDescription('This trap is generated when maximum number of suscribers has been reached. Trap Severity Level: Major.')
oriTrapSSLInitializationFailure = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 12))
if mibBuilder.loadTexts: oriTrapSSLInitializationFailure.setStatus('current')
if mibBuilder.loadTexts: oriTrapSSLInitializationFailure.setDescription('This trap is generated when the SSL initialization fails. Trap Severity Level: Major.')
oriTrapWirelessServiceShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 13)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWirelessServiceShutdown.setStatus('current')
if mibBuilder.loadTexts: oriTrapWirelessServiceShutdown.setDescription('This trap is generated when the Wireless Service Shutdown object is configured to down; in other words the wireless interface has shutdown services for wireless clients. Trap Severity Level: Informational.')
oriTrapWirelessServiceResumed = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 14)).setObjects(("ORiNOCO-MIB", "oriTrapVarWirelessCard"))
if mibBuilder.loadTexts: oriTrapWirelessServiceResumed.setStatus('current')
if mibBuilder.loadTexts: oriTrapWirelessServiceResumed.setDescription('This trap is generated when the Wireless Service Shutdown object is configured to up; in other words the wireless interface has resumed service and is ready for wireless client connections. Trap Severity Level: Informational.')
oriTrapSSHInitializationStatus = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 15)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapSSHInitializationStatus.setStatus('current')
if mibBuilder.loadTexts: oriTrapSSHInitializationStatus.setDescription('This trap is generated to provide information on SSH initialization. Trap Severity Level: Major.')
oriTrapVLANIDUserAssignment = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 16)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapVLANIDUserAssignment.setStatus('current')
if mibBuilder.loadTexts: oriTrapVLANIDUserAssignment.setDescription('This trap is generated when a user gets assigned a VLAN ID from the RADIUS server. Trap Severity Level: Informational.')
oriTrapDHCPLeaseRenewal = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 17)).setObjects(("ORiNOCO-MIB", "oriTrapVarDHCPServerIPAddress"), ("ORiNOCO-MIB", "oriTrapVarIPAddress"), ("ORiNOCO-MIB", "oriTrapVarSubnetMask"), ("ORiNOCO-MIB", "oriTrapVarDefaultRouterIPAddress"))
if mibBuilder.loadTexts: oriTrapDHCPLeaseRenewal.setStatus('current')
if mibBuilder.loadTexts: oriTrapDHCPLeaseRenewal.setDescription('This trap is generated when the access point does a DHCP renewal request and receives new information from the DHCP server. The variables/objects bound to this trap will provide information on the DHCP server IP address that replied to the DHCP client request, and the IP address, subnet mask, and gateway IP address returned from the DHCP server. Trap Severity Level: Informational.')
oriTrapTemperatureAlert = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 5, 0, 18)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"), ("ORiNOCO-MIB", "oriUnitTemp"))
if mibBuilder.loadTexts: oriTrapTemperatureAlert.setStatus('current')
if mibBuilder.loadTexts: oriTrapTemperatureAlert.setDescription('This trap is generated when the temperature crosses the limit of -30 to 60 degrees celsius. Trap Severity Level: Major.')
oriFlashTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 6))
if mibBuilder.loadTexts: oriFlashTraps.setStatus('current')
if mibBuilder.loadTexts: oriFlashTraps.setDescription('This is the flash memory related trap group.')
oriTrapFlashMemoryEmpty = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 6, 0, 1))
if mibBuilder.loadTexts: oriTrapFlashMemoryEmpty.setStatus('current')
if mibBuilder.loadTexts: oriTrapFlashMemoryEmpty.setDescription('This trap is generated when there is no data present in flash memory - either on the flash card or the onboard flash memory. Trap Severity Level: Informational.')
oriTrapFlashMemoryCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 6, 0, 2)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapFlashMemoryCorrupted.setStatus('current')
if mibBuilder.loadTexts: oriTrapFlashMemoryCorrupted.setDescription('This trap is generated when the data content of flash memory is corrupted. Trap Severity Level: Critical.')
oriTrapFlashMemoryRestoringLastKnownGoodConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 6, 0, 3))
if mibBuilder.loadTexts: oriTrapFlashMemoryRestoringLastKnownGoodConfiguration.setStatus('current')
if mibBuilder.loadTexts: oriTrapFlashMemoryRestoringLastKnownGoodConfiguration.setDescription('This trap is generated when the current/original configuration data file is found to be corrupted, therefore the device will load the last known good configuration file. Trap Severity Level: Informational.')
oriTFTPTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 7))
if mibBuilder.loadTexts: oriTFTPTraps.setStatus('current')
if mibBuilder.loadTexts: oriTFTPTraps.setDescription('This is the TFTP related trap group.')
oriTrapTFTPFailedOperation = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 7, 0, 1)).setObjects(("ORiNOCO-MIB", "oriTrapVarTFTPIPAddress"), ("ORiNOCO-MIB", "oriTrapVarTFTPFilename"), ("ORiNOCO-MIB", "oriTrapVarTFTPOperation"))
if mibBuilder.loadTexts: oriTrapTFTPFailedOperation.setStatus('current')
if mibBuilder.loadTexts: oriTrapTFTPFailedOperation.setDescription('This trap is generated when a failure has occurred with the TFTP operation. Trap Severity Level: Major.')
oriTrapTFTPOperationInitiated = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 7, 0, 2)).setObjects(("ORiNOCO-MIB", "oriTrapVarTFTPIPAddress"), ("ORiNOCO-MIB", "oriTrapVarTFTPFilename"), ("ORiNOCO-MIB", "oriTrapVarTFTPOperation"))
if mibBuilder.loadTexts: oriTrapTFTPOperationInitiated.setStatus('current')
if mibBuilder.loadTexts: oriTrapTFTPOperationInitiated.setDescription('This trap is generated when a TFTP operation has been initiated. Trap Severity Level: Informational.')
oriTrapTFTPOperationCompleted = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 7, 0, 3)).setObjects(("ORiNOCO-MIB", "oriTrapVarTFTPIPAddress"), ("ORiNOCO-MIB", "oriTrapVarTFTPFilename"), ("ORiNOCO-MIB", "oriTrapVarTFTPOperation"))
if mibBuilder.loadTexts: oriTrapTFTPOperationCompleted.setStatus('current')
if mibBuilder.loadTexts: oriTrapTFTPOperationCompleted.setDescription('This trap is generated when a TFTP operation has been completed. Trap Severity Level: Informational.')
oriMiscTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 8))
if mibBuilder.loadTexts: oriMiscTraps.setStatus('current')
if mibBuilder.loadTexts: oriMiscTraps.setDescription('This is the miscellaneous trap group.')
oriImageTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 9))
if mibBuilder.loadTexts: oriImageTraps.setStatus('current')
if mibBuilder.loadTexts: oriImageTraps.setDescription('This is the image related trap group.')
oriTrapZeroSizeImage = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 9, 0, 1))
if mibBuilder.loadTexts: oriTrapZeroSizeImage.setStatus('current')
if mibBuilder.loadTexts: oriTrapZeroSizeImage.setDescription('This trap is generated when a zero size image is loaded on the device. Trap Severity Level: Major.')
oriTrapInvalidImage = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 9, 0, 2))
if mibBuilder.loadTexts: oriTrapInvalidImage.setStatus('current')
if mibBuilder.loadTexts: oriTrapInvalidImage.setDescription('This trap is generated when an invalid image is loaded on the device. Trap Severity Level: Major.')
oriTrapImageTooLarge = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 9, 0, 3))
if mibBuilder.loadTexts: oriTrapImageTooLarge.setStatus('current')
if mibBuilder.loadTexts: oriTrapImageTooLarge.setDescription('This trap is generated when the image loaded on the device exceeds the size limitation of flash. Trap Severity Level: Major.')
oriTrapIncompatibleImage = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 9, 0, 4))
if mibBuilder.loadTexts: oriTrapIncompatibleImage.setStatus('current')
if mibBuilder.loadTexts: oriTrapIncompatibleImage.setDescription('This trap is generated when an incompatible image is loaded on the device. Trap Severity Level: Major.')
oriTrapInvalidImageDigitalSignature = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 9, 0, 5))
if mibBuilder.loadTexts: oriTrapInvalidImageDigitalSignature.setStatus('current')
if mibBuilder.loadTexts: oriTrapInvalidImageDigitalSignature.setDescription('This trap is generated when an image with an invalid Digital Signature is loaded in the device. Trap Severity Level: Major.')
oriWORPTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 11))
if mibBuilder.loadTexts: oriWORPTraps.setStatus('current')
if mibBuilder.loadTexts: oriWORPTraps.setDescription('This is the WORP related trap group.')
oriWORPStationRegister = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 11, 0, 1)).setObjects(("ORiNOCO-MIB", "oriTrapVarInterface"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriWORPStationRegister.setStatus('current')
if mibBuilder.loadTexts: oriWORPStationRegister.setDescription('This trap is generated when a WORP satellite has registered on and interface of a base; a satellite will not generate this trap, but use oriWORPLinkUp instead. For the station indicated, the oriStationStatTableOperStatus will be up. Trap Severity Level: Informational.')
oriWORPStationDeRegister = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 11, 0, 2)).setObjects(("ORiNOCO-MIB", "oriTrapVarInterface"), ("ORiNOCO-MIB", "oriTrapVarMACAddress"))
if mibBuilder.loadTexts: oriWORPStationDeRegister.setStatus('current')
if mibBuilder.loadTexts: oriWORPStationDeRegister.setDescription('This trap is generated when a WORP satellite has been deleted from an interface of a base; a satellite will not generate this trap, but use oriWORPLinkDown instead. For the station indicated, the oriStationStatTableOperStatus will be down. Trap Severity Level: Informational.')
oriSysFeatureTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 12))
if mibBuilder.loadTexts: oriSysFeatureTraps.setStatus('current')
if mibBuilder.loadTexts: oriSysFeatureTraps.setDescription('This is the System Feature based License related trap group.')
oriTrapIncompatibleLicenseFile = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 12, 0, 1)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapIncompatibleLicenseFile.setStatus('current')
if mibBuilder.loadTexts: oriTrapIncompatibleLicenseFile.setDescription("This trap is generated when a license file in the device's flash memory is not compatible with the current bootloader. Trap Severity Level: Major.")
oriTrapFeatureNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 12, 0, 2)).setObjects(("ORiNOCO-MIB", "oriSystemFeatureTableCode"))
if mibBuilder.loadTexts: oriTrapFeatureNotSupported.setStatus('current')
if mibBuilder.loadTexts: oriTrapFeatureNotSupported.setDescription('This trap is generated when a feature present in the license codes is not supported by the current embedded software image. A newer embedded software image could support the feature or there are more license that needed. Trap Severity Level: Informational.')
oriTrapZeroLicenseFiles = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 12, 0, 3))
if mibBuilder.loadTexts: oriTrapZeroLicenseFiles.setStatus('current')
if mibBuilder.loadTexts: oriTrapZeroLicenseFiles.setDescription('This trap is generated when a single license file is not present in flash. This causes the device to operate in default mode with very limited features enabled. Trap Severity Level: Critical.')
oriTrapInvalidLicenseFile = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 12, 0, 4)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapInvalidLicenseFile.setStatus('current')
if mibBuilder.loadTexts: oriTrapInvalidLicenseFile.setDescription("This trap is generated when a license file in the device's flash memory has an invalid signature and will be ignored. Trap Severity Level: Minor.")
oriTrapUselessLicense = NotificationType((1, 3, 6, 1, 4, 1, 11898, 2, 1, 18, 12, 0, 5)).setObjects(("ORiNOCO-MIB", "oriGenericTrapVariable"))
if mibBuilder.loadTexts: oriTrapUselessLicense.setStatus('current')
if mibBuilder.loadTexts: oriTrapUselessLicense.setDescription('This trap is generated when a license code file does not contain any valid feature code. The probably reason for this is that after verification, not any of the features was meant for this units MAC address. Trap Severity Level: Informational.')
mibBuilder.exportSymbols("ORiNOCO-MIB", oriSystemInvMgmtTableComponentId=oriSystemInvMgmtTableComponentId, oriDHCPServerStatus=oriDHCPServerStatus, oriPortFilterTable=oriPortFilterTable, oriWORPIfSatConfigTable=oriWORPIfSatConfigTable, oriWORPIfStatTableAverageLocalNoise=oriWORPIfStatTableAverageLocalNoise, oriStaticMACAddressFilterWiredAddress=oriStaticMACAddressFilterWiredAddress, oriIntraCellBlockingMACTableGroupID1=oriIntraCellBlockingMACTableGroupID1, oriIAPPAnnounceRequestReceived=oriIAPPAnnounceRequestReceived, oriTrapAuthenticationFailure=oriTrapAuthenticationFailure, oriHTTPWebSitenameTableStatus=oriHTTPWebSitenameTableStatus, oriHTTPRefreshDelay=oriHTTPRefreshDelay, oriWirelessIfSSIDTableEncryptionKey3=oriWirelessIfSSIDTableEncryptionKey3, oriPPPoESessionBindingsNumberACSystemErrors=oriPPPoESessionBindingsNumberACSystemErrors, oriStationStatTableOutDiscards=oriStationStatTableOutDiscards, oriTrapRADScanResults=oriTrapRADScanResults, oriWORPIfSatStatTableAverageRemoteNoise=oriWORPIfSatStatTableAverageRemoteNoise, oriWORPIfSiteSurveyRemoteNoiseLevel=oriWORPIfSiteSurveyRemoteNoiseLevel, oriRADScanResultsTableIndex=oriRADScanResultsTableIndex, oriTrapWirelessServiceShutdown=oriTrapWirelessServiceShutdown, oriSystemInvMgmtTableComponentName=oriSystemInvMgmtTableComponentName, oriEthernetIfConfigBandwidthLimitOut=oriEthernetIfConfigBandwidthLimitOut, oriRADScanResultsMACAddress=oriRADScanResultsMACAddress, oriSystemAccessLoginTimeout=oriSystemAccessLoginTimeout, oriRogueScanResultsStationType=oriRogueScanResultsStationType, oriRADIUSAcctInactivityTimer=oriRADIUSAcctInactivityTimer, oriWirelessIfSSIDTableVLANID=oriWirelessIfSSIDTableVLANID, oriLinkIntTableIndex=oriLinkIntTableIndex, oriWORPIfDDRSMinReqSNRdot11at108Mbps=oriWORPIfDDRSMinReqSNRdot11at108Mbps, oriTrapWLCRadarInterferenceDetected=oriTrapWLCRadarInterferenceDetected, oriLinkIntTableEntry=oriLinkIntTableEntry, bg2000=bg2000, oriWirelessIfSSIDTableRADIUSAccountingProfile=oriWirelessIfSSIDTableRADIUSAccountingProfile, oriRogueScanConfigTableScanCycleTime=oriRogueScanConfigTableScanCycleTime, oriTrapZeroLicenseFiles=oriTrapZeroLicenseFiles, orinocoStormThreshold=orinocoStormThreshold, oriPPPoEMACtoSessionTableEntry=oriPPPoEMACtoSessionTableEntry, oriWORPIfDDRSDataRateDecPercentThreshold=oriWORPIfDDRSDataRateDecPercentThreshold, orinocoSyslog=orinocoSyslog, oriProtocolFilterOperationType=oriProtocolFilterOperationType, oriDNSPrimaryDNSIPAddress=oriDNSPrimaryDNSIPAddress, oriTempLogTableReset=oriTempLogTableReset, oriQoSDot1DToDot1pMappingTableEntry=oriQoSDot1DToDot1pMappingTableEntry, oriRADScanResultsTableEntry=oriRADScanResultsTableEntry, oriTrapVarInterface=oriTrapVarInterface, oriQoSPolicyPriorityMapping=oriQoSPolicyPriorityMapping, ap2500=ap2500, oriWirelessIfDTIMPeriod=oriWirelessIfDTIMPeriod, oriRADIUSMACAddressFormat=oriRADIUSMACAddressFormat, oriStationStatTableInUcastPkts=oriStationStatTableInUcastPkts, oriWirelessIfSSIDTableSupportedSecurityModes=oriWirelessIfSSIDTableSupportedSecurityModes, oriStationStatTableAdminStatus=oriStationStatTableAdminStatus, oriSecurityProfileTableEncryptionKey2=oriSecurityProfileTableEncryptionKey2, oriWORPIfDDRSDataRateIncAvgSNRThreshold=oriWORPIfDDRSDataRateIncAvgSNRThreshold, oriLinkTestOurMaxNoiseLevel=oriLinkTestOurMaxNoiseLevel, oriWORPIfStatTable=oriWORPIfStatTable, oriBroadcastFilteringTableEntry=oriBroadcastFilteringTableEntry, oriWORPIfDDRSMinReqSNRdot11an6Mbps=oriWORPIfDDRSMinReqSNRdot11an6Mbps, oriTrapVarTaskSuspended=oriTrapVarTaskSuspended, oriStationStatTableType=oriStationStatTableType, agere=agere, oriWirelessIfSSIDTablePSKValue=oriWirelessIfSSIDTablePSKValue, oriRADIUSAuthClientStatTableAccessRejects=oriRADIUSAuthClientStatTableAccessRejects, oriPPPoEMACtoSessionTableMACAddress=oriPPPoEMACtoSessionTableMACAddress, oriWirelessIfSuperModeStatus=oriWirelessIfSuperModeStatus, oriWORPIfSatConfigTableMaximumBandwidthLimitUplink=oriWORPIfSatConfigTableMaximumBandwidthLimitUplink, oriSecurityProfileTablePSKValue=oriSecurityProfileTablePSKValue, oriConfigFileName=oriConfigFileName, oriRADIUSSvrTableResponseTime=oriRADIUSSvrTableResponseTime, oriStationStatTableIPAddress=oriStationStatTableIPAddress, ap500=ap500, oriSystemInvMgmtComponentTableEntry=oriSystemInvMgmtComponentTableEntry, oriWirelessIfPreambleType=oriWirelessIfPreambleType, oriSecurityGwStatus=oriSecurityGwStatus, oriTrapTaskSuspended=oriTrapTaskSuspended, oriRADIUSAuthServerIPAddress=oriRADIUSAuthServerIPAddress, oriDHCPServerSecondaryDNSIPAddress=oriDHCPServerSecondaryDNSIPAddress, oriTrapSNTPFailure=oriTrapSNTPFailure, orinocoLinkTest=orinocoLinkTest, oriRADIUSAcctServerTable=oriRADIUSAcctServerTable, oriPPPoESessionIdleTimeOut=oriPPPoESessionIdleTimeOut, oriWirelessIfEncryptionKey3=oriWirelessIfEncryptionKey3, oriWORPIfStatTableReceiveFailures=oriWORPIfStatTableReceiveFailures, oriSystemInvMgmtInterfaceTopNumber=oriSystemInvMgmtInterfaceTopNumber, oriWORPIfSiteSurveyCurrentSatRegistered=oriWORPIfSiteSurveyCurrentSatRegistered, oriWirelessIfSSIDTableRADIUSMACAccessControl=oriWirelessIfSSIDTableRADIUSMACAccessControl, orinocoWORPIfRoaming=orinocoWORPIfRoaming, oriWORPIfSatStatTableRequestForService=oriWORPIfSatStatTableRequestForService, oriSyslogHostTableIndex=oriSyslogHostTableIndex, oriNATType=oriNATType, oriDHCPClientInterfaceBitmask=oriDHCPClientInterfaceBitmask, oriRADIUSAuthServerAddressingFormat=oriRADIUSAuthServerAddressingFormat, oriRADInterval=oriRADInterval, oriWirelessIfSSIDTableRADIUSDot1xProfile=oriWirelessIfSSIDTableRADIUSDot1xProfile, oriWirelessIfLBTxTimeThreshold=oriWirelessIfLBTxTimeThreshold, oriSystemCountryCode=oriSystemCountryCode, oriBroadcastFilteringTableIndex=oriBroadcastFilteringTableIndex, oriTrapVarDHCPServerIPAddress=oriTrapVarDHCPServerIPAddress, oriVLANIDTable=oriVLANIDTable, orinocoTempLog=orinocoTempLog, oriRADIUSAcctClientAccountingRequests=oriRADIUSAcctClientAccountingRequests, oriSystemInvMgmtTableComponentMajorVersion=oriSystemInvMgmtTableComponentMajorVersion, oriDHCPRelayDHCPServerTableIpAddress=oriDHCPRelayDHCPServerTableIpAddress, oriTelnetInterfaceBitmask=oriTelnetInterfaceBitmask, oriLinkTestHisMediumFrameCount=oriLinkTestHisMediumFrameCount, orinocoRADIUS=orinocoRADIUS, oriSNMPTrapHostTableComment=oriSNMPTrapHostTableComment, oriHTTPSetupWizardStatus=oriHTTPSetupWizardStatus, oriRADStatus=oriRADStatus, oriLinkIntTable=oriLinkIntTable, oriRADScanResultsFrequencyChannel=oriRADScanResultsFrequencyChannel, oriPPPoESessionBindingsNumberMalformedPackets=oriPPPoESessionBindingsNumberMalformedPackets, oriTFTPAutoConfigFilename=oriTFTPAutoConfigFilename, orinocoNet=orinocoNet, oriWORPIfSatConfigTableEntryStatus=oriWORPIfSatConfigTableEntryStatus, oriRADIUSAuthClientStatTableBadAuthenticators=oriRADIUSAuthClientStatTableBadAuthenticators, oriWORPIfDDRSMinReqSNRdot11at72Mbps=oriWORPIfDDRSMinReqSNRdot11at72Mbps, oriWORPIfRoamingStatus=oriWORPIfRoamingStatus, oriNATStaticPortBindTableIndex=oriNATStaticPortBindTableIndex, oriSNMPTrapType=oriSNMPTrapType, oriTrapMaximumNumberOfSubscribersReached=oriTrapMaximumNumberOfSubscribersReached, oriSystemFlashBackupInterval=oriSystemFlashBackupInterval, DisplayString80=DisplayString80, oriStaticMACAddressFilterWirelessAddress=oriStaticMACAddressFilterWirelessAddress, oriRogueScanStationCountWirelessCardB=oriRogueScanStationCountWirelessCardB, oriSNMPAccessTableIndex=oriSNMPAccessTableIndex, oriWirelessIfLoadBalancing=oriWirelessIfLoadBalancing, oriSNTPSecondaryServerNameOrIPAddress=oriSNTPSecondaryServerNameOrIPAddress, oriLinkTestDataRateTable=oriLinkTestDataRateTable, oriSecurityProfileTable=oriSecurityProfileTable, oriProtocolFilterTableIndex=oriProtocolFilterTableIndex, oriIAPPAnnounceResponseReceived=oriIAPPAnnounceResponseReceived, oriUPSDRoamingReserved=oriUPSDRoamingReserved, oriIntraCellBlockingMACTableGroupID2=oriIntraCellBlockingMACTableGroupID2, oriFlashTraps=oriFlashTraps, oriSerialStopBits=oriSerialStopBits, oriWirelessIfTraps=oriWirelessIfTraps, oriWirelessIfDFSStatus=oriWirelessIfDFSStatus, oriTrapIncompatibleImage=oriTrapIncompatibleImage, oriIAPPPeriodicAnnounceInterval=oriIAPPPeriodicAnnounceInterval, oriTrapVarBatchCLIMessage=oriTrapVarBatchCLIMessage, rg1100=rg1100, oriTelnetSSHStatus=oriTelnetSSHStatus, oriTrapVarSubnetMask=oriTrapVarSubnetMask, oriWirelessIfBandwidthLimitOut=oriWirelessIfBandwidthLimitOut, oriTFTPTrapsStatus=oriTFTPTrapsStatus, orinocoObjects=orinocoObjects, oriRogueScanResultsSNR=oriRogueScanResultsSNR, oriPPPoENumberOfActiveSessions=oriPPPoENumberOfActiveSessions, oriWORPIfStatTableEntry=oriWORPIfStatTableEntry, oriWORPIfStatTableReplyData=oriWORPIfStatTableReplyData, oriSNMPAccessTable=oriSNMPAccessTable, oriStationStatTableInNoise=oriStationStatTableInNoise, oriSNTPDay=oriSNTPDay, oriIBSSTrafficOperation=oriIBSSTrafficOperation, oriSystemInvMgmtInterfaceTableIndex=oriSystemInvMgmtInterfaceTableIndex, oriSNMPInterfaceBitmask=oriSNMPInterfaceBitmask, oriWirelessIfQoSStatus=oriWirelessIfQoSStatus, orinocoStationStatistics=orinocoStationStatistics, orinocoWORPIfSiteSurvey=orinocoWORPIfSiteSurvey, orinocoAccessControl=orinocoAccessControl, oriNetworkIPDefaultRouterIPAddress=oriNetworkIPDefaultRouterIPAddress, oriTFTPOperation=oriTFTPOperation, oriWirelessIfSecurityIndex=oriWirelessIfSecurityIndex, oriNetworkIPConfigSubnetMask=oriNetworkIPConfigSubnetMask, oriSecurityEncryptionKeyLengthTableEntry=oriSecurityEncryptionKeyLengthTableEntry, oriTrapVariable=oriTrapVariable, oriRADIUSAuthClientStatTableIndex=oriRADIUSAuthClientStatTableIndex, oriDHCPServerIPPoolTableMaximumLeaseTime=oriDHCPServerIPPoolTableMaximumLeaseTime, oriPPPoESessionConfigPADIMaxNumberOfRetries=oriPPPoESessionConfigPADIMaxNumberOfRetries, oriIAPPHandoverTimeout=oriIAPPHandoverTimeout, oriWirelessIfSecurityTable=oriWirelessIfSecurityTable, oriPacketForwardingMACAddress=oriPacketForwardingMACAddress, oriLinkIntStatus=oriLinkIntStatus, oriLinkTestHisCurSNR=oriLinkTestHisCurSNR, oriBroadcastFilteringTableEntryStatus=oriBroadcastFilteringTableEntryStatus, oriIntraCellBlockingMACTableGroupID10=oriIntraCellBlockingMACTableGroupID10, oriWORPIfSiteSurveyLocalSNR=oriWORPIfSiteSurveyLocalSNR, oriWORPIfDDRSMinReqSNRdot11an24Mbps=oriWORPIfDDRSMinReqSNRdot11an24Mbps, oriWORPIfDDRSMinReqSNRdot11at18Mbps=oriWORPIfDDRSMinReqSNRdot11at18Mbps, oriDHCPServerIPPoolTableEntry=oriDHCPServerIPPoolTableEntry, oriPPPoEMACtoSessionTableISPName=oriPPPoEMACtoSessionTableISPName, oriWORPIfRoamingFastScanPercentThreshold=oriWORPIfRoamingFastScanPercentThreshold, oriIAPPMACIPTableEntry=oriIAPPMACIPTableEntry, oriPacketForwardingStatus=oriPacketForwardingStatus, oriPPPoESessionTable=oriPPPoESessionTable, oriTrapRogueScanStationDetected=oriTrapRogueScanStationDetected, oriRogueScanConfigTableScanMode=oriRogueScanConfigTableScanMode, oriRADIUSAuthClientAccessRejects=oriRADIUSAuthClientAccessRejects, oriRADIUSAuthClientStatTableEntry=oriRADIUSAuthClientStatTableEntry, oriWORPIfSiteSurveyMaxSatAllowed=oriWORPIfSiteSurveyMaxSatAllowed, oriLinkTestOurMaxSNR=oriLinkTestOurMaxSNR, oriSNMPTrapHostTableEntry=oriSNMPTrapHostTableEntry, orinocoWirelessIf=orinocoWirelessIf, oriNATStaticIPBindTable=oriNATStaticIPBindTable, oriWirelessIfTxPowerControl=oriWirelessIfTxPowerControl, oriDMZHostTableEntry=oriDMZHostTableEntry, oriIntraCellBlockingMACTableGroupID7=oriIntraCellBlockingMACTableGroupID7, oriNetworkIPConfigTableIndex=oriNetworkIPConfigTableIndex, oriRADIUSAuthClientStatTableAccessChallenges=oriRADIUSAuthClientStatTableAccessChallenges, oriLinkTestOurMinSNR=oriLinkTestOurMinSNR, oriIntraCellBlockingMACTableGroupID13=oriIntraCellBlockingMACTableGroupID13, ObjStatusActive=ObjStatusActive, oriWirelessIfMulticastRate=oriWirelessIfMulticastRate, as2000=as2000, oriSecurityProfileTableAuthenticationMode=oriSecurityProfileTableAuthenticationMode, oriRADIUSSvrTableVLANID=oriRADIUSSvrTableVLANID, oriWORPIfSatStatTableReplyData=oriWORPIfSatStatTableReplyData, oriRADIUSSvrTableAuthorizationLifeTime=oriRADIUSSvrTableAuthorizationLifeTime, oriTrapModuleNotInitialized=oriTrapModuleNotInitialized, oriWORPIfStatTableRegistrationRequests=oriWORPIfStatTableRegistrationRequests, oriSecurityTrapsStatus=oriSecurityTrapsStatus, oriWORPIfDDRSMinReqSNRdot11an48Mbps=oriWORPIfDDRSMinReqSNRdot11an48Mbps, oriRADIUSAcctServerDestPort=oriRADIUSAcctServerDestPort, oriLinkTestTable=oriLinkTestTable, oriTrapVarUnauthorizedManagerIPaddress=oriTrapVarUnauthorizedManagerIPaddress, oriRADAccessPointCount=oriRADAccessPointCount, oriTrapBootPFailed=oriTrapBootPFailed, oriTrapTemperatureAlert=oriTrapTemperatureAlert, oriWirelessIfSupportedCipherModes=oriWirelessIfSupportedCipherModes, oriTrapWLCNotPresent=oriTrapWLCNotPresent, oriDHCPRelayStatus=oriDHCPRelayStatus, oriDHCPServerDefaultGatewayIPAddress=oriDHCPServerDefaultGatewayIPAddress, oriDMZHostTable=oriDMZHostTable, oriSNMPAccessTableEntry=oriSNMPAccessTableEntry, oriAccessControlStatus=oriAccessControlStatus, oriWORPIfDDRSDataRateDecReqSNRThreshold=oriWORPIfDDRSDataRateDecReqSNRThreshold, oriWORPIfStatTablePollNoData=oriWORPIfStatTablePollNoData, oriIAPPSendAnnounceRequestOnStart=oriIAPPSendAnnounceRequestOnStart, orinocoAOL=orinocoAOL, InterfaceBitmask=InterfaceBitmask, oriSystemInvMgmtInterfaceVariant=oriSystemInvMgmtInterfaceVariant, oriEthernetIfConfigTableEntry=oriEthernetIfConfigTableEntry, oriSyslogHostIPAddress=oriSyslogHostIPAddress, oriNATStaticBindStatus=oriNATStaticBindStatus, oriWirelessIfACSFrequencyBandScan=oriWirelessIfACSFrequencyBandScan, oriLinkTestHisMaxSNR=oriLinkTestHisMaxSNR, orinocoWORPIfSat=orinocoWORPIfSat, orinocoDHCPRelay=orinocoDHCPRelay, oriRADIUSAcctClientStatTableBadAuthenticators=oriRADIUSAcctClientStatTableBadAuthenticators, oriTelnetSSHHostKeyStatus=oriTelnetSSHHostKeyStatus, oriOEMProductName=oriOEMProductName, oriWORPIfSiteSurveySignalQualityTableEntry=oriWORPIfSiteSurveySignalQualityTableEntry, oriRADIUSAuthClientAccessRetransmissions=oriRADIUSAuthClientAccessRetransmissions, oriNetworkIPDefaultTTL=oriNetworkIPDefaultTTL, oriTrapVarMACAddress=oriTrapVarMACAddress, oriAccessControlTableIndex=oriAccessControlTableIndex, oriProxyARPStatus=oriProxyARPStatus, oriPPPoESessionBindingsNumberGenericErrorsTx=oriPPPoESessionBindingsNumberGenericErrorsTx, oriWirelessIfCapabilities=oriWirelessIfCapabilities, oriLinkTestInterval=oriLinkTestInterval, oriTrapZeroSizeImage=oriTrapZeroSizeImage, oriSystemAccessPassword=oriSystemAccessPassword, oriSecurityProfileFourWEPKeySupport=oriSecurityProfileFourWEPKeySupport, oriRADIUSAcctClientStatTableEntry=oriRADIUSAcctClientStatTableEntry)
mibBuilder.exportSymbols("ORiNOCO-MIB", oriWDSSecurityTableSecurityMode=oriWDSSecurityTableSecurityMode, oriPPPoESessionBindingsNumberServiceNameErrors=oriPPPoESessionBindingsNumberServiceNameErrors, orinocoDHCPClient=orinocoDHCPClient, oriIntraCellBlockingMACTableMACAddress=oriIntraCellBlockingMACTableMACAddress, oriRADIUSAuthServerTable=oriRADIUSAuthServerTable, oriLinkTestExplore=oriLinkTestExplore, VlanId=VlanId, oriStationStatTableMACAddress=oriStationStatTableMACAddress, oriWirelessIfEncryptionOptions=oriWirelessIfEncryptionOptions, orinocoWORPIfBSUStatRemoteTxRate=orinocoWORPIfBSUStatRemoteTxRate, oriWirelessIfAntenna=oriWirelessIfAntenna, oriSyslogHeartbeatInterval=oriSyslogHeartbeatInterval, oriConfigFileStatus=oriConfigFileStatus, orinocoFiltering=orinocoFiltering, oriWirelessIfSSIDTableRADIUSAccountingStatus=oriWirelessIfSSIDTableRADIUSAccountingStatus, orinocoIBSSTraffic=orinocoIBSSTraffic, oriPPPoESessionConnectTime=oriPPPoESessionConnectTime, oriQoSPolicyTableRowStatus=oriQoSPolicyTableRowStatus, oriStationStatTableInOctets=oriStationStatTableInOctets, oriLinkTestOurStandardFrameCount=oriLinkTestOurStandardFrameCount, oriTelnetSessions=oriTelnetSessions, oriDHCPRelayDHCPServerTableIndex=oriDHCPRelayDHCPServerTableIndex, oriTrapVarIPAddress=oriTrapVarIPAddress, oriWDSSecurityTableEncryptionKey0=oriWDSSecurityTableEncryptionKey0, oriRogueScanResultsNotificationMode=oriRogueScanResultsNotificationMode, oriWirelessIfDenyNonEncryptedData=oriWirelessIfDenyNonEncryptedData, oriPPPoEMaximumNumberOfSessions=oriPPPoEMaximumNumberOfSessions, oriWORPIfStatTableReceiveRetries=oriWORPIfStatTableReceiveRetries, orinocoWORPIfBSU=orinocoWORPIfBSU, oriWORPIfSatStatTableReplyNoData=oriWORPIfSatStatTableReplyNoData, oriWirelessIfSSIDTableClosedSystem=oriWirelessIfSSIDTableClosedSystem, oriConfigurationTrapsStatus=oriConfigurationTrapsStatus, oriWORPIfStatTableAverageRemoteSignal=oriWORPIfStatTableAverageRemoteSignal, oriNATPublicIPAddress=oriNATPublicIPAddress, oriUnitTemp=oriUnitTemp, oriNetworkIPAddressType=oriNetworkIPAddressType, oriRADIUSAuthClientTimeouts=oriRADIUSAuthClientTimeouts, oriWORPIfStatTableRegistrationAttempts=oriWORPIfStatTableRegistrationAttempts, oriWORPIfConfigTableNetworkSecret=oriWORPIfConfigTableNetworkSecret, oriTFTPTraps=oriTFTPTraps, oriTrapVLANIDUserAssignment=oriTrapVLANIDUserAssignment, oriIPARPFilteringStatus=oriIPARPFilteringStatus, oriDHCPServerIPPoolTableEndIPAddress=oriDHCPServerIPPoolTableEndIPAddress, oriTelnetIdleTimeout=oriTelnetIdleTimeout, oriSNMPAccessTableComment=oriSNMPAccessTableComment, oriTrapVarTFTPOperation=oriTrapVarTFTPOperation, oriLinkTestOurMaxSignalLevel=oriLinkTestOurMaxSignalLevel, oriWORPIfStatTableAuthenticationConfirms=oriWORPIfStatTableAuthenticationConfirms, oriStationStatTableEntry=oriStationStatTableEntry, oriWirelessIfSSIDTableMACAccessControl=oriWirelessIfSSIDTableMACAccessControl, oriNATStaticIPBindRemoteAddress=oriNATStaticIPBindRemoteAddress, oriWirelessIfSSIDTablePSKPassPhrase=oriWirelessIfSSIDTablePSKPassPhrase, oriHTTPWebSiteFilename=oriHTTPWebSiteFilename, oriRADIUSSvrTableRowStatus=oriRADIUSSvrTableRowStatus, oriWORPIfRoamingSlowScanThreshold=oriWORPIfRoamingSlowScanThreshold, oriWORPIfSiteSurveyTable=oriWORPIfSiteSurveyTable, oriWORPIfStatTableRequestForService=oriWORPIfStatTableRequestForService, oriRADIUSAcctServerIPAddress=oriRADIUSAcctServerIPAddress, oriQoSDot1DToIPDSCPPriority=oriQoSDot1DToIPDSCPPriority, oriOEMNoNavLogoImageFile=oriOEMNoNavLogoImageFile, oriConfigFileTableEntry=oriConfigFileTableEntry, oriSecurityTraps=oriSecurityTraps, orinocoIPARP=orinocoIPARP, oriWirelessIfSSIDTableIndex=oriWirelessIfSSIDTableIndex, oriTrapInvalidImage=oriTrapInvalidImage, oriWORPIfConfigTableMode=oriWORPIfConfigTableMode, oriAccessControlEntry=oriAccessControlEntry, oriRADIUSAuthClientStatTableAccessAccepts=oriRADIUSAuthClientStatTableAccessAccepts, oriIntraCellBlockingMACTableGroupID9=oriIntraCellBlockingMACTableGroupID9, oriSecurityProfileTablePSKPassPhrase=oriSecurityProfileTablePSKPassPhrase, oriTrapVarTFTPFilename=oriTrapVarTFTPFilename, oriSNMPAccessTableIPAddress=oriSNMPAccessTableIPAddress, oriSystemFeatureTableCode=oriSystemFeatureTableCode, oriWirelessIfSSIDTableQoSPolicy=oriWirelessIfSSIDTableQoSPolicy, oriStaticMACAddressFilterTableEntryStatus=oriStaticMACAddressFilterTableEntryStatus, oriRADIUSAuthClientStatTableTimeouts=oriRADIUSAuthClientStatTableTimeouts, oriHTTPSSLPassphrase=oriHTTPSSLPassphrase, oriWORPIfSatConfigTableEntry=oriWORPIfSatConfigTableEntry, oriTrapImageTooLarge=oriTrapImageTooLarge, oriProtocolFilterTable=oriProtocolFilterTable, oriHTTPRADIUSAccessControl=oriHTTPRADIUSAccessControl, oriGenericTrapVariable=oriGenericTrapVariable, oriWORPIfSatConfigTableMinimumBandwidthLimitDownlink=oriWORPIfSatConfigTableMinimumBandwidthLimitDownlink, oriIAPPAnnounceRequestSent=oriIAPPAnnounceRequestSent, oriIAPPPDUsDropped=oriIAPPPDUsDropped, oriLinkTestTableEntry=oriLinkTestTableEntry, oriLinkTestOurCurSignalLevel=oriLinkTestOurCurSignalLevel, oriSecurityConfigTableRekeyingInterval=oriSecurityConfigTableRekeyingInterval, orinocoWDS=orinocoWDS, oriLinkTestMACAddress=oriLinkTestMACAddress, oriTrapWLCFirmwareDownloadFailure=oriTrapWLCFirmwareDownloadFailure, oriWORPIfDDRSDataRateIncPercentThreshold=oriWORPIfDDRSDataRateIncPercentThreshold, oriVLANIDTableEntry=oriVLANIDTableEntry, oriIntraCellBlockingMACTableGroupID5=oriIntraCellBlockingMACTableGroupID5, oriOperationalTrapsStatus=oriOperationalTrapsStatus, oriStationStatTableInterface=oriStationStatTableInterface, oriTelnetLoginTimeout=oriTelnetLoginTimeout, orinocoWORPIfSatStat=orinocoWORPIfSatStat, oriSNTPYear=oriSNTPYear, oriStaticMACAddressFilterTable=oriStaticMACAddressFilterTable, oriTrapDHCPFailed=oriTrapDHCPFailed, oriSystemMode=oriSystemMode, oriTrapRogueScanCycleComplete=oriTrapRogueScanCycleComplete, oriConfigSaveKnownGood=oriConfigSaveKnownGood, oriStormThresholdIfMulticast=oriStormThresholdIfMulticast, oriDHCPServerSubnetMask=oriDHCPServerSubnetMask, oriRogueScanConfigTableScanStatus=oriRogueScanConfigTableScanStatus, orinocoDMZ=orinocoDMZ, oriQoSDot1dPriority=oriQoSDot1dPriority, oriWORPIfSatStatTableReceiveRetries=oriWORPIfSatStatTableReceiveRetries, oriQoSDot1DToIPDSCPMappingTableIndex=oriQoSDot1DToIPDSCPMappingTableIndex, oriDMZHostTableHostIP=oriDMZHostTableHostIP, oriWirelessIfPropertiesEntry=oriWirelessIfPropertiesEntry, oriWirelessIfAllowedSupportedDataRates=oriWirelessIfAllowedSupportedDataRates, oriStaticMACAddressFilterWirelessMask=oriStaticMACAddressFilterWirelessMask, oriWirelessIfPropertiesIndex=oriWirelessIfPropertiesIndex, oriTrapInvalidImageDigitalSignature=oriTrapInvalidImageDigitalSignature, oriIntraCellBlockingMACTableEntry=oriIntraCellBlockingMACTableEntry, oriWORPIfStatTableSendRetries=oriWORPIfStatTableSendRetries, oriLinkTestOurMinSignalLevel=oriLinkTestOurMinSignalLevel, oriWORPIfStatTablePollNoReplies=oriWORPIfStatTablePollNoReplies, oriWORPIfSiteSurveyOperation=oriWORPIfSiteSurveyOperation, oriTrapWirelessServiceResumed=oriTrapWirelessServiceResumed, oriLinkTestOurLowFrameCount=oriLinkTestOurLowFrameCount, oriWORPTraps=oriWORPTraps, oriRADIUSAcctClientStatTableAccountingResponses=oriRADIUSAcctClientStatTableAccountingResponses, oriWORPIfDDRSStatus=oriWORPIfDDRSStatus, oriLinkTestHisCurNoiseLevel=oriLinkTestHisCurNoiseLevel, oriLinkIntTableEntryStatus=oriLinkIntTableEntryStatus, oriRADIUSAuthServerTableEntryStatus=oriRADIUSAuthServerTableEntryStatus, oriSysFeatureTraps=oriSysFeatureTraps, oriTrapFlashMemoryCorrupted=oriTrapFlashMemoryCorrupted, oriWirelessIfSSIDTableEntry=oriWirelessIfSSIDTableEntry, oriMulticastAddressThreshold=oriMulticastAddressThreshold, oriLinkTestTimeOut=oriLinkTestTimeOut, oriRADIUSAuthClientStatTable=oriRADIUSAuthClientStatTable, oriRADIUSAcctStatus=oriRADIUSAcctStatus, oriTrapUselessLicense=oriTrapUselessLicense, oriRADIUSAuthServerMaximumRetransmission=oriRADIUSAuthServerMaximumRetransmission, oriRADIUSAuthClientAuthInvalidAuthenticators=oriRADIUSAuthClientAuthInvalidAuthenticators, oriSNTPTimeZone=oriSNTPTimeZone, oriSNTPSeconds=oriSNTPSeconds, oriProtocolFilterTableEntryStatus=oriProtocolFilterTableEntryStatus, oriRADIUSSvrTable=oriRADIUSSvrTable, oriWORPIfConfigTableRetries=oriWORPIfConfigTableRetries, oriRADIUSSvrTableProfileIndex=oriRADIUSSvrTableProfileIndex, oriTrapInvalidLicenseFile=oriTrapInvalidLicenseFile, oriWORPIfStatTableSendFailures=oriWORPIfStatTableSendFailures, oriIPARPFilteringIPAddress=oriIPARPFilteringIPAddress, oriTrapWLCIncompatibleVendor=oriTrapWLCIncompatibleVendor, oriWORPIfConfigTableRegistrationTimeout=oriWORPIfConfigTableRegistrationTimeout, oriQoSIPDSCPLowerLimit=oriQoSIPDSCPLowerLimit, oriTrapBatchFileExecEnd=oriTrapBatchFileExecEnd, oriPPPoESessionTableStatus=oriPPPoESessionTableStatus, DisplayString32=DisplayString32, oriSyslogPriority=oriSyslogPriority, oriPPPoESessionUserNamePassword=oriPPPoESessionUserNamePassword, orinocoGroups=orinocoGroups, oriStationStatTableOutNUcastPkts=oriStationStatTableOutNUcastPkts, oriRADLastSuccessfulScanTime=oriRADLastSuccessfulScanTime, oriTrapTFTPOperationCompleted=oriTrapTFTPOperationCompleted, oriWirelessIfProtectionMechanismStatus=oriWirelessIfProtectionMechanismStatus, oriTelnetRADIUSAccessControl=oriTelnetRADIUSAccessControl, oriTFTPDowngrade=oriTFTPDowngrade, oriWORPIfStatTableAverageLocalSignal=oriWORPIfStatTableAverageLocalSignal, oriDHCPServerIPPoolTableIndex=oriDHCPServerIPPoolTableIndex, oriRADIUSAcctClientAccountingRetransmissions=oriRADIUSAcctClientAccountingRetransmissions, oriWirelessIfAutoChannelSelectStatus=oriWirelessIfAutoChannelSelectStatus, oriProtocolFilterTableInterfaceBitmask=oriProtocolFilterTableInterfaceBitmask, oriLinkIntTableTargetIPAddress=oriLinkIntTableTargetIPAddress, oriStationStatTableMACProtocol=oriStationStatTableMACProtocol, oriIntraCellBlockingMACTableGroupID12=oriIntraCellBlockingMACTableGroupID12, oriNATStaticPortBindLocalAddress=oriNATStaticPortBindLocalAddress, oriDNSClientSecondaryServerIPAddress=oriDNSClientSecondaryServerIPAddress, oriSNMPAccessTableInterfaceBitmask=oriSNMPAccessTableInterfaceBitmask, oriSystemReboot=oriSystemReboot, oriSNTPPrimaryServerNameOrIPAddress=oriSNTPPrimaryServerNameOrIPAddress, oriRADIUSLocalUserStatus=oriRADIUSLocalUserStatus, oriIntraCellBlockingMACTableGroupID11=oriIntraCellBlockingMACTableGroupID11, tmp11=tmp11, oriRogueScanResultsMACAddress=oriRogueScanResultsMACAddress, oriAccessControlTableMACAddress=oriAccessControlTableMACAddress, oriWirelessIfSecurityPerSSIDStatus=oriWirelessIfSecurityPerSSIDStatus, oriRADIUSClientInvalidServerAddress=oriRADIUSClientInvalidServerAddress, DisplayString55=DisplayString55, oriPortFilterOperationType=oriPortFilterOperationType, oriRADIUSAuthClientStatTablePrimaryOrSecondaryIndex=oriRADIUSAuthClientStatTablePrimaryOrSecondaryIndex, oriRADInterfaceBitmask=oriRADInterfaceBitmask, oriStationStatTableInNUcastPkts=oriStationStatTableInNUcastPkts, oriPortFilterStatus=oriPortFilterStatus, oriWirelessIfLBAdjAPTimeDiffThreshold=oriWirelessIfLBAdjAPTimeDiffThreshold, oriWORPIfSatStatTablePollData=oriWORPIfSatStatTablePollData, oriLinkTestTableIndex=oriLinkTestTableIndex, oriTrapAutoConfigFailure=oriTrapAutoConfigFailure, oriWORPIfSiteSurveyTableIndex=oriWORPIfSiteSurveyTableIndex, orinocoOEM=orinocoOEM, oriWirelessIfQoSMaxMediumThreshold=oriWirelessIfQoSMaxMediumThreshold, orinocoRAD=orinocoRAD, oriPortFilterTableEntry=oriPortFilterTableEntry, oriLinkIntTableComment=oriLinkIntTableComment, oriIAPPMaximumHandoverRetransmissions=oriIAPPMaximumHandoverRetransmissions, oriSystemFlashUpdate=oriSystemFlashUpdate, oriWORPIfSatStatTableIndex=oriWORPIfSatStatTableIndex, oriTrapDHCPRelayServerTableNotConfigured=oriTrapDHCPRelayServerTableNotConfigured, oriPPPoESessionBindingsNumberGenericErrorsRx=oriPPPoESessionBindingsNumberGenericErrorsRx, oriIntraCellBlockingMACTableGroupID15=oriIntraCellBlockingMACTableGroupID15, oriNATStatus=oriNATStatus, orinocoDHCPServer=orinocoDHCPServer, oriAccessControlOperationType=oriAccessControlOperationType, oriRADIUSSvrTableProfileName=oriRADIUSSvrTableProfileName, oriSecurityGwMac=oriSecurityGwMac, oriWirelessIfEncryptionKey4=oriWirelessIfEncryptionKey4, oriWORPIfDDRSMinReqSNRdot11at48Mbps=oriWORPIfDDRSMinReqSNRdot11at48Mbps, oriRADIUSAcctServerNameOrIPAddress=oriRADIUSAcctServerNameOrIPAddress, oriWORPIfDDRSMinReqSNRdot11an12Mbps=oriWORPIfDDRSMinReqSNRdot11an12Mbps, oriSNMPAuthorizedManagerCount=oriSNMPAuthorizedManagerCount, oriSystemInvMgmtInterfaceBottomNumber=oriSystemInvMgmtInterfaceBottomNumber, oriTrapRADIUSAccountingNotConfigured=oriTrapRADIUSAccountingNotConfigured, oriPPPoESessionBindingsNumberMultiplePADORx=oriPPPoESessionBindingsNumberMultiplePADORx, oriWirelessIfProfileCode=oriWirelessIfProfileCode, oriTrapDNSIPNotConfigured=oriTrapDNSIPNotConfigured, oriWORPIfStatTableRegistrationRejects=oriWORPIfStatTableRegistrationRejects, oriIAPPMACIPTableESSID=oriIAPPMACIPTableESSID, oriPPPoEMACtoSessionTableIndex=oriPPPoEMACtoSessionTableIndex, oriSystemEventLogTableReset=oriSystemEventLogTableReset, oriSerialBaudRate=oriSerialBaudRate, oriDHCPRelayDHCPServerTableEntryStatus=oriDHCPRelayDHCPServerTableEntryStatus, oriTrapFlashMemoryRestoringLastKnownGoodConfiguration=oriTrapFlashMemoryRestoringLastKnownGoodConfiguration, oriPPPoESessionBindingsNumberPADTTx=oriPPPoESessionBindingsNumberPADTTx, oriProtocolFilterProtocolString=oriProtocolFilterProtocolString, oriDMZHostTableEntryStatus=oriDMZHostTableEntryStatus, oriRADIUSSvrTableEntry=oriRADIUSSvrTableEntry, orinocoWORPIf=orinocoWORPIf, oriIntraCellBlockingMACTableIndex=oriIntraCellBlockingMACTableIndex, oriTrapVarTFTPIPAddress=oriTrapVarTFTPIPAddress, oriRADIUSAuthServerDestPort=oriRADIUSAuthServerDestPort, oriQoSDot1DToDot1pMappingTableIndex=oriQoSDot1DToDot1pMappingTableIndex, oriDMZHostTableComment=oriDMZHostTableComment, oriPortFilterTableEntryIndex=oriPortFilterTableEntryIndex, oriRogueScanResultsFrequencyChannel=oriRogueScanResultsFrequencyChannel, orinocoDNS=orinocoDNS, oriTrapDuplicateIPAddressEncountered=oriTrapDuplicateIPAddressEncountered, oriWORPIfConfigTableEntry=oriWORPIfConfigTableEntry, oriWORPIfRoamingThreshold=oriWORPIfRoamingThreshold, oriOEMProductModel=oriOEMProductModel, oriSNMPAccessTableStatus=oriSNMPAccessTableStatus, oriStationStatTableRemoteSignal=oriStationStatTableRemoteSignal, orinocoNetIP=orinocoNetIP, oriIPARPFilteringSubnetMask=oriIPARPFilteringSubnetMask, oriImageTraps=oriImageTraps, oriQoSPolicyTable=oriQoSPolicyTable, oriStormThresholdTable=oriStormThresholdTable, oriRADScanResultsTable=oriRADScanResultsTable, oriSystemEventLogNumberOfMessages=oriSystemEventLogNumberOfMessages)
mibBuilder.exportSymbols("ORiNOCO-MIB", oriRADIUSSvrTableAddressingFormat=oriRADIUSSvrTableAddressingFormat, oriDHCPServerIPPoolTableWidth=oriDHCPServerIPPoolTableWidth, oriSecurityConfiguration=oriSecurityConfiguration, oriRADIUSSvrTableAccountingInactivityTimer=oriRADIUSSvrTableAccountingInactivityTimer, oriRADIUSAcctServerMaximumRetransmission=oriRADIUSAcctServerMaximumRetransmission, oriPPPoESessionISPName=oriPPPoESessionISPName, oriWORPIfDDRSMinReqSNRdot11at12Mbps=oriWORPIfDDRSMinReqSNRdot11at12Mbps, oriHTTPWebSitenameTableIndex=oriHTTPWebSitenameTableIndex, oriWirelessIfOperationalMode=oriWirelessIfOperationalMode, oriTelnetPort=oriTelnetPort, oriPPPoESessionConfigPADITxInterval=oriPPPoESessionConfigPADITxInterval, oriVLANStatus=oriVLANStatus, oriSyslogStatus=oriSyslogStatus, orinocoNAT=orinocoNAT, oriWORPIfConfigTableNoSleepMode=oriWORPIfConfigTableNoSleepMode, oriProtocolFilterProtocolComment=oriProtocolFilterProtocolComment, oriSystemFeatureTableSupported=oriSystemFeatureTableSupported, oriStaticMACAddressFilterComment=oriStaticMACAddressFilterComment, oriQoSPolicyTableSecIndex=oriQoSPolicyTableSecIndex, oriWDSSecurityTable=oriWDSSecurityTable, oriSystemContactPhoneNumber=oriSystemContactPhoneNumber, oriStationStatTableOperStatus=oriStationStatTableOperStatus, oriRADIUSAcctClientStatTable=oriRADIUSAcctClientStatTable, oriHTTPWebSitenameTable=oriHTTPWebSitenameTable, oriLinkTestInterface=oriLinkTestInterface, oriAccessControlTable=oriAccessControlTable, oriRADIUSAuthServerSharedSecret=oriRADIUSAuthServerSharedSecret, oriRogueScanStationCountWirelessCardA=oriRogueScanStationCountWirelessCardA, oriBroadcastFilteringTable=oriBroadcastFilteringTable, oriIntraCellBlockingGroupTableEntryStatus=oriIntraCellBlockingGroupTableEntryStatus, oriSyslogHostTable=oriSyslogHostTable, oriWirelessIfSSIDTableSSID=oriWirelessIfSSIDTableSSID, oriLinkIntPollInterval=oriLinkIntPollInterval, oriRADIUSSvrTableMACAddressFormat=oriRADIUSSvrTableMACAddressFormat, oriRADIUSAuthClientStatTableMalformedAccessResponses=oriRADIUSAuthClientStatTableMalformedAccessResponses, oriTFTPAutoConfigServerIPAddress=oriTFTPAutoConfigServerIPAddress, oriQoSDot1DToIPDSCPMappingTable=oriQoSDot1DToIPDSCPMappingTable, oriWirelessIfTrapsStatus=oriWirelessIfTrapsStatus, oriTrapWLCIncompatibleFirmware=oriTrapWLCIncompatibleFirmware, oriWirelessIfEncryptionTxKey=oriWirelessIfEncryptionTxKey, orinocoSecurityGw=orinocoSecurityGw, oriProtocolFilterInterfaceBitmask=oriProtocolFilterInterfaceBitmask, oriIntraCellBlockingGroupTableIndex=oriIntraCellBlockingGroupTableIndex, oriIAPPHandoverRequestRetransmissions=oriIAPPHandoverRequestRetransmissions, oriSystemInvMgmtTableComponentSerialNumber=oriSystemInvMgmtTableComponentSerialNumber, oriWirelessIfSSIDTableSecurityMode=oriWirelessIfSSIDTableSecurityMode, oriRogueScanResultsTable=oriRogueScanResultsTable, oriSecurityConfigTableSecurityMode=oriSecurityConfigTableSecurityMode, oriStationStatTableLastState=oriStationStatTableLastState, oriTrapVLANIDInvalidConfiguration=oriTrapVLANIDInvalidConfiguration, oriIntraCellBlockingGroupTableEntry=oriIntraCellBlockingGroupTableEntry, oriLinkTestOurHighFrameCount=oriLinkTestOurHighFrameCount, oriSecurityEncryptionKeyLengthTable=oriSecurityEncryptionKeyLengthTable, oriRADIUSLocalUserPassword=oriRADIUSLocalUserPassword, oriWirelessIfSecurityEntry=oriWirelessIfSecurityEntry, oriWORPIfSiteSurveyLocalNoiseLevel=oriWORPIfSiteSurveyLocalNoiseLevel, ap600=ap600, oriWORPIfSatStatTableLocalTxRate=oriWORPIfSatStatTableLocalTxRate, oriSecurityHwConfigResetStatus=oriSecurityHwConfigResetStatus, oriWirelessIfRegulatoryDomainList=oriWirelessIfRegulatoryDomainList, oriSNMPTrapHostTableIPAddress=oriSNMPTrapHostTableIPAddress, oriQoSDot1DToDot1pMappingTableRowStatus=oriQoSDot1DToDot1pMappingTableRowStatus, oriSecurityProfileTableEncryptionKeyLength=oriSecurityProfileTableEncryptionKeyLength, oriWORPIfSatConfigTableMaximumBandwidthLimitDownlink=oriWORPIfSatConfigTableMaximumBandwidthLimitDownlink, oriWORPIfSatStatTableSendRetries=oriWORPIfSatStatTableSendRetries, oriRogueScanResultsTableClearEntries=oriRogueScanResultsTableClearEntries, oriWDSSetupTable=oriWDSSetupTable, oriWORPIfStatTableReplyNoData=oriWORPIfStatTableReplyNoData, oriNATStaticPortBindTable=oriNATStaticPortBindTable, WEPKeyType=WEPKeyType, oriTrapVarWirelessCard=oriTrapVarWirelessCard, oriLinkTestHisCurSignalLevel=oriLinkTestHisCurSignalLevel, oriSNMPAccessTableEntryStatus=oriSNMPAccessTableEntryStatus, oriWORPIfSatStatTablePollNoData=oriWORPIfSatStatTablePollNoData, oriWirelessIfTurboModeStatus=oriWirelessIfTurboModeStatus, orinocoConfig=orinocoConfig, oriRADIUSSvrTablePrimaryOrSecondaryIndex=oriRADIUSSvrTablePrimaryOrSecondaryIndex, oriWORPIfSatStatTableAverageLocalSignal=oriWORPIfSatStatTableAverageLocalSignal, orinocoProtocolFilter=orinocoProtocolFilter, oriStationStatTable=oriStationStatTable, oriWirelessIfSSIDTableEncryptionKey1=oriWirelessIfSSIDTableEncryptionKey1, oriSNMPErrorMessage=oriSNMPErrorMessage, oriWORPIfSatConfigTableMinimumBandwidthLimitUplink=oriWORPIfSatConfigTableMinimumBandwidthLimitUplink, oriAccessControlTableEntryStatus=oriAccessControlTableEntryStatus, oriTFTPFileMode=oriTFTPFileMode, oriWirelessIfAntennaGain=oriWirelessIfAntennaGain, orinocoWORPIfBSUStat=orinocoWORPIfBSUStat, oriHTTPPassword=oriHTTPPassword, rg1000=rg1000, oriWORPIfSatStatTableSendFailures=oriWORPIfSatStatTableSendFailures, oriAOLNATALGStatus=oriAOLNATALGStatus, oriWORPIfStatTableAuthenticationRequests=oriWORPIfStatTableAuthenticationRequests, oriRADIUSAcctServerResponseTime=oriRADIUSAcctServerResponseTime, oriSpanningTreeStatus=oriSpanningTreeStatus, oriWirelessIfInterferenceRobustness=oriWirelessIfInterferenceRobustness, orinocoNotifications=orinocoNotifications, orinocoHTTP=orinocoHTTP, oriHTTPPort=oriHTTPPort, oriWORPIfSiteSurveyRemoteSignalLevel=oriWORPIfSiteSurveyRemoteSignalLevel, oriWORPIfSatStatTableRemoteTxRate=oriWORPIfSatStatTableRemoteTxRate, oriDMZHostTableIndex=oriDMZHostTableIndex, orinocoIAPP=orinocoIAPP, oriWirelessIfSSIDTableStatus=oriWirelessIfSSIDTableStatus, oriIfWANInterfaceMACAddress=oriIfWANInterfaceMACAddress, oriLinkTestHisMaxSignalLevel=oriLinkTestHisMaxSignalLevel, oriIAPPMACIPTableBSSID=oriIAPPMACIPTableBSSID, oriWirelessIfNetworkName=oriWirelessIfNetworkName, oriSecurityProfileTableCipherMode=oriSecurityProfileTableCipherMode, oriSecurityProfileTableEncryptionKey1=oriSecurityProfileTableEncryptionKey1, oriPPPoEMACtoSessionTable=oriPPPoEMACtoSessionTable, orinocoSNTP=orinocoSNTP, oriOEMLogoImageFile=oriOEMLogoImageFile, oriDHCPServerPrimaryDNSIPAddress=oriDHCPServerPrimaryDNSIPAddress, oriStationStatTableOutOctets=oriStationStatTableOutOctets, oriPortFilterTableEntryPort=oriPortFilterTableEntryPort, oriDNSClientStatus=oriDNSClientStatus, oriWirelessIfSSIDTableDenyNonEncryptedData=oriWirelessIfSSIDTableDenyNonEncryptedData, oriRADIUSAcctClientStatTableIndex=oriRADIUSAcctClientStatTableIndex, oriRogueScanConfigTable=oriRogueScanConfigTable, oriWORPIfSatStatTable=oriWORPIfSatStatTable, oriWORPIfDDRSMinReqSNRdot11an18Mbps=oriWORPIfDDRSMinReqSNRdot11an18Mbps, oriWORPIfDDRSMinReqSNRdot11at24Mbps=oriWORPIfDDRSMinReqSNRdot11at24Mbps, oriRADIUSMACAccessControl=oriRADIUSMACAccessControl, oriWORPIfSatStatTableReceiveFailures=oriWORPIfSatStatTableReceiveFailures, oriLinkTestHisMinSignalLevel=oriLinkTestHisMinSignalLevel, oriTrapRADScanComplete=oriTrapRADScanComplete, oriLinkTestOurMediumFrameCount=oriLinkTestOurMediumFrameCount, oriRogueScanResultsTableAgingTime=oriRogueScanResultsTableAgingTime, oriHTTPWebSitenameTableEntry=oriHTTPWebSitenameTableEntry, oriSystemAccessMaxSessions=oriSystemAccessMaxSessions, oriWirelessIfTPCMode=oriWirelessIfTPCMode, oriPPPoESessionWANConnectMode=oriPPPoESessionWANConnectMode, oriNATStaticPortBindStartPortNumber=oriNATStaticPortBindStartPortNumber, orinocoWORPIfSatConfig=orinocoWORPIfSatConfig, oriIntraCellBlockingMACTableGroupID6=oriIntraCellBlockingMACTableGroupID6, oriWORPIfDDRSMinReqSNRdot11at36Mbps=oriWORPIfDDRSMinReqSNRdot11at36Mbps, oriTFTPServerIPAddress=oriTFTPServerIPAddress, oriHTTPHelpInformationLink=oriHTTPHelpInformationLink, oriIntraCellBlockingMACTableGroupID8=oriIntraCellBlockingMACTableGroupID8, oriConfigSaveFile=oriConfigSaveFile, oriWORPIfRoamingSlowScanPercentThreshold=oriWORPIfRoamingSlowScanPercentThreshold, oriRADIUSAcctClientAccountingResponses=oriRADIUSAcctClientAccountingResponses, oriWORPIfSatStatTableAverageRemoteSignal=oriWORPIfSatStatTableAverageRemoteSignal, oriPPPoEStatus=oriPPPoEStatus, oriHTTPInterfaceBitmask=oriHTTPInterfaceBitmask, oriBroadcastFilteringDirection=oriBroadcastFilteringDirection, oriWDSSetupTablePortIndex=oriWDSSetupTablePortIndex, orinocoRogueScan=orinocoRogueScan, oriSystemFeatureTableDescription=oriSystemFeatureTableDescription, oriFlashMemoryTrapsStatus=oriFlashMemoryTrapsStatus, oriLinkTestHisMinSNR=oriLinkTestHisMinSNR, oriWORPIfSatStatTablePollNoReplies=oriWORPIfSatStatTablePollNoReplies, oriLinkIntPollRetransmissions=oriLinkIntPollRetransmissions, oriTrapFlashMemoryEmpty=oriTrapFlashMemoryEmpty, oriSystemContactEmail=oriSystemContactEmail, PYSNMP_MODULE_ID=orinoco, orinocoSpectraLink=orinocoSpectraLink, oriWirelessIfEncryptionStatus=oriWirelessIfEncryptionStatus, oriWORPIfDDRSMinReqSNRdot11an9Mbps=oriWORPIfDDRSMinReqSNRdot11an9Mbps, oriIAPPHandoverResponseReceived=oriIAPPHandoverResponseReceived, oriQoSPolicyMarkingStatus=oriQoSPolicyMarkingStatus, oriBroadcastAddressThreshold=oriBroadcastAddressThreshold, orinocoVLAN=orinocoVLAN, oriTempLogTableEntry=oriTempLogTableEntry, oriStationStatTableInDiscards=oriStationStatTableInDiscards, orinocoWORPIfBSUStatLocalTxRate=orinocoWORPIfBSUStatLocalTxRate, orinocoEthernetIf=orinocoEthernetIf, oriSystemEventLogTable=oriSystemEventLogTable, oriWORPIfSatConfigStatus=oriWORPIfSatConfigStatus, oriIAPPMACIPTable=oriIAPPMACIPTable, oriWORPIfSiteSurveyLocalSignalLevel=oriWORPIfSiteSurveyLocalSignalLevel, oriLinkTestHisMinNoiseLevel=oriLinkTestHisMinNoiseLevel, oriPPPoESessionTableEntry=oriPPPoESessionTableEntry, oriUPSDGPRInterval=oriUPSDGPRInterval, orinocoTFTP=orinocoTFTP, oriSyslogHostComment=oriSyslogHostComment, oriWirelessIfSupportedMulticastRates=oriWirelessIfSupportedMulticastRates, oriSpectraLinkStatus=oriSpectraLinkStatus, orinocoRADIUSSvrProfiles=orinocoRADIUSSvrProfiles, oriWORPIfDDRSMinReqSNRdot11at96Mbps=oriWORPIfDDRSMinReqSNRdot11at96Mbps, oriTempLogTable=oriTempLogTable, oriRADIUSSvrTableMaximumRetransmission=oriRADIUSSvrTableMaximumRetransmission, oriTrapVarUnAuthorizedManagerCount=oriTrapVarUnAuthorizedManagerCount, oriSecurityProfileTableEncryptionKey3=oriSecurityProfileTableEncryptionKey3, orinocoRADIUSAcct=orinocoRADIUSAcct, oriWirelessIfBandwidthLimitIn=oriWirelessIfBandwidthLimitIn, oriSystemInvMgmtComponentTable=oriSystemInvMgmtComponentTable, oriSyslogHeartbeatStatus=oriSyslogHeartbeatStatus, oriEthernetIfConfigBandwidthLimitIn=oriEthernetIfConfigBandwidthLimitIn, oriWORPIfConfigTableBaseStationName=oriWORPIfConfigTableBaseStationName, oriNetworkIPConfigTableEntry=oriNetworkIPConfigTableEntry, oriSNMPReadWritePassword=oriSNMPReadWritePassword, oriWORPIfConfigTable=oriWORPIfConfigTable, oriWORPIfSatConfigTableComment=oriWORPIfSatConfigTableComment, oriWORPIfSatStatTableReceiveSuccess=oriWORPIfSatStatTableReceiveSuccess, orinocoDNSClient=orinocoDNSClient, oriWORPIfStatTableSendSuccess=oriWORPIfStatTableSendSuccess, oriPPPoEMACtoSessionTableStatus=oriPPPoEMACtoSessionTableStatus, oriWirelessIfSupportedOperationalModes=oriWirelessIfSupportedOperationalModes, oriNetworkIPConfigTable=oriNetworkIPConfigTable, oriStationStatStatus=oriStationStatStatus, oriPPPoESessionConnectTimeLimitation=oriPPPoESessionConnectTimeLimitation, oriWirelessIfEncryptionKey2=oriWirelessIfEncryptionKey2, oriRADIUSAuthServerNameOrIPAddress=oriRADIUSAuthServerNameOrIPAddress, oriPortFilterTableEntryPortType=oriPortFilterTableEntryPortType, oriRADIUSSvrTableNameOrIPAddress=oriRADIUSSvrTableNameOrIPAddress, oriIntraCellBlockingMACTableGroupID14=oriIntraCellBlockingMACTableGroupID14, oriIntraCellBlockingGroupTableName=oriIntraCellBlockingGroupTableName, oriStationStatTableOutUcastPkts=oriStationStatTableOutUcastPkts, oriLinkTestStationProfile=oriLinkTestStationProfile, oriWORPIfSatStatTableEntry=oriWORPIfSatStatTableEntry, oriTrapDNSClientLookupFailure=oriTrapDNSClientLookupFailure, oriWirelessIfDistancebetweenAPs=oriWirelessIfDistancebetweenAPs, oriSystemInvMgmtTableComponentReleaseVersion=oriSystemInvMgmtTableComponentReleaseVersion, oriPortFilterTableEntryComment=oriPortFilterTableEntryComment, oriSystemFeatureTableLicensed=oriSystemFeatureTableLicensed, oriRADIUSAuthClientAccessChallenges=oriRADIUSAuthClientAccessChallenges, ObjStatus=ObjStatus, oriTempLogMessage=oriTempLogMessage, oriWirelessIfSSIDTableEncryptionTxKey=oriWirelessIfSSIDTableEncryptionTxKey, oriRogueScanResultsTrapReportType=oriRogueScanResultsTrapReportType, oriRADIUSAuthClientAccessRequests=oriRADIUSAuthClientAccessRequests, oriWirelessIfEncryptionKey1=oriWirelessIfEncryptionKey1, oriTrapWLCVoltageDiscrepancy=oriTrapWLCVoltageDiscrepancy, oriSystemInvMgmtTableComponentMinorVersion=oriSystemInvMgmtTableComponentMinorVersion, orinocoProducts=orinocoProducts, oriSpectraLinkLegacyDeviceSupport=oriSpectraLinkLegacyDeviceSupport, oriQoSPolicyName=oriQoSPolicyName, oriPortFilterTableEntryStatus=oriPortFilterTableEntryStatus, oriSerialParity=oriSerialParity, oriLinkTestHisMaxNoiseLevel=oriLinkTestHisMaxNoiseLevel, oriWirelessIfSSIDTableEncryptionKeyLength=oriWirelessIfSSIDTableEncryptionKeyLength, oriTrapVarBatchCLIFilename=oriTrapVarBatchCLIFilename, oriOEMHomeUrl=oriOEMHomeUrl, orinocoIf=orinocoIf, oriRADIUSAcctServerSharedSecret=oriRADIUSAcctServerSharedSecret, oriSystemInvMgmtTableComponentIndex=oriSystemInvMgmtTableComponentIndex, orinocoWORPIfBSUStatAverageRemoteNoise=orinocoWORPIfBSUStatAverageRemoteNoise, oriTrapTFTPFailedOperation=oriTrapTFTPFailedOperation, oriDHCPClientID=oriDHCPClientID, oriWirelessIfMACAddress=oriWirelessIfMACAddress, oriWORPIfStatTableRegistrationIncompletes=oriWORPIfStatTableRegistrationIncompletes, oriIAPPHandoverRequestReceived=oriIAPPHandoverRequestReceived, oriTrapRADIUSAuthenticationNotConfigured=oriTrapRADIUSAuthenticationNotConfigured, oriWORPIfStatTableReceiveSuccess=oriWORPIfStatTableReceiveSuccess, oriRogueScanConfigTableEntry=oriRogueScanConfigTableEntry, oriTrapInvalidEncryptionKey=oriTrapInvalidEncryptionKey, orinocoPortFilter=orinocoPortFilter, oriWirelessIfAllowedChannels=oriWirelessIfAllowedChannels, oriIntraCellBlockingMACTableEntryStatus=oriIntraCellBlockingMACTableEntryStatus, oriSyslogHostTableEntry=oriSyslogHostTableEntry, oriSecurityConfigTable=oriSecurityConfigTable, orinocoAdvancedFiltering=orinocoAdvancedFiltering, oriLinkTestRadioType=oriLinkTestRadioType)
mibBuilder.exportSymbols("ORiNOCO-MIB", oriSystemEventLogMessage=oriSystemEventLogMessage, oriRADIUSAuthServerResponseTime=oriRADIUSAuthServerResponseTime, orinocoWORPIfBSUStatAverageRemoteSignal=orinocoWORPIfBSUStatAverageRemoteSignal, oriPPPoESessionWANConnectionStatus=oriPPPoESessionWANConnectionStatus, orinoco=orinoco, oriWORPIfSatStatTableSendSuccess=oriWORPIfSatStatTableSendSuccess, oriMiscTraps=oriMiscTraps, oriWirelessIfSSIDTableBroadcastSSID=oriWirelessIfSSIDTableBroadcastSSID, oriSystemFeatureTableEntry=oriSystemFeatureTableEntry, oriIntraCellBlockingMACTableGroupID4=oriIntraCellBlockingMACTableGroupID4, orinocoStaticMACAddressFilter=orinocoStaticMACAddressFilter, oriTelnetPassword=oriTelnetPassword, oriStationStatTableName=oriStationStatTableName, oriIAPPAnnounceResponseSent=oriIAPPAnnounceResponseSent, oriIntraCellBlockingMACTable=oriIntraCellBlockingMACTable, oriSystemInvMgmtTableComponentVariant=oriSystemInvMgmtTableComponentVariant, oriRADIUSClientInvalidSvrAddress=oriRADIUSClientInvalidSvrAddress, oriWirelessIfSSIDTableSSIDAuthorizationStatus=oriWirelessIfSSIDTableSSIDAuthorizationStatus, oriDHCPServerIPPoolTableDefaultLeaseTime=oriDHCPServerIPPoolTableDefaultLeaseTime, oriWirelessIfSSIDTableEncryptionKey2=oriWirelessIfSSIDTableEncryptionKey2, oriIAPPMACIPTableSystemName=oriIAPPMACIPTableSystemName, oriWirelessIfSSIDTableRekeyingInterval=oriWirelessIfSSIDTableRekeyingInterval, oriStationStatTableLastChange=oriStationStatTableLastChange, oriLinkTestHisLowFrameCount=oriLinkTestHisLowFrameCount, oriOEMName=oriOEMName, oriWORPIfRoamingFastScanThreshold=oriWORPIfRoamingFastScanThreshold, oriVLANIDTableIndex=oriVLANIDTableIndex, oriRADIUSAcctClientStatTablePrimaryOrSecondaryIndex=oriRADIUSAcctClientStatTablePrimaryOrSecondaryIndex, oriSecurityProfileTableIndex=oriSecurityProfileTableIndex, oriConfigFileTable=oriConfigFileTable, oriSecurityProfileTableEntry=oriSecurityProfileTableEntry, oriTrapBatchExecFailure=oriTrapBatchExecFailure, oriQoSPolicyTableIndex=oriQoSPolicyTableIndex, oriWORPIfConfigTableMaxSatellites=oriWORPIfConfigTableMaxSatellites, oriWirelessIfWSSStatus=oriWirelessIfWSSStatus, oriWORPIfStatTableRegistrationLastReason=oriWORPIfStatTableRegistrationLastReason, oriWORPIfSiteSurveyRemoteSNR=oriWORPIfSiteSurveyRemoteSNR, oriSNMPTrapHostTable=oriSNMPTrapHostTable, oriWORPIfDDRSMinReqSNRdot11an54Mbps=oriWORPIfDDRSMinReqSNRdot11an54Mbps, oriTFTPAutoConfigStatus=oriTFTPAutoConfigStatus, oriNetworkIPConfigIPAddress=oriNetworkIPConfigIPAddress, oriWORPIfSatConfigTableIndex=oriWORPIfSatConfigTableIndex, oriRADIUSAcctClientStatTableAccountingRetransmissions=oriRADIUSAcctClientStatTableAccountingRetransmissions, oriSystemInvMgmtTableComponentIfTable=oriSystemInvMgmtTableComponentIfTable, oriAccessControlTableComment=oriAccessControlTableComment, oriTrapUnauthorizedManagerDetected=oriTrapUnauthorizedManagerDetected, oriRADIUSAcctClientStatTableAccountingRequests=oriRADIUSAcctClientStatTableAccountingRequests, oriTrapDHCPLeaseRenewal=oriTrapDHCPLeaseRenewal, oriRADIUSAcctServerTableEntry=oriRADIUSAcctServerTableEntry, oriSystemHwType=oriSystemHwType, orinocoTelnet=orinocoTelnet, oriStaticMACAddressFilterEntry=oriStaticMACAddressFilterEntry, oriSecurityRekeyingInterval=oriSecurityRekeyingInterval, oriDHCPServerIPPoolTableStartIPAddress=oriDHCPServerIPPoolTableStartIPAddress, oriStationStatTableIndex=oriStationStatTableIndex, oriSNTPMonth=oriSNTPMonth, oriLinkTestDataRateTableLocalCount=oriLinkTestDataRateTableLocalCount, oriConfigurationTraps=oriConfigurationTraps, oriWirelessIfSSIDTableEncryptionKey0=oriWirelessIfSSIDTableEncryptionKey0, oriQoSPolicyTableEntry=oriQoSPolicyTableEntry, oriTrapVarDefaultRouterIPAddress=oriTrapVarDefaultRouterIPAddress, oriTrapUnrecoverableSoftwareErrorDetected=oriTrapUnrecoverableSoftwareErrorDetected, oriSNTPMinutes=oriSNTPMinutes, orinocoPPPoE=orinocoPPPoE, oriDHCPServerIPPoolTableComment=oriDHCPServerIPPoolTableComment, oriRADIUSAuthorizationLifeTime=oriRADIUSAuthorizationLifeTime, oriTrapWLCFailure=oriTrapWLCFailure, oriSystemEmergencyResetToDefault=oriSystemEmergencyResetToDefault, oriDNSClientDefaultDomainName=oriDNSClientDefaultDomainName, oriSNMPSecureManagementStatus=oriSNMPSecureManagementStatus, oriPPPoESessionWANManualConnect=oriPPPoESessionWANManualConnect, orinocoDHCP=orinocoDHCP, oriSystemInvMgmtInterfaceId=oriSystemInvMgmtInterfaceId, oriSystemFeatureTable=oriSystemFeatureTable, oriWirelessIfTxRate=oriWirelessIfTxRate, oriRADIUSAuthServerType=oriRADIUSAuthServerType, oriTrapVarFailedAuthenticationType=oriTrapVarFailedAuthenticationType, oriNATStaticPortBindTableEntry=oriNATStaticPortBindTableEntry, oriWirelessIfSSIDTable=oriWirelessIfSSIDTable, oriTrapWLCRemoval=oriTrapWLCRemoval, orinocoWORPIfDDRS=orinocoWORPIfDDRS, oriSNMPTrapHostTableIndex=oriSNMPTrapHostTableIndex, orinocoUPSD=orinocoUPSD, oriRADIUSAcctServerType=oriRADIUSAcctServerType, oriSerialDataBits=oriSerialDataBits, oriSecurityHwConfigResetPassword=oriSecurityHwConfigResetPassword, oriNATStaticIPBindTableEntry=oriNATStaticIPBindTableEntry, oriLinkTestInProgress=oriLinkTestInProgress, oriWORPIfDDRSMaxDataRate=oriWORPIfDDRSMaxDataRate, oriDHCPRelayDHCPServerTableComment=oriDHCPRelayDHCPServerTableComment, oriStationStatTableInSignal=oriStationStatTableInSignal, orinocoSecurity=orinocoSecurity, oriWDSSetupTableEntry=oriWDSSetupTableEntry, oriWORPIfSatStatTableMacAddress=oriWORPIfSatStatTableMacAddress, oriDNSRedirectMaxResponseWaitTime=oriDNSRedirectMaxResponseWaitTime, oriWORPTrapsStatus=oriWORPTrapsStatus, oriStationStatTableLastInPktTime=oriStationStatTableLastInPktTime, oriDHCPServerNumIPPoolTableEntries=oriDHCPServerNumIPPoolTableEntries, oriWORPStationDeRegister=oriWORPStationDeRegister, oriSNMPTrapHostTablePassword=oriSNMPTrapHostTablePassword, oriLinkTestStationName=oriLinkTestStationName, oriSNMPReadPassword=oriSNMPReadPassword, oriSNTPHour=oriSNTPHour, oriSecurityConfigTableSupportedSecurityModes=oriSecurityConfigTableSupportedSecurityModes, oriIAPPRoamingClients=oriIAPPRoamingClients, oriHTTPSSLStatus=oriHTTPSSLStatus, oriSecurityProfileTableStatus=oriSecurityProfileTableStatus, oriRogueScanResultsTableIndex=oriRogueScanResultsTableIndex, oriEthernetIfConfigTable=oriEthernetIfConfigTable, orinocoCompliances=orinocoCompliances, orinocoLinkInt=orinocoLinkInt, oriADSLIfTrapsStatus=oriADSLIfTrapsStatus, oriProtocolFilterProtocol=oriProtocolFilterProtocol, ap1000=ap1000, oriNATStaticPortBindEndPortNumber=oriNATStaticPortBindEndPortNumber, oriRADIUSAcctUpdateInterval=oriRADIUSAcctUpdateInterval, orinocoPacketForwarding=orinocoPacketForwarding, oriTFTPFileType=oriTFTPFileType, orinocoSysInvMgmt=orinocoSysInvMgmt, oriWORPIfStatTableRemotePartners=oriWORPIfStatTableRemotePartners, oriRADIUSAcctServerTableIndex=oriRADIUSAcctServerTableIndex, oriLinkTestDataRateTableRemoteCount=oriLinkTestDataRateTableRemoteCount, oriRogueScanResultsTableEntry=oriRogueScanResultsTableEntry, oriIAPPStatus=oriIAPPStatus, oriWDSSecurityTableEntry=oriWDSSecurityTableEntry, oriTrapVarBatchCLILineNumber=oriTrapVarBatchCLILineNumber, oriWORPIfSatStatTableAverageLocalNoise=oriWORPIfSatStatTableAverageLocalNoise, oriEthernetIfConfigSettings=oriEthernetIfConfigSettings, orinocoSys=orinocoSys, oriDHCPServerIPPoolTableEntryStatus=oriDHCPServerIPPoolTableEntryStatus, oriSecurityProfileTableEncryptionKey0=oriSecurityProfileTableEncryptionKey0, oriNATStaticPortBindTableEntryStatus=oriNATStaticPortBindTableEntryStatus, oriDNSClientPrimaryServerIPAddress=oriDNSClientPrimaryServerIPAddress, oriSecurityProfileTableSecModeIndex=oriSecurityProfileTableSecModeIndex, oriTrapDeviceRebooting=oriTrapDeviceRebooting, oriTrapWORPIfNetworkSecretNotConfigured=oriTrapWORPIfNetworkSecretNotConfigured, oriRADIUSAuthClientStatTableAccessRequests=oriRADIUSAuthClientStatTableAccessRequests, orinocoIntraCellBlocking=orinocoIntraCellBlocking, as1000=as1000, oriWORPIfDDRSDataRateIncReqSNRThreshold=oriWORPIfDDRSDataRateIncReqSNRThreshold, oriWirelessIfSupportedAuthenticationModes=oriWirelessIfSupportedAuthenticationModes, oriWORPIfSiteSurveyBaseName=oriWORPIfSiteSurveyBaseName, oriNATStaticIPBindTableEntryStatus=oriNATStaticIPBindTableEntryStatus, oriWORPStationRegister=oriWORPStationRegister, oriNATStaticIPBindTableIndex=oriNATStaticIPBindTableIndex, oriWORPIfSiteSurveyNumSatRegistered=oriWORPIfSiteSurveyNumSatRegistered, oriTrapVarUnauthorizedClientMACAddress=oriTrapVarUnauthorizedClientMACAddress, oriQoSDot1DToIPDSCPMappingTableRowStatus=oriQoSDot1DToIPDSCPMappingTableRowStatus, oriWORPIfStatTableRegistrationTimeouts=oriWORPIfStatTableRegistrationTimeouts, oriWORPIfSatConfigTableMacAddress=oriWORPIfSatConfigTableMacAddress, oriWORPIfStatTableBaseStationAnnounces=oriWORPIfStatTableBaseStationAnnounces, orinocoTrap=orinocoTrap, oriIAPPHandoverRequestSent=oriIAPPHandoverRequestSent, oriSystemAccessUserName=oriSystemAccessUserName, oriWirelessIfMediumDensityDistribution=oriWirelessIfMediumDensityDistribution, oriHTTPWebSiteLanguage=oriHTTPWebSiteLanguage, oriSNMPTrapHostTableEntryStatus=oriSNMPTrapHostTableEntryStatus, oriTrapSSLInitializationFailure=oriTrapSSLInitializationFailure, oriOperationalTraps=oriOperationalTraps, orinocoQoS=orinocoQoS, oriIAPPHandoverResponseSent=oriIAPPHandoverResponseSent, oriTempLoggingInterval=oriTempLoggingInterval, oriWirelessIfClosedSystem=oriWirelessIfClosedSystem, oriLinkTestOurCurSNR=oriLinkTestOurCurSNR, oriTrapsImageStatus=oriTrapsImageStatus, oriIntraCellBlockingMACTableGroupID3=oriIntraCellBlockingMACTableGroupID3, orinocoSNMP=orinocoSNMP, oriNATStaticIPBindLocalAddress=oriNATStaticIPBindLocalAddress, oriSystemInvMgmtInterfaceRole=oriSystemInvMgmtInterfaceRole, oriLinkTestOurCurNoiseLevel=oriLinkTestOurCurNoiseLevel, oriRADIUSAuthClientStatTableAccessRetransmissions=oriRADIUSAuthClientStatTableAccessRetransmissions, oriRADIUSSvrTableSharedSecret=oriRADIUSSvrTableSharedSecret, oriLinkTestHisHighFrameCount=oriLinkTestHisHighFrameCount, oriRADIUSSvrTableAccountingUpdateInterval=oriRADIUSSvrTableAccountingUpdateInterval, oriSecurityEncryptionKeyLength=oriSecurityEncryptionKeyLength, oriRADIUSAcctServerAddressingFormat=oriRADIUSAcctServerAddressingFormat, oriLinkTestDataRateTableIndex=oriLinkTestDataRateTableIndex, oriSyslogHostTableEntryStatus=oriSyslogHostTableEntryStatus, oriPPPoESessionTableIndex=oriPPPoESessionTableIndex, ap2000=ap2000, oriIAPPMACIPTableIndex=oriIAPPMACIPTableIndex, oriWirelessIfMediumReservation=oriWirelessIfMediumReservation, oriDHCPRelayDHCPServerTableEntry=oriDHCPRelayDHCPServerTableEntry, oriIAPPMACIPTableIPAddress=oriIAPPMACIPTableIPAddress, oriRADIUSAuthClientMalformedAccessResponses=oriRADIUSAuthClientMalformedAccessResponses, oriTelnetSSHFingerPrint=oriTelnetSSHFingerPrint, oriPPPoESessionServiceName=oriPPPoESessionServiceName, oriSystemEventLogTableEntry=oriSystemEventLogTableEntry, oriConfigFileTableIndex=oriConfigFileTableIndex, oriSNTPDateAndTime=oriSNTPDateAndTime, oriSyslogPort=oriSyslogPort, oriRADIUSAcctClientAcctInvalidAuthenticators=oriRADIUSAcctClientAcctInvalidAuthenticators, oriWORPIfStatTablePollData=oriWORPIfStatTablePollData, orinocoWORPIfBSUStatMACAddress=orinocoWORPIfBSUStatMACAddress, orinocoSysFeature=orinocoSysFeature, oriPacketForwardingInterface=oriPacketForwardingInterface, oriIntraCellBlockingMACTableGroupID16=oriIntraCellBlockingMACTableGroupID16, oriQoSDot1DToIPDSCPMappingTableEntry=oriQoSDot1DToIPDSCPMappingTableEntry, oriTrapRADIUSServerNotResponding=oriTrapRADIUSServerNotResponding, orinocoWORPIfBSUStatAverageLocalSignal=orinocoWORPIfBSUStatAverageLocalSignal, oriDHCPRelayDHCPServerTable=oriDHCPRelayDHCPServerTable, oriSecurityConfigTableEntry=oriSecurityConfigTableEntry, oriConfigResetToDefaults=oriConfigResetToDefaults, oriTrapWLCFirmwareFailure=oriTrapWLCFirmwareFailure, oriRADIUSAuthServerTableIndex=oriRADIUSAuthServerTableIndex, oriRADIUSAuthClientAccessAccepts=oriRADIUSAuthClientAccessAccepts, oriRADIUSAuthServerTableEntry=oriRADIUSAuthServerTableEntry, oriDHCPServerIPPoolTable=oriDHCPServerIPPoolTable, oriSNMPV3AuthPassword=oriSNMPV3AuthPassword, oriRADIUSbasedManagementAccessProfile=oriRADIUSbasedManagementAccessProfile, oriBroadcastFilteringProtocolName=oriBroadcastFilteringProtocolName, oriRADIUSAcctServerTableEntryStatus=oriRADIUSAcctServerTableEntryStatus, oriVLANMgmtIdentifier=oriVLANMgmtIdentifier, oriLinkTestHisStandardFrameCount=oriLinkTestHisStandardFrameCount, oriWORPIfStatTableAverageRemoteNoise=oriWORPIfStatTableAverageRemoteNoise, oriUPSDE911Reserved=oriUPSDE911Reserved, oriNATStaticPortBindPortType=oriNATStaticPortBindPortType, oriQoSDot1pPriority=oriQoSDot1pPriority, oriSecurityConfigTableEncryptionKeyLength=oriSecurityConfigTableEncryptionKeyLength, oriTrapBatchFileExecStart=oriTrapBatchFileExecStart, oriUPSDMaxActiveSU=oriUPSDMaxActiveSU, oriStationStatTableRemoteNoise=oriStationStatTableRemoteNoise, oriSystemInvMgmtTableComponentIfTableEntry=oriSystemInvMgmtTableComponentIfTableEntry, oriTrapTFTPOperationInitiated=oriTrapTFTPOperationInitiated, oriQoSIPDSCPUpperLimit=oriQoSIPDSCPUpperLimit, oriEthernetIfConfigTableIndex=oriEthernetIfConfigTableIndex, oriStaticMACAddressFilterTableIndex=oriStaticMACAddressFilterTableIndex, oriQoSDot1DToDot1pMappingTable=oriQoSDot1DToDot1pMappingTable, oriWirelessIfSSIDTableSecurityProfile=oriWirelessIfSSIDTableSecurityProfile, oriHTTPWebSiteDescription=oriHTTPWebSiteDescription, orinocoConformance=orinocoConformance, oriTFTPFileName=oriTFTPFileName, oriProtocolFilterTableEntry=oriProtocolFilterTableEntry, oriWirelessIfChannel=oriWirelessIfChannel, oriIAPPAnnounceResponseTime=oriIAPPAnnounceResponseTime, oriSecurityProfileTableEncryptionTxKey=oriSecurityProfileTableEncryptionTxKey, oriTrapFeatureNotSupported=oriTrapFeatureNotSupported, oriWDSSetupTableEntryStatus=oriWDSSetupTableEntryStatus, oriSystemEventLogMask=oriSystemEventLogMask, oriSNMPAccessTableIPMask=oriSNMPAccessTableIPMask, oriQoSPolicyType=oriQoSPolicyType, ap700=ap700, oriWORPIfDDRSMinReqSNRdot11an36Mbps=oriWORPIfDDRSMinReqSNRdot11an36Mbps, ap4000=ap4000, oriWirelessIfPropertiesTable=oriWirelessIfPropertiesTable, oriStaticMACAddressFilterWiredMask=oriStaticMACAddressFilterWiredMask, oriPPPoESessionBindingsNumberPADITx=oriPPPoESessionBindingsNumberPADITx, oriDNSSecondaryDNSIPAddress=oriDNSSecondaryDNSIPAddress, oriPPPoESessionUserName=oriPPPoESessionUserName, oriSerialFlowControl=oriSerialFlowControl, oriIntraCellBlockingGroupTable=oriIntraCellBlockingGroupTable, orinocoSpanningTree=orinocoSpanningTree, oriWirelessIfSSIDTableRADIUSMACAuthProfile=oriWirelessIfSSIDTableRADIUSMACAuthProfile, orinocoWORPIfBSUStatAverageLocalNoise=orinocoWORPIfBSUStatAverageLocalNoise)
mibBuilder.exportSymbols("ORiNOCO-MIB", oriRogueScanResultsBSSID=oriRogueScanResultsBSSID, oriStormThresholdIfBroadcast=oriStormThresholdIfBroadcast, oriWORPIfDDRSDefDataRate=oriWORPIfDDRSDefDataRate, oriSNTPStatus=oriSNTPStatus, orinocoRADIUSAuth=orinocoRADIUSAuth, oriStormThresholdTableEntry=oriStormThresholdTableEntry, oriLinkTestOurMinNoiseLevel=oriLinkTestOurMinNoiseLevel, oriStationStatNumberOfClients=oriStationStatNumberOfClients, oriDNSRedirectStatus=oriDNSRedirectStatus, oriWORPIfStatTableReplyMoreData=oriWORPIfStatTableReplyMoreData, oriPortFilterTableEntryInterfaceBitmask=oriPortFilterTableEntryInterfaceBitmask, oriTrapSSHInitializationStatus=oriTrapSSHInitializationStatus, oriTrapIncompatibleLicenseFile=oriTrapIncompatibleLicenseFile, oriSNTPDayLightSavingTime=oriSNTPDayLightSavingTime, orinocoSerial=orinocoSerial, oriWORPIfSiteSurveyBaseMACAddress=oriWORPIfSiteSurveyBaseMACAddress, oriIntraCellBlockingStatus=oriIntraCellBlockingStatus, oriWDSSetupTablePartnerMACAddress=oriWDSSetupTablePartnerMACAddress, oriSystemAccessIdleTimeout=oriSystemAccessIdleTimeout, oriRADIUSSvrTableDestPort=oriRADIUSSvrTableDestPort, oriVLANIDTableIdentifier=oriVLANIDTableIdentifier, oriSNMPV3PrivPassword=oriSNMPV3PrivPassword, oriLinkTestDataRateTableEntry=oriLinkTestDataRateTableEntry, oriTFTPOperationStatus=oriTFTPOperationStatus)
