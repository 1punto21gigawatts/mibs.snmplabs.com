#
# PySNMP MIB module IBM-FEATURE-ACTIVATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-FEATURE-ACTIVATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
enterprises, TimeTicks, MibIdentifier, ObjectIdentity, Bits, ModuleIdentity, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Gauge32, IpAddress, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Bits", "ModuleIdentity", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Gauge32", "IpAddress", "NotificationType", "iso")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
ibmFeatureActivationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 5, 31))
ibmFeatureActivationMIB.setRevisions(('2011-03-30 07:33', '2011-02-02 19:49', '2010-12-08 18:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ibmFeatureActivationMIB.setRevisionsDescriptions(('Updated data types and added traps for status change notification. Clarified return codes from events.', 'Added support for SFTP protocol file transfers.', 'Initial Revision.',))
if mibBuilder.loadTexts: ibmFeatureActivationMIB.setLastUpdated('201103300733Z')
if mibBuilder.loadTexts: ibmFeatureActivationMIB.setOrganization('International Business Machines Corp.')
if mibBuilder.loadTexts: ibmFeatureActivationMIB.setContactInfo('Fred Bower International Business Machines Corporation Systems and Technology Group System x Development Research Triangle Park, NC, USA E-mail: bowerf@us.ibm.com')
if mibBuilder.loadTexts: ibmFeatureActivationMIB.setDescription('This module provides a simple interface for IBM Features On Demnad Activation Key functions.')
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
ibmFodNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 31, 0))
ibmFodObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 31, 1))
ibmFodConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 31, 2))
ibmFodAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("installActivationKey", 1), ("uninstallActivationKey", 2), ("exportActivationKey", 3), ("inventoryInstalledActivationKeys", 4))).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmFodAction.setStatus('current')
if mibBuilder.loadTexts: ibmFodAction.setDescription('Target action for activation method. 1 - Install Activation Key 2 - Uninstall Activation Key 3 - Export Activation Key 4 - Inventory Installed Activation Keys')
ibmFodIndex = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmFodIndex.setStatus('current')
if mibBuilder.loadTexts: ibmFodIndex.setDescription('Activation key index to uninstall or export. This is only required for uninstall and export actions. This is also used to identify the key associated with alerts.')
ibmFodFileUri = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmFodFileUri.setStatus('current')
if mibBuilder.loadTexts: ibmFodFileUri.setDescription('URI of where key file resides for install and where it should be placed for export or inventory. This is not used for uninstall action.')
ibmFodStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("success", 1), ("rebootRequired", 2), ("versionMismatch", 3), ("corruptKeyFile", 4), ("invalideKeyFileTarget", 5), ("keyFileNotPresent", 6), ("communicationFailure", 7), ("keyStoreFull", 8), ("ftpServerFull", 9), ("userAuthenticationFailed", 10), ("invalidIndex", 11), ("protocolNotSupported", 12), ("preRequisiteKeyActionRequired", 13), ("actionIncompleteDeviceBusy", 14), ("fileAlreadyExists", 15), ("permissionProblem", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmFodStatus.setStatus('current')
if mibBuilder.loadTexts: ibmFodStatus.setDescription('Return status of the last firmware activation method initiated through SNMP method. Valid return codes are: Code Action(s) Meaning 1 1,2,3,4 Success 2 1,2 Reboot Required 3 1 Firmware Version/Update Issue 4 1 Key Corrupt 5 1 Key Not Valid for Device 6 1,2,4 Key File Not Found 7 1,3,4 Failure to Communicate with File Server 8 1 Key Storage Full 9 3,4 TFTP/SFTP Server Storage Full 10 1,3,4 SFTP User/Password Authentication Failed 11 2,3 Invalid Index 12 1,3,4 Protocol Specified in URI Not Supported 13 1,2 Pre-Requisite Key Action Required 14 1,2,3,4 Action Still In Process/Busy 15 3,4 File Already Exists on Server 16 3,4 Permission Problem with Specified URI User')
ibmFodKeyChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 5), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ibmFodKeyChangeTime.setStatus('current')
if mibBuilder.loadTexts: ibmFodKeyChangeTime.setDescription('The date and time of the event described in this notification of activated function status change.')
ibmFodKeyOldStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noPreviousStatus", 1), ("keyValid", 2), ("keyInvalid", 3), ("keyValidElsewhere", 4), ("keyFeatureActive", 5), ("keyFeatureRequiresHostReboot", 6), ("keyFeatureRequiresBMCReboot", 7), ("keyExpired", 8), ("keyUseLimitExceeded", 9), ("keyInProcessOfValidation", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ibmFodKeyOldStatus.setStatus('current')
if mibBuilder.loadTexts: ibmFodKeyOldStatus.setDescription('The prior status of the activation key associated with this status change.')
ibmFodKeyNewStatus = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("keyRemoved", 1), ("keyValid", 2), ("keyInvalid", 3), ("keyValidElsewhere", 4), ("keyFeatureActive", 5), ("keyFeatureRequiresHostReboot", 6), ("keyFeatureRequiresBMCReboot", 7), ("keyExpired", 8), ("keyUseLimitExceeded", 9), ("keyInProcessOfValidation", 10), ("keyReplaced", 11)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ibmFodKeyNewStatus.setStatus('current')
if mibBuilder.loadTexts: ibmFodKeyNewStatus.setDescription('The new status of the activation key associated with this status change.')
ibmFodKeyUpdateData = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 31, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ibmFodKeyUpdateData.setStatus('current')
if mibBuilder.loadTexts: ibmFodKeyUpdateData.setDescription('String containing constraint data. This is only used for ibmFodNewStatus value of keyReplaced (10). Otherwise, this string should be NULL.')
ibmFodActivationChangeAlert = NotificationType((1, 3, 6, 1, 4, 1, 2, 5, 31, 0, 1)).setObjects(("IBM-FEATURE-ACTIVATION-MIB", "ibmFodIndex"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyChangeTime"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyOldStatus"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyNewStatus"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyUpdateData"))
if mibBuilder.loadTexts: ibmFodActivationChangeAlert.setStatus('current')
if mibBuilder.loadTexts: ibmFodActivationChangeAlert.setDescription('This is an SNMP notification of a change to an existing feature activation on an endpoint. Data in the notification payload describes the change.')
ibmFeatureActivationCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 31, 2, 1))
ibmFeatureActivationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 31, 2, 2))
ibmFeatureActivationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2, 5, 31, 2, 1, 1)).setObjects(("IBM-FEATURE-ACTIVATION-MIB", "ibmFeatureActivationBaseGroup"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFeatureActivationNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmFeatureActivationCompliance = ibmFeatureActivationCompliance.setStatus('current')
if mibBuilder.loadTexts: ibmFeatureActivationCompliance.setDescription('The compliance statement for the IBM-FEATURE-ACTIVATION-MIB.')
ibmFeatureActivationBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 5, 31, 2, 2, 1)).setObjects(("IBM-FEATURE-ACTIVATION-MIB", "ibmFodAction"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodIndex"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodFileUri"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodStatus"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyChangeTime"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyOldStatus"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyNewStatus"), ("IBM-FEATURE-ACTIVATION-MIB", "ibmFodKeyUpdateData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmFeatureActivationBaseGroup = ibmFeatureActivationBaseGroup.setStatus('current')
if mibBuilder.loadTexts: ibmFeatureActivationBaseGroup.setDescription('The group of mandatory objects for all implementations to be compliant.')
ibmFeatureActivationNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2, 5, 31, 2, 2, 2)).setObjects(("IBM-FEATURE-ACTIVATION-MIB", "ibmFodActivationChangeAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ibmFeatureActivationNotifGroup = ibmFeatureActivationNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ibmFeatureActivationNotifGroup.setDescription('The notification group required for compliance in alert semantics for feature activation implementations.')
mibBuilder.exportSymbols("IBM-FEATURE-ACTIVATION-MIB", ibm=ibm, ibmFeatureActivationBaseGroup=ibmFeatureActivationBaseGroup, ibmArchitecture=ibmArchitecture, ibmFodAction=ibmFodAction, PYSNMP_MODULE_ID=ibmFeatureActivationMIB, ibmFodNotifications=ibmFodNotifications, ibmFeatureActivationMIB=ibmFeatureActivationMIB, ibmFodKeyOldStatus=ibmFodKeyOldStatus, ibmFeatureActivationNotifGroup=ibmFeatureActivationNotifGroup, ibmFeatureActivationCompliances=ibmFeatureActivationCompliances, ibmFodFileUri=ibmFodFileUri, ibmFodKeyUpdateData=ibmFodKeyUpdateData, ibmFodObjects=ibmFodObjects, ibmFodConformance=ibmFodConformance, ibmFodStatus=ibmFodStatus, ibmFodIndex=ibmFodIndex, ibmFodActivationChangeAlert=ibmFodActivationChangeAlert, ibmFeatureActivationCompliance=ibmFeatureActivationCompliance, ibmFodKeyChangeTime=ibmFodKeyChangeTime, ibmFodKeyNewStatus=ibmFodKeyNewStatus, ibmFeatureActivationGroups=ibmFeatureActivationGroups)
