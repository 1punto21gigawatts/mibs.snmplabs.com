#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-IpCosMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-IpCosMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
mscVrIp, mscVrIpIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIp", "mscVrIpIndex")
Integer32, Unsigned32, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Integer32", "Unsigned32", "RowStatus", "DisplayString", "StorageType")
Hex, Link, NonReplicated, AsciiStringIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Hex", "Link", "NonReplicated", "AsciiStringIndex")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
mscVrIndex, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, iso, Integer32, Unsigned32, IpAddress, ModuleIdentity, Counter32, TimeTicks, Gauge32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "iso", "Integer32", "Unsigned32", "IpAddress", "ModuleIdentity", "Counter32", "TimeTicks", "Gauge32", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ipCosMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161))
mscVrIpPg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20))
mscVrIpPgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 1), )
if mibBuilder.loadTexts: mscVrIpPgRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpPg components.')
mscVrIpPgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"))
if mibBuilder.loadTexts: mscVrIpPgRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpPg component.')
mscVrIpPgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpPg components. These components can be added and deleted.')
mscVrIpPgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpPgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgStorageType.setDescription('This variable represents the storage type value for the mscVrIpPg tables.')
mscVrIpPgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: mscVrIpPgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgIndex.setDescription('This variable represents the index for the mscVrIpPg tables.')
mscVrIpPgUsersTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 432), )
if mibBuilder.loadTexts: mscVrIpPgUsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgUsersTable.setDescription('This attribute specifies a list of components that are using this CosPolicyGroup.')
mscVrIpPgUsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 432, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgUsersValue"))
if mibBuilder.loadTexts: mscVrIpPgUsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgUsersEntry.setDescription('An entry in the mscVrIpPgUsersTable.')
mscVrIpPgUsersValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 432, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgUsersValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgUsersValue.setDescription('This variable represents both the value and the index for the mscVrIpPgUsersTable.')
mscVrIpPgUsersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 432, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVrIpPgUsersRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgUsersRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscVrIpPgUsersTable.')
mscVrIpPgPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2))
mscVrIpPgPolicyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 1), )
if mibBuilder.loadTexts: mscVrIpPgPolicyRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpPgPolicy components.')
mscVrIpPgPolicyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpPgPolicy component.')
mscVrIpPgPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpPgPolicy components. These components can be added and deleted.')
mscVrIpPgPolicyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpPgPolicyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyStorageType.setDescription('This variable represents the storage type value for the mscVrIpPgPolicy tables.')
mscVrIpPgPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: mscVrIpPgPolicyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIndex.setDescription('This variable represents the index for the mscVrIpPgPolicy tables.')
mscVrIpPgPolicyProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 10), )
if mibBuilder.loadTexts: mscVrIpPgPolicyProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyProvTable.setDescription('This group contains the provisionable attributes for the Policy component.')
mscVrIpPgPolicyProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyProvEntry.setDescription('An entry in the mscVrIpPgPolicyProvTable.')
mscVrIpPgPolicyCosTreatmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyCosTreatmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyCosTreatmentIndex.setDescription('This attribute specifies the Class Of Service (COS) treatment a packet receives if this policy applies. If the value of this attribute is set to n, then the COS treatment is defined by the CosTreatment/n component of the same CosPolicyGroup.')
mscVrIpPgPolicyTosMap = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2))
mscVrIpPgPolicyTosMapRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 1), )
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpPgPolicyTosMap components.')
mscVrIpPgPolicyTosMapRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyTosMapIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpPgPolicyTosMap component.')
mscVrIpPgPolicyTosMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpPgPolicyTosMap components. These components can be added and deleted.')
mscVrIpPgPolicyTosMapComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpPgPolicyTosMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapStorageType.setDescription('This variable represents the storage type value for the mscVrIpPgPolicyTosMap tables.')
mscVrIpPgPolicyTosMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapIndex.setDescription('This variable represents the index for the mscVrIpPgPolicyTosMap tables.')
mscVrIpPgPolicyTosMapOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 11), )
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapOperTable.setDescription('This group contains the operational attributes for the TosMap and the IpAddrLayer4Flow component.')
mscVrIpPgPolicyTosMapOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyTosMapIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapOperEntry.setDescription('An entry in the mscVrIpPgPolicyTosMapOperTable.')
mscVrIpPgPolicyTosMapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapCos.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapCos.setDescription('This attribute indicates the Class Of Service (COS) with which a packet receives if this policy applies. The value of this attribute is derived from the cos attribute of the referenced CosTreatment of the Policy.')
mscVrIpPgPolicyTosMapTosTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 434), )
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosTable.setDescription('This attribute specifies a list of TOS byte values. An incoming packet is considered to match this policy if its masked TOS byte matches a value in the list. A bit-wise and operation is performed with the TOS byte of the incoming packet and the tosMask attribute of the referenced CosTreatment component before the comparison is done. This attribute must contain at least one TOS byte value, otherwise a semantic check error is generated.')
mscVrIpPgPolicyTosMapTosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 434, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyTosMapIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyTosMapTosValue"))
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosEntry.setDescription('An entry in the mscVrIpPgPolicyTosMapTosTable.')
mscVrIpPgPolicyTosMapTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 434, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosValue.setDescription('This variable represents both the value and the index for the mscVrIpPgPolicyTosMapTosTable.')
mscVrIpPgPolicyTosMapTosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 2, 434, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyTosMapTosRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscVrIpPgPolicyTosMapTosTable.')
mscVrIpPgPolicyIpAddrLayer4Flow = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3))
mscVrIpPgPolicyIpAddrLayer4FlowRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 1), )
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpPgPolicyIpAddrLayer4Flow components.')
mscVrIpPgPolicyIpAddrLayer4FlowRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpPgPolicyIpAddrLayer4Flow component.')
mscVrIpPgPolicyIpAddrLayer4FlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpPgPolicyIpAddrLayer4Flow components. These components can be added and deleted.')
mscVrIpPgPolicyIpAddrLayer4FlowComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpPgPolicyIpAddrLayer4FlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowStorageType.setDescription('This variable represents the storage type value for the mscVrIpPgPolicyIpAddrLayer4Flow tables.')
mscVrIpPgPolicyIpAddrLayer4FlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)))
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowIndex.setDescription('This variable represents the index for the mscVrIpPgPolicyIpAddrLayer4Flow tables.')
mscVrIpPgPolicyIpAddrLayer4FlowProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 10), )
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProvTable.setDescription('This group contains the provisionable attributes for any flow related component which has prefix and prefix length as its parameters.')
mscVrIpPgPolicyIpAddrLayer4FlowProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProvEntry.setDescription('An entry in the mscVrIpPgPolicyIpAddrLayer4FlowProvTable.')
mscVrIpPgPolicyIpAddrLayer4FlowPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 10, 1, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPrefix.setDescription('This attribute specifies the IP address prefix, source or destination IP address, of which the policy applies. The matching of actual address to the prefix is done in conjunction with the prefixLength attribute. A prefix length of 0 means any IP address.')
mscVrIpPgPolicyIpAddrLayer4FlowPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPrefixLength.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPrefixLength.setDescription('This attribute specifies the number of most significant bits of the IP address that are to be matched with the prefix. A prefix length of 0 means any IP address.')
mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 11), )
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable.setDescription('This group contains the provisionable attributes for any flow related component which has layer 4 (transport) protocol and port number as its parameters.')
mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry.setDescription('An entry in the mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable.')
mscVrIpPgPolicyIpAddrLayer4FlowProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17))).clone('tcp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowProtocol.setDescription('This attribute specifies the layer 4 (transport) protocol to which the policy applies.')
mscVrIpPgPolicyIpAddrLayer4FlowOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 12), )
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowOperTable.setDescription('This group contains the operational attributes for the TosMap and the IpAddrLayer4Flow component.')
mscVrIpPgPolicyIpAddrLayer4FlowOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIpAddrLayer4FlowIndex"))
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowOperEntry.setDescription('An entry in the mscVrIpPgPolicyIpAddrLayer4FlowOperTable.')
mscVrIpPgPolicyIpAddrLayer4FlowCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowCos.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowCos.setDescription('This attribute indicates the Class Of Service (COS) with which a packet receives if this policy applies. The value of this attribute is derived from the cos attribute of the referenced CosTreatment of the Policy.')
mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 435), )
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.setDescription('This attribute specifies the TCP or UDP port number or range of port numbers of which the policy applies. The port numbers specified here are used to match the source or destination port number of any incoming packet. The exact matching algorithm is defined by the flow component that uses this attribute group. To specify a port number to match, just enter the value. To specify a range of port numbers to match, enter the lower and upper bound of the range. The order in which the lower and upper bound are entered does not matter. Not setting this attribute or setting the port number to 0 means any port number.')
mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 435, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIpAddrLayer4FlowIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue"))
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry.setDescription('An entry in the mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.')
mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 435, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue.setDescription('This variable represents both the value and the index for the mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.')
mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 2, 3, 435, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable.')
mscVrIpPgCosTreatment = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3))
mscVrIpPgCosTreatmentRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 1), )
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentRowStatusTable.setDescription('This entry controls the addition and deletion of mscVrIpPgCosTreatment components.')
mscVrIpPgCosTreatmentRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgCosTreatmentIndex"))
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentRowStatusEntry.setDescription('A single entry in the table represents a single mscVrIpPgCosTreatment component.')
mscVrIpPgCosTreatmentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscVrIpPgCosTreatment components. These components can be added.')
mscVrIpPgCosTreatmentComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscVrIpPgCosTreatmentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentStorageType.setDescription('This variable represents the storage type value for the mscVrIpPgCosTreatment tables.')
mscVrIpPgCosTreatmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentIndex.setDescription('This variable represents the index for the mscVrIpPgCosTreatment tables.')
mscVrIpPgCosTreatmentProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 10), )
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentProvTable.setDescription('This group contains the provisionable attributes for the CosTreatment component.')
mscVrIpPgCosTreatmentProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-VirtualRouterMIB", "mscVrIndex"), (0, "Nortel-MsCarrier-MscPassport-IpMIB", "mscVrIpIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgIndex"), (0, "Nortel-MsCarrier-MscPassport-IpCosMIB", "mscVrIpPgCosTreatmentIndex"))
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentProvEntry.setDescription('An entry in the mscVrIpPgCosTreatmentProvTable.')
mscVrIpPgCosTreatmentCos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentCos.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentCos.setDescription('This attribute specifies the Class Of Service (COS) with which a packet would be forwarded when this COS treatment is selected.')
mscVrIpPgCosTreatmentSetTosByte = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentSetTosByte.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentSetTosByte.setDescription('This attribute specifies whether the router would change the Type Of Service (TOS) byte of packets when this COS treatment is selected. If set to yes, the TOS byte is changed based on the value of tos and tosMask.')
mscVrIpPgCosTreatmentTos = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 10, 1, 4), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentTos.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentTos.setDescription('This attribute specifies the value of the Type Of Service (TOS) byte with which packets are updated when this COS treatment is selected. This attribute is ignored if setTosByte is set to no. The actual TOS byte of the packet is updated based on the tos and tosMask attribute using the following formula: New TOS = ( Original TOS & ~tosMask ) | ( tos & tosMask ) For example: Original TOS byte: hex 8A (10001010 in binary) tos attribute: hex 12 (00010010 in binary) tosMask attribute: hex 3F (00111111 in binary) The changed TOS byte would be: hex 92 (10010010 in binary).')
mscVrIpPgCosTreatmentTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 100, 6, 20, 3, 10, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(224)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentTosMask.setStatus('mandatory')
if mibBuilder.loadTexts: mscVrIpPgCosTreatmentTosMask.setDescription('This attribute specifies the Type Of Service (TOS) bit mask with which the packets are examined and updated when this COS treatment is selected. The mask specifies which bits within the original TOS byte are to be examined or updated by the router. When the setTosByte is set to yes, this attribute is used in conjunction with the tos attribute to determine how the TOS byte is updated using the following formula: New TOS = ( Original TOS & ~tosMask ) | ( tos & tosMask ) For example: Original TOS byte: hex 8A (10001010 in binary) tos attribute: hex 12 (00010010 in binary) tosMask attribute: hex 3F (00111111 in binary) The changed TOS byte would be: hex 92 (10010010 in binary). When the TosMap component is provisioned under this Policy, this attribute is used in conjunction with the tos attribute of the TosMap component when packets are examined for matching TOS bits. By default, this attribute is set to the value of hex E0, i.e. bit 0, 1 and 2 of the TOS byte (the Precendence bits) are eligible to be examined and updated. When either the setTosByte is set to yes, or when the TosMap component is provisioned, a zero tosMask is considered invalid,')
ipCosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 1))
ipCosGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 1, 1))
ipCosGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 1, 1, 3))
ipCosGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 1, 1, 3, 2))
ipCosCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 3))
ipCosCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 3, 1))
ipCosCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 3, 1, 3))
ipCosCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 161, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-IpCosMIB", mscVrIpPgPolicyIpAddrLayer4FlowOperTable=mscVrIpPgPolicyIpAddrLayer4FlowOperTable, mscVrIpPgPolicyTosMapRowStatus=mscVrIpPgPolicyTosMapRowStatus, mscVrIpPgRowStatusTable=mscVrIpPgRowStatusTable, mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue=mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeValue, mscVrIpPgPolicyTosMapStorageType=mscVrIpPgPolicyTosMapStorageType, ipCosCapabilitiesCA02=ipCosCapabilitiesCA02, mscVrIpPgPolicy=mscVrIpPgPolicy, mscVrIpPgPolicyTosMap=mscVrIpPgPolicyTosMap, mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus=mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeRowStatus, ipCosGroupCA02=ipCosGroupCA02, mscVrIpPgPolicyTosMapOperEntry=mscVrIpPgPolicyTosMapOperEntry, mscVrIpPgPolicyRowStatusEntry=mscVrIpPgPolicyRowStatusEntry, mscVrIpPgPolicyIpAddrLayer4FlowCos=mscVrIpPgPolicyIpAddrLayer4FlowCos, mscVrIpPgPolicyIpAddrLayer4FlowProtocol=mscVrIpPgPolicyIpAddrLayer4FlowProtocol, mscVrIpPgIndex=mscVrIpPgIndex, mscVrIpPgRowStatusEntry=mscVrIpPgRowStatusEntry, mscVrIpPg=mscVrIpPg, mscVrIpPgPolicyProvEntry=mscVrIpPgPolicyProvEntry, ipCosGroupCA02A=ipCosGroupCA02A, mscVrIpPgPolicyTosMapTosValue=mscVrIpPgPolicyTosMapTosValue, mscVrIpPgCosTreatmentProvEntry=mscVrIpPgCosTreatmentProvEntry, mscVrIpPgPolicyTosMapRowStatusTable=mscVrIpPgPolicyTosMapRowStatusTable, mscVrIpPgPolicyIpAddrLayer4FlowProvTable=mscVrIpPgPolicyIpAddrLayer4FlowProvTable, mscVrIpPgComponentName=mscVrIpPgComponentName, mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry=mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedEntry, mscVrIpPgCosTreatmentCos=mscVrIpPgCosTreatmentCos, mscVrIpPgPolicyIpAddrLayer4FlowIndex=mscVrIpPgPolicyIpAddrLayer4FlowIndex, ipCosCapabilitiesCA=ipCosCapabilitiesCA, mscVrIpPgPolicyTosMapCos=mscVrIpPgPolicyTosMapCos, mscVrIpPgPolicyTosMapIndex=mscVrIpPgPolicyTosMapIndex, mscVrIpPgCosTreatment=mscVrIpPgCosTreatment, mscVrIpPgUsersTable=mscVrIpPgUsersTable, mscVrIpPgPolicyIpAddrLayer4FlowPrefixLength=mscVrIpPgPolicyIpAddrLayer4FlowPrefixLength, mscVrIpPgPolicyTosMapOperTable=mscVrIpPgPolicyTosMapOperTable, ipCosMIB=ipCosMIB, mscVrIpPgCosTreatmentComponentName=mscVrIpPgCosTreatmentComponentName, ipCosGroup=ipCosGroup, mscVrIpPgCosTreatmentStorageType=mscVrIpPgCosTreatmentStorageType, mscVrIpPgStorageType=mscVrIpPgStorageType, mscVrIpPgPolicyIpAddrLayer4FlowPrefix=mscVrIpPgPolicyIpAddrLayer4FlowPrefix, mscVrIpPgPolicyCosTreatmentIndex=mscVrIpPgPolicyCosTreatmentIndex, mscVrIpPgPolicyIpAddrLayer4FlowComponentName=mscVrIpPgPolicyIpAddrLayer4FlowComponentName, mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable=mscVrIpPgPolicyIpAddrLayer4FlowProtoProvisionedTable, mscVrIpPgPolicyTosMapComponentName=mscVrIpPgPolicyTosMapComponentName, mscVrIpPgPolicyTosMapRowStatusEntry=mscVrIpPgPolicyTosMapRowStatusEntry, mscVrIpPgPolicyIndex=mscVrIpPgPolicyIndex, mscVrIpPgPolicyIpAddrLayer4FlowOperEntry=mscVrIpPgPolicyIpAddrLayer4FlowOperEntry, mscVrIpPgCosTreatmentTos=mscVrIpPgCosTreatmentTos, mscVrIpPgCosTreatmentSetTosByte=mscVrIpPgCosTreatmentSetTosByte, mscVrIpPgUsersValue=mscVrIpPgUsersValue, mscVrIpPgPolicyTosMapTosRowStatus=mscVrIpPgPolicyTosMapTosRowStatus, mscVrIpPgCosTreatmentProvTable=mscVrIpPgCosTreatmentProvTable, mscVrIpPgCosTreatmentRowStatusTable=mscVrIpPgCosTreatmentRowStatusTable, mscVrIpPgPolicyRowStatus=mscVrIpPgPolicyRowStatus, mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry=mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeEntry, mscVrIpPgPolicyProvTable=mscVrIpPgPolicyProvTable, mscVrIpPgPolicyIpAddrLayer4FlowStorageType=mscVrIpPgPolicyIpAddrLayer4FlowStorageType, mscVrIpPgPolicyIpAddrLayer4FlowProvEntry=mscVrIpPgPolicyIpAddrLayer4FlowProvEntry, mscVrIpPgUsersRowStatus=mscVrIpPgUsersRowStatus, mscVrIpPgUsersEntry=mscVrIpPgUsersEntry, mscVrIpPgRowStatus=mscVrIpPgRowStatus, ipCosCapabilitiesCA02A=ipCosCapabilitiesCA02A, mscVrIpPgCosTreatmentTosMask=mscVrIpPgCosTreatmentTosMask, ipCosGroupCA=ipCosGroupCA, mscVrIpPgPolicyIpAddrLayer4Flow=mscVrIpPgPolicyIpAddrLayer4Flow, mscVrIpPgCosTreatmentRowStatus=mscVrIpPgCosTreatmentRowStatus, mscVrIpPgPolicyStorageType=mscVrIpPgPolicyStorageType, mscVrIpPgCosTreatmentRowStatusEntry=mscVrIpPgCosTreatmentRowStatusEntry, ipCosCapabilities=ipCosCapabilities, mscVrIpPgPolicyIpAddrLayer4FlowRowStatusEntry=mscVrIpPgPolicyIpAddrLayer4FlowRowStatusEntry, mscVrIpPgPolicyTosMapTosEntry=mscVrIpPgPolicyTosMapTosEntry, mscVrIpPgPolicyRowStatusTable=mscVrIpPgPolicyRowStatusTable, mscVrIpPgPolicyComponentName=mscVrIpPgPolicyComponentName, mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable=mscVrIpPgPolicyIpAddrLayer4FlowPortNumberRangeTable, mscVrIpPgPolicyIpAddrLayer4FlowRowStatusTable=mscVrIpPgPolicyIpAddrLayer4FlowRowStatusTable, mscVrIpPgPolicyIpAddrLayer4FlowRowStatus=mscVrIpPgPolicyIpAddrLayer4FlowRowStatus, mscVrIpPgPolicyTosMapTosTable=mscVrIpPgPolicyTosMapTosTable, mscVrIpPgCosTreatmentIndex=mscVrIpPgCosTreatmentIndex)
