#
# PySNMP MIB module Wellfleet-5000-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-5000-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, ModuleIdentity, Counter32, IpAddress, Gauge32, iso, Bits, TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "ModuleIdentity", "Counter32", "IpAddress", "Gauge32", "iso", "Bits", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfHardwareConfig, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfHardwareConfig")
wfHw5000Chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 1, 6))
wfHw5000ChassisBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 1))
wfHw5000NumSlots = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000NumSlots.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000NumSlots.setDescription('The number of slots in this 5000 chassis.')
wfHw5000BpSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000BpSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000BpSerialNumber.setDescription('The serial number of the chassis.')
wfHw5000ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2), )
if mibBuilder.loadTexts: wfHw5000ModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleTable.setDescription('Hardware Table of module descriptors - indexed by slot number')
wfHw5000ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1), ).setIndexNames((0, "Wellfleet-5000-CHASSIS-MIB", "wfHw5000ModuleSlot"))
if mibBuilder.loadTexts: wfHw5000ModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleEntry.setDescription('Specific information about a module, indexed by slot.')
wfHw5000ModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000ModuleSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleSlot.setDescription('A unique value for each slot. Its value ranges between 0 and 14. There are products in this family that contain less than 14 slots.')
wfHw5000ModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000ModuleDescription.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleDescription.setDescription('A textual description of the module.')
wfHw5000ModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000ModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleId.setDescription('The unique module identification number.')
wfHw5000ModuleRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000ModuleRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleRev.setDescription('The revision level of the module.')
wfHw5000ModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000ModuleSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleSerialNumber.setDescription('The serial number of the module.')
wfHw5000ModuleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 1, 6, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfHw5000ModuleIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfHw5000ModuleIpAddress.setDescription('The IP Address of the module, null if none exists')
mibBuilder.exportSymbols("Wellfleet-5000-CHASSIS-MIB", wfHw5000NumSlots=wfHw5000NumSlots, wfHw5000ChassisBase=wfHw5000ChassisBase, wfHw5000ModuleSlot=wfHw5000ModuleSlot, wfHw5000ModuleId=wfHw5000ModuleId, wfHw5000ModuleEntry=wfHw5000ModuleEntry, wfHw5000ModuleIpAddress=wfHw5000ModuleIpAddress, wfHw5000ModuleRev=wfHw5000ModuleRev, wfHw5000ModuleTable=wfHw5000ModuleTable, wfHw5000ModuleDescription=wfHw5000ModuleDescription, wfHw5000BpSerialNumber=wfHw5000BpSerialNumber, wfHw5000ModuleSerialNumber=wfHw5000ModuleSerialNumber, wfHw5000Chassis=wfHw5000Chassis)
