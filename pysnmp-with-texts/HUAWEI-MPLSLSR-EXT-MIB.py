#
# PySNMP MIB module HUAWEI-MPLSLSR-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MPLSLSR-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
MplsLabel, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsLabel")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, iso, TimeTicks, ObjectIdentity, Counter64, ModuleIdentity, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, MibIdentifier, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "TimeTicks", "ObjectIdentity", "Counter64", "ModuleIdentity", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "MibIdentifier", "Counter32", "Integer32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
hwMplsLsrExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182))
hwMplsLsrExtMIB.setRevisions(('2013-09-24 16:55', '2011-07-30 11:00', '2010-11-22 16:00', '2010-08-11 16:00', '2010-07-12 16:00', '2009-03-10 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwMplsLsrExtMIB.setRevisionsDescriptions(('V2.01, added six nodes about MPLS BGP BFD configuration management.', 'V2.00, delete Delval clause in these nodes: hwMplsLabelAdvertise, hwLdpVirtualStatus.', 'V1.03, modified the description.', 'V1.02, modified the description.', 'V1.01, added the object hwMplsStaticLspTable and modified the description.', 'V1.00, initial version for the configuration of MPLS capabilities.',))
if mibBuilder.loadTexts: hwMplsLsrExtMIB.setLastUpdated('201309241655Z')
if mibBuilder.loadTexts: hwMplsLsrExtMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwMplsLsrExtMIB.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwMplsLsrExtMIB.setDescription('This MIB provides management of MPLS basic configurations. It is an extension of MPLS-LSR-STD-MIB.')
hwMplsLsrExtObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1))
hwMplsLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsLsrId.setDescription('This object indicates the configuration of the MPLS LSR ID. Before the MPLS capability is enabled, the MPLS LSR ID must be configured. After the MPLS capability is enabled, the MPLS LSR ID cannot be modified or deleted. If the MPLS LSR ID is set as 0.0.0.0, it indicates that the MPLS LSR ID is deleted. The MPLS LSR ID and the MPLS capability cannot be configured together.')
hwMplsCapabilityConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsCapabilityConfig.setStatus('current')
if mibBuilder.loadTexts: hwMplsCapabilityConfig.setDescription('This object indicates the configuration or deletion of the MPLS capability. Before the MPLS capability is enabled, the MPLS LSR ID must be configured.')
hwMplsLabelAdvertise = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("explicitNull", 1), ("implicitNull", 2), ("nonNull", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsLabelAdvertise.setStatus('current')
if mibBuilder.loadTexts: hwMplsLabelAdvertise.setDescription('This object indicates the way to configure label advertisement policy. By default, the label advertisement policy is implicitnull. Before the label advertisement policy is configured, MPLS capability must be enabled. Options: 1. explicitNull(1) -indicates that the label advertisement policy is explicitNull. 2. implicitNull(2) -indicates that the label advertisement policy is implicitNull. 3. nonNull(3) -indicates that the label advertisement policy is nonNull. Default: implicitNull(2) ')
hwMplsStatisticsIntervalTimer = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsStatisticsIntervalTimer.setStatus('current')
if mibBuilder.loadTexts: hwMplsStatisticsIntervalTimer.setDescription('This object indicates the value of the MPLS statistics timer. Range: 30-65535 Default: 0 Unit: seconds ')
hwMplsBfdCapabilityConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdCapabilityConfig.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdCapabilityConfig.setDescription('This object indicates the configuration or deletion of the MPLS BFD capability. Before the MPLS BFD function is enabled, you must enable the MPLS capability and BFD capability.')
hwMplsBfdMinTx = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdMinTx.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdMinTx.setDescription('This object indicates the minimum forwarding period. If the minimum forwarding period is set as 0 seconds, it indicates that the minimum forwarding period returns to the default value.')
hwMplsBfdMinRx = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdMinRx.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdMinRx.setDescription('This object indicates the minimum receiving period. If the minimum receiving period is set as 0 seconds, it indicates that the minimum receiving period returns to the default value.')
hwMplsBfdDetectMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdDetectMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdDetectMultiplier.setDescription('This object indicates the value of the detect multiplier. If the value of the detect multiplier is set as 0, it indicates that the value returns to the default value.')
hwMplsFecListName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsFecListName.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecListName.setDescription('This object indicates the name of the FEC LIST. The name of the FEC LIST is globally unique, with a valid length from 1 to 31 characters. If the character length is 0, it indicates that the FEC LIST is deleted. Furthermore, the FEC LIST cannot be modified, and you can only delete the FEC LIST and then create a new one. If the FEC LIST is used by others, you need to cancel the usage and then delete the FEC LIST. Range: 1-31 ')
hwMplsBfdTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("triggerHost", 1), ("triggerFeclist", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdTrigger.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdTrigger.setDescription('This object indicates the MPLS BFD triggering policy. By using this object, you can also specify the next hop and the outgoing interface. To configure the MPLS BFD triggering policy, you must enable MPLS and BFD in advance. In addition, this MPLS BFD triggering policy cannot be modified, and you can only delete the policy and then create a new one. Options: 1. triggerHost(1) -indicates that the MPLS BFD triggering policy was configured as host. 2. triggerFeclist(2) -indicates that the MPLS BFD triggering policy was configured as FEC list. 3. disabled(3) -indicates that the MPLS BFD triggering policy was not configured. Default: triggerHost(1) ')
hwMplsBfdTriggerNextHop = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdTriggerNextHop.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdTriggerNextHop.setDescription('This object indicates the next hop when the MPLS BFD trigger policy is configured as host. The next hop and the outgoing interface can be specified at the same time.')
hwMplsBfdTriggerInterface = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdTriggerInterface.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdTriggerInterface.setDescription('This object indicates the outgoing interface when the MPLS BFD trigger policy is configured as host. The next hop and the outgoing interface can be specified at the same time. In addition, you can get the correct interface index based on the ifIndex of ifTable.')
hwMplsBfdTriggerFecListName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBfdTriggerFecListName.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdTriggerFecListName.setDescription('This object indicates the FEC list when the MPLS BFD trigger policy is configured. The valid length of the FEC list ranges from 1 to 31 characters. If the specified FEC list does not exist, or the specified FEC list contains no FEC node, no LSP can be triggered. Range: 1-31 ')
hwLdpVirtualTunnelFEC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdpVirtualTunnelFEC.setStatus('current')
if mibBuilder.loadTexts: hwLdpVirtualTunnelFEC.setDescription('This object indicates the LDP virtual tunnel FEC.')
hwMplsBgpBfdCapabilityConfig = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBgpBfdCapabilityConfig.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdCapabilityConfig.setDescription('This object indicates the configuration or deletion of the MPLS BGP BFD capability. Before the MPLS BGP BFD function is enabled, you must enable the MPLS capability and BFD capability.')
hwMplsBgpBfdMinTx = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBgpBfdMinTx.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdMinTx.setDescription('This object indicates the minimum forwarding period. If the minimum forwarding period is set as 0 seconds, it indicates that the minimum forwarding period returns to the default value.')
hwMplsBgpBfdMinRx = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBgpBfdMinRx.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdMinRx.setDescription('This object indicates the minimum receiving period. If the minimum receiving period is set as 0 seconds, it indicates that the minimum receiving period returns to the default value.')
hwMplsBgpBfdDetectMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBgpBfdDetectMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdDetectMultiplier.setDescription('This object indicates the value of the detect multiplier. If the value of the detect multiplier is set as 0, it indicates that the value returns to the default value.')
hwMplsBgpBfdTriggerTunnel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("triggerHost", 1), ("triggerIpPrefix", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBgpBfdTriggerTunnel.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdTriggerTunnel.setDescription('This object indicates the MPLS BGP BFD triggering policy. To configure the MPLS BGP BFD triggering policy, you must enable MPLS and BFD in advance. Options: 1. triggerHost(1) -indicates that the MPLS BGP BFD triggering policy was configured as host. 2. triggerIpPrefix(2) -indicates that the MPLS BGP BFD triggering policy was configured as Ip Prefix. 3. disabled(3) -indicates that the MPLS BGP BFD triggering policy was not configured. Default: disabled(3) ')
hwMplsBgpBfdTriggerTunnelIpprefix = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMplsBgpBfdTriggerTunnelIpprefix.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdTriggerTunnelIpprefix.setDescription('This object indicates the IP Prefix name when the MPLS BGP BFD trigger policy is configured. The valid length of the IP prefix name ranges from 1 to 169 characters. Range: 1-169 ')
hwMplsFecListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 50), )
if mibBuilder.loadTexts: hwMplsFecListTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecListTable.setDescription('This table is used to configure or delete MPLS FEC Node. The indexes of this table are hwMplsFecNodeIpAddress, hwMplsFecNodeInterface, and hwMplsFecNodeNextHop. ')
hwMplsFecListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 50, 1), ).setIndexNames((0, "HUAWEI-MPLSLSR-EXT-MIB", "hwMplsFecNodeIpAddress"), (0, "HUAWEI-MPLSLSR-EXT-MIB", "hwMplsFecNodeInterface"), (0, "HUAWEI-MPLSLSR-EXT-MIB", "hwMplsFecNodeNextHop"))
if mibBuilder.loadTexts: hwMplsFecListEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecListEntry.setDescription('An FEC node entry of FEC list table. It can be created, or deleted. The indexes of this entry are hwMplsFecNodeIpAddress, hwMplsFecNodeInterface, and hwMplsFecNodeNextHop. ')
hwMplsFecNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 50, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwMplsFecNodeIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecNodeIpAddress.setDescription('This object indicates the IP address of the specified FEC node.')
hwMplsFecNodeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 50, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwMplsFecNodeInterface.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecNodeInterface.setDescription('This object indicates the outgoing interface of the FEC node. You can get the correct interface index based on the ifIndex of ifTable.')
hwMplsFecNodeNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 50, 1, 4), IpAddress())
if mibBuilder.loadTexts: hwMplsFecNodeNextHop.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecNodeNextHop.setDescription('This object indicates the next hop of the FEC node.')
hwMplsFecListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 50, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsFecListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsFecListRowStatus.setDescription('This object indicates whether one entry of FEC list table is created or destroyed. The value of the object can be CreatAndGo or Destroy. If the value is set as CreatAndGo, and the entry is created in hwFecListTable, the status of the object will change into active.')
hwMplsInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 51), )
if mibBuilder.loadTexts: hwMplsInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsInterfaceTable.setDescription('This table is used to configure or delete the MPLS capability on the interface. The index of this table is hwMplsInterfaceIndex. ')
hwMplsInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 51, 1), ).setIndexNames((0, "HUAWEI-MPLSLSR-EXT-MIB", "hwMplsInterfaceIndex"))
if mibBuilder.loadTexts: hwMplsInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsInterfaceEntry.setDescription('An entry of the MPLS interface table, used to display and configure features on the MPLS-supporting interface. The index of this entry is hwMplsInterfaceIndex. ')
hwMplsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 51, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMplsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsInterfaceIndex.setDescription('This object indicates the interface index. You can get the correct interface index based on the ifIndex of ifTable.')
hwMplsMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 51, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsMtu.setStatus('current')
if mibBuilder.loadTexts: hwMplsMtu.setDescription('This object indicates the MPLS MTU of an interface. If the value of the MPLS MTU is set as 0, it indicates that the MPLS MTU is deleted.')
hwMplsInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 51, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsInterfaceRowStatus.setDescription('This object indicates whether one entry is created or deleted in hwMplsInterfaceTable. The value of the object can be CreatAndGo and Destroy. When the value is set as CreatAndGo, and the entry is created, the status of the object will change into active.')
hwLdpStaticFrrInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 52), )
if mibBuilder.loadTexts: hwLdpStaticFrrInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrInterfaceTable.setDescription('This table is used to configure or delete static LDP FRR entries on the interface. The indexes of this table are hwMplsInterfaceIndex and hwLdpStaticFrrPriority. ')
hwLdpStaticFrrInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 52, 1), ).setIndexNames((0, "HUAWEI-MPLSLSR-EXT-MIB", "hwMplsInterfaceIndex"), (0, "HUAWEI-MPLSLSR-EXT-MIB", "hwLdpStaticFrrPriority"))
if mibBuilder.loadTexts: hwLdpStaticFrrInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrInterfaceEntry.setDescription('This entry is used to display and configure the FRR-supporting interface. The indexes of this entry are hwMplsInterfaceIndex and hwLdpStaticFrrPriority. ')
hwLdpStaticFrrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 52, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwLdpStaticFrrPriority.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrPriority.setDescription('This object indicates the priority of a static FRR entry.')
hwLdpStaticFrrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 52, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpStaticFrrNextHop.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrNextHop.setDescription('This object indicates the next hop of the static FRR.')
hwLdpStaticFrrIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 52, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpStaticFrrIpPrefix.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrIpPrefix.setDescription('This object indicates the IP prefix policy. The valid prefix length ranges from 1 to 169 characters. When the length is 0, it indicates that the policy is deleted. Range: 1-169 ')
hwLdpStaticFrrInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 52, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLdpStaticFrrInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrInterfaceRowStatus.setDescription('This object indicates whether one entry is created or deleted in hwLdpStaticFrrInterfaceTable. The value of the object can be CreatAndGo or Destroy. When the value is set as CreatAndGo, and the entry is created, the status of the object will change into active.')
hwLdpVirtualTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 53), )
if mibBuilder.loadTexts: hwLdpVirtualTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwLdpVirtualTunnelTable.setDescription('This table specifies LDP virtual tunnel information. The index of this table is hwLdpVirtualTunnelIndex. ')
hwLdpVirtualTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 53, 1), ).setIndexNames((0, "HUAWEI-MPLSLSR-EXT-MIB", "hwLdpVirtualTunnelIndex"))
if mibBuilder.loadTexts: hwLdpVirtualTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdpVirtualTunnelEntry.setDescription('An entry of the virtual tunnel table, used to display the features associated with the virtual tunnel. The index of this entry is hwLdpVirtualTunnelIndex. ')
hwLdpVirtualTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 53, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwLdpVirtualTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdpVirtualTunnelIndex.setDescription('This object indicates the LDP virtual tunnel index.')
hwLdpVirtualStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 53, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpVirtualStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdpVirtualStatus.setDescription('The status of this LDP virtual tunnel. Options: 1. up(1) -indicates that the status of this LDP virtual tunnel is Up. 2. down(2) -indicates that the status of this LDP virtual tunnel is Down. 3. testing(3) -indicates that the status of this LDP virtual tunnel is testing, this is, in some test mode. Default: up(1) ')
hwLdpXcIndexArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 53, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpXcIndexArray.setStatus('current')
if mibBuilder.loadTexts: hwLdpXcIndexArray.setDescription('This object indicates the xc index of the members of the LDP virtual tunnel.')
hwLdpOutSegmentIndexArray = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 53, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdpOutSegmentIndexArray.setStatus('current')
if mibBuilder.loadTexts: hwLdpOutSegmentIndexArray.setDescription('This object indicates the outsegment index of the members of the LDP virtual tunnel.')
hwLdpVirtualTunnelTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 54))
hwMplsLdpVirtualTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 54, 1)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpVirtualTunnelFEC"))
if mibBuilder.loadTexts: hwMplsLdpVirtualTunnelUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpVirtualTunnelUp.setDescription('A trap is sent when an LDP virtual tunnel goes Up.')
hwMplsLdpVirtualTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 54, 2)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpVirtualTunnelFEC"))
if mibBuilder.loadTexts: hwMplsLdpVirtualTunnelDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpVirtualTunnelDown.setDescription('A trap is sent when an LDP virtual tunnel goes Down.')
hwMplsStaticLspTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55), )
if mibBuilder.loadTexts: hwMplsStaticLspTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspTable.setDescription('This table is used to create or delete static LSP configurations. The index of this table is hwMplsStaticLspName. ')
hwMplsStaticLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1), ).setIndexNames((0, "HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspName"))
if mibBuilder.loadTexts: hwMplsStaticLspEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspEntry.setDescription('The entry is used to show or configure static LSP. The index of this entry is hwMplsStaticLspName. ')
hwMplsStaticLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 1), DisplayString())
if mibBuilder.loadTexts: hwMplsStaticLspName.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspName.setDescription('This object indicates the name of static LSP.')
hwMplsStaticLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ingress", 1), ("transit", 2), ("egress", 3), ("ingressBindTunnel", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspType.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspType.setDescription('This object is used to identify the type of static LSP. Options: 1. ingress(1) -indicates that the type of the static LSP is ingress. 2. transit(2) -indicates that the type of the static LSP is transit. 3. egress(3) -indicates that the type of the static LSP is egress. 4. ingressBindTunnel(4) -indicates that the type of the static LSP is ingress-bind-tunnel. ')
hwMplsStaticLspInIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspInIntfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspInIntfIndex.setDescription('This object indicates the incoming-interface index.')
hwMplsStaticLspInLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 13), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspInLabel.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspInLabel.setDescription('This object indicates the in-label.')
hwMplsStaticLspLsrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspLsrId.setDescription('This object indicates the LSR ID of ingress static LSP.')
hwMplsStaticLspTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspTunnelID.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspTunnelID.setDescription('This object indicates the Tunnel ID of ingress static LSP.')
hwMplsStaticLspNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspNextHop.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspNextHop.setDescription('This object indicates the nexthop of static LSP.')
hwMplsStaticLspOutIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspOutIntfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspOutIntfIndex.setDescription('This object indicates the outgoing-interface index.')
hwMplsStaticLspOutLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 18), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspOutLabel.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspOutLabel.setDescription('This object indicates the out-label.')
hwMplsStaticLspDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 19), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspDestAddr.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspDestAddr.setDescription('This object indicates the destination.')
hwMplsStaticLspMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspMaskLen.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspMaskLen.setDescription('This object indicates the mask length.')
hwMplsStaticLspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 1, 55, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMplsStaticLspRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspRowStatus.setDescription('This object indicates whether one entry is created or deleted in hwMplsStaticLspTable. The value of the object can be CreateAndGo or Destroy. When the value is set as CreateAndGo, and the entry is created, the status of the object will change into active.')
hwMplsLsrExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2))
hwMplsLsrExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 1))
hwMplsModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 1, 1)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBasicGroup"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsModuleCompliance = hwMplsModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMplsModuleCompliance.setDescription('hwMplsModuleCompliance')
hwMplsLsrExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2))
hwMplsBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 1)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsLsrId"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsCapabilityConfig"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsLabelAdvertise"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStatisticsIntervalTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsBasicGroup = hwMplsBasicGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsBasicGroup.setDescription('Objects required for MPLS basic configuration management.')
hwMplsBfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 2)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdCapabilityConfig"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdMinTx"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdMinRx"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdDetectMultiplier"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsFecListName"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdTrigger"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdTriggerNextHop"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdTriggerInterface"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBfdTriggerFecListName"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsFecListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsBfdGroup = hwMplsBfdGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsBfdGroup.setDescription('Objects required for MPLS BFD configuration management.')
hwLdpStaticFrrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 3)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpStaticFrrNextHop"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpStaticFrrIpPrefix"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpStaticFrrInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdpStaticFrrGroup = hwLdpStaticFrrGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdpStaticFrrGroup.setDescription('Objects required for LDP static FRR configuration management.')
hwMplsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 4)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsMtu"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsInterfaceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsInterfaceGroup = hwMplsInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsInterfaceGroup.setDescription('Objects required for MPLS configuration management on interface.')
hwMplsLdpVirtualTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 5)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpVirtualTunnelFEC"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpVirtualStatus"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpXcIndexArray"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwLdpOutSegmentIndexArray"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpVirtualTunnelGroup = hwMplsLdpVirtualTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpVirtualTunnelGroup.setDescription('Objects required for LDP virtual tunnel management.')
hwMplsLdpVirtualTunnelNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 6)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsLdpVirtualTunnelUp"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsLdpVirtualTunnelDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLdpVirtualTunnelNotificationGroup = hwMplsLdpVirtualTunnelNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLdpVirtualTunnelNotificationGroup.setDescription('Notification information about LDP virtual tunnel.')
hwMplsStaticLspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 7)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspType"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspInIntfIndex"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspInLabel"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspLsrId"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspTunnelID"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspNextHop"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspOutIntfIndex"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspOutLabel"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspDestAddr"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspMaskLen"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsStaticLspRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsStaticLspGroup = hwMplsStaticLspGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspGroup.setDescription('Objects required for static LSP configuration management.')
hwMplsBgpBfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 182, 2, 2, 8)).setObjects(("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBgpBfdCapabilityConfig"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBgpBfdMinTx"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBgpBfdMinRx"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBgpBfdDetectMultiplier"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBgpBfdTriggerTunnel"), ("HUAWEI-MPLSLSR-EXT-MIB", "hwMplsBgpBfdTriggerTunnelIpprefix"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsBgpBfdGroup = hwMplsBgpBfdGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsBgpBfdGroup.setDescription('Objects required for MPLS BGP BFD configuration management.')
mibBuilder.exportSymbols("HUAWEI-MPLSLSR-EXT-MIB", hwMplsStaticLspMaskLen=hwMplsStaticLspMaskLen, hwLdpVirtualTunnelIndex=hwLdpVirtualTunnelIndex, hwMplsBfdTriggerInterface=hwMplsBfdTriggerInterface, hwMplsBfdGroup=hwMplsBfdGroup, hwLdpStaticFrrPriority=hwLdpStaticFrrPriority, hwMplsStaticLspName=hwMplsStaticLspName, hwMplsStaticLspRowStatus=hwMplsStaticLspRowStatus, hwMplsBfdTriggerFecListName=hwMplsBfdTriggerFecListName, hwMplsInterfaceEntry=hwMplsInterfaceEntry, hwMplsModuleCompliance=hwMplsModuleCompliance, hwLdpStaticFrrInterfaceRowStatus=hwLdpStaticFrrInterfaceRowStatus, hwMplsInterfaceGroup=hwMplsInterfaceGroup, hwMplsLsrExtCompliances=hwMplsLsrExtCompliances, hwMplsBfdCapabilityConfig=hwMplsBfdCapabilityConfig, hwLdpStaticFrrNextHop=hwLdpStaticFrrNextHop, hwMplsInterfaceIndex=hwMplsInterfaceIndex, hwMplsBgpBfdMinTx=hwMplsBgpBfdMinTx, hwLdpStaticFrrInterfaceTable=hwLdpStaticFrrInterfaceTable, hwLdpVirtualStatus=hwLdpVirtualStatus, hwLdpOutSegmentIndexArray=hwLdpOutSegmentIndexArray, hwMplsInterfaceRowStatus=hwMplsInterfaceRowStatus, hwMplsStatisticsIntervalTimer=hwMplsStatisticsIntervalTimer, hwLdpVirtualTunnelTrap=hwLdpVirtualTunnelTrap, hwMplsLsrExtGroup=hwMplsLsrExtGroup, hwLdpStaticFrrIpPrefix=hwLdpStaticFrrIpPrefix, hwMplsLdpVirtualTunnelUp=hwMplsLdpVirtualTunnelUp, hwLdpStaticFrrInterfaceEntry=hwLdpStaticFrrInterfaceEntry, hwMplsBgpBfdMinRx=hwMplsBgpBfdMinRx, hwMplsStaticLspInLabel=hwMplsStaticLspInLabel, hwMplsLsrExtMIB=hwMplsLsrExtMIB, hwMplsBfdDetectMultiplier=hwMplsBfdDetectMultiplier, hwMplsFecListRowStatus=hwMplsFecListRowStatus, hwLdpVirtualTunnelFEC=hwLdpVirtualTunnelFEC, hwMplsStaticLspEntry=hwMplsStaticLspEntry, hwMplsMtu=hwMplsMtu, hwMplsStaticLspType=hwMplsStaticLspType, hwLdpStaticFrrGroup=hwLdpStaticFrrGroup, hwMplsLdpVirtualTunnelGroup=hwMplsLdpVirtualTunnelGroup, hwMplsStaticLspOutLabel=hwMplsStaticLspOutLabel, hwMplsLsrId=hwMplsLsrId, PYSNMP_MODULE_ID=hwMplsLsrExtMIB, hwMplsStaticLspInIntfIndex=hwMplsStaticLspInIntfIndex, hwMplsInterfaceTable=hwMplsInterfaceTable, hwLdpVirtualTunnelTable=hwLdpVirtualTunnelTable, hwMplsLdpVirtualTunnelDown=hwMplsLdpVirtualTunnelDown, hwMplsLabelAdvertise=hwMplsLabelAdvertise, hwMplsBgpBfdDetectMultiplier=hwMplsBgpBfdDetectMultiplier, hwMplsBgpBfdTriggerTunnel=hwMplsBgpBfdTriggerTunnel, hwMplsFecNodeNextHop=hwMplsFecNodeNextHop, hwLdpVirtualTunnelEntry=hwLdpVirtualTunnelEntry, hwMplsStaticLspNextHop=hwMplsStaticLspNextHop, hwMplsStaticLspOutIntfIndex=hwMplsStaticLspOutIntfIndex, hwMplsFecListEntry=hwMplsFecListEntry, hwMplsFecNodeInterface=hwMplsFecNodeInterface, hwMplsFecListName=hwMplsFecListName, hwMplsLdpVirtualTunnelNotificationGroup=hwMplsLdpVirtualTunnelNotificationGroup, hwMplsBfdTriggerNextHop=hwMplsBfdTriggerNextHop, hwMplsLsrExtObject=hwMplsLsrExtObject, hwMplsBgpBfdTriggerTunnelIpprefix=hwMplsBgpBfdTriggerTunnelIpprefix, hwMplsBfdMinTx=hwMplsBfdMinTx, hwLdpXcIndexArray=hwLdpXcIndexArray, hwMplsBgpBfdCapabilityConfig=hwMplsBgpBfdCapabilityConfig, hwMplsStaticLspLsrId=hwMplsStaticLspLsrId, hwMplsStaticLspTunnelID=hwMplsStaticLspTunnelID, hwMplsBasicGroup=hwMplsBasicGroup, hwMplsStaticLspGroup=hwMplsStaticLspGroup, hwMplsBfdTrigger=hwMplsBfdTrigger, hwMplsBfdMinRx=hwMplsBfdMinRx, hwMplsFecNodeIpAddress=hwMplsFecNodeIpAddress, hwMplsBgpBfdGroup=hwMplsBgpBfdGroup, hwMplsLsrExtConformance=hwMplsLsrExtConformance, hwMplsFecListTable=hwMplsFecListTable, hwMplsCapabilityConfig=hwMplsCapabilityConfig, hwMplsStaticLspDestAddr=hwMplsStaticLspDestAddr, hwMplsStaticLspTable=hwMplsStaticLspTable)
