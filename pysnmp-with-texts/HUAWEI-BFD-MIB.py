#
# PySNMP MIB module HUAWEI-BFD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BFD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, Bits, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, iso, MibIdentifier, ObjectIdentity, NotificationType, ModuleIdentity, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "iso", "MibIdentifier", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Counter64", "Unsigned32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hwBFDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38))
if mibBuilder.loadTexts: hwBFDMIB.setLastUpdated('200612270000Z')
if mibBuilder.loadTexts: hwBFDMIB.setOrganization('Organization.')
if mibBuilder.loadTexts: hwBFDMIB.setContactInfo('Contact-info.')
if mibBuilder.loadTexts: hwBFDMIB.setDescription('Description.')
class BfdInterval(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'

class BfdDiag(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'

hwBfdScalarsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1))
hwBfdVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 1), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdVersionNumber.setStatus('current')
if mibBuilder.loadTexts: hwBfdVersionNumber.setDescription('The current version number of the BFD protocol is 1.')
hwBfdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 2), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdAdminStatus.setDescription("Describe the administrative status of a BFD protocol. The value 'enabled' denotes that the BFD Process is active on all interface; The value 'disabled' denotes that the BFD process is disabled on all interfaces.")
hwBfdSessLimitNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessLimitNumber.setDescription('Define the maximum number of BFD sessions allowed in the logic router.')
hwBfdSessInterfaceLimitNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessInterfaceLimitNumber.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessInterfaceLimitNumber.setDescription('Define the maximum number of BFD sessions allowed per board.')
hwBfdSessStaticNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessStaticNumber.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessStaticNumber.setDescription('The total number of BFD static sessions.')
hwBfdSessDynamicNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessDynamicNumber.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDynamicNumber.setDescription('The total number of BFD dynamic sessions.')
hwBfdSessGlobalDefaultIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdSessGlobalDefaultIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessGlobalDefaultIpAddr.setDescription('Define the default multicast IP address used in BFD multicast detection.')
hwBfdEchoPassiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 8), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdEchoPassiveStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdEchoPassiveStatus.setDescription('The passive Echo function of BFD.')
hwBfdEchoAclNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2999), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdEchoAclNum.setStatus('current')
if mibBuilder.loadTexts: hwBfdEchoAclNum.setDescription('The Acl Number for passive Echo function of BFD.')
hwBfdSessDynamicPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdSessDynamicPingInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDynamicPingInterval.setDescription('Define the sending interval of the MPLS echo packet. The unit is second.')
hwBfdSessDynamicSupportPassive = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 11), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdSessDynamicSupportPassive.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDynamicSupportPassive.setDescription("The capability of automatically creating BFD sessions on the LSP egress 'enable'denotes that the egress can create BFD sessions; 'disabled'denotes that the egress can not create BFD sessions.")
hwBfdSessDelayUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdSessDelayUpTime.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDelayUpTime.setDescription('Define delay interval before the session turns to up. The unit is second.')
hwBfdSessMultiDstPort = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3784, 3784), ValueRangeConstraint(4784, 4784), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdSessMultiDstPort.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessMultiDstPort.setDescription('The destination UDP port of multi-hop BFD session. When the administrative status of BFD protocol is disabled, this value will be 0.')
hwBfdTrapSendInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBfdTrapSendInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdTrapSendInterval.setDescription('Define the sending interval of TRAP message. The unit is seconds.')
hwBfdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2))
hwBfdIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1), )
if mibBuilder.loadTexts: hwBfdIfConfTable.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfTable.setDescription('The interface configuration table of BFD entries.')
hwBfdIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1), ).setIndexNames((0, "HUAWEI-BFD-MIB", "hwBfdIfConfIndex"))
if mibBuilder.loadTexts: hwBfdIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfEntry.setDescription('The BFD Interface Entry describes BFD Interface.')
hwBfdIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwBfdIfConfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfIndex.setDescription("It is the Configuration's Index of this interface.")
hwBfdIfConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdIfConfName.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfName.setDescription('It is the name of this Interface.')
hwBfdIfConfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdIfConfEnable.setStatus('obsolete')
if mibBuilder.loadTexts: hwBfdIfConfEnable.setDescription('The flag that whether the interface has enabled BFD.')
hwBfdIfConfDeleting = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdIfConfDeleting.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfDeleting.setDescription('The flag that whether the interface is in deleting. 0:The interface is not deleted. 1:The interface is deleted')
hwBfdIfConfAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdIfConfAvailable.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfAvailable.setDescription('The flag that whether the interface is available. 0:The interface is not available. 1:The interface is available.')
hwBfdIfConfSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdIfConfSessCnt.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfSessCnt.setDescription('The number of sessions that has been bound to this interface.')
hwBfdIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdIfConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdIfConfRowStatus.setDescription('used to manage the creation and deletion of conceptual rows.')
hwBfdSessionConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2), )
if mibBuilder.loadTexts: hwBfdSessionConfTable.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionConfTable.setDescription('The BFD Session Configuration Table describes the BFD sessions.')
hwBfdSessionConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1), ).setIndexNames((0, "HUAWEI-BFD-MIB", "hwBfdSessConfName"))
if mibBuilder.loadTexts: hwBfdSessionConfEntry.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionConfEntry.setDescription('The BFD Session Configuration Entry describes BFD session.')
hwBfdSessConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: hwBfdSessConfName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfName.setDescription('It is the name of this Configuration model.')
hwBfdSessConfMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessConfMIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfMIndex.setDescription("It is the Configuration's Index of this session.")
hwBfdSessConfLocalDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfLocalDiscr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfLocalDiscr.setDescription('Define the local discriminator of the BFD session.')
hwBfdSessConfRemoteDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfRemoteDiscr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfRemoteDiscr.setDescription('Define the remote discriminator of the BFD session.')
hwBfdSessConfPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfPeerAddr.setDescription('Define the IP address of the peer in the BFD session.')
hwBfdSessConfBindIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessConfBindIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfBindIfIndex.setDescription('It is the index of the binding interface in the BFD configuration.')
hwBfdSessConfBindIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfBindIfName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfBindIfName.setDescription('It is the name of the binding interface in the BFD configuration.')
hwBfdSessConfDemandEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDemandEnable.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDemandEnable.setDescription('It is the flag of the BFD demand mode. 0:Disable the BFD demand mode. 1:Enable the BFD demand mode.')
hwBfdSessConfDemandTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(500, 300000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDemandTimerInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDemandTimerInterval.setDescription('Define the detecting interval in the BFD session with the demand mode. The unit is millisecond.')
hwBfdSessConfDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDetectMult.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDetectMult.setDescription('It is Detect time multiplier of the configuration. The negotiated transmit interval, multiplied by this value, provides the detection time for the transmitting system in Asynchronous mode.')
hwBfdSessConfDesiredMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 11), BfdInterval().subtype(subtypeSpec=ValueRangeConstraint(3, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDesiredMinRxInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDesiredMinRxInterval.setDescription('This is the minimum interval of the configuration,in milliseconds, between received BFD Control packets that this system is capable of supporting.')
hwBfdSessConfDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 12), BfdInterval().subtype(subtypeSpec=ValueRangeConstraint(3, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDesiredMinTxInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDesiredMinTxInterval.setDescription('This is the minimum interval of the configuration, in milliseconds, that the local system would like to use when transmitting BFD Control packets.')
hwBfdSessConfWTRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfWTRInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfWTRInterval.setDescription('This is the WTR interval of bfd session. The unit is minute.')
hwBfdSessConfTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfTOS.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfTOS.setDescription('This is the TOS value of bfd packet.')
hwBfdSessConfPSTFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfPSTFlag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfPSTFlag.setDescription('The PST flag of the BFD session configuration.')
hwBfdSessConfCommitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfCommitFlag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfCommitFlag.setDescription('It is the commit flag of the configuration entry. 0: not commit 1: commit ')
hwBfdSessConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfAdminStatus.setDescription('There may be circumstances where it is desirable to administratively enable or disable a BFD session of the configuration. The AdminStatus exists so that a session can be administratively put down indefinitely.')
hwBfdSessConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfRowStatus.setDescription('used to manage the creation and deletion of conceptual rows.')
hwBfdSessConfSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 19), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfSourceAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfSourceAddr.setDescription('Define the source IP address of the BFD session.')
hwBfdSessConfVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessConfVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfVrfIndex.setDescription('The index of the VPN interface.')
hwBfdSessConfVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfVPNName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfVPNName.setDescription('The name of VPN interface.')
hwBfdSessConfDefaultIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDefaultIp.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDefaultIp.setDescription('BFD session use default multicast IP as the detect peer-ip 1 : do not use the default multicast IP 2 : use the default multicast IP default value is 1 (do not use)')
hwBfdSessConfPISFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("subif", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfPISFlag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfPISFlag.setDescription('The state of BFD session is associated with the state of the binding interface 1 : do not associate with interface state 2 : associate with interface state 3 : associate with interface and correlative sub interface . default value is 1 (do not associate)')
hwBfdSessConfBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15))).clone(namedValues=NamedValues(("interfaceIp", 1), ("peerIp", 2), ("sourceIp", 3), ("ifAndSourceIp", 4), ("fec", 5), ("tunnelIf", 6), ("ospf", 7), ("isis", 8), ("ldpLsp", 9), ("staticLsp", 10), ("teLsp", 11), ("teTunnel", 12), ("pw", 13), ("vsiPw", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfBindType.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfBindType.setDescription('The binding type of the BFD session: 1: BFD for IP with peer-ip and interface; 2: BFD for IP only with peer-ip; 3: BFD for IP with peer-ip and source-ip; 4: BFD for IP with peer-ip, interface and source-ip; 5: BFD for FEC(NOT support now); 6: BFD for Tunnel interface(NOT support now); 7: BFD for OSPF; 8: BFD for ISIS; 9: BFD for LDP-LSP; 10: BFD for static LSP; 11: BFD for TE-LSP; 12: BFD for TE-Tunnel; 13: BFD for PW; 15: BFD for VSI PW;')
hwBfdSessConfNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 25), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfNextHop.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfNextHop.setDescription('It is the next hop of the BFD session.')
hwBfdSessConfStaticLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfStaticLspName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfStaticLspName.setDescription('It is the static LSP name of the BFD session.')
hwBfdSessConfPWSecondaryFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flagMasterPW", 1), ("flagSecondaryPW", 2), ("flagNoPW", 3))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfPWSecondaryFlag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfPWSecondaryFlag.setDescription('The role of the PW bound with BFD session: 1: master PW; 2: secondary PW; 3: no PW')
hwBfdSessConfTunnelDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flagBothDown", 1), ("flagNeighborDown", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfTunnelDetectType.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfTunnelDetectType.setDescription('Set the failure notifies policy type: 1: Notify applications when detecting both Detect-Down and Neighbor-Down; 2: Notify applications only when detecting Neighbor-Down;')
hwBfdSessConfVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfVcId.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfVcId.setDescription('It is the ID of VC.')
hwBfdSessConfVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfVsiName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfVsiName.setDescription('It is the name of VSI.')
hwBfdSessConfVsiPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfVsiPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfVsiPeerAddr.setDescription('It is the peer-ip of VSI.')
hwBfdSessConfDiscrAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 2, 1, 32), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSessConfDiscrAuto.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessConfDiscrAuto.setDescription('Describe whether the discriminator can be auto allocated: disabled: The discriminator can not be allocated automatically; enabled: The discriminator can be allocated automatically.')
hwBfdSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3), )
if mibBuilder.loadTexts: hwBfdSessionTable.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionTable.setDescription('The BFD Session Table describes the BFD sessions.')
hwBfdSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1), ).setIndexNames((0, "HUAWEI-BFD-MIB", "hwBfdSessIndex"))
if mibBuilder.loadTexts: hwBfdSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionEntry.setDescription('The BFD Session Entry describes BFD session.')
hwBfdSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: hwBfdSessIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessIndex.setDescription('It is unique and the Index of this session.')
hwBfdSessMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessMIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessMIndex.setDescription('This value indicate the configuration has Main Index.')
hwBfdSessBindVRRP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessBindVRRP.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessBindVRRP.setDescription('Describe the capability of bound with VRRP for the BFD session. 0: not bind 1: bind')
hwBfdSessCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessCfgName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessCfgName.setDescription('This indicate the name of the session which will be display course information or statistic information of the session.')
hwBfdSessPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPeerAddr.setDescription('Define the peer IP address of the BFD session.')
hwBfdSessBindIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessBindIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessBindIfIndex.setDescription('It is the index of the binding interface in the BFD session')
hwBfdSessBindIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessBindIfName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessBindIfName.setDescription('It is the name of the binding interface in the BFD session.')
hwBfdSessLocalDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessLocalDiscr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessLocalDiscr.setDescription('A unique, nonzero discriminator value generated by the transmitting system, used to demultiplex multiple BFD sessions between the same pair of system.')
hwBfdSessRemoteDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessRemoteDiscr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessRemoteDiscr.setDescription('The discriminator received from the corresponding remote system. This field reflects back the received value of My Discriminator, or is zero if that value is unknown.')
hwBfdSessOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessOperMode.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessOperMode.setDescription('Describe the current operating mode configured with the BFD session. 0: Asynchronous mode with echo function; 1: Asynchronous mode without echo function; 2: Demand mode with echo function; 3: Demand mode without echo function;')
hwBfdSessDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessDetectMult.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDetectMult.setDescription('Detect time multiplier. The negotiated transmit interval, multiplied by this value, provides the detection time for the transmitting system in Asynchronous mode.')
hwBfdSessDemandTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 12), BfdInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessDemandTimerInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDemandTimerInterval.setDescription('It is the detecting interval in the BFD session with the demand mode. The unit is millisecond.')
hwBfdSessActualRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 13), BfdInterval().subtype(subtypeSpec=ValueRangeConstraint(3, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessActualRxInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessActualRxInterval.setDescription('This is the minimum interval, in milliseconds, between received BFD Control packets that this system is capable of supporting.')
hwBfdSessActualTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 14), BfdInterval().subtype(subtypeSpec=ValueRangeConstraint(3, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessActualTxInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessActualTxInterval.setDescription('This is the minimum interval, in milliseconds, that the local system would like to use when transmitting BFD Control packets.')
hwBfdSessWTRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessWTRInterval.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessWTRInterval.setDescription('The WTR interval of the BFD session. The unit is minute.')
hwBfdSessTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessTOS.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessTOS.setDescription('This is the TOS value of bfd packet.')
hwBfdSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessState.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessState.setDescription('Describe the current state of the BFD session. 0: Admin Down; 1: Down; 2: Init; 3: Up;')
hwBfdSessDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessDiag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDiag.setDescription("A diagnostic code specifying the local system's reason for the last session state change. Values are: 0--No Diagnostic 1--Control Detection Time Expired 2--Echo Function Failed 3--Neighbor Signaled Session Down 4--Forwarding Plane Reset 5--Path Down 6--Concatenated Path Down 7--Administratively Down 8--Reverse Concatenated Path Down 9--Neighbor Signaled Session Down (Receive AdminDown) 10-31--Reserved for future use ")
hwBfdSessSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessSourceAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessSourceAddr.setDescription('The source address of the session.')
hwBfdSessVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessVrfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessVrfIndex.setDescription('The index of the VPN interface.')
hwBfdSessVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessVPNName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessVPNName.setDescription('The name of VPN interface.')
hwBfdSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("entireDynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessType.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessType.setDescription('The type of the BFD session. 1:static 2:dynamic 3:entire dynamic')
hwBfdSessBindAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("noApplication", 1), ("vrrp", 2), ("ifnet", 3), ("vrrpAndIfnet", 4), ("bgp", 5), ("ospf", 6), ("bgpAndOspf", 7), ("oamLspmL2vpn", 8), ("oamLspmTnlL2vpn", 9), ("lspmTnlL2vpnTnlps", 10), ("oamMplsfwL2vpn", 11), ("isis", 12), ("vsiPw", 13), ("vrrpOamLspmL2vpn", 14), ("vrrpOamTnlL2vpn", 15), ("vrrpLspmTnlL2vpnTnlps", 16), ("vrrpOamMplsfwL2vpn", 17), ("pim", 18), ("bgpIsis", 19), ("bgpPim", 20), ("ospfIsis", 21), ("ospfPim", 22), ("isisPim", 23), ("bgpOspfIsis", 24), ("bgpIspfPim", 25), ("bgpIsisPim", 26), ("ospfIsisPim", 27), ("bgpOspfIsisPim", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessBindAppType.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessBindAppType.setDescription('The Application type that this BFD session has been bound to 1:No application 2:VRRP 3:IFNET 4:VRRP&IFNET 5:BGP 6:OSPF 7:BGP&OSPF 8:OAM&LSPM&L2VPN (for LDP LSP and static LSP) 9:OAM&LSPM&TUNNEL&L2VPN (for TE_Tunnnel) 10:LSPM&TUNNEL&TUNNEL_PS&L2VPN (for TE_LSP) 11:OAM&MPLSFW&L2VPN (for PW) 12:ISIS 13:VSIPW (for VSI PW) 14:VRRP&OAM&LSPM&L2VPN 15:VRRP&OAM&TUNNEL&L2VPN 16:VRRP&LSPM&TUNNEL&TUNNEL_PS&L2VPN 17:VRRP&OAM&MPLSFW&L2VPN 18:PIM 19:BGP&ISIS 20:BGP&PIM 21:OSPF&ISIS 22:OSPF&PIM 23:ISIS&PIM 24:BGP&OSPF&ISIS 25:BGP&OSPF&PIM 26:BGP&ISIS&PIM 27:OSPF&ISIS&PIM 28:BGPOSPF&ISIS&PIM')
hwBfdSessDefaultIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessDefaultIp.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDefaultIp.setDescription('BFD session use default multicast IP as the detect peer-ip 1 : do not use the default multicast IP 2 : use the default multicast IP')
hwBfdSessPISFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("subif", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPISFlag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPISFlag.setDescription('The state of BFD session is associated with the state of the binding interface 1 : do not associate with interface state 2 : associate with interface state 3 : associate with interface and correlative sub interface.')
hwBfdSessBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15))).clone(namedValues=NamedValues(("interfaceIp", 1), ("peerIp", 2), ("sourceIp", 3), ("ifAndSourceIp", 4), ("fec", 5), ("tunnelIf", 6), ("ospf", 7), ("isis", 8), ("ldpLsp", 9), ("staticLsp", 10), ("teLsp", 11), ("teTunnel", 12), ("pw", 13), ("vsiPw", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessBindType.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessBindType.setDescription('The binding type of the BFD session: 1: BFD for IP with peer-ip and interface; 2: BFD for IP only with peer-ip; 3: BFD for IP with peer-ip and source-ip; 4: BFD for IP with peer-ip, interface and source-ip; 5: BFD for FEC(NOT support now); 6: BFD for Tunnel interface(NOT support now); 7: BFD for OSPF; 8: BFD for ISIS; 9: BFD for LDP-LSP; 10: BFD for static LSP; 11: BFD for TE-LSP; 12: BFD for TE-Tunnel; 13: BFD for PW; 15: BFD for VSI PW;')
hwBfdSessNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessNextHop.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessNextHop.setDescription('It is the next hop of the BFD session.')
hwBfdSessStaticLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessStaticLspName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessStaticLspName.setDescription('It is the static LSP name of the BFD session.')
hwBfdSessLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessLspIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessLspIndex.setDescription('It is the index of the static LSP or LDP LSP in BFD session, mapping the channel index in MPLS network.')
hwBfdSessPWSecondaryFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flagMasterPW", 1), ("flagSecondaryPW", 2), ("flagNoPW", 3))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPWSecondaryFlag.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPWSecondaryFlag.setDescription('The role of the PW bound with BFD session: 1: master PW; 2: secondary PW; 3: no PW;')
hwBfdSessTunnelDetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flagBothDown", 1), ("flagNeighborDown", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessTunnelDetectType.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessTunnelDetectType.setDescription('Set the failure notifies policy type: 1: Notify applications when detecting both Detect-Down and Neighbor-Down; 2: Notify applications only when detecting Neighbor-Down;')
hwBfdSessVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessVcId.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessVcId.setDescription('It is the ID of VC.')
hwBfdSessVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessVsiName.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessVsiName.setDescription('It is the name of VSI.')
hwBfdSessVsiPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessVsiPeerAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessVsiPeerAddr.setDescription('It is the peer-ip of VSI.')
hwBfdSessDiscrAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 3, 1, 35), EnabledStatus().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessDiscrAuto.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDiscrAuto.setDescription('Describe whether the discriminator can be auto allocated: disabled: The discriminator can not be allocated automatically; enabled: The discriminator can be allocated automatically.')
hwBfdSessionPerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4), )
if mibBuilder.loadTexts: hwBfdSessionPerTable.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionPerTable.setDescription('This table specifies BFD Session performance counters.')
hwBfdSessionPerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1), ).setIndexNames((0, "HUAWEI-BFD-MIB", "hwBfdSessPerIndex"))
if mibBuilder.loadTexts: hwBfdSessionPerEntry.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionPerEntry.setDescription('An entry in this table is created by a BFD-enabled node for every BFD Session. ')
hwBfdSessPerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hwBfdSessPerIndex.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerIndex.setDescription('The index of BFD session statistics.')
hwBfdSessPerfPktIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfPktIn.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfPktIn.setDescription('The statistical information of the received Octets in local system in this session.The total received packet number.')
hwBfdSessPerfPktInHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfPktInHC.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfPktInHC.setDescription('The statistical information of the received Octets in local system in this session.The high 4 bytes of total received packet number.')
hwBfdSessPerfPktOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfPktOut.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfPktOut.setDescription('The statistical information of the send Packets in local system in this session.')
hwBfdSessPerfPktOutHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfPktOutHC.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfPktOutHC.setDescription('The statistical information of the send Packets in local system in this session.The high 4 bytes of total send packet number')
hwBfdSessPerfBadIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfBadIn.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfBadIn.setDescription('The statistical information of the received Errors in local system in this session.')
hwBfdSessPerfBadInHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfBadInHC.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfBadInHC.setDescription('The statistical information of the received Errors in local system in this session.The high 4 bytes of total received wrong packet number.')
hwBfdSessPerfBadOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfBadOut.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfBadOut.setDescription('The statistical information of the send Errors in local system in this session.')
hwBfdSessPerfBadOutHC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfBadOutHC.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfBadOutHC.setDescription('The statistical information of the send Errors in local system in this session.The high 4 bytes of total send wrong packet number')
hwBfdSessPerfLastSessDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfLastSessDownTime.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfLastSessDownTime.setDescription('The statistical information of the trammitted Octets in local system in this session.')
hwBfdSessPerfSessDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfSessDownCount.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfSessDownCount.setDescription('The total count of session down.')
hwBfdSessPerfSessShortBreakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessPerfSessShortBreakCount.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessPerfSessShortBreakCount.setDescription('The total count of session shortbreak.')
hwBfdSessionPerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 4, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSessionPerStartTime.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessionPerStartTime.setDescription('The time that session start detection.')
hwBfdSlotTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5), )
if mibBuilder.loadTexts: hwBfdSlotTable.setStatus('current')
if mibBuilder.loadTexts: hwBfdSlotTable.setDescription('The Slot table of BFD entries.')
hwBfdSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5, 1), ).setIndexNames((0, "HUAWEI-BFD-MIB", "hwBfdSlotID"))
if mibBuilder.loadTexts: hwBfdSlotEntry.setStatus('current')
if mibBuilder.loadTexts: hwBfdSlotEntry.setDescription('BFD statistics on specify board of containing the following objects.')
hwBfdSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: hwBfdSlotID.setStatus('current')
if mibBuilder.loadTexts: hwBfdSlotID.setDescription('The ID of Slot.')
hwBfdSlotReserveOneHopSessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSlotReserveOneHopSessNum.setStatus('current')
if mibBuilder.loadTexts: hwBfdSlotReserveOneHopSessNum.setDescription('The number of session reserving for one-hop session on the board.')
hwBfdSlotOneHopSessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSlotOneHopSessNum.setStatus('obsolete')
if mibBuilder.loadTexts: hwBfdSlotOneHopSessNum.setDescription('The number of session for one-hop session on the board.')
hwBfdSlotCurrentSessNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBfdSlotCurrentSessNum.setStatus('current')
if mibBuilder.loadTexts: hwBfdSlotCurrentSessNum.setDescription('The number of session on the board on current.')
hwBfdSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdSlotRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdSlotRowStatus.setDescription('Used to manage the creation and deletion of conceptual rows.')
hwBfdTtlConfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6), )
if mibBuilder.loadTexts: hwBfdTtlConfTable.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfTable.setDescription('The TTL configuration table.')
hwBfdTtlConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6, 1), ).setIndexNames((0, "HUAWEI-BFD-MIB", "hwBfdTtlConfAddr"), (0, "HUAWEI-BFD-MIB", "hwBfdTtlConfMaskLen"), (0, "HUAWEI-BFD-MIB", "hwBfdTtlConfType"))
if mibBuilder.loadTexts: hwBfdTtlConfEntry.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfEntry.setDescription('The TTL configuration entry.')
hwBfdTtlConfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwBfdTtlConfAddr.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfAddr.setDescription('IP address.')
hwBfdTtlConfMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 32)))
if mibBuilder.loadTexts: hwBfdTtlConfMaskLen.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfMaskLen.setDescription('Length of IP address mask.')
hwBfdTtlConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("singleHop", 1), ("multiHop", 2))))
if mibBuilder.loadTexts: hwBfdTtlConfType.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfType.setDescription('Type of BFD session.')
hwBfdTtlConfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdTtlConfValue.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfValue.setDescription('TTL value.')
hwBfdTtlConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 2, 6, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBfdTtlConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBfdTtlConfRowStatus.setDescription('The status of this table entry.')
hwBfdNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 3))
hwBfdSessDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 3, 1)).setObjects(("HUAWEI-BFD-MIB", "hwBfdSessCfgName"), ("HUAWEI-BFD-MIB", "hwBfdSessPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessBindIfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessBindIfName"), ("HUAWEI-BFD-MIB", "hwBfdSessDiag"), ("HUAWEI-BFD-MIB", "hwBfdSessVrfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessVPNName"), ("HUAWEI-BFD-MIB", "hwBfdSessType"), ("HUAWEI-BFD-MIB", "hwBfdSessDefaultIp"), ("HUAWEI-BFD-MIB", "hwBfdSessBindType"), ("HUAWEI-BFD-MIB", "hwBfdSessStaticLspName"), ("HUAWEI-BFD-MIB", "hwBfdSessPWSecondaryFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessNextHop"), ("HUAWEI-BFD-MIB", "hwBfdSessVcId"), ("HUAWEI-BFD-MIB", "hwBfdSessVsiName"), ("HUAWEI-BFD-MIB", "hwBfdSessVsiPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessDiscrAuto"))
if mibBuilder.loadTexts: hwBfdSessDown.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessDown.setDescription('This trap occurred when the state of the BFD session became down. The BFD session is characterized by the objects in this node.')
hwBfdSessUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 3, 2)).setObjects(("HUAWEI-BFD-MIB", "hwBfdSessCfgName"), ("HUAWEI-BFD-MIB", "hwBfdSessPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessBindIfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessBindIfName"), ("HUAWEI-BFD-MIB", "hwBfdSessDiag"), ("HUAWEI-BFD-MIB", "hwBfdSessVrfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessVPNName"), ("HUAWEI-BFD-MIB", "hwBfdSessType"), ("HUAWEI-BFD-MIB", "hwBfdSessDefaultIp"), ("HUAWEI-BFD-MIB", "hwBfdSessBindType"), ("HUAWEI-BFD-MIB", "hwBfdSessStaticLspName"), ("HUAWEI-BFD-MIB", "hwBfdSessPWSecondaryFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessNextHop"), ("HUAWEI-BFD-MIB", "hwBfdSessVcId"), ("HUAWEI-BFD-MIB", "hwBfdSessVsiName"), ("HUAWEI-BFD-MIB", "hwBfdSessVsiPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessDiscrAuto"))
if mibBuilder.loadTexts: hwBfdSessUp.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessUp.setDescription('This trap occurred when the state of the BFD session became up. The BFD session is characterized by the objects in this node.')
hwBfdSessReachLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 3, 3)).setObjects(("HUAWEI-BFD-MIB", "hwBfdSessLimitNumber"))
if mibBuilder.loadTexts: hwBfdSessReachLimit.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessReachLimit.setDescription('There is the notify when the session number reach the global limit.')
hwBfdSessReachLimitBindIf = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 3, 4)).setObjects(("HUAWEI-BFD-MIB", "hwBfdSessConfBindIfName"), ("HUAWEI-BFD-MIB", "hwBfdSessInterfaceLimitNumber"))
if mibBuilder.loadTexts: hwBfdSessReachLimitBindIf.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessReachLimitBindIf.setDescription('There is the notify when the session number reach the interface limit.')
hwBfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4))
hwBfdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 1))
hwBfdFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 1, 1)).setObjects(("HUAWEI-BFD-MIB", "hwBfdGroup"), ("HUAWEI-BFD-MIB", "hwBfdSessGroup"), ("HUAWEI-BFD-MIB", "hwBfdObsoleteGroup"), ("HUAWEI-BFD-MIB", "hwBfdNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBfdFullCompliance = hwBfdFullCompliance.setStatus('current')
if mibBuilder.loadTexts: hwBfdFullCompliance.setDescription('Description.')
hwBfdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 2))
hwBfdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 2, 1)).setObjects(("HUAWEI-BFD-MIB", "hwBfdVersionNumber"), ("HUAWEI-BFD-MIB", "hwBfdAdminStatus"), ("HUAWEI-BFD-MIB", "hwBfdSessLimitNumber"), ("HUAWEI-BFD-MIB", "hwBfdSessInterfaceLimitNumber"), ("HUAWEI-BFD-MIB", "hwBfdSessStaticNumber"), ("HUAWEI-BFD-MIB", "hwBfdSessDynamicNumber"), ("HUAWEI-BFD-MIB", "hwBfdSessGlobalDefaultIpAddr"), ("HUAWEI-BFD-MIB", "hwBfdEchoPassiveStatus"), ("HUAWEI-BFD-MIB", "hwBfdEchoAclNum"), ("HUAWEI-BFD-MIB", "hwBfdSessDynamicPingInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessDynamicSupportPassive"), ("HUAWEI-BFD-MIB", "hwBfdSessDelayUpTime"), ("HUAWEI-BFD-MIB", "hwBfdSessMultiDstPort"), ("HUAWEI-BFD-MIB", "hwBfdTrapSendInterval"), ("HUAWEI-BFD-MIB", "hwBfdIfConfName"), ("HUAWEI-BFD-MIB", "hwBfdIfConfDeleting"), ("HUAWEI-BFD-MIB", "hwBfdIfConfAvailable"), ("HUAWEI-BFD-MIB", "hwBfdIfConfSessCnt"), ("HUAWEI-BFD-MIB", "hwBfdIfConfRowStatus"), ("HUAWEI-BFD-MIB", "hwBfdSlotReserveOneHopSessNum"), ("HUAWEI-BFD-MIB", "hwBfdSlotCurrentSessNum"), ("HUAWEI-BFD-MIB", "hwBfdSlotRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBfdGroup = hwBfdGroup.setStatus('current')
if mibBuilder.loadTexts: hwBfdGroup.setDescription('Description.')
hwBfdSessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 2, 2)).setObjects(("HUAWEI-BFD-MIB", "hwBfdSessConfMIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessConfLocalDiscr"), ("HUAWEI-BFD-MIB", "hwBfdSessConfRemoteDiscr"), ("HUAWEI-BFD-MIB", "hwBfdSessConfPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessConfBindIfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessConfBindIfName"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDemandEnable"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDemandTimerInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDetectMult"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDesiredMinRxInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDesiredMinTxInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessConfWTRInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessConfTOS"), ("HUAWEI-BFD-MIB", "hwBfdSessConfPSTFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessConfCommitFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessConfAdminStatus"), ("HUAWEI-BFD-MIB", "hwBfdSessConfRowStatus"), ("HUAWEI-BFD-MIB", "hwBfdSessConfSourceAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessConfVrfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessConfVPNName"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDefaultIp"), ("HUAWEI-BFD-MIB", "hwBfdSessConfPISFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessConfBindType"), ("HUAWEI-BFD-MIB", "hwBfdSessConfNextHop"), ("HUAWEI-BFD-MIB", "hwBfdSessConfStaticLspName"), ("HUAWEI-BFD-MIB", "hwBfdSessConfPWSecondaryFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessConfTunnelDetectType"), ("HUAWEI-BFD-MIB", "hwBfdSessConfVcId"), ("HUAWEI-BFD-MIB", "hwBfdSessConfVsiName"), ("HUAWEI-BFD-MIB", "hwBfdSessConfVsiPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessConfDiscrAuto"), ("HUAWEI-BFD-MIB", "hwBfdSessMIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessBindVRRP"), ("HUAWEI-BFD-MIB", "hwBfdSessCfgName"), ("HUAWEI-BFD-MIB", "hwBfdSessPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessBindIfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessBindIfName"), ("HUAWEI-BFD-MIB", "hwBfdSessLocalDiscr"), ("HUAWEI-BFD-MIB", "hwBfdSessRemoteDiscr"), ("HUAWEI-BFD-MIB", "hwBfdSessOperMode"), ("HUAWEI-BFD-MIB", "hwBfdSessDetectMult"), ("HUAWEI-BFD-MIB", "hwBfdSessDemandTimerInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessActualRxInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessActualTxInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessWTRInterval"), ("HUAWEI-BFD-MIB", "hwBfdSessTOS"), ("HUAWEI-BFD-MIB", "hwBfdSessState"), ("HUAWEI-BFD-MIB", "hwBfdSessDiag"), ("HUAWEI-BFD-MIB", "hwBfdSessSourceAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessVrfIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessVPNName"), ("HUAWEI-BFD-MIB", "hwBfdSessType"), ("HUAWEI-BFD-MIB", "hwBfdSessBindAppType"), ("HUAWEI-BFD-MIB", "hwBfdSessDefaultIp"), ("HUAWEI-BFD-MIB", "hwBfdSessPISFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessBindType"), ("HUAWEI-BFD-MIB", "hwBfdSessNextHop"), ("HUAWEI-BFD-MIB", "hwBfdSessStaticLspName"), ("HUAWEI-BFD-MIB", "hwBfdSessLspIndex"), ("HUAWEI-BFD-MIB", "hwBfdSessPWSecondaryFlag"), ("HUAWEI-BFD-MIB", "hwBfdSessTunnelDetectType"), ("HUAWEI-BFD-MIB", "hwBfdSessVcId"), ("HUAWEI-BFD-MIB", "hwBfdSessVsiName"), ("HUAWEI-BFD-MIB", "hwBfdSessVsiPeerAddr"), ("HUAWEI-BFD-MIB", "hwBfdSessDiscrAuto"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfPktIn"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfPktInHC"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfPktOut"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfPktOutHC"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfBadIn"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfBadInHC"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfBadOut"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfBadOutHC"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfLastSessDownTime"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfSessDownCount"), ("HUAWEI-BFD-MIB", "hwBfdSessPerfSessShortBreakCount"), ("HUAWEI-BFD-MIB", "hwBfdSessionPerStartTime"), ("HUAWEI-BFD-MIB", "hwBfdTtlConfValue"), ("HUAWEI-BFD-MIB", "hwBfdTtlConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBfdSessGroup = hwBfdSessGroup.setStatus('current')
if mibBuilder.loadTexts: hwBfdSessGroup.setDescription('Description.')
hwBfdObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 2, 3)).setObjects(("HUAWEI-BFD-MIB", "hwBfdIfConfEnable"), ("HUAWEI-BFD-MIB", "hwBfdSlotOneHopSessNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBfdObsoleteGroup = hwBfdObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwBfdObsoleteGroup.setDescription('Description.')
hwBfdNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 38, 4, 2, 4)).setObjects(("HUAWEI-BFD-MIB", "hwBfdSessDown"), ("HUAWEI-BFD-MIB", "hwBfdSessUp"), ("HUAWEI-BFD-MIB", "hwBfdSessReachLimit"), ("HUAWEI-BFD-MIB", "hwBfdSessReachLimitBindIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBfdNotificationGroup = hwBfdNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwBfdNotificationGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-BFD-MIB", hwBfdSessPerfSessShortBreakCount=hwBfdSessPerfSessShortBreakCount, hwBfdSessConfRowStatus=hwBfdSessConfRowStatus, hwBfdSessSourceAddr=hwBfdSessSourceAddr, hwBfdSessConfBindIfName=hwBfdSessConfBindIfName, hwBfdSessVsiName=hwBfdSessVsiName, hwBfdSessConfPSTFlag=hwBfdSessConfPSTFlag, hwBfdSessionPerEntry=hwBfdSessionPerEntry, hwBfdSessLspIndex=hwBfdSessLspIndex, hwBfdSessPerfPktOut=hwBfdSessPerfPktOut, hwBfdSessVsiPeerAddr=hwBfdSessVsiPeerAddr, hwBfdSessConfVsiPeerAddr=hwBfdSessConfVsiPeerAddr, hwBfdSlotReserveOneHopSessNum=hwBfdSlotReserveOneHopSessNum, hwBfdSessLimitNumber=hwBfdSessLimitNumber, hwBfdSlotRowStatus=hwBfdSlotRowStatus, hwBfdSlotEntry=hwBfdSlotEntry, hwBfdIfConfSessCnt=hwBfdIfConfSessCnt, hwBfdSessConfDetectMult=hwBfdSessConfDetectMult, hwBfdSessConfPISFlag=hwBfdSessConfPISFlag, hwBfdSessPWSecondaryFlag=hwBfdSessPWSecondaryFlag, hwBfdSessDiscrAuto=hwBfdSessDiscrAuto, hwBfdSessConfVsiName=hwBfdSessConfVsiName, hwBfdIfConfRowStatus=hwBfdIfConfRowStatus, hwBfdEchoPassiveStatus=hwBfdEchoPassiveStatus, hwBfdSessPerfPktInHC=hwBfdSessPerfPktInHC, hwBfdSessDiag=hwBfdSessDiag, hwBfdSessPeerAddr=hwBfdSessPeerAddr, hwBfdSessConfLocalDiscr=hwBfdSessConfLocalDiscr, hwBfdSessCfgName=hwBfdSessCfgName, hwBfdSessNextHop=hwBfdSessNextHop, hwBfdSessTunnelDetectType=hwBfdSessTunnelDetectType, hwBfdIfConfIndex=hwBfdIfConfIndex, hwBfdSessionPerTable=hwBfdSessionPerTable, hwBfdGroup=hwBfdGroup, hwBfdTtlConfMaskLen=hwBfdTtlConfMaskLen, hwBfdSessIndex=hwBfdSessIndex, hwBfdSessBindIfIndex=hwBfdSessBindIfIndex, hwBfdSessConfRemoteDiscr=hwBfdSessConfRemoteDiscr, hwBfdSessPerfBadInHC=hwBfdSessPerfBadInHC, hwBfdTrapSendInterval=hwBfdTrapSendInterval, PYSNMP_MODULE_ID=hwBFDMIB, hwBfdSessGroup=hwBfdSessGroup, hwBfdSessPerfPktOutHC=hwBfdSessPerfPktOutHC, hwBfdAdminStatus=hwBfdAdminStatus, hwBfdSessConfDiscrAuto=hwBfdSessConfDiscrAuto, hwBfdObjects=hwBfdObjects, hwBfdObsoleteGroup=hwBfdObsoleteGroup, hwBfdSessTOS=hwBfdSessTOS, hwBfdSessInterfaceLimitNumber=hwBfdSessInterfaceLimitNumber, hwBfdSessConfAdminStatus=hwBfdSessConfAdminStatus, hwBfdSessOperMode=hwBfdSessOperMode, hwBfdSessPerfLastSessDownTime=hwBfdSessPerfLastSessDownTime, hwBfdSessDelayUpTime=hwBfdSessDelayUpTime, hwBfdSlotOneHopSessNum=hwBfdSlotOneHopSessNum, hwBfdSessDown=hwBfdSessDown, hwBfdSessConfVrfIndex=hwBfdSessConfVrfIndex, hwBfdSlotTable=hwBfdSlotTable, hwBfdSessBindType=hwBfdSessBindType, hwBfdSessConfNextHop=hwBfdSessConfNextHop, hwBfdSessConfBindIfIndex=hwBfdSessConfBindIfIndex, hwBfdTtlConfEntry=hwBfdTtlConfEntry, hwBfdSessMultiDstPort=hwBfdSessMultiDstPort, hwBfdSessConfDemandEnable=hwBfdSessConfDemandEnable, hwBfdSlotCurrentSessNum=hwBfdSlotCurrentSessNum, hwBfdTtlConfAddr=hwBfdTtlConfAddr, hwBfdSessReachLimit=hwBfdSessReachLimit, hwBfdSessConfName=hwBfdSessConfName, hwBfdSlotID=hwBfdSlotID, hwBfdSessDynamicPingInterval=hwBfdSessDynamicPingInterval, hwBfdSessGlobalDefaultIpAddr=hwBfdSessGlobalDefaultIpAddr, hwBfdTtlConfValue=hwBfdTtlConfValue, hwBFDMIB=hwBFDMIB, hwBfdSessConfVPNName=hwBfdSessConfVPNName, hwBfdSessActualRxInterval=hwBfdSessActualRxInterval, hwBfdSessConfCommitFlag=hwBfdSessConfCommitFlag, hwBfdSessConfTOS=hwBfdSessConfTOS, hwBfdSessMIndex=hwBfdSessMIndex, hwBfdSessPerfBadIn=hwBfdSessPerfBadIn, hwBfdGroups=hwBfdGroups, hwBfdNotificationGroup=hwBfdNotificationGroup, hwBfdIfConfEntry=hwBfdIfConfEntry, hwBfdScalarsObjects=hwBfdScalarsObjects, hwBfdSessRemoteDiscr=hwBfdSessRemoteDiscr, hwBfdSessActualTxInterval=hwBfdSessActualTxInterval, hwBfdIfConfDeleting=hwBfdIfConfDeleting, hwBfdSessionConfTable=hwBfdSessionConfTable, hwBfdSessConfTunnelDetectType=hwBfdSessConfTunnelDetectType, hwBfdSessionPerStartTime=hwBfdSessionPerStartTime, hwBfdSessionConfEntry=hwBfdSessionConfEntry, hwBfdSessPerfBadOutHC=hwBfdSessPerfBadOutHC, hwBfdSessPerfSessDownCount=hwBfdSessPerfSessDownCount, hwBfdSessReachLimitBindIf=hwBfdSessReachLimitBindIf, BfdInterval=BfdInterval, hwBfdSessConfDefaultIp=hwBfdSessConfDefaultIp, hwBfdSessWTRInterval=hwBfdSessWTRInterval, hwBfdIfConfEnable=hwBfdIfConfEnable, hwBfdSessConfBindType=hwBfdSessConfBindType, hwBfdIfConfAvailable=hwBfdIfConfAvailable, hwBfdSessPerfPktIn=hwBfdSessPerfPktIn, hwBfdIfConfName=hwBfdIfConfName, hwBfdFullCompliance=hwBfdFullCompliance, hwBfdSessType=hwBfdSessType, hwBfdSessConfPeerAddr=hwBfdSessConfPeerAddr, hwBfdSessPerfBadOut=hwBfdSessPerfBadOut, hwBfdSessConfSourceAddr=hwBfdSessConfSourceAddr, hwBfdTtlConfRowStatus=hwBfdTtlConfRowStatus, hwBfdVersionNumber=hwBfdVersionNumber, hwBfdSessionTable=hwBfdSessionTable, hwBfdSessConfDemandTimerInterval=hwBfdSessConfDemandTimerInterval, hwBfdSessConfDesiredMinTxInterval=hwBfdSessConfDesiredMinTxInterval, hwBfdSessStaticNumber=hwBfdSessStaticNumber, hwBfdSessDynamicNumber=hwBfdSessDynamicNumber, hwBfdSessConfPWSecondaryFlag=hwBfdSessConfPWSecondaryFlag, hwBfdNotifications=hwBfdNotifications, BfdDiag=BfdDiag, hwBfdSessStaticLspName=hwBfdSessStaticLspName, hwBfdSessDetectMult=hwBfdSessDetectMult, hwBfdCompliances=hwBfdCompliances, hwBfdSessDefaultIp=hwBfdSessDefaultIp, hwBfdIfConfTable=hwBfdIfConfTable, hwBfdSessConfDesiredMinRxInterval=hwBfdSessConfDesiredMinRxInterval, hwBfdSessConfWTRInterval=hwBfdSessConfWTRInterval, hwBfdSessLocalDiscr=hwBfdSessLocalDiscr, hwBfdTtlConfType=hwBfdTtlConfType, hwBfdTtlConfTable=hwBfdTtlConfTable, hwBfdSessConfStaticLspName=hwBfdSessConfStaticLspName, hwBfdConformance=hwBfdConformance, hwBfdSessPISFlag=hwBfdSessPISFlag, hwBfdSessBindIfName=hwBfdSessBindIfName, hwBfdSessBindAppType=hwBfdSessBindAppType, hwBfdSessConfMIndex=hwBfdSessConfMIndex, hwBfdSessVcId=hwBfdSessVcId, hwBfdSessBindVRRP=hwBfdSessBindVRRP, hwBfdSessDemandTimerInterval=hwBfdSessDemandTimerInterval, hwBfdSessVrfIndex=hwBfdSessVrfIndex, hwBfdSessConfVcId=hwBfdSessConfVcId, hwBfdSessUp=hwBfdSessUp, hwBfdSessDynamicSupportPassive=hwBfdSessDynamicSupportPassive, hwBfdSessionEntry=hwBfdSessionEntry, hwBfdEchoAclNum=hwBfdEchoAclNum, hwBfdSessState=hwBfdSessState, hwBfdSessPerIndex=hwBfdSessPerIndex, hwBfdSessVPNName=hwBfdSessVPNName)
