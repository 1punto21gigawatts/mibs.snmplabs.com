#
# PySNMP MIB module A3COM-HUAWEI-DLDP-MIB (http://pysnmp.sf.net)
# Produced by pysmi-0.0.1 from A3COM-HUAWEI-DLDP-MIB at Sun May  3 23:27:35 2015
# On host cray platform Linux version 2.6.37.6-smp by user tt
# Using Python version 2.7.2 (default, Apr  2 2012, 20:32:47) 
#
( h3cCommon, ) = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, TimeTicks, ModuleIdentity, Gauge32, iso, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Gauge32", "iso", "Bits", "Counter32")
( TruthValue, MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention")
h3cDldp = ModuleIdentity(h3cCommon.getName() + (43,)).setRevisions(("2004-12-13 00:00",))
if mibBuilder.loadTexts: h3cDldp.setOrganization('Huawei 3Com Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDldp.setContactInfo('Platform Team Huawei 3Com Technologies Co., Ltd.\r\n         Hai-Dian District Beijing P.R. China\r\n         Http://www.huawei-3com.com\r\n         Zip:100085')
if mibBuilder.loadTexts: h3cDldp.setDescription('HUAWEI-3COM DLDP (Device Link Detection Protocol) MIB')
class EnabledStatus(TextualConvention, Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("enabled", 1), ("disabled", 2),)

class DLDPStatus(TextualConvention, Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5, 6,)
    namedValues = NamedValues(("initial", 1), ("inactive", 2), ("active", 3), ("advertisement", 4), ("probe", 5), ("disable", 6),)

class DLDPNeighborStatus(TextualConvention, Integer32):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3,)
    namedValues = NamedValues(("unidirection", 1), ("bidirection", 2), ("unknown", 3),)

h3cDLDPMibObject = MibIdentifier(h3cDldp.getName() + (1,))
h3cDLDPConfigGroup = MibIdentifier(h3cDLDPMibObject.getName() + (1,))
h3cDLDPWorkMode = MibScalar(h3cDLDPConfigGroup.getName() + (1,), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("normal", 1), ("enhance", 2),)).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPWorkMode.setDescription('The work mode of DLDP.\r\n        Normal mode means DLDP does not detect neighbor on its own initiative\r\n        when all neighbors aged.\r\n        Enhance mode means DLDP detects neighbor on its own initiative\r\n        when all neighbors aged.\r\n        ')
h3cDLDPSystemEnable = MibScalar(h3cDLDPConfigGroup.getName() + (2,), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPSystemEnable.setDescription('DLDP enable or disable systematically.\r\n        This node only supports set operation.\r\n        If setting it to true, all the fiber ports will enable DLDP and\r\n        the agent automatically creates new rows for each port in\r\n        h3cDLDPPortDLDPTable.\r\n        If setting it to false, all the fiber ports will disable DLDP\r\n        and the agent automatically destroy the corresponding rows in\r\n        h3cDLDPPortDLDPTable.')
h3cDLDPSystemReset = MibScalar(h3cDLDPConfigGroup.getName() + (3,), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPSystemReset.setDescription('DLDP reset systematically.\r\n        This node only supports set operation.\r\n        If the value of h3cDLDPSystemReset is true,\r\n        and the current state is disable,\r\n        it will change to inactive while the port is down\r\n        or active while the port is up.\r\n        If h3cDLDPPortDLDPState is not disable, it does not change.\r\n        ')
h3cDLDPInterval = MibScalar(h3cDLDPConfigGroup.getName() + (4,), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPInterval.setDescription('The interval of sending an advertisement PDU.\r\n        unit : second\r\n        ')
h3cDLDPAuthenticationMode = MibScalar(h3cDLDPConfigGroup.getName() + (5,), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3),)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPAuthenticationMode.setDescription('Type of authentication mode.')
h3cDLDPAuthenticationPassword = MibScalar(h3cDLDPConfigGroup.getName() + (6,), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1,53))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPAuthenticationPassword.setDescription('This is the password for authentication.\r\n        If the value of h3cDLDPAuthenticationMode is null,\r\n        the user cannot set this node.\r\n        If the value of h3cDLDPAuthenticationMode is simple or MD5,\r\n        the user must set this node with a string.\r\n\r\n        When the user gets or walks this node,\r\n        it displays a cipher password if h3cDLDPAuthenticationMode is MD5 or\r\n        simple or a zero-length string if h3cDLDPAuthenticationMode is null.\r\n        ')
h3cDLDPUnidirectionalShutdown = MibScalar(h3cDLDPConfigGroup.getName() + (7,), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("auto", 1), ("manual", 2),)).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPUnidirectionalShutdown.setDescription('The mode of unidirectional shutdown.\r\n        It indicates the shutdown mode when a unidirectional link happened.\r\n        Auto mode means the port will be shut down automatically\r\n        when DLDP detects unidirectional link.\r\n        Manual mode means the port needs to be shut down by\r\n        the administrator manually when DLDP detects unidirectional link.\r\n        ')
h3cDLDPPortStateTable = MibTable(h3cDLDPMibObject.getName() + (2,), )
if mibBuilder.loadTexts: h3cDLDPPortStateTable.setDescription('The table of the Ethernet ports of a LAN switch.')
h3cDLDPPortStateEntry = MibTableRow(h3cDLDPPortStateTable.getName() + (1,), ).setIndexNames((0, "A3COM-HUAWEI-DLDP-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPPortStateEntry.setDescription('Information about a h3cDLDPPortDLDPTable entity.')
h3cDLDPPortState = MibTableColumn(h3cDLDPPortStateEntry.getName() + (1,), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPPortState.setDescription('State of a port.\r\n        If setting it to enabled, the port will enable DLDP and a new row\r\n        will be added in h3cDLDPPortDLDPTable for this port.\r\n        If setting it to disabled, the port will disable DLDP and the\r\n        corresponding row will be destroyed in h3cDLDPPortDLDPTable.')
h3cDLDPPortDLDPTable = MibTable(h3cDLDPMibObject.getName() + (3,), )
if mibBuilder.loadTexts: h3cDLDPPortDLDPTable.setDescription("Table of a LAN switch's ports, which enable DLDP.")
h3cDLDPPortDLDPEntry = MibTableRow(h3cDLDPPortDLDPTable.getName() + (1,), ).setIndexNames((0, "A3COM-HUAWEI-DLDP-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPPortDLDPEntry.setDescription('The information of a port, which enable DLDP.')
h3cDLDPPortDLDPState = MibTableColumn(h3cDLDPPortDLDPEntry.getName() + (1,), DLDPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPPortDLDPState.setDescription('Operating state of DLDP on the port.\r\n        It is relational with h3cDLDPPortState and h3cDLDPLinkState.')
h3cDLDPLinkState = MibTableColumn(h3cDLDPPortDLDPEntry.getName() + (2,), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3),))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPLinkState.setDescription('The link state of the port.')
h3cDLDPPortDLDPReset = MibTableColumn(h3cDLDPPortDLDPEntry.getName() + (3,), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPPortDLDPReset.setDescription('DLDP reset systematically.\r\n        This node only supports set operation.\r\n        If the value of h3cDLDPPortDLDPReset is true,\r\n        and the current state is disable,\r\n        it will change to inactive while the port is down\r\n        or active while the port is up.\r\n        ')
h3cDLDPNeighborTable = MibTable(h3cDLDPMibObject.getName() + (4,), )
if mibBuilder.loadTexts: h3cDLDPNeighborTable.setDescription("Table of a port's neighbors.")
h3cDLDPNeighborEntry = MibTableRow(h3cDLDPNeighborTable.getName() + (1,), ).setIndexNames((0, "A3COM-HUAWEI-DLDP-MIB", "ifIndex"), (0, "A3COM-HUAWEI-DLDP-MIB", "h3cDLDPNeighborBridgeMac"), (0, "A3COM-HUAWEI-DLDP-MIB", "h3cDLDPNeighborPortIndex"))
if mibBuilder.loadTexts: h3cDLDPNeighborEntry.setDescription('The information of a neighbor.')
h3cDLDPNeighborBridgeMac = MibTableColumn(h3cDLDPNeighborEntry.getName() + (1,), MacAddress())
if mibBuilder.loadTexts: h3cDLDPNeighborBridgeMac.setDescription('The bridge MAC address of a neighbor.')
h3cDLDPNeighborPortIndex = MibTableColumn(h3cDLDPNeighborEntry.getName() + (2,), Integer32())
if mibBuilder.loadTexts: h3cDLDPNeighborPortIndex.setDescription('The port index of a neighbor.')
h3cDLDPNeighborState = MibTableColumn(h3cDLDPNeighborEntry.getName() + (3,), DLDPNeighborStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPNeighborState.setDescription('The state of a neighbor.')
h3cDLDPNeighborAgingTime = MibTableColumn(h3cDLDPNeighborEntry.getName() + (4,), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPNeighborAgingTime.setDescription('The aging time of a neighbor. unit: second.')
h3cDLDPTrapObject = MibIdentifier(h3cDldp.getName() + (2,))
h3cDLDPNotification = MibIdentifier(h3cDLDPTrapObject.getName() + (1,))
h3cDLDPUnidirectionalPort = NotificationType(h3cDLDPNotification.getName() + (1,)).setObjects(*(("A3COM-HUAWEI-DLDP-MIB", "ifIndex"),))
if mibBuilder.loadTexts: h3cDLDPUnidirectionalPort.setDescription('It will send a SNMP trap when the state of a port\r\n        has changed to unidirectional-link.')
mibBuilder.exportSymbols("A3COM-HUAWEI-DLDP-MIB", h3cDLDPUnidirectionalShutdown=h3cDLDPUnidirectionalShutdown, h3cDLDPLinkState=h3cDLDPLinkState, h3cDLDPPortDLDPState=h3cDLDPPortDLDPState, h3cDLDPSystemEnable=h3cDLDPSystemEnable, h3cDLDPPortStateTable=h3cDLDPPortStateTable, DLDPStatus=DLDPStatus, h3cDLDPPortState=h3cDLDPPortState, h3cDLDPPortDLDPTable=h3cDLDPPortDLDPTable, h3cDLDPNeighborEntry=h3cDLDPNeighborEntry, h3cDLDPPortStateEntry=h3cDLDPPortStateEntry, h3cDLDPNotification=h3cDLDPNotification, h3cDLDPNeighborTable=h3cDLDPNeighborTable, h3cDLDPPortDLDPReset=h3cDLDPPortDLDPReset, h3cDLDPMibObject=h3cDLDPMibObject, h3cDLDPWorkMode=h3cDLDPWorkMode, h3cDLDPAuthenticationMode=h3cDLDPAuthenticationMode, h3cDLDPConfigGroup=h3cDLDPConfigGroup, DLDPNeighborStatus=DLDPNeighborStatus, h3cDLDPUnidirectionalPort=h3cDLDPUnidirectionalPort, h3cDLDPNeighborState=h3cDLDPNeighborState, h3cDLDPInterval=h3cDLDPInterval, EnabledStatus=EnabledStatus, PYSNMP_MODULE_ID=h3cDldp, h3cDLDPNeighborPortIndex=h3cDLDPNeighborPortIndex, h3cDLDPTrapObject=h3cDLDPTrapObject, h3cDldp=h3cDldp, h3cDLDPNeighborAgingTime=h3cDLDPNeighborAgingTime, h3cDLDPSystemReset=h3cDLDPSystemReset, h3cDLDPNeighborBridgeMac=h3cDLDPNeighborBridgeMac, h3cDLDPPortDLDPEntry=h3cDLDPPortDLDPEntry, h3cDLDPAuthenticationPassword=h3cDLDPAuthenticationPassword)
