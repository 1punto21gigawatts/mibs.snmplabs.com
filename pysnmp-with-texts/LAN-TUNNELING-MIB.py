#
# PySNMP MIB module LAN-TUNNELING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LAN-TUNNELING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:05:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
pgainDSLAM, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainDSLAM")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Integer32, Counter32, ObjectIdentity, IpAddress, Bits, MibIdentifier, NotificationType, ModuleIdentity, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Integer32", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "NotificationType", "ModuleIdentity", "Unsigned32", "Counter64")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
pgLantMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 9, 2))
if mibBuilder.loadTexts: pgLantMIB.setLastUpdated('9712180000Z')
if mibBuilder.loadTexts: pgLantMIB.setOrganization('Pairgain Technology')
if mibBuilder.loadTexts: pgLantMIB.setContactInfo('')
if mibBuilder.loadTexts: pgLantMIB.setDescription('The module defines MIB for LAN Tunneling configuration')
pgLantObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1))
class PgLantEncapType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("llc-snap", 2), ("vc-mux", 3))

pgLantTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1), )
if mibBuilder.loadTexts: pgLantTable.setStatus('current')
if mibBuilder.loadTexts: pgLantTable.setDescription('A table of encapsulation and forwarding information for the LAN Tunneling service')
pgLantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1), ).setIndexNames((0, "LAN-TUNNELING-MIB", "pgLantChannelPortIfIndex"))
if mibBuilder.loadTexts: pgLantEntry.setStatus('current')
if mibBuilder.loadTexts: pgLantEntry.setDescription('The encapsulation and forwarding information for one the LAN Tunnel')
pgLantChannelPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgLantChannelPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: pgLantChannelPortIfIndex.setDescription('The Interface Index for the channel(xDSL) port that is to be connected to a PVC tunnel.')
pgLantLinePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgLantLinePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: pgLantLinePortIfIndex.setDescription('The Interface Index for the line(OC3) port that the PVC is resided.')
pgLantVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgLantVpi.setStatus('current')
if mibBuilder.loadTexts: pgLantVpi.setDescription('The internal VPI for the ATM PVC that is connected to the tunnel')
pgLantVci = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgLantVci.setStatus('current')
if mibBuilder.loadTexts: pgLantVci.setDescription('The internal VCI for the ATM PVC that is connected to the tunnel')
pgLantEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1, 5), PgLantEncapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgLantEncapMode.setStatus('current')
if mibBuilder.loadTexts: pgLantEncapMode.setDescription('The encapsulation mode that is used by the tunnel')
pgLantRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 2, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pgLantRowStatus.setStatus('current')
if mibBuilder.loadTexts: pgLantRowStatus.setDescription('This object allows entries to be created and deleted in the pgLantTable. The RowStatus should be out of the ACTIVE state for other columns to be modified.')
mibBuilder.exportSymbols("LAN-TUNNELING-MIB", pgLantObjects=pgLantObjects, PgLantEncapType=PgLantEncapType, pgLantRowStatus=pgLantRowStatus, pgLantVpi=pgLantVpi, pgLantMIB=pgLantMIB, pgLantEncapMode=pgLantEncapMode, PYSNMP_MODULE_ID=pgLantMIB, pgLantVci=pgLantVci, pgLantEntry=pgLantEntry, pgLantChannelPortIfIndex=pgLantChannelPortIfIndex, pgLantLinePortIfIndex=pgLantLinePortIfIndex, pgLantTable=pgLantTable)
