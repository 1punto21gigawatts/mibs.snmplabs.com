#
# PySNMP MIB module TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:27:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ctTrapTable, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctTrapTable")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, Gauge32, ObjectIdentity, Counter32, NotificationType, ModuleIdentity, IpAddress, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "Gauge32", "ObjectIdentity", "Counter32", "NotificationType", "ModuleIdentity", "IpAddress", "TimeTicks", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1))
trapTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1), )
if mibBuilder.loadTexts: trapTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapTable.setDescription('This table houses information for transmitting traps. This table is not associated with trivial authentication.')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1), ).setIndexNames((0, "TRAP-MIB", "trapIndex"))
if mibBuilder.loadTexts: trapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapEntry.setDescription('Each entry contains a community name for the SNMP trap PDU, network addresses of who receives traps from this device and a trap status of Enable or Disable.')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapIndex.setDescription('A unique value for each trap entry that indexes the table.')
trapCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: trapCommunityName.setDescription('The community name that will be used within the SNMP trap PDU.')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapsDisabled", 1), ("trapsEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapStatus.setDescription('This object is checked to determine if traps should be sent to the corresponding network address associated with it.')
trapIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapIPAddr.setDescription('The network address of the device that will receive traps from this agent.')
trapSrcParty = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSrcParty.setStatus('mandatory')
if mibBuilder.loadTexts: trapSrcParty.setDescription('This object administratively defines operations of the source SNMP protocol entity. When processing a SNMP message, the entity acts as a SNMP party.')
trapDstParty = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 7, 1, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDstParty.setStatus('mandatory')
if mibBuilder.loadTexts: trapDstParty.setDescription('This object administratively defines operations of the destination SNMP protocol entity. When processing a SNMP message, the entity acts as a SNMP party.')
mibBuilder.exportSymbols("TRAP-MIB", trapCommunityName=trapCommunityName, trap=trap, trapIPAddr=trapIPAddr, trapStatus=trapStatus, trapTable=trapTable, trapDstParty=trapDstParty, trapEntry=trapEntry, trapIndex=trapIndex, trapSrcParty=trapSrcParty)
