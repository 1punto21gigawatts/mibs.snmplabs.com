#
# PySNMP MIB module CISCO-MLD-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MLD-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, IpAddress, Counter32, TimeTicks, iso, MibIdentifier, ObjectIdentity, Unsigned32, Counter64, NotificationType, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "IpAddress", "Counter32", "TimeTicks", "iso", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Counter64", "NotificationType", "Bits", "Gauge32")
StorageType, TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
ciscoMldSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 721))
ciscoMldSnoopingMIB.setRevisions(('2010-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMldSnoopingMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: ciscoMldSnoopingMIB.setLastUpdated('201007020000Z')
if mibBuilder.loadTexts: ciscoMldSnoopingMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMldSnoopingMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoMldSnoopingMIB.setDescription('This MIB module defines objects that describe IGMP/MLD snooping. It provides remote network management system the ability to manage the IGMP/MLD Snooping feature when snooping is operating at the system and port level. Virtual systems and related ports data can be accessed by NMS using appropriate SNMP context. E.g. in order to access data related to a particular L2VPN bridge domain system, the user shall specify on the SNMP request the SNMP context related to that particular bridge domain. Glossary of terms: GMI - Group Management Interval; it controls when the IGMP/MLD snooping expires stale group membership states. L2VPN - Layer 2 Virtual Private Network. IGMP - Internet Group Management Protocol. MLD - Multicast Listener Discovery. MRT - Max Response Time. TTL - Time To Live. PIM - Protocol Independent Multicast. TCN - Topology Change Notification. Querier - External IGMP/MLD router sending out queries which are flooded in the system (e.g a bridge domain). Internal Querier - Virtual Querier that solicits periodic membership reports by sending IGMP/MLD general queries out of all system ports. Winner/Looser Querier - A system can only have one active querier at a time, if the internal querier receives queries from another querier it performs querier election, the lowest IP address wins. G-Query - General IGMP/MLD Query. Solicitation - a global leave message with a NULL group multicast address, when the upstream router receives this solicitation, it immediately issues an general query.')
ciscoMldSnoopingMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 0))
ciscoMldSnoopingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 1))
ciscoMldSnoopingMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 2))
class CiscoMldPortType(TextualConvention, Integer32):
    description = "This textual convention denotes an enumerated integer-value that represents a bridge domain member type: 'unknown' The device is unable to ascertain the bridge domain member. 'interface' The bridge domain member is an interface represented by a row in the ifTable (defined by the IF-MIB [RFC2863]. 'pw' The bridge domain member is a L2VPN pseudowire represented by a row in the cpwVcTable (defined by the CISCO-IETF-PW-MIB). With the exception of the values 'unknown', each definition of a concrete CiscoMldPortType value MUST have a corresponding textual convention for use with the particular type of bridge domain member. To support future extensions, a MIB module SHOULD NOT sub-type the CiscoMldPortType textual convention in an object type definition. However, a compliance statement MAY sub-type it in order to require only a subset of the member types for a compliant implementation. Implementations must ensure that CiscoMldPortType objects and any dependent objects (e.g., CiscoMldPortIdentifier objects) are consistent. For example, an implementation must respond with an 'inconsistentValue' error if an attempt is made to modify a CiscoMldPortType object without changing the corresponding CiscoMldPortIdentifier object."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("interface", 2), ("pw", 3))

class CiscoMldPortIdentifier(TextualConvention, OctetString):
    description = "This textual convention denotes an octet string-value that indicates a bridge domain member. An implementation MUST ALWAYS interpret a CiscoMldPortIdentifier value within the context of a CiscoMldPortType value. Every use of the CiscoMldPortIdentifier textual convention requires the specification of a CiscoMldPortType object to provide the context. A MIB module SHOULD logically register the CiscoMldPortType object before the CiscoMldPortIdentifier object(s). The value of a CiscoMldPortIdentifier object MUST BE the null string if the value of the CiscoMldPortType object providing the context is 'unknown'. Implementations must ensure that a CiscoMldPortIdentifier object remains consistent with the CiscoMldPortType object providing the context. For example, an implementation must respond with an 'inconsistentValue' error if an attempt is made to modify a CiscoMldPortIdentifier object without changing the corresponding CiscoMldPortType object."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class CiscoMldPortInterface(TextualConvention, OctetString):
    description = "This textual convention denotes an octet string-value identifying a row in ifTable (defined by the IF-MIB [RFC2863]). Octets Contents Encoding ========================================= 4 ifIndex-value network-byte order The corresponding CiscoMldPortType value is 'interface'. A MIB module SHOULD NOT directly use this textual convention in defining object, as it restricts bridge domain members to specific type. However, if a MIB module does chose to directly use the textual convention, it MAY chose to do so without a CiscoMldPortType object to define the context, since this textual convention implies the context."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class CiscoMldPortPseudowire(TextualConvention, OctetString):
    description = "This textual convention denotes an octet string-value identifying a row in the cpwVcTable (defined by the CISCO-IETF-PW-MIB). Octets Contents Encoding ========================================= 4 cpwVcIndex-value network-byte order The corresponding CiscoMldPortType value is 'pw'. A MIB module SHOULD NOT directly use this textual convention in defining object, as it restricts bridge domain members to specific type. However, if a MIB module does chose to directly use the textual convention, it MAY chose to do so without a CiscoMldPortType object to define the context, since this textual convention implies the context."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class CiscoMldSnoopingVersion(TextualConvention, Integer32):
    description = "This textual convention denotes an enumerated integer-value that represents the IGMP/MLD snooping version: 'v1' - version 1 'v2' - version 2 'v3' - version 3 'unknown' - the system is not able to determine the version"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("v1", 1), ("v2", 2), ("v3", 3), ("unknown", 4))

cmsConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1))
cmsSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 2))
cmsOperInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3))
cmsSystemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4))
cmsPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5))
cmsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1), )
if mibBuilder.loadTexts: cmsProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmsProfileTable.setDescription('This table lists IGMP/MLD configuration for each profile available on the system.')
cmsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MLD-SNOOPING-MIB", "cmsProfileName"))
if mibBuilder.loadTexts: cmsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmsProfileEntry.setDescription("An entry describes a IGMP/MLD snooping profile; that is a set of configuration parameters that can be applied to either systems or ports. A peer SNMP entity may create a profile by setting an instance of cmsProfileStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may perform actions resulting in the creation of a member link. In these cases, the system must automatically create a row in the cmsProfileTable. A peer SNMP entity may destroy a profile by setting the corresponding instance of cmsProfileStatus to 'destroy'. Observe that an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may perform actions resulting in the destruction of a profile. In these cases, the system must automatically destroy the corresponding row in the cmsProfileTable.")
cmsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cmsProfileName.setStatus('current')
if mibBuilder.loadTexts: cmsProfileName.setDescription('This object indicates a text string defining the name of the profile identified by cmsProfileIndex.')
cmsProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileStatus.setStatus('current')
if mibBuilder.loadTexts: cmsProfileStatus.setDescription("This object specifies the status of the row. The following columns must be valid before activating a row: - cmsProfileStorageType - cmsProfileSnoopMinVersion - cmsProfileIPAddrType - cmsProfileIPAddress - cmsProfileRobustnessVariable - cmsProfileInternalQuerier - cmsProfileLastMemberQueryCount - cmsProfileLastMemberQueryInterval - cmsProfileProxyReporting - cmsProfileReportSuppression - cmsProfileUnsolicitedReportTimer - cmsProfileFloodQueryCount - cmsProfileQuerySolicit - cmsProfileTTLCheck - cmsProfileRouterAlertCheck - cmsProfileIntQuerierMaxRespTime - cmsProfileIntQuerierQueryInterval - cmsProfileIntQuerierRobustnessVar - cmsProfileIntQuerierTCNQueryCount - cmsProfileIntQuerierTCNQueryIntrvl - cmsProfileIntQuerierExpiry - cmsProfileIntQuerierVersion - cmsProfileRouterGuard - cmsProfileStaticMRouter - cmsProfileImmediateLeave However, these objects specify valid default values. Thus, it is possible to use create-and-go row creation semantics without setting additional columns. An implementation must allow an EMS/NMS to modify any column when this column is 'active'")
cmsProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 3), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmsProfileStorageType.setDescription('This object specifies the storage type of this conceptual row.')
cmsProfileSnoopMinVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 4), CiscoMldSnoopingVersion().clone('v3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileSnoopMinVersion.setStatus('current')
if mibBuilder.loadTexts: cmsProfileSnoopMinVersion.setDescription('This object specifies the minimum IGMP or MLD version supported by snooping in the system where the profile is applied.')
cmsProfileIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 5), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIPAddrType.setDescription('This object specifies the IP address type (IPv4 or IPv6) for the objects cmsProfileIPAddress')
cmsProfileIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 6), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileIPAddress.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIPAddress.setDescription('This object specifies the system IP address used by IGMP/MLD snooping.')
cmsProfileRobustnessVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileRobustnessVariable.setStatus('current')
if mibBuilder.loadTexts: cmsProfileRobustnessVariable.setDescription('This object specifies the robustness-variable value used to calculate the group management interval (GMI): GMI = (robustness-variable * query-interval) + MRT')
cmsProfileInternalQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileInternalQuerier.setStatus('current')
if mibBuilder.loadTexts: cmsProfileInternalQuerier.setDescription("This object specifies the administrative status of the internal querier. A value of 'true' means that the internal querier feature is enabled.")
cmsProfileLastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 9), Unsigned32().clone(2)).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: cmsProfileLastMemberQueryCount.setDescription('This object specifies the profile member query count. This value is the number of group-specific queries IGMP/MLD snooping sends, in response to a leave message.')
cmsProfileLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(100)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cmsProfileLastMemberQueryInterval.setDescription('This object specifies the query interval, which should be the time gap between two consecutive group-specific queries.')
cmsProfileSuppressReport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileSuppressReport.setStatus('current')
if mibBuilder.loadTexts: cmsProfileSuppressReport.setDescription("This object specifies the configuration status of the report suppression feature. A value of 'true' means that the reports are suppressed.")
cmsProfileUnsolicitedReportTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 12), Unsigned32().clone(100)).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileUnsolicitedReportTimer.setStatus('current')
if mibBuilder.loadTexts: cmsProfileUnsolicitedReportTimer.setDescription('This object specifies the unsolicited report timer interval in minutes. The reports are forwarded at random intervals within the timeframe configured.')
cmsProfileFloodQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 13), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileFloodQueryCount.setStatus('current')
if mibBuilder.loadTexts: cmsProfileFloodQueryCount.setDescription('This object specifies the number of general queries for which the multicast traffic is flooded following a topology change notification, thus influencing the refresh period.')
cmsProfileQuerySolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileQuerySolicit.setStatus('current')
if mibBuilder.loadTexts: cmsProfileQuerySolicit.setDescription("This object specifies the query solicit administrative status. A value of 'true' means that the feature is enabled.")
cmsProfileTTLCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileTTLCheck.setStatus('current')
if mibBuilder.loadTexts: cmsProfileTTLCheck.setDescription("This object specifies administrative status of the time-to-live (TTL) check feature. A value of 'true', means IGMP/MLD snooping processes all packets by examining the TTL field in the header.")
cmsProfileRouterAlertCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileRouterAlertCheck.setStatus('current')
if mibBuilder.loadTexts: cmsProfileRouterAlertCheck.setDescription("This object specifies the administrative status of the alert check feature. A value of 'true', means IGMP/MLD snooping performs the validation before processing the message.")
cmsProfileIntQuerierMaxRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 17), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileIntQuerierMaxRespTime.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIntQuerierMaxRespTime.setDescription('This object indicates the maximum time the querier can take to reply to a query. It is used in order to calculate the Group Management Interval (GMI): GMI = (robustness-variable * query-interval) + MRT')
cmsProfileIntQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 18), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileIntQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIntQuerierQueryInterval.setDescription('This object specifies the internal querier query interval, which should be the time gap between two consecutive queries. It is used in order to calculate the Group Management Interval (GMI): GMI = (robustness-variable * query-interval) + MRT')
cmsProfileIntQuerierTCNQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileIntQuerierTCNQueryCount.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIntQuerierTCNQueryCount.setDescription('This object specifies the Topopogy Change Notification query count for the internal querier.')
cmsProfileIntQuerierTCNQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 20), Unsigned32().clone(1)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileIntQuerierTCNQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIntQuerierTCNQueryInterval.setDescription('This object specifies the internal querier TCN query interval, which should be the time gap between two consecutive TCN queries')
cmsProfileIntQuerierExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 21), Unsigned32().clone(60)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileIntQuerierExpiry.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIntQuerierExpiry.setDescription('This object specifies the internal querier time out; that is the timer set by the internal querier after an election procedure where the internal query results as loser. If this timer expires before another query is received from the election winner, the internal querier becomes the active querier.')
cmsProfileIntQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 22), CiscoMldSnoopingVersion().clone('v3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsProfileIntQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: cmsProfileIntQuerierVersion.setDescription('This object specifies the internal querier version')
cmsProfileRouterGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileRouterGuard.setStatus('current')
if mibBuilder.loadTexts: cmsProfileRouterGuard.setDescription("This object specifies the IGMP/MLD snooping router guard configuration status. A value of 'true' means that a port cannot be dynamically discovered as an mrouter")
cmsProfileStaticMRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileStaticMRouter.setStatus('current')
if mibBuilder.loadTexts: cmsProfileStaticMRouter.setDescription("This object specifies the static multicast router administrative status. A value of 'true' means that the feature is enabled.")
cmsProfileImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsProfileImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: cmsProfileImmediateLeave.setDescription("This object specifies the immediate leave administrative status. A value of 'true' means that IGMP/MLD snooping will remove a Layer 2 interface from the forwarding table entry immediately, without first sending group-specific queries to the port.")
cmsConfigPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2), )
if mibBuilder.loadTexts: cmsConfigPortTable.setStatus('current')
if mibBuilder.loadTexts: cmsConfigPortTable.setDescription('This table lists snooping configuration for each port.')
cmsConfigPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-MLD-SNOOPING-MIB", "cmsPortType"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsPortId"))
if mibBuilder.loadTexts: cmsConfigPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmsConfigPortEntry.setDescription("An entry describes the configuration associated with a port. A peer SNMP entity may create a port config by setting an instance of cmsConfigPortStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may perform actions resulting in the creation of a member link. In these cases, the system must automatically create a row in the cmsConfigPortTable. A peer SNMP entity may destroy a port config by setting the corresponding instance of cmsConfigPortStatus to 'destroy'. Observe that an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may perform actions resulting in the destruction of a profile. In these cases, the system must automatically destroy the corresponding row in the cmsConfigPortTable.")
cmsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2, 1, 1), CiscoMldPortType())
if mibBuilder.loadTexts: cmsPortType.setStatus('current')
if mibBuilder.loadTexts: cmsPortType.setDescription('This object indicates the port type.')
cmsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2, 1, 2), CiscoMldPortIdentifier())
if mibBuilder.loadTexts: cmsPortId.setStatus('current')
if mibBuilder.loadTexts: cmsPortId.setDescription('This object indentifies the port. Depending on the cmsPortType this object will uniquely identify the port accordingly with the definition of the TC CiscoMldPortIdentifier.')
cmsConfigPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsConfigPortStatus.setStatus('current')
if mibBuilder.loadTexts: cmsConfigPortStatus.setDescription("This object specifies the status of the row. The following columns must be valid before activating a row: - cmsConfigPortProfileName However, this objects specify a valid default value. Thus, it is possible to use create-and-go row creation semantics without setting additional columns. An implementation must allow an EMS/NMS to modify any column when this column is 'active'")
cmsConfigPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsConfigPortStorageType.setStatus('current')
if mibBuilder.loadTexts: cmsConfigPortStorageType.setDescription('This object specifies the storage type of this conceptual row.')
cmsConfigPortProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmsConfigPortProfileName.setStatus('current')
if mibBuilder.loadTexts: cmsConfigPortProfileName.setDescription('This object specifies the name of the profile contained by the cmsProfileTable associated with the system port identified by the table entry indices.')
cmsConfigSystemProfileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsConfigSystemProfileName.setStatus('current')
if mibBuilder.loadTexts: cmsConfigSystemProfileName.setDescription('This object indicates the IGMP/MLD profile name associated to the system. It corresponds to an entry on cmsProfileTable where the complete set of configuration parameters are stored.')
cmsQuerierIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierIPAddrType.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierIPAddrType.setDescription('This object indicates the IP address type (IPv4 or IPv6) of cmsQuerierIPAddr.')
cmsQuerierIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierIPAddr.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierIPAddr.setDescription('This object indicates the IP address of the querier.')
cmsQuerierPortType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 3), CiscoMldPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierPortType.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierPortType.setDescription('This object indicates the port type of the querier.')
cmsQuerierPortId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 4), CiscoMldPortIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierPortId.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierPortId.setDescription("This object indicates the port identifier of the querier; that is the port through which the querier's queries are received on the system.")
cmsQuerierVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 5), CiscoMldSnoopingVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierVersion.setDescription('This object indicates the querier IGMP/MLD snooping version.')
cmsQuerierQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierQueryInterval.setDescription('This object indicates the querier interval, which is the time gap between two consecutive queries.')
cmsQuerierRobustness = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierRobustness.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierRobustness.setDescription('This object indicates the querier robustness variable.')
cmsQuerierMaxRespTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierMaxRespTime.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierMaxRespTime.setDescription('This object indicates the maximum time the querier can take to reply to a query.')
cmsQuerierTimeSinceLastGQuery = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsQuerierTimeSinceLastGQuery.setStatus('current')
if mibBuilder.loadTexts: cmsQuerierTimeSinceLastGQuery.setDescription('This object indicates for the querier the time interval since the last general query.')
cmsMcastInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10), )
if mibBuilder.loadTexts: cmsMcastInfoTable.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoTable.setDescription('This table lists the snooping multicast operational data for group/source addresses associated to a port.')
cmsMcastInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1), ).setIndexNames((0, "CISCO-MLD-SNOOPING-MIB", "cmsPortType"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsPortId"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsMcastInfoGroupAddrType"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsMcastInfoGroupAddr"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsMcastInfoSourceAddr"))
if mibBuilder.loadTexts: cmsMcastInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoEntry.setDescription('An entry describes the multicast operational data for the group/source addresses associated to a port. The system creates a row in this table for each port and group/source address configured on the snooping profile associated to that port. The system destroy a row on this table when the related group/source configuration is removed form the profile associated to that port. If a port is associated with a profile not defining any static group/source there will not be any entry for that port on this table.')
cmsMcastInfoGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cmsMcastInfoGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoGroupAddrType.setDescription('This object indicates the IP version of cmsMcastGroupAddr and cmsMcastSourceAddr')
cmsMcastInfoGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1, 2), InetAddress())
if mibBuilder.loadTexts: cmsMcastInfoGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoGroupAddr.setDescription('This object uniquely identifies the IP address of the multicast group observed through IGMP/MLD snooping.')
cmsMcastInfoSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1, 3), InetAddress())
if mibBuilder.loadTexts: cmsMcastInfoSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoSourceAddr.setDescription('This object indicates the IP address of a IGMP/MLD snooping source')
cmsMcastInfoGroupFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exclude", 1), ("include", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsMcastInfoGroupFilter.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoGroupFilter.setDescription("This object indicates the multicast group filter associated with the group/source related to the indices. - 'exclude': The group filter mode is set to exclude. - 'include': The group filter mode is set to include.")
cmsMcastInfoExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsMcastInfoExpiry.setReference('RFC3376, Section 8.4. Group Membership Interval')
if mibBuilder.loadTexts: cmsMcastInfoExpiry.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoExpiry.setDescription('This object indicates the multicast group expiry time. When this timer expires the group membership is removed from the port.')
cmsMcastInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsMcastInfoFlag.setStatus('current')
if mibBuilder.loadTexts: cmsMcastInfoFlag.setDescription("This object indicates the multicast flag associated with the group/source related to the indices: 'static' - The group state is configured via snooping profile 'dynamic' - The group state is learnt as a result of receiving IGMP/MLD reports. 'staticAndDynamic' - The group state is both statically configured via snooping profile and learnt as a result of receiving IGMP/MLD reports. 'unknown' - The group state is not known.")
cmsMRouterPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 11), )
if mibBuilder.loadTexts: cmsMRouterPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: cmsMRouterPortInfoTable.setDescription('This table provides IGMP/MLD snooping operational data for the multicast router ports available on the system.')
cmsMRouterPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 11, 1), ).setIndexNames((0, "CISCO-MLD-SNOOPING-MIB", "cmsPortType"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsPortId"))
if mibBuilder.loadTexts: cmsMRouterPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cmsMRouterPortInfoEntry.setDescription('A conceptual row in the cmsMRouterPortInfoTable. There is an entry in this table for each port where IGMP/MLD snooping is configured on the system.')
cmsMRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("staticAndDynamic", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsMRouterType.setStatus('current')
if mibBuilder.loadTexts: cmsMRouterType.setDescription("This object indicates the multicast router type for the port identified by the indices. 'dynamic' - indicates that the mrouter port is dynamically discovered by the system. 'static' - indicates that the mrouter ports is statically configured. 'staticAndDynamic' - indicates that the mrouter port is both static and dynamic at the same time. 'unknown' - indicates that the mrouter type is not known")
cmsSysIntQuerierRxGeneralQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueries.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueries.setDescription('This object indicates the number of general queries received by the internal querier.')
cmsSysIntQuerierRxGeneralQueriesWhenDisabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesWhenDisabled.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesWhenDisabled.setDescription('This object indicates the number of general queries received when internal querier is disabled.')
cmsSysIntQuerierRxGeneralQueriesAsQuerier = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsQuerier.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsQuerier.setDescription('This object indicates the number of general queries received by the internal querier as querier.')
cmsSysIntQuerierRxGeneralQueriesAsNonQuerier = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsNonQuerier.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsNonQuerier.setDescription('This object indicates the number of general queries received by the internal querier as non querier.')
cmsSysIntQuerierRxGeneralQueriesAsWinner = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsWinner.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsWinner.setDescription('This object indicates the number of general queries received by the internal querier as winner.')
cmsSysIntQuerierRxGeneralQueriesAsLoser = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsLoser.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGeneralQueriesAsLoser.setDescription('This object indicates the number of general queries received by the internal querier as loser.')
cmsSysIntQuerierRxGlobalLeaves = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeaves.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeaves.setDescription('This object indicates the number of global leaves received.')
cmsSysIntQuerierRxGlobalLeavesWhenDisabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeavesWhenDisabled.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeavesWhenDisabled.setDescription('This object indicates the number of global leaves received when internal querier is disabled.')
cmsSysIntQuerierRxGlobalLeavsAsNonQuerier = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeavsAsNonQuerier.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeavsAsNonQuerier.setDescription('This objects indicates the number of global leaves received as non querier.')
cmsSysIntQuerierRxGlobalLeavesIgnored = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeavesIgnored.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxGlobalLeavesIgnored.setDescription('This objects indicates the number of global leaves received and ignored.')
cmsSysIntQuerierRxPimEnabledNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxPimEnabledNotifications.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxPimEnabledNotifications.setDescription('This object indicates the number of PIM enabled notification received.')
cmsSysIntQuerierRxPimDisabledNotifications = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxPimDisabledNotifications.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxPimDisabledNotifications.setDescription('This object indicates the number of PIM disabled notification received.')
cmsSysIntQuerierRxLocalQuerySolicitations = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierRxLocalQuerySolicitations.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierRxLocalQuerySolicitations.setDescription('This object indicates the number of local query solicitations received.')
cmsSysIntQuerierTxGeneralQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysIntQuerierTxGeneralQueries.setStatus('current')
if mibBuilder.loadTexts: cmsSysIntQuerierTxGeneralQueries.setDescription('This object indicates the number of general queries transmitted.')
cmsSysTrfGeneralQueriesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGeneralQueriesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGeneralQueriesReceived.setDescription('This object indicates the number of general queries received.')
cmsSysTrfGeneralQueriesReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGeneralQueriesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGeneralQueriesReinjected.setDescription('This object indicates the number of general querier re-injected.')
cmsSysTrfGeneralQueriesGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGeneralQueriesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGeneralQueriesGenerated.setDescription('This object indicates the number of general queries generated.')
cmsSysTrfGrpSpecificQueriesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGrpSpecificQueriesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGrpSpecificQueriesReceived.setDescription('This object indicates the number of group specific queries received.')
cmsSysTrfGrpSpecificQueriesReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 19), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGrpSpecificQueriesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGrpSpecificQueriesReinjected.setDescription('This object indicates the number of group specific queries re-injected.')
cmsSysTrfGrpSpecificQueriesGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGrpSpecificQueriesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGrpSpecificQueriesGenerated.setDescription('This object indicates the number of group specific queries generated.')
cmsSysTrfGSSpecificQueriesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGSSpecificQueriesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGSSpecificQueriesReceived.setDescription('This object indicates the number of group source specific queries received.')
cmsSysTrfGSSpecificQueriesReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGSSpecificQueriesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGSSpecificQueriesReinjected.setDescription('This object indicates the number of group source specific queries re-injected.')
cmsSysTrfGSSpecificQueriesGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGSSpecificQueriesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGSSpecificQueriesGenerated.setDescription('This object indicates the number of group source specific queries generated.')
cmsSysTrfV2ReportReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfV2ReportReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfV2ReportReceived.setDescription('This object indicates the number of V2 reports received.')
cmsSysTrfV2ReportReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfV2ReportReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfV2ReportReinjected.setDescription('This object indicates the number of V2 reports re-injected.')
cmsSysTrfV2ReportGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 26), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfV2ReportGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfV2ReportGenerated.setDescription('This object indicates the number of V2 reports generated.')
cmsSysTrfV3ReportReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfV3ReportReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfV3ReportReceived.setDescription('This object indicates the number of V3 reports received.')
cmsSysTrfV3ReportReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfV3ReportReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfV3ReportReinjected.setDescription('This object indicates the number of V3 reports re-injected.')
cmsSysTrfV3ReportGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 29), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfV3ReportGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfV3ReportGenerated.setDescription('This object indicates the number of V3 reports generated.')
cmsSysTrfGlobalLeavesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 30), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGlobalLeavesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGlobalLeavesReceived.setDescription('This object indicates the number of global leaves received.')
cmsSysTrfGlobalLeavesReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 31), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGlobalLeavesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGlobalLeavesReinjected.setDescription('This object indicates the number of global leaves re-injected.')
cmsSysTrfGlobalLeavesGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 32), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfGlobalLeavesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfGlobalLeavesGenerated.setDescription('This object indicates the number of global leaves generated.')
cmsSysTrfPIMHellosReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 33), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfPIMHellosReceived.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfPIMHellosReceived.setDescription('This object indicates the number of PIM hellos received.')
cmsSysTrfPIMHellosReinjected = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 34), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfPIMHellosReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfPIMHellosReinjected.setDescription('This object indicates the number of PIM hellos re-injected.')
cmsSysTrfPIMHellosGenerated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 35), Unsigned32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfPIMHellosGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfPIMHellosGenerated.setDescription('This object indicates the number of PIM hellos generated.')
cmsSysTrfRxPcktsFlooded = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 36), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfRxPcktsFlooded.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfRxPcktsFlooded.setDescription('This object indicates the number of received packets flooded on the system.')
cmsSysTrfRxPcktsFwdToMembers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 37), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfRxPcktsFwdToMembers.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfRxPcktsFwdToMembers.setDescription('This object indicates the number of received packets forwarded to the snooping members.')
cmsSysTrfRxPcktsFwdToMrouters = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 38), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfRxPcktsFwdToMrouters.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfRxPcktsFwdToMrouters.setDescription('This object indicates the number of received packets forwarded to MRouters.')
cmsSysTrfRxPcktsConsumed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 39), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfRxPcktsConsumed.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfRxPcktsConsumed.setDescription('This object indicates the number of received packets consumed by the system.')
cmsSysTrfRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 40), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfRxErrors.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfRxErrors.setDescription('This object indicates the number of received packets with errors.')
cmsSysTrfRxOther = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 41), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfRxOther.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfRxOther.setDescription('This object indicates the number of received packets not counted on the other rx counters on this table.')
cmsSysTrfTxErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 42), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysTrfTxErrors.setStatus('current')
if mibBuilder.loadTexts: cmsSysTrfTxErrors.setDescription('This object indicates the number of transmitted packets with errors.')
cmsSysRxV3RepIsInclude = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 43), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysRxV3RepIsInclude.setStatus('current')
if mibBuilder.loadTexts: cmsSysRxV3RepIsInclude.setDescription("This object indicates the number of V3 reports of type 'include' received by the system.")
cmsSysRxV3RepChangeToInclude = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 44), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysRxV3RepChangeToInclude.setStatus('current')
if mibBuilder.loadTexts: cmsSysRxV3RepChangeToInclude.setDescription("This object indicates the number of V3 reports of type 'change to include' received by the system.")
cmsSysRxV3RepIsExclude = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 45), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysRxV3RepIsExclude.setStatus('current')
if mibBuilder.loadTexts: cmsSysRxV3RepIsExclude.setDescription("This object indicates the number of V3 reports of type 'exclude' received by the system.")
cmsSysRxV3RepChangeToExclude = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 46), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysRxV3RepChangeToExclude.setStatus('current')
if mibBuilder.loadTexts: cmsSysRxV3RepChangeToExclude.setDescription("This object indicates the number of V3 reports of type 'change to exclude' received by the system.")
cmsSysRxV3RepAllowNewSrc = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 47), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysRxV3RepAllowNewSrc.setStatus('current')
if mibBuilder.loadTexts: cmsSysRxV3RepAllowNewSrc.setDescription("This object indicates the number of V3 reports of type 'Allow New Source' received by the system.")
cmsSysRxV3RepBlockOldSrc = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 4, 48), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsSysRxV3RepBlockOldSrc.setStatus('current')
if mibBuilder.loadTexts: cmsSysRxV3RepBlockOldSrc.setDescription("This object indicates the number of V3 reports of type 'block old source' received by the system.")
cmsStatsPortTrfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1), )
if mibBuilder.loadTexts: cmsStatsPortTrfTable.setStatus('current')
if mibBuilder.loadTexts: cmsStatsPortTrfTable.setDescription('This table provides the IGMP/MLD snooping port traffic statistics. Each row contains traffic statistical data associated with a unique bridge domain port identified by the indexes. Conceptual rows can be seen by SNMP agents or NMS as containing statistical informations related to the indexes discovered on cbdBridgeDomainTable and cbdPortTable')
cmsStatsPortTrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-MLD-SNOOPING-MIB", "cmsPortType"), (0, "CISCO-MLD-SNOOPING-MIB", "cmsPortId"))
if mibBuilder.loadTexts: cmsStatsPortTrfEntry.setStatus('current')
if mibBuilder.loadTexts: cmsStatsPortTrfEntry.setDescription('A conceptual row in the cmsStatsPortTrfTable. There is an entry in this table for each port where IGMP/MLD snooping is configured on the system.')
cmsStsPortTrfGeneralQueriesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGeneralQueriesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGeneralQueriesReceived.setDescription('This object indicates the number of general queries received on the port identified by the indices')
cmsStsPortTrfGeneralQueriesReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGeneralQueriesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGeneralQueriesReinjected.setDescription('This object indicates the number of general queries re-injected on the port identified by the indices')
cmsStsPortTrfGeneralQueriesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGeneralQueriesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGeneralQueriesGenerated.setDescription('This object indicates the number of general queries generated on the port identified by the indices')
cmsStsPortTrfGrpSpecificQueriesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGrpSpecificQueriesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGrpSpecificQueriesReceived.setDescription('This object indicates the number of group specific queries received on the port identified by the indices')
cmsStsPortTrfGrpSpecificQueriesReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGrpSpecificQueriesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGrpSpecificQueriesReinjected.setDescription('This object indicates the number of group specific queries re-injected on the port identified by the indices')
cmsStsPortTrfGrpSpecificQueriesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGrpSpecificQueriesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGrpSpecificQueriesGenerated.setDescription('This object indicates the number of group specific queries generated on the port identified by the indices')
cmsStsPortTrfGSSpecificQueriesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGSSpecificQueriesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGSSpecificQueriesReceived.setDescription('This object indicates the number of group source specific queries received on the port identified by the indices')
cmsStsPortTrfGSSpecificQueriesReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGSSpecificQueriesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGSSpecificQueriesReinjected.setDescription('This object indicates the number of group source specific queries re-injected on the port identified by the indices')
cmsStsPortTrfGSSpecificQueriesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGSSpecificQueriesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGSSpecificQueriesGenerated.setDescription('This object indicates the number of group source specific queries generated on the port identified by the indices')
cmsStsPortTrfV2ReportReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfV2ReportReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfV2ReportReceived.setDescription('This object indicates the number of V2 reports received on the port identified by the indices')
cmsStsPortTrfV2ReportReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfV2ReportReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfV2ReportReinjected.setDescription('This object indicates the number of V2 reports re-injected on the port identified by the indices')
cmsStsPortTrfV2ReportGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfV2ReportGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfV2ReportGenerated.setDescription('This object indicates the number of V2 reports generated on the port identified by the indices')
cmsStsPortTrfV3ReportReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfV3ReportReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfV3ReportReceived.setDescription('This object indicates the number of V3 reports received on the port identified by the indices')
cmsStsPortTrfV3ReportReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfV3ReportReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfV3ReportReinjected.setDescription('This object indicates the number of V3 reports re-injected on the port identified by the indices')
cmsStsPortTrfV3ReportGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfV3ReportGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfV3ReportGenerated.setDescription('This object indicates the number of V3 reports generated on the port identified by the indices')
cmsStsPortTrfGlobalLeavesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGlobalLeavesReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGlobalLeavesReceived.setDescription('This object indicates the number of global leaves received on the port identified by the indices')
cmsStsPortTrfGlobalLeavesReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGlobalLeavesReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGlobalLeavesReinjected.setDescription('This object indicates the number of global leaves re-injected on the port identified by the indices')
cmsStsPortTrfGlobalLeavesGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfGlobalLeavesGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfGlobalLeavesGenerated.setDescription('This object indicates the number of global leaves generated on the port identified by the indices')
cmsStsPortTrfPIMHellosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfPIMHellosReceived.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfPIMHellosReceived.setDescription('This object indicates the number of PIM hellos received on the port identified by the indices')
cmsStsPortTrfPIMHellosReinjected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 20), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfPIMHellosReinjected.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfPIMHellosReinjected.setDescription('This object indicates the number of PIM hellos re-injected on the port identified by the indices')
cmsStsPortTrfPIMHellosGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfPIMHellosGenerated.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfPIMHellosGenerated.setDescription('This object indicates the number of PIM hellos generated on the port identified by the indices')
cmsStsPortTrfRxPcktsFlooded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsFlooded.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsFlooded.setDescription('This object indicates the number of received packets flooded on the port identified by the indices')
cmsStsPortTrfRxPcktsFwdToMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 23), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsFwdToMembers.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsFwdToMembers.setDescription('This object indicates the number of received packets forwarded to members on the port identified by the indices')
cmsStsPortTrfRxPcktsFwdToMrouters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsFwdToMrouters.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsFwdToMrouters.setDescription('This object indicates the number of received packets forwarded to MRouters on the port identified by the indices')
cmsStsPortTrfRxPcktsConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsConsumed.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfRxPcktsConsumed.setDescription('This object indicates the number of received packets consumed on the port identified by the indices')
cmsStsPortTrfRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 26), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfRxErrors.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfRxErrors.setDescription('This object indicates the number of received packets with errors on the port identified by the indices')
cmsStsPortTrfRxOther = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 27), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfRxOther.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfRxOther.setDescription('This object indicates the number of received packets on the port identified by the indices and not counted on the others receive counters')
cmsStsPortTrfTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 28), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortTrfTxErrors.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortTrfTxErrors.setDescription('This object indicates the number of transmitted packets with errors on the port identified by the indices')
cmsStsPortRxV3RepIsInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 29), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortRxV3RepIsInclude.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortRxV3RepIsInclude.setDescription("This object indicates the number of V3 reports of type 'include' received on the port identified by the indices")
cmsStsPortRxV3RepChangeToInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 30), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortRxV3RepChangeToInclude.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortRxV3RepChangeToInclude.setDescription("This object indicates the number of V3 reports of type 'change to include' received on the port identified by the indices")
cmsStsPortRxV3RepIsExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 31), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortRxV3RepIsExclude.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortRxV3RepIsExclude.setDescription("This object indicates the number of V3 reports of type 'exclude' received on the port identified by the indices")
cmsStsPortRxV3RepChangeToExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 32), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortRxV3RepChangeToExclude.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortRxV3RepChangeToExclude.setDescription("This object indicates the number of V3 reports of type 'change to exclude' received on the port identified by the indices")
cmsStsPortRxV3RepAllowNewSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 33), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortRxV3RepAllowNewSrc.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortRxV3RepAllowNewSrc.setDescription("This object indicates the number of V3 reports of type 'allow new source' received on the port identified by the indices")
cmsStsPortRxV3RepBlockOldSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 34), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortRxV3RepBlockOldSrc.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortRxV3RepBlockOldSrc.setDescription("This object indicates the number of V3 reports of type 'block old source' received on the port identified by the indices")
cmsStsPortGrps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 35), Counter32()).setUnits('groups').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortGrps.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortGrps.setDescription('This object indicates the number of groups associated with the port identified by the indices')
cmsStsPortSGs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 721, 1, 5, 1, 1, 36), Counter32()).setUnits('sources').setMaxAccess("readonly")
if mibBuilder.loadTexts: cmsStsPortSGs.setStatus('current')
if mibBuilder.loadTexts: cmsStsPortSGs.setDescription('This object indicates the number of sources associated with the port identified by the indices')
ciscoMldSnoopingMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 1))
ciscoMldSnoopingMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 2))
ciscoMldSnoopingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 1, 1)).setObjects(("CISCO-MLD-SNOOPING-MIB", "ciscoMldSnoopingMIBConfigMainObjectGroup"), ("CISCO-MLD-SNOOPING-MIB", "ciscoMldSnoopingMIBInfoMainObjectGroup"), ("CISCO-MLD-SNOOPING-MIB", "ciscoMldSnoopingMIBStatsMainObjectGroup"), ("CISCO-MLD-SNOOPING-MIB", "ciscoMldSnoopingMIBConfigDetailedObjectGroup"), ("CISCO-MLD-SNOOPING-MIB", "ciscoMldSnoopingMIBStatsDetailedObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMldSnoopingMIBCompliance = ciscoMldSnoopingMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoMldSnoopingMIBCompliance.setDescription('The basic implementation requirements for agents that support the CISCO-MLD-SNOOPING-MIB.')
ciscoMldSnoopingMIBConfigMainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 2, 1)).setObjects(("CISCO-MLD-SNOOPING-MIB", "cmsProfileInternalQuerier"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileSuppressReport"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileRouterGuard"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileStaticMRouter"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileImmediateLeave"), ("CISCO-MLD-SNOOPING-MIB", "cmsConfigSystemProfileName"), ("CISCO-MLD-SNOOPING-MIB", "cmsConfigPortProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMldSnoopingMIBConfigMainObjectGroup = ciscoMldSnoopingMIBConfigMainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMldSnoopingMIBConfigMainObjectGroup.setDescription('A collections of objects representing the main configuration elements of CISCO-MLD-SNOOPING-MIB.')
ciscoMldSnoopingMIBConfigDetailedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 2, 2)).setObjects(("CISCO-MLD-SNOOPING-MIB", "cmsProfileSnoopMinVersion"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileStatus"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileStorageType"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIPAddress"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileRobustnessVariable"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileLastMemberQueryCount"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileLastMemberQueryInterval"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileUnsolicitedReportTimer"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileFloodQueryCount"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileQuerySolicit"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileTTLCheck"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileRouterAlertCheck"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIntQuerierMaxRespTime"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIntQuerierQueryInterval"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIntQuerierTCNQueryCount"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIntQuerierTCNQueryInterval"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIntQuerierExpiry"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIntQuerierVersion"), ("CISCO-MLD-SNOOPING-MIB", "cmsProfileIPAddrType"), ("CISCO-MLD-SNOOPING-MIB", "cmsConfigPortStatus"), ("CISCO-MLD-SNOOPING-MIB", "cmsConfigPortStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMldSnoopingMIBConfigDetailedObjectGroup = ciscoMldSnoopingMIBConfigDetailedObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMldSnoopingMIBConfigDetailedObjectGroup.setDescription('A collections of objects representing the detailed configuration elements of CISCO-MLD-SNOOPING-MIB.')
ciscoMldSnoopingMIBInfoMainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 2, 3)).setObjects(("CISCO-MLD-SNOOPING-MIB", "cmsMcastInfoGroupFilter"), ("CISCO-MLD-SNOOPING-MIB", "cmsMcastInfoExpiry"), ("CISCO-MLD-SNOOPING-MIB", "cmsMcastInfoFlag"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierPortId"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierVersion"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierQueryInterval"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierRobustness"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierMaxRespTime"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierTimeSinceLastGQuery"), ("CISCO-MLD-SNOOPING-MIB", "cmsMRouterType"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierIPAddr"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierIPAddrType"), ("CISCO-MLD-SNOOPING-MIB", "cmsQuerierPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMldSnoopingMIBInfoMainObjectGroup = ciscoMldSnoopingMIBInfoMainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMldSnoopingMIBInfoMainObjectGroup.setDescription('A collections of objects representing the main operational elements of CISCO-MLD-SNOOPING-MIB.')
ciscoMldSnoopingMIBStatsMainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 2, 4)).setObjects(("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGeneralQueriesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGeneralQueriesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGeneralQueriesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGlobalLeavesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGlobalLeavesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGlobalLeavesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfPIMHellosReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfPIMHellosReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfPIMHellosGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfRxErrors"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfTxErrors"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfV2ReportReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfV2ReportReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfV2ReportGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfV3ReportReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfV3ReportReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfV3ReportGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfRxErrors"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfTxErrors"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysRxV3RepIsInclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysRxV3RepChangeToInclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysRxV3RepIsExclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysRxV3RepChangeToExclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysRxV3RepAllowNewSrc"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysRxV3RepBlockOldSrc"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortRxV3RepIsInclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortRxV3RepChangeToInclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortRxV3RepIsExclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortRxV3RepChangeToExclude"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortRxV3RepAllowNewSrc"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortRxV3RepBlockOldSrc"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortGrps"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortSGs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMldSnoopingMIBStatsMainObjectGroup = ciscoMldSnoopingMIBStatsMainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMldSnoopingMIBStatsMainObjectGroup.setDescription('A collections of objects representing the main statistical elements of CISCO-MLD-SNOOPING-MIB.')
ciscoMldSnoopingMIBStatsDetailedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 721, 2, 2, 5)).setObjects(("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGrpSpecificQueriesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGrpSpecificQueriesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGrpSpecificQueriesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGSSpecificQueriesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGSSpecificQueriesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfGSSpecificQueriesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfV2ReportReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfV2ReportReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfV2ReportGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfV3ReportReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfV3ReportReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfV3ReportGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfRxPcktsFlooded"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfRxPcktsFwdToMembers"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfRxPcktsFwdToMrouters"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfRxPcktsConsumed"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysTrfRxOther"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGeneralQueriesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGeneralQueriesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGeneralQueriesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGrpSpecificQueriesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGrpSpecificQueriesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGrpSpecificQueriesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGSSpecificQueriesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGSSpecificQueriesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGSSpecificQueriesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGlobalLeavesReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGlobalLeavesReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfGlobalLeavesGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfPIMHellosReceived"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfPIMHellosReinjected"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfPIMHellosGenerated"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfRxPcktsFlooded"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfRxPcktsFwdToMembers"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfRxPcktsFwdToMrouters"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfRxPcktsConsumed"), ("CISCO-MLD-SNOOPING-MIB", "cmsStsPortTrfRxOther"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGeneralQueries"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGeneralQueriesWhenDisabled"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGeneralQueriesAsQuerier"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGeneralQueriesAsNonQuerier"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGeneralQueriesAsWinner"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGeneralQueriesAsLoser"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGlobalLeaves"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGlobalLeavesWhenDisabled"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGlobalLeavsAsNonQuerier"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxGlobalLeavesIgnored"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxPimEnabledNotifications"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxPimDisabledNotifications"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierRxLocalQuerySolicitations"), ("CISCO-MLD-SNOOPING-MIB", "cmsSysIntQuerierTxGeneralQueries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMldSnoopingMIBStatsDetailedObjectGroup = ciscoMldSnoopingMIBStatsDetailedObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMldSnoopingMIBStatsDetailedObjectGroup.setDescription('A collections of objects representing the detailed statistical elements of CISCO-MLD-SNOOPING-MIB.')
mibBuilder.exportSymbols("CISCO-MLD-SNOOPING-MIB", cmsSysRxV3RepIsExclude=cmsSysRxV3RepIsExclude, cmsProfileLastMemberQueryInterval=cmsProfileLastMemberQueryInterval, cmsStsPortTrfGrpSpecificQueriesReceived=cmsStsPortTrfGrpSpecificQueriesReceived, cmsProfileIntQuerierTCNQueryInterval=cmsProfileIntQuerierTCNQueryInterval, cmsStsPortRxV3RepIsExclude=cmsStsPortRxV3RepIsExclude, cmsProfileIntQuerierVersion=cmsProfileIntQuerierVersion, cmsStsPortRxV3RepChangeToInclude=cmsStsPortRxV3RepChangeToInclude, cmsSysTrfGlobalLeavesReinjected=cmsSysTrfGlobalLeavesReinjected, cmsProfileLastMemberQueryCount=cmsProfileLastMemberQueryCount, cmsProfileIntQuerierTCNQueryCount=cmsProfileIntQuerierTCNQueryCount, cmsSysTrfV3ReportReceived=cmsSysTrfV3ReportReceived, cmsSysTrfGSSpecificQueriesReinjected=cmsSysTrfGSSpecificQueriesReinjected, cmsProfileImmediateLeave=cmsProfileImmediateLeave, cmsPortStats=cmsPortStats, cmsQuerierRobustness=cmsQuerierRobustness, cmsMcastInfoGroupAddr=cmsMcastInfoGroupAddr, cmsQuerierMaxRespTime=cmsQuerierMaxRespTime, PYSNMP_MODULE_ID=ciscoMldSnoopingMIB, cmsStsPortRxV3RepIsInclude=cmsStsPortRxV3RepIsInclude, cmsConfigPortStorageType=cmsConfigPortStorageType, cmsStsPortTrfV2ReportReinjected=cmsStsPortTrfV2ReportReinjected, cmsStsPortTrfGlobalLeavesReceived=cmsStsPortTrfGlobalLeavesReceived, cmsStsPortTrfPIMHellosGenerated=cmsStsPortTrfPIMHellosGenerated, cmsSysTrfPIMHellosReceived=cmsSysTrfPIMHellosReceived, cmsSysIntQuerierRxLocalQuerySolicitations=cmsSysIntQuerierRxLocalQuerySolicitations, cmsProfileIPAddress=cmsProfileIPAddress, cmsStsPortRxV3RepAllowNewSrc=cmsStsPortRxV3RepAllowNewSrc, CiscoMldSnoopingVersion=CiscoMldSnoopingVersion, cmsSysTrfRxErrors=cmsSysTrfRxErrors, CiscoMldPortIdentifier=CiscoMldPortIdentifier, cmsSysIntQuerierTxGeneralQueries=cmsSysIntQuerierTxGeneralQueries, cmsSysTrfPIMHellosGenerated=cmsSysTrfPIMHellosGenerated, cmsStsPortTrfTxErrors=cmsStsPortTrfTxErrors, cmsMRouterPortInfoEntry=cmsMRouterPortInfoEntry, cmsConfiguration=cmsConfiguration, cmsSysTrfGlobalLeavesReceived=cmsSysTrfGlobalLeavesReceived, cmsStsPortTrfGeneralQueriesReinjected=cmsStsPortTrfGeneralQueriesReinjected, cmsStsPortTrfRxErrors=cmsStsPortTrfRxErrors, cmsProfileRobustnessVariable=cmsProfileRobustnessVariable, cmsSysIntQuerierRxGlobalLeavsAsNonQuerier=cmsSysIntQuerierRxGlobalLeavsAsNonQuerier, cmsSysTrfV2ReportReinjected=cmsSysTrfV2ReportReinjected, cmsMRouterType=cmsMRouterType, cmsStsPortRxV3RepBlockOldSrc=cmsStsPortRxV3RepBlockOldSrc, CiscoMldPortPseudowire=CiscoMldPortPseudowire, cmsStsPortGrps=cmsStsPortGrps, cmsSysTrfV3ReportGenerated=cmsSysTrfV3ReportGenerated, cmsStsPortTrfV3ReportGenerated=cmsStsPortTrfV3ReportGenerated, cmsStsPortTrfGeneralQueriesReceived=cmsStsPortTrfGeneralQueriesReceived, cmsSysRxV3RepBlockOldSrc=cmsSysRxV3RepBlockOldSrc, cmsStsPortTrfV2ReportReceived=cmsStsPortTrfV2ReportReceived, cmsStatsPortTrfTable=cmsStatsPortTrfTable, cmsMcastInfoEntry=cmsMcastInfoEntry, CiscoMldPortType=CiscoMldPortType, ciscoMldSnoopingMIBInfoMainObjectGroup=ciscoMldSnoopingMIBInfoMainObjectGroup, cmsSysIntQuerierRxPimEnabledNotifications=cmsSysIntQuerierRxPimEnabledNotifications, cmsSysTrfRxPcktsFlooded=cmsSysTrfRxPcktsFlooded, cmsStsPortTrfPIMHellosReinjected=cmsStsPortTrfPIMHellosReinjected, cmsStsPortTrfRxOther=cmsStsPortTrfRxOther, cmsSysTrfRxOther=cmsSysTrfRxOther, cmsSysIntQuerierRxGlobalLeavesIgnored=cmsSysIntQuerierRxGlobalLeavesIgnored, cmsSysTrfGeneralQueriesReceived=cmsSysTrfGeneralQueriesReceived, cmsSystemInfo=cmsSystemInfo, cmsSystemStats=cmsSystemStats, cmsSysTrfGrpSpecificQueriesReceived=cmsSysTrfGrpSpecificQueriesReceived, ciscoMldSnoopingMIBConform=ciscoMldSnoopingMIBConform, cmsConfigPortProfileName=cmsConfigPortProfileName, cmsSysTrfGSSpecificQueriesGenerated=cmsSysTrfGSSpecificQueriesGenerated, cmsSysTrfPIMHellosReinjected=cmsSysTrfPIMHellosReinjected, cmsSysTrfGrpSpecificQueriesReinjected=cmsSysTrfGrpSpecificQueriesReinjected, cmsMcastInfoGroupAddrType=cmsMcastInfoGroupAddrType, cmsProfileIntQuerierQueryInterval=cmsProfileIntQuerierQueryInterval, cmsStsPortTrfGrpSpecificQueriesReinjected=cmsStsPortTrfGrpSpecificQueriesReinjected, cmsProfileRouterAlertCheck=cmsProfileRouterAlertCheck, cmsProfileTTLCheck=cmsProfileTTLCheck, ciscoMldSnoopingMIBConfigMainObjectGroup=ciscoMldSnoopingMIBConfigMainObjectGroup, cmsSysIntQuerierRxPimDisabledNotifications=cmsSysIntQuerierRxPimDisabledNotifications, ciscoMldSnoopingMIBStatsMainObjectGroup=ciscoMldSnoopingMIBStatsMainObjectGroup, cmsSysIntQuerierRxGeneralQueriesAsWinner=cmsSysIntQuerierRxGeneralQueriesAsWinner, cmsStsPortSGs=cmsStsPortSGs, cmsProfileStorageType=cmsProfileStorageType, cmsSysTrfGSSpecificQueriesReceived=cmsSysTrfGSSpecificQueriesReceived, cmsStsPortTrfGSSpecificQueriesReceived=cmsStsPortTrfGSSpecificQueriesReceived, cmsSysTrfRxPcktsConsumed=cmsSysTrfRxPcktsConsumed, cmsStsPortRxV3RepChangeToExclude=cmsStsPortRxV3RepChangeToExclude, cmsMcastInfoTable=cmsMcastInfoTable, cmsStsPortTrfGSSpecificQueriesReinjected=cmsStsPortTrfGSSpecificQueriesReinjected, cmsProfileIntQuerierMaxRespTime=cmsProfileIntQuerierMaxRespTime, cmsStsPortTrfGSSpecificQueriesGenerated=cmsStsPortTrfGSSpecificQueriesGenerated, cmsQuerierTimeSinceLastGQuery=cmsQuerierTimeSinceLastGQuery, cmsStsPortTrfV3ReportReceived=cmsStsPortTrfV3ReportReceived, cmsStsPortTrfRxPcktsConsumed=cmsStsPortTrfRxPcktsConsumed, cmsSysIntQuerierRxGlobalLeaves=cmsSysIntQuerierRxGlobalLeaves, cmsStsPortTrfV3ReportReinjected=cmsStsPortTrfV3ReportReinjected, cmsSysRxV3RepAllowNewSrc=cmsSysRxV3RepAllowNewSrc, cmsStatsPortTrfEntry=cmsStatsPortTrfEntry, cmsProfileIntQuerierExpiry=cmsProfileIntQuerierExpiry, cmsProfileFloodQueryCount=cmsProfileFloodQueryCount, cmsMcastInfoFlag=cmsMcastInfoFlag, cmsQuerierQueryInterval=cmsQuerierQueryInterval, cmsOperInfo=cmsOperInfo, cmsStsPortTrfGlobalLeavesGenerated=cmsStsPortTrfGlobalLeavesGenerated, cmsStsPortTrfRxPcktsFlooded=cmsStsPortTrfRxPcktsFlooded, cmsProfileUnsolicitedReportTimer=cmsProfileUnsolicitedReportTimer, cmsProfileRouterGuard=cmsProfileRouterGuard, cmsSysRxV3RepIsInclude=cmsSysRxV3RepIsInclude, cmsSysTrfV2ReportGenerated=cmsSysTrfV2ReportGenerated, cmsConfigPortStatus=cmsConfigPortStatus, cmsQuerierPortId=cmsQuerierPortId, cmsMRouterPortInfoTable=cmsMRouterPortInfoTable, cmsPortType=cmsPortType, ciscoMldSnoopingMIBConfigDetailedObjectGroup=ciscoMldSnoopingMIBConfigDetailedObjectGroup, cmsSysTrfRxPcktsFwdToMembers=cmsSysTrfRxPcktsFwdToMembers, cmsMcastInfoGroupFilter=cmsMcastInfoGroupFilter, cmsQuerierPortType=cmsQuerierPortType, ciscoMldSnoopingMIBCompliance=ciscoMldSnoopingMIBCompliance, cmsProfileIPAddrType=cmsProfileIPAddrType, cmsQuerierVersion=cmsQuerierVersion, cmsSysTrfV3ReportReinjected=cmsSysTrfV3ReportReinjected, cmsSysRxV3RepChangeToInclude=cmsSysRxV3RepChangeToInclude, cmsSysTrfTxErrors=cmsSysTrfTxErrors, cmsSysTrfV2ReportReceived=cmsSysTrfV2ReportReceived, cmsSysTrfGeneralQueriesReinjected=cmsSysTrfGeneralQueriesReinjected, cmsPortId=cmsPortId, cmsSysIntQuerierRxGeneralQueriesAsQuerier=cmsSysIntQuerierRxGeneralQueriesAsQuerier, cmsSysTrfGrpSpecificQueriesGenerated=cmsSysTrfGrpSpecificQueriesGenerated, cmsProfileInternalQuerier=cmsProfileInternalQuerier, cmsStsPortTrfRxPcktsFwdToMembers=cmsStsPortTrfRxPcktsFwdToMembers, cmsStsPortTrfRxPcktsFwdToMrouters=cmsStsPortTrfRxPcktsFwdToMrouters, ciscoMldSnoopingMIBNotifs=ciscoMldSnoopingMIBNotifs, cmsSysIntQuerierRxGlobalLeavesWhenDisabled=cmsSysIntQuerierRxGlobalLeavesWhenDisabled, cmsProfileName=cmsProfileName, cmsSysIntQuerierRxGeneralQueries=cmsSysIntQuerierRxGeneralQueries, cmsSysIntQuerierRxGeneralQueriesAsLoser=cmsSysIntQuerierRxGeneralQueriesAsLoser, cmsStsPortTrfV2ReportGenerated=cmsStsPortTrfV2ReportGenerated, cmsProfileTable=cmsProfileTable, cmsConfigPortTable=cmsConfigPortTable, cmsSysIntQuerierRxGeneralQueriesWhenDisabled=cmsSysIntQuerierRxGeneralQueriesWhenDisabled, cmsStsPortTrfPIMHellosReceived=cmsStsPortTrfPIMHellosReceived, cmsSysRxV3RepChangeToExclude=cmsSysRxV3RepChangeToExclude, cmsProfileSuppressReport=cmsProfileSuppressReport, cmsConfigSystemProfileName=cmsConfigSystemProfileName, cmsProfileStatus=cmsProfileStatus, ciscoMldSnoopingMIBObjects=ciscoMldSnoopingMIBObjects, cmsSysIntQuerierRxGeneralQueriesAsNonQuerier=cmsSysIntQuerierRxGeneralQueriesAsNonQuerier, cmsStsPortTrfGeneralQueriesGenerated=cmsStsPortTrfGeneralQueriesGenerated, cmsStsPortTrfGlobalLeavesReinjected=cmsStsPortTrfGlobalLeavesReinjected, cmsProfileSnoopMinVersion=cmsProfileSnoopMinVersion, cmsQuerierIPAddrType=cmsQuerierIPAddrType, cmsProfileQuerySolicit=cmsProfileQuerySolicit, cmsQuerierIPAddr=cmsQuerierIPAddr, cmsMcastInfoSourceAddr=cmsMcastInfoSourceAddr, cmsSysTrfGeneralQueriesGenerated=cmsSysTrfGeneralQueriesGenerated, cmsSysTrfGlobalLeavesGenerated=cmsSysTrfGlobalLeavesGenerated, cmsStsPortTrfGrpSpecificQueriesGenerated=cmsStsPortTrfGrpSpecificQueriesGenerated, CiscoMldPortInterface=CiscoMldPortInterface, ciscoMldSnoopingMIB=ciscoMldSnoopingMIB, cmsProfileStaticMRouter=cmsProfileStaticMRouter, cmsMcastInfoExpiry=cmsMcastInfoExpiry, ciscoMldSnoopingMIBCompliances=ciscoMldSnoopingMIBCompliances, ciscoMldSnoopingMIBGroups=ciscoMldSnoopingMIBGroups, cmsConfigPortEntry=cmsConfigPortEntry, cmsProfileEntry=cmsProfileEntry, cmsSysTrfRxPcktsFwdToMrouters=cmsSysTrfRxPcktsFwdToMrouters, ciscoMldSnoopingMIBStatsDetailedObjectGroup=ciscoMldSnoopingMIBStatsDetailedObjectGroup)
