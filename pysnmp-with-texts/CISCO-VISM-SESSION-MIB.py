#
# PySNMP MIB module CISCO-VISM-SESSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VISM-SESSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, IpAddress, NotificationType, Counter32, Unsigned32, Counter64, MibIdentifier, Bits, TimeTicks, Gauge32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "IpAddress", "NotificationType", "Counter32", "Unsigned32", "Counter64", "MibIdentifier", "Bits", "TimeTicks", "Gauge32", "ModuleIdentity", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoVismSessionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 95))
ciscoVismSessionMIB.setRevisions(('2004-02-26 00:00', '2003-07-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVismSessionMIB.setRevisionsDescriptions(('Update descriptions in the MIB. ', 'Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified. ',))
if mibBuilder.loadTexts: ciscoVismSessionMIB.setLastUpdated('200402260000Z')
if mibBuilder.loadTexts: ciscoVismSessionMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVismSessionMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoVismSessionMIB.setDescription('The MIB module contain the RUDP session parameter. The relationship between session set, session group and RUDP session is that: For fault tolerant case each session set contains two groups. Each group connects to one MGC(Media Gateway Controller), One active, one standby. If one MGC fails, the other MGC will inform the session mamager to switch over. If the set configuration is non-fault tolerant, each set contains one group. Each session group contains upto four RUDP sessions. Session set is explicitly created first, then session group can be created in this set. After session group is created, session can be created in the group. For deletion, session has to be deleted first. However, the last session can not be deleted if there is still LAPD(Link Access Procedure on the D-channel) entry. A group can only be deleted if there is no more session in it. Session set will be deleted when the last group in the set has been deleted. ')
vismSessionGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11))
vismSessionSetTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1), )
if mibBuilder.loadTexts: vismSessionSetTable.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetTable.setDescription('The vismSessionSetTable has entries for a collection of session group. Each entry provides connectivity to a different MGC. ')
vismSessionSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1), ).setIndexNames((0, "CISCO-VISM-SESSION-MIB", "vismSessionSetNum"))
if mibBuilder.loadTexts: vismSessionSetEntry.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetEntry.setDescription('An entry for vismSessionSetTable.')
vismSessionSetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionSetNum.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetNum.setDescription('An arbitrary index that uniquely identifies a session set. ')
vismSessionSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSessionSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetRowStatus.setDescription("This variable is used to allow add or delete a session set. 'active': This state indicates that the session set is available for use by the managed device; 'createAndGo': Use this to add an entry in this table. `destroy': the status supplied by a management station wishing to delete all of the instances associated with this session group. Deletion of a set is not allowed if there is still group in this set. ")
vismSessionSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("oos", 2), ("activeIs", 3), ("standbyIs", 4), ("fullIs", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionSetState.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetState.setDescription("When an entry in vismSessionSetTable is created and no group has been added to this set yet or group has been created in this set but no session has been added yet the set state is 'idle'. After a group has been created in this set and one session has been added to the group the set state becomes 'oos',i.e, out of service. After successfully open socket and the session has sent START message to MGC, the state of the set will be changed based on whether this set is fault tolerant(FT) or none fault tolerant(NFT) specify in vismSessionSetFaultTolerant. In NFT case the set state becomes 'activeIs'. In FT case, if one session from a group received an active message from MGC and no standby message received from a session in the other group, the state of the set will change to 'activeIs'. On the other hand, if at least one session from a group received standby message from MGC and no other session from the other group received active message then the set state is transferred to 'standbyIs'. The set becomes 'fullIs' when at least one session from one group receives active message and at least one session from the other group receives standby message. 'unknown' is a state other than the above states. ")
vismSessionSetTotalGrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionSetTotalGrps.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetTotalGrps.setDescription('The current number of session groups in the session set. ')
vismSessionSetActiveGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionSetActiveGrp.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetActiveGrp.setDescription('This is the current group number in active state.')
vismSessionSetSwitchFails = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionSetSwitchFails.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetSwitchFails.setDescription("The accumulated number of failed attempts to 'switch' between session groups in this session set. ")
vismSessionSetSwitchSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionSetSwitchSuccesses.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetSwitchSuccesses.setDescription("The accumulated number of successful attempts to 'switch' between session groups in this session set. ")
vismSessionSetFaultTolerant = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSessionSetFaultTolerant.setStatus('current')
if mibBuilder.loadTexts: vismSessionSetFaultTolerant.setDescription("This object indicates whether the set configuration is fault tolerant, 'true(1)' indicate fault tolerant and 'false(2)' non fault tolerant. If the set is fault tolerant then there can be two groups in this set. If the set is non fault tolerant then only one group can be added in this set. Once the entry is created this object cannot be modified. ")
vismSessionGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2), )
if mibBuilder.loadTexts: vismSessionGrpTable.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpTable.setDescription('This table has entries for a collection of sessions. ')
vismSessionGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1), ).setIndexNames((0, "CISCO-VISM-SESSION-MIB", "vismSessionGrpNum"))
if mibBuilder.loadTexts: vismSessionGrpEntry.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpEntry.setDescription('An entry for vismSessionGrpTable.')
vismSessionGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionGrpNum.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpNum.setDescription('An arbitrary index that uniquely identifies a session group. ')
vismSessionGrpSetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSessionGrpSetNum.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpSetNum.setDescription('This object identify session set number to which this session Group belongs. Once the entry is created this object cannot be modified. The same session set can only be assigned to two different session groups. ')
vismSessionGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSessionGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpRowStatus.setDescription("This variable allows to add or delete an entry in this table. 'createAndGo': Use this to add an entry in this table. vismSessionGrpSetNum and vismSessionGrpMgcName are required to add an entry. Before adding the session group, The session set should already be created. 'active': This state indicates that the session group is available for use by the managed device; `destroy': the status supplied by a management station wishing to delete all of the instances associated with this session group. ")
vismSessionGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("oos", 2), ("is", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionGrpState.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpState.setDescription("This object indicates the operational state of the session group. The possible operational states are as follows: 'idle': This is the initial state. 'oos' : Out of service state. when a session group has been created the state of the session group becomes 'oos' or when all sessions belonging to this group are deleted, session group state becomes 'oos' 'is': In service state. After at least one session has been added to the group, socket has been successfully set up and the session has sent a START message to MGC the group state changes to 'is'. 'unknown': This is the state other than the above states. ")
vismSessionGrpCurrSession = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionGrpCurrSession.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpCurrSession.setDescription('This object indicates the current session that is open to communication with MGC. There is only one active session per session group. ')
vismSessionGrpTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionGrpTotalSessions.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpTotalSessions.setDescription('The current number of sessions that are configured in the session group. ')
vismSessionGrpSwitchFails = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionGrpSwitchFails.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpSwitchFails.setDescription("The accumulated number of failed attempts to 'switch' between sessions in this group. ")
vismSessionGrpSwitchSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismSessionGrpSwitchSuccesses.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpSwitchSuccesses.setDescription("The accumulated number of successful attempts to 'switch' between sessions in this group. ")
vismSessionGrpMgcName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismSessionGrpMgcName.setStatus('current')
if mibBuilder.loadTexts: vismSessionGrpMgcName.setDescription('This denotes the name of the MGC. This corresponds to a domain name under which the MGC could also be registered in a DNS(Domain Named System). Once this entry becomes active, this value may not be modified. ')
vismRudpSessionCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3), )
if mibBuilder.loadTexts: vismRudpSessionCnfTable.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionCnfTable.setDescription('This table has entries of sessions, which are the connection between MGC and a gateway. A session is identified by a local IP address, port, remote IP address and remote port. The combination of these four numbers has to be unique to identify one session. This table also maintains the configuration for every session. ')
vismRudpSessionCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1), ).setIndexNames((0, "CISCO-VISM-SESSION-MIB", "vismRudpSessionNum"))
if mibBuilder.loadTexts: vismRudpSessionCnfEntry.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionCnfEntry.setDescription('An entry for vismSessionCnfEntry.')
vismRudpSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionNum.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionNum.setDescription('An arbitrary index that uniquely identifies a session. ')
vismRudpSessionGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionGrpNum.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionGrpNum.setDescription('This indicates the session group that this session belongs to. Once the entry is created, it cannot be modified. ')
vismRudpSessionCnfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionCnfRowStatus.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionCnfRowStatus.setDescription("This variable allows the user to add or delete the entry for this table. 'createAndGo': Use this to add a RUDP session in this table. RUDP vismRudpSessionNum, vismRudpSessionGrpNum, vismRudpSessionPriority, vismRudpSessionLocalPort and vismRudpSessionRmtPort are required while creating an entry for PRI(Primary Rate Interface) Backhaul. On the other hand RUDP vismRudpSessionNum, vismRudpSessionLocalPort, vismRudpSessionRmtPort, remote IP and RUDP session type are required for LAPD Trunking. 'active': This state indicates that the session is available for use by the managed device; 'destroy': Use this to delete an RUDP session from this table. Only RUDP session number is needed for deleting. The last session shall not be deleted if there are still active LAPD entries. ")
vismRudpSessionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionPriority.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionPriority.setDescription('This object specifies the RUDP session priority for this session. Once a session has been added it can not be modified. When a session fails it indicates which session the session manager should try to bring active. A lower number means higher priority. ')
vismRudpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oos", 1), ("is", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionState.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionState.setDescription("This object indicates the current session operational state. The possible operational states are as follows: 'oos': Out of service state. This is the initial state when a RUDP session is created. 'is' : In service state. When a channel has been created between gateway and MGC and gateway has sent Start message the state of the session changes to 'is'. If the communication is lost between GW (gateway) and the MGC, the state of this session becomes 'oos'. 'unknown': This is the state other than the above states. ")
vismRudpSessionCurrSession = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionCurrSession.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionCurrSession.setDescription("This object indicates which session has got active message from MGC. The session manager will always try to bring the first added session to active. If the current active session fails the state of this session is changed to 'oos' through vismRudpSessionState and the session manager will try to bring the 'primary-is' session with highest priority identify by the object vismRudpSessionPriority among the rest of sessions in this group to active. ")
vismRudpSessionLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionLocalIp.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionLocalIp.setDescription('The IP address of XGCP gateway.')
vismRudpSessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1124, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionLocalPort.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionLocalPort.setDescription('The port number of XGCP gateway for this session. It can be modified after creation. This port number should be unique across other sessions and XGCP/SRCP(Simple Resource Coordination Protocol). ')
vismRudpSessionRmtIp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRmtIp.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRmtIp.setDescription('This is the IP address of the MGC. It is resolved by using vismSessionGrpMgcName in vismSessionGrpTable. ')
vismRudpSessionRmtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1124, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionRmtPort.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRmtPort.setDescription('The port number of MGC for this session. It can be modified after creation. This port number should be unique across other sessions and XGCP/SRCP. ')
vismRudpSessionMaxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionMaxWindow.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionMaxWindow.setDescription('This object is the maximum number of segments that should be sent without getting an acknowledgment, i.e. the maximum size of the receive window in segments. This is used for flow control. ')
vismRudpSessionSyncAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionSyncAttempts.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionSyncAttempts.setDescription('Maximum number of attempts to synchronize with other side (MGC). This object can be modified after a session is created. ')
vismRudpSessionMaxSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 65535)).clone(384)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionMaxSegSize.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionMaxSegSize.setDescription('The maximum number of octets that can be received by the peer sending the SYN segment. ')
vismRudpSessionMaxAutoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionMaxAutoReset.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionMaxAutoReset.setDescription('The maximum number of consecutive auto reset that will be performed before a connection is reset. A value 0 indicates that an auto reset will not be attempted, the connection will be reset immediately if an auto reset condition occurs. ')
vismRudpSessionRetransTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535)).clone(600)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionRetransTmout.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRetransTmout.setDescription('The timeout value for retransmission of unacknowledged packets. This is a negotiable parameter, MGC and GW must agree on the same value for this parameter. ')
vismRudpSessionMaxRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionMaxRetrans.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionMaxRetrans.setDescription('The maximum number of times consecutive retransmission will be attempted before the connection is considered broken. A value 0 indicates retransmission should be attempted forever. This is a negotiable parameter, both MGC and GW must agree on the value for this parameter. ')
vismRudpSessionMaxCumAck = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionMaxCumAck.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionMaxCumAck.setDescription('This object indicates the maximum number of acknowledgments that will be accumulated before sending an acknowledgment. A value of 0 indicates an acknowledgment segment will be sent immediately when a data, null, or reset segment is received. This is a negotiable parameter between MGC GW and . ')
vismRudpSessionCumAckTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionCumAckTmout.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionCumAckTmout.setDescription('This object is the timeout value for sending an acknowledgment segment. This value is specified in milliseconds. This parameter should be smaller than vismRudpSessionRetransTmout. This is a negotiable parameter betwen MGC and GW. ')
vismRudpSessionMaxOutOfSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionMaxOutOfSeq.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionMaxOutOfSeq.setDescription('This object is the maximum number of out of sequence packets that will be accumulated before an EACK(Extended acknowledgement) segment is sent. The EACK segment is used to acknowledge segments received out of sequence. A value of 0 indicates a EACK will be sent immediately if an out of order segment is received. This is a negotiable parameter between MGC and GW. ')
vismRudpSessionNullSegTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionNullSegTmout.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionNullSegTmout.setDescription('This object specifies the session idle timeout. When the session idle time reaches this idle timeout value, a null segment will be sent to MGC from this GW. segments. This is a negotiable parameter between MGC and GW. ')
vismRudpSessionTransStateTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionTransStateTmout.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionTransStateTmout.setDescription('This object indicates the number of milliseconds to wait for transfer state before an auto reset occurs.The value 0 indicates the connection will be auto-reset immediately and would not be used with redundant links. ')
vismRudpSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backhaul", 1), ("lapdTrunking", 2))).clone('backhaul')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionType.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionType.setDescription("This object indicates if the session is configured for Trunking or PRI Backhaul. By default the object is set to 'backhaul' and it needs to set to 'lapdTrunking' if LAPD Trunking needs to be done. ")
vismRudpSessionRmtGwIp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 3, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismRudpSessionRmtGwIp.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRmtGwIp.setDescription("This is the IP address of the remote GW. This will be used only for 'lapdTrunking' applications and the vismRudpSessionType must be set to LAPD Trunking. ")
vismRudpSessionStatTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4), )
if mibBuilder.loadTexts: vismRudpSessionStatTable.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionStatTable.setDescription('This table keeps track of state and session-specific counts. It is per session based.')
vismRudpSessionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1), ).setIndexNames((0, "CISCO-VISM-SESSION-MIB", "vismRudpSessionStatNum"))
if mibBuilder.loadTexts: vismRudpSessionStatEntry.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionStatEntry.setDescription('An entry for vismSessionStatEntry.')
vismRudpSessionStatNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionStatNum.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionStatNum.setDescription('This is the index of vismRudpSessionStatEntry table. It is the same as the index of vismRudpSessionCnfEntry table. ')
vismRudpSessionAutoResets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionAutoResets.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionAutoResets.setDescription('The accumulated number of soft reset for the session initiated by the XGCP gateway. ')
vismRudpSessionRcvdAutoResets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRcvdAutoResets.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRcvdAutoResets.setDescription('The accumulated number of auto resets initiated by MGC and received by GW. ')
vismRudpSessionRcvdInSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRcvdInSeqs.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRcvdInSeqs.setDescription('The accumulated number of packets received in sequence for the session. ')
vismRudpSessionRcvdOutSeqs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRcvdOutSeqs.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRcvdOutSeqs.setDescription('The accumulated number of packets received out of sequence. ')
vismRudpSessionSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionSentPackets.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionSentPackets.setDescription('This is the number of packets sent by GW, including SYN message.')
vismRudpSessionRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRcvdPackets.setDescription('The accumulated number of packets received by GW including active message. ')
vismRudpSessionSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionSentBytes.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionSentBytes.setDescription('This object indicates the number of bytes sent to MGC. ')
vismRudpSessionRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRcvdBytes.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRcvdBytes.setDescription('This object keeps track of the number of bytes received from MGC. ')
vismRudpSessionDataSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionDataSentPkts.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionDataSentPkts.setDescription('This object is the number of data packets sent to MGC. ')
vismRudpSessionDataRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionDataRcvdPkts.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionDataRcvdPkts.setDescription('This object is the number of data packets received from MGC. ')
vismRudpSessionDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionDiscardPkts.setDescription('This is the number of packets discarded by GW. ')
vismRudpSessionRetransPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 11, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismRudpSessionRetransPkts.setStatus('current')
if mibBuilder.loadTexts: vismRudpSessionRetransPkts.setDescription('This is the number of packets retransmitted by GW. ')
ciscoVismSessionMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 95, 2))
ciscoVismSessionMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 1))
ciscoVismSessionMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 2))
ciscoVismSessionCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 2, 1)).setObjects(("CISCO-VISM-SESSION-MIB", "ciscoVismSessionSetGrp"), ("CISCO-VISM-SESSION-MIB", "ciscoVismSessionGrp"), ("CISCO-VISM-SESSION-MIB", "ciscoVismRudpSessionGrp"), ("CISCO-VISM-SESSION-MIB", "ciscoVismRudpSessionStatGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSessionCompliance = ciscoVismSessionCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSessionCompliance.setDescription('The compliance statement for objects related to CISCO-VISM-SESSION-MIB. ')
ciscoVismSessionSetGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 1, 1)).setObjects(("CISCO-VISM-SESSION-MIB", "vismSessionSetNum"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetRowStatus"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetState"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetTotalGrps"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetActiveGrp"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetSwitchFails"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetSwitchSuccesses"), ("CISCO-VISM-SESSION-MIB", "vismSessionSetFaultTolerant"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSessionSetGrp = ciscoVismSessionSetGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSessionSetGrp.setDescription('A collection of objects providing session set configuration. ')
ciscoVismSessionGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 1, 2)).setObjects(("CISCO-VISM-SESSION-MIB", "vismSessionGrpNum"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpSetNum"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpRowStatus"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpState"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpCurrSession"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpTotalSessions"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpSwitchFails"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpSwitchSuccesses"), ("CISCO-VISM-SESSION-MIB", "vismSessionGrpMgcName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismSessionGrp = ciscoVismSessionGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoVismSessionGrp.setDescription('A collection of objects providing session group configuration. ')
ciscoVismRudpSessionGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 1, 3)).setObjects(("CISCO-VISM-SESSION-MIB", "vismRudpSessionNum"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionGrpNum"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionCnfRowStatus"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionPriority"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionState"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionCurrSession"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionLocalIp"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionLocalPort"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRmtIp"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRmtPort"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionMaxWindow"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionSyncAttempts"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionMaxSegSize"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionMaxAutoReset"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRetransTmout"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionMaxRetrans"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionMaxCumAck"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionCumAckTmout"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionMaxOutOfSeq"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionNullSegTmout"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionTransStateTmout"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionType"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRmtGwIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismRudpSessionGrp = ciscoVismRudpSessionGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoVismRudpSessionGrp.setDescription('A collection of objects providing session configuration. ')
ciscoVismRudpSessionStatGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 95, 2, 1, 4)).setObjects(("CISCO-VISM-SESSION-MIB", "vismRudpSessionStatNum"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionAutoResets"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRcvdAutoResets"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRcvdInSeqs"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRcvdOutSeqs"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionSentPackets"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRcvdPackets"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionSentBytes"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRcvdBytes"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionDataSentPkts"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionDataRcvdPkts"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionDiscardPkts"), ("CISCO-VISM-SESSION-MIB", "vismRudpSessionRetransPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVismRudpSessionStatGrp = ciscoVismRudpSessionStatGrp.setStatus('current')
if mibBuilder.loadTexts: ciscoVismRudpSessionStatGrp.setDescription('A collection of objects providing session relayed statistics information. ')
mibBuilder.exportSymbols("CISCO-VISM-SESSION-MIB", vismSessionGrpCurrSession=vismSessionGrpCurrSession, vismRudpSessionMaxSegSize=vismRudpSessionMaxSegSize, vismSessionSetNum=vismSessionSetNum, ciscoVismSessionSetGrp=ciscoVismSessionSetGrp, vismRudpSessionPriority=vismRudpSessionPriority, ciscoVismSessionMIBCompliances=ciscoVismSessionMIBCompliances, vismRudpSessionStatNum=vismRudpSessionStatNum, ciscoVismSessionMIBConformance=ciscoVismSessionMIBConformance, ciscoVismSessionGrp=ciscoVismSessionGrp, vismSessionSetTotalGrps=vismSessionSetTotalGrps, ciscoVismRudpSessionGrp=ciscoVismRudpSessionGrp, vismSessionGrpSwitchSuccesses=vismSessionGrpSwitchSuccesses, vismRudpSessionCurrSession=vismRudpSessionCurrSession, vismRudpSessionTransStateTmout=vismRudpSessionTransStateTmout, vismRudpSessionRmtGwIp=vismRudpSessionRmtGwIp, vismRudpSessionRetransPkts=vismRudpSessionRetransPkts, ciscoVismSessionCompliance=ciscoVismSessionCompliance, vismSessionGrpEntry=vismSessionGrpEntry, vismRudpSessionStatEntry=vismRudpSessionStatEntry, vismSessionSetRowStatus=vismSessionSetRowStatus, ciscoVismRudpSessionStatGrp=ciscoVismRudpSessionStatGrp, vismRudpSessionMaxAutoReset=vismRudpSessionMaxAutoReset, vismSessionGrpSetNum=vismSessionGrpSetNum, vismRudpSessionLocalPort=vismRudpSessionLocalPort, vismSessionGrpNum=vismSessionGrpNum, vismRudpSessionRcvdOutSeqs=vismRudpSessionRcvdOutSeqs, vismSessionGrpState=vismSessionGrpState, vismSessionGrpMgcName=vismSessionGrpMgcName, vismRudpSessionGrpNum=vismRudpSessionGrpNum, vismSessionGrp=vismSessionGrp, vismRudpSessionType=vismRudpSessionType, PYSNMP_MODULE_ID=ciscoVismSessionMIB, vismSessionGrpTable=vismSessionGrpTable, vismRudpSessionMaxRetrans=vismRudpSessionMaxRetrans, vismRudpSessionRcvdPackets=vismRudpSessionRcvdPackets, vismSessionSetActiveGrp=vismSessionSetActiveGrp, ciscoVismSessionMIB=ciscoVismSessionMIB, vismRudpSessionRmtPort=vismRudpSessionRmtPort, vismRudpSessionMaxOutOfSeq=vismRudpSessionMaxOutOfSeq, vismRudpSessionMaxCumAck=vismRudpSessionMaxCumAck, vismSessionGrpTotalSessions=vismSessionGrpTotalSessions, vismRudpSessionDiscardPkts=vismRudpSessionDiscardPkts, vismRudpSessionNum=vismRudpSessionNum, vismRudpSessionRcvdInSeqs=vismRudpSessionRcvdInSeqs, vismRudpSessionRetransTmout=vismRudpSessionRetransTmout, vismRudpSessionSentPackets=vismRudpSessionSentPackets, vismRudpSessionRcvdBytes=vismRudpSessionRcvdBytes, vismRudpSessionCnfEntry=vismRudpSessionCnfEntry, vismSessionSetEntry=vismSessionSetEntry, vismSessionSetSwitchFails=vismSessionSetSwitchFails, ciscoVismSessionMIBGroups=ciscoVismSessionMIBGroups, vismRudpSessionCnfTable=vismRudpSessionCnfTable, vismRudpSessionAutoResets=vismRudpSessionAutoResets, vismRudpSessionSyncAttempts=vismRudpSessionSyncAttempts, vismRudpSessionStatTable=vismRudpSessionStatTable, vismRudpSessionNullSegTmout=vismRudpSessionNullSegTmout, vismSessionSetState=vismSessionSetState, vismRudpSessionRcvdAutoResets=vismRudpSessionRcvdAutoResets, vismRudpSessionLocalIp=vismRudpSessionLocalIp, vismRudpSessionSentBytes=vismRudpSessionSentBytes, vismRudpSessionDataSentPkts=vismRudpSessionDataSentPkts, vismRudpSessionState=vismRudpSessionState, vismSessionGrpSwitchFails=vismSessionGrpSwitchFails, vismRudpSessionMaxWindow=vismRudpSessionMaxWindow, vismSessionSetTable=vismSessionSetTable, vismSessionSetSwitchSuccesses=vismSessionSetSwitchSuccesses, vismSessionGrpRowStatus=vismSessionGrpRowStatus, vismRudpSessionCnfRowStatus=vismRudpSessionCnfRowStatus, vismRudpSessionRmtIp=vismRudpSessionRmtIp, vismSessionSetFaultTolerant=vismSessionSetFaultTolerant, vismRudpSessionDataRcvdPkts=vismRudpSessionDataRcvdPkts, vismRudpSessionCumAckTmout=vismRudpSessionCumAckTmout)
