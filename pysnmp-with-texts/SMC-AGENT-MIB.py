#
# PySNMP MIB module SMC-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SMC-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, TimeTicks, enterprises, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, IpAddress, Gauge32, NotificationType, Integer32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "TimeTicks", "enterprises", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "IpAddress", "Gauge32", "NotificationType", "Integer32", "iso", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

smc = MibIdentifier((1, 3, 6, 1, 4, 1, 202))
smcDosWs = MibIdentifier((1, 3, 6, 1, 4, 1, 202, 2))
smcDosWsPcTyp = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcTyp.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcTyp.setDescription('Make and model of the PC. This may have to be entered in the configuration disk file. It may or may not be detectable via signature strings in the BIOS.')
smcDosWsPcProc = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcProc.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcProc.setDescription("This is a text string showing the processor type and indicating whether a math coprocessor exists, e.g. '80286 w/math coprocessor'.")
smcDosWsPcBios = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcBios.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcBios.setDescription("This is a text signature string identifying the PC bios, e.g. 'Phoenix 80386SX ROM BIOS PLUS Version 1.10'.")
smcDosWsPcRam = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcRam.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcRam.setDescription("This is a text string listing the PC's ram configuration, base, EMS, XMS, e.g. '640K base, 1024K EMS, 3072K XMS'.")
smcDosWsPcDisk = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcDisk.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcDisk.setDescription("This is a text string listing the PC's disk configuration, number and size of drives, e.g. '1.25M Fpy, 1.44M Fpy, 79M HD'.")
smcDosWsPcVideo = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcVideo.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcVideo.setDescription("This is a text string listing the PC's video interface type and monitor type, e.g. 'VGA Color'.")
smcDosWsPcIo = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcIo.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcIo.setDescription("This is a text string listing the parallel and serial ports installed on the PC, e.g. 'LPT1, COM1, COM2'.")
smcDosWsDosVer = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDosVer.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsDosVer.setDescription("This is a text string listing the version of DOS, e.g. 'DOS 3.3'.")
smcDosWsDrvId = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvId.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsDrvId.setDescription('This is the signature string from the network driver. It is similar to the string that is displayed by the NetWare server MONITOR nlm.')
smcDosWsNicBasIo = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNicBasIo.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsNicBasIo.setDescription('This is the I/O base address of the adapter card.')
smcDosWsNicIrq = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNicIrq.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsNicIrq.setDescription('This is the adapter IRQ number.')
smcDosWsNicRam = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNicRam.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsNicRam.setDescription('This is the adapter card packet ram address.')
smcDosWsNodId = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsNodId.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsNodId.setDescription('This is the adapter card 48 bit node ID.')
smcDosWsIpAdr = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsIpAdr.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsIpAdr.setDescription("This is the IP address of the PC. The agent takes this information from a configuration disk file. If the PC is also running a TCP/IP stack, it is up to the installer to specify in the agent configuration file the same IP address that the PC's TCP/IP stack has.")
smcDosWsComment = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsComment.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsComment.setDescription("This is a text string which is set from a configuration disk file that contains comments about the PC that the network manager feels is meaningful. For example 'Motherboard replaced 3 times in the last year'.")
smcDosWsPcDate = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcDate.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcDate.setDescription('This shows the current date set into the PC to alert the network manager of potential problems with software that decides configuration currency based on file dates and times.')
smcDosWsPcTime = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsPcTime.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsPcTime.setDescription('This shows the current time set into the PC to alert the network manager of potential problems with software that decides configuration currency based on file dates and times. Note that because of polling times this time may be erratic within a window of a few seconds.')
smcDosWsRst = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsRst.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsRst.setDescription('This variable always reports value = 1. Setting it to 2 results in an adapter reset, after which it will contain value = 1 again.')
smcDosWsProtoMix = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsProtoMix.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsProtoMix.setDescription('This text string reports the most frequent transport protocols and their approximate percentages of traffic load.')
smcDosWsRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsRcvPkts.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsRcvPkts.setDescription('Number of packets received by the workstation')
smcDosWsXmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsXmtPkts.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsXmtPkts.setDescription('Number of packets sent by the workstation')
smcDosWsDrvSpcTable = MibTable((1, 3, 6, 1, 4, 1, 202, 2, 22), )
if mibBuilder.loadTexts: smcDosWsDrvSpcTable.setStatus('mandatory')
smcDosWsDrvSpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 202, 2, 22, 1), ).setIndexNames((0, "SMC-AGENT-MIB", "smcDosWsDrvSpcId"))
if mibBuilder.loadTexts: smcDosWsDrvSpcEntry.setStatus('mandatory')
smcDosWsDrvSpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvSpcId.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsDrvSpcId.setDescription('Number of Driver Specific entry. 1 for first entry, 2 for second entry, etc.')
smcDosWsDrvSpcTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 22, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvSpcTxt.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsDrvSpcTxt.setDescription('Textual name of driver specific diagnostic counter')
smcDosWsDrvSpcCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsDrvSpcCnt.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsDrvSpcCnt.setDescription('Numeric value of driver specific diagnostic counter')
smcDosWsTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 202, 2, 23), )
if mibBuilder.loadTexts: smcDosWsTrapDestTable.setStatus('mandatory')
smcDosWsTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 202, 2, 23, 1), ).setIndexNames((0, "SMC-AGENT-MIB", "smcDosWsTrapId"))
if mibBuilder.loadTexts: smcDosWsTrapDestEntry.setStatus('mandatory')
smcDosWsTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsTrapId.setDescription('Number of Trap Destination entry. 1 for first entry, 2 for second entry, etc.')
smcDosWsTrapDstAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsTrapDstAdr.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsTrapDstAdr.setDescription('This is an IP address to which alerts (traps) should be sent when significant events occur.')
smcDosWsTrapDstPro = MibTableColumn((1, 3, 6, 1, 4, 1, 202, 2, 23, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smcDosWsTrapDstPro.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsTrapDstPro.setDescription('This is a code indicating the protocol to use when sending alerts. 1 means disabled, i.e. the corresponding smcDosWsTrapDstAdr variable is not really intended to receive traps. 2 means use TCP/IP protocol. 3,4,5,6 mean use IPX protocol using Ethernet II, RAW 802.2, 802.2 SNAP or 802.3 physical layer.')
smcDosWsApiTrap = MibScalar((1, 3, 6, 1, 4, 1, 202, 2, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smcDosWsApiTrap.setStatus('mandatory')
if mibBuilder.loadTexts: smcDosWsApiTrap.setDescription('This is a string set by external applications which use the PC Agent API to send an SNMP trap ')
mibBuilder.exportSymbols("SMC-AGENT-MIB", smcDosWsPcRam=smcDosWsPcRam, smcDosWsTrapDestTable=smcDosWsTrapDestTable, smcDosWsPcVideo=smcDosWsPcVideo, smcDosWsPcDate=smcDosWsPcDate, smcDosWsDrvSpcEntry=smcDosWsDrvSpcEntry, smcDosWsPcIo=smcDosWsPcIo, smcDosWsNicBasIo=smcDosWsNicBasIo, smcDosWs=smcDosWs, smcDosWsPcProc=smcDosWsPcProc, smcDosWsPcDisk=smcDosWsPcDisk, smcDosWsDosVer=smcDosWsDosVer, smcDosWsNicRam=smcDosWsNicRam, smcDosWsTrapId=smcDosWsTrapId, smcDosWsXmtPkts=smcDosWsXmtPkts, smcDosWsNodId=smcDosWsNodId, smcDosWsTrapDestEntry=smcDosWsTrapDestEntry, smcDosWsTrapDstPro=smcDosWsTrapDstPro, smcDosWsDrvSpcCnt=smcDosWsDrvSpcCnt, smcDosWsDrvId=smcDosWsDrvId, smcDosWsDrvSpcTable=smcDosWsDrvSpcTable, MacAddress=MacAddress, smcDosWsApiTrap=smcDosWsApiTrap, smcDosWsRcvPkts=smcDosWsRcvPkts, smcDosWsRst=smcDosWsRst, smcDosWsDrvSpcId=smcDosWsDrvSpcId, smcDosWsIpAdr=smcDosWsIpAdr, smcDosWsComment=smcDosWsComment, smc=smc, smcDosWsPcTime=smcDosWsPcTime, smcDosWsTrapDstAdr=smcDosWsTrapDstAdr, smcDosWsDrvSpcTxt=smcDosWsDrvSpcTxt, smcDosWsPcTyp=smcDosWsPcTyp, smcDosWsPcBios=smcDosWsPcBios, smcDosWsNicIrq=smcDosWsNicIrq, smcDosWsProtoMix=smcDosWsProtoMix)
