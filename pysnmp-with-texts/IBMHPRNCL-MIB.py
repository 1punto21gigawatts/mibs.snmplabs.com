#
# PySNMP MIB module IBMHPRNCL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMHPRNCL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Counter32, MibIdentifier, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, iso, IpAddress, Integer32, TimeTicks, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "iso", "IpAddress", "Integer32", "TimeTicks", "enterprises", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
hpr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10))
ibmHprNcl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3))
ibmHprNclGlobe = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1))
ibmHprNclGlobeCtrState = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmHprNclGlobeCtrState.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclGlobeCtrState.setDescription('This object is used for a network management station to turn on/off the optional counters in the ibmHprNclTable. notActive(1) - these counters are not being incremented; their values are always zero active(2) - these counters are being incremented')
ibmHprNclGlobeCtrStateTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclGlobeCtrStateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclGlobeCtrStateTime.setDescription("The timestamp (i.e., the Agent's appnNodeUpTime value) when the ibmHprNclGlobeCtrState object was last changed. This time is in hundredths of a second.")
ibmHprNclGlobeAssignAnrs = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclGlobeAssignAnrs.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclGlobeAssignAnrs.setDescription("The total number of ANR's assigned by this node since it was last re-initialized.")
ibmHprNclTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2), )
if mibBuilder.loadTexts: ibmHprNclTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclTable.setDescription('The HPR NCL table')
ibmHprNclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1), ).setIndexNames((0, "IBMHPRNCL-MIB", "ibmHprNclEnvId"))
if mibBuilder.loadTexts: ibmHprNclEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclEntry.setDescription('The EnvId is used as the index to this table.')
ibmHprNclEnvId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclEnvId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclEnvId.setDescription("The product's internal environment id for this NCL, e.g., adapter number, address space number.")
ibmHprNclDlcRecvNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvNetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvNetFrames.setDescription('The total number of network priority frames received from the data control layer (DLC).')
ibmHprNclDlcRecvHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvHiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvHiFrames.setDescription('The total number of high priority frames received from the data control layer (DLC).')
ibmHprNclDlcRecvMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvMedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvMedFrames.setDescription('The total number of medium priority frames received from the data control layer (DLC).')
ibmHprNclDlcRecvLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvLoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvLoFrames.setDescription('The total number of low priority frames received from the data control layer (DLC).')
ibmHprNclDlcRecvNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvNetBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvNetBytes.setDescription('The total number of network priority bytes received from the data control layer (DLC).')
ibmHprNclDlcRecvHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvHiBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvHiBytes.setDescription('The total number of high priority bytes received from the data control layer (DLC).')
ibmHprNclDlcRecvMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvMedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvMedBytes.setDescription('The total number of medium priority bytes received from the data control layer (DLC).')
ibmHprNclDlcRecvLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvLoBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvLoBytes.setDescription('The total number of low priority bytes received from the data control layer (DLC).')
ibmHprNclDlcRecvAnrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcRecvAnrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcRecvAnrErrors.setDescription('The total number of frames containing ANR errors which were received from the data control layer (DLC).')
ibmHprNclDlcSendNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendNetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendNetFrames.setDescription('The total number of network priority sent to the data control layer (DLC).')
ibmHprNclDlcSendHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendHiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendHiFrames.setDescription('The total number of high priority frames sent to the data control layer (DLC).')
ibmHprNclDlcSendMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendMedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendMedFrames.setDescription('The total number of medium priority frames sent to the data control layer (DLC).')
ibmHprNclDlcSendLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendLoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendLoFrames.setDescription('The total number of low priority frames sent to the data control layer (DLC).')
ibmHprNclDlcSendNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendNetBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendNetBytes.setDescription('The total number of network priority bytes sent to the data control layer (DLC).')
ibmHprNclDlcSendHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendHiBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendHiBytes.setDescription('The total number of high priority bytes sent to the data control layer (DLC).')
ibmHprNclDlcSendMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendMedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendMedBytes.setDescription('The total number of medium priority bytes sent to the data control layer (DLC).')
ibmHprNclDlcSendLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclDlcSendLoBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclDlcSendLoBytes.setDescription('The total number of low priority bytes sent to the data control layer (DLC).')
ibmHprNclRtpRecvNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvNetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvNetFrames.setDescription('The total number of network priority frames received from a local RTP connection.')
ibmHprNclRtpRecvHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvHiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvHiFrames.setDescription('The total number of high priority frames received from a local RTP connection.')
ibmHprNclRtpRecvMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvMedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvMedFrames.setDescription('The total number of medium priority frames received from a local RTP connection.')
ibmHprNclRtpRecvLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvLoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvLoFrames.setDescription('The total number of low priority frames received from a local RTP connection.')
ibmHprNclRtpRecvNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvNetBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvNetBytes.setDescription('The total number of network priority bytes received from a local RTP connection.')
ibmHprNclRtpRecvHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvHiBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvHiBytes.setDescription('The total number of high priority bytes received from a local RTP connection.')
ibmHprNclRtpRecvMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvMedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvMedBytes.setDescription('The total number of medium priority bytes received from a local RTP connection.')
ibmHprNclRtpRecvLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvLoBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvLoBytes.setDescription('The total number of low priority bytes received from a local RTP connection.')
ibmHprNclRtpRecvAnrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpRecvAnrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpRecvAnrErrors.setDescription('The total number of frames containing ANR errors which were received from a local RTP connection.')
ibmHprNclRtpSendNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendNetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendNetFrames.setDescription('The total number of network priority sent to a local RTP connection.')
ibmHprNclRtpSendHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendHiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendHiFrames.setDescription('The total number of high priority frames sent to a local RTP connection.')
ibmHprNclRtpSendMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendMedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendMedFrames.setDescription('The total number of medium priority frames sent to a local RTP connection.')
ibmHprNclRtpSendLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendLoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendLoFrames.setDescription('The total number of low priority frames sent to a local RTP connection.')
ibmHprNclRtpSendNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendNetBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendNetBytes.setDescription('The total number of network priority bytes sent to a local RTP connection.')
ibmHprNclRtpSendHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendHiBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendHiBytes.setDescription('The total number of high priority bytes sent to a local RTP connection.')
ibmHprNclRtpSendMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendMedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendMedBytes.setDescription('The total number of medium priority bytes sent to a local RTP connection.')
ibmHprNclRtpSendLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclRtpSendLoBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclRtpSendLoBytes.setDescription('The total number of low priority bytes sent to a local RTP connection.')
ibmHprNclInterSendNetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendNetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendNetFrames.setDescription('The total number of network priority sent to another local routing NCL.')
ibmHprNclInterSendHiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendHiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendHiFrames.setDescription('The total number of high priority frames sent to another local routing NCL.')
ibmHprNclInterSendMedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendMedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendMedFrames.setDescription('The total number of medium priority frames sent to another local routing NCL.')
ibmHprNclInterSendLoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendLoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendLoFrames.setDescription('The total number of low priority frames sent to another local routing NCL.')
ibmHprNclInterSendNetBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendNetBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendNetBytes.setDescription('The total number of network priority bytes sent to another local routing NCL.')
ibmHprNclInterSendHiBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendHiBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendHiBytes.setDescription('The total number of high priority bytes sent to another local routing NCL.')
ibmHprNclInterSendMedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendMedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendMedBytes.setDescription('The total number of medium priority bytes sent to another local routing NCL.')
ibmHprNclInterSendLoBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprNclInterSendLoBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprNclInterSendLoBytes.setDescription('The total number of low priority bytes sent to another local routing NCL.')
ibmHprNclCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 3))
ibmHprNclConfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 3, 4))
mibBuilder.exportSymbols("IBMHPRNCL-MIB", ibmHprNclDlcRecvHiFrames=ibmHprNclDlcRecvHiFrames, ibmHprNclDlcSendHiBytes=ibmHprNclDlcSendHiBytes, ibmHprNclEntry=ibmHprNclEntry, ibmHprNclInterSendNetBytes=ibmHprNclInterSendNetBytes, ibmHprNclDlcRecvMedFrames=ibmHprNclDlcRecvMedFrames, ibmHprNclDlcRecvMedBytes=ibmHprNclDlcRecvMedBytes, ibmHprNclRtpSendHiFrames=ibmHprNclRtpSendHiFrames, ibmHprNclInterSendMedBytes=ibmHprNclInterSendMedBytes, ibmHprNclDlcSendMedBytes=ibmHprNclDlcSendMedBytes, ibmHprNclDlcRecvNetBytes=ibmHprNclDlcRecvNetBytes, ibmHprNclGlobeCtrStateTime=ibmHprNclGlobeCtrStateTime, ibmHprNclDlcSendHiFrames=ibmHprNclDlcSendHiFrames, ibmHprNclRtpRecvLoBytes=ibmHprNclRtpRecvLoBytes, ibmHprNclCompliances=ibmHprNclCompliances, ibmHprNclGlobe=ibmHprNclGlobe, ibmHprNclDlcRecvNetFrames=ibmHprNclDlcRecvNetFrames, ibmHprNclRtpRecvMedBytes=ibmHprNclRtpRecvMedBytes, ibmHprNclRtpRecvHiBytes=ibmHprNclRtpRecvHiBytes, ibmHprNclInterSendLoFrames=ibmHprNclInterSendLoFrames, ibmHprNclRtpSendLoBytes=ibmHprNclRtpSendLoBytes, ibmHprNclRtpRecvNetFrames=ibmHprNclRtpRecvNetFrames, ibmHprNclRtpRecvMedFrames=ibmHprNclRtpRecvMedFrames, ibmHprNclGlobeCtrState=ibmHprNclGlobeCtrState, ibmHprNclDlcSendLoFrames=ibmHprNclDlcSendLoFrames, ibmHprNclRtpSendMedFrames=ibmHprNclRtpSendMedFrames, ibmHprNclInterSendMedFrames=ibmHprNclInterSendMedFrames, ibmHprNclRtpSendHiBytes=ibmHprNclRtpSendHiBytes, ibmHprNclInterSendHiFrames=ibmHprNclInterSendHiFrames, ibmHprNclRtpRecvAnrErrors=ibmHprNclRtpRecvAnrErrors, ibmHprNclDlcSendNetBytes=ibmHprNclDlcSendNetBytes, ibmHprNclRtpRecvHiFrames=ibmHprNclRtpRecvHiFrames, ibmHprNclInterSendNetFrames=ibmHprNclInterSendNetFrames, ibm=ibm, ibmHprNclDlcSendLoBytes=ibmHprNclDlcSendLoBytes, ibmHprNclDlcRecvLoBytes=ibmHprNclDlcRecvLoBytes, hpr=hpr, ibmHprNclRtpRecvNetBytes=ibmHprNclRtpRecvNetBytes, ibmHprNclDlcRecvLoFrames=ibmHprNclDlcRecvLoFrames, ibmHprNclGlobeAssignAnrs=ibmHprNclGlobeAssignAnrs, ibmHprNclDlcRecvHiBytes=ibmHprNclDlcRecvHiBytes, ibmArchitecture=ibmArchitecture, ibmHprNclRtpSendNetFrames=ibmHprNclRtpSendNetFrames, ibmHprNclRtpSendNetBytes=ibmHprNclRtpSendNetBytes, ibmHprNclEnvId=ibmHprNclEnvId, ibmHprNcl=ibmHprNcl, ibmHprNclDlcSendNetFrames=ibmHprNclDlcSendNetFrames, ibmHprNclRtpSendMedBytes=ibmHprNclRtpSendMedBytes, ibmHprNclDlcRecvAnrErrors=ibmHprNclDlcRecvAnrErrors, ibmHprNclRtpRecvLoFrames=ibmHprNclRtpRecvLoFrames, ibmHprNclInterSendLoBytes=ibmHprNclInterSendLoBytes, ibmHprNclDlcSendMedFrames=ibmHprNclDlcSendMedFrames, ibmHprNclConfGroups=ibmHprNclConfGroups, ibmHprNclRtpSendLoFrames=ibmHprNclRtpSendLoFrames, ibmHprNclInterSendHiBytes=ibmHprNclInterSendHiBytes, ibmHprNclTable=ibmHprNclTable)
