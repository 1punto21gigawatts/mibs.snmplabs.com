#
# PySNMP MIB module AC-PM-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, TimeTicks, MibIdentifier, Unsigned32, IpAddress, ModuleIdentity, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Integer32, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "TimeTicks", "MibIdentifier", "Unsigned32", "IpAddress", "ModuleIdentity", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Integer32", "Counter32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
audioCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003))
acRegistrations = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 7))
acGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 8))
acProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9))
acPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10))
acPMAtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 12))
if mibBuilder.loadTexts: acPMAtm.setLastUpdated('200601261643Z')
if mibBuilder.loadTexts: acPMAtm.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPMAtm.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPMAtm.setDescription("The AC-PM-ATM MIB offers performance monitoring For the ATMrelated elements in Audiocodes' devices. The Configuration sub-tree is for configuring the interval Period length for the entire AC-PM-ATM MIB, and the different tables' thresholds. The Data sub-tree presents the tables of monitored elements. Note - for the entire MIB the value (-1) means the value Asked for is either not supported or currently not relevant (this is for when values asked for are for intervals not yet recorded.")
acPMAtmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1))
acPMAtmConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAtmConfigurationPeriodLength.setStatus('current')
if mibBuilder.loadTexts: acPMAtmConfigurationPeriodLength.setDescription('Length of monitoring intervals for entire MIB.Time is in minutes.')
acPMAtmConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAtmConfigurationResetTotalCounters.setStatus('current')
if mibBuilder.loadTexts: acPMAtmConfigurationResetTotalCounters.setDescription('Total-Counters Reset. To reset the total counters, set the value of this object to resetTotalCounters(2).')
acPMAtmCellAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 31))
acPMAtmCellAttributesTxHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 31, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAtmCellAttributesTxHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellAttributesTxHighThreshold.setDescription('High threshold.')
acPMAtmCellAttributesTxLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 31, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAtmCellAttributesTxLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellAttributesTxLowThreshold.setDescription('Low threshold.')
acPMAtmCellAttributesRxHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 31, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAtmCellAttributesRxHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellAttributesRxHighThreshold.setDescription('High threshold.')
acPMAtmCellAttributesRxLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 1, 31, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMAtmCellAttributesRxLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellAttributesRxLowThreshold.setDescription('Low threshold.')
acPMAtmData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2))
acPMAtmDataAcPMAtmTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmDataAcPMAtmTimeFromStartOfInterval.setStatus('current')
if mibBuilder.loadTexts: acPMAtmDataAcPMAtmTimeFromStartOfInterval.setDescription('The time in seconds since the start of the current interval. MIB specific.')
acPMAtmCellTxTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21), )
if mibBuilder.loadTexts: acPMAtmCellTxTable.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxTable.setDescription('Atm interface transmit cells per second.')
acPMAtmCellTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1), ).setIndexNames((0, "AC-PM-ATM-MIB", "acPMAtmCellTxInterface"), (0, "AC-PM-ATM-MIB", "acPMAtmCellTxInterval"))
if mibBuilder.loadTexts: acPMAtmCellTxEntry.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxEntry.setDescription('')
acPMAtmCellTxInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMAtmCellTxInterface.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxInterface.setDescription('Atm interface 0,1 and 2.')
acPMAtmCellTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMAtmCellTxInterval.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMAtmCellTxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxAverage.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxAverage.setDescription('Average value within the period time.')
acPMAtmCellTxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxMax.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxMax.setDescription('Maximum value within the period time.')
acPMAtmCellTxMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxMin.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxMin.setDescription('Minimum value within the period time.')
acPMAtmCellTxVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxVolume.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxVolume.setDescription('Activity volume.')
acPMAtmCellTxTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMAtmCellTxTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMAtmCellTxTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMAtmCellTxFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellTxFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellTxFullDayAverage.setDescription('The average of full 24 hours.')
acPMAtmCellRxTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22), )
if mibBuilder.loadTexts: acPMAtmCellRxTable.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxTable.setDescription('Atm interface recieve cells per second.')
acPMAtmCellRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1), ).setIndexNames((0, "AC-PM-ATM-MIB", "acPMAtmCellRxInterface"), (0, "AC-PM-ATM-MIB", "acPMAtmCellRxInterval"))
if mibBuilder.loadTexts: acPMAtmCellRxEntry.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxEntry.setDescription('')
acPMAtmCellRxInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMAtmCellRxInterface.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxInterface.setDescription('Atm interface 0,1 and 2.')
acPMAtmCellRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMAtmCellRxInterval.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMAtmCellRxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxAverage.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxAverage.setDescription('Average value within the period time.')
acPMAtmCellRxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxMax.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxMax.setDescription('Maximum value within the period time.')
acPMAtmCellRxMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxMin.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxMin.setDescription('Minimum value within the period time.')
acPMAtmCellRxVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxVolume.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxVolume.setDescription('Activity volume.')
acPMAtmCellRxTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMAtmCellRxTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMAtmCellRxTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMAtmCellRxFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 22, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellRxFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellRxFullDayAverage.setDescription('The average of full 24 hours.')
acPMAtmCellDiscardedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 23), )
if mibBuilder.loadTexts: acPMAtmCellDiscardedTable.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellDiscardedTable.setDescription('Counts the number of cells discarded in the reporting interval.')
acPMAtmCellDiscardedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 23, 1), ).setIndexNames((0, "AC-PM-ATM-MIB", "acPMAtmCellDiscardedInterface"), (0, "AC-PM-ATM-MIB", "acPMAtmCellDiscardedInterval"))
if mibBuilder.loadTexts: acPMAtmCellDiscardedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellDiscardedEntry.setDescription('')
acPMAtmCellDiscardedInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMAtmCellDiscardedInterface.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellDiscardedInterface.setDescription('Atm interface 0,1 and 2.')
acPMAtmCellDiscardedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMAtmCellDiscardedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellDiscardedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMAtmCellDiscardedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 12, 2, 23, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMAtmCellDiscardedVal.setStatus('current')
if mibBuilder.loadTexts: acPMAtmCellDiscardedVal.setDescription('Value of gauge or counter.')
mibBuilder.exportSymbols("AC-PM-ATM-MIB", acRegistrations=acRegistrations, acPMAtmCellTxTimeAboveHighThreshold=acPMAtmCellTxTimeAboveHighThreshold, acPMAtmCellRxTimeBetweenThresholds=acPMAtmCellRxTimeBetweenThresholds, acProducts=acProducts, acPMAtmCellTxEntry=acPMAtmCellTxEntry, acPMAtmCellTxTimeBelowLowThreshold=acPMAtmCellTxTimeBelowLowThreshold, acPMAtmCellDiscardedInterface=acPMAtmCellDiscardedInterface, acPMAtmCellAttributes=acPMAtmCellAttributes, acPMAtmCellRxInterval=acPMAtmCellRxInterval, acPMAtmCellRxAverage=acPMAtmCellRxAverage, acPMAtmCellTxAverage=acPMAtmCellTxAverage, acPMAtmCellDiscardedTable=acPMAtmCellDiscardedTable, acPMAtmDataAcPMAtmTimeFromStartOfInterval=acPMAtmDataAcPMAtmTimeFromStartOfInterval, acPMAtmData=acPMAtmData, acPMAtmCellAttributesRxLowThreshold=acPMAtmCellAttributesRxLowThreshold, acPMAtmCellDiscardedVal=acPMAtmCellDiscardedVal, acPMAtmConfigurationResetTotalCounters=acPMAtmConfigurationResetTotalCounters, acPerformance=acPerformance, acPMAtmCellTxMin=acPMAtmCellTxMin, acPMAtmCellDiscardedEntry=acPMAtmCellDiscardedEntry, acPMAtmCellTxVolume=acPMAtmCellTxVolume, acPMAtmCellRxMax=acPMAtmCellRxMax, acPMAtmCellTxFullDayAverage=acPMAtmCellTxFullDayAverage, acPMAtmCellRxTimeBelowLowThreshold=acPMAtmCellRxTimeBelowLowThreshold, acPMAtmCellTxInterval=acPMAtmCellTxInterval, acPMAtmCellRxTable=acPMAtmCellRxTable, acPMAtmCellRxMin=acPMAtmCellRxMin, acPMAtmCellRxInterface=acPMAtmCellRxInterface, acGeneric=acGeneric, acPMAtmCellTxMax=acPMAtmCellTxMax, acPMAtm=acPMAtm, acPMAtmCellTxTimeBetweenThresholds=acPMAtmCellTxTimeBetweenThresholds, acPMAtmCellRxVolume=acPMAtmCellRxVolume, acPMAtmCellTxTable=acPMAtmCellTxTable, acPMAtmConfiguration=acPMAtmConfiguration, acPMAtmCellAttributesTxLowThreshold=acPMAtmCellAttributesTxLowThreshold, acPMAtmCellAttributesTxHighThreshold=acPMAtmCellAttributesTxHighThreshold, acPMAtmCellDiscardedInterval=acPMAtmCellDiscardedInterval, acPMAtmCellRxEntry=acPMAtmCellRxEntry, acPMAtmCellAttributesRxHighThreshold=acPMAtmCellAttributesRxHighThreshold, acPMAtmCellRxTimeAboveHighThreshold=acPMAtmCellRxTimeAboveHighThreshold, PYSNMP_MODULE_ID=acPMAtm, acPMAtmCellRxFullDayAverage=acPMAtmCellRxFullDayAverage, audioCodes=audioCodes, acPMAtmCellTxInterface=acPMAtmCellTxInterface, acPMAtmConfigurationPeriodLength=acPMAtmConfigurationPeriodLength)
