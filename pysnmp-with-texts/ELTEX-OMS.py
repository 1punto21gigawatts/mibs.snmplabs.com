#
# PySNMP MIB module ELTEX-OMS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-OMS
# Produced by pysmi-0.3.4 at Wed May  1 13:02:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
eltexLtd, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "eltexLtd")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, TimeTicks, Bits, Gauge32, Unsigned32, Integer32, Counter64, IpAddress, ObjectIdentity, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Bits", "Gauge32", "Unsigned32", "Integer32", "Counter64", "IpAddress", "ObjectIdentity", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity")
TimeStamp, DisplayString, TimeInterval, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TimeInterval", "TextualConvention", "TruthValue")
eltexOMS = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 4))
eltexOMS.setRevisions(('2009-11-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eltexOMS.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: eltexOMS.setLastUpdated('200911030000Z')
if mibBuilder.loadTexts: eltexOMS.setOrganization('Eltex Co')
if mibBuilder.loadTexts: eltexOMS.setContactInfo(' eltex@gcom.ru ')
if mibBuilder.loadTexts: eltexOMS.setDescription('Mib for eltex devices, that support OMS')
class OMSCmdGroup(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("all", 0), ("pattern", 1), ("private", 2), ("binary", 3))

omsOUI = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsOUI.setStatus('current')
if mibBuilder.loadTexts: omsOUI.setDescription('This should be equal to 3 first octets of Mac-address in hex form without colons.')
omsProductClass = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsProductClass.setStatus('current')
if mibBuilder.loadTexts: omsProductClass.setDescription('string representation of devType')
omsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: omsSerialNumber.setDescription('unique device serial number')
omsActiveAlarms = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: omsActiveAlarms.setStatus('current')
if mibBuilder.loadTexts: omsActiveAlarms.setDescription('On GET-REQUEST device should return quantity of active alarms. On SET-REQUEST device should initiate trap/inform sending sequence for all theese alarms')
omsFwRev = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsFwRev.setStatus('current')
if mibBuilder.loadTexts: omsFwRev.setDescription("Device's firmware revision")
omsCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 4, 10))
cmdFileOperationPatternCfg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdFileOperationPatternCfg.setStatus('current')
if mibBuilder.loadTexts: cmdFileOperationPatternCfg.setDescription('object for operations with pattern file, method GET returned host+filename, method SET for starting [apply, download, save, upload, reboot, confirm, test] pattern file. Example for SET <192.168.1.1 files/images/ver2/pattern1 download>. Commands enumeration: apply, download, save, upload, reboot, confirm, test')
cmdFileOperationPrivateCfg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdFileOperationPrivateCfg.setStatus('current')
if mibBuilder.loadTexts: cmdFileOperationPrivateCfg.setDescription('object for operations with private device settings, method GET returned host+filename, method SET for starting [apply, download, save, upload, reboot, confirm, test] pattern file. Example for SET <192.168.1.1 files/images/ver2/berezovo upload>. Commands enumeration: apply, download, save, upload, reboot, confirm, test')
cmdFileOperationBinaryCfg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdFileOperationBinaryCfg.setStatus('current')
if mibBuilder.loadTexts: cmdFileOperationBinaryCfg.setDescription('object for operations with binary image, method GET returned host+filename, method SET for starting [apply, download, save, upload, reboot, confirm, test] pattern file. Example for SET <192.168.1.1 files/images/ver2/uImage download>. Commands enumeration: apply, download, save, upload, reboot, confirm, test')
cmdOMSCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4), )
if mibBuilder.loadTexts: cmdOMSCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesTable.setDescription('This table is used by agent to make manager know what range of oms commands agent supports. In theory, manager should check against this table prior to sending any oms command.')
cmdOMSCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1), ).setIndexNames((0, "ELTEX-OMS", "cmdOMSCapabilitiesEntryID"))
if mibBuilder.loadTexts: cmdOMSCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesEntry.setDescription('')
cmdOMSCapabilitiesEntryID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdOMSCapabilitiesEntryID.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesEntryID.setDescription('Index')
cmdOMSCapabilitiesCmdGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1, 2), OMSCmdGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdOMSCapabilitiesCmdGroup.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesCmdGroup.setDescription('')
cmdOMSCapabilitiesCmdName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdOMSCapabilitiesCmdName.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesCmdName.setDescription('')
cmdOMSCapabilitiesParseParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdOMSCapabilitiesParseParameters.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesParseParameters.setDescription('Indicates if command parameters really matter, or just used to preserve common syntax.')
cmdOMSCapabilitiesRebootOnSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdOMSCapabilitiesRebootOnSuccess.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesRebootOnSuccess.setDescription('Indicates if device will be automatically rebooted in case of success.')
cmdOMSCapabilitiesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 4, 10, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdOMSCapabilitiesDescription.setStatus('current')
if mibBuilder.loadTexts: cmdOMSCapabilitiesDescription.setDescription('Optional description. This object is intended for human consumption only.')
omsLinuxVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsLinuxVersion.setStatus('current')
if mibBuilder.loadTexts: omsLinuxVersion.setDescription("Device's Linux version")
omsFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: omsFirmwareVersion.setDescription("Device's firmware version")
omsBPUVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsBPUVersion.setStatus('current')
if mibBuilder.loadTexts: omsBPUVersion.setDescription("Device's BPU version")
omsFactoryType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsFactoryType.setStatus('current')
if mibBuilder.loadTexts: omsFactoryType.setDescription("Device's factory type")
omsFactoryMAC = MibScalar((1, 3, 6, 1, 4, 1, 35265, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: omsFactoryMAC.setStatus('current')
if mibBuilder.loadTexts: omsFactoryMAC.setDescription("Device's factory MAC")
omsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 4, 200)).setObjects(("ELTEX-OMS", "omsOUI"), ("ELTEX-OMS", "omsProductClass"), ("ELTEX-OMS", "omsSerialNumber"), ("ELTEX-OMS", "omsActiveAlarms"), ("ELTEX-OMS", "omsFwRev"), ("ELTEX-OMS", "cmdFileOperationPatternCfg"), ("ELTEX-OMS", "cmdFileOperationPrivateCfg"), ("ELTEX-OMS", "cmdFileOperationBinaryCfg"), ("ELTEX-OMS", "cmdOMSCapabilitiesEntryID"), ("ELTEX-OMS", "cmdOMSCapabilitiesCmdGroup"), ("ELTEX-OMS", "cmdOMSCapabilitiesCmdName"), ("ELTEX-OMS", "cmdOMSCapabilitiesParseParameters"), ("ELTEX-OMS", "cmdOMSCapabilitiesRebootOnSuccess"), ("ELTEX-OMS", "cmdOMSCapabilitiesDescription"), ("ELTEX-OMS", "omsLinuxVersion"), ("ELTEX-OMS", "omsFirmwareVersion"), ("ELTEX-OMS", "omsBPUVersion"), ("ELTEX-OMS", "omsFactoryType"), ("ELTEX-OMS", "omsFactoryMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    omsGroup = omsGroup.setStatus('current')
if mibBuilder.loadTexts: omsGroup.setDescription('none')
mibBuilder.exportSymbols("ELTEX-OMS", OMSCmdGroup=OMSCmdGroup, omsFactoryType=omsFactoryType, omsActiveAlarms=omsActiveAlarms, cmdFileOperationPatternCfg=cmdFileOperationPatternCfg, omsCommands=omsCommands, cmdOMSCapabilitiesCmdGroup=cmdOMSCapabilitiesCmdGroup, omsSerialNumber=omsSerialNumber, cmdFileOperationPrivateCfg=cmdFileOperationPrivateCfg, omsGroup=omsGroup, omsBPUVersion=omsBPUVersion, cmdOMSCapabilitiesEntryID=cmdOMSCapabilitiesEntryID, omsFirmwareVersion=omsFirmwareVersion, cmdFileOperationBinaryCfg=cmdFileOperationBinaryCfg, omsLinuxVersion=omsLinuxVersion, cmdOMSCapabilitiesDescription=cmdOMSCapabilitiesDescription, cmdOMSCapabilitiesTable=cmdOMSCapabilitiesTable, PYSNMP_MODULE_ID=eltexOMS, cmdOMSCapabilitiesEntry=cmdOMSCapabilitiesEntry, cmdOMSCapabilitiesParseParameters=cmdOMSCapabilitiesParseParameters, omsProductClass=omsProductClass, eltexOMS=eltexOMS, omsFwRev=omsFwRev, cmdOMSCapabilitiesRebootOnSuccess=cmdOMSCapabilitiesRebootOnSuccess, cmdOMSCapabilitiesCmdName=cmdOMSCapabilitiesCmdName, omsFactoryMAC=omsFactoryMAC, omsOUI=omsOUI)
