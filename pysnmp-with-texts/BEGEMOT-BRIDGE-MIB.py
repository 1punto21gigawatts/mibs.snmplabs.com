#
# PySNMP MIB module BEGEMOT-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BEGEMOT-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:36:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
begemot, = mibBuilder.importSymbols("BEGEMOT-MIB", "begemot")
Timeout, BridgeId = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout", "BridgeId")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Counter64, mib_2, Unsigned32, IpAddress, Gauge32, Bits, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Counter64", "mib-2", "Unsigned32", "IpAddress", "Gauge32", "Bits", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "MacAddress", "TruthValue")
begemotBridge = ModuleIdentity((1, 3, 6, 1, 4, 1, 12325, 1, 205))
begemotBridge.setRevisions(('2007-08-06 00:00', '2006-11-21 00:00', '2006-07-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: begemotBridge.setRevisionsDescriptions(('Third revision adds begemotBridgeBasePortPrivate object.', 'Second revision adds support for monitoring RSTP specific variables.', 'Initial revision.',))
if mibBuilder.loadTexts: begemotBridge.setLastUpdated('200708060000Z')
if mibBuilder.loadTexts: begemotBridge.setOrganization('Sofia University St. Kliment Ohridski')
if mibBuilder.loadTexts: begemotBridge.setContactInfo(' Shteryana Shopova Postal: Faculty of Mathematics and Informatics 5 James Bourchier Blvd. 1164 Sofia Bulgaria Fax: +359 2 687 180 E-Mail: syrinx@FreeBSD.org')
if mibBuilder.loadTexts: begemotBridge.setDescription('The Begemot MIB for managing bridge interfaces.')
class BridgeIfName(TextualConvention, OctetString):
    description = 'Name of a bridge interface.'
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 16)

class BridgeIfNameOrEmpty(TextualConvention, OctetString):
    description = 'Name of a bridge interface.'
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class BridgePortId(TextualConvention, OctetString):
    description = "A port identifier that contains a bridge port's STP priority in the first octet and the port number in the second octet."
    status = 'current'
    displayHint = '1x.1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

begemotBridgeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 0))
begemotBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1))
begemotBridgeStp = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2))
begemotBridgeTp = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3))
begemotBridgePf = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4))
begemotBridgeConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5))
begemotBridgeBaseTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1), )
if mibBuilder.loadTexts: begemotBridgeBaseTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseTable.setDescription('A table that contains generic information for each bridge interface on the managed device.')
begemotBridgeBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"))
if mibBuilder.loadTexts: begemotBridgeBaseEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseEntry.setDescription('A list of information for the bridge interfaces on the managed device.')
begemotBridgeBaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 1), BridgeIfName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseName.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseName.setDescription('The name of the bridge interface for which this entry contains management information.')
begemotBridgeBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseAddress.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseAddress.setDescription('The MAC address of the bridge interface.')
begemotBridgeBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseNumPorts.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseNumPorts.setDescription('The number of ports, members of this bridge.')
begemotBridgeBaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("transparent-only", 2), ("sourceroute-only", 3), ("srt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBaseType.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseType.setDescription('Indicates what type of bridging this bridge can perform.')
begemotBridgeBaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: begemotBridgeBaseStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseStatus.setDescription('Used to create/destroy bridge interfaces on the managed device.')
begemotBridgeBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2), )
if mibBuilder.loadTexts: begemotBridgeBasePortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortTable.setDescription('A table containing generic information about ports, members of each bridge interface.')
begemotBridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBasePortIfIndex"))
if mibBuilder.loadTexts: begemotBridgeBasePortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortEntry.setDescription('A list of information about a specific port, member of a bridge interface.')
begemotBridgeBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePort.setDescription('The system interface index of the interface corresponding to this port.')
begemotBridgeBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in IF-MIB, for the interface corresponding to this port.')
begemotBridgeBaseSpanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeBaseSpanEnabled.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBaseSpanEnabled.setDescription('The value of this objects reflects whether the port is a span port on the specified bridge interface.')
begemotBridgeBasePortDelayExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePortDelayExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortDelayExceededDiscards.setDescription('The number of frames discarded by this port due to excessive transit delay through the bridge.')
begemotBridgeBasePortMtuExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeBasePortMtuExceededDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortMtuExceededDiscards.setDescription('The number of frames discarded by this port due to an excessive size.')
begemotBridgeBasePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: begemotBridgeBasePortStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortStatus.setDescription('Used to control addition of member ports to or removal of member ports from a specified bridge.')
begemotBridgeBasePortPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 1, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeBasePortPrivate.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeBasePortPrivate.setDescription('The value of this objects reflects whether the port has a PRIVATE flag set. A port with this flags set can only communicate with ports not having the PRIVATE flag set.')
begemotBridgeStpTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1), )
if mibBuilder.loadTexts: begemotBridgeStpTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTable.setDescription('A table that contains Spanning Tree Protocol information for each bridge interface on the managed device.')
begemotBridgeStpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1), )
begemotBridgeBaseEntry.registerAugmentions(("BEGEMOT-BRIDGE-MIB", "begemotBridgeStpEntry"))
begemotBridgeStpEntry.setIndexNames(*begemotBridgeBaseEntry.getIndexNames())
if mibBuilder.loadTexts: begemotBridgeStpEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpEntry.setDescription('A list of information about the Spanning Tree Protocol operation on a bridge interface.')
begemotBridgeStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpProtocolSpecification.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpProtocolSpecification.setDescription("The Spanning Tree Protocol version being run on the bridge interface. The value 'decLb100(2)' indicates the DEC LANbridge 100 Spanning Tree protocol, 'ieee8021d(3)' indicates the bridge is running IEEE 802.1D STP implementation.")
begemotBridgeStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPriority.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPriority.setDescription('The priority value of the bridge interface forming the first two octets of the bridge identifier. Acceptable values are 0-61440, in steps of 4096.')
begemotBridgeStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 3), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTimeSinceTopologyChange.setDescription('The time (in hundreds of a second) since a topology change was last detected by this bridge.')
begemotBridgeStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpTopChanges.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTopChanges.setDescription('The number of times a topology change was detected by the bridge interface since the management entity was initialized or reset.')
begemotBridgeStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as calculated by the Spanning Tree Protocol.')
begemotBridgeStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpRootCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpRootCost.setDescription('The cost of the path from this bridge to the root bridge.')
begemotBridgeStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpRootPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpRootPort.setDescription('The port number of the port that offers the lowest cost path from this bridge to the root bridge of the spanning tree. If this bridge is the root bridge, this object shall have a value of zero.')
begemotBridgeStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 8), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpMaxAge.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpMaxAge.setDescription('The maximum age of Spanning Tree Protocol information received from the network on any port, before that information is discarded. This is the actual value that the bridge is currently using.')
begemotBridgeStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 9), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpHelloTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpHelloTime.setDescription('The amount of time between transmission of Configuration BPDUs by this bridge on any port, when it is the root of the spanning tree or is trying to become so. This is the actual value that this bridge is currently using.')
begemotBridgeStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 10), Integer32()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpHoldTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration BPDUs shall be transmitted by this node, in units of hundredths of a second.')
begemotBridgeStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 11), Timeout()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpForwardDelay.setDescription('This value, measured in units of hundredths of a second determines how long a port will stay consecutively in the Listening and Learning states before transitioning to Forwarding state. This is the actual value currently used by the bridge as opposed to begemotBridgeStpBridgeForwardDelay, which is the value this and all bridges participating in the spanning tree were to use, if this was the root bridge.')
begemotBridgeStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 12), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpBridgeMaxAge.setDescription('The value that all bridges participating in the spanning tree would use for MaxAge if this bridge was the root of the spanning tree.')
begemotBridgeStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 13), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpBridgeHelloTime.setDescription('The value that all bridges participating in the spanning tree would use for HelloTime if this bridge was the root of the spanning tree.')
begemotBridgeStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setUnits('centi-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpBridgeForwardDelay.setDescription('The value that all bridges participating in the spanning tree would use for ForwardDelay if this bridge was the root of the spanning tree.')
begemotBridgeStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpVersion.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpVersion.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stpCompatible(0)' indicates the Spanning Tree Protocol specified in IEEE 802.1D-1998 and 'rstp(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE 802.1w and clause 17 of 802.1D-2004. The values are directly from the IEEE standard. New values may be defined as future versions of the protocol become available. The value of this object MUST be retained across reinitializations of the management system.")
begemotBridgeStpTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate of BPDUs on the bridge interface. The value of this object MUST be retained across reinitializations of the management system.')
begemotBridgeStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2), )
if mibBuilder.loadTexts: begemotBridgeStpPortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortTable.setDescription('A table containing Spanning Tree Protocol information about the members of each bridge interface.')
begemotBridgeStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBasePortIfIndex"))
if mibBuilder.loadTexts: begemotBridgeStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortEntry.setDescription('A list of Spanning Tree Protocol information about a specific member of a bridge interface.')
begemotBridgeStpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPort.setDescription('The system interface index of the interface corresponding to this port, for which the management entity has Spanning Tree Protocol information.')
begemotBridgeStpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortPriority.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortPriority.setDescription('The STP priority of this port that is contained in the first octet of its Port Identifier. The second octet contains the value of begemotBridgeStpPort.')
begemotBridgeStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortState.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortState.setDescription('The current state of the port as defined by the operation of the Spanning Tree Protocol. If the Spanning Tree Protocol is administratively disabled on the port, this object shall have value disabled(1). A value of broken(6) does not correspond to any legal state of a port, and if present should indicate error in the operation of either the Spanning Tree Protocol implementation running on the device or the management entity.')
begemotBridgeStpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortEnable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortEnable.setDescription('The administrative Spanning Tree Protocol state of the port - value of enabled(1) indicates that the port is participating in the Spanning Tree Protocol operation.')
begemotBridgeStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortPathCost.setDescription('The contribution of the path through this port, when the port is the Root Port, to the total cost of the path to the root bridge for this bridge.')
begemotBridgeStpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the root in the Root Identifier parameter of Configuration BPDUs transmitted by the Designated Bridge for the LAN to which the port is attached.')
begemotBridgeStpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedCost.setDescription('For a Designated port, the path cost (equal to the Root Path Cost of the bridge) offered to the LAN to which the port is attached otherwise the cost of the path to the Root offered by the Designated Port on the LAN to which this Port is attached.')
begemotBridgeStpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedBridge.setDescription('The unique Bridge Identifier of the bridge to which the port belongs, in the case when the port is a designated port, otherwise the bridge believed to be the Designated Bridge for the LAN to which this port is attached.')
begemotBridgeStpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 9), BridgePortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortDesignatedPort.setDescription('The Port Identifier of the Bridge port, on the Designated Bridge, through which the Designated Bridge transmits the Configuration Message information stored by this port.')
begemotBridgeStpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
begemotBridgeStpExtPortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3), )
if mibBuilder.loadTexts: begemotBridgeStpExtPortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpExtPortTable.setDescription('A table that contains port-specific Rapid Spanning Tree information for the bridge interface members.')
begemotBridgeStpExtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1), )
begemotBridgeStpPortEntry.registerAugmentions(("BEGEMOT-BRIDGE-MIB", "begemotBridgeStpExtPortEntry"))
begemotBridgeStpExtPortEntry.setIndexNames(*begemotBridgeStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: begemotBridgeStpExtPortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpExtPortEntry.setDescription('A list of Rapid Spanning Tree information maintained by each bridge interface member.')
begemotBridgeStpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing true(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns false(2) when read.')
begemotBridgeStpPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortAdminEdgePort.setDescription("The administrative value of the Edge Port parameter. A value of true(1) indicates that this port should be assumed as an edge-port, and a value of false(2) indicates that this port should be assumed as a non-edge-port. Setting this object will also cause the corresponding instance of begemotBridgeStpPortOperEdgePort to change to the same value. Note that even when this object's value is true, the value of the corresponding instance of begemotBridgeStpPortOperEdgePort can be false if a BPDU has been received. The value of this object MUST be retained across reinitializations of the management system.")
begemotBridgeStpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortOperEdgePort.setDescription('The operational value of the Edge Port parameter. The object is initialized to the value of the corresponding instance of begemotBridgeStpPortAdminEdgePort. When the corresponding instance of begemotBridgeStpPortAdminEdgePort is set, this object will be changed as well. This object will also be changed to false on reception of a BPDU.')
begemotBridgeStpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port, using the enumeration values of the IEEE 802.1w clause. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means. Manipulating this object changes the underlying adminPortToPortMAC. The value of this object MUST be retained across reinitializations of the management system.')
begemotBridgeStpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeStpPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection. If adminPointToPointMAC is set to auto(2), then the value of operPointToPointMAC is determined in accordance with the specific procedures defined for the MAC entity concerned, as defined in IEEE 802.1w, clause 6.5. The value is determined dynamically; that is, it is re-evaluated whenever the value of adminPointToPointMAC changes, and whenever the specific procedures defined for the MAC entity evaluates a change in its point-to-point status.')
begemotBridgeStpPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeStpPortAdminPathCost.setDescription("The administratively assigned value for the contribution of this port to the path cost of paths toward the spanning tree root. Writing a value of '0' assigns the automatically calculated default Path Cost value to the port. If the default Path Cost is being used, this object returns '0' when read. This complements the object begemotBridgeStpPortPathCost or begemotBridgeStpPortPathCost32, which returns the operational value of the path cost. The value of this object MUST be retained across reinitializations of the management system.")
begemotBridgeTpTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1), )
if mibBuilder.loadTexts: begemotBridgeTpTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpTable.setDescription('A table that contains information regarding transparent bridging for each bridge interface on the managed device.')
begemotBridgeTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1), )
begemotBridgeBaseEntry.registerAugmentions(("BEGEMOT-BRIDGE-MIB", "begemotBridgeTpEntry"))
begemotBridgeTpEntry.setIndexNames(*begemotBridgeBaseEntry.getIndexNames())
if mibBuilder.loadTexts: begemotBridgeTpEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpEntry.setDescription('A list of information regarding transparent bridging on a bridge interface.')
begemotBridgeTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpLearnedEntryDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpLearnedEntryDiscards.setDescription("The total number of Forwarding Database entries that would have been learnt, but have been discarded due to Forwarding Address Table having reached it's maximum entries limit.")
begemotBridgeTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeTpAgingTime.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpAgingTime.setDescription('The timeout period in seconds before aging out dynamically learnt forwarding entries.')
begemotBridgeTpMaxAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeTpMaxAddresses.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpMaxAddresses.setDescription("The maximum number of entires that this bridge can learn in it's Forwarding Address Table and use for making forwarding decisions.")
begemotBridgeTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2), )
if mibBuilder.loadTexts: begemotBridgeTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge interfaces have forwarding and/or filtering information. This information is used by the bridge interfaces to make forwarding decisions.')
begemotBridgeTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeTpFdbAddress"))
if mibBuilder.loadTexts: begemotBridgeTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the bridge interface has some forwarding and/or filtering information.')
begemotBridgeTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpFdbAddress.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbAddress.setDescription('A unicast MAC address for which the bridge has which the bridge interface has some forwarding and/or filtering information.')
begemotBridgeTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpFdbPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbPort.setDescription('The port number of the bridge port on which a frame having a source address equal to the value of the corresponding instance of begemotBridgeTpFdbAddress has been seen.')
begemotBridgeTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpFdbStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) - none of the following. invalid(2) - this entry is no longer valid (e.g., it was learned but has since aged out), but has not yet been flushed from the table. learned(3) - the value of the corresponding instance of begemotBridgeTpFdbPort was learned, and is being used. self(4) - the value of the corresponding instance of begemotBridgeTpFdbAddress represents one of the bridge's addresses. The corresponding instance of begemotBridgeTpFdbPort indicates which of the bridge's ports has this address. mgmt(5) - the value of the corresponding instance of begemotBridgeTpFdbAddress has been added to the bridge's Forwarding Database by some management means.")
begemotBridgeTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3), )
if mibBuilder.loadTexts: begemotBridgeTpPortTable.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortTable.setDescription('A table that contains information about every bridge port, member of a bridge interface, associated with the transparent bridging function of the bridge.')
begemotBridgeTpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1), ).setIndexNames((0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"), (0, "BEGEMOT-BRIDGE-MIB", "begemotBridgeBasePortIfIndex"))
if mibBuilder.loadTexts: begemotBridgeTpPortEntry.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortEntry.setDescription("A list of information about every bridge port, member of a bridge interface, associated with the bridge's transparent bridging function.")
begemotBridgeTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPort.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPort.setDescription('The system interface index of the port for which this entry contains Transparent bridging management information.')
begemotBridgeTpPortMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 2), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortMaxInfo.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortMaxInfo.setDescription('The maximum size of the INFO (non-MAC) field that this port will receive or transmit.')
begemotBridgeTpPortInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortInFrames.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortInFrames.setDescription('The number of frames that have been received by this port from its segment. Note that a frame received on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
begemotBridgeTpPortOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortOutFrames.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortOutFrames.setDescription('The number of frames that have been transmitted by this port to its segment. Note that a frame transmitted on the interface corresponding to this port is only counted by this object if and only if it is for a protocol being processed by the local bridging function, including bridge management frames.')
begemotBridgeTpPortInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 12325, 1, 205, 3, 3, 1, 5), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: begemotBridgeTpPortInDiscards.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTpPortInDiscards.setDescription('Count of received valid frames that were discarded (i.e., filtered) by the Forwarding Process.')
begemotBridgePfilStatus = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgePfilStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgePfilStatus.setDescription('Indicates whether packet filtering by some firewall package is enabled on the bridge interface.')
begemotBridgePfilMembers = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgePfilMembers.setStatus('current')
if mibBuilder.loadTexts: begemotBridgePfilMembers.setDescription('A value of true(1) indicates that packet filtering is enabled on both incoming and outgoing bridge member interfaces.')
begemotBridgePfilIpOnly = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgePfilIpOnly.setStatus('current')
if mibBuilder.loadTexts: begemotBridgePfilIpOnly.setDescription('This value controls the handling of non-IP packets which are not passed on for further processing to a firewall package. A value of false(0) indicates that all non-IP Ethernet frames are passed unconditionally.')
begemotBridgeLayer2PfStatus = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeLayer2PfStatus.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeLayer2PfStatus.setDescription('This value indicates whether layer2 filtering by a firewall package is enabled for bridge interfaces.')
begemotBridgeDefaultBridgeIf = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5, 1), BridgeIfNameOrEmpty().clone('bridge0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeDefaultBridgeIf.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeDefaultBridgeIf.setDescription("The name of the bridge interface that will be managed via objects in IETF BRIDGE-MIB (RFC4188). If the object's value is set to an empty string, bridge interfaces will only be managed via objects in this MIB module.")
begemotBridgeDataUpdate = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5, 2), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeDataUpdate.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeDataUpdate.setDescription('The maximum age in seconds of the cached data.')
begemotBridgeDataPoll = MibScalar((1, 3, 6, 1, 4, 1, 12325, 1, 205, 5, 3), Timeout().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: begemotBridgeDataPoll.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeDataPoll.setDescription('The polling rate of data when the module is idle.')
begemotBridgeNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 12325, 1, 205, 0, 1)).setObjects(("BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"))
if mibBuilder.loadTexts: begemotBridgeNewRoot.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeNewRoot.setDescription("The begemotBridgeNewRoot trap indicates that one of the bridge interfaces on the sending agent's device has become the new root of the spanning tree topology it is participating in.")
begemotBridgeTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 12325, 1, 205, 0, 2)).setObjects(("BEGEMOT-BRIDGE-MIB", "begemotBridgeBaseName"))
if mibBuilder.loadTexts: begemotBridgeTopologyChange.setStatus('current')
if mibBuilder.loadTexts: begemotBridgeTopologyChange.setDescription('A begemotBridgeTopologyChange trap is send when a member port on one of the bridge interfaces, monitored by the agent, transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. The trap is not sent if a begemotBridgeNewRoot trap is sent for the same transition.')
mibBuilder.exportSymbols("BEGEMOT-BRIDGE-MIB", begemotBridgeTpTable=begemotBridgeTpTable, begemotBridgeTpFdbPort=begemotBridgeTpFdbPort, begemotBridgeNewRoot=begemotBridgeNewRoot, begemotBridgeBaseNumPorts=begemotBridgeBaseNumPorts, BridgeIfName=BridgeIfName, begemotBridgeStpPort=begemotBridgeStpPort, begemotBridgeTpPortMaxInfo=begemotBridgeTpPortMaxInfo, begemotBridgeStpPortDesignatedCost=begemotBridgeStpPortDesignatedCost, begemotBridgeBaseTable=begemotBridgeBaseTable, begemotBridgeStpTxHoldCount=begemotBridgeStpTxHoldCount, begemotBridgeStpPortDesignatedBridge=begemotBridgeStpPortDesignatedBridge, PYSNMP_MODULE_ID=begemotBridge, begemotBridgeStpHoldTime=begemotBridgeStpHoldTime, begemotBridgeBaseType=begemotBridgeBaseType, begemotBridgeBasePortDelayExceededDiscards=begemotBridgeBasePortDelayExceededDiscards, begemotBridgeStpPortOperPointToPoint=begemotBridgeStpPortOperPointToPoint, begemotBridgeStpPortPathCost=begemotBridgeStpPortPathCost, begemotBridgeStpPortAdminPointToPoint=begemotBridgeStpPortAdminPointToPoint, begemotBridgeBasePortStatus=begemotBridgeBasePortStatus, begemotBridgeStpPortPriority=begemotBridgeStpPortPriority, begemotBridgeDataUpdate=begemotBridgeDataUpdate, begemotBridgeStpTopChanges=begemotBridgeStpTopChanges, begemotBridgeStpPortForwardTransitions=begemotBridgeStpPortForwardTransitions, begemotBridgeStpPortDesignatedRoot=begemotBridgeStpPortDesignatedRoot, begemotBridgeBasePortTable=begemotBridgeBasePortTable, BridgePortId=BridgePortId, begemotBridgeTpFdbStatus=begemotBridgeTpFdbStatus, begemotBridgeStp=begemotBridgeStp, begemotBridgeBaseAddress=begemotBridgeBaseAddress, BridgeIfNameOrEmpty=BridgeIfNameOrEmpty, begemotBridgeTpFdbTable=begemotBridgeTpFdbTable, begemotBridgeStpRootPort=begemotBridgeStpRootPort, begemotBridgeTpPort=begemotBridgeTpPort, begemotBridgeStpRootCost=begemotBridgeStpRootCost, begemotBridgeTpPortEntry=begemotBridgeTpPortEntry, begemotBridgeStpMaxAge=begemotBridgeStpMaxAge, begemotBridgeBaseStatus=begemotBridgeBaseStatus, begemotBridgeStpExtPortTable=begemotBridgeStpExtPortTable, begemotBridgeTpPortInDiscards=begemotBridgeTpPortInDiscards, begemotBridgeStpDesignatedRoot=begemotBridgeStpDesignatedRoot, begemotBridgeStpPortTable=begemotBridgeStpPortTable, begemotBridgeStpPortOperEdgePort=begemotBridgeStpPortOperEdgePort, begemotBridgeDataPoll=begemotBridgeDataPoll, begemotBridge=begemotBridge, begemotBridgeStpPortEnable=begemotBridgeStpPortEnable, begemotBridgeNotifications=begemotBridgeNotifications, begemotBridgeTpMaxAddresses=begemotBridgeTpMaxAddresses, begemotBridgeBaseEntry=begemotBridgeBaseEntry, begemotBridgeTpFdbEntry=begemotBridgeTpFdbEntry, begemotBridgeStpPortEntry=begemotBridgeStpPortEntry, begemotBridgePfilStatus=begemotBridgePfilStatus, begemotBridgePfilIpOnly=begemotBridgePfilIpOnly, begemotBridgeStpPortProtocolMigration=begemotBridgeStpPortProtocolMigration, begemotBridgeLayer2PfStatus=begemotBridgeLayer2PfStatus, begemotBridgeStpExtPortEntry=begemotBridgeStpExtPortEntry, begemotBridgeBaseSpanEnabled=begemotBridgeBaseSpanEnabled, begemotBridgeBaseName=begemotBridgeBaseName, begemotBridgeStpPortState=begemotBridgeStpPortState, begemotBridgeStpProtocolSpecification=begemotBridgeStpProtocolSpecification, begemotBridgeStpTable=begemotBridgeStpTable, begemotBridgeDefaultBridgeIf=begemotBridgeDefaultBridgeIf, begemotBridgeBasePortEntry=begemotBridgeBasePortEntry, begemotBridgeTpPortOutFrames=begemotBridgeTpPortOutFrames, begemotBridgeTp=begemotBridgeTp, begemotBridgeBasePortMtuExceededDiscards=begemotBridgeBasePortMtuExceededDiscards, begemotBridgeStpPriority=begemotBridgeStpPriority, begemotBridgeStpBridgeHelloTime=begemotBridgeStpBridgeHelloTime, begemotBridgeTpPortInFrames=begemotBridgeTpPortInFrames, begemotBridgeTpFdbAddress=begemotBridgeTpFdbAddress, begemotBridgePf=begemotBridgePf, begemotBridgeBasePortPrivate=begemotBridgeBasePortPrivate, begemotBridgeStpHelloTime=begemotBridgeStpHelloTime, begemotBridgeBasePortIfIndex=begemotBridgeBasePortIfIndex, begemotBridgeStpBridgeMaxAge=begemotBridgeStpBridgeMaxAge, begemotBridgeConfigObjects=begemotBridgeConfigObjects, begemotBridgeStpForwardDelay=begemotBridgeStpForwardDelay, begemotBridgeBasePort=begemotBridgeBasePort, begemotBridgeTopologyChange=begemotBridgeTopologyChange, begemotBridgeStpPortAdminEdgePort=begemotBridgeStpPortAdminEdgePort, begemotBridgeStpTimeSinceTopologyChange=begemotBridgeStpTimeSinceTopologyChange, begemotBridgeStpBridgeForwardDelay=begemotBridgeStpBridgeForwardDelay, begemotBridgePfilMembers=begemotBridgePfilMembers, begemotBridgeTpPortTable=begemotBridgeTpPortTable, begemotBridgeTpLearnedEntryDiscards=begemotBridgeTpLearnedEntryDiscards, begemotBridgeBase=begemotBridgeBase, begemotBridgeStpPortAdminPathCost=begemotBridgeStpPortAdminPathCost, begemotBridgeStpVersion=begemotBridgeStpVersion, begemotBridgeStpPortDesignatedPort=begemotBridgeStpPortDesignatedPort, begemotBridgeStpEntry=begemotBridgeStpEntry, begemotBridgeTpEntry=begemotBridgeTpEntry, begemotBridgeTpAgingTime=begemotBridgeTpAgingTime)
