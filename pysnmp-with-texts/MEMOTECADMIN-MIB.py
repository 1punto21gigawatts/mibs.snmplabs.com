#
# PySNMP MIB module MEMOTECADMIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MEMOTECADMIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
Alias, = mibBuilder.importSymbols("CXProduct-SMI", "Alias")
memotecAdmin, = mibBuilder.importSymbols("MEMOTEC-SMI", "memotecAdmin")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, IpAddress, Counter32, Gauge32, MibIdentifier, TimeTicks, NotificationType, iso, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "IpAddress", "Counter32", "Gauge32", "MibIdentifier", "TimeTicks", "NotificationType", "iso", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
memotecAdminCommunity = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('memotec')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: memotecAdminCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminCommunity.setDescription('Determines the super-user community name (password) that has full Read/Write access to all MIB objects within the system. You must enter this community name when defining other community names using the object memotecCommunityName of the memotecAdminSecurity Table. The setting of this object is dynamic. The system immediately implements the community name you enter. Range of Values: From 0 to 64, alphanumeric characters. You can use any combination of letters and numbers, however you cannot use blank spaces. Use a dash or underscore as a delimiter. Default Value: memotec Configuration Changed: operative')
memotecAdminViewInacTimer = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminViewInacTimer.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminViewInacTimer.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. Determines the length of time, in minutes, that an SNMP session can remain inactive before the system logs out the user. Once the timer expires, the user needs to log in again to regain access to the SNMP agent. The setting of this object is dynamic. The system immediately implements the value you enter. Range of Values: a maximum of 5 digits from 5 to 65535 Default Value: 30')
memotecAdminAgentInterfaceAlias = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminAgentInterfaceAlias.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminAgentInterfaceAlias.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. Determines the textual name the network administrator assigns to the SNMP Agent. The setting of this object is dynamic. The system immediately implements the name you enter. Range of Values: from 0 to 32 alphanumeric characters. You can use any combination of letters and numbers however, you cannot use blank spaces. Use a dash or underscore as a delimiter. Default Value: none')
memotecAdminStatisticsHeartBeat = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminStatisticsHeartBeat.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminStatisticsHeartBeat.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. Determines the length of time, in seconds, after which the system refreshes its SNMP statistics for each module. The setting of this object is dynamic. The system immediately implements the value you enter. Range of Values: a maximum of 5 digits from 1 to 65535 Default Value: 15')
memotecAdminCardAliveHeartBeat = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecAdminCardAliveHeartBeat.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminCardAliveHeartBeat.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. Determines the length of time, in seconds, after which the system checks too see if each module is alive. The setting of this object is dynamic. The system immediately implements the value you enter. Range of Values: a maximum of 5 digits from 1 to 65535 Default Value: 15')
memotecAdminSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 3, 6))
memotecCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 495, 3, 6, 1), )
if mibBuilder.loadTexts: memotecCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityTable.setDescription('The community table.')
memotecCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1), ).setIndexNames((0, "MEMOTECADMIN-MIB", "memotecCommunityIndex"))
if mibBuilder.loadTexts: memotecCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityEntry.setDescription('Information about a community table entry. ')
memotecCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecCommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityIndex.setDescription('Displays the index number of the community name. The software assigns this number automatically to uniquely identify the communicty name. The index acts as a pointer to this table. You cannot modify this object. It is a display that the software provides. Range of Values: a maximum of 5 digits from 1 to 65535 Default Value: none')
memotecCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityName.setDescription('Determines the community name (password) the system acceptes for all SNMP requests. Note: When defining the community name, you must enter the super-user community name (defined using the object memotecAdminCommunity of the memotecAdmin Table) or the system will not accept the command. The setting of the object is dynamic. The system immediately begins checking all incoming SNMP requests for the community name you enter. Range of Values: from 0 to 64 alphanumeric characters. You can use any combination of letters and numbers, however you cannot use blank spaces. Use a dash or underscore as a delimiter. Default Value: public Configuration Changed: operative')
memotecCommunityNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityNetAddress.setDescription('Associates an IP address with a community name. The object memotecCommunityName (of this table) identifies the community name this object applies to. The system only processes those SNMP requests that have the proper community name and that arrive from the IP address you specify with this object. The setting of this object is dynamic. The system immediately begins checking the IP address and community name of all incoming SNMP requests. Range of Values: 4 octets, each digit ranging from 0 to 255. A value of 0.0.0.0 indicates that the system accepts all SNMP requests as long as they have a valid community name. Default Value: 0 Configuration Changed: operative')
memotecCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("readOnly", 1), ("writeOnly", 2), ("readWrite", 3), ("notAccess", 4))).clone('readOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityAccess.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityAccess.setDescription('Determines the privileges of the community name when accessing the MIB objects. The object memotecCommunityName (of this table) identifies the community name this object applies to. The setting of this object is dynamic. The system immediately implements the option you enter. Options: readOnly(1) writeOnly(2) readWrite(3) notAccess(4) Default Value: readOnly Configuration Changed: operative')
memotecCommunitySecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunitySecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunitySecurityLevel.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. Determines the memotecSecurityLevelIndex defined in the Security Level Group. Currently it is set to 1 and cannot be changed. Range of Values: none Default Value: 1')
memotecCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecCommunityRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memotecCommunityRowStatus.setDescription("Determines the status of objects in a table row. The setting of this object is dynamic. When set to 'valid', the system immediately implements the configuration entry. Options: invalid (1): row is flagged; after the next reset the values will be disabled and the row will be deleted from the table. valid (2): values are enabled. Default Value: valid (2) Configuration Changed: operative")
memotecSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 495, 3, 6, 2), )
if mibBuilder.loadTexts: memotecSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: memotecSecurityTable.setDescription('The security level and group within privilege association table. Currently this table is NOT accessible.')
memotecSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1), ).setIndexNames((0, "MEMOTECADMIN-MIB", "memotecSecurityLevelIndex"), (0, "MEMOTECADMIN-MIB", "memotecSecurityViewIndex"))
if mibBuilder.loadTexts: memotecSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memotecSecurityEntry.setDescription('Information about a security entry. ')
memotecSecurityLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecSecurityLevelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memotecSecurityLevelIndex.setDescription("THE CX900 DOES NOT SUPPORT THIS OBJECT. Displays the index number of the community name's security level.The software automatically assigns this number to uniquely identify the security level. The index acts as a pointer to this table. You cannot modify this object. It is a display that the software provides. Range of Values: a maximum of 5 digits from 1 to 65535 Default Value: none")
memotecSecurityViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecSecurityViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memotecSecurityViewIndex.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. Displays the index number of the memotecSecurityLevelIndex MIB object group. The software assigns this number automatically to uniquely identify the MIB group. The index acts as a pointer to this table. You cannot modify this object. It is a display that the software provides. Range of Values: a maximum of 5 digits from 1 to 65535 Default Value: none')
memotecSecurityView = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecSecurityView.setStatus('mandatory')
if mibBuilder.loadTexts: memotecSecurityView.setDescription('THE CX900 DOES NOT SUPPORT THIS OBJECT. An MIB object group defined for this view index of the security level. Range of Values: none Default Value: none')
memotecSecurityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecSecurityRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memotecSecurityRowStatus.setDescription("Determines the status of the objects in a table row. The setting of this object is dynamic. When set to 'valid', the system immediately implements the configuration entry. Options: invalid (1): row is flagged; after next reset the values will be disabled and the row will be deleted from the table. valid: (2): values are enabled. Default Value: valid (2) Configuration Changed: operative")
memotecTrapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 3, 6, 3), )
if mibBuilder.loadTexts: memotecTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: memotecTrapTable.setDescription(' This is a trap table. It contains a list of IP addresses of SNMP consoles to which SNMP traps are sent.')
memotecTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1), ).setIndexNames((0, "MEMOTECADMIN-MIB", "memotecTrapIndex"))
if mibBuilder.loadTexts: memotecTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: memotecTrapEntry.setDescription('An entry of the trap table. ')
memotecTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: memotecTrapIndex.setDescription('Displays the index number of the trap entry. The software assigns this number automatically to uniquely identify the trap entry. The index acts as a pointer to this table. Range of Values: a maximum of 5 digits from 1 to 65535 Default Value: none')
memotecTrapNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecTrapNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: memotecTrapNetAddress.setDescription('Determines the network address (i.e. IP address) of the system to which traps are sent. The setting of the object is dynamic. Traps are immediately sent to the IP address you enter. Range of Values: 4 octets, each digit ranging from 0 to 255. Default Value: 0 Configuration Changed: operative')
memotecTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 3), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecTrapCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: memotecTrapCommunity.setDescription('Determines the community name included in all traps. The object memotecTrapNetAddress (of this table) identifies the IP address to which these traps are sent. The system receiving the traps will not accept any that do not contain this community name. The setting of this object is dynamic. The system immediately begins checking the traps for the community name you define. Range of Values: from 0 to 64 alphanumeric characters. You can use any combination of letters and numbers however, you cannot use blank spaces. Use a dash or underscore as a delimiter. Default Value: public Configuration Changed: operative')
memotecTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 3, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memotecTrapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: memotecTrapRowStatus.setDescription("Determines the status of the objects in a table row. The setting of this object is dynamic. When set to 'valid', the system immediately implements the trap entry. Options: invalid (1): row is flagged; after the next reset the values will be disabled and the row will be deleted from the table. valid (2): values are enabled. Default Value: valid Configuration Changed: operative")
memotecAdminMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 495, 3, 7))
memotecAdminMibModules = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecAdminMibModules.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminMibModules.setDescription('This objects represents the presence of the various MIB modules in the CPU. Each MIB module is represented by a bit. If the bit is set, then it implies that the MIB Module is present. Bits are numbered starting with zero, which is positioned as the high order bit of the first byte. Bits are packed eight to a byte. Unused bits should be set to zero. For example, to find out if layer id 15 is present, the bit number 15 is tested if it is set. MIB Module Module id (bit position) -------------- ---------- COMPR.MIB 0 CXADXI.MIB 1 CXASYIO.MIB 2 CXASYNC.MIB 3 CXBCM.MIB 4 CXBOPD.MIB 5 CXBOPIO.MIB 6 CXCC.MIB 7 CXCD.MIB 8 CXCFGBR.MIB 9 CXCFGIP.MIB 10 CXCFGIPX.MIB 11 CXCHASSI.MIB 12 CXCONV.MIB 13 CXDDS.MIB 14 CXDIAL.MIB 15 CXDL.MIB 16 CXETHIO.MIB 17 CXEVM.MIB 18 CXFLTIP.MIB 19 CXFLTIPX.MIB 20 CXFR.MIB 21 CXFRIM.MIB 22 CXFS.MIB 23 CXGFF.MIB 24 CXGMF.MIB 25 CXIH.MIB 26 CXIHI.MIB 27 CXIPNCP.MIB 28 CXIPX.MIB 29 CXIPXSAP.MIB 30 CXISDN.MIB 31 CXLANIO.MIB 32 CXLAPBD.MIB 33 CXLBCNV.MIB 34 CXLFC.MIB 35 CXLIG.MIB 36 CXLLCIM.MIB 37 CXLLCL.MIB 38 CXMCDL.MIB 39 CXMCPRT.MIB 40 CXMCVOX.MIB 41 CXMH.MIB 42 CXMLPPP.MIB 43 CXOS.MIB 44 CXOSP.MIB 45 CXPHYIF.MIB 46 CXPORT.MIB 47 CXPPP.MIB 48 CXPPPIP.MIB 49 CXQLLC.MIB 50 CXSDLC.MIB 51 CXSDXI.MIB 52 CXSM.MIB 53 CXSNALC.MIB 54 CXT1E1.MIB 55 CXTB.MIB 56 CXTRDIO.MIB 57 CXUDRV.MIB 58 CXUI.MIB 59 CXUTST.MIB 60 CXV34.MIB 61 CXVIEWIN.MIB 62 CXVR.MIB 63 CXVSHELL.MIB 64 CXX25.MIB 65 MEMOTADM.MIB 66 RFC1213R.MIB 67 RFC1231.MIB 68 RFC1253.MIB 69 RFC1284M.MIB 70 RFC1286.MIB 71 RFC1389.MIB 72 CXDHCP.MIB 73 CXGIM.MIB 74 RFC1406.MIB 75 RFC1406X.MIB 76 CXACTE.MIB 77 CXBSC.MIB 78 CXDSP.MIB 79 CX_T1E1.MIB 80 ')
memotecAdminMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memotecAdminMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: memotecAdminMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
mibBuilder.exportSymbols("MEMOTECADMIN-MIB", memotecAdminStatisticsHeartBeat=memotecAdminStatisticsHeartBeat, memotecCommunityRowStatus=memotecCommunityRowStatus, memotecCommunitySecurityLevel=memotecCommunitySecurityLevel, memotecSecurityLevelIndex=memotecSecurityLevelIndex, memotecAdminAgentInterfaceAlias=memotecAdminAgentInterfaceAlias, memotecCommunityName=memotecCommunityName, memotecCommunityNetAddress=memotecCommunityNetAddress, memotecAdminCommunity=memotecAdminCommunity, memotecCommunityAccess=memotecCommunityAccess, memotecTrapNetAddress=memotecTrapNetAddress, memotecAdminSecurity=memotecAdminSecurity, memotecAdminMibs=memotecAdminMibs, memotecTrapCommunity=memotecTrapCommunity, memotecAdminMibLevel=memotecAdminMibLevel, memotecTrapEntry=memotecTrapEntry, memotecCommunityIndex=memotecCommunityIndex, memotecSecurityRowStatus=memotecSecurityRowStatus, memotecSecurityViewIndex=memotecSecurityViewIndex, memotecSecurityView=memotecSecurityView, memotecTrapRowStatus=memotecTrapRowStatus, memotecSecurityEntry=memotecSecurityEntry, memotecAdminViewInacTimer=memotecAdminViewInacTimer, memotecAdminMibModules=memotecAdminMibModules, memotecCommunityTable=memotecCommunityTable, memotecCommunityEntry=memotecCommunityEntry, memotecTrapTable=memotecTrapTable, memotecTrapIndex=memotecTrapIndex, memotecSecurityTable=memotecSecurityTable, memotecAdminCardAliveHeartBeat=memotecAdminCardAliveHeartBeat)
