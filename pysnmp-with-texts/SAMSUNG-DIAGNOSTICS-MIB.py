#
# PySNMP MIB module SAMSUNG-DIAGNOSTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAMSUNG-DIAGNOSTICS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
samsungCommonMIB, = mibBuilder.importSymbols("SAMSUNG-COMMON-MIB", "samsungCommonMIB")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, Counter64, Unsigned32, ObjectIdentity, Bits, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, iso, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Counter64", "Unsigned32", "ObjectIdentity", "Bits", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "iso", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
scmDiagnostics = ModuleIdentity((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64))
if mibBuilder.loadTexts: scmDiagnostics.setLastUpdated('0408240000Z')
if mibBuilder.loadTexts: scmDiagnostics.setOrganization('Samsung Corporation - Samsung Common Management Interface (SCMI) Working Group')
if mibBuilder.loadTexts: scmDiagnostics.setContactInfo(' SCMI Editors E-Mail: wani.kang@samsung.com -- -- ')
if mibBuilder.loadTexts: scmDiagnostics.setDescription(' SCMI Document Diagnostics MIB, Version 1.00 Copyright (C) 2003-2004 Samsung Corporation. All Rights Reserved.')
scmDiagnosticsDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1))
scmDiagnosticsDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2), )
if mibBuilder.loadTexts: scmDiagnosticsDeviceTable.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceTable.setDescription('A table of general counters and summary information for ease of use of the overall Document Resources MIB on this host system. This Document Resources General table has exactly one row, with an scmDiagnosticsIndex value of 1.')
scmDiagnosticsDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1), ).setIndexNames((0, "SAMSUNG-DIAGNOSTICS-MIB", "scmDiagnosticsDeviceIndex"))
if mibBuilder.loadTexts: scmDiagnosticsDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceEntry.setDescription('A row entry of general counters and summary information for ease of use of the overall Document Resources MIB on this host system. The Document Resources General table has exactly one row entry, with an scmDiagnosticsIndex value of 1.')
scmDiagnosticsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceIndex.setDescription('A unique value for each device contained by the host. The value for each device must remain constant at least from one re-initialization of the agent to the next re-initialization.')
scmDiagnosticsDeviceItem = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceItem.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceItem.setDescription('An indication of the Item of device.')
scmDiagnosticsDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 26, 41, 42, 43))).clone(namedValues=NamedValues(("input", 1), ("output", 2), ("cover", 3), ("geeralPrinter", 4), ("mediaPath", 5), ("marker", 6), ("markerSupplies", 7), ("markerColorant", 8), ("fax", 21), ("scanner", 22), ("network", 23), ("usb", 24), ("parallel", 25), ("finisher", 26), ("motor", 41), ("smps", 42), ("memory", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceType.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceType.setDescription("An indication of the type of device. If this value is `hrDeviceProcessor hrDeviceTypes 3 ' then an entry exists in the hrProcessorTable which corresponds to this device. If this value is `hrDeviceNetwork hrDeviceTypes 4 ', then an entry exists in the hrNetworkTable which corresponds to this device. If this value is `hrDevicePrinter hrDeviceTypes 5 ', then an entry exists in the hrPrinterTable which corresponds to this device. If this value is `hrDeviceDiskStorage hrDeviceTypes 6 ', then an entry exists in the hrDiskStorageTable which corresponds to this device. ")
scmDiagnosticsDeviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceDescr.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceDescr.setDescription('A description of the type and instance of the storage described by this entry.')
scmDiagnosticsDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceID.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceID.setDescription('The product ID for this device.')
scmDiagnosticsDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("warning", 3), ("testing", 4), ("down", 5), ("printing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceStatus.setDescription("The current operational state of the device described by this row of the table. A value unknown(1) indicates that the current state of the device is unknown. running(2) indicates that the device is up and running and that no unusual error conditions are known. The warning(3) state indicates that agent has been informed of an unusual error condition by the operational software (e.g., a disk device driver) but that the device is still 'operational'. An example would be high number of soft errors on a disk. A value of testing(4), indicates that the device is not available for use because it is in the testing state. The state of down(5) is used only when the agent has been informed that the device is not available for any use.")
scmDiagnosticsDeviceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmDiagnosticsDeviceErrors.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsDeviceErrors.setDescription('The number of errors detected on this device. It should be noted that as this object has a SYNTAX of Counter, that it does not have a defined initial value. However, it is recommended that this object be initialized to zero.')
scmDiagnosticsRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scmDiagnosticsRequest.setStatus('current')
if mibBuilder.loadTexts: scmDiagnosticsRequest.setDescription('Diagnotics Request')
scmGenBaseDeviceImageFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 236, 11, 5, 11, 64, 1, 2, 1, 999), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scmGenBaseDeviceImageFileName.setStatus('current')
if mibBuilder.loadTexts: scmGenBaseDeviceImageFileName.setDescription('It is the temporay Value. --> It will be moved to SCM General Mib')
mibBuilder.exportSymbols("SAMSUNG-DIAGNOSTICS-MIB", scmDiagnostics=scmDiagnostics, scmDiagnosticsDeviceType=scmDiagnosticsDeviceType, scmDiagnosticsDeviceStatus=scmDiagnosticsDeviceStatus, scmDiagnosticsDeviceID=scmDiagnosticsDeviceID, scmDiagnosticsDeviceDescr=scmDiagnosticsDeviceDescr, PYSNMP_MODULE_ID=scmDiagnostics, scmDiagnosticsDevice=scmDiagnosticsDevice, scmDiagnosticsDeviceTable=scmDiagnosticsDeviceTable, scmDiagnosticsDeviceErrors=scmDiagnosticsDeviceErrors, scmGenBaseDeviceImageFileName=scmGenBaseDeviceImageFileName, scmDiagnosticsDeviceEntry=scmDiagnosticsDeviceEntry, scmDiagnosticsRequest=scmDiagnosticsRequest, scmDiagnosticsDeviceIndex=scmDiagnosticsDeviceIndex, scmDiagnosticsDeviceItem=scmDiagnosticsDeviceItem)
