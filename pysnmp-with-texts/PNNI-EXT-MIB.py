#
# PySNMP MIB module PNNI-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PNNI-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
extensions, = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "extensions")
lecsConfIndex, = mibBuilder.importSymbols("LAN-EMULATION-ELAN-MIB", "lecsConfIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, ModuleIdentity, MibIdentifier, IpAddress, iso, NotificationType, Gauge32, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "ModuleIdentity", "MibIdentifier", "IpAddress", "iso", "NotificationType", "Gauge32", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cnPnniExt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 5))
cnPnniMainExt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 5, 1))
cnPnnilecsExt = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 5, 2))
cnPnniTdbOverload = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 3, 5, 3))
cnPnniAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnPnniAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cnPnniAdminStatus.setDescription('The desired state of PNNI in the switching system. Setting this object to disabled(2) disables PNNI capability in the switch. Setting it to enabled(1) enables PNNI capability.')
cnPnniCurNodes = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnPnniCurNodes.setStatus('mandatory')
if mibBuilder.loadTexts: cnPnniCurNodes.setDescription('The number of PNNI logical nodes currently configured in the switching system.')
lecsConfExtTable = MibTable((1, 3, 6, 1, 4, 1, 930, 3, 5, 2, 1), )
if mibBuilder.loadTexts: lecsConfExtTable.setStatus('mandatory')
if mibBuilder.loadTexts: lecsConfExtTable.setDescription('This table contains the configuration information that are additional to the existing lecsConfTable')
lecsConfExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 3, 5, 2, 1, 1), ).setIndexNames((0, "LAN-EMULATION-ELAN-MIB", "lecsConfIndex"))
if mibBuilder.loadTexts: lecsConfExtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lecsConfExtEntry.setDescription('Each entry represents a LECS this agent maintains in this extension table. A row in this table is not valid unless the same row is valid in the lecsConfTable defined in af1129r5.mib')
lecsConfExtScope = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 3, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 104))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lecsConfExtScope.setStatus('mandatory')
if mibBuilder.loadTexts: lecsConfExtScope.setDescription('PNNI scope value')
cnPnniMemConsumptionLowwater = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnPnniMemConsumptionLowwater.setStatus('mandatory')
if mibBuilder.loadTexts: cnPnniMemConsumptionLowwater.setDescription('The value of low memory watermark. If memory allocated to PNNI task is less than this value, then the Database resynchronization be attempted.')
cnPnniMemConsumptionHighwater = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 5, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnPnniMemConsumptionHighwater.setStatus('mandatory')
if mibBuilder.loadTexts: cnPnniMemConsumptionHighwater.setDescription('The value of high memory watermark. If memory allocated to PNNI task is greater than this value, then the node will enter to topology database overload state.')
cnPnniOverLoadRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 930, 3, 5, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnPnniOverLoadRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: cnPnniOverLoadRetryTime.setDescription('The value of the database resynch attempt timer in seconds.')
mibBuilder.exportSymbols("PNNI-EXT-MIB", lecsConfExtEntry=lecsConfExtEntry, cnPnniTdbOverload=cnPnniTdbOverload, lecsConfExtTable=lecsConfExtTable, cnPnniOverLoadRetryTime=cnPnniOverLoadRetryTime, cnPnniMainExt=cnPnniMainExt, cnPnniCurNodes=cnPnniCurNodes, cnPnniMemConsumptionHighwater=cnPnniMemConsumptionHighwater, cnPnniExt=cnPnniExt, cnPnniMemConsumptionLowwater=cnPnniMemConsumptionLowwater, lecsConfExtScope=lecsConfExtScope, cnPnnilecsExt=cnPnnilecsExt, cnPnniAdminStatus=cnPnniAdminStatus)
