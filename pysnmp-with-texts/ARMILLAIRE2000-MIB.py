#
# PySNMP MIB module ARMILLAIRE2000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ARMILLAIRE2000-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, enterprises, MibIdentifier, ModuleIdentity, iso, IpAddress, NotificationType, Integer32, Bits, Counter32, TimeTicks, Counter64, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "enterprises", "MibIdentifier", "ModuleIdentity", "iso", "IpAddress", "NotificationType", "Integer32", "Bits", "Counter32", "TimeTicks", "Counter64", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
armillaire = MibIdentifier((1, 3, 6, 1, 4, 1, 4618))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 1, 2, 3, 17, 22, 23, 18))
    namedValues = NamedValues(("createandwait", 5), ("destroy", 6), ("active", 1), ("notinservice", 2), ("notready", 3), ("modified", 17), ("up", 22), ("down", 23), ("outofservice", 18))

class LrnRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 1, 2, 3, 18))
    namedValues = NamedValues(("createandwait", 5), ("destroy", 6), ("active", 1), ("notinservice", 2), ("notready", 3), ("outofservice", 18))

class CktRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 1, 2, 3, 17, 22, 23, 99, 18, 20))
    namedValues = NamedValues(("createandwait", 5), ("destroy", 6), ("active", 1), ("notinservice", 2), ("notready", 3), ("modified", 17), ("up", 22), ("down", 23), ("modifytimer", 99), ("outofservice", 18), ("block", 20))

class TmrRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(99, 1, 2, 3, 17, 22, 23, 18))
    namedValues = NamedValues(("modifytimer", 99), ("active", 1), ("notinservice", 2), ("notready", 3), ("modified", 17), ("up", 22), ("down", 23), ("outofservice", 18))

class UserLoginStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("login", 1), ("logininvalid", 2), ("adduser", 3), ("deleteuser", 4))

class UserLoginPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 8738))
    namedValues = NamedValues(("admin", 1), ("cts", 2), ("user", 8738))

class ProcessStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 34, 51, 170, 3, 172))
    namedValues = NamedValues(("down", 1), ("active", 34), ("standby", 51), ("outofservice", 170), ("switchingover", 3), ("unknown", 172))

class IsdnPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("primary", 0), ("secondary", 1), ("bearing", 2))

class IsdnType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("nfas", 1), ("fas", 0))

class OpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23))
    namedValues = NamedValues(("active", 1), ("down", 23))

class LinkOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23, 19))
    namedValues = NamedValues(("active", 1), ("down", 23), ("inhibit", 19))

class LinkSetOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23))
    namedValues = NamedValues(("active", 1), ("deactive", 23))

class CktOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23, 20))
    namedValues = NamedValues(("active", 1), ("down", 23), ("block", 20))

class IsdnTrnkOpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 23, 21))
    namedValues = NamedValues(("active", 1), ("down", 23), ("disable", 21))

class ModifyTmrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(99, 0))
    namedValues = NamedValues(("modifytimer", 99), ("noaction", 0))

class IfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("interface-t1", 0), ("interface-t3", 1), ("interface-ut3", 2), ("interface-oc3", 3), ("interface-ut3cp", 4), ("interface-oc3cp", 5), ("interface-e1", 8), ("interface-hde1", 9), ("interface-une3", 10), ("interface-stm", 11), ("interface-oc3aps", 12), ("interface-stm1aps", 13))

class AtmIfType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 8))
    namedValues = NamedValues(("interface-t1", 0), ("interface-e1", 8))

class ConnectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10))
    namedValues = NamedValues(("t3", 1), ("ut3", 2), ("e3", 10))

class EnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("yes", 1), ("no", 2))

class Ss7RouteType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0))
    namedValues = NamedValues(("load", 0))

class AddrIdentifier(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("unknown", 2), ("nationalnumber", 3))

class AddrType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("callpartynum", 1), ("transitnetwork", 2))

class NumPlan(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("nonumber", 0), ("isdnnumplan", 1))

class Direction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("in", 0), ("out", 1), ("both", 2))

class EnableOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 17))
    namedValues = NamedValues(("enable", 16), ("disable", 17))

class IsdnChnlMgtOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(11, 12))
    namedValues = NamedValues(("enable", 11), ("disable", 12))

class IsdnTrnkMgtOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(9, 10))
    namedValues = NamedValues(("enable", 9), ("disable", 10))

class BlockOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 0))
    namedValues = NamedValues(("block", 5), ("unblock", 6), ("noaction", 0))

class Level(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("level1", 1), ("level2", 2))

class ModemResetStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("yes", 1), ("no", 0))

class ModemEnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class MeasEnableStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class EthernetConnStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class Standard(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(65, 73, 84))
    namedValues = NamedValues(("ansi", 65), ("itu", 73), ("telmex", 84))

class TrunkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(34, 17))
    namedValues = NamedValues(("ss7", 34), ("isdn", 17))

class RouteType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ss7RouteType", 1), ("isdnRouteType", 2))

class AuditType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(65, 73))
    namedValues = NamedValues(("ansi", 65), ("itu", 73))

class AuditOperation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("audit", 1), ("noaction", 0))

class Controlstatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 11, 12, 0))
    namedValues = NamedValues(("blockckt", 5), ("unblock", 6), ("enablechnl", 11), ("disablechnl", 12), ("noaction", 0))

class LinkControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 0))
    namedValues = NamedValues(("inhibitlink", 1), ("uninhibitlink", 2), ("noaction", 0))

class LinkSetControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4, 0))
    namedValues = NamedValues(("activatelnkset", 3), ("deactivatelnkset", 4), ("noaction", 0))

class CircuitControlStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7, 8, 13, 14, 15, 0))
    namedValues = NamedValues(("blockcic", 7), ("unblockcic", 8), ("queryckt", 13), ("validateckt", 14), ("resetckt", 15), ("noaction", 0))

class IsdnControlstatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(9, 10, 0))
    namedValues = NamedValues(("enabletrnk", 9), ("disabletrnk", 10), ("noaction", 0))

class MtpRteState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("rteavail", 1), ("rteunaval", 0))

class Bool(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("yes", 1), ("no", 0))

class LoadBalance(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disable", 0), ("enable", 1))

class TrnkGrpType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(32, 33))
    namedValues = NamedValues(("ss7", 32), ("isdn", 33))

class ActiveAlarmAckStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clear", 0), ("noaction", 1))

class EventType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("alarm", 1), ("emergency", 2), ("audit", 3), ("diagnostics", 4), ("security", 5), ("maintenance", 6))

class AlarmEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 0))
    namedValues = NamedValues(("general", 1), ("device", 2), ("protocol", 3), ("mfd", 4), ("cdr", 5), ("measurement", 6), ("log", 7), ("ig", 8), ("faultTolerance", 9), ("nomainevent", 0))

class AlarmSubEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("administration", 1), ("nosubevent", 0), ("operation", 2), ("mssc", 3), ("xconnect", 4), ("hub", 5), ("ss7lnk", 6), ("ss7Br", 7), ("isdn", 8), ("atm", 9))

class AlarmSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("informational", 4))

class RoffType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("le", 1), ("tandem", 2), ("intlgateway", 3))

class NameString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 24)

class AddrString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 24)

class CdrFlag(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noCdr", 0), ("ic", 1), ("og", 2), ("bi", 3))

class DSPCardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dsp2B", 1), ("dsp2C", 2))

class VoicePcm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(101, 102))
    namedValues = NamedValues(("alaw", 101), ("ulaw", 102))

class TGFeature(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class FTswitchOver(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("ftsig", 0), ("fticc", 1), ("ftisdn", 2), ("ftsphr", 3), ("ftlm", 4))

class LogFileAttr(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 2, 7, 1, 4, 5, 8, 6))
    namedValues = NamedValues(("alarmlog", 3), ("auditlog", 2), ("measlog", 7), ("diaglog", 1), ("scrtylog", 4), ("eventlog", 5), ("billlog", 8), ("emplog", 6))

class LogFileEnDis(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 2, 7, 1, 4, 5, 8, 6, 11, 0))
    namedValues = NamedValues(("alarmlog", 3), ("auditlog", 2), ("measlog", 7), ("diaglog", 1), ("scrtylog", 4), ("eventlog", 5), ("billlog", 8), ("emplog", 6), ("logall", 11), ("noaction", 0))

class SwitchType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("national", 0), ("international", 1))

class LinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(53, 54))
    namedValues = NamedValues(("speed-56K", 53), ("speed-64K", 54))

class LogType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(49, 48))
    namedValues = NamedValues(("on", 49), ("off", 48))

class EnableTrace(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enable", 1), ("disable", 0))

class TrunkState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 255, 1, 2))
    namedValues = NamedValues(("idle", 0), ("unEquipped", 255), ("cP-Busy", 1), ("maintainance-Busy", 2))

class MeasPurgeFlag(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("autoOff", 0), ("autoOn", 1))

class E1MultiFrame(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cas", 1), ("ccs", 2))

class E1CRC4(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class TransClkSrc(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("loopTiming", 1), ("localTiming", 2))

class DS1LineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("esF", 1), ("d4", 2))

class DS1LineCoding(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("b8zs", 1), ("ami", 2))

class DS1LBO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("upTo133Feet", 1), ("upTo266Feet", 2), ("upTo399Feet", 3), ("upTo533Feet", 4), ("upTo655Feet", 5), ("negative7-5Db", 6), ("negative15Db", 7), ("negative22-5Db", 8))

class DS3LineType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cbitParity", 1), ("clearChannel", 2))

class DS3LBO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

class DS3ATMCellMap(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("plcp", 1), ("directMapping", 2))

class TimerType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ansi", 1), ("itu", 2))

products = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1))
services = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 2))
armillaire2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2))
switchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1))
switchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2))
switchMeas = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3))
switchCdr = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4))
switchFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5))
switchMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6))
switchTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7))
switchGenInfoGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1))
switchPcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2))
switchUsrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3))
switchVersionGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4))
ss7 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1))
isdn = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2))
trnkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3))
rt = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4))
xconnect = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5))
enableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6))
measFile = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1))
measSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2))
measTrnkGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3))
measLnk = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4))
modemFaultDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1))
lnp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2))
switchDSP = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3))
switchTGFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4))
ft = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 1))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2))
trace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3))
processStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4))
ethernetConnStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 5))
audit = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6))
trapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1))
alarmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2))
ftSwitchOverInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 1, 1))
logFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 1))
logFileGenEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 2))
logFileAttribute = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3))
auditInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1))
ss7LnkTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1))
ss7RouteTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2))
isdnTrnkTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3))
processStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1))
ss7Sig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1))
ss7Br = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2))
mtp2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3))
mtp3 = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4))
isup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5))
ss7Route = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6))
mtp3GenTmrCfgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1))
switchName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchName.setStatus('mandatory')
if mibBuilder.loadTexts: switchName.setDescription('The switch Name. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 24 characters ')
switchDescr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDescr.setStatus('mandatory')
if mibBuilder.loadTexts: switchDescr.setDescription('Description of the Switch. Can be any combination of alphanumeric characters. Spaces are allowed and cannot exceed 255 characters. ')
switchLocation = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchLocation.setStatus('mandatory')
if mibBuilder.loadTexts: switchLocation.setDescription('Location of the Switch. Can be any combination of alphanumeric characters. Spaces are allowed and cannot exceed 255 characters. ')
switchContact = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchContact.setStatus('mandatory')
if mibBuilder.loadTexts: switchContact.setDescription('Contact information about the Switch. Can be any combination of alphanumeric characters. Spaces are allowed and cannot exceed 24 characters. ')
switchIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: switchIPAddr.setDescription('Switch IP address. In xxx.xxx.xxx.xxx format. ')
switchUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: switchUpTime.setDescription('The Time (in Seconds) since last restart of the Switch ')
switchVersion = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVersion.setStatus('mandatory')
if mibBuilder.loadTexts: switchVersion.setDescription('The version of current Switch ')
switchVerDescr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerDescr.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerDescr.setDescription('The description of switch version ')
systemDescr = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDescr.setStatus('mandatory')
if mibBuilder.loadTexts: systemDescr.setDescription('The description of the System ')
switchType = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 10), SwitchType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('mandatory')
if mibBuilder.loadTexts: switchType.setDescription('The Switch Type : (National/International) ')
switchNameStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchNameStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchNameStatus.setDescription("Current Status (configurational Status) of this Switch Name. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the GET Operation, the possible options are 1) active 2) notinservice 3) no")
switchPcInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: switchPcInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: switchPcInfoTable.setDescription('Switch Point code Information Table.The index of this table is switchPc (Integer). ')
switchPcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchPc"))
if mibBuilder.loadTexts: switchPcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: switchPcEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
switchPc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPc.setStatus('mandatory')
if mibBuilder.loadTexts: switchPc.setDescription('Point Code for the switch (the Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
switchPcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1, 2), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPcMode.setStatus('mandatory')
if mibBuilder.loadTexts: switchPcMode.setDescription('Point Code type (ANSI/ITU) ')
switchPcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchPcStatus.setDescription("Current Status (configurational Status) of this Switch Point Code. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservic")
switchUserCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: switchUserCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserCfgTable.setDescription('This Table is to maintain the User information and providing Validation Checks for Authorised users for Configuration.The index of this table is switchUserId (Integer). CURRENTLY NOT APPLICABLE ')
switchUserCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchUserId"))
if mibBuilder.loadTexts: switchUserCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. CURRENTLY NOT APPLICABLE ')
switchUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserId.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserId.setDescription("The Id of the Switch User. The user can only 'SET' User Id. If user tries to 'GET' the user Id, incorrect value would be displayed. This Feature is CURRENTLY NOT APPLICABLE ")
switchUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserName.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserName.setDescription("The NAME of the Switch User. The user can only 'SET' User NAME. If user tries to 'GET' the user Id, incorrect value would be displayed. This Feature is CURRENTLY NOT APPLICABLE ")
switchUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserPassword.setDescription('The PASSWORD of the Switch User. This is in an encrypted format. This is not visible to user.The user can only set password . This Feature is CURRENTLY NOT APPLICABLE ')
switchUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 4), UserLoginPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserPriority.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserPriority.setDescription('The PRIORITY of the Switch User. User Priority by default is ADMINISTRATOR. This Feature is CURRENTLY NOT APPLICABLE ')
switchUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 3, 1, 1, 5), UserLoginStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchUserStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchUserStatus.setDescription('Checks whether user is a valid user. Only the user with administrative privilege can login. This Feature is CURRENTLY NOT APPLICABLE ')
switchVerLM = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerLM.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerLM.setDescription("Switch's Process LM Version number ")
switchVerMTP2 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerMTP2.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerMTP2.setDescription("Switch's Process MPT2 Version number ")
switchVerICC = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerICC.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerICC.setDescription("Switch's Process ICC Version number ")
switchVerSIG = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerSIG.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerSIG.setDescription("Switch's Process SIG Version number ")
switchVerISDN = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerISDN.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerISDN.setDescription("Switch's Process ISDN Version number ")
switchVerSPHR = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 1, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchVerSPHR.setStatus('mandatory')
if mibBuilder.loadTexts: switchVerSPHR.setDescription("Switch's Process SPHR Version number ")
ss7LinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: ss7LinkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkCfgTable.setDescription('SS7 Link Table. Information about the SS7 Link(s) in MSSC are provided in this table. The index of this table is ss7LinkName (String) ')
ss7LinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7LinkName"))
if mibBuilder.loadTexts: ss7LinkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkName.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkName.setDescription('Link name. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 15 characters. ')
ss7LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkId.setDescription('User assigned Link id. Can be any integer 1-65535. ')
ss7LinkTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkTrunkId.setDescription('User assigned Trunk id. ')
ss7LinkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkChannel.setDescription('User assigned channel. ')
ss7LinkSlc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkSlc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkSlc.setDescription('Link Selection Code. Can be any integer 0-15. ')
ss7LinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 6), LinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LinkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkSpeed.setDescription('SS7 Link Speed: Possible Values are: 56k or 64k. Default Value is 64K ')
ss7LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 7), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkMode.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkMode.setDescription('Link Mode(ANSI/ITU) ')
ss7LinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkRowStatus.setDescription("Current Status (configurational Status) of this Link. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) notread")
ss7LinkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 1, 1, 9), LinkOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LinkOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkOpStatus.setDescription("Current Status (Operational Status) of this SS7 Link. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down 3) inhibit ")
ss7AtmLinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: ss7AtmLinkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmLinkCfgTable.setDescription('SS7 Atm Link Table. Information about the Atm Link(s) in MSSC are provided in this table. This table has two indices. The indices are ss7AtmVpi and ss7AtmVci (both Integer). ')
ss7AtmLinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7AtmVpi"), (0, "ARMILLAIRE2000-MIB", "ss7AtmVci"))
if mibBuilder.loadTexts: ss7AtmLinkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmLinkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7AtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmVpi.setDescription('Atmlink Virtual Path Identifier. ')
ss7AtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmVci.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmVci.setDescription('Atmlink Virtual Channel Identifier. ')
ss7AtmLnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmLnkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmLnkId.setDescription('Atmlink Id. ')
ss7AtmXconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmXconnectId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmXconnectId.setDescription('Xconnect Id. ')
ss7AtmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmSlotId.setDescription('Slot Id. ')
ss7AtmPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmPortId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmPortId.setDescription('Port Id. ')
ss7AtmChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmChnlId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmChnlId.setDescription('Channel Id. ')
ss7AtmTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmTrnkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmTrnkId.setDescription('Atm Trunk Id. ')
ss7AtmPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 9), AtmIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmPhyType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmPhyType.setDescription('SS7 ATM Physical interface type. The value of this object could be 1) T1 (interface - t1) 2) E1 (interface - e1).')
ss7AtmLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7AtmLinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmLinkRowStatus.setDescription("Current ATM Status (configurational Status) of this Link. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) not")
ss7AtmLinkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 2, 1, 11), LinkOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7AtmLinkOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7AtmLinkOpStatus.setDescription("Current Status (Operational Status) of this SS7 Atm Link. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down 3) inhibit ")
ss7LinksetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: ss7LinksetCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetCfgTable.setDescription('SS7 Linkset Table. Information about the Linkset(s) in MSSC are provided in this table. This table has the index ss7LinksetLinkId (Integer). ')
ss7LinksetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7LinksetLinkId"))
if mibBuilder.loadTexts: ss7LinksetCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7LinksetLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetLinkId.setDescription('Link id. Can be any integer 1-65535. ')
ss7LinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetId.setDescription('Linkset id. Can be any integer 1-128. ')
ss7LinksetName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetName.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetName.setDescription('Linkset name. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 15 characters. ')
ss7LinksetAdjDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetAdjDpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetAdjDpc.setDescription('Adjacent Point Code for this Linkset (the Integer value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7LinksetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 5), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetMode.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetMode.setDescription('Linkset Type(ANSI/ITU) ')
ss7LinksetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LinksetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetRowStatus.setDescription("Current Status (configurational Status) of this Link. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) notread")
ss7LinksetOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 3, 1, 7), LinkSetOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LinksetOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetOpStatus.setDescription("Current Status (Operational Status) of this Link Set. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) deactive ")
ss7LinksetMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4), )
if mibBuilder.loadTexts: ss7LinksetMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetMgmtTable.setDescription('SS7 Linkset Management Table. The Management Commands for Linkset in MSSC are provided in this table. This table has the index linksetId (Integer). ')
ss7LinksetMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "linksetId"))
if mibBuilder.loadTexts: ss7LinksetMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinksetMgmtEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
linksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linksetId.setStatus('mandatory')
if mibBuilder.loadTexts: linksetId.setDescription('SS7 Linkset Id ')
linksetLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1, 2), Level()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linksetLevel.setStatus('mandatory')
if mibBuilder.loadTexts: linksetLevel.setDescription('This option deactivates the linkset at level 1 or level 2. Level 2 is for layer 2 only. The option available are: 1) Level 1 (level-1) [Default] 2) Level 2 (level-2) ')
linksetMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 4, 1, 3), LinkSetControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linksetMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: linksetMgmntCmd.setDescription('Management Command for Activing/DeActiving call on this linkset. The possible options are : 1) Active 2) Deactive 3) Noaction [default] ')
ss7LinkMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5), )
if mibBuilder.loadTexts: ss7LinkMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkMgmntTable.setDescription('SS7 Link Management Table. The Management Commands for Link(s) in MSSC are provided in this table. This table has the index linkName (String). ')
ss7LinkMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "linkName"))
if mibBuilder.loadTexts: ss7LinkMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LinkMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('mandatory')
if mibBuilder.loadTexts: linkName.setDescription('SS7 Link Name ')
linkMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 1, 5, 1, 2), LinkControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: linkMgmntCmd.setDescription('Management Command for Inhibiting/UnInhibiting link. The possible options are : 1) Inhibit 2) UnInhibit 3) Noaction [default] ')
trunkGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1), )
if mibBuilder.loadTexts: trunkGrpCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpCfgTable.setDescription('SS7/ISDN Trunk Group Table. The Information about Trunk Groups in MSSC are provided in this table. This table has the index trunkGrpId (Integer). ')
trunkGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "trunkGrpId"))
if mibBuilder.loadTexts: trunkGrpCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
trunkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpId.setDescription('Denotes Id for this trunk group. Range for Id is 1-65535. ')
trunkGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpName.setDescription('Denotes Name of this trunk group. The Name is a string of length 8. The first two characters of Name have to be alphabhets. The next 6 charecters are numeric. An example a valid Trunk Group Name is ab123456. NOTE: This format needs to be strictly foll')
trunkGrpCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpCarrierId.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpCarrierId.setDescription('Denotes Carrier id for this trunk group. The Carrier id Field is an integer of length 4. An example for Carried Id is: 1234 NOTE: The format for sertting the Carrier Id needs to strictly followed. Failure to follow this format will result in unsucces')
trunkGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 4), TrnkGrpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpType.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpType.setDescription('Denotes Trunk group type. Possible values for Trunk group are: 1. ss7 2. isdn ')
trunkGrpRoffName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 5), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpRoffName.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpRoffName.setDescription('Denotes Remote Office Name: NOTE: Value for this object is NOT Valid if TrunkGrpType is ISDN. Only Valid For SS7 TrunkGroup. If trunkGrpType is ISDN and the USER sets the value for Remote Office Name, then this Remote Office Name will be ignored when ')
trunkGrpRoffType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 6), RoffType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpRoffType.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpRoffType.setDescription('Denotes Remote Office Type: NOTE: Value for this object is NOT Valid if TrunkGrpType is ISDN. Remote Office Type is only Valid For SS7 TrunkGroup.If trunkGrpType is ISDN and the USER sets the value for Remote Office Type, then this value is ignored w')
trunkGrpCdrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 7), CdrFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpCdrFlag.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpCdrFlag.setDescription('Denotes Cdr Flag : Possible values are: 0) noCdr -> default (No CDR file is required) 1) IC -> for Incoming calls 2) OG -> for Outgoing calls 3) BI -> for both the Incoming and outgoing calls ')
trunkGrpNoOfTrunks = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGrpNoOfTrunks.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpNoOfTrunks.setDescription('Denotes the Number Of Trunks that are contained in this trunk Group ')
trunkGrpVoicePcm = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 9), VoicePcm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpVoicePcm.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpVoicePcm.setDescription('')
trunkGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpRowStatus.setDescription("Current Status (configurational Status) of this Trunk Group. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) ")
trunkGrpOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 3, 1, 1, 11), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGrpOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGrpOpStatus.setDescription("Current Status (Operational Status) of this Trunk Group. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
ss7TrunkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: ss7TrunkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkCfgTable.setDescription('ISDN Trunk Table. The Information about ISDN Trunk(s) in MSSC are provided in this table. This table has the index ss7TrunkId (Integer). ')
ss7TrunkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7TrunkId"))
if mibBuilder.loadTexts: ss7TrunkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7TrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkId.setDescription('Id for the trunk. Can be any integer 1-65535. ')
ss7TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkName.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkName.setDescription('Name for the trunk. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 15 characters. ')
ss7TrunkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkGrpId.setDescription('Id of the trunk group to which the trunk belongs. Can be any integer 1-65535. ')
ss7TrunkXconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkXconnectId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkXconnectId.setDescription('Xconnect id ')
ss7TrunkSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkSlotId.setDescription('Slot id ')
ss7TrunkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkPortId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkPortId.setDescription('Port id ')
ss7TrunkOpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkOpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkOpc.setDescription('Originating point code (the Integer value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7TrunkDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDpc.setDescription('Destination point code ( the Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7TrunkPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 9), IfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkPhyType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkPhyType.setDescription('Physical Interface Type possible options are 1) T1 (interface-t1) 2) T3 (interface-t3) 3) Unchannelized T3 (interface-ut3) 4) OC3 (interface-oc3) 5) Unchannelized T3 with compression (interface-ut3cp) 6) OC3 with compression (interface-oc3cp) 7) E')
ss7TrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 10), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkMode.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkMode.setDescription('Trunk mode - ANSI/ITU ')
ss7TrunkE1MultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 11), E1MultiFrame()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkE1MultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkE1MultiFrame.setDescription('E1 multiFrame Type possible options are 1) CAS(1) 2) CCS(2)')
ss7TrunkE1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 12), E1CRC4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkE1CRC4.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkE1CRC4.setDescription('E1 Cyclic Redundancy Code, possible options are 1) enabled(1) 2) disable(2)')
ss7TrunkE1TransClk = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 13), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkE1TransClk.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkE1TransClk.setDescription('E1 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 14), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS1LineType.setDescription('DS1 Line Type possible options are 1) esF(1) 2) d4(2)')
ss7TrunkDS1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 15), DS1LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS1LineCoding.setDescription('DS1 Line Coding, possible options are 1) b8zs(1) 2) ami(2)')
ss7TrunkDS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 16), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS1TransClkSrc.setDescription('DS1 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkDS1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 17), DS1LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS1LBO.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS1LBO.setDescription('DS1 Line Build Out, possible options are 1) upTo133Feet(1) 2) upTo266Feet(2) 3) upTo399Feet(3) 4) upTo533Feet(4) 5) upTo655Feet(5) 6) negative7_5Db(6) 7) negative15Db(7) 8) negative22_5Db(8)')
ss7TrunkDS3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 18), DS3LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3LineType.setDescription('DS3 Line Type possible options are 1) cbitParity(1) 2) clearChannel(2)')
ss7TrunkDS3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 19), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3TransClkSrc.setDescription('DS3 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkDS3LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 20), DS3LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3LBO.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3LBO.setDescription('DS3 Line Build Out possible options are 1) short(1) 2) long(2)')
ss7TrunkDS3DS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 21), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3DS1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3DS1LineType.setDescription('DS3DS1 Line Type possible options are 1) esF(1) 2) d4(2)')
ss7TrunkDS3DS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 22), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3DS1TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3DS1TransClkSrc.setDescription('DS3DS1ansmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkOC3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 23), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkOC3TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkOC3TransClkSrc.setDescription('OC3 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkUNCHE3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 24), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkUNCHE3TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkUNCHE3TransClkSrc.setDescription('UNCHANNELIZED E3 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkDS3ATMLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 25), DS3LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMLineType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3ATMLineType.setDescription('DS3-ATM Line Type possible options are 1) cbitParity(1) 2) clearChannel(2)')
ss7TrunkDS3ATMCellMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 26), DS3ATMCellMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMCellMap.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3ATMCellMap.setDescription('DS3-ATM Cell Mapping, possible options are 1) plcp(1) 2) directMapping(2)')
ss7TrunkDS3ATMTransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 27), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMTransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3ATMTransClkSrc.setDescription('DS3-ATM transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
ss7TrunkDS3ATMLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 28), DS3LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkDS3ATMLBO.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkDS3ATMLBO.setDescription('DS3-ATM Line Build Out possible options are 1) short(1) 2) long(2)')
ss7TrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 29), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7TrunkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkRowStatus.setDescription("Current Status (configurational Status) of this SS7 Trunk. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) no")
ss7TrunkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 1, 1, 30), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7TrunkOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7TrunkOpStatus.setDescription("Current Status (Operational Status) of this SS7 Trunk. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
ss7CktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: ss7CktCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktCfgTable.setDescription('SS7 Circuit Table. The Information about SS7 Circuit(s) in MSSC are provided in this table. This table has two indices: ss7CktTrunkId and ss7CktChnlId (both Integer). ')
ss7CktCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktTrunkId"), (0, "ARMILLAIRE2000-MIB", "ss7CktChnlId"))
if mibBuilder.loadTexts: ss7CktCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7CktTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTrunkId.setDescription('User Assigned Trunk id. ')
ss7CktChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktChnlId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktChnlId.setDescription('User Assigned Channel id ')
ss7CktId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktId.setDescription('Circuit id. The Id assingned to each of the circuits for a particular Trunk. ')
ss7CktDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktDpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktDpc.setDescription('Destination Point Code (The Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7CktCic = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktCic.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktCic.setDescription('Circuit identifier code. Can be any integer from 1) 1-4095 for ITU 2) 1-16383 for ANSI ')
ss7CktDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 6), Direction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktDir.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktDir.setDescription('Traffic direction: Possible options are : 1) IN 2) OUT 3) BOTH ')
ss7CktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktPriority.setDescription('Traffic priority ')
ss7CktT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT3.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT3.setDescription('T3 timer. Default Value is 0 milliSeconds ')
ss7CktT12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT12.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT12.setDescription('T12 timer - blocking sent. Default Value is 40 milliSeconds ')
ss7CktT13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(60)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT13.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT13.setDescription('T13 timer - initial blocking sent. Default Value is 600 milliSeconds ')
ss7CktT14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT14.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT14.setDescription('T14 timer - unblocking sent. Default Value is 40 milliSeconds ')
ss7CktT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(60)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT15.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT15.setDescription('T15 timer - initial unblocking sent. Default Value is 600 milliSeconds ')
ss7CktT16 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT16.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT16.setDescription('T16 timer - reset sent. Default Value is 40 milliSeconds ')
ss7CktT17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(60)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktT17.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktT17.setDescription('T17 timer - initial reset sent. Default Value is 600 milliSeconds ')
ss7CktTVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTVal.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTVal.setDescription('TVal timer - initial reset sent. Default Value is 100 milliSeconds ')
ss7CktRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 16), CktRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktRowStatus.setDescription("Current Status (configurational Status) of this SS7 Circuit. To Configure this circuit, the only option is 'CREATEANDWAIT'. To Delete this circuit, the only option is 'DESTROY'. To Modify any of the Circuit Timers, the only option is 'MODIFYTIMER'. Fo")
ss7CktOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 2, 1, 17), CktOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktOpStatus.setDescription("Current Status (Operational Status) of this SS7 Circuit. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down 3) block ")
ss7CICTimerTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ss7CICTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CICTimerTable.setDescription('SS7 Circuit CIC Timer Table. The Information about SS7 Circuit(s) Timers in MSSC are provided in this table.User can Modify any Timer(s) in this table. This table has two indices: ss7CktTmrDpc and ss7CktTmrCic (both Integer). ')
ss7CicTmrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktTmrDpc"), (0, "ARMILLAIRE2000-MIB", "ss7CktTmrCic"))
if mibBuilder.loadTexts: ss7CicTmrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CicTmrEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7CktTmrDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrDpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrDpc.setDescription('Destination Point Code (The Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7CktTmrCic = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrCic.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrCic.setDescription('Circuit identifier code. Can be any integer 1-65535. ')
ss7CktTmrT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT3.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT3.setDescription('T3 timer. Default Value is 0 milliSeconds ')
ss7CktTmrT12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT12.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT12.setDescription('T12 timer - blocking sent. Default Value is 40 milliSeconds ')
ss7CktTmrT13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT13.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT13.setDescription('T13 timer - initial blocking sent. Default Value is 600 milliSeconds ')
ss7CktTmrT14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT14.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT14.setDescription('T14 timer - unblocking sent. Default Value is 40 milliSeconds ')
ss7CktTmrT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT15.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT15.setDescription('T15 timer - initial unblocking sent. Default Value is 600 milliSeconds ')
ss7CktTmrT16 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT16.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT16.setDescription('T16 timer - reset sent. Default Value is 40 milliSeconds ')
ss7CktTmrT17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrT17.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrT17.setDescription('T17 timer - initial reset sent. Default Value is 600 milliSeconds ')
ss7CktTmrTVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrTVal.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrTVal.setDescription('TVal timer - initial reset sent. Default Value is 100 milliSeconds ')
ss7CktTmrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 3, 1, 11), ModifyTmrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktTmrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktTmrRowStatus.setDescription("This is a command to MODIFY a Timer. A 'GET' operation on this object will display the default value [no action]. The possible option for 'SET' operation is: 1)modify ")
ss7BCktCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4), )
if mibBuilder.loadTexts: ss7BCktCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktCfgTable.setDescription('SS7 B-Circuit Table. The Information about SS7 B-Circuit(s) in MSSC are provided in this table.This table has two indices: ss7BCktVpi and ss7BCktVci (both Integer). ')
ss7BCktCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7BCktVpi"), (0, "ARMILLAIRE2000-MIB", "ss7BCktVci"))
if mibBuilder.loadTexts: ss7BCktCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7BCktVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktVpi.setDescription('Broadband Virtual Path Indentifier. Can be any integer 1-65535. ')
ss7BCktVci = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktVci.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktVci.setDescription('Broadband Virtual Channel Identifier. Can be any integer 1-65535. ')
ss7BCktTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktTrunkId.setDescription('Trunk id. ')
ss7BCktDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktDpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktDpc.setDescription('Broadband Circuit Destination Point Code (The Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7BCktCic = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktCic.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktCic.setDescription('Circuit identifier code. Can be any integer from : 1) 1-16383 for ANSI 2) 1-4095 for ITU ')
ss7BCktDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 6), Direction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktDir.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktDir.setDescription('Denotes Traffic direction. Possible Values are: 1) in 2) out 3) both ')
ss7BCktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktPriority.setDescription('Traffic priority ')
ss7BCktT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT3.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT3.setDescription('T3 timer. Default Value is 0 milliSeconds ')
ss7BCktT12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT12.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT12.setDescription('T12 timer - blocking sent. Default Value is 40 milliSeconds ')
ss7BCktT13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT13.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT13.setDescription('T13 timer - initial blocking sent. Default Value is 600 milliSeconds ')
ss7BCktT14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT14.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT14.setDescription('T14 timer - unblocking sent. Default Value is 40 milliSeconds ')
ss7BCktT15 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT15.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT15.setDescription('T15 timer - initial unblocking sent. Default Value is 600 milliSeconds ')
ss7BCktT16 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT16.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT16.setDescription('T16 timer - reset sent. Default Value is 40 milliSeconds ')
ss7BCktT17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktT17.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktT17.setDescription('T17 timer - initial reset sent. Default Value is 600 milliSeconds ')
ss7BCktTVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktTVal.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktTVal.setDescription('TVal timer - initial reset sent. Default Value is 100 milliSeconds ')
ss7BCktRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 16), CktRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7BCktRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktRowStatus.setDescription("Current Status (configurational Status) of this SS7 B-Circuit. To Configure this circuit, the only option is 'CREATEANDWAIT'. To Modify any of the timers the only option is 'MODIFYTIMER' . To Delete this circuit, the only option is 'DESTROY'. For the ")
ss7BCktOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 4, 1, 17), CktOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7BCktOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7BCktOpStatus.setDescription("Current Status (Operational Status) of this SS7 B-Circuit. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down 3) block ")
ss7CktMgmntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5))
ss7CktMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: ss7CktMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmntTable.setDescription('SS7 Circuit Management Table. The Management Commands for SS7 Circuits(s) in MSSC are provided in this table. This table has two indices: ss7CktMgmntTrnkId and ss7CktMgmntChnlId (both Integer). ')
ss7CktMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktMgmntTrnkId"), (0, "ARMILLAIRE2000-MIB", "ss7CktMgmntChnlId"))
if mibBuilder.loadTexts: ss7CktMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7CktMgmntTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmntTrnkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmntTrnkId.setDescription('Trunk id. ')
ss7CktMgmntChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmntChnlId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmntChnlId.setDescription('Channel id ')
ss7CktMgmntRepNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktMgmntRepNum.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmntRepNum.setDescription('Repeat Number for this operation. This option will allow consecutive CIC to be reset ')
ss7CktMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 1, 1, 4), BlockOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmntCmd.setDescription('Management Command for Blocking/Unblocking any call setup on the specified channel. The option of repnum is provided to allow consecutive CIC to be blocked/unblocked The possible options are : 1) Block 2) UnBlock 3) Noaction [default] ')
ss7CICMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: ss7CICMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CICMgmntTable.setDescription('SS7 Circuit CIC Management Table. The Management Commands for SS7 Circuits(s) in MSSC are provided in this table. This table has two indices: ss7CktMgmtDPC and ss7CktMgmtCIC (both Integer). ')
ss7CICMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7CktMgmtDPC"), (0, "ARMILLAIRE2000-MIB", "ss7CktMgmtCIC"))
if mibBuilder.loadTexts: ss7CICMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CICMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7CktMgmtDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmtDPC.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmtDPC.setDescription('Destination Point Code (The Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7CktMgmtCIC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7CktMgmtCIC.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktMgmtCIC.setDescription('Circuit identifier code. Can be any integer from 1) 1-4095 for ITU 2) 1-16383 for ANSI ')
ss7CktRepNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CktRepNum.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CktRepNum.setDescription('Repeat Number for this operation. This option will allow consecutive CIC to be reset ')
ss7CicRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CicRange.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CicRange.setDescription('Range for this operation. This option will allow consecutive CIC to be reset ')
ss7CICMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 2, 5, 2, 1, 5), CircuitControlStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7CICMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: ss7CICMgmntCmd.setDescription('Management Command for Blocking/Unblocking any call setup on the specified channel. The option of repnum is provided to allow consecutive CIC to be blocked/unblocked The possible options are : 1) Block 2) UnBlock [default] ')
mtp2LinkTmrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: mtp2LinkTmrCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2LinkTmrCfgTable.setDescription('MTP2 Link Timer Table. The Information about MTP2 Link Timers in MSSC are provided in this table. User can Modify Timer(s) from this table. This table has one index: mtp2LinkId (Integer). ')
mtp2LinkTmrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "mtp2LinkId"))
if mibBuilder.loadTexts: mtp2LinkTmrCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2LinkTmrCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
mtp2LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2LinkId.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2LinkId.setDescription('Link id. Can be any integer 1-65535. ')
mtp2T1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(13000, 50000)).clone(13000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T1.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T1.setDescription('t1 timer - for aligned ready condition GR-606-CORE, ISSUE 1, June 1994. Default Value is 13000 milliSeconds ')
mtp2T2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 50000)).clone(11500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T2.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T2.setDescription('t2 timer - Timer for out-of-alignment GR-606-CORE, ISSUE 1, June 1994. Default Value is 11500 milliSeconds ')
mtp2T3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 15000)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T3.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T3.setDescription('t3 timer - Timer for aligned condition GR-606-CORE, ISSUE 1, June 1994. Default Value is 11500 milliSeconds ')
mtp2T4n = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2070, 9500)).clone(2070)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T4n.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T4n.setDescription('t4n timer - Normal proving period GR-606-CORE, ISSUE 1, June 1994. Default Value is 2000 milliSeconds ')
mtp2T4e = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 600)).clone(400)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T4e.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T4e.setDescription('t4e timer - Emergency proving period GR-606-CORE, ISSUE 1, June 1994. Default Value is 500 milliSeconds ')
mtp2T5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 120)).clone(80)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T5.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T5.setDescription('t5 timer - Busy status transmission interval GR-606-CORE, ISSUE 1, June 1994. Default Value is 100 milliSeconds ')
mtp2T6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 6000)).clone(3000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T6.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T6.setDescription('t6 timer - Supervision of remote congestion timer GR-606-CORE, ISSUE 1, June 1994. Default Value is 3000 milliSeconds ')
mtp2T7 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 2000)).clone(500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2T7.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2T7.setDescription('t7 timer - Excessive delay of ack GR-606-CORE, ISSUE 1, June 1994. Default Value is 500 milliSeconds ')
mtp2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 10), TmrRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp2RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2RowStatus.setDescription("Current Status (configurational Status) of this MTP2 Link Timer. To Modify any Timer for this link, the only option is 'MODIFYTIMER'. For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) notready 4) modified 5) up 6) down")
mtp2OpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 3, 1, 1, 11), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp2OpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mtp2OpStatus.setDescription("Current Status (Operational Status) of this MTP2 Link Timer. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
mtp3T15 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 3000)).clone(2000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T15.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T15.setDescription('T15 timer - Signal route set congestion test interval GR-606-CORE, ISSUE 1, June 1994. Default Value is 3000 milliSeconds ')
mtp3T16 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1400, 2000)).clone(2000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T16.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T16.setDescription('T16 timer - Transfer controlled update GR-606-CORE, ISSUE 1, June 1994. Default Value is 1400 milliSeconds ')
mtp3T18 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(600)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T18.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T18.setDescription('T18 timer - Timer for links to become available. Not Applicable to ANSI. Default Value is 1400 milliSeconds ')
mtp3T19 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(67000, 69000)).clone(67000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T19.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T19.setDescription('T19 timer - Timer to receive all traffic restart. Not Applicable to ANSI. Default Value is 0 ')
mtp3T20 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(59000, 61000)).clone(590000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T20.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T20.setDescription('T20 timer - BroadCast traffic restart interval. Not Applicable to ANSI. ')
mtp3T21 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(63000, 65000)).clone(63000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T21.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T21.setDescription('T21 timer - Interval to restart traffic route through adjacent SP ')
mtp3T26 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12000, 15000)).clone(12000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T26.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T26.setDescription('T26 timer - Timer at restarting SP waiting to repeat TRW GR-606-CORE, ISSUE 1, June 1994. Default Value is 13500 milliSeconds ')
mtp3T30 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 35000)).clone(30000)).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3T30.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T30.setDescription('T30 timer - Route Instance timer ')
mtp3GenTmrRowStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 1, 9), ModifyTmrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3GenTmrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3GenTmrRowStatus.setDescription("This is a command to MODIFY a Timer. A 'GET' operation on this object will display the default value [no action]. The possible option for 'SET' operation is: 1)modify ")
mtp3LinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: mtp3LinkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3LinkCfgTable.setDescription('MTP3 Link Timer Table. The Information about MTP3 Link Timers in MSSC are provided in this table. User can Modify Timer(s) from this table. This table has one index: mtp3LinkId (Integer). ')
mtp3LinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "mtp3LinkId"))
if mibBuilder.loadTexts: mtp3LinkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3LinkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
mtp3LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3LinkId.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3LinkId.setDescription('Link id GR-606-CORE, ISSUE 1, June 1994 ')
mtp3T1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T1.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T1.setDescription('T1 timer - Transmission delay following changeover GR-606-CORE, ISSUE 1, June 1994. Default Value is 500 milliSeconds ')
mtp3T2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(700, 2000)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T2.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T2.setDescription('T2 timer - changeover ack timer GR-606-CORE, ISSUE 1, June 1994. Default Value is 700 milliSeconds ')
mtp3T3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T3.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T3.setDescription('T3 timer - Transmission delay following changeback GR-606-CORE, ISSUE 1, June 1994. Default Value is 500 milliSeconds ')
mtp3T4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T4.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T4.setDescription('T4 timer - Changeback ack timer (first attempt) GR-606-CORE, ISSUE 1, June 1994. Default is 500 milliSeconds ')
mtp3T5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T5.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T5.setDescription('T5 timer - Changeback ack timer (subsequent attempt) GR-606-CORE, ISSUE 1, June 1994. Default is 500 milliSeconds ')
mtp3T6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200)).clone(500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T6.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T6.setDescription('T6 timer - Controlled rerouting transmission delay GR-606-CORE, ISSUE 1, June 1994. Default Value is 500 milliSeconds ')
mtp3T7 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 1200))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3T7.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T7.setDescription('T7 Timer - Link connection ack timer ')
mtp3T12 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T12.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T12.setDescription('T12 timer - Uninhibit acknowledge timer GR-606-CORE, ISSUE 1, June 1994. Default Value is 1000 milliSeconds ')
mtp3T13 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T13.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T13.setDescription('T13 timer - Forced uninhibit ack timer GR-606-CORE, ISSUE 1, June 1994. Default Value is 1000 milliSeconds. ')
mtp3T14 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 3000)).clone(3000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T14.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T14.setDescription('T14 timer - Inhibit ack timer GR-606-CORE, ISSUE 1, June 1994. Default Value is 3000 milliSeconds ')
mtp3T17 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(800, 1500)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T17.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T17.setDescription('T17 timer - Timing to restart of initial alignment GR-606-CORE, ISSUE 1, June 1994. Default Value is 1000 milliSeconds ')
mtp3T22 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 360)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T22.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T22.setDescription('T20 timer - Waiting to repeat local inhibit test. Default Value is 10000 milliSeconds ')
mtp3T23 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 360)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T23.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T23.setDescription('T21 timer - Waiting to repeat remote inhibit test. Default Value is 10000 milliSeconds ')
mtp3T24 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5000)).clone(5000)).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3T24.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T24.setDescription('T24 timer - Stabilizing timer. ')
mtp3T31 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T31.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T31.setDescription('T31 timer - Timer to detect a link in false link congestion. GR-606-CORE, ISSUE 1, June 1994. Default Value is 30000 milliSeconds ')
mtp3T32 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 12)).clone(4)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T32.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T32.setDescription('T32 timer - SLT timer ')
mtp3T33 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T33.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T33.setDescription('T33 timer - Timer to detect a link in false link congestion. GR-606-CORE, ISSUE 1, June 1994. Default Value is 30000 milliSeconds ')
mtp3T34 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 90)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T34.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T34.setDescription('T34 timer - Timer to detect a link in false link congestion. GR-606-CORE, ISSUE 1, June 1994. Default Value is 30000 milliSeconds ')
mtp3T35 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T35.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T35.setDescription('T35 timer - periodic signalling link test timer GR-606-CORE, ISSUE 1, June 1994. Default Value is 30000 milliSeconds ')
mtp3T36 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T36.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T36.setDescription('T36 timer - Probation timer for link oscillation. Not in bellcore. Default Value is 30000 milliSeconds ')
mtp3T37 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3T37.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3T37.setDescription('T37 timer - Suspension Timer for link oscillation. Not in bellcore. Default Value is 30000 milliSeconds ')
mtp3TFLC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3TFLC.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3TFLC.setDescription('TFLC timer - Flow control request timer. Not in bellcore. ')
mtp3TBND = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3TBND.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3TBND.setDescription('TBND timer - Bind confirm wait timer. Not in bellcore. ')
mtp3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 25), TmrRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtp3RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3RowStatus.setDescription("Current Status (configurational Status) of this MTP3 Link Timer. To Modify any Timer for this link, the only option is 'MODIFYTIMER'. For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) notready 4) modified 5) up 6) down")
mtp3OpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 4, 2, 1, 26), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtp3OpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mtp3OpStatus.setDescription("Current Status (Operational Status) of this MTP3 Link Timer. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
isupTimerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: isupTimerCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: isupTimerCfgTable.setDescription('Isup Timer Table. The Information about ISUPTimers in MSSC are provided in this table. User can Modify Timer(s) from this table. This table has one index: isupTmrSS7Type (TimerType). ')
isupTimerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isupTimerType"))
if mibBuilder.loadTexts: isupTimerCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isupTimerCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isupTimerType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 1), TimerType().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTimerType.setStatus('mandatory')
if mibBuilder.loadTexts: isupTimerType.setDescription('Index for this IsupTimer Table, is an enumerated data type ansi(1), itu(2)')
isupTmrT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT1.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT1.setDescription('T1 timer - release sent, GR-246-CORE, Issue 2, December 1997. Default Value is 4000 milliSeconds ')
isupTmrT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT2.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT2.setDescription('T2 timer - suspend received, GR-246-CORE, Issue 2, December 1997. Default Value is 0 milliSeconds ')
isupTmrT5 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(300)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT5.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT5.setDescription('T5 timer - initial release sent GR-246-CORE, Issue 2, December 1997. Default Value is 60000 milliSeconds ')
isupTmrT6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 32000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT6.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT6.setDescription('T6 timer - suspend received GR-246-CORE, Issue 2, December 1997. Default Value is 10000 milliSeconds ')
isupTmrT7 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 30000)).clone(20000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT7.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT7.setDescription('T7 timer - latest address sent GR-246-CORE, Issue 2, December 1997. Default Value is 20000 milliSeconds ')
isupTmrT8 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 15000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT8.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT8.setDescription('T8 - timer initial address received GR-246-CORE, Issue 2, December 1997. Default Value is 10000 milliSeconds ')
isupTmrT9 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 240)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT9.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT9.setDescription('T9 timer - latest address sent after ACM GR-246-CORE, Issue 2, December 1997. Default Value is 120000 milliSeconds ')
isupTmrT18 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(15000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT18.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT18.setDescription('T18 timer - group blocking sent GR-246-CORE, Issue 2, December 1997. Default Value is 4000 milliSeconds ')
isupTmrT19 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(300)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT19.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT19.setDescription('T19 timer - initial group blocking sent GR-246-CORE, Issue 2, December 1997. Default Value is 60000 milliSeconds ')
isupTmrT20 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(15000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT20.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT20.setDescription('T20 timer - group unblocking sent GR-246-CORE, Issue 2, December 1997. Default Value is 4000 milliSeconds ')
isupTmrT21 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT21.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT21.setDescription('T21 timer - initial group unblocking sent GR-246-CORE, Issue 2, December 1997. Default Value is 60000 milliSeconds ')
isupTmrT22 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 60000)).clone(15000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT22.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT22.setDescription('T22 timer - group reset sent GR-246-CORE, Issue 2, December 1997. Default Value is 4000 milliSeconds ')
isupTmrT23 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900)).clone(300)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT23.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT23.setDescription('T23 timer - initial group reset sent GR-246-CORE, Issue 2, December 1997. Default Value is 60000 milliSeconds ')
isupTmrT27 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 24)).clone(18)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT27.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT27.setDescription('T27 timer - waiting for continuity recheck GR-246-CORE, Issue 2, December 1997. Default Value is 200000 milliSeconds ')
isupTmrT28 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 10000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT28.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT28.setDescription('T28 timer - circuit group query sent GR-246-CORE, Issue 2, December 1997. Default Value is 10000 milliSeconds ')
isupTmrT31 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(360, 360)).clone(360)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT31.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT31.setDescription('T31 timer - call reference frozen period GR-246-CORE, Issue 2, December 1997. Default Value is 360000 milliSeconds ')
isupTmrT33 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12000, 15000)).clone(12000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT33.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT33.setDescription('T33 timer - INR sent GR-246-CORE, Issue 2, December 1997. Default Value is 12000 milliSeconds ')
isupTmrT34 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 15000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT34.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT34.setDescription('T34 timer - currently unknown. Default Value is 10000 milliSeconds ')
isupTmrT36 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 4000)).clone(2000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrT36.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrT36.setDescription('T36 timer - waiting for continuity after recheck, in bellcore it is T34 GR-246-CORE, Issue 2, December 1997. Default Value is 2000 milliSeconds ')
isupTmrTCCR = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20000, 24000)).clone(20000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCCR.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTCCR.setDescription('tCCR timer - continuity recheck timer GR-246-CORE, Issue 2, December 1997. Default Value is 20000 milliSeconds ')
isupTmrTEX = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTEX.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTEX.setDescription('TEX timer - Exit to be sent, currently not applicable ')
isupTmrTCRM = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 4000)).clone(3000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCRM.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTCRM.setDescription('TCRM timer - circuit reservation message sent. GR-246-CORE, Issue 2, December 1997. Default Value is 3000 milliSeconds ')
isupTmrTCRA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCRA.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTCRA.setDescription('TCRA timer - circuit reservation acknowledgement sent. GR-246-CORE, Issue 2, December 1997. Default Value is 20000 milliSeconds ')
isupTmrTCCRt = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTCCRt.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTCCRt.setDescription('TCCRt timer - tCCR timer (o/g side). Default Value is 0 milliSeconds ')
isupTmrTECt = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTECt.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTECt.setDescription('tECT timer - Explicit Call Transfer -wait for loop prvnt rsp. Default Value is 0 milliSeconds ')
isupTmrTGTCHG = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTGTCHG.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTGTCHG.setDescription('Timer tGTCHG - Awaiting charging extended acknowledgement after having sent CHGE ')
isupTmrTGRES = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 5000)).clone(5000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTmrTGRES.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTGRES.setDescription('TGRS timer - at receipt of circuit group reset message, treat subsequent circuit group reset messages new only on this timer expiration. ')
isupTmrTFGR = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 120000))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTFGR.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTFGR.setDescription('TFGR timer - first group received timer GR-246-CORE, Issue 2, December 1997 ')
isupTmrTRELRSP = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTRELRSP.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTRELRSP.setDescription('Time tRELRSP - Awaiting for release response. Default Value is 0 milliSeconds ')
isupTmrTFNLRELRS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isupTmrTFNLRELRS.setStatus('mandatory')
if mibBuilder.loadTexts: isupTmrTFNLRELRS.setDescription('Time tFNLRELRSP - Awaiting for final release response. Default Value is 0 milliSeconds ')
isupTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 5, 1, 1, 32), ModifyTmrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isupTimerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isupTimerRowStatus.setDescription("This is a command to MODIFY a Timer. A 'GET' operation on this object will display the default value [no action]. The possible option for 'SET' operation is: 1)modify ")
ss7RtDpcTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: ss7RtDpcTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtDpcTable.setDescription('SS7 Route Dpc Table. The Information about Route(s) in MSSC are provided in this table. This table has one index: ss7RtDPC (Integer). ')
ss7RtDpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7RtDPC"))
if mibBuilder.loadTexts: ss7RtDpcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtDpcEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7RtDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtDPC.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtDPC.setDescription('The Route Destination Point Code (The Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
ss7RtCmbLinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtCmbLinksetId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtCmbLinksetId.setDescription("SS7 Linkset Id which is already configured so far. An incorrect Linkset Id will result a failure at the time of 'CREATION' of the Route table for the specified DPC. ")
ss7RtLoadShareType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 3), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtLoadShareType.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtLoadShareType.setDescription('Load Share type(ANSI/ITU) ')
ss7RtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RtRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtRowStatus.setDescription("Current Status (configurational Status) of this SS7 Route. To Configure this Route, the only option is 'CREATEANDWAIT'. To Delete this Route, the only option is 'DESTROY'. For the 'GET' Operation, the possible options are 1) active 2) notinservice 3")
ss7RtOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 1, 6, 1, 1, 5), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7RtOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RtOpStatus.setDescription("Current Status (Operational Status) of this SS7 Route. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
isdnTmrCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: isdnTmrCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrCfgTable.setDescription('ISDN Timer Table. The Information about ISDN Timers in MSSC are provided in this table. User can Modify Timer(s) from this table. This table has one index: isdnTnkId (Integer). ')
isdnTmrCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTnkId"))
if mibBuilder.loadTexts: isdnTmrCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnTnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTnkId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTnkId.setDescription('Trunk id. ')
isdnTmrT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(180, 420)).clone(180)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT301.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT301.setDescription('T301 timer - alert received Recommandation Q.931, TABLE 9-1/Q931 ')
isdnTmrT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT302.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT302.setDescription('T302 timer - SETUP ACK sent Receipt of INFO Recommandation Q.931, TABLE 9-1/Q931 ')
isdnTmrT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 4000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT303.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT303.setDescription('T303 timer - setup sent Recommandation Q.931, TABLE 9-1/Q931. Default Value is 4000 milliSeconds ')
isdnTmrT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT304.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT304.setDescription('T304 timer - setup ack received info sent alert Recommandation Q.931, TABLE 9-1/Q931. Default Value is 20000 milliSeconds ')
isdnTmrT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 60000)).clone(30000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT305.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT305.setDescription('T305 timer - disc w/ prog ind sent or disc sent Recommandation Q.931, TABLE 9-1/Q931. Default Value is 30000 milliSeconds ')
isdnTmrT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 150)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT306.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT306.setDescription('T306 timer - disc without prog ind sent Recommandation Q.931, TABLE 9-1/Q931. Default Value is 30000 milliSeconds ')
isdnTmrT307 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT307.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT307.setDescription('T307 timer - iusp ack sent Recommandation Q.931, TABLE 9-1/Q931. Default Value is 180000 milliSeconds ')
isdnTmrT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 10000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT308.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT308.setDescription('T308 timer - release sent Recommandation Q.931, TABLE 9-1/Q931. Default Value is 4000 milliSeconds ')
isdnTmrT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 10000)).clone(10000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT310.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT310.setDescription('T310 timer - call proc received Recommandation Q.931, TABLE 9-1/Q931. Default Value is 10000 milliSeconds ')
isdnTmrT311 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrT311.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT311.setDescription('T310 timer - call proc received, not in the network side ')
isdnTmrT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT312.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT312.setDescription('T312 timer - setup sent on broadcast Recommandation Q.931, TABLE 9-1/Q931. Default Value is 6000 milliSeconds ')
isdnTmrT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT313.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT313.setDescription('T313 timer - conn sent, not in BellCore network side ')
isdnTmrT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120)).clone(30)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT316.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT316.setDescription('T316 timer - restart sent interface Recommandation Q.931, TABLE 9-1/Q931. Default Value is 120000 milliSeconds ')
isdnTmrT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT318.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT318.setDescription('T318 timer - resume sent, not in bellcore network side ')
isdnTmrT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT319.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT319.setDescription('T319 timer - suspend sent, not in Bellcore network side ')
isdnTmrT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 10000)).clone(4000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT322.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT322.setDescription('T322 timer - stat enq sent Recommandation Q.931, TABLE 9-1/Q931. Default Value is 4000 milliSeconds ')
isdnTmrT316C = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 120)).clone(30)).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrT316C.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT316C.setDescription('T316c Timer -Restart sent to individual channel ')
isdnTmrT330 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT330.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT330.setDescription('T330 Timer - Congestion with Upper ')
isdnTmrT331 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT331.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT331.setDescription('T331 Timer - Congestion with lower ')
isdnTmrT332 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT332.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT332.setDescription('T332 Timer - Service request sent ')
isdnTmrTRST = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(120)).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrTRST.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrTRST.setDescription('TRst Timer - Disconnect indication sent while restarting interface ')
isdnTmrTREST = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(120)).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrTREST.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrTREST.setDescription('TREST Timer - Disconnect indication sent while NI2 restarting interface ')
isdnTmrTANS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65553))).setUnits('ms').setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTmrTANS.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrTANS.setDescription('TAns Timer - Answer timer ')
isdnTmrT396 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT396.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT396.setDescription('T396 Timer - t303 expired ')
isdnTmrT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTmrT397.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTmrT397.setDescription('T397 Timer - Information sent on permanent signal ')
isdnTrnkTmrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 27), TmrRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrnkTmrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkTmrRowStatus.setDescription("Current Status (configurational Status) of this Isdn Trunk Timer. To Modify any Timer for this Trunk, the only option is 'MODIFYTIMER'. For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) notready 4) modified 5) up 6) do")
isdnTrnkTmrOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 1, 1, 28), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrnkTmrOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkTmrOpStatus.setDescription("Current Status (Operational Status) of this Isdn Timer. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
isdnTrunkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2), )
if mibBuilder.loadTexts: isdnTrunkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkCfgTable.setDescription('ISDN Trunk Table. Information about the ISDN Trunk(s) in MSSC are provided in this table. The index of this table is isdnTrunkId (Integer) ')
isdnTrunkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrunkId"))
if mibBuilder.loadTexts: isdnTrunkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkId.setDescription('Trunk id. Can be any integer 1-65535. ')
isdnTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkName.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkName.setDescription('Trunk name. Can be any combinaton of alphanumeric characters. Spaces are not allowed. ')
isdnTrunkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkGrpId.setDescription('Trunk Group id to which the trunk belongs. Can be any integer 1-65535. ')
isdnDchnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchnlId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDchnlId.setDescription('D-Channel Id ')
isdnTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 5), IsdnType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkType.setDescription('Trunk Type (nfas/fas). ')
isdnXconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnXconnectId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnXconnectId.setDescription('Xconnect id ')
isdnSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnSlotId.setDescription('Slot id ')
isdnPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnPortId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnPortId.setDescription('Port id ')
isdnDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 9), Direction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDirection.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDirection.setDescription('Traffic direction. possible options are 1) in 2) out 3) both ')
isdnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 10), IsdnPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnPriority.setStatus('mandatory')
if mibBuilder.loadTexts: isdnPriority.setDescription('Traffic priority ')
isdnDurthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDurthreshold.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDurthreshold.setDescription('Bad Call Duration Threshold ')
isdnCntthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCntthreshold.setStatus('mandatory')
if mibBuilder.loadTexts: isdnCntthreshold.setDescription('Bad Call Count Threshold ')
isdnPhyIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 13), IfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnPhyIntfType.setStatus('mandatory')
if mibBuilder.loadTexts: isdnPhyIntfType.setDescription('Isdn Physical Interface Type possible options are 1) T1 (interface-t1) 2) T3 (interface-t3) 3) Unchannelized T3 (interface-ut3) 4) OC3 (interface-oc3) 5) Unchannelized T3 with compression (interface-ut3cp) 6) OC3 with compression (interface-oc3cp) ')
isdnDchnlTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDchnlTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDchnlTimeSlot.setDescription('D-Channel Time slot ')
isdnE1MultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 15), E1MultiFrame()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnE1MultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: isdnE1MultiFrame.setDescription('E1 multiFrame Type possible options are 1) CAS(1) 2) CCS(2)')
isdnE1CRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 16), E1CRC4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnE1CRC4.setStatus('mandatory')
if mibBuilder.loadTexts: isdnE1CRC4.setDescription('E1 Cyclic Redundancy Code, possible options are 1) enabled(1) 2) disable(2)')
isdnE1TransClk = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 17), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnE1TransClk.setStatus('mandatory')
if mibBuilder.loadTexts: isdnE1TransClk.setDescription('E1 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
isdnDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 18), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS1LineType.setDescription('DS1 Line Type possible options are 1) esF(1) 2) d4(2)')
isdnDS1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 19), DS1LineCoding()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS1LineCoding.setDescription('DS1 Line Coding, possible options are 1) b8zs(1) 2) ami(2)')
isdnDS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 20), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS1TransClkSrc.setDescription('DS1 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
isdnDS1LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 21), DS1LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS1LBO.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS1LBO.setDescription('DS1 Line Build Out, possible options are 1) upTo133Feet(1) 2) upTo266Feet(2) 3) upTo399Feet(3) 4) upTo533Feet(4) 5) upTo655Feet(5) 6) negative7_5Db(6) 7) negative15Db(7) 8) negative22_5Db(8)')
isdnDS3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 22), DS3LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3LineType.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS3LineType.setDescription('DS3 Line Type possible options are 1) cbitParity(1) 2) clearChannel(2)')
isdnDS3TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 23), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS3TransClkSrc.setDescription('DS3 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
isdnDS3LBO = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 24), DS3LBO()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3LBO.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS3LBO.setDescription('DS3 Line Build Out possible options are 1) short(1) 2) long(2)')
isdnDS3DS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 25), DS1LineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3DS1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS3DS1LineType.setDescription('DS3DS1 Line Type possible options are 1) esF(1) 2) d4(2)')
isdnDS3DS1TransClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 26), TransClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDS3DS1TransClkSrc.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDS3DS1TransClkSrc.setDescription('DS3DS1 Transmit Clock Source, possible options are 1) loopTiming(1) 2) localTiming(2)')
isdnTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 27), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkRowStatus.setDescription("Current Status (configurational Status) of this ISDN TRUNK. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) n")
isdnTrunkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 2, 1, 28), IsdnTrnkOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrunkOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkOpStatus.setDescription("Current Status (Operational Status) of this ISDN Trunk. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down 3) disable ")
isdnChnlStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3), )
if mibBuilder.loadTexts: isdnChnlStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnChnlStatusTable.setDescription('ISDN Channel Status Table. Information about the DS0 Channel(s) Status in MSSC are provided in this table. The index of this table is isdnStatusTrunkId (Integer) ')
isdnChnlStatusCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnStatusTrunkId"), (0, "ARMILLAIRE2000-MIB", "isdnStatusChnlId"))
if mibBuilder.loadTexts: isdnChnlStatusCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnChnlStatusCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnStatusTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnStatusTrunkId.setDescription('')
isdnStatusChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnStatusChnlId.setDescription('Channel id. ')
isdnStatusChnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 3), TrunkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlState.setStatus('mandatory')
if mibBuilder.loadTexts: isdnStatusChnlState.setDescription('Isdn Channel String. ')
isdnStatusChnlAllocMeth = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlAllocMeth.setStatus('mandatory')
if mibBuilder.loadTexts: isdnStatusChnlAllocMeth.setDescription('Isdn Channel AllocMeth. ')
isdnStatusChnlSuConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnStatusChnlSuConnId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnStatusChnlSuConnId.setDescription('Isdn Channel SuConnId. ')
isdnMgmntGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4))
isdnTrnkMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1), )
if mibBuilder.loadTexts: isdnTrnkMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkMgmntTable.setDescription('ISDN Trunk Management Table. The Management Commands for ISDN Trunk(s) in MSSC are provided in this table. This table has the index isdnTrnkMgmntId (Integer). ')
isdnTrnkMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrnkMgmntId"))
if mibBuilder.loadTexts: isdnTrnkMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnTrnkMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrnkMgmntId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkMgmntId.setDescription('Trunk id. ')
isdnTrnkMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 1, 1, 2), IsdnTrnkMgtOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrnkMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkMgmntCmd.setDescription('Management Command for Enabling/Disabling the specified trunk group. This command will make all the channels in this trunk available The possible options are : 1) Enable 2) Disable [default] ')
isdnChnlMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2), )
if mibBuilder.loadTexts: isdnChnlMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnChnlMgmntTable.setDescription('ISDN Trunk Channel Management Table. The Management Commands for ISDN Trunk(s) in MSSC are provided in this table. This table has the index isdnTrunkMgmntId (Integer). ')
isdnChnlMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrunkMgmntId"), (0, "ARMILLAIRE2000-MIB", "isdnChnlMgmntId"))
if mibBuilder.loadTexts: isdnChnlMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnChnlMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnTrunkMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrunkMgmntId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkMgmntId.setDescription('Trunk id. ')
isdnChnlMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnChnlMgmntId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnChnlMgmntId.setDescription('Channel id. ')
isdnChnlMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 2, 1, 3), IsdnChnlMgtOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnChnlMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: isdnChnlMgmntCmd.setDescription('Management Command for Enabling/Disabling the specified Channel in the specified trunk. The possible options are : 1) Enable 2) Disable [default] ')
mfdMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3), )
if mibBuilder.loadTexts: mfdMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: mfdMgmntTable.setDescription('Modem Fault Management Table. The Management Commands for Modem(s) in MSSC are provided in this table. This table has the index isdnTnkMgmntId (Integer). ')
mfdMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTnkMgmntId"))
if mibBuilder.loadTexts: mfdMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mfdMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnTnkMgmntId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTnkMgmntId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTnkMgmntId.setDescription('Isdn Trunk id. ')
isdnDurThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnDurThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: isdnDurThreshold.setDescription('Bad Call Duration Threshold. A value 0 means disable. If mfd is enabled the normal value for this field would be 3 ')
isdnCntThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnCntThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: isdnCntThreshold.setDescription('Bad Call Count Threshold A value 0 means disable. If mfd is enabled the normal value for this field would be 3 ')
mfdMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 2, 4, 3, 1, 4), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfdMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: mfdMgmntCmd.setDescription("Management Command for Enabling/Disabling 'MODEM FAULT DETECTION' feature in MSSC. The possible options are : 1) Enable 2) Disable [default] ")
routeTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1), )
if mibBuilder.loadTexts: routeTable.setStatus('mandatory')
if mibBuilder.loadTexts: routeTable.setDescription('Route Table. Information about the Route(s) in MSSC are provided in this table. The index of this table is routeId (Integer) ')
routeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "routeId"))
if mibBuilder.loadTexts: routeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: routeEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
routeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeId.setStatus('mandatory')
if mibBuilder.loadTexts: routeId.setDescription('Route Group id. Can be any integer 1-65535. ')
routeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 2), AddrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: routeAddrType.setDescription('Call Control routing type The possible option are: 1) Call party number 2) Transit Network Selection ')
routeAdrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 3), AddrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAdrId.setStatus('mandatory')
if mibBuilder.loadTexts: routeAdrId.setDescription('Call Control route request nature of address. The possible options are: 1) National number 2) International number 3) Unknown ')
routeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 4), AddrString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: routeAddr.setDescription('Call Control routing number ')
routeNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 5), NumPlan()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: routeNumPlan.setDescription('Call control route request numbering plan. The possible options are: 1) Number not present(nonumber) 2) ISDN numbering Plan(isdnnumplan) 3) Telephony numbering plan(telephonynumplan) 4) Private Numbering Plan(privatenumplan) ')
routeNumOfDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNumOfDigit.setStatus('mandatory')
if mibBuilder.loadTexts: routeNumOfDigit.setDescription('Number of Digit in the route. ')
routeRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 7), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeRouteName.setStatus('mandatory')
if mibBuilder.loadTexts: routeRouteName.setDescription('Route Name. Can be any combination of alphanumeric characters. Spaces are not allowed. ')
routeRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 8), RouteType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: routeRouteType.setDescription('Route type: SS7/ISDN ')
routeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: routeRowStatus.setDescription("Current Status (configurational Status) of this ROUTE. To Configure this Route, the only option is 'CREATEANDWAIT' To Delete this Route, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) notr")
routeOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 1, 1, 10), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: routeOpStatus.setDescription("Current Status (Operational Status) of this Route. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
rtEntryIsdnCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2), )
if mibBuilder.loadTexts: rtEntryIsdnCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdnCfgTable.setDescription('RtEntry Isdn Table. Information about the RtEntry(s) in MSSC are provided in this table.The Table has two indices: rtEntryIsdnGrpId and rtEntryIsdntrunkId (both Integer). ')
rtEntryIsdnCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rtEntryIsdnGrpId"), (0, "ARMILLAIRE2000-MIB", "rtEntryIsdntrunkId"))
if mibBuilder.loadTexts: rtEntryIsdnCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdnCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
rtEntryIsdnGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdnGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdnGrpId.setDescription('Route ISDN group id. Can be any integer 1-65535. ')
rtEntryIsdntrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdntrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdntrunkId.setDescription('Route ISDN Trunk id. Can be any integer 1-256. ')
rtEntryIsdnRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdnRouteName.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdnRouteName.setDescription('Route ISDN group name. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 15 characters. ')
rtEntryIsdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntryIsdnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdnRowStatus.setDescription("Current Status (configurational Status) of this ISDN ROUTE Entry. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice")
rtEntryIsdnOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 2, 1, 5), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEntryIsdnOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntryIsdnOpStatus.setDescription("Current Status (Operational Status) of this ISDN Route. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
rtEntrySs7CfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3), )
if mibBuilder.loadTexts: rtEntrySs7CfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7CfgTable.setDescription('RtEntry SS7 Table. Information about the RtEntry(s) in MSSC are provided in this table.The Table has two indices: rtEntrySs7GrpId and rtEntrySs7CmbLinksetId (both Integer). ')
rtEntrySs7CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rtEntrySs7GrpId"), (0, "ARMILLAIRE2000-MIB", "rtEntrySs7CmbLinksetId"))
if mibBuilder.loadTexts: rtEntrySs7CfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7CfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
rtEntrySs7GrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7GrpId.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7GrpId.setDescription('Route SS7 group id. Can be any integer 1-65535. ')
rtEntrySs7CmbLinksetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7CmbLinksetId.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7CmbLinksetId.setDescription("SS7 Linkset Id which is already configured so far. An incorrect Linkset Id will result a failure at the time of 'CREATION' of the RtEntry ie, addition of the Destination Point Code into the specified Route will fail. ")
rtEntrySs7RouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 3), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7RouteName.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7RouteName.setDescription('Route SS7 group name. Can be any combination of alphanumeric characters Spaces are not allowed and cannot exceed 15 characters. ')
rtEntrySs7Dpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7Dpc.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7Dpc.setDescription('Route SS7 Destination Point Code (The Integer Value). The Point Code should be converted into its Integer equivalent. For Example: 0-1-1 is converted as 257 (for ANSI) 0-1-2 is converted as 10 (for ITU) ')
rtEntrySs7Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 5), Standard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7Mode.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7Mode.setDescription('Route SS7 Type(ANSI/ITU) ')
rtEntrySs7RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtEntrySs7RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7RowStatus.setDescription("Current Status (configurational Status) of this SS7 Route Entry. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice ")
rtEntrySs7OpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 3, 1, 7), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEntrySs7OpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rtEntrySs7OpStatus.setDescription("Current Status (Operational Status) of this SS7 Route. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
routeMgmntCmdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4))
digitStripMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1), )
if mibBuilder.loadTexts: digitStripMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: digitStripMgmntTable.setDescription("Route Management Command Table. Commands for enabling or disabling digit stripping in MSSC's routing feature are applied here. The index for this table is rtName(String). ")
digitStripMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rtName"))
if mibBuilder.loadTexts: digitStripMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: digitStripMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
rtName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtName.setStatus('mandatory')
if mibBuilder.loadTexts: rtName.setDescription('Route Name. Can be any combination of alphanumeric characters. Spaces are not allowed. ')
rtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 2), AddrIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: rtAddrType.setDescription('Call Control route request nature of address. The possible options are: 1) National number 2) International number 3) Unknown ')
rtNumOfDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtNumOfDigit.setStatus('mandatory')
if mibBuilder.loadTexts: rtNumOfDigit.setDescription('Number of Digit in the route. ')
rtMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 1, 1, 4), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: rtMgmntCmd.setDescription("Management Command for Enabling/Disabling Digit Strip for MSSC's Routing Feature. The possible options are : 1) Enable 2) Disable [default] ")
isdnLoadBalanceMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2), )
if mibBuilder.loadTexts: isdnLoadBalanceMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnLoadBalanceMgmntTable.setDescription('Isdn Channel Load Balance Command Table. Turning this feature on will result in distributing all the incoming calls evenly in all the trunks for the specified route number. The index for this table is rteName(String). ')
isdnLoadBalanceMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "rteName"))
if mibBuilder.loadTexts: isdnLoadBalanceMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnLoadBalanceMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
rteName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2, 1, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rteName.setStatus('mandatory')
if mibBuilder.loadTexts: rteName.setDescription('Route Name. Can be any combination of alphanumeric characters. Spaces are not allowed. ')
ilbMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 4, 4, 2, 1, 2), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilbMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: ilbMgmntCmd.setDescription("Management Command for Enabling/Disabling the feature 'ISDN Channel LOAD BALANCE'. When this feature is turned on all the incoming calls are distributed evenly in all the trunks for the specified routing numbers. The possible options are : 1) Enable ")
enableSwitch = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 1), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: enableSwitch.setDescription("This is POST-CONFIGURATION command to ENABLE the switch. The 'GET' operation will result in the default value (no) being returned. The possible options are: 1) yes 2) no (Default) ")
enableSS7Route = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 2), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSS7Route.setStatus('mandatory')
if mibBuilder.loadTexts: enableSS7Route.setDescription("This is POST-CONFIGURATION command to ENABLE the SS7 Route. The 'GET' operation will result in the default value (no) being returned. The possible options are: 1) yes 2) no (Default) ")
enableSS7Ckt = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 3), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSS7Ckt.setStatus('mandatory')
if mibBuilder.loadTexts: enableSS7Ckt.setDescription("This is POST-CONFIGURATION command to ENABLE the SS7 Circuit. This Command can only be applied to Enable the SS7 Circuit and COMMIT all the SS7 Circuit Configuration. The 'GET' operation will result in the default value (no) being returned. The possib")
enableIsdntrunk = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 4), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIsdntrunk.setStatus('mandatory')
if mibBuilder.loadTexts: enableIsdntrunk.setDescription("This is POST-CONFIGURATION command to ENABLE the ISDN Trunk. This Command can only be applied to Enable the ISDN Trunk. The 'GET' operation will result in the default value (no) being returned. The possible options are: 1) yes 2) no (Default) ")
enableXconnect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 5), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableXconnect.setStatus('mandatory')
if mibBuilder.loadTexts: enableXconnect.setDescription("This is POST-CONFIGURATION command to ENABLE the Xconnect. The 'GET' operation will result in the default value (no) being returned. The possible options are: 1) yes 2) no (Default) ")
enableRoute = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 6, 6), EnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableRoute.setStatus('mandatory')
if mibBuilder.loadTexts: enableRoute.setDescription("This is POST-CONFIGURATION command to ENABLE the ROUTE and COMMIT all the configuration set for MTP2. This Command can only be applied to Enable the XConnect. The 'GET' operation will result in the default value (no) being returned. The possible optio")
measFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 1))
measFileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2))
measFileEnableGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3))
measFileAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: measFileAcknowledge.setDescription('Acknowledgement of the receiving of the specified Measurement file ')
measFileCfgMeasInterval = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgMeasInterval.setStatus('mandatory')
if mibBuilder.loadTexts: measFileCfgMeasInterval.setDescription('Switch Config Measure Interval. The duration of the collection window (frequency of persisting collected measurements). Default: 15 minutes. Valid Values: 15, 30, 60 minutes. 0 for Disable. ')
measFileCfgUsagescanInterval = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgUsagescanInterval.setStatus('mandatory')
if mibBuilder.loadTexts: measFileCfgUsagescanInterval.setDescription('Switch Config Usage Scan Interval. The interval between scanning the trunk for usage counts. Default: 15 seconds Valid Values: 5 through 300 seconds. ')
measFileCfgPurgeDay = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgPurgeDay.setStatus('mandatory')
if mibBuilder.loadTexts: measFileCfgPurgeDay.setDescription('File Config Purge Day. After The specified no of days the file in secondary directory are purged if Measurement File Auto Purge Flag is on. ')
measFileCfgPurgeFlag = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 4), MeasPurgeFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileCfgPurgeFlag.setStatus('mandatory')
if mibBuilder.loadTexts: measFileCfgPurgeFlag.setDescription('File Config Flag. This is an auto purge flag. ')
measFileCfgPrimaryDir = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measFileCfgPrimaryDir.setStatus('mandatory')
if mibBuilder.loadTexts: measFileCfgPrimaryDir.setDescription('Measurement File Primary Dir. Measurement file is written in this directory ')
measFileCfgSecondaryDir = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measFileCfgSecondaryDir.setStatus('mandatory')
if mibBuilder.loadTexts: measFileCfgSecondaryDir.setDescription('Measurement File Secondary Dir. Measurement file is moved to this directory from Primary Directory after receving the acknowledgement. ')
measFileEnablePRITraffic = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 1), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnablePRITraffic.setStatus('mandatory')
if mibBuilder.loadTexts: measFileEnablePRITraffic.setDescription('Measurement File PRI Traffic Enable Group. A mechanism for the user to enable collecting of PRI Traffic measurement data. ')
measFileEnableISUPTraffic = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 2), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableISUPTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: measFileEnableISUPTraffic.setDescription('Measurement File ISUP Traffic Enable Group. A mechanism for the user to enable collecting of ISUP Traffic measurement data. ')
measFileEnablePRIIneffectiveCall = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 3), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnablePRIIneffectiveCall.setStatus('mandatory')
if mibBuilder.loadTexts: measFileEnablePRIIneffectiveCall.setDescription('Measurement File Enable PRI Ineffective Call Group. A mechanism for the user to enable collecting of PRI Ineffective Call Group measurement data. ')
measFileEnableISUPIneffectiveCall = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 4), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableISUPIneffectiveCall.setStatus('mandatory')
if mibBuilder.loadTexts: measFileEnableISUPIneffectiveCall.setDescription('Measurement File Enable PRI Ineffective Call Group. A mechanism for the user to enable collecting of ISUP Ineffective Call Group Traffic measurement data. ')
measFileEnableTrunkGrp = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 5), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableTrunkGrp.setStatus('mandatory')
if mibBuilder.loadTexts: measFileEnableTrunkGrp.setDescription('Measurement File Enable Trunk Group. A mechanism for the user to enable collecting of Trunk Group Traffic measurement data. ')
measFileEnableSS7LinkTraffic = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 1, 3, 6), MeasEnableStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measFileEnableSS7LinkTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: measFileEnableSS7LinkTraffic.setDescription('Measurement File Enable SS7 Link Traffic Group. A mechanism for the user to enable collecting of SS7 Link Traffic measurement data. ')
measSwitchIsupGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1))
measSwitchIsupFailCallGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2))
measSwitchPriGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3))
measSwitchPriFailCallGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4))
measTrnkGrpTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1), )
if mibBuilder.loadTexts: measTrnkGrpTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpTrafficTable.setDescription('Switch Measurement for Trunk Group traffic Table. Information about Trunk Group traffic measurement are provoded in this table. The index for this table is measTrnkGrpName(String). ')
measTrnkGrpTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "measTrnkGrpName"))
if mibBuilder.loadTexts: measTrnkGrpTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpTrafficEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
measTrnkGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpName.setDescription('Trunk Group Name. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 15 characters. ')
measTrnkGrpDataSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpDataSuspect.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpDataSuspect.setDescription('Trunk Group Data Suspect. Boolean value indicating if the measurement data set is suspect. Suspect data is that which may or may not be accurate and cannot be verified accurate due to some condition that occurred during the collection interval. ')
measTrnkGrpincomingUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpincomingUsage.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpincomingUsage.setDescription('Trunk Group Incoming Usage. The sum of the counts of the number of incoming trunks in the use. ')
measTrnkGrpoutgoingUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpoutgoingUsage.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpoutgoingUsage.setDescription('Trunk Group Outgoing Usage. The sum of the counts of the number of outgoing trunks in the use. ')
measTrnkGrpISCicsChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpISCicsChnls.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpISCicsChnls.setDescription('Trunk Group Inservice Cic/Channels. The sum of the counts of the number of Inservice circuits in case SS7 TrunkGroup or Inservice Channels in case of ISDN TRunkGroup. ')
measTrnkGrpOOSCicsChnls = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpOOSCicsChnls.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpOOSCicsChnls.setDescription('Trunk Group OutOfservice Cic/Channels. The sum of the counts of the number of OutOfservice circuits in case SS7 TrunkGroup or OufOfservice Channels in case of ISDN TRunkGroup. ')
measTrnkGrptotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrptotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrptotalUsage.setDescription('Trunk Group Total Usage. The sum of number of trunk in use by both incoming and outgoing traffic. ')
measTrnkGrpmaintainanceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measTrnkGrpmaintainanceUsage.setStatus('mandatory')
if mibBuilder.loadTexts: measTrnkGrpmaintainanceUsage.setDescription('Trunk Group Maintenance Usage. The sum of number of trunk in use for any reason other than traffic. ')
measLinkTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1), )
if mibBuilder.loadTexts: measLinkTrafficTable.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkTrafficTable.setDescription('Switch Measurement per SS7 Link traffic Table. Information about traffic measurement per SS7 Link are provoded in this table. The index for this table is measLinkName(String). ')
measLinkTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "measLinkName"))
if mibBuilder.loadTexts: measLinkTrafficEntry.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkTrafficEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
measLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkName.setDescription('SS7 Link name ')
measLinkDataSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkDataSuspect.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkDataSuspect.setDescription('Link Data Suspect. Boolean value indicating if the measurement data set is suspect. Suspect data is that which may or may not be accurate and cannot be verified accurate due to some condition that occurred during the collection interval. ')
measLinkUnavailableDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkUnavailableDuration.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkUnavailableDuration.setDescription('Link Unavailable Duration. The cumulative time (in sconds) that the link was unavailable during the associated time interval (CS) ')
measLinkInServiceDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkInServiceDuration.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkInServiceDuration.setDescription('Link In Service Duration. The cumulative time (in seconds) during which the link was in the in-service state. A link is said to be in- service when it is capable of transmitting MSUs. This measurement includes periods when no MSUs are available for tra')
measLinkMSUsRetransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkMSUsRetransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkMSUsRetransmitted.setDescription('Link MSUs Retransmitted. The number of MSUs retransmitted via a particular link during the associated time period (CS) ')
measLinkOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkOctetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkOctetsReceived.setDescription('Link Octers Received. The number of SIF and SIO octets received on the associate incoming link (CS) ')
measLinkOctectsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkOctectsTransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkOctectsTransmitted.setDescription('Link Octets Transmitted. The number of SIF and SIO octets transmitted (including those retransmitted) on the associated incoming link (CS) ')
measLinkLostMSUsBufferOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkLostMSUsBufferOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkLostMSUsBufferOverflow.setDescription('Link Lost MSUs Buffer Overflow. The number of MSUs lost because of transmission buffer overflow (CS) ')
measLinkMSUsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measLinkMSUsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: measLinkMSUsDiscarded.setDescription('Link MSUs Discarded. This measurement is a count of number of MSUs discarded. ')
measSwitchIsupDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupDataSuspect.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupDataSuspect.setDescription('Switch Isup Data Suspect. Boolean value indicating if the measurement data set is suspect. Suspect data is that which may or may not be accurate and cannot be verified accurate due to a some condition that occurred during the collection interval ')
measSwitchIsupIncomingAnsiTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingAnsiTrunkCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupIncomingAnsiTrunkCallAttempts.setDescription('Switch Isup Incoming Ansi Trunk Call Attempts. The number of incoming ISUP-ANSI trunk call requests. ')
measSwitchIsupIncomingAnsiTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingAnsiTrunkCallAnswered.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupIncomingAnsiTrunkCallAnswered.setDescription('Switch Isup Incoming Ansi Trunk Call Answered. The number of incoming ISUP-ANSI trunk calls answered. ')
measSwitchIsupOutgoingAnsiTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingAnsiTrunkCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupOutgoingAnsiTrunkCallAttempts.setDescription('Switch Isup Outgoing Ansi Trunk Call Attempts. The number of outgoing ISUP-ANSi trunk call requests. ')
measSwitchIsupOutgoingAnsiTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingAnsiTrunkCallAnswered.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupOutgoingAnsiTrunkCallAnswered.setDescription('Switch Isup Outgoing Ansi Trunk Call Answered. The number of outgoing ISUP-ANSI trunk calls answered. ')
measSwitchIsupIncomingItutTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingItutTrunkCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupIncomingItutTrunkCallAttempts.setDescription('Switch Isup Incoming Itut Trunk Call Attempts. The number of incoming ISUP-ITUT trunk call requests. ')
measSwitchIsupIncomingItutTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupIncomingItutTrunkCallAnswered.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupIncomingItutTrunkCallAnswered.setDescription('Switch Isup Incoming Itut Trunk Call Answered. The number of incoming ISUP-ITUT trunk calls answered. ')
measSwitchIsupOutgoingItutTrunkCallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingItutTrunkCallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupOutgoingItutTrunkCallAttempts.setDescription('Switch Isup Outgoing Itut Trunk Call Attempts. The number of outgoing ISUP-ITUT trunk call requests. ')
measSwitchIsupOutgoingItutTrunkCallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupOutgoingItutTrunkCallAnswered.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupOutgoingItutTrunkCallAnswered.setDescription('Switch Isup Outgoing Itut Trunk Call Answered. The number of outgoing ISUP-ITUT trunk calls answered. ')
measSwitchIsupFailCallDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallDataSuspect.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallDataSuspect.setDescription('Switch Isup Fail Call Data Suspect. Boolean value indicating if the measurement data set is suspect. Suspect data is that which may or may not be accurate and cannot be verified accurate due to a some condition that occurred during the collection inte')
measSwitchIsupFailCallAnsiMatchingLoss = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiMatchingLoss.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiMatchingLoss.setDescription('Switch Isup Fail Call Ansi Matching Loss. The number of calls ISUP-ANSI trunk calls that fail to find a linked cross-connect within XCMs on any stage of the call. ')
measSwitchIsupFailCallAnsiNoCircuit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiNoCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiNoCircuit.setDescription('Switch Isup Fail Call Ansi No Circuit. The number of ISUP-ANSI calls that cannot forwarded on a trunk because: * No idle PRI trunks available * No cross-connect available between XCMs. ')
measSwitchIsupFailCallAnsiCalledPartyLineBusy = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiCalledPartyLineBusy.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiCalledPartyLineBusy.setDescription('Switch Isup Fail Call Ansi Called Party Line Busy. The number of ISUP-ANSI calls that result in a called party busy indication returned to the caller. ')
measSwitchIsupFailCallAnsiIneffectiveMachineAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiIneffectiveMachineAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallAnsiIneffectiveMachineAttempts.setDescription('Switch Isup Fail Call Ansi Ineffective Machine Attempts. The number of ISUP-ANSI call ineffective machine attempts that have not been associated with any of the following: * Matching loss * No circuit * Called party line busy. ')
measSwitchIsupFailCallItutMatchingLoss = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutMatchingLoss.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallItutMatchingLoss.setDescription('Switch Isup Fail Call Itut Matching Loss. The number of calls ISUP-ITUT trunk calls that fail to find a linked cross-connect within XCMs on any stage of the call. ')
measSwitchIsupFailCallItutNoCircuit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutNoCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallItutNoCircuit.setDescription('Switch Isup Fail Call Itut No Circuit. The number of ISUP-ITUT calls that cannot be forwarded on a trunk because: * No idle PRI trunks available * No cross-connect available between XCMs. ')
measSwitchIsupFailCallItutCalledPartyLineBusy = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutCalledPartyLineBusy.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallItutCalledPartyLineBusy.setDescription('Switch Isup Fail Call Itut Called Party Line Busy. The number of ISUP-ITUT calls that result in a called party busy indication returned to the caller. ')
measSwitchIsupFailCallItutIneffectiveMachineAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchIsupFailCallItutIneffectiveMachineAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchIsupFailCallItutIneffectiveMachineAttempts.setDescription('Switch Isup Fail Call Itut Ineffective Machine Attempts. The number of ISUP-ITUT call ineffective machine attempts that have not been associated with any of the following: * Matching loss * No circuit * Called party line busy. ')
measSwitchPriDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriDataSuspect.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriDataSuspect.setDescription('Switch Primary Data Suspect. Boolean value indicating if the measurement data set is suspect. Suspect data is that which may or may not be accurate and cannot be verified accurate due to a some condition that occurred during the collection interval. ')
measSwitchPriIncomingIsdnPRICallAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriIncomingIsdnPRICallAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriIncomingIsdnPRICallAttempts.setDescription('Switch PRI Incoming ISDN PRI Call Attempts. The number of Incoming ISDN trunk call requests. ')
measSwitchPriIncomingIsdnPRICallAnswered = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriIncomingIsdnPRICallAnswered.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriIncomingIsdnPRICallAnswered.setDescription('Switch PRI Incoming ISDN PRI Call Answered. The number of Incoming ISDN trunk calls answered. ')
measSwitchPriFailCallDataSuspect = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallDataSuspect.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriFailCallDataSuspect.setDescription('Switch ISDN PRI Fail Call Data Suspect. Boolean value indicating if the measurement data set is suspect. Suspect data is that which may or may not be accurate and cannot be verified accurate due to a some condition that occurred during the collection ')
measSwitchPriFailCallMatchingLoss = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallMatchingLoss.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriFailCallMatchingLoss.setDescription('Switch ISDN PRI Fail Call Matching Loss. The number of calls PRI trunk calls that fail to find a linked cross-connect within XCM on any stage of the call. ')
measSwitchPriFailCallNoCircuit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallNoCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriFailCallNoCircuit.setDescription('Switch ISDN PRI Fail Call No Circuit. The number of PRI calls that cannot be forwarded on a trunk because: * No idle PRI trunks available * No cross-connect available between XCMs. ')
measSwitchPriFailCallCalledPartyLineBusy = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallCalledPartyLineBusy.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriFailCallCalledPartyLineBusy.setDescription('Switch ISDN PRI Fail Call Called Party Line Busy. The number of PRI calls that result in a called party busy indication returned to the caller. ')
measSwitchPriFailCallIneffectiveMachineAttempts = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 3, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measSwitchPriFailCallIneffectiveMachineAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: measSwitchPriFailCallIneffectiveMachineAttempts.setDescription('Switch ISDN PRI Fail Call Ineffective Machine Attempts. The number of PRI call ineffective machine attempts that have not been associated with any of the following: * Matching loss * No circuit * Called party line busy. ')
xconnectCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1), )
if mibBuilder.loadTexts: xconnectCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectCfgTable.setDescription('XConnext Table. Information about XConnect(s) in MSSC are provided in this table. The index for this table is xconnectId(Integer). ')
xconnectCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "xconnectId"))
if mibBuilder.loadTexts: xconnectCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
xconnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectId.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectId.setDescription('Xconnect id. Can be any integer 1-65535. ')
xconnectName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 2), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectName.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectName.setDescription('Xconnect name. Can be any combination of alphanumeric characters. Spaces are not allowed and cannot exceed 15 characters. ')
xconnectIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectIPAddr.setDescription('Xconnect IP address. Submit in xxx.xxx.xxx.xxx format. ')
xconnectTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectTCPPort.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectTCPPort.setDescription('Xconnect TCP port. Can be any integer 1-65535. ')
xconnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectRowStatus.setDescription("Current Status (configurational Status) of this XConnect. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) not")
xconnectOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 1, 1, 6), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnectOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectOpStatus.setDescription("Current Status (Operational Status) of this XConnect. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
xlinkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2), )
if mibBuilder.loadTexts: xlinkCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkCfgTable.setDescription('XLink Table. Information about XLink(s) in MSSC are provided in this table.This table has six indices: xconnectIdEndA, slotIdEndA, portIdEndA,xconnectIdEndB, xconnectIdEndB,slotIdEndB,portIdEndB (all Integers) ')
xlinkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "xconnectIdEndA"), (0, "ARMILLAIRE2000-MIB", "slotIdEndA"), (0, "ARMILLAIRE2000-MIB", "portIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnectIdEndB"), (0, "ARMILLAIRE2000-MIB", "slotIdEndB"), (0, "ARMILLAIRE2000-MIB", "portIdEndB"))
if mibBuilder.loadTexts: xlinkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
xconnectIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectIdEndA.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectIdEndA.setDescription('Xconnect id for one end. Can be any integer 1-65535. ')
slotIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotIdEndA.setStatus('mandatory')
if mibBuilder.loadTexts: slotIdEndA.setDescription('Slot Id of one end. ')
portIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIdEndA.setStatus('mandatory')
if mibBuilder.loadTexts: portIdEndA.setDescription('Port id of one end. ')
xconnectIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xconnectIdEndB.setStatus('mandatory')
if mibBuilder.loadTexts: xconnectIdEndB.setDescription('Xconnect id for the other end. Can be any integer 1-65535. ')
slotIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotIdEndB.setStatus('mandatory')
if mibBuilder.loadTexts: slotIdEndB.setDescription('Slot Id of the other end. ')
portIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIdEndB.setStatus('mandatory')
if mibBuilder.loadTexts: portIdEndB.setDescription('Port id of the other end. ')
xlinkConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 7), ConnectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlinkConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkConnectionType.setDescription('Connection Type between the Xconnects The possible options are : 1) Unchannelised DS3 (ut3) 2) Channelised DS3 (t3) ')
xlinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlinkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkRowStatus.setDescription("Current Status (configurational Status) of this XCONNECT Link. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3")
xlinkOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 2, 1, 9), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xlinkOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkOpStatus.setDescription("Current Status (Operational Status) of this XConnect Link. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
xlinkMgmntTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3), )
if mibBuilder.loadTexts: xlinkMgmntTable.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkMgmntTable.setDescription('XLink Management Table. This table has six indices: xconnectIdEndA, slotIdEndA, portIdEndA,xconnectIdEndB, xconnectIdEndB,slotIdEndB,portIdEndB (all Integers) ')
xlinkMgmntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "xconnIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnSlotIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnPortIdEndA"), (0, "ARMILLAIRE2000-MIB", "xconnIdEndB"), (0, "ARMILLAIRE2000-MIB", "xconnSlotIdEndB"), (0, "ARMILLAIRE2000-MIB", "xconnPortIdEndB"))
if mibBuilder.loadTexts: xlinkMgmntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkMgmntEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
xconnIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnIdEndA.setStatus('mandatory')
if mibBuilder.loadTexts: xconnIdEndA.setDescription('Xconnect id for one end. Can be any integer 1-65535. ')
xconnSlotIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnSlotIdEndA.setStatus('mandatory')
if mibBuilder.loadTexts: xconnSlotIdEndA.setDescription('Slot Id of one end. ')
xconnPortIdEndA = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnPortIdEndA.setStatus('mandatory')
if mibBuilder.loadTexts: xconnPortIdEndA.setDescription('Port id of one end. ')
xconnIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnIdEndB.setStatus('mandatory')
if mibBuilder.loadTexts: xconnIdEndB.setDescription('Xconnect id for the other end. Can be any integer 1-65535. ')
xconnSlotIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnSlotIdEndB.setStatus('mandatory')
if mibBuilder.loadTexts: xconnSlotIdEndB.setDescription('Slot Id of the other end. ')
xconnPortIdEndB = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xconnPortIdEndB.setStatus('mandatory')
if mibBuilder.loadTexts: xconnPortIdEndB.setDescription('Port id of the other end. ')
xlinkMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 2, 5, 3, 1, 7), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xlinkMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: xlinkMgmntCmd.setDescription('Management Command for Enabling/Disabling XLink The possible options are : 1) Enable 2) Disable [default] ')
cdrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 1))
cdrBafConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2))
cdrFileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3))
cdrFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4))
cdrMgmntCmdGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5))
cdrLongDurCallGenTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2359))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrLongDurCallGenTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdrLongDurCallGenTime.setDescription('The Time of the day that the syatem will generate the long duration call. CDR Format ( HHMM ) Valid time of the day from 0000 - 2359 ')
cdrAppendModule801 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2, 1), Bool()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrAppendModule801.setStatus('mandatory')
if mibBuilder.loadTexts: cdrAppendModule801.setDescription('Indicates if the Armillaire Proprietary Module 801 should be appended to those BAF Records. Text Format ( Not Case sensitive ) Valid values : yes, no ')
cdrSensorId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999998))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrSensorId.setStatus('mandatory')
if mibBuilder.loadTexts: cdrSensorId.setDescription('AMA Sensor Id code of the switch. Valid values 000001-999998 for Set. If not configured then Default value is 0. ')
cdrRecordingOfficeId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999998))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrRecordingOfficeId.setStatus('mandatory')
if mibBuilder.loadTexts: cdrRecordingOfficeId.setDescription('AMA Record Id code of the switch. Valid values 000001-999998 For Set. If not configured then Default value is 0. ')
cdrFileInterval = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileInterval.setDescription('How often the cdr file being generated. Valid values 1-86400 seconds ')
cdrFileRecLimit = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileRecLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileRecLimit.setDescription('Maximum Nubler of BAF records in a CDR File. Valid values 1,677,215 ')
cdrFileSourceId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileSourceId.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileSourceId.setDescription('This Source Component id specifies the network element for receiving of cdr files according to AMADNS. This id will be part of first node of CDR filename. Valid values 01-4095 For Set. If not configured then Default value is 0. ')
cdrFileDestinationType = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileDestinationType.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileDestinationType.setDescription('This Destination Component type specifies the network element for receiving of cdr files according to AMADNS. This type will be part of second node of CDR filename. Valid values 01-15 For Set. If not configured then Default value is 0. ')
cdrFileDestinationId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileDestinationId.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileDestinationId.setDescription('This Destination Component Id specifies the network element for receiving of cdr files according to AMADNS. This type will be part of second node of CDR filename. Valid values 01-4095 for Set. If not configured then Default value is 0. ')
cdrFileQuery = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileQuery.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileQuery.setDescription('Number of the desired CDR file. set file number to update the cdr file info. ')
cdrFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileName.setDescription('Name of the desired CDR file. Can be any combination of alphanumeric characters. Spaces are not allowed. Filename cannot exceed 24 characters. ')
cdrFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileStatus.setDescription('Status of the desired CDR file ')
cdrFileCreateDate = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileCreateDate.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileCreateDate.setDescription('Creation date of the desired CDR file FORMAT:2000/01/26 ')
cdrFileCreateTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileCreateTime.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileCreateTime.setDescription('Creation time of the desired CDR file FORMAT: 20:12:23 ')
cdrFileRecordNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrFileRecordNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileRecordNum.setDescription('Record number of the desired CDR file ')
cdrFileAcknowledge = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrFileAcknowledge.setStatus('mandatory')
if mibBuilder.loadTexts: cdrFileAcknowledge.setDescription('Acknowledgement of the CDR file. The input should be the File Name. ')
cdrGenMgmntCmd = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 1), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrGenMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: cdrGenMgmntCmd.setDescription('This command is used to turn on the CDR generation for the entire switch.If switch CDR generation is enabled then CDR generation can be enabled/disabled on Trunk Group. The possible options are : 1) Enable 2) Disable [default] ')
cdrMngmtTrnkGrpTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2), )
if mibBuilder.loadTexts: cdrMngmtTrnkGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdrMngmtTrnkGrpTable.setDescription('CDR Management Command for Trunk group Table. The index for this table is cdrTrnkGrpId (integer) ')
cdrMngmtTrnkGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "cdrTrnkGrpId"))
if mibBuilder.loadTexts: cdrMngmtTrnkGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdrMngmtTrnkGrpEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
cdrTrnkGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdrTrnkGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: cdrTrnkGrpId.setDescription('The trunk Group Id. ')
cdrTrnkGrpdirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1, 2), CdrFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrTrnkGrpdirection.setStatus('mandatory')
if mibBuilder.loadTexts: cdrTrnkGrpdirection.setDescription('The Direction ')
cdrTrnkGrpMgmntCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 4, 5, 2, 1, 3), EnableOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdrTrnkGrpMgmntCmd.setStatus('mandatory')
if mibBuilder.loadTexts: cdrTrnkGrpMgmntCmd.setDescription('This command is used to turn on the CDR generation on the Trunk Group. The possible options are : 1) Enable 2) Disable [default] ')
modemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1), )
if mibBuilder.loadTexts: modemStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: modemStatusTable.setDescription('Faulty Modem Detection Table. This Table provides information about all the potentially faulty modems in MSSC. This table has two indices: faultModemTrnkId and faultModemChnlId (both Integer) ')
modemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "faultModemTrnkId"), (0, "ARMILLAIRE2000-MIB", "faultModemChnlId"))
if mibBuilder.loadTexts: modemStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: modemStatusEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
faultModemTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultModemTrnkId.setStatus('mandatory')
if mibBuilder.loadTexts: faultModemTrnkId.setDescription('The terminating Channel trunk Id. ')
faultModemChnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultModemChnlId.setStatus('mandatory')
if mibBuilder.loadTexts: faultModemChnlId.setDescription('The terminating Channel Channel Id. ')
faultModemRepnum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultModemRepnum.setStatus('mandatory')
if mibBuilder.loadTexts: faultModemRepnum.setDescription('Counter ')
faultModemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 1, 1, 1, 4), ModemResetStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultModemReset.setStatus('mandatory')
if mibBuilder.loadTexts: faultModemReset.setDescription("The Option for Reseting the terminating Channel. A 'GET' operation on this object will display the default value [no]. The possible option for 'SET' operation is 1) YES ")
lrnTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1), )
if mibBuilder.loadTexts: lrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: lrnTable.setDescription('Local Routing Number Table. This Table provides information about Local Routing number in MSSC. This table has the index lrnId (Integer) ')
lrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "lrnNum"))
if mibBuilder.loadTexts: lrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lrnEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
lrnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lrnNum.setStatus('mandatory')
if mibBuilder.loadTexts: lrnNum.setDescription('The Local Routing Number (LRN) Id. ')
lrnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 2, 1, 1, 2), LrnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lrnRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lrnRowStatus.setDescription('The Local Routing Number (LRN) Number. ')
switchDSPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1), )
if mibBuilder.loadTexts: switchDSPCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPCfgTable.setDescription('')
switchDSPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchDSPXconnId"), (0, "ARMILLAIRE2000-MIB", "switchDSPSlotId"))
if mibBuilder.loadTexts: switchDSPCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPCfgEntry.setDescription('DSP Configuration Table. This Table provides information about the DSP card(s) in MSSC. This table has two indices: switchDSPXconnId and switchDSPSlotId (both Integer) ')
switchDSPXconnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPXconnId.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPXconnId.setDescription('Xconnect Id for which DSP card is being configured ')
switchDSPSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPSlotId.setDescription('The Slot id at which the DSP card is being configured. ')
switchDSPCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 3), DSPCardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPCardType.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPCardType.setDescription('The card Type. The possible options are : 1) DSP2B 2) DSP2C ')
switchDSPCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDSPCfgRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPCfgRowStatus.setDescription("Current Status (configurational Status) of this Switch DSP. To Configure this Link, the only option is 'CREATEANDWAIT' To Delete this Link, the only option is 'DESTROY' For the 'GET' Operation, the possible options are 1) active 2) notinservice 3) n")
switchDSPCfgOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 3, 1, 1, 5), OpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDSPCfgOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: switchDSPCfgOpStatus.setDescription("Current Status (Operational Status) of this Switch DSP. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
switchFeatureTGCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1), )
if mibBuilder.loadTexts: switchFeatureTGCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGCfgTable.setDescription('Trunk Group Feature Table. This Table provides information about the Trunk Group Feature(s) in MSSC. This table has one indices: switchFeatureTGId (Integer) ')
switchTGGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchFeatureTGId"))
if mibBuilder.loadTexts: switchTGGrpCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: switchTGGrpCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
switchFeatureTGId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFeatureTGId.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGId.setDescription('Denotes Id for this trunk group. ')
switchFeatureTGName = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 2), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFeatureTGName.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGName.setDescription('Denotes Name of this trunk group. The Name is a string of length 8. The first two characters of Name have to be an alphabhet. The next 6 characters are numeric. An example of a valid Trunk Group Name is ab123456. NOTE: This format needs to strictly fo')
switchFeatureTGType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 3), TrnkGrpType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchFeatureTGType.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGType.setDescription('Denotes Trunk group type. Possible values for Trunk group are: 1. ss7 2. isdn ')
switchFeatureTGFeatureEC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 4), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureEC.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGFeatureEC.setDescription("Denotes Echo Cancellation feature. Possible Values are: 1. Enable 2. Disable NOTE: If TrunkGrpType is ISDN, then Enabling Echo Cancellation feature is an INVALID Operation. A 'GET' Operation at this object will ALWAYS result in the default value [di")
switchFeatureTGFeatureCOMPRESS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 5), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureCOMPRESS.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGFeatureCOMPRESS.setDescription("Denotes Compression feature. Possible Values are: 1. Enable 2. Disable NOTE: if TrunkGrpType is ISDN, then Enabling Compression feature, is an INVALID Operation. A 'GET' Operation at this object will ALWAYS result in the default value [disable] bein")
switchFeatureTGFeatureSS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 6), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureSS.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGFeatureSS.setDescription("Denotes Silent Supression feature. Possible Values are: 1. Enable 2. Disable NOTE: If TrunkGrpType is ISDN, the Enabling Silent Supression feature, is an INVALID Operation. A 'GET' Operation at this object will ALWAYS result in the default value [di")
switchFeatureTGFeatureCNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 5, 4, 1, 1, 7), TGFeature()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchFeatureTGFeatureCNIS.setStatus('mandatory')
if mibBuilder.loadTexts: switchFeatureTGFeatureCNIS.setDescription("Denotes Caller Number Identitication Service (CNIS) feature. Possible Values are: 1. Enable 2. Disable NOTE: If TrunkGrpType is SS7, then Enabling Caller Number Identitication Service, is an INVALID Operation. A 'GET' Operation at this object will AL")
switchOver = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 1, 1, 1), FTswitchOver()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchOver.setStatus('mandatory')
if mibBuilder.loadTexts: switchOver.setDescription('FT Switch Over command. The possible options are 1) FT_SIG 2) FT_ICC 3) FT_ISDN 4) FT_SPHR 5) FT_LM Select any one and set that option. ')
logGenTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logGenTime.setStatus('mandatory')
if mibBuilder.loadTexts: logGenTime.setDescription('Switch Log Generation Time. The Parameter Time-interval determines the period of generating new log files. When the time interval is reached, all the current open log files are closed and new log files are generated for future log. The unit for the ti')
logPurgeTime = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logPurgeTime.setStatus('mandatory')
if mibBuilder.loadTexts: logPurgeTime.setDescription("Switch Log Deletion Time. The Parameter Time-interval determines the period of purging old log files. When the time interval is reached, all the log files older than this time-interval are deleted. The unit for the time-interval is 'minute'. ")
enablelogGen = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 2, 1), LogFileEnDis()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablelogGen.setStatus('mandatory')
if mibBuilder.loadTexts: enablelogGen.setDescription('This option enables the log file Generation. 1) ALARM_LOG 2) AUDIT_LOG 3) MEAS_LOG 4) DIAG_LOG 5) SCRTY_LOG 6) EVENT_LOG 7) BILL_LOG 8) EMP_LOG 9) LOG_ALL Choose any one from drop down list... ')
disableLogGen = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 2, 2), LogFileEnDis()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: disableLogGen.setStatus('mandatory')
if mibBuilder.loadTexts: disableLogGen.setDescription('This option disables the log file Generation. 1) ALARM_LOG 2) AUDIT_LOG 3) MEAS_LOG 4) DIAG_LOG 5) SCRTY_LOG 6) EVENT_LOG 7) BILL_LOG 8) EMP_LOG 9) LOG_ALL Choose any one from drop down list.. ')
logAttribute = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 1), LogFileAttr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: logAttribute.setDescription('Allows the user to inquire about the current LOG file attributes. The possible options are : 1) ALARM_LOG 2) AUDIT_LOG 3) MEAS_LOG 4) DIAG_LOG 5) SCRTY_LOG 6) EVENT_LOG 7) BILL_LOG 8) EMP_LOG Choose any one from drop down list.. ')
logFileSize = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: logFileSize.setDescription('')
logFileDuration = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileDuration.setStatus('mandatory')
if mibBuilder.loadTexts: logFileDuration.setDescription('')
logFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: logFileStatus.setDescription('')
ss7LnkTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1), )
if mibBuilder.loadTexts: ss7LnkTraceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LnkTraceTable.setDescription('This Table is specified for Applying Trace Function for any SS7 Link(s). The index of this table is ss7LnkId (integer) ')
ss7LnkTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7LnkId"))
if mibBuilder.loadTexts: ss7LnkTraceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LnkTraceEntry.setDescription('')
ss7LnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LnkId.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LnkId.setDescription('The SS7 link Id on which the Trace Function is to be applied. ')
ss7LnkLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1, 2), LogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7LnkLog.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LnkLog.setDescription('This option displays weather log Function is enabled for the specified SS7 Link. ')
ss7LnkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 1, 1, 1, 3), EnableTrace()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7LnkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7LnkEnable.setDescription('This option enables/disables the trace Function for the specified SS7 Link. The possible option are: 1) Enable 2) Disable [default] ')
ss7RouteTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1), )
if mibBuilder.loadTexts: ss7RouteTraceTable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RouteTraceTable.setDescription('This Table is specified for Applying Trace Function for any SS7 Route(s). The index of this table is ss7RouteDpc (Integer) ')
ss7RouteTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "ss7RouteDpc"))
if mibBuilder.loadTexts: ss7RouteTraceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RouteTraceEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
ss7RouteDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7RouteDpc.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RouteDpc.setDescription('The SS7 Point code. The trace Function is to be applied on this route. ')
ss7RouteLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1, 2), LogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ss7RouteLog.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RouteLog.setDescription('This option displays weather Log Function is enabled for the specified SS7 Route. ')
ss7RouteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 2, 1, 1, 3), EnableTrace()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ss7RouteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ss7RouteEnable.setDescription('This option enables/disables the trace Functions for the specified SS7 Route. The possible option are: 1) Enable 2) Disable [default] ')
isdnTrunkTraceTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1), )
if mibBuilder.loadTexts: isdnTrunkTraceTable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkTraceTable.setDescription('This Table is specified for Applying Trace Function for any ISDN Trunk(s). The index of this table is isdnTrnkId (Integer) ')
isdnTrunkTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "isdnTrnkId"))
if mibBuilder.loadTexts: isdnTrunkTraceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkTraceEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
isdnTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrnkId.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrnkId.setDescription('The ISDN Trunk Id for which the Trace Function is to be applied. ')
isdnTrunkLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1, 2), LogType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isdnTrunkLog.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkLog.setDescription('This option displays weather log Function is enabled for the specified ISDN Trunk. ')
isdnTrunkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 3, 3, 1, 1, 3), EnableTrace()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isdnTrunkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: isdnTrunkEnable.setDescription('This option enables/disables the trace Functions for the specified ISDN Trunk. The possible option are: 1) Enable 2) Disable [default] ')
auditISDNTrnkTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1), )
if mibBuilder.loadTexts: auditISDNTrnkTable.setStatus('mandatory')
if mibBuilder.loadTexts: auditISDNTrnkTable.setDescription('Audit ISDN Trunk Table. This table has one index: auditTrnkId (Integer) ')
auditISDNTrnkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "auditTrnkId"))
if mibBuilder.loadTexts: auditISDNTrnkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: auditISDNTrnkCfgEntry.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
auditTrnkId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditTrnkId.setStatus('mandatory')
if mibBuilder.loadTexts: auditTrnkId.setDescription('The ISDN Trunk Id on which the audit operation is being applied. ')
auditISDNTrnk = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 1, 1, 2), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditISDNTrnk.setStatus('mandatory')
if mibBuilder.loadTexts: auditISDNTrnk.setDescription("This Object is set to Apply Audit on this particular ISDN Trunk. The possible option for 'SET' is 1) audit A 'GET' Operation on this object would result the default value 'no action' being displayed. ")
auditXLink = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 2), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditXLink.setStatus('mandatory')
if mibBuilder.loadTexts: auditXLink.setDescription('This option audits the All the existing XLinks. ')
auditDPCTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3), )
if mibBuilder.loadTexts: auditDPCTable.setStatus('mandatory')
if mibBuilder.loadTexts: auditDPCTable.setDescription('The Current Entry Containes all the objects for this Table. This object is not-accessible, but the user can access all the objects in this table at the next level. ')
auditDPCCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "auditPointCode"))
if mibBuilder.loadTexts: auditDPCCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: auditDPCCfgEntry.setDescription('')
auditPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPointCode.setStatus('mandatory')
if mibBuilder.loadTexts: auditPointCode.setDescription('The Point Code on which the audit operation is being applied. ')
auditPointCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1, 2), AuditType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auditPointCodeType.setStatus('mandatory')
if mibBuilder.loadTexts: auditPointCodeType.setDescription('The Point Code Type. Ansi/Itu. ')
auditDPC = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 3, 1, 3), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditDPC.setStatus('mandatory')
if mibBuilder.loadTexts: auditDPC.setDescription("This Object is set to Apply Audit on this particular DPC. The possible option for 'SET' is 1) audit A 'GET' Operation on this object would result the default value 'no action' being displayed. ")
auditPeriodGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 4))
auditTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditTimePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: auditTimePeriod.setDescription('The Audit Period for which the audit operation is being applied. ')
auditPeriod = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 6, 1, 4, 2), AuditOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: auditPeriod.setDescription("This Object is set to Apply Audit for this particular Period. The possible option for 'SET' is 1) audit A 'GET' Operation on this object would result the default value 'no action' being displayed. ")
statusLM1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 1), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusLM1ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusLM1ProcId.setDescription('Indicates the current status of FT_LM: Process Id 512. ')
statusLM2ProcID = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 2), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusLM2ProcID.setStatus('mandatory')
if mibBuilder.loadTexts: statusLM2ProcID.setDescription('Indicates the current status of FT_LM: Process Id 511. ')
statusICC1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 3), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusICC1ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusICC1ProcId.setDescription('Indicates the current status of FT_ICC : Process Id 480. ')
statusICC2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 4), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusICC2ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusICC2ProcId.setDescription('Indicates the current status of FT_ICC: Process Id 496. ')
statusISDN1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 5), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusISDN1ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusISDN1ProcId.setDescription('Indicates the current status of FT_ISDN: Process Id 476. ')
statusISDN2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 6), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusISDN2ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusISDN2ProcId.setDescription('Indicates the current status of FT_ISDN: Process Id 472. ')
statusSPHR1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 7), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSPHR1ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusSPHR1ProcId.setDescription('Indicates the current status of FT_SPHR: Process Id 448. ')
statusSPHR2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 8), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSPHR2ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusSPHR2ProcId.setDescription('Indicates the current status of FT_SPHR: Process Id 464. ')
statusSIG1ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 9), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSIG1ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusSIG1ProcId.setDescription('Indicates the current status of FT_SIG: Process Id 384. ')
statusSIG2ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 10), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusSIG2ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusSIG2ProcId.setDescription('Indicates the current status of FT_SIG: Process Id 400. ')
statusMTP21ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 11), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP21ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusMTP21ProcId.setDescription('Indicates the current status of Mtp2: Process Id 320. ')
statusMTP22ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 12), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP22ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusMTP22ProcId.setDescription('Indicates the current status of Mtp2: Process Id 321. ')
statusMTP23ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 13), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP23ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusMTP23ProcId.setDescription('Indicates the current status of Mtp2 : Process Id 322. ')
statusMTP24ProcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 4, 1, 14), ProcessStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusMTP24ProcId.setStatus('mandatory')
if mibBuilder.loadTexts: statusMTP24ProcId.setDescription('Indicates the current status of Mtp2: Process Id 323. ')
ethernetConnStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 6, 5, 1), EthernetConnStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetConnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetConnStatus.setDescription("Current Status of the Ethernet Connection to MSSC. 'SET' Operation is NOT APPLICABLE. For the 'GET' Operation, the possible options are 1) active 2) down ")
trapOpc = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapOpc.setStatus('mandatory')
if mibBuilder.loadTexts: trapOpc.setDescription('Indicate the point code of the switch that send trap ')
trapXconnectId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapXconnectId.setStatus('mandatory')
if mibBuilder.loadTexts: trapXconnectId.setDescription('Indicate the id of the xconnect that send trap ')
trapLinkId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLinkId.setStatus('mandatory')
if mibBuilder.loadTexts: trapLinkId.setDescription('Indicate the id of the link that abnormal situation ')
trapSlotId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: trapSlotId.setDescription('Indicate the id of the slot that has abnormal situation ')
trapPortId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPortId.setStatus('mandatory')
if mibBuilder.loadTexts: trapPortId.setDescription('Indicate the id of the port that has abnormal situation ')
trapTrunkId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTrunkId.setStatus('mandatory')
if mibBuilder.loadTexts: trapTrunkId.setDescription('Indicate the id of the trunk that has abnormal situation ')
trapInterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInterfaceId.setStatus('mandatory')
if mibBuilder.loadTexts: trapInterfaceId.setDescription('Indicate the id of the interface that has abnormal situation ')
trapChnlId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapChnlId.setStatus('mandatory')
if mibBuilder.loadTexts: trapChnlId.setDescription('Indicate the id of the channel that has abnormal situation ')
trapDbId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDbId.setStatus('mandatory')
if mibBuilder.loadTexts: trapDbId.setDescription('Indicate the id of the database that has abnormal situation ')
trapLinkName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 10), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: trapLinkName.setDescription('Indicate the name of the link that has abnormal situation ')
trapSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSwitchName.setStatus('mandatory')
if mibBuilder.loadTexts: trapSwitchName.setDescription('Indicate the name ')
trapCicvalue = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCicvalue.setStatus('mandatory')
if mibBuilder.loadTexts: trapCicvalue.setDescription('Indicate Circuit Identification Code value. ')
trapCicrange = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCicrange.setStatus('mandatory')
if mibBuilder.loadTexts: trapCicrange.setDescription('Integer identifying the range ex. no. cics. ')
trapCause = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCause.setStatus('mandatory')
if mibBuilder.loadTexts: trapCause.setDescription('Cause indicates Causes for ISUP related alarms: BLOCKING UNBLOCKING INVALIDRNG GROUPBLOCKING GROUPUNBLOCKACK RESETCIRCUIT RESETRELCOMP GROUPRESETCIRCUIT GROUPRESETACK CIRCUITQUERYRESP VALIDATIONSUCCESS VALIDATIONFAILED VALIDATIONFAILEDWRONGCLLI OTHERS')
trapDpc = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDpc.setStatus('mandatory')
if mibBuilder.loadTexts: trapDpc.setDescription('Indicate the point code of the switch ')
trapCdrFileSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCdrFileSeqNum.setStatus('mandatory')
if mibBuilder.loadTexts: trapCdrFileSeqNum.setDescription('Indicate the sequence number of the cdr file that has abnormal situation ')
trapCdrFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCdrFileName.setStatus('mandatory')
if mibBuilder.loadTexts: trapCdrFileName.setDescription('Indicates the CDR file name or file directory. Can be any combination of alphanumeric characters. Spaces are allowed and cannot exceed 255 characters. ')
trapMeasErrCause = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMeasErrCause.setStatus('mandatory')
if mibBuilder.loadTexts: trapMeasErrCause.setDescription('Indicates the Measurement Files error operation cause ')
trapMeasErrNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMeasErrNum.setStatus('mandatory')
if mibBuilder.loadTexts: trapMeasErrNum.setDescription('Indicates the Measurement Files error number of the operation ')
trapRepeatNum = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRepeatNum.setStatus('mandatory')
if mibBuilder.loadTexts: trapRepeatNum.setDescription('Indicate the count that trap has occured ')
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: trapSeverity.setDescription('Indicate the severity of the sent trap ')
trapProcessId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcessId.setStatus('mandatory')
if mibBuilder.loadTexts: trapProcessId.setDescription('Indicate the process id for that trap has occured ')
trapBucketSize = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapBucketSize.setStatus('mandatory')
if mibBuilder.loadTexts: trapBucketSize.setDescription('Indicate the process Bucket size for the Process for which the trap has occured ')
trapNode1Id = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNode1Id.setStatus('mandatory')
if mibBuilder.loadTexts: trapNode1Id.setDescription('Indicates the src Xconnect Id which cause congestion ')
trapNode2Id = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNode2Id.setStatus('mandatory')
if mibBuilder.loadTexts: trapNode2Id.setDescription('Indicates the dest Xconnect Id which cause congestion ')
trapRoutename = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapRoutename.setStatus('mandatory')
if mibBuilder.loadTexts: trapRoutename.setDescription('indicate the xoute name that is not found between the xlink ')
trapMeasFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMeasFileName.setStatus('mandatory')
if mibBuilder.loadTexts: trapMeasFileName.setDescription('indicate the Measurement file name. Can be any combination of alphanumeric characters. Spaces are allowed and cannot exceed 64 characters. ')
trapDirectory = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: trapDirectory.setDescription('indicate the Cdr File Directory ')
trapProcessorId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcessorId.setStatus('mandatory')
if mibBuilder.loadTexts: trapProcessorId.setDescription('Indicates the Process Id ')
trapLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogFileName.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogFileName.setDescription('Indicate the Log file name. Can be any combination of alphanumeric characters. Spaces are allowed and cannot exceed 64 characters. ')
trapLogErrcause = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogErrcause.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogErrcause.setDescription('Indicate the Log error operation cause ')
trapLogErrNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLogErrNo.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogErrNo.setDescription('Indicate the log cdr error number of the operation ')
trapPsuNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPsuNo.setStatus('mandatory')
if mibBuilder.loadTexts: trapPsuNo.setDescription('Indicate the Power supply number ')
trapIntId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIntId.setStatus('mandatory')
if mibBuilder.loadTexts: trapIntId.setDescription('Indicate the Power supply number ')
trapIntfcId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIntfcId.setStatus('mandatory')
if mibBuilder.loadTexts: trapIntfcId.setDescription('Indicate the Power supply number ')
trapLanId = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLanId.setStatus('mandatory')
if mibBuilder.loadTexts: trapLanId.setDescription('Indicate theLan ID ')
trapnumXlinks = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapnumXlinks.setStatus('mandatory')
if mibBuilder.loadTexts: trapnumXlinks.setDescription('Indicate the no of existing links ')
trapSwitchId1 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSwitchId1.setStatus('mandatory')
if mibBuilder.loadTexts: trapSwitchId1.setDescription('Indicate the xconnect Id ')
trapSwitchId2 = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSwitchId2.setStatus('mandatory')
if mibBuilder.loadTexts: trapSwitchId2.setDescription('Indicate the xconnect Id ')
trapProcInstNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcInstNo.setStatus('mandatory')
if mibBuilder.loadTexts: trapProcInstNo.setDescription('Indicate the Process instance number ')
trapProcName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapProcName.setStatus('mandatory')
if mibBuilder.loadTexts: trapProcName.setDescription('Indicate the Process name that Failed ')
trapFanNo = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFanNo.setStatus('mandatory')
if mibBuilder.loadTexts: trapFanNo.setDescription('Indicate the Fan Number ')
trapUserName = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 43), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapUserName.setStatus('mandatory')
if mibBuilder.loadTexts: trapUserName.setDescription('indicates the user login Name ')
trapBitMapStatus = MibScalar((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapBitMapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapBitMapStatus.setDescription('Indicates the Bit Map Status of the Cics that are blocked. This Status is only valid for GROUPBLOCKING (I.e range >1)')
alarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1))
genswitchSnmpAgentReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,1)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
if mibBuilder.loadTexts: genswitchSnmpAgentReadyNotify.setDescription('Info : SNMP Agent is up ')
genConsoleLoginNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,2)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapUserName"))
if mibBuilder.loadTexts: genConsoleLoginNotify.setDescription('Info : A user has successfully logged in from console ')
genConsoleLogoutNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,3)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapUserName"))
if mibBuilder.loadTexts: genConsoleLogoutNotify.setDescription('Info : A user has successfully logged out from console ')
genProcessBufOverflowNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,4)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"), ("ARMILLAIRE2000-MIB", "trapBucketSize"))
if mibBuilder.loadTexts: genProcessBufOverflowNotify.setDescription('Info : Process ran out of buffer ')
genProcessBufOverflowRecoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,5)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"), ("ARMILLAIRE2000-MIB", "trapBucketSize"))
if mibBuilder.loadTexts: genProcessBufOverflowRecoverNotify.setDescription('Info : Process Recovered from Buffer Overflow ')
genProcessHeapOverFlowNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,6)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
if mibBuilder.loadTexts: genProcessHeapOverFlowNotify.setDescription('Info : Process Heap OverFlow Detected ')
genProcessHeapOverFlowRecoverNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,7)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
if mibBuilder.loadTexts: genProcessHeapOverFlowRecoverNotify.setDescription('Info : Recovered from Process Heap Overflow ')
xconnectUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,8)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectUpNotify.setDescription('Info : switch has successfully brought up TCP/IP link between MSCG and AC 120 xconnect ')
xconnectDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,9)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectDnNotify.setDescription('Info : switch has a failure on TCP/IP link between MSCG and AC120 ')
xconnectClkClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,10)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectClkClearNotify.setDescription('Info : Stratum Card is available ')
xconnectClkFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,11)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectClkFailNotify.setDescription('Info : Stratum Card has either been removed or has failed ')
xconnectBkplaneRefClkClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,12)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectBkplaneRefClkClearNotify.setDescription('Info : Back Plane reference clock clear ')
xconnectBkplaneRefClkFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,13)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectBkplaneRefClkFailNotify.setDescription('Info : Back Plane reference clock fail ')
xconnectInterfaceInServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,14)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectInterfaceInServiceNotify.setDescription('Info : Switch has successfully brought the specified interface to be in service ')
xconnectInterfaceOutOfServiceNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,15)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectInterfaceOutOfServiceNotify.setDescription('Info : An interface card is out of service ')
xconnectCardInsertionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,16)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectCardInsertionNotify.setDescription('Info : A card is inserted in xconnect ')
xconnectCardRemovalNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,17)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectCardRemovalNotify.setDescription('Info : A card is removed from xconnect ')
xconnectIllegalCardTypeNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,18)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIllegalCardTypeNotify.setDescription('Info : Illegal Card Type ')
xconnectIntfFarEndLOFNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,19)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIntfFarEndLOFNotify.setDescription('Info : Interface Far end LOF ')
xconnectIntfFarEndAISNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,20)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIntfFarEndAISNotify.setDescription('Info : Interface Far end AIS ')
xconnectIntfNearEndLOFNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,21)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIntfNearEndLOFNotify.setDescription('Info : Interface Near end LOF ')
xconnectIntfNearEndLOSNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,22)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIntfNearEndLOSNotify.setDescription('Info : Interface Near end LOS ')
xconnectIntfCreateNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,23)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIntfCreateNotify.setDescription('Info : Interface in AC120 has been created ')
xconnectIntfDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,24)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectIntfDeleteNotify.setDescription('Info : Interface in AC120 has been deleted ')
xconnectXlinkAdjConClrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,25)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapNode1Id"), ("ARMILLAIRE2000-MIB", "trapNode2Id"), ("ARMILLAIRE2000-MIB", "trapnumXlinks"))
if mibBuilder.loadTexts: xconnectXlinkAdjConClrNotify.setDescription('Info : Xconnect Adjacent Congestion cleared ')
xconnectXlinkAdjConNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,26)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapNode1Id"), ("ARMILLAIRE2000-MIB", "trapNode2Id"), ("ARMILLAIRE2000-MIB", "trapnumXlinks"))
if mibBuilder.loadTexts: xconnectXlinkAdjConNotify.setDescription('Info : Xconnect Adjacent Congestion Notified ')
xconnectXlinkRouteFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,27)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapNode1Id"), ("ARMILLAIRE2000-MIB", "trapNode2Id"))
if mibBuilder.loadTexts: xconnectXlinkRouteFailNotify.setDescription('Info : Xpath not found between the Xlink ')
xconnectPortUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,28)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectPortUpNotify.setDescription('Info : Port is Up ')
xconnectCPUSwitchOverNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,29)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: xconnectCPUSwitchOverNotify.setDescription('Info : XConnect CPU SwitchOver ')
atmRAINotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,30)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: atmRAINotify.setDescription('Info : ATM Remote Alarm Indication ')
atmAISNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,31)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: atmAISNotify.setDescription('Info : ATM AIS ')
atmLOFNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,32)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: atmLOFNotify.setDescription('Info : ATM LOF ')
atmLOSNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,33)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"), ("ARMILLAIRE2000-MIB", "trapXconnectId"))
if mibBuilder.loadTexts: atmLOSNotify.setDescription('Info : ATM LOS ')
mfdClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,34)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapTrunkId"), ("ARMILLAIRE2000-MIB", "trapChnlId"))
if mibBuilder.loadTexts: mfdClearNotify.setDescription('Info : A potential fault modem is cleared ')
mfdDetectionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,35)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapRepeatNum"), ("ARMILLAIRE2000-MIB", "trapTrunkId"), ("ARMILLAIRE2000-MIB", "trapChnlId"))
if mibBuilder.loadTexts: mfdDetectionNotify.setDescription('Info : Faulty Modem: A Potential Faulty Modem has been Detected ')
measFileReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,36)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
if mibBuilder.loadTexts: measFileReadyNotify.setDescription('Info : Measurement file is ready for FTP ')
measDiskOverCrtclThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,37)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasErrCause"), ("ARMILLAIRE2000-MIB", "trapMeasErrNum"))
if mibBuilder.loadTexts: measDiskOverCrtclThresholdNotify.setDescription('Info : The partition that the measurement file resides on is over critical threshold. ')
measFileMoveNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,38)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
if mibBuilder.loadTexts: measFileMoveNotify.setDescription('Info : Measurement file moved to secondary directory ')
measFileMoveErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,39)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
if mibBuilder.loadTexts: measFileMoveErrNotify.setDescription('Info : Error in moving Measurement file to secondary directory ')
measFileOpenErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,40)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
if mibBuilder.loadTexts: measFileOpenErrNotify.setDescription('Info : Measurement open file error ')
measFileDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,41)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
if mibBuilder.loadTexts: measFileDeleteNotify.setDescription('Info : Measurement file deleted ')
measFileDeleteErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,42)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapMeasFileName"))
if mibBuilder.loadTexts: measFileDeleteErrNotify.setDescription('Info : Measurement delete file error ')
cdrFileReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,43)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileReadyNotify.setDescription('Info :Cdr file is ready for Polling ')
cdrDiskFullNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,44)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDirectory"))
if mibBuilder.loadTexts: cdrDiskFullNotify.setDescription('Info :CDR file disk usage reach critical threshold ')
cdrFileOpenErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,45)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileOpenErrNotify.setDescription('Info :CDR open file error ')
cdrFileMoveErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,46)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileMoveErrNotify.setDescription('Info : Error in moving CDR file from temp location to target CDR file location ')
cdrDeleteErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,47)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrDeleteErrNotify.setDescription('Info : CDR file cannot be deleted ')
cdrWriteHeaderErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,48)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrWriteHeaderErrNotify.setDescription('Info :Error in writing CDR file header ')
cdrWriteRecErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,49)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrWriteRecErrNotify.setDescription('Info :Error in writing CDR record ')
cdrErrFileLocErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,50)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrErrFileLocErrNotify.setDescription('Info: Invalid Cdr Directory ')
cdrErrTempFileLocErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,51)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrErrTempFileLocErrNotify.setDescription('Info: Invalid Cdr Directory ')
cdrFileSysErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,52)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileSysErrNotify.setDescription('Info: Cdr File System Operation error. ')
cdrFileCloseErrNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,53)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileCloseErrNotify.setDescription('Info: Error in closing CDR file ')
cdrFileDelete5DaysNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,54)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileDelete5DaysNotify.setDescription('Info: cdr files created within past 5 days are deleted ')
ss7LinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,55)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkUpNotify.setDescription('Info : switch has successfully brought up ss7 mtp3 link ')
ss7LinkDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,56)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkDnNotify.setDescription('Info : switch has a failure on ss7 mtp3 link ')
ss7Mtp2LinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,57)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7Mtp2LinkUpNotify.setDescription('Info : switch has successfully brought up ss7 mtp2 link ')
ss7Mtp2LinkDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,58)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7Mtp2LinkDnNotify.setDescription('Info : switch has a failure on ss7 mtp2 link ')
ss7LinkEnterCongestionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,59)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkEnterCongestionNotify.setDescription('Info : the specified link has entered a congestion situation ')
ss7LinkExitCongestionNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,60)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkExitCongestionNotify.setDescription('Info : the ss7 link has exited the congestion situation ')
ss7InvalidSLCNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,61)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
if mibBuilder.loadTexts: ss7InvalidSLCNotify.setDescription('Info : Mtp3 invalid SLC configured. ')
ss7ConcernedDpcPauseNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,62)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
if mibBuilder.loadTexts: ss7ConcernedDpcPauseNotify.setDescription('Info : Concerned DPC pause ')
ss7ConcernedDpcResumeNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,63)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
if mibBuilder.loadTexts: ss7ConcernedDpcResumeNotify.setDescription('Info : Concerned DPC resume ')
ss7ConcernedDpcRemUnAvailNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,64)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
if mibBuilder.loadTexts: ss7ConcernedDpcRemUnAvailNotify.setDescription('Info : Concerned DPC remote user unavailable ')
ss7LinkRemInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,65)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkRemInhNotify.setDescription('Info : Link Inhibited Remotely ')
ss7LinkRemUnInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,66)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkRemUnInhNotify.setDescription('Info : Link UnInhibited Remotely ')
ss7LinkLocInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,67)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkLocInhNotify.setDescription('Info : Link Inhibited Locally ')
ss7LinkLocUnInhNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,68)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkLocUnInhNotify.setDescription('Info : Link UnInhibited Locally ')
ss7LinkLOPBlkNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,69)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkLOPBlkNotify.setDescription('Info : Local Processor Recovered causing link unblocked ')
ss7LinkLPRNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,70)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkLPRNotify.setDescription('Info : Local Processor Recovered causing link unblocked ')
ss7LinkRPONotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,71)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkRPONotify.setDescription('Info :LSSU/SIPO Received ')
ss7LinkRPRNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,72)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: ss7LinkRPRNotify.setDescription('Info :LSSU/SIPO stopped and FISU/MSU recived ')
ss7IsupCicLocNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,73)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"), ("ARMILLAIRE2000-MIB", "trapCicvalue"), ("ARMILLAIRE2000-MIB", "trapCicrange"), ("ARMILLAIRE2000-MIB", "trapCause"))
if mibBuilder.loadTexts: ss7IsupCicLocNotify.setDescription('Info : ISUP Circuits are blocked/unblocked locally ')
ss7IsupCicRemNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,74)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"), ("ARMILLAIRE2000-MIB", "trapCicvalue"), ("ARMILLAIRE2000-MIB", "trapCicrange"), ("ARMILLAIRE2000-MIB", "trapCause"))
if mibBuilder.loadTexts: ss7IsupCicRemNotify.setDescription('Info : ISUP Circuits are blocked/unblocked remotely ')
ss7IsupCongLvl1Notify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,75)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
if mibBuilder.loadTexts: ss7IsupCongLvl1Notify.setDescription('Info : Route to DPC is encountering Level 1 Congestion ')
ss7IsupCongLvl2Notify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,76)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"))
if mibBuilder.loadTexts: ss7IsupCongLvl2Notify.setDescription('Info : Route to DPC is encountering Level 2 Congestion ')
isdnDChnlUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,77)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"))
if mibBuilder.loadTexts: isdnDChnlUpNotify.setDescription('Info : An ISDN D-channel is Up ')
isdnDChnlDnNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,78)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapXconnectId"), ("ARMILLAIRE2000-MIB", "trapSlotId"), ("ARMILLAIRE2000-MIB", "trapPortId"))
if mibBuilder.loadTexts: isdnDChnlDnNotify.setDescription('Info : An ISDN D-channel is down ')
logFileReadyNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,79)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
if mibBuilder.loadTexts: logFileReadyNotify.setDescription('Info : Logger file is ready ')
logDiskFull60PercentNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,80)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogErrcause"), ("ARMILLAIRE2000-MIB", "trapLogErrNo"))
if mibBuilder.loadTexts: logDiskFull60PercentNotify.setDescription('Info : Log Files occupy 60% of disk quota ')
logDiskFull70PercentNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,81)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogErrcause"), ("ARMILLAIRE2000-MIB", "trapLogErrNo"))
if mibBuilder.loadTexts: logDiskFull70PercentNotify.setDescription('Info : Log Files occupy 70% of disk quota ')
logDiskFull80PercentNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,82)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogErrcause"), ("ARMILLAIRE2000-MIB", "trapLogErrNo"))
if mibBuilder.loadTexts: logDiskFull80PercentNotify.setDescription('Info : Log Files occupy 80% of disk quota ')
logErrFileOpenNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,83)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
if mibBuilder.loadTexts: logErrFileOpenNotify.setDescription('Info : Log file open error ')
logErrFileCloseNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,84)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
if mibBuilder.loadTexts: logErrFileCloseNotify.setDescription('Info : Log file close error ')
logErrFileDeleteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,85)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
if mibBuilder.loadTexts: logErrFileDeleteNotify.setDescription('Info : Log file cannot be deleted ')
logErrFileWriteNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,86)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLogFileName"))
if mibBuilder.loadTexts: logErrFileWriteNotify.setDescription('Info : Log manager cannot write to log file ')
msscPriDedicatedLinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,87)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: msscPriDedicatedLinkUpNotify.setDescription('Info : Dedicated link between the 2 Netra machine is UP ')
msscPriDedicatedLinkDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,88)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: msscPriDedicatedLinkDownNotify.setDescription('Info : Dedicated link between the 2 Netra machine is down ')
msscSecDedicatedLinkUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,89)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: msscSecDedicatedLinkUpNotify.setDescription('Info : Dedicated link between the 2 Netra machine is UP ')
msscSecDedicatedLinkDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,90)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLinkId"))
if mibBuilder.loadTexts: msscSecDedicatedLinkDownNotify.setDescription('Info :Dedicated link between the 2 Netra machine is down ')
msscPriPsuUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,91)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
if mibBuilder.loadTexts: msscPriPsuUpNotify.setDescription('Info : Primary hosts power supply up ')
msscPriPsuDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,92)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
if mibBuilder.loadTexts: msscPriPsuDownNotify.setDescription('Info : Primary hosts power supply down ')
msscBakPsuUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,93)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
if mibBuilder.loadTexts: msscBakPsuUpNotify.setDescription('Info : Backup hosts power supply up ')
msscBakPsuDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,94)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapPsuNo"))
if mibBuilder.loadTexts: msscBakPsuDownNotify.setDescription('Info : Backup hosts power supply down ')
msscPriLanPhyIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,95)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: msscPriLanPhyIntfUpNotify.setDescription('Info : Primary Physical LAN Interface Up ')
msscPriLanPhyIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,96)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: msscPriLanPhyIntfDownNotify.setDescription('Info : Primary Physical LAN Interface Down ')
msscSecLanPhyIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,97)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: msscSecLanPhyIntfUpNotify.setDescription('Info : Secondary physical LAN Interface Up ')
msscSecLanPhyIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,98)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: msscSecLanPhyIntfDownNotify.setDescription('Info : Secondary Physical LAN Interface Down ')
msscPriHostFanUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,99)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
if mibBuilder.loadTexts: msscPriHostFanUpNotify.setDescription('Info : Primary Fan Up ')
msscPriHostFanDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,100)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
if mibBuilder.loadTexts: msscPriHostFanDownNotify.setDescription('Info : Primary Fan Down ')
msscBckHostFanUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,101)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
if mibBuilder.loadTexts: msscBckHostFanUpNotify.setDescription('Info : Backup Fan Up ')
msscBckHostFanDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,102)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapFanNo"))
if mibBuilder.loadTexts: msscBckHostFanDownNotify.setDescription('Info : Backup Fan Down ')
hubPriIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,103)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: hubPriIntfUpNotify.setDescription('Info : Primary Interface Up ')
hubPriIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,104)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: hubPriIntfDownNotify.setDescription('Info : Primary Interface down ')
hubSecIntfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,105)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: hubSecIntfUpNotify.setDescription('Info : Secondary Interface Up ')
hubSecIntfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,106)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapLanId"))
if mibBuilder.loadTexts: hubSecIntfDownNotify.setDescription('Info : Secondary Interface Down ')
ftProcessAbnormalTerminationNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,107)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
if mibBuilder.loadTexts: ftProcessAbnormalTerminationNotify.setDescription('Info : Process abnormal termination ')
ftProcessRestartConfigSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,108)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
if mibBuilder.loadTexts: ftProcessRestartConfigSucceededNotify.setDescription('Info : Process abnormal termination ')
ftProcessRestartConfigFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,109)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
if mibBuilder.loadTexts: ftProcessRestartConfigFailedNotify.setDescription('Info : Process abnormal termination ')
ftMsscFtmupNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,110)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
if mibBuilder.loadTexts: ftMsscFtmupNotify.setDescription('Info : Process abnormal termination ')
ftControlSwitchOverSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,111)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
if mibBuilder.loadTexts: ftControlSwitchOverSucceededNotify.setDescription('Info : Control SwitchOver Successful ')
ftControlSwitchOverFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,112)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
if mibBuilder.loadTexts: ftControlSwitchOverFailedNotify.setDescription('Info : Control SwitchOver Failure ')
ftForcedSwitchOverSucceededNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,113)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
if mibBuilder.loadTexts: ftForcedSwitchOverSucceededNotify.setDescription('Info : Forced SwitchOver Successful ')
ftForcedSwitchOverFailedNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,114)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"))
if mibBuilder.loadTexts: ftForcedSwitchOverFailedNotify.setDescription('Info : Forced SwitchOver Failure ')
ftProcessRestartDisableNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,115)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapProcName"), ("ARMILLAIRE2000-MIB", "trapProcInstNo"))
if mibBuilder.loadTexts: ftProcessRestartDisableNotify.setDescription('')
updateDBAuditOpStatNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,116)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
if mibBuilder.loadTexts: updateDBAuditOpStatNotify.setDescription('Info : Updated the Database for Audited Related Operational Status ')
isupIccAuditNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,117)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"))
if mibBuilder.loadTexts: isupIccAuditNotify.setDescription('ISUP ICC Audit Notify')
cdrDiskFullMinorNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,118)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDirectory"))
if mibBuilder.loadTexts: cdrDiskFullMinorNotify.setDescription('CDR Disk Usage reached Minor Threshold')
cdrDiskFullMajorNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,119)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDirectory"))
if mibBuilder.loadTexts: cdrDiskFullMajorNotify.setDescription('CDR Disk Usage reached Major Threshold')
cdrErrMoveCdrNackNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,120)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrErrMoveCdrNackNotify.setDescription('Invalid CDR file Non-Ack Directory')
cdrFileMoveCdrNackNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,121)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapCdrFileName"))
if mibBuilder.loadTexts: cdrFileMoveCdrNackNotify.setDescription('CDR file moved to Non-Ack Directory')
ss7CktValidationNotify = NotificationType((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 1) + (0,122)).setObjects(("ARMILLAIRE2000-MIB", "trapSeverity"), ("ARMILLAIRE2000-MIB", "trapOpc"), ("ARMILLAIRE2000-MIB", "trapSwitchName"), ("ARMILLAIRE2000-MIB", "trapDpc"), ("ARMILLAIRE2000-MIB", "trapCicvalue"), ("ARMILLAIRE2000-MIB", "trapCause"))
if mibBuilder.loadTexts: ss7CktValidationNotify.setDescription('Validation of Circuits')
switchActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2), )
if mibBuilder.loadTexts: switchActiveAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: switchActiveAlarmTable.setDescription('')
switchActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1), ).setIndexNames((0, "ARMILLAIRE2000-MIB", "switchAlarmMsgId"), (0, "ARMILLAIRE2000-MIB", "switchAlarmInstNo"))
if mibBuilder.loadTexts: switchActiveAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: switchActiveAlarmEntry.setDescription('')
switchAlarmMsgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmMsgId.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmMsgId.setDescription('Alarm Message Id. Can be any integer from 1-65535. ')
switchAlarmInstNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmInstNo.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmInstNo.setDescription('Instance number related to alarm. Can be any integer from 1-65535. ')
switchAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmTime.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmTime.setDescription('Date and time when the alarma was generated ')
switchAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 4), EventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmType.setDescription('This specifies the event group is alarm. Default :ALARM ')
switchAlarmMainEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 5), AlarmEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmMainEvent.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmMainEvent.setDescription('This specifies the main event event group of alarm ')
switchAlarmSubEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 6), AlarmSubEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmSubEvent.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmSubEvent.setDescription('This specifies the main event event group of alarm ')
switchAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmId.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmId.setDescription('This specifies the alarm that was sent ')
switchAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 8), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmSeverity.setDescription('This field defines the severity of alarms of alarm. Alarms can od : Major,Minor,Critical and Informational ')
switchAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAlarmDesc.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmDesc.setDescription('This description related to Generated alarm ')
switchAlarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 10), ActiveAlarmAckStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchAlarmAck.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmAck.setDescription('This field is to acknowelge the alarms manually ')
switchAlarmRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4618, 1, 2, 7, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchAlarmRepeatTime.setStatus('mandatory')
if mibBuilder.loadTexts: switchAlarmRepeatTime.setDescription('Alarm Repeat Time in minutes: After the set time all alarms in the active alarm table will be displayed to the user again ')
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", LinkSetControlStatus=LinkSetControlStatus, LinkSetOpStatus=LinkSetOpStatus, measSwitchIsupOutgoingAnsiTrunkCallAnswered=measSwitchIsupOutgoingAnsiTrunkCallAnswered, ss7TrunkId=ss7TrunkId, trapLinkId=trapLinkId, isdnTmrT305=isdnTmrT305, isupTmrTCCR=isupTmrTCCR, trunkGrpRowStatus=trunkGrpRowStatus, LogFileEnDis=LogFileEnDis, xconnSlotIdEndB=xconnSlotIdEndB, faultModemTrnkId=faultModemTrnkId, genConsoleLogoutNotify=genConsoleLogoutNotify, cdrFileSysErrNotify=cdrFileSysErrNotify, isdnTrnkMgmntId=isdnTrnkMgmntId, measLinkMSUsDiscarded=measLinkMSUsDiscarded, ss7TrunkDS1LBO=ss7TrunkDS1LBO, switchDSPCfgTable=switchDSPCfgTable, measFileMoveErrNotify=measFileMoveErrNotify, xconnectInterfaceOutOfServiceNotify=xconnectInterfaceOutOfServiceNotify, isdnMgmntGroup=isdnMgmntGroup, ss7CktTmrT16=ss7CktTmrT16, switchActiveAlarmEntry=switchActiveAlarmEntry, MeasEnableStatus=MeasEnableStatus, cdrMgmntCmdGroup=cdrMgmntCmdGroup, isdnTmrT308=isdnTmrT308, ss7RouteTraceEntry=ss7RouteTraceEntry, CdrFlag=CdrFlag, genProcessHeapOverFlowNotify=genProcessHeapOverFlowNotify, measFileDeleteNotify=measFileDeleteNotify, mtp2LinkTmrCfgTable=mtp2LinkTmrCfgTable, ss7LinkLocUnInhNotify=ss7LinkLocUnInhNotify, IsdnTrnkOpStatus=IsdnTrnkOpStatus, cdrFileMoveErrNotify=cdrFileMoveErrNotify, ss7LnkEnable=ss7LnkEnable, measFileMoveNotify=measFileMoveNotify, rtEntryIsdntrunkId=rtEntryIsdntrunkId, enableIsdntrunk=enableIsdntrunk, ss7LinkRemUnInhNotify=ss7LinkRemUnInhNotify, isdnDS1TransClkSrc=isdnDS1TransClkSrc, ss7CktMgmntGroup=ss7CktMgmntGroup, measLinkMSUsRetransmitted=measLinkMSUsRetransmitted, E1MultiFrame=E1MultiFrame, DS1LBO=DS1LBO, statusLM1ProcId=statusLM1ProcId, ss7CktTrunkId=ss7CktTrunkId, switchFeatureTGFeatureSS=switchFeatureTGFeatureSS, ss7TrunkSlotId=ss7TrunkSlotId, ss7Route=ss7Route, mtp3T24=mtp3T24, AtmIfType=AtmIfType, mfdMgmntEntry=mfdMgmntEntry, xconnectName=xconnectName, ss7CktPriority=ss7CktPriority, IsdnPriority=IsdnPriority, cdrFileReadyNotify=cdrFileReadyNotify, hubSecIntfDownNotify=hubSecIntfDownNotify, isdnTrnkTmrOpStatus=isdnTrnkTmrOpStatus, ss7CktCfgEntry=ss7CktCfgEntry, xlinkMgmntCmd=xlinkMgmntCmd, cdrFileOpenErrNotify=cdrFileOpenErrNotify, rtEntrySs7RowStatus=rtEntrySs7RowStatus, isupTmrT36=isupTmrT36, ss7LnkTraceEntry=ss7LnkTraceEntry, modemFaultDetection=modemFaultDetection, TrunkState=TrunkState, ss7TrunkDS3DS1TransClkSrc=ss7TrunkDS3DS1TransClkSrc, IsdnControlstatus=IsdnControlstatus, ss7BCktTrunkId=ss7BCktTrunkId, measTrnkGrptotalUsage=measTrnkGrptotalUsage, isdnTmrT311=isdnTmrT311, cdrMngmtTrnkGrpTable=cdrMngmtTrnkGrpTable, isupTmrT7=isupTmrT7, isdnTmrT330=isdnTmrT330, statusMTP24ProcId=statusMTP24ProcId, ss7ConcernedDpcRemUnAvailNotify=ss7ConcernedDpcRemUnAvailNotify, trapCicvalue=trapCicvalue, isdnTmrT397=isdnTmrT397, ss7CicTmrEntry=ss7CicTmrEntry, alarmGrp=alarmGrp, faultModemRepnum=faultModemRepnum, CircuitControlStatus=CircuitControlStatus, digitStripMgmntEntry=digitStripMgmntEntry, logFileDuration=logFileDuration, cdrFileInfo=cdrFileInfo, statusMTP22ProcId=statusMTP22ProcId, mtp3T3=mtp3T3, isdnPortId=isdnPortId, ss7LinksetCfgTable=ss7LinksetCfgTable, lnp=lnp, xconnectIPAddr=xconnectIPAddr, mtp3T17=mtp3T17, AddrString=AddrString, ss7BCktT16=ss7BCktT16, ss7CktMgmntCmd=ss7CktMgmntCmd, ss7LinksetCfgEntry=ss7LinksetCfgEntry, ss7TrunkDS1LineType=ss7TrunkDS1LineType, DS3LBO=DS3LBO, ss7LinkTrunkId=ss7LinkTrunkId, ss7RtDpcTable=ss7RtDpcTable, trapRepeatNum=trapRepeatNum, xconnectIntfNearEndLOFNotify=xconnectIntfNearEndLOFNotify, switchActiveAlarmTable=switchActiveAlarmTable, ss7CktTmrT15=ss7CktTmrT15, cdrTrnkGrpId=cdrTrnkGrpId, isdnTmrT312=isdnTmrT312, auditISDNTrnkCfgEntry=auditISDNTrnkCfgEntry, trapOpc=trapOpc, mtp3T6=mtp3T6, AuditOperation=AuditOperation, routeAddr=routeAddr, linksetMgmntCmd=linksetMgmntCmd, trapCause=trapCause, ss7TrunkDS3ATMLBO=ss7TrunkDS3ATMLBO, mtp3TBND=mtp3TBND, BlockOperation=BlockOperation, ss7LinksetName=ss7LinksetName, switchUpTime=switchUpTime, mtp3T21=mtp3T21, ss7CktDir=ss7CktDir, isupTmrT22=isupTmrT22, switchPcMode=switchPcMode, ss7TrunkE1MultiFrame=ss7TrunkE1MultiFrame, isdnTmrT318=isdnTmrT318, switchUserPriority=switchUserPriority, switchVerMTP2=switchVerMTP2, isdnChnlMgmntTable=isdnChnlMgmntTable, measFileEnableGrp=measFileEnableGrp, switchFeatureTGId=switchFeatureTGId, mtp3T7=mtp3T7, log=log, measSwitchPriFailCallNoCircuit=measSwitchPriFailCallNoCircuit, measSwitchPriFailCallDataSuspect=measSwitchPriFailCallDataSuspect, isdnE1CRC4=isdnE1CRC4, processStatusInfo=processStatusInfo, ss7BCktCfgEntry=ss7BCktCfgEntry, ss7LinkRPONotify=ss7LinkRPONotify, ss7BCktT15=ss7BCktT15, measSwitchPriFailCallGrp=measSwitchPriFailCallGrp, ss7RouteLog=ss7RouteLog, isdnStatusTrunkId=isdnStatusTrunkId, isdnDchnlId=isdnDchnlId, ss7LnkTrace=ss7LnkTrace, routeNumOfDigit=routeNumOfDigit, cdrFileStatus=cdrFileStatus, trapPsuNo=trapPsuNo, xlinkRowStatus=xlinkRowStatus, isupTmrT8=isupTmrT8, mtp2T7=mtp2T7, disableLogGen=disableLogGen, ss7BCktVci=ss7BCktVci, statusMTP23ProcId=statusMTP23ProcId, ss7LinksetMgmtEntry=ss7LinksetMgmtEntry, alarmTraps=alarmTraps, ftProcessRestartConfigSucceededNotify=ftProcessRestartConfigSucceededNotify, msscPriLanPhyIntfDownNotify=msscPriLanPhyIntfDownNotify, ss7CktTmrRowStatus=ss7CktTmrRowStatus, measFileEnableISUPTraffic=measFileEnableISUPTraffic, measLinkLostMSUsBufferOverflow=measLinkLostMSUsBufferOverflow, measLinkName=measLinkName, cdrFileName=cdrFileName, modemStatusEntry=modemStatusEntry, msscPriHostFanUpNotify=msscPriHostFanUpNotify, ss7TrunkOC3TransClkSrc=ss7TrunkOC3TransClkSrc, routeAddrType=routeAddrType, measFileEnableTrunkGrp=measFileEnableTrunkGrp, measFileDeleteErrNotify=measFileDeleteErrNotify, DS1LineCoding=DS1LineCoding, ss7CktTmrT14=ss7CktTmrT14, isdnTmrT306=isdnTmrT306, mtp3LinkCfgTable=mtp3LinkCfgTable, switchPcInfo=switchPcInfo, measFileInfo=measFileInfo, switchPcEntry=switchPcEntry, rtEntrySs7Dpc=rtEntrySs7Dpc, ftControlSwitchOverSucceededNotify=ftControlSwitchOverSucceededNotify, ss7CktMgmntTrnkId=ss7CktMgmntTrnkId, trapIntfcId=trapIntfcId, ss7TrunkDS3ATMLineType=ss7TrunkDS3ATMLineType, auditTrnkId=auditTrnkId, AddrType=AddrType, auditDPCCfgEntry=auditDPCCfgEntry, ss7IsupCongLvl1Notify=ss7IsupCongLvl1Notify, isupTmrTFGR=isupTmrTFGR, trapInterfaceId=trapInterfaceId, isdnDS3LineType=isdnDS3LineType, measSwitchIsupFailCallItutCalledPartyLineBusy=measSwitchIsupFailCallItutCalledPartyLineBusy, trapCicrange=trapCicrange, switchLocation=switchLocation, systemDescr=systemDescr, isdnDS1LineCoding=isdnDS1LineCoding, trapProcessId=trapProcessId, ss7CktValidationNotify=ss7CktValidationNotify, TimerType=TimerType, slotIdEndA=slotIdEndA, logErrFileDeleteNotify=logErrFileDeleteNotify, mtp2RowStatus=mtp2RowStatus, cdrErrFileLocErrNotify=cdrErrFileLocErrNotify, isdnTmrT322=isdnTmrT322, isdnTmrTRST=isdnTmrTRST, switchIPAddr=switchIPAddr, ss7Br=ss7Br, measFileCfgMeasInterval=measFileCfgMeasInterval, IsdnType=IsdnType, measLinkOctetsReceived=measLinkOctetsReceived, atmLOFNotify=atmLOFNotify, measSwitchIsupIncomingAnsiTrunkCallAttempts=measSwitchIsupIncomingAnsiTrunkCallAttempts, slotIdEndB=slotIdEndB, mtp3T19=mtp3T19, msscSecLanPhyIntfUpNotify=msscSecLanPhyIntfUpNotify, ModemEnableStatus=ModemEnableStatus, ss7CktDpc=ss7CktDpc, mtp2T6=mtp2T6, mtp3GenTmrCfgGroup=mtp3GenTmrCfgGroup, isdnTmrT316C=isdnTmrT316C, measFileEnableISUPIneffectiveCall=measFileEnableISUPIneffectiveCall, ss7TrunkE1TransClk=ss7TrunkE1TransClk, ss7BCktOpStatus=ss7BCktOpStatus, measFileCfgPurgeFlag=measFileCfgPurgeFlag, ss7LinkMgmntEntry=ss7LinkMgmntEntry, measFileAcknowledge=measFileAcknowledge, msscBckHostFanUpNotify=msscBckHostFanUpNotify, cdrErrTempFileLocErrNotify=cdrErrTempFileLocErrNotify, ss7LnkTraceTable=ss7LnkTraceTable, trace=trace, mtp3T36=mtp3T36, isdnLoadBalanceMgmntTable=isdnLoadBalanceMgmntTable, isupTmrT31=isupTmrT31, mtp3TFLC=mtp3TFLC, trapBitMapStatus=trapBitMapStatus, isdnStatusChnlSuConnId=isdnStatusChnlSuConnId, ss7TrunkOpStatus=ss7TrunkOpStatus, ss7CICMgmntCmd=ss7CICMgmntCmd, measTrnkGrpTrafficTable=measTrnkGrpTrafficTable, ss7TrunkName=ss7TrunkName, RoffType=RoffType, ss7CktT13=ss7CktT13, ss7CktTmrDpc=ss7CktTmrDpc, mtp3T30=mtp3T30, mfdMgmntCmd=mfdMgmntCmd, mtp3T34=mtp3T34, DSPCardType=DSPCardType, ss7CktT15=ss7CktT15, ss7LinksetMode=ss7LinksetMode, isdnChnlStatusTable=isdnChnlStatusTable, mtp3T12=mtp3T12, xlinkCfgEntry=xlinkCfgEntry, logDiskFull60PercentNotify=logDiskFull60PercentNotify, switchAlarmType=switchAlarmType, ss7BCktVpi=ss7BCktVpi, NameString=NameString, ftProcessRestartConfigFailedNotify=ftProcessRestartConfigFailedNotify, ss7BCktDpc=ss7BCktDpc, xconnSlotIdEndA=xconnSlotIdEndA, isdnDirection=isdnDirection)
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", rtEntryIsdnRouteName=rtEntryIsdnRouteName, isupTmrT33=isupTmrT33, ss7Mtp2LinkUpNotify=ss7Mtp2LinkUpNotify, ss7TrunkDS1LineCoding=ss7TrunkDS1LineCoding, ss7LinkLPRNotify=ss7LinkLPRNotify, cdrConfig=cdrConfig, measSwitchIsupFailCallAnsiCalledPartyLineBusy=measSwitchIsupFailCallAnsiCalledPartyLineBusy, isupTmrTGTCHG=isupTmrTGTCHG, switchVerICC=switchVerICC, ss7CktCfgTable=ss7CktCfgTable, msscPriPsuDownNotify=msscPriPsuDownNotify, isdnTrunkId=isdnTrunkId, measFileConfig=measFileConfig, enableGroup=enableGroup, ss7Mtp2LinkDnNotify=ss7Mtp2LinkDnNotify, ss7LnkId=ss7LnkId, EnableStatus=EnableStatus, ss7CktTmrT3=ss7CktTmrT3, lrnTable=lrnTable, xconnectDnNotify=xconnectDnNotify, ss7LinkLOPBlkNotify=ss7LinkLOPBlkNotify, isdnDChnlUpNotify=isdnDChnlUpNotify, switchType=switchType, rtEntrySs7Mode=rtEntrySs7Mode, ss7BCktT13=ss7BCktT13, xconnectXlinkRouteFailNotify=xconnectXlinkRouteFailNotify, mtp2LinkId=mtp2LinkId, isupTmrT20=isupTmrT20, isdnE1MultiFrame=isdnE1MultiFrame, isupTmrT2=isupTmrT2, TGFeature=TGFeature, logPurgeTime=logPurgeTime, ss7TrunkXconnectId=ss7TrunkXconnectId, mtp3T35=mtp3T35, rtEntrySs7OpStatus=rtEntrySs7OpStatus, trapObjects=trapObjects, mtp2T4e=mtp2T4e, enableXconnect=enableXconnect, rtAddrType=rtAddrType, ss7RouteEnable=ss7RouteEnable, xconnectCfgEntry=xconnectCfgEntry, ss7BCktPriority=ss7BCktPriority, measSwitchIsupOutgoingItutTrunkCallAttempts=measSwitchIsupOutgoingItutTrunkCallAttempts, ss7ConcernedDpcPauseNotify=ss7ConcernedDpcPauseNotify, mtp2T5=mtp2T5, xconnectClkFailNotify=xconnectClkFailNotify, xconnectCardRemovalNotify=xconnectCardRemovalNotify, switchAlarmRepeatTime=switchAlarmRepeatTime, rtEntrySs7GrpId=rtEntrySs7GrpId, measSwitchPriFailCallCalledPartyLineBusy=measSwitchPriFailCallCalledPartyLineBusy, cdrFileCloseErrNotify=cdrFileCloseErrNotify, ss7AtmSlotId=ss7AtmSlotId, ProcessStatus=ProcessStatus, logFileReadyNotify=logFileReadyNotify, ss7LinkMgmntTable=ss7LinkMgmntTable, msscPriDedicatedLinkDownNotify=msscPriDedicatedLinkDownNotify, cdrLongDurCallGenTime=cdrLongDurCallGenTime, measTrnkGrpName=measTrnkGrpName, switchInfo=switchInfo, ss7LinkRemInhNotify=ss7LinkRemInhNotify, ss7AtmPortId=ss7AtmPortId, isdnDS1LBO=isdnDS1LBO, measFileEnablePRITraffic=measFileEnablePRITraffic, ss7TrunkUNCHE3TransClkSrc=ss7TrunkUNCHE3TransClkSrc, ss7CktTmrT12=ss7CktTmrT12, xconnIdEndA=xconnIdEndA, ss7AtmPhyType=ss7AtmPhyType, ss7AtmXconnectId=ss7AtmXconnectId, logFileStatus=logFileStatus, isdnChnlStatusCfgEntry=isdnChnlStatusCfgEntry, measTrnkGrpincomingUsage=measTrnkGrpincomingUsage, CktOpStatus=CktOpStatus, switchAlarmAck=switchAlarmAck, isupTimerCfgTable=isupTimerCfgTable, switchUserName=switchUserName, cdrFileCreateTime=cdrFileCreateTime, switchVersion=switchVersion, processStatus=processStatus, armillaire=armillaire, mtp2OpStatus=mtp2OpStatus, isdnChnlMgmntCmd=isdnChnlMgmntCmd, trunkGrpRoffType=trunkGrpRoffType, xconnectId=xconnectId, trapFanNo=trapFanNo, measSwitchIsupGrp=measSwitchIsupGrp, logGenTime=logGenTime, trapTrunkId=trapTrunkId, ss7TrunkDS3LBO=ss7TrunkDS3LBO, msscSecDedicatedLinkDownNotify=msscSecDedicatedLinkDownNotify, switchDSPCardType=switchDSPCardType, measFileCfgSecondaryDir=measFileCfgSecondaryDir, trnkGrp=trnkGrp, ss7IsupCicRemNotify=ss7IsupCicRemNotify, auditISDNTrnkTable=auditISDNTrnkTable, isupTmrT5=isupTmrT5, ss7AtmLnkId=ss7AtmLnkId, rtMgmntCmd=rtMgmntCmd, ss7Sig=ss7Sig, mtp2T3=mtp2T3, rtEntryIsdnOpStatus=rtEntryIsdnOpStatus, portIdEndB=portIdEndB, isdnDS3LBO=isdnDS3LBO, switchDSPCfgOpStatus=switchDSPCfgOpStatus, switchUserId=switchUserId, ss7LinkChannel=ss7LinkChannel, switchFeatureTGFeatureEC=switchFeatureTGFeatureEC, ss7CktRowStatus=ss7CktRowStatus, isdnCntThreshold=isdnCntThreshold, trapLogErrNo=trapLogErrNo, ftForcedSwitchOverFailedNotify=ftForcedSwitchOverFailedNotify, rtEntryIsdnCfgTable=rtEntryIsdnCfgTable, cdrFileAcknowledge=cdrFileAcknowledge, trapDpc=trapDpc, switchContact=switchContact, isupTmrT34=isupTmrT34, mtp2T2=mtp2T2, routeId=routeId, trapNode2Id=trapNode2Id, measSwitchIsupFailCallItutNoCircuit=measSwitchIsupFailCallItutNoCircuit, CktRowStatus=CktRowStatus, RouteType=RouteType, switchAlarmTime=switchAlarmTime, Standard=Standard, FTswitchOver=FTswitchOver, rtEntrySs7CfgTable=rtEntrySs7CfgTable, AlarmSubEvent=AlarmSubEvent, ss7BCktRowStatus=ss7BCktRowStatus, isdnDS3TransClkSrc=isdnDS3TransClkSrc, measSwitchIsupIncomingItutTrunkCallAnswered=measSwitchIsupIncomingItutTrunkCallAnswered, mtp3T15=mtp3T15, isupTmrTCRA=isupTmrTCRA, ss7RtOpStatus=ss7RtOpStatus, mtp2=mtp2, trapProcessorId=trapProcessorId, mtp3T23=mtp3T23, trapCdrFileName=trapCdrFileName, rtEntryIsdnGrpId=rtEntryIsdnGrpId, ss7CktT16=ss7CktT16, ss7CktMgmtDPC=ss7CktMgmtDPC, Controlstatus=Controlstatus, switchTrap=switchTrap, cdrGenMgmntCmd=cdrGenMgmntCmd, logFileInfo=logFileInfo, modemStatusTable=modemStatusTable, ss7RtDpcEntry=ss7RtDpcEntry, trunkGrpType=trunkGrpType, AlarmSeverity=AlarmSeverity, trapSwitchId2=trapSwitchId2, trapRoutename=trapRoutename, isdnPhyIntfType=isdnPhyIntfType, ss7TrunkE1CRC4=ss7TrunkE1CRC4, msscBakPsuUpNotify=msscBakPsuUpNotify, switchAlarmSeverity=switchAlarmSeverity, enableSS7Route=enableSS7Route, cdrSensorId=cdrSensorId, ss7TrunkPhyType=ss7TrunkPhyType, routeRouteName=routeRouteName, isdnTrnkMgmntCmd=isdnTrnkMgmntCmd, switchAlarmId=switchAlarmId, rtEntryIsdnCfgEntry=rtEntryIsdnCfgEntry, cdrFileSourceId=cdrFileSourceId, statusSIG1ProcId=statusSIG1ProcId, ss7RtDPC=ss7RtDPC, xconnectOpStatus=xconnectOpStatus, cdrTrnkGrpdirection=cdrTrnkGrpdirection, measFileOpenErrNotify=measFileOpenErrNotify, switchVerISDN=switchVerISDN, mtp3T22=mtp3T22, switchDSPXconnId=switchDSPXconnId, measFileCfgUsagescanInterval=measFileCfgUsagescanInterval, switchFeatureTGType=switchFeatureTGType, switchAlarmInstNo=switchAlarmInstNo, ss7LinksetAdjDpc=ss7LinksetAdjDpc, mtp3T1=mtp3T1, UserLoginStatus=UserLoginStatus, ss7CktMgmntRepNum=ss7CktMgmntRepNum, measSwitchIsupFailCallItutIneffectiveMachineAttempts=measSwitchIsupFailCallItutIneffectiveMachineAttempts, msscBakPsuDownNotify=msscBakPsuDownNotify, ss7BCktT17=ss7BCktT17, measSwitchIsupFailCallAnsiNoCircuit=measSwitchIsupFailCallAnsiNoCircuit, ss7AtmLinkCfgTable=ss7AtmLinkCfgTable, ss7BCktTVal=ss7BCktTVal, updateDBAuditOpStatNotify=updateDBAuditOpStatNotify, measTrnkGrpDataSuspect=measTrnkGrpDataSuspect, measLinkInServiceDuration=measLinkInServiceDuration, trapBucketSize=trapBucketSize, LinkControlStatus=LinkControlStatus, mtp2T1=mtp2T1, ss7TrunkDS3ATMCellMap=ss7TrunkDS3ATMCellMap, TrunkType=TrunkType, ss7LinkSlc=ss7LinkSlc, ss7CktCic=ss7CktCic, isdnTmrTREST=isdnTmrTREST, cdrFileConfig=cdrFileConfig, isdnTrunkType=isdnTrunkType, routeAdrId=routeAdrId, switchAlarmSubEvent=switchAlarmSubEvent, ss7TrunkDS3TransClkSrc=ss7TrunkDS3TransClkSrc, ss7BCktT3=ss7BCktT3, xconnectIntfCreateNotify=xconnectIntfCreateNotify, trapPortId=trapPortId, measTrnkGrpISCicsChnls=measTrnkGrpISCicsChnls, linkName=linkName, RowStatus=RowStatus, rteName=rteName, statusSIG2ProcId=statusSIG2ProcId, statusISDN1ProcId=statusISDN1ProcId, auditDPCTable=auditDPCTable, cdrFileQuery=cdrFileQuery, xconnectUpNotify=xconnectUpNotify, ss7CktT12=ss7CktT12, ss7LinkRPRNotify=ss7LinkRPRNotify, switchUserCfgTable=switchUserCfgTable, genProcessHeapOverFlowRecoverNotify=genProcessHeapOverFlowRecoverNotify, ss7LinksetOpStatus=ss7LinksetOpStatus, isdnDS3DS1TransClkSrc=isdnDS3DS1TransClkSrc, UserLoginPriority=UserLoginPriority, switchAlarmDesc=switchAlarmDesc, ss7LinksetMgmtTable=ss7LinksetMgmtTable, switchVerSPHR=switchVerSPHR, measLinkOctectsTransmitted=measLinkOctectsTransmitted, ss7RtRowStatus=ss7RtRowStatus, hubPriIntfUpNotify=hubPriIntfUpNotify, measFileCfgPrimaryDir=measFileCfgPrimaryDir, ss7CktTmrTVal=ss7CktTmrTVal, trapLinkName=trapLinkName, auditXLink=auditXLink, ss7CktMgmntChnlId=ss7CktMgmntChnlId, cdrWriteHeaderErrNotify=cdrWriteHeaderErrNotify, xlinkConnectionType=xlinkConnectionType, isdn=isdn, isdnTrunkCfgTable=isdnTrunkCfgTable, cdrFileMoveCdrNackNotify=cdrFileMoveCdrNackNotify, hubSecIntfUpNotify=hubSecIntfUpNotify, LoadBalance=LoadBalance, isdnTrunkCfgEntry=isdnTrunkCfgEntry, measLinkUnavailableDuration=measLinkUnavailableDuration, IsdnChnlMgtOperation=IsdnChnlMgtOperation, VoicePcm=VoicePcm, switchUserStatus=switchUserStatus, isupTmrT19=isupTmrT19, ss7LinkMode=ss7LinkMode, mtp3OpStatus=mtp3OpStatus, xlinkMgmntEntry=xlinkMgmntEntry, xconnIdEndB=xconnIdEndB, lrnNum=lrnNum, ftProcessRestartDisableNotify=ftProcessRestartDisableNotify, mtp2LinkTmrCfgEntry=mtp2LinkTmrCfgEntry, isdnTmrTANS=isdnTmrTANS, measSwitchIsupFailCallGrp=measSwitchIsupFailCallGrp, switchPcInfoTable=switchPcInfoTable, switchVersionGrp=switchVersionGrp, trapCdrFileSeqNum=trapCdrFileSeqNum, auditTimePeriod=auditTimePeriod)
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", xconnectXlinkAdjConNotify=xconnectXlinkAdjConNotify, switchFeatureTGCfgTable=switchFeatureTGCfgTable, linkMgmntCmd=linkMgmntCmd, msscBckHostFanDownNotify=msscBckHostFanDownNotify, genProcessBufOverflowRecoverNotify=genProcessBufOverflowRecoverNotify, switchVerLM=switchVerLM, measFileCfgPurgeDay=measFileCfgPurgeDay, xconnect=xconnect, isdnTrnkId=isdnTrnkId, isdnTrnkMgmntTable=isdnTrnkMgmntTable, ss7LinkCfgTable=ss7LinkCfgTable, isupTmrTEX=isupTmrTEX, trunkGrpOpStatus=trunkGrpOpStatus, ss7TrunkRowStatus=ss7TrunkRowStatus, atmAISNotify=atmAISNotify, switchName=switchName, rtEntrySs7CfgEntry=rtEntrySs7CfgEntry, logAttribute=logAttribute, armillaire2000=armillaire2000, ss7IsupCongLvl2Notify=ss7IsupCongLvl2Notify, statusICC1ProcId=statusICC1ProcId, ss7RtLoadShareType=ss7RtLoadShareType, genConsoleLoginNotify=genConsoleLoginNotify, measLnk=measLnk, ftMsscFtmupNotify=ftMsscFtmupNotify, xconnectBkplaneRefClkClearNotify=xconnectBkplaneRefClkClearNotify, statusSPHR1ProcId=statusSPHR1ProcId, trapSlotId=trapSlotId, isdnTmrT301=isdnTmrT301, ss7CktRepNum=ss7CktRepNum, measSwitchPriFailCallMatchingLoss=measSwitchPriFailCallMatchingLoss, mtp3T14=mtp3T14, measSwitchIsupOutgoingAnsiTrunkCallAttempts=measSwitchIsupOutgoingAnsiTrunkCallAttempts, NumPlan=NumPlan, cdrFileDestinationType=cdrFileDestinationType, cdrDeleteErrNotify=cdrDeleteErrNotify, portIdEndA=portIdEndA, isdnDchnlTimeSlot=isdnDchnlTimeSlot, switchFeatureTGName=switchFeatureTGName, switchUserPassword=switchUserPassword, xconnectTCPPort=xconnectTCPPort, trapMeasFileName=trapMeasFileName, trunkGrpId=trunkGrpId, logFileGenEnable=logFileGenEnable, isdnTmrT310=isdnTmrT310, trapLogFileName=trapLogFileName, enableSwitch=enableSwitch, trapXconnectId=trapXconnectId, MtpRteState=MtpRteState, ss7CicRange=ss7CicRange, mtp3T13=mtp3T13, measSwitchIsupFailCallItutMatchingLoss=measSwitchIsupFailCallItutMatchingLoss, measLinkTrafficEntry=measLinkTrafficEntry, statusISDN2ProcId=statusISDN2ProcId, measDiskOverCrtclThresholdNotify=measDiskOverCrtclThresholdNotify, isdnTrunkOpStatus=isdnTrunkOpStatus, ss7LinkUpNotify=ss7LinkUpNotify, auditInfo=auditInfo, isdnTmrT313=isdnTmrT313, IsdnTrnkMgtOperation=IsdnTrnkMgtOperation, isupTmrT9=isupTmrT9, xlinkOpStatus=xlinkOpStatus, msscSecDedicatedLinkUpNotify=msscSecDedicatedLinkUpNotify, statusMTP21ProcId=statusMTP21ProcId, cdrDiskFullMajorNotify=cdrDiskFullMajorNotify, trunkGrpVoicePcm=trunkGrpVoicePcm, isdnTmrCfgEntry=isdnTmrCfgEntry, cdrAppendModule801=cdrAppendModule801, measSwitchPriDataSuspect=measSwitchPriDataSuspect, statusSPHR2ProcId=statusSPHR2ProcId, isdnChnlMgmntId=isdnChnlMgmntId, auditPointCodeType=auditPointCodeType, ss7TrunkCfgEntry=ss7TrunkCfgEntry, cdrErrMoveCdrNackNotify=cdrErrMoveCdrNackNotify, ss7CICTimerTable=ss7CICTimerTable, rtName=rtName, trapSwitchName=trapSwitchName, ftSwitchOverInfo=ftSwitchOverInfo, rtEntrySs7RouteName=rtEntrySs7RouteName, isdnTrunkName=isdnTrunkName, isupTimerType=isupTimerType, ss7CktId=ss7CktId, trapNode1Id=trapNode1Id, ss7BCktDir=ss7BCktDir, ss7CktMgmntTable=ss7CktMgmntTable, xlinkCfgTable=xlinkCfgTable, switchPcStatus=switchPcStatus, hubPriIntfDownNotify=hubPriIntfDownNotify, mtp3T18=mtp3T18, measSwitchPriGrp=measSwitchPriGrp, switchMeas=switchMeas, ss7CktMgmntEntry=ss7CktMgmntEntry, isdnDS1LineType=isdnDS1LineType, cdrFileDelete5DaysNotify=cdrFileDelete5DaysNotify, measFile=measFile, xconnectIllegalCardTypeNotify=xconnectIllegalCardTypeNotify, logDiskFull80PercentNotify=logDiskFull80PercentNotify, ss7CktTVal=ss7CktTVal, trunkGrpNoOfTrunks=trunkGrpNoOfTrunks, ss7CktT3=ss7CktT3, isupTmrTGRES=isupTmrTGRES, mtp3T26=mtp3T26, ss7TrunkDS3DS1LineType=ss7TrunkDS3DS1LineType, isdnTmrT396=isdnTmrT396, EnableTrace=EnableTrace, trunkGrpCfgTable=trunkGrpCfgTable, routeRouteType=routeRouteType, trunkGrpCfgEntry=trunkGrpCfgEntry, IfType=IfType, isdnTmrT332=isdnTmrT332, msscPriDedicatedLinkUpNotify=msscPriDedicatedLinkUpNotify, auditPeriodGrp=auditPeriodGrp, lrnEntry=lrnEntry, mtp3T37=mtp3T37, isdnTrnkTrace=isdnTrnkTrace, cdrTrnkGrpMgmntCmd=cdrTrnkGrpMgmntCmd, isupTmrTFNLRELRS=isupTmrTFNLRELRS, routeOpStatus=routeOpStatus, faultModemReset=faultModemReset, mtp3T31=mtp3T31, ss7AtmVpi=ss7AtmVpi, ss7LinkOpStatus=ss7LinkOpStatus, msscPriLanPhyIntfUpNotify=msscPriLanPhyIntfUpNotify, auditDPC=auditDPC, Direction=Direction, TmrRowStatus=TmrRowStatus, isupTimerRowStatus=isupTimerRowStatus, auditPeriod=auditPeriod, linksetId=linksetId, isdnTrnkMgmntEntry=isdnTrnkMgmntEntry, measSwitchIsupFailCallAnsiIneffectiveMachineAttempts=measSwitchIsupFailCallAnsiIneffectiveMachineAttempts, switchDSPSlotId=switchDSPSlotId, switchNameStatus=switchNameStatus, ss7CktChnlId=ss7CktChnlId, isdnTmrT316=isdnTmrT316, ft=ft, trapLanId=trapLanId, mtp2T4n=mtp2T4n, isdnXconnectId=isdnXconnectId, ss7LinkExitCongestionNotify=ss7LinkExitCongestionNotify, TrnkGrpType=TrnkGrpType, xconnectCardInsertionNotify=xconnectCardInsertionNotify, trapMeasErrCause=trapMeasErrCause, isdnSlotId=isdnSlotId, ftForcedSwitchOverSucceededNotify=ftForcedSwitchOverSucceededNotify, faultModemChnlId=faultModemChnlId, isupTmrTCRM=isupTmrTCRM, measSwitchPriIncomingIsdnPRICallAnswered=measSwitchPriIncomingIsdnPRICallAnswered, xconnectIdEndB=xconnectIdEndB, measSwitchPriFailCallIneffectiveMachineAttempts=measSwitchPriFailCallIneffectiveMachineAttempts, ss7CktTmrT17=ss7CktTmrT17, trapSeverity=trapSeverity, switchUsrInfo=switchUsrInfo, EnableOperation=EnableOperation, measSwitchIsupIncomingItutTrunkCallAttempts=measSwitchIsupIncomingItutTrunkCallAttempts, isdnTmrT319=isdnTmrT319, switchVerSIG=switchVerSIG, isup=isup, xconnectCfgTable=xconnectCfgTable, EventType=EventType, routeRowStatus=routeRowStatus, DS1LineType=DS1LineType, enableSS7Ckt=enableSS7Ckt, LinkType=LinkType, trapSwitchId1=trapSwitchId1, switchPc=switchPc, ss7AtmVci=ss7AtmVci, ss7LinkEnterCongestionNotify=ss7LinkEnterCongestionNotify, ss7AtmLinkRowStatus=ss7AtmLinkRowStatus, xlinkMgmntTable=xlinkMgmntTable, switchMaintenance=switchMaintenance, measTrnkGrpmaintainanceUsage=measTrnkGrpmaintainanceUsage, EthernetConnStatus=EthernetConnStatus, statusLM2ProcID=statusLM2ProcID, isdnTrunkTraceEntry=isdnTrunkTraceEntry, isdnTrunkGrpId=isdnTrunkGrpId, mtp3T2=mtp3T2, ss7LinkName=ss7LinkName, xconnectCPUSwitchOverNotify=xconnectCPUSwitchOverNotify, ss7CktMgmtCIC=ss7CktMgmtCIC, ss7AtmChnlId=ss7AtmChnlId, isdnStatusChnlId=isdnStatusChnlId, switchGenInfoGrp=switchGenInfoGrp, cdrFileRecordNum=cdrFileRecordNum, enablelogGen=enablelogGen, trunkGrpCdrFlag=trunkGrpCdrFlag, switchDescr=switchDescr, LrnRowStatus=LrnRowStatus, isdnDS3DS1LineType=isdnDS3DS1LineType, isupTmrT6=isupTmrT6, ss7TrunkDS1TransClkSrc=ss7TrunkDS1TransClkSrc, mtp3T33=mtp3T33, isdnTrunkRowStatus=isdnTrunkRowStatus, measTrnkGrpTrafficEntry=measTrnkGrpTrafficEntry, DS3LineType=DS3LineType, genProcessBufOverflowNotify=genProcessBufOverflowNotify, cdrFileRecLimit=cdrFileRecLimit, ss7AtmLinkCfgEntry=ss7AtmLinkCfgEntry, rtEntrySs7CmbLinksetId=rtEntrySs7CmbLinksetId, ftControlSwitchOverFailedNotify=ftControlSwitchOverFailedNotify, switchUserCfgEntry=switchUserCfgEntry, xconnPortIdEndB=xconnPortIdEndB, ss7TrunkDpc=ss7TrunkDpc, xconnectClkClearNotify=xconnectClkClearNotify, isdnTmrT302=isdnTmrT302, cdrWriteRecErrNotify=cdrWriteRecErrNotify, logDiskFull70PercentNotify=logDiskFull70PercentNotify, logErrFileOpenNotify=logErrFileOpenNotify, auditPointCode=auditPointCode, xconnectPortUpNotify=xconnectPortUpNotify, products=products, isupTmrT23=isupTmrT23, ss7CktOpStatus=ss7CktOpStatus, measSwitchIsupIncomingAnsiTrunkCallAnswered=measSwitchIsupIncomingAnsiTrunkCallAnswered, Level=Level, ss7ConcernedDpcResumeNotify=ss7ConcernedDpcResumeNotify, LogFileAttr=LogFileAttr, cdrFileInterval=cdrFileInterval, ss7TrunkDS3LineType=ss7TrunkDS3LineType, switchTGFeature=switchTGFeature, mtp3GenTmrRowStatus=mtp3GenTmrRowStatus, E1CRC4=E1CRC4, enableRoute=enableRoute, ModemResetStatus=ModemResetStatus, isdnCntthreshold=isdnCntthreshold, ss7CICMgmntTable=ss7CICMgmntTable, measTrnkGrpOOSCicsChnls=measTrnkGrpOOSCicsChnls, measSwitchIsupFailCallDataSuspect=measSwitchIsupFailCallDataSuspect, ss7InvalidSLCNotify=ss7InvalidSLCNotify, routeEntry=routeEntry, measSwitchIsupDataSuspect=measSwitchIsupDataSuspect, cdrFileDestinationId=cdrFileDestinationId, trapProcName=trapProcName, trunkGrpRoffName=trunkGrpRoffName, ss7LinkCfgEntry=ss7LinkCfgEntry, trapIntId=trapIntId, measSwitchIsupOutgoingItutTrunkCallAnswered=measSwitchIsupOutgoingItutTrunkCallAnswered, measSwitchPriIncomingIsdnPRICallAttempts=measSwitchPriIncomingIsdnPRICallAttempts, switchConfig=switchConfig, ss7CktTmrCic=ss7CktTmrCic, trapChnlId=trapChnlId, trapMeasErrNum=trapMeasErrNum, atmLOSNotify=atmLOSNotify, logFileAttribute=logFileAttribute, isdnTmrT303=isdnTmrT303, isdnTrunkEnable=isdnTrunkEnable, isupTmrT18=isupTmrT18, measFileReadyNotify=measFileReadyNotify, trapLogErrcause=trapLogErrcause, switchAlarmMainEvent=switchAlarmMainEvent, atmRAINotify=atmRAINotify, cdrDiskFullNotify=cdrDiskFullNotify, ethernetConnStatusInfo=ethernetConnStatusInfo, switchAlarmMsgId=switchAlarmMsgId)
mibBuilder.exportSymbols("ARMILLAIRE2000-MIB", mtp3T20=mtp3T20, mtp3LinkCfgEntry=mtp3LinkCfgEntry, LogType=LogType, ss7BCktT12=ss7BCktT12, cdrBafConfig=cdrBafConfig, isdnTmrT304=isdnTmrT304, mtp3T16=mtp3T16, switchVerDescr=switchVerDescr, trapDbId=trapDbId, switchOver=switchOver, ss7BCktCic=ss7BCktCic, ss7RtCmbLinksetId=ss7RtCmbLinksetId, isdnTmrCfgTable=isdnTmrCfgTable, ss7CktTmrT13=ss7CktTmrT13, ss7TrunkGrpId=ss7TrunkGrpId, isdnStatusChnlState=isdnStatusChnlState, msscPriPsuUpNotify=msscPriPsuUpNotify, isdnDChnlDnNotify=isdnDChnlDnNotify, ss7LinkRowStatus=ss7LinkRowStatus, routeNumPlan=routeNumPlan, isdnPriority=isdnPriority, xconnectInterfaceInServiceNotify=xconnectInterfaceInServiceNotify, cdrMngmtTrnkGrpEntry=cdrMngmtTrnkGrpEntry, ActiveAlarmAckStatus=ActiveAlarmAckStatus, mtp3T5=mtp3T5, isdnTmrT331=isdnTmrT331, isdnChnlMgmntEntry=isdnChnlMgmntEntry, ss7LinkDnNotify=ss7LinkDnNotify, cdrDiskFullMinorNotify=cdrDiskFullMinorNotify, ftProcessAbnormalTerminationNotify=ftProcessAbnormalTerminationNotify, Ss7RouteType=Ss7RouteType, ss7LnkLog=ss7LnkLog, measLinkTrafficTable=measLinkTrafficTable, isdnTrunkMgmntId=isdnTrunkMgmntId, measLinkDataSuspect=measLinkDataSuspect, xconnectIntfFarEndAISNotify=xconnectIntfFarEndAISNotify, isupTimerCfgEntry=isupTimerCfgEntry, ss7LinkLocInhNotify=ss7LinkLocInhNotify, isupTmrTCCRt=isupTmrTCCRt, linksetLevel=linksetLevel, statusICC2ProcId=statusICC2ProcId, ss7CICMgmntEntry=ss7CICMgmntEntry, Bool=Bool, isupTmrT21=isupTmrT21, DS3ATMCellMap=DS3ATMCellMap, rtEntryIsdnRowStatus=rtEntryIsdnRowStatus, ss7=ss7, ss7LinksetLinkId=ss7LinksetLinkId, measTrnkGrp=measTrnkGrp, isupTmrT27=isupTmrT27, switchTGGrpCfgEntry=switchTGGrpCfgEntry, ss7LinkId=ss7LinkId, ss7LinksetRowStatus=ss7LinksetRowStatus, ss7RouteTraceTable=ss7RouteTraceTable, measSwitchIsupFailCallAnsiMatchingLoss=measSwitchIsupFailCallAnsiMatchingLoss, isdnDurThreshold=isdnDurThreshold, isdnTrunkTraceTable=isdnTrunkTraceTable, xconnectIdEndA=xconnectIdEndA, ss7RouteDpc=ss7RouteDpc, trapnumXlinks=trapnumXlinks, mtp3RowStatus=mtp3RowStatus, lrnRowStatus=lrnRowStatus, routeTable=routeTable, mfdMgmntTable=mfdMgmntTable, xconnectRowStatus=xconnectRowStatus, ss7LinksetId=ss7LinksetId, cdrRecordingOfficeId=cdrRecordingOfficeId, xconnectIntfFarEndLOFNotify=xconnectIntfFarEndLOFNotify, ModifyTmrStatus=ModifyTmrStatus, switchFeatureTGFeatureCOMPRESS=switchFeatureTGFeatureCOMPRESS, audit=audit, SwitchType=SwitchType, logErrFileCloseNotify=logErrFileCloseNotify, ss7LinkSpeed=ss7LinkSpeed, trunkGrpName=trunkGrpName, routeMgmntCmdGroup=routeMgmntCmdGroup, measTrnkGrpoutgoingUsage=measTrnkGrpoutgoingUsage, ss7AtmLinkOpStatus=ss7AtmLinkOpStatus, OpStatus=OpStatus, LinkOpStatus=LinkOpStatus, ss7TrunkCfgTable=ss7TrunkCfgTable, ilbMgmntCmd=ilbMgmntCmd, trapUserName=trapUserName, ss7RouteTrace=ss7RouteTrace, ss7TrunkPortId=ss7TrunkPortId, cdrFileCreateDate=cdrFileCreateDate, ss7CktT14=ss7CktT14, logFileSize=logFileSize, isdnStatusChnlAllocMeth=isdnStatusChnlAllocMeth, msscSecLanPhyIntfDownNotify=msscSecLanPhyIntfDownNotify, isupIccAuditNotify=isupIccAuditNotify, ethernetConnStatus=ethernetConnStatus, AddrIdentifier=AddrIdentifier, ss7TrunkOpc=ss7TrunkOpc, isdnDurthreshold=isdnDurthreshold, MeasPurgeFlag=MeasPurgeFlag, measSwitch=measSwitch, genswitchSnmpAgentReadyNotify=genswitchSnmpAgentReadyNotify, AlarmEvent=AlarmEvent, isdnTmrT307=isdnTmrT307, rt=rt, mtp3LinkId=mtp3LinkId, switchFeature=switchFeature, isdnTrnkTmrRowStatus=isdnTrnkTmrRowStatus, isdnTrunkLog=isdnTrunkLog, rtNumOfDigit=rtNumOfDigit, isdnTnkMgmntId=isdnTnkMgmntId, measFileEnablePRIIneffectiveCall=measFileEnablePRIIneffectiveCall, trunkGrpCarrierId=trunkGrpCarrierId, services=services, xconnectBkplaneRefClkFailNotify=xconnectBkplaneRefClkFailNotify, xconnectIntfNearEndLOSNotify=xconnectIntfNearEndLOSNotify, logErrFileWriteNotify=logErrFileWriteNotify, AuditType=AuditType, xconnectXlinkAdjConClrNotify=xconnectXlinkAdjConClrNotify, msscPriHostFanDownNotify=msscPriHostFanDownNotify, ss7CktT17=ss7CktT17, xconnectIntfDeleteNotify=xconnectIntfDeleteNotify, ss7BCktCfgTable=ss7BCktCfgTable, isdnE1TransClk=isdnE1TransClk, auditISDNTrnk=auditISDNTrnk, ss7BCktT14=ss7BCktT14, xconnPortIdEndA=xconnPortIdEndA, mtp3T32=mtp3T32, isupTmrTECt=isupTmrTECt, isdnLoadBalanceMgmntEntry=isdnLoadBalanceMgmntEntry, ss7IsupCicLocNotify=ss7IsupCicLocNotify, trapProcInstNo=trapProcInstNo, isupTmrTRELRSP=isupTmrTRELRSP, mfdDetectionNotify=mfdDetectionNotify, TransClkSrc=TransClkSrc, isupTmrT28=isupTmrT28, mtp3=mtp3, ss7AtmTrnkId=ss7AtmTrnkId, ss7TrunkMode=ss7TrunkMode, ConnectionType=ConnectionType, switchDSPCfgRowStatus=switchDSPCfgRowStatus, switchDSP=switchDSP, mfdClearNotify=mfdClearNotify, isdnTnkId=isdnTnkId, trapDirectory=trapDirectory, ss7TrunkDS3ATMTransClkSrc=ss7TrunkDS3ATMTransClkSrc, digitStripMgmntTable=digitStripMgmntTable, switchCdr=switchCdr, switchFeatureTGFeatureCNIS=switchFeatureTGFeatureCNIS, mtp3T4=mtp3T4, isupTmrT1=isupTmrT1, switchDSPCfgEntry=switchDSPCfgEntry, measFileEnableSS7LinkTraffic=measFileEnableSS7LinkTraffic)
