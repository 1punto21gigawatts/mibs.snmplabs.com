#
# PySNMP MIB module ZHONE-PHY-WTN-RADIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-PHY-WTN-RADIO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, Counter32, ObjectIdentity, Counter64, ModuleIdentity, iso, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Counter32", "ObjectIdentity", "Counter64", "ModuleIdentity", "iso", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Gauge32", "MibIdentifier")
TruthValue, TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "TimeStamp", "DisplayString")
SkyZhoneRadioChannelNumber, SkyZhoneScientificNotation = mibBuilder.importSymbols("ZHONE-RADIO-TC-MIB", "SkyZhoneRadioChannelNumber", "SkyZhoneScientificNotation")
zhoneRadio, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneRadio", "zhoneModules")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
zhonePhyWtnRadio = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 106))
zhonePhyWtnRadio.setRevisions(('2001-07-11 13:00', '2001-06-07 14:14', '2001-05-18 10:02', '2000-11-24 08:18', '2000-11-21 15:35', '2000-11-03 09:44',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhonePhyWtnRadio.setRevisionsDescriptions(('V01.04.01 - Use SkyZhoneScientificNotation rather than SinglePrecision Floating point format.', 'V01.03.01 - add ODU loopback', 'V01.03.00 - Generalize for all SkyZhone products.', 'V01.02.00 - Support traps.', 'V01.00.01 - Add DDL markups.', 'V01.00.00 - Initial Revision',))
if mibBuilder.loadTexts: zhonePhyWtnRadio.setLastUpdated('190011031129Z')
if mibBuilder.loadTexts: zhonePhyWtnRadio.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhonePhyWtnRadio.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com Zhone Technologies, Inc. Wireless Group 120 Stony Point Rd Suite 140 Santa Rosa, CA 95401 707 206 3600')
if mibBuilder.loadTexts: zhonePhyWtnRadio.setDescription('Module for radio provisioning and status.')
wtnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1), )
if mibBuilder.loadTexts: wtnConfigTable.setStatus('current')
if mibBuilder.loadTexts: wtnConfigTable.setDescription('Radio, modem and ODU configuration information. An entry is automatically created for each radio/modem/ODU interface.')
wtnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1), ).setIndexNames((0, "ZHONE-PHY-WTN-RADIO-MIB", "wtnRadioIfIndex"))
if mibBuilder.loadTexts: wtnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wtnConfigEntry.setDescription('Configuration entries')
wtnRadioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: wtnRadioIfIndex.setStatus('current')
if mibBuilder.loadTexts: wtnRadioIfIndex.setDescription('This object should be made equal to the Ifindex used for the radio interface.')
wtnActiveChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 2), SkyZhoneRadioChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnActiveChannelNumber.setStatus('current')
if mibBuilder.loadTexts: wtnActiveChannelNumber.setDescription('Assigns one of N allowed frequency pairs for the radio transmitter and reciever as described in zhoneRadio-TC.mib. 5.7Ghz family (sysObjId) systems: --------------------------------- Writing to this value will change the current operating frequency. The active channel is the default channel used on power up. The channel is switched at the near end, and if possible, also at the far end, towards minimizing link down time. Every time the active channel number changes BITS WILL BE DROPPED. In poor conditions there is a risk that the new frequency assignment will fare more poorly. The user should expect alarms where the facility is terminated until the nodes re-sync. If a new active channel number is equal to the current value of active channel, the command will have no effect and no error message will result. Allowed range of allowed values: 0 - 17 This value will read back the current active channel. Note: if this value is changed to a new active channel number, and the system can not establish a radio link at this channel, the system may automatically switch to the standby channel, if wtnAutoChannelSwitchEnable is true(1), and the value of wtnStandbyChannelNumber is neither the same channel number nor zero. 23Ghz family (sysObjId) systems: ------------------------------- This variable is not used and so should not be presented to user. Use direct frequency assignments instead. See wtnActiveTransmitFrequency.')
wtnActiveTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 3), SkyZhoneScientificNotation()).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnActiveTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: wtnActiveTransmitFrequency.setDescription('Current transmit frequency. As described in zhoneRadio-TC.mib. 23Ghz family: ( according to sysObjId ) ------------------------------------------- The transmit frequency is entered as a floating point number in Mhz, for example, 23565.5 for 23.5655Ghz. Note: receive frequency will also be affected by this parameter. The resulting receive frequency will be simultaneously set to this value +/- wtnChannelSeparation (plus or minus depending upon whether the unit is an A or B type ODU.) If the frequency entered or the calulated receive frequency outside the range of the unit, an error will be returned and the value left unchanged. If a new active frequency is equal to the current value frequency, the command will have no effect and no error message will result. Every time the active frequency changes BITS WILL BE DROPPED. In poor conditions there is a risk that the new frequency assignment will fare more poorly. The user should expect alarms where the facility is terminated until the nodes re-sync. If the link is operational, the new frequencies will be changed at the opposite end before the values at the local end are changed in an attempt to minimize payload data loss. 5.7Ghz family of systems (according to sysObjId ) ------------------------------------------------- Value will reflect the frequency of the currently active channel (wtnActiveChannelNumber). Writing to this variable will have no effect.')
wtnStandbyChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 4), SkyZhoneRadioChannelNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnStandbyChannelNumber.setStatus('current')
if mibBuilder.loadTexts: wtnStandbyChannelNumber.setDescription('Assigns one of N allowed standby frequency pairs to the radio transmitter and reciever as described in zhoneRadio-TC.mib. 5.7Ghz family (sysObjId) systems: --------------------------------- Selection of one of N possible frequency pairs for the standby radio transmitter reciever. The Standby channel is the channel automatically switched to in the event of failure of the current active channel, for example, due to radio inteference. Automatic Switching must be enabled for the standby channel to be switched to by setting wtnAutoChannelSwitchEnable to true. If the standby channel is assigned a value of zero (0), the automatic switch to standby feature is effectively disabled, regardless of the value of wtnAutoChannelSwitchEnable. The channel is switched at the near end, and if possible, also at the far end, towards minimizing link down time. Allowed range of allowed values (see zhoneRadio-TC.mib ): 0 - 17 This value will read back the current standby channel. Operation - If a switch-to-standby channel event occurs, the active channel number and the standby channel number swap values. For example, before a radio failure: active channel = 1, standby channel = 7, and automatic channel switching is enabled. After a radio failure on channel 1: active channel = 7, standby channel = 1, and automatic channel switching is enabled. If both channels fail to operate, the system will bounce back and forth between the active and standby channels until the radio link is re-established. 23Ghz family sysObjId systems: ------------------------------- This variable is not used and so should not be presented to user. Use direct frequency assignments instead. See wtnStandbyTransmitFrequency. ')
wtnStandbyTransmitFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 5), SkyZhoneScientificNotation()).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnStandbyTransmitFrequency.setStatus('current')
if mibBuilder.loadTexts: wtnStandbyTransmitFrequency.setDescription('Standby Transmit frequency as described in zhoneRadio-TC.mib. 23Ghz family: ( according to sysObjId ) ------------------------------------------- If auto-switching is enabled, the frequency shown will be used in the event the currently active frequency fails due to low RSSI, or high BER. Note the switch will occur only if wtnAutoChannelSwitchEnable is true(1). The transmit frequency is entered as a floating point number in Mhz, for example, 23565.5 for 23.5655Ghz. If the frequency entered or the calulated receive frequency outside the range of the unit, an error will be returned and the value left unchanged. If the link is operational, the new standby frequencies will be changed at the opposite end before the values at the local end are changed. 5.7Ghz family: (according to sysObjId ) ----------------------------------------- Value will reflect the frequency of the currently active channel (wtnStandbyChannelNumber). Writing to this variable will have no effect.')
wtnAutoChannelSwitchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnAutoChannelSwitchEnable.setStatus('current')
if mibBuilder.loadTexts: wtnAutoChannelSwitchEnable.setDescription('true(1) - allows radio to automatically switch to the standby channel in case of active channel interference. false(2) - inhibits radio from automatically switching to the standby channel. The default value is false(2).')
wtnChannelSeparation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("s1232MHz", 1), ("s1200MHz", 2), ("s1008MHz", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnChannelSeparation.setStatus('current')
if mibBuilder.loadTexts: wtnChannelSeparation.setDescription('23Ghz family (sysObjId) systems: --------------------------------- Channel separation - the fixed difference between transmit and receive frequency. Only three values are allowed: s1232MHz(1), s1200MHz, and s1008MHz. This value is used to automatically calculate the receive frequency, when the transmit frequency is entered. Default value: s1232Mhz(1) 5.7Ghz family (sysObjId) systems: --------------------------------- Not used. ( Internally fixed at 475MHz fixed ). Default value: na(0)')
wtnRadioAmplifiersEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnRadioAmplifiersEnable.setStatus('current')
if mibBuilder.loadTexts: wtnRadioAmplifiersEnable.setDescription('true(1) - Enables amplifiers for transmitter and receiver. The radio will begin transmitting and receiving data. If the ODU is looped back, unable to lock onto a signal, or the ODU equipment has failed, the enable command will return an error trap and the amplifier enable state will transition to disableAmplifiers(2). false(2) - shuts down the transmit and receive amplifiers of the ODU. This will cause the link to go down. Payload will be dropped. When the amplifiers are turned off, the active and standby channel assignments may be freely changed, if necessary, but notification of such changes to the far end will not be done automatically. That is, channel assignments made when the amplifiers are disabled must be done manually at each node - near end and far end. Default value after power up is false(2). ')
wtnRxBERThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 9), SkyZhoneScientificNotation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnRxBERThresh.setStatus('current')
if mibBuilder.loadTexts: wtnRxBERThresh.setDescription('Set point of BER alarm. When the modem BER estimate is higher than this value, a modem BER alarm will occur. The BER over threshold Causes trap wtnBerAlarm to be emitted. The alarm will stay present until the modem BER estimate is lower than this set point less the hysteresis window wtnMdmRxBERHysteresisWindow. A value of 0 disables the BER threshold alarm. Allowed range is 1.0e-1 to 1.0e-12. BER is assumed accumulated over a second.')
wtnRxBERHysteresisWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 10), SkyZhoneScientificNotation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnRxBERHysteresisWindow.setStatus('current')
if mibBuilder.loadTexts: wtnRxBERHysteresisWindow.setDescription('After a wtnBerAlarm trap is sent, it is revoked using the same trap with the condition flag set to false when the modem BER estimate is lower than the set point wtnModemRxBERThresh less this value. Valid values are 0, and the range from 1.0e-1 to 1.0e-12. A value of 0 indicates no hysteresis. BER is assumed accumulated over the last second.')
wtnAntennaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6))).clone(namedValues=NamedValues(("oneFoot", 1), ("twoFeet", 2), ("fourFeet", 4), ("sixFeet", 6))).clone('sixFeet')).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnAntennaSize.setStatus('current')
if mibBuilder.loadTexts: wtnAntennaSize.setDescription('Initial power of transmitter is based upon antenna diameter. oneFoot(1) - a one foot dish twoFeet(2) - a two foot dish fourFeet(4) - a four foot dish sixFeet(6) - a six foot dish FCC mandates a maximimum EIRP (Effective Isotropic Radiated Power) level, which is directly dependent upon antenna size. The system will use antenna size to determine a power level in accordance to maxmimum EIRP. 5.7Ghz family ------------------- The equipment is shipped with a dish that is one of 3 sizes: twoFeet(2) - a two foot dish fourFeet(4) - a four foot dish sixFeet(6) - a six foot dish Default value sixFeet(3). 23Ghz family ------------------- The equipment is shipped with a dish that is one of 2 sizes: oneFoot(1) - a one foot dish twoFeet(2) - a two foot dish Default value: twoFeet(2). ')
wtnIduOduCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('feet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnIduOduCableLength.setStatus('current')
if mibBuilder.loadTexts: wtnIduOduCableLength.setDescription("The length of the coaxial cable between the Indoor Unit and the Outdoor Unit. Used internally to compensate for the coaxial cable's natural attenuation of the signal. This cable is cut to its appropriate length when the system is installed. Default value: 0 feet.")
wtnRssiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -30)).clone(-80)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnRssiThresh.setStatus('current')
if mibBuilder.loadTexts: wtnRssiThresh.setDescription('Set point of RSSI thresholdalarm. When the ODU RSSI estimate is lower than this value, a wtnRssiDeviation trap will be emitted. When the ODU RSSI estimate is higher than this set point plus the hysteresis window wtnOduRxRSSIHysteresisWindow, the same trap will be re-emitted with condition = false.. Receive signal strength (RSSI) reported by near end ODU. Typical values range from -95dB to -30dB. Tyipcal nominal value is -60dB.')
wtnRssiHysteresisWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 14), Integer32().clone(10)).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnRssiHysteresisWindow.setStatus('current')
if mibBuilder.loadTexts: wtnRssiHysteresisWindow.setDescription('After a wtnRssiDeviation Trap is sent, an the trap is re-emitted with the condition flag set to false when the ODU RSSI estimate is higher than the set point wtnOduRxRSSIThresh plus this value. Typical value of window size is 10dB.')
wtnTrapsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wtnTrapsEnable.setDescription('When true(1), radio traps may be emitted. When false(2), radio traps will be absorbed. Default value is true(1) = enabled.')
wtnOduLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopbackOn", 1), ("loopbackOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnOduLoopback.setStatus('current')
if mibBuilder.loadTexts: wtnOduLoopback.setDescription("loopbackOn(1) - engages the loopback function at the ODU (outdoor unit). Data normally transmitted by the radio is instead returned to the IDU (indoor unit). This is useful to check the integrity of the IDU, the integrity of the cable connecting IDU to ODU, and of some portions of ODU circuitry. ifAdminStatus must be in 'testing' mode for loopbackOn to be accepted. Once the loopback is turned on verify that there is no radio alarm condition. Also, any line data received on the line interface (DS3, STM-1, E1, etc) will be looped back and transmitted to it. loopbackOff(2) - disengages the loopback function at the ODU. Causes the radio to re-acquire the signal from the far end, if any.")
wtnOduIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 17), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnOduIdentifier.setStatus('current')
if mibBuilder.loadTexts: wtnOduIdentifier.setDescription('Textual description of ODU. This string typically identifies the location of antenna.')
wtnTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wtnTxLevel.setStatus('current')
if mibBuilder.loadTexts: wtnTxLevel.setDescription('Desired transmitter signal strength (TSSI) at antenna. Note: Accuracy decreases as power levels decrease below 20dBm. FCC maximum power allowed is +30dBm. ')
wtnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2), )
if mibBuilder.loadTexts: wtnStatusTable.setStatus('current')
if mibBuilder.loadTexts: wtnStatusTable.setDescription('Contains the status of the Radio, ODU and Modem.')
wtnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1), )
wtnConfigEntry.registerAugmentions(("ZHONE-PHY-WTN-RADIO-MIB", "wtnStatusEntry"))
wtnStatusEntry.setIndexNames(*wtnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: wtnStatusEntry.setStatus('current')
if mibBuilder.loadTexts: wtnStatusEntry.setDescription('Entries for radio, ODU and modem status.')
wtnCriticalAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1, 1), Bits().clone(namedValues=NamedValues(("rssiDeviation", 0), ("iduOOL", 1), ("oduTempAlert", 2), ("rxBerAlarm", 3), ("rxEbnoAlarm", 4), ("unused5", 5), ("unused6", 6), ("unused7", 7), ("iduEquipFail", 8), ("oduEquipFail", 9), ("iduOduLinkFail", 10), ("mcChannelFail", 11), ("unused12", 12), ("unused13", 13), ("unused14", 14), ("serviceAffected", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnCriticalAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: wtnCriticalAlarmStatus.setDescription('Current radio alarm status details. BIT Hex Decimal BIT NAME Number Value Value ------ ------ ------- ---------------------- 0 0x01 1 RSSI_DEVIATION 1 0x02 2 IDU_OOL 2 0x04 4 ODU_TEMP_ALERT 3 0x08 8 RX_BER_ALARM 4 0x10 16 RX_EBNO_ALARM 5 0x20 32 (reserved) 6 0x40 64 (reserved) 7 0x80 128 (reserved) 8 0x100 256 IDU_EQUIP_FAIL 9 0x200 512 ODU_EQUIP_FAIL 10 0x400 1024 IDU_ODU_LINK_FAIL 11 0x800 2048 MC_CHANNEL_FAIL 12 0x1000 4096 (reserved) 13 0x2000 8192 (reserved) 14 0x4000 16384 (reserved) 15 0x8000 32768 SERVICE_AFFECTED IDU_EQUIP_FAIL - can be caused by: power supply failure, watchdog timeout, or other internal failure on indoor unit. IDU_ODU_LINK_FAIL - can be caused by: IDU/ODU cable failure, bad connection, or equipment failure IDU_OOL - can be caused by: intermittent loss of lock of internal clocks MC_CHANNEL_FAIL - can be caused by: Signal path (air) degradation, or internal equipment failure on near end or far end node. ODU_EQUIP_FAIL - can be caused by: Loss of frequency lock, loss of clock reference, power fault, excessive transmitter power, signal path degradation, frequency drift, or internal failure of equipment in outdoor unit. ODU_TEMP_ALERT - can be caused by: Operating temperature too high or too low. Allowable range of operating temperatures ( in ODU ) are -40C to +65C. RSSI_DEVIATION - can be caused by: signal path (air) degradation, excessive heat buildup at ODU, or frequency drift. RX_BER_ALARM - can be caused by: RF noise burst, fade burst, interference, or internal equipment failure. RX_EBNO_ALARM - can be caused by: Fade, noise burst, or internal equipment stress. SERVICE_AFFECTED - indicates a predicted loss of data or quality of service in transport due to any of the above conditions.')
wtnCriticalAlarmStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnCriticalAlarmStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: wtnCriticalAlarmStatusLastChange.setDescription('Time Stamp of last change of critical alarm status wtnRadioCriticalAlmStatus. ')
wtnMinorAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1, 3), Bits().clone(namedValues=NamedValues(("rssiDeviation", 0), ("iduOOL", 1), ("oduTempAlert", 2), ("rxBerAlarm", 3), ("rxEbnoAlarm", 4), ("unused5", 5), ("unused6", 6), ("unused7", 7), ("iduEquipFail", 8), ("oduEquipFail", 9), ("iduOduLinkFail", 10), ("mcChannelFail", 11), ("unused12", 12), ("unused13", 13), ("unused14", 14), ("serviceAffected", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnMinorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: wtnMinorAlarmStatus.setDescription('Current radio alarm status details. BIT Hex Decimal BIT NAME Number Value Value ------ ------ ------- ---------------------- 0 0x01 1 RSSI_DEVIATION 1 0x02 2 IDU_OOL 2 0x04 4 ODU_TEMP_ALERT 3 0x08 8 RX_BER_ALARM 4 0x10 16 RX_EBNO_ALARM 5 0x20 32 (reserved) 6 0x40 64 (reserved) 7 0x80 128 (reserved) 8 0x100 256 IDU_EQUIP_FAIL 9 0x200 512 ODU_EQUIP_FAIL 10 0x400 1024 IDU_ODU_LINK_FAIL 11 0x800 2048 MC_CHANNEL_FAIL 12 0x1000 4096 (reserved) 13 0x2000 8192 (reserved) 14 0x4000 16384 (reserved) 15 0x8000 32768 SERVICE_AFFECTED IDU_EQUIP_FAIL - can be caused by: power supply failure, watchdog timeout, or other internal failure on indoor unit. IDU_ODU_LINK_FAIL - can be caused by: IDU/ODU cable failure, bad connection, or equipment failure IDU_OOL - can be caused by: intermittent loss of lock of internal clocks MC_CHANNEL_FAIL - can be caused by: Signal path (air) degradation, or internal equipment failure on near end or far end node. ODU_EQUIP_FAIL - can be caused by: Loss of frequency lock, loss of clock reference, power fault, excessive transmitter power, signal path degradation, frequency drift, or internal failure of equipment in outdoor unit. ODU_TEMP_ALERT - can be caused by: Operating temperature too high or too low. Allowable range of operating temperatures ( in ODU ) are -40C to +65C. RSSI_DEVIATION - can be caused by: signal path (air) degradation, excessive heat buildup at ODU, or frequency drift. RX_BER_ALARM - can be caused by: RF noise burst, fade burst, interference, or internal equipment failure. RX_EBNO_ALARM - can be caused by: Fade, noise burst, or internal equipment stress. The SERVICE_AFFECTING bit should always = 0 on this variable because, by definition, minor alarms may not affect service. ')
wtnMinorAlarmStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnMinorAlarmStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: wtnMinorAlarmStatusLastChange.setDescription('Time Stamp of last change of minor alarm status wtnRadioMinorAlmStatus.')
wtnOduTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnOduTemperature.setStatus('current')
if mibBuilder.loadTexts: wtnOduTemperature.setDescription('Current temperature measured at local outdoor unit, in degrees Celsius (Centigrade).')
wtnReceiveFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 2, 1, 6), SkyZhoneScientificNotation()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnReceiveFrequency.setStatus('current')
if mibBuilder.loadTexts: wtnReceiveFrequency.setDescription('Current frequency at which radio receiver is set.')
wtnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 8, 3), )
if mibBuilder.loadTexts: wtnInfoTable.setStatus('current')
if mibBuilder.loadTexts: wtnInfoTable.setDescription('Table augments the wtnConfigTable')
wtnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 8, 3, 1), )
wtnConfigEntry.registerAugmentions(("ZHONE-PHY-WTN-RADIO-MIB", "wtnInfoEntry"))
wtnInfoEntry.setIndexNames(*wtnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: wtnInfoEntry.setStatus('current')
if mibBuilder.loadTexts: wtnInfoEntry.setDescription('Device information entries for the radio, modem and ODU.')
wtnOduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 3, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnOduSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wtnOduSerialNumber.setDescription('Manufacturing Serial Number for Outdoor Unit. Format of the serial number is XXXXX, where X = 0 to F.')
wtnOduMfgCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 3, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnOduMfgCLEICode.setStatus('current')
if mibBuilder.loadTexts: wtnOduMfgCLEICode.setDescription('CLEI code for Outdoor Unit.')
wtnSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 8, 4), )
if mibBuilder.loadTexts: wtnSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: wtnSnapshotTable.setDescription('Table to collect statistics at radio demodulator of wireless transport node.')
wtnSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 8, 4, 1), )
wtnConfigEntry.registerAugmentions(("ZHONE-PHY-WTN-RADIO-MIB", "wtnSnapshotEntry"))
wtnSnapshotEntry.setIndexNames(*wtnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: wtnSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: wtnSnapshotEntry.setDescription('Entry into wireless transport local radio status table. No rows may be added to this table.')
wtnRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, 0))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnRSSI.setStatus('current')
if mibBuilder.loadTexts: wtnRSSI.setDescription('Current Received Signal Strength in dB as registered at the near end Outdoor Unit. This number is updated about once per second. Typical values range from -95dB to -30dB. Tyipcal nominal value is -60dB.')
wtnTSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 45))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnTSSI.setStatus('current')
if mibBuilder.loadTexts: wtnTSSI.setDescription('Estimated transmitter signal strength (TSSI) at antenna. Note: maximum level allowed by FCC is 30dBm.')
wtnRxBerFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 4, 1, 3), SkyZhoneScientificNotation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnRxBerFloat.setStatus('current')
if mibBuilder.loadTexts: wtnRxBerFloat.setDescription('Current received BER at local Indoor Unit demodulator over the previous 250ms.')
wtnRcvEbNoFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 4, 1, 4), SkyZhoneScientificNotation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wtnRcvEbNoFloat.setStatus('current')
if mibBuilder.loadTexts: wtnRcvEbNoFloat.setDescription('Current local demodulator (rcvd) Energy-bit per noise. Conveys energy in each bit as compared to energy in noise.')
wtnTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5))
wtnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0))
wtnIduEquipFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 1)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnIduEquipFailCritical.setStatus('current')
if mibBuilder.loadTexts: wtnIduEquipFailCritical.setDescription('Critical indoor equipment failure trap. Can be caused by: power supply failure, watchdog timeout, or other internal failure on indoor unit.')
wtnIduEquipFail = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 2)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnIduEquipFail.setStatus('current')
if mibBuilder.loadTexts: wtnIduEquipFail.setDescription('Non-critical indoor equipment failure trap. Can be caused by: spurious power supply failure, or other temporary internal failure on indoor unit.')
wtnIduOduLinkFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 3)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnIduOduLinkFailCritical.setStatus('current')
if mibBuilder.loadTexts: wtnIduOduLinkFailCritical.setDescription('Critical failure of IDU to ODU communications link trap. can be caused by: IDU/ODU cable failure, bad connection, or equipment failure.')
wtnIduOduLinkFail = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 4)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnIduOduLinkFail.setStatus('current')
if mibBuilder.loadTexts: wtnIduOduLinkFail.setDescription('Intermittent failure of IDU to ODU communications link trap. can be caused by: IDU/ODU cable failure, bad connection, or spurious equipment failure.')
wtnIduOutOfLockCritical = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 5)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnIduOutOfLockCritical.setStatus('current')
if mibBuilder.loadTexts: wtnIduOutOfLockCritical.setDescription('Permanent or persistant loss of lock of internal clocks in indoor unit.')
wtnIduOutOfLock = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 6)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnIduOutOfLock.setStatus('current')
if mibBuilder.loadTexts: wtnIduOutOfLock.setDescription('Spurious or intermittant loss of lock of internal clocks in indoor unit.')
wtnMcChannelFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 7)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnMcChannelFailCritical.setStatus('current')
if mibBuilder.loadTexts: wtnMcChannelFailCritical.setDescription('Radio overhead channel failure trap. May be caused by signal path degradation, or equipment failure on local or far end node.')
wtnMcChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 8)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnMcChannelFail.setStatus('current')
if mibBuilder.loadTexts: wtnMcChannelFail.setDescription('Spurious or intermittant radio overhead channel failure trap. May be caused by signal path degradation or equipment failure on local or far end node.')
wtnOduEquipFailCritical = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 9)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnOduEquipFailCritical.setStatus('current')
if mibBuilder.loadTexts: wtnOduEquipFailCritical.setDescription('Critical ODU hardware failure trap. Possible causes: Synthesizer has lost desired frequency. Could be loss of reference signal from IDU or hardware error. Synthesizer hardware fault. Possible component fault.')
wtnOduEquipFail = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 10)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnOduEquipFail.setStatus('current')
if mibBuilder.loadTexts: wtnOduEquipFail.setDescription('Spurious or intermittant ODU hardware failure trap. Could be loss of reference signal from IDU or hardware error. ')
wtnOduTempAlertCritical = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 11)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnOduTempAlertCritical.setStatus('current')
if mibBuilder.loadTexts: wtnOduTempAlertCritical.setDescription('Significant deviation of ODU temperature from specified limits May be power amp heating up or environment heat buildup, or environment ice or frost.')
wtnOduTempAlert = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 12)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnOduTempAlert.setStatus('current')
if mibBuilder.loadTexts: wtnOduTempAlert.setDescription('Warning to indicate that ODU is approaching a significant deviation of ODU temperature from specified limits. May be power amp heating up or environment heat buildup, or environment ice or frost.')
wtnRSSIDeviation = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 13)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnRSSIDeviation.setStatus('current')
if mibBuilder.loadTexts: wtnRSSIDeviation.setDescription('Receive signal strength at the odu is lower (in dB) than wtnOduRxRSSIThresh. This alarm will persist until the RSSI rises above wtnOduRxRSSIThresh - wtnOduRxRssiHysteresisWindow. May be from signal path degradation. May be power amp heating up or environment heat buildup. ')
wtnBerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 14)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnBerAlarm.setStatus('current')
if mibBuilder.loadTexts: wtnBerAlarm.setDescription('Modem reports temporary BER > threshold alarm. Condition is true when current BER > wtnMdmRxBERThresh. Condition will persist until current BER < ( wtnMdmRxBERThresh - wtnMdmRxBERHysteresisWindow ). Probable fade burst. Could be interference. Could be incipient hardware fault')
wtnEbNoAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 0, 15)).setObjects(("ZHONE-PHY-WTN-RADIO-MIB", "wtnTrapCondition"), ("ZHONE-PHY-WTN-RADIO-MIB", "wtnServiceAffected"))
if mibBuilder.loadTexts: wtnEbNoAlarm.setStatus('current')
if mibBuilder.loadTexts: wtnEbNoAlarm.setDescription('Modem reports temporary post-detection signal to noise ratio below preset threshold wtnMdmRxEbNoThresh. This condition will persist until the radio signal quality rises above wtnMdmRxEbNoThresh - wtnMdmRxEbnoHysteresisWindow. Probable fade or noise burst.')
wtnTrapCondition = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conditionPresent", 1), ("conditionCleared", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wtnTrapCondition.setStatus('current')
if mibBuilder.loadTexts: wtnTrapCondition.setDescription('Sent with wireless traps to indicate whether condition has arrived or has gone away.')
wtnServiceAffected = MibScalar((1, 3, 6, 1, 4, 1, 5504, 5, 8, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffected", 1), ("serviceNotAffected", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wtnServiceAffected.setStatus('current')
if mibBuilder.loadTexts: wtnServiceAffected.setDescription('Flag sent with each trap to indicate whether service may be affected by this particular trap condition. Service affecting means that payload data (DS3, etc) MAY be affected. Since a node does not have visibility into the payloads this flag is determined by contingencies such as signal quality measurements and introspective hardware. This flag should be ignored when the trap is sent to indicate the trap condition has gone away.')
radioTotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 8, 6), )
if mibBuilder.loadTexts: radioTotalTable.setStatus('current')
if mibBuilder.loadTexts: radioTotalTable.setDescription('Table of current statistics in the style of rfc2493 current table.')
radioTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 8, 6, 1), )
wtnConfigEntry.registerAugmentions(("ZHONE-PHY-WTN-RADIO-MIB", "radioTotalEntry"))
radioTotalEntry.setIndexNames(*wtnConfigEntry.getIndexNames())
if mibBuilder.loadTexts: radioTotalEntry.setStatus('current')
if mibBuilder.loadTexts: radioTotalEntry.setDescription('Set of basic statistics for radio interface.')
radioTotalES = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 6, 1, 1), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTotalES.setStatus('current')
if mibBuilder.loadTexts: radioTotalES.setDescription('Number of seconds the radio link detected bit errors since the system has been up, or since last reset. If the BER is above the user set threshhold then the readioCurrentSES count will be incremented instead of this one. If the radio link is down or a loss of signal is declared this count will not be incremented. Writing any value to this counter will reset the count.')
radioTotalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 6, 1, 2), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTotalSES.setStatus('current')
if mibBuilder.loadTexts: radioTotalSES.setDescription('Count of the number of seconds the radio endured severe conditions since system came up or value was reset. A severe condition occurs if: 1 - received BER is greater exceeds the BER threshold and has not yet dropped below the BER hysteresis window. 2- radio link failure. Radio signal cannot be detected. Writing any value to this counter will reset the count.')
radioTotalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 8, 6, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTotalUAS.setStatus('current')
if mibBuilder.loadTexts: radioTotalUAS.setDescription('Unavailable seconds. This value is incremented once per second after ten consecutive radioCurrentSES (severe-error seconds) are counted. An equipment failure will also increment this value. Writing any value will cause the count to be reset.')
mibBuilder.exportSymbols("ZHONE-PHY-WTN-RADIO-MIB", wtnTraps=wtnTraps, radioTotalES=radioTotalES, wtnIduOduLinkFail=wtnIduOduLinkFail, wtnIduEquipFailCritical=wtnIduEquipFailCritical, wtnRcvEbNoFloat=wtnRcvEbNoFloat, wtnOduTempAlertCritical=wtnOduTempAlertCritical, wtnTrapsEnable=wtnTrapsEnable, wtnChannelSeparation=wtnChannelSeparation, wtnRxBERHysteresisWindow=wtnRxBERHysteresisWindow, wtnIduOduLinkFailCritical=wtnIduOduLinkFailCritical, wtnOduSerialNumber=wtnOduSerialNumber, PYSNMP_MODULE_ID=zhonePhyWtnRadio, wtnBerAlarm=wtnBerAlarm, wtnTrapCondition=wtnTrapCondition, radioTotalEntry=radioTotalEntry, wtnOduIdentifier=wtnOduIdentifier, wtnIduOutOfLock=wtnIduOutOfLock, wtnMinorAlarmStatus=wtnMinorAlarmStatus, wtnCriticalAlarmStatus=wtnCriticalAlarmStatus, wtnSnapshotEntry=wtnSnapshotEntry, wtnActiveChannelNumber=wtnActiveChannelNumber, wtnRadioAmplifiersEnable=wtnRadioAmplifiersEnable, wtnInfoTable=wtnInfoTable, wtnTrapData=wtnTrapData, wtnIduEquipFail=wtnIduEquipFail, wtnTSSI=wtnTSSI, radioTotalTable=radioTotalTable, wtnSnapshotTable=wtnSnapshotTable, wtnStandbyTransmitFrequency=wtnStandbyTransmitFrequency, wtnRSSIDeviation=wtnRSSIDeviation, radioTotalUAS=radioTotalUAS, wtnMinorAlarmStatusLastChange=wtnMinorAlarmStatusLastChange, wtnEbNoAlarm=wtnEbNoAlarm, wtnServiceAffected=wtnServiceAffected, wtnActiveTransmitFrequency=wtnActiveTransmitFrequency, wtnConfigEntry=wtnConfigEntry, wtnOduLoopback=wtnOduLoopback, wtnIduOduCableLength=wtnIduOduCableLength, wtnInfoEntry=wtnInfoEntry, wtnRxBerFloat=wtnRxBerFloat, zhonePhyWtnRadio=zhonePhyWtnRadio, wtnAntennaSize=wtnAntennaSize, wtnTxLevel=wtnTxLevel, wtnRxBERThresh=wtnRxBERThresh, wtnOduMfgCLEICode=wtnOduMfgCLEICode, wtnIduOutOfLockCritical=wtnIduOutOfLockCritical, wtnOduEquipFailCritical=wtnOduEquipFailCritical, wtnAutoChannelSwitchEnable=wtnAutoChannelSwitchEnable, wtnRSSI=wtnRSSI, wtnCriticalAlarmStatusLastChange=wtnCriticalAlarmStatusLastChange, wtnConfigTable=wtnConfigTable, wtnOduEquipFail=wtnOduEquipFail, wtnReceiveFrequency=wtnReceiveFrequency, wtnMcChannelFail=wtnMcChannelFail, wtnRadioIfIndex=wtnRadioIfIndex, wtnStatusTable=wtnStatusTable, wtnMcChannelFailCritical=wtnMcChannelFailCritical, wtnRssiHysteresisWindow=wtnRssiHysteresisWindow, wtnRssiThresh=wtnRssiThresh, wtnOduTempAlert=wtnOduTempAlert, wtnOduTemperature=wtnOduTemperature, wtnStatusEntry=wtnStatusEntry, radioTotalSES=radioTotalSES, wtnStandbyChannelNumber=wtnStandbyChannelNumber)
