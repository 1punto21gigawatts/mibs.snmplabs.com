#
# PySNMP MIB module UDS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UDS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, Gauge32, Integer32, Counter32, MibIdentifier, IpAddress, ObjectIdentity, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, experimental, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "Integer32", "Counter32", "MibIdentifier", "IpAddress", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "experimental", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
uds1 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 4))
uds1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 1), )
if mibBuilder.loadTexts: uds1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1ConfigTable.setDescription('This table is an extension of the ds1ConfigTable in the DS1 MIB defined by RFC1232.')
uds1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1), ).setIndexNames((0, "UDS1-MIB", "uds1CfgIndex"))
if mibBuilder.loadTexts: uds1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1ConfigEntry.setDescription('This table contains configurable parameters for a CSU that are not supported in the DS1 MIB defined by RFC1232. Each entry in this table corresponds to an entry in the DS1 MIB. There is a one-to-one correspondance between the value of uds1CSUIndex and ds1CSUIndex.')
uds1CfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value corresponds to ds1CSUIndex in the DS1 MIB defined in RFC1232. The value of uds1CfgIndex matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1CfgRespToRemoteLoopbk = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("respond", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgRespToRemoteLoopbk.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgRespToRemoteLoopbk.setDescription('This object configures the specified CSU to either ignore or respond to remotely initiated loopback requests.')
uds1CfgJitterAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attenJitterOnRcvr", 1), ("attenJitterOnTxmtr", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgJitterAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgJitterAttenuation.setDescription('This object is used to select how the jitter attenuation circuit on the CSU is to be used. It can be used to attenuate jitter on the receiver, or the transmitter.')
uds1CfgXmitLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dB0", 1), ("dB7", 2), ("dB15", 3), ("dB22", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgXmitLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgXmitLineBuildOut.setDescription('This object is used to configure the amount of attenuation that is to be applied to the transmit signal in order to control cross-talk, etc.')
uds1CfgAutoBusyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgAutoBusyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgAutoBusyEnable.setDescription('This object is used to enable or disable the automatic busy out feature for all timeslots on the specified CSU. If enabled, when a modem is considered idle and that modem is not sending the idle pattern to the T1 Card on the TDM bus, the timeslot will be busied out.')
uds1CfgDialInAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAddress", 1), ("dnis", 2), ("ani-dnis", 3), ("ani", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgDialInAdr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgDialInAdr.setDescription('This object identifies whether or not DNIS digits will be transferred as part of the call setup for the specified T1 line.')
uds1CfgZeroCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("zcs", 2), ("b8zs", 3), ("ami", 4), ("hdb3", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgZeroCoding.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgZeroCoding.setDescription('This object defines the type of zero coding used on the specified DS1. It provides some values that are not present in the experimental DS1 MIB.')
uds1CfgDialInOutTrunkSt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wink", 1), ("immediate", 2), ("dialTone", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgDialInOutTrunkSt.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgDialInOutTrunkSt.setDescription('This will set the Dial-in/Dial-out trunk start signal type. Default = wink(1).')
uds1CfgDialInAdrAckWinkEn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgDialInAdrAckWinkEn.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgDialInAdrAckWinkEn.setDescription('Allows to enable/disable an acknowledgement wink after the dial-in address information has been received.')
uds1CfgDialOutAdrDly = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(70, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgDialOutAdrDly.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgDialOutAdrDly.setDescription('Allows an adjustable delay on sending out address information from the T1 NAC to the TELCO.')
uds1CfgStuffByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgStuffByteValue.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgStuffByteValue.setDescription('The stuffed byte to send to TELCO for inactive DS0 in Fractional T1.')
uds1CfgDialInOutTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eAndMTypeII", 1), ("loopStart", 2), ("groundStart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgDialInOutTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgDialInOutTrunkType.setDescription('This will set the Dial-In/Dial-out trunk type. Default = eAndMTypeII(1).')
uds1CfgPriSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("priSw4ESS", 1), ("priSw5ESS", 2), ("priSwDMS100", 3), ("priSwICTR4", 4), ("priSwVn4", 5), ("priSwNI2", 6), ("priSwINS1500", 7), ("priSwDASS2", 8), ("priSwTSO14", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgPriSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgPriSwitchType.setDescription('This sets the primary switch type for the T1-PRI ISDN NAC. The setting takes effect at NAC boot time. Default = priSw5ESS(2).')
uds1CfgIdleByte = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgIdleByte.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgIdleByte.setDescription('This sets the idle byte pattern for the T1-PRI ISDN NAC. The setting takes effect at NAC boot time. Default = 0xFE.')
uds1CfgAnlgBlockErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgAnlgBlockErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgAnlgBlockErrCode.setDescription('This is the error code that will be returned to an ISDN switch when analog connections are being blocked. Default = 58.')
uds1CfgDgtlBlockErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgDgtlBlockErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgDgtlBlockErrCode.setDescription('This is the error code that will be returned to an ISDN switch when digital connections are being blocked. Default = 58.')
uds1CfgNoMdmAvailErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgNoMdmAvailErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgNoMdmAvailErrCode.setDescription('This is the error code that will be returned to an ISDN switch when there are no modems available to accept the requested connection. Default = 58.')
uds1CfgNoIgwsAvailErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgNoIgwsAvailErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgNoIgwsAvailErrCode.setDescription('This is the error code that will be returned to an ISDN switch when no IGWS connections are available. Default = 58.')
uds1CfgChanBlockErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgChanBlockErrCode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgChanBlockErrCode.setDescription('This is the error code that will be returned to an ISDN switch when connections to a specific B channel are being blocked. Default = 58.')
uds1CfgBlockCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("blockNone", 2), ("blockAnalog", 3), ("blockDigital", 4), ("blockAll", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgBlockCallType.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgBlockCallType.setDescription('This object determines if a PRI span line will block calls of a specific type. This object does not apply to a NAC operating in Rob Bit T1 mode. Default = blockNone(2).')
uds1CfgNfasId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgNfasId.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgNfasId.setDescription('This defines the NFAS ID associated with a PRI span line. This object does not apply to Rob Bit T1 operation. Default = 0.')
uds1CfgNfasDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("dchannel", 2), ("extraBchannel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgNfasDChannel.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgNfasDChannel.setDescription('This determines how a PRI span line will use the DS0 normally assigned as a D channel when NFAS is being used. This object does not apply to Rob Bit T1 operation. Default = dchannel(2).')
uds1CfgShrtHaulDist = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("len0thru133Ft", 2), ("len133thru266Ft", 3), ("len266thru399Ft", 4), ("len399thru533Ft", 5), ("len533thru655Ft", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgShrtHaulDist.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgShrtHaulDist.setDescription('Variuos distance ranges supported by Short Haul NIC Default=len0thru133Ft.')
uds1CfgCallProceedingRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgCallProceedingRsp.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgCallProceedingRsp.setDescription('This object determines to send CALL_PROCEEDING and CONNECT response, when a SETUP message is received from TELCO. Default = ON.')
uds1CfgAlertingRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgAlertingRsp.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgAlertingRsp.setDescription('This object determines to send ALERTING response, when a SETUP message is received from TELCO. Default = OFF.')
uds1CfgServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("localOutOfService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgServiceState.setDescription('This objects configures the service state of the DS1 and will configure the state for power up if saved to NVRAM. Default= inService(2).')
uds1CfgIcbKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgIcbKeyword.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgIcbKeyword.setDescription('This is the keyword used for DASS2 Incoming Call Barring control.')
uds1CfgOverlapRxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgOverlapRxMode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgOverlapRxMode.setDescription('This object allows dialed digits to arrive in separate messages. Default = disabled(2) ')
uds1CfgEandMnoAddrTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgEandMnoAddrTimer.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgEandMnoAddrTimer.setDescription('This object is for E&M type II trunks with no DNIS address. If timer is >0, the ch T1 NAC will flush calls upon timer expiration, if the modem has not signalled the NAC to go ahead and answer the call. 2 seconds per unit. Default = 0 ')
uds1CfgSeizureWinkDly = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CfgSeizureWinkDly.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CfgSeizureWinkDly.setDescription('Allows an adjustable delay on sending out address information from the T1 NAC to the TELCO. Default=18.')
uds1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 2), )
if mibBuilder.loadTexts: uds1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntervalTable.setDescription('An extension of the DS1 Interval table which provides status counters over 15 minute intervals.')
uds1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1), ).setIndexNames((0, "UDS1-MIB", "uds1IntIndex"), (0, "UDS1-MIB", "uds1IntNumber"))
if mibBuilder.loadTexts: uds1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntervalEntry.setDescription('An entry in the extended DS1 Interval table. Every entry in the DS1 Interval table will have a corresponding entry in this table.')
uds1IntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1IntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntIndex.setDescription('This is the index value which uniquely identifies the CSU to which this entry is applicable. The value of uds1IntIndex matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1IntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1IntNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minute interval (assuming that all 96 intervals are valid).')
uds1IntBurstyErrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1IntBurstyErrSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntBurstyErrSeconds.setDescription('This object counts the number of seconds, over the specified interval, in which there were more than 2 and less than 320 CRC errors.')
uds1IntFrameBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1IntFrameBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntFrameBitErrors.setDescription('A specific bit pattern is used for the T1 receiver to determine frame allignment. This object counts the number of incorrectly received framing bits in the specified 15 minute interval.')
uds1IntDeltaFrameAlligns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1IntDeltaFrameAlligns.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntDeltaFrameAlligns.setDescription('This object counts the number of times the specified T1 receiver has reframed on a new framing pattern (ie. due to an OOF condition) in the specified 15 minute interval.')
uds1IntExcessCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1IntExcessCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uds1IntExcessCRCErrors.setDescription('This object counts each time 32 of any 33 consecutive CRCs are in error for the specified T1 line in the specified 15 minute interval. This counter is only valid in ESF format.')
uds1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 3), )
if mibBuilder.loadTexts: uds1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrentTable.setDescription('An extension of the DS1 Current table that provides status counters over the present 15 minute interval.')
uds1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 3, 1), ).setIndexNames((0, "UDS1-MIB", "uds1CurrIndex"))
if mibBuilder.loadTexts: uds1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrentEntry.setDescription('An entry in the extended DS1 Current table. Every entry in the DS1 Current table will have a corresponding entry in this table.')
uds1CurrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CurrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of uds1CurrIndex matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1CurrBurstyErrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CurrBurstyErrSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrBurstyErrSeconds.setDescription('This object counts the number of seconds, in the current 15 minute interval, during which there was more than two, and less than 320 CRC errors.')
uds1CurrFrameBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CurrFrameBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrFrameBitErrors.setDescription('A specific bit pattern is used for the receiver to determine frame allignment. This object is a count of the number of incorrectly received framing bits in the current 15 minute interval.')
uds1CurrDeltaFrameAlligns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CurrDeltaFrameAlligns.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrDeltaFrameAlligns.setDescription('This object counts the number of times the specified T1 receiver has reframed on a new framing pattern (ie. due to an OOF condition) in the current 15 minute interval.')
uds1CurrExcessCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CurrExcessCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CurrExcessCRCErrors.setDescription('This object counts each time 32 of any 33 consecutive CRCs are in error for the specified T1 line in the current 15 minute interval. This counter is only valid in ESF format.')
uds1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 4), )
if mibBuilder.loadTexts: uds1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotalTable.setDescription('An extension of the DS1 Total table that provides the cumulative sum of the various statistics for the 24 hour interval preceding the first valid interval in the uds1CurrentTable.')
uds1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 4, 1), ).setIndexNames((0, "UDS1-MIB", "uds1TotIndex"))
if mibBuilder.loadTexts: uds1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotalEntry.setDescription('An entry in the extended DS1 Total table.')
uds1TotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1TotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of ds1TotalIndex matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1TotBurstyErrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1TotBurstyErrSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotBurstyErrSeconds.setDescription('This object counts the number of seconds, over the last 24 hour period, in which there were more than 2 and less than 320 CRC errors.')
uds1TotFrameBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1TotFrameBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotFrameBitErrors.setDescription('A specific bit pattern is used so the T1 receiver can determine frame allignment. This object counts the total number of incorrectly received framing bits in the last 24 hour period.')
uds1TotDeltaFrameAlligns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1TotDeltaFrameAlligns.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotDeltaFrameAlligns.setDescription('This object counts the number of times the specified T1 receiver has reframed on a new framing pattern (ie. due to an OOF condition) in the last 24 hour period.')
uds1TotExcessCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1TotExcessCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TotExcessCRCErrors.setDescription('This object indicates the total number of times there have been 32 of any 33 consecutive CRCs in error on the specified T1 line in the last 24 hour period. This counter is only valid in ESF format.')
uds1StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 5), )
if mibBuilder.loadTexts: uds1StatTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatTable.setDescription("USR's DS1 Status table contains various CSU status information. There is no corresponding table in the DS1 MIB defined by RFC1232.")
uds1StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1), ).setIndexNames((0, "UDS1-MIB", "uds1StatIndex"))
if mibBuilder.loadTexts: uds1StatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatEntry.setDescription('There is one entry in the DS1 Status table for each CSU in the chassis.')
uds1StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of this object matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1StatReceiverGain = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dB0", 1), ("dB7", 2), ("dB15", 3), ("dB22", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatReceiverGain.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatReceiverGain.setDescription('This object identifies the amount of gain applied to boost the receive signal level to an appropriate operating level.')
uds1StatOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatOutOfFrame.setDescription('This object indicates when the framing pattern for the specified T1 line has been lost and data connot be extracted properly. This condition is also known as red alarm.')
uds1StatLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatLossOfSignal.setDescription("This object indicates when 175 consecutive 0's have been detected. The signal is considered recovered if the 1's density reaches 12.5% (ie. four ones in a 32 bit period).")
uds1StatReceivingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatReceivingAIS.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatReceivingAIS.setDescription("This object identifies when the remote end of the specified T1 line has lost its receive signal and is transmitting a stream of all 1's to the local end. This AIS condition is also known as blue alarm.")
uds1StatSwitchTypeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("priSw4ESS", 1), ("priSw5ESS", 2), ("priSwDMS100", 3), ("priSwICTR4", 4), ("priSwVn4", 5), ("priSwNI2", 6), ("priSwINS1500", 7), ("priSwDASS2", 8), ("priSwTSO14", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatSwitchTypeActive.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatSwitchTypeActive.setDescription('This object identifies the primary switch type that the T1-PRI ISDN NAC is currently connected to.')
uds1StatDchanOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dChannelUp", 1), ("dChannelDown", 2), ("bChannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatDchanOperational.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatDchanOperational.setDescription('This object reflects the operational status of the D channel on the T1-PRI ISDN NAC.')
uds1StatE1ContCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatE1ContCrc.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatE1ContCrc.setDescription('This object indicates when continuous CRC errors are being received on the E1 DS1 span line on the T1-PRI ISDN NAC.')
uds1StatE1PhysicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("psF1Operational", 1), ("psF2Fc1RaiTempCrcErrors", 2), ("psF3Fc2LossOfSignal", 3), ("psF4Fc3AlarmIndSignal", 4), ("psF5Fc4RaiContCrcErrors", 5), ("psF6PowerOn", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatE1PhysicalState.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatE1PhysicalState.setDescription('This object reflects the physical state of the E1 DS1 span line on the T1-PRI ISDN NAC.')
uds1StatLoopBackInit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("network", 2), ("command", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatLoopBackInit.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatLoopBackInit.setDescription('This object tells if the loopback was initiated by the network or by command')
uds1StatNfasDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("dchannel", 2), ("extraBchannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatNfasDChannel.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatNfasDChannel.setDescription('This reflect how a PRI span line is using the DS0 normally assigned as a D channel when NFAS is being used. This object does not apply to Rob Bit T1 operation. Default = dchannel(2).')
uds1StatDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("bChannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatDChannel.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatDChannel.setDescription('This is the status of the D channel for this PRI span line. A value of notSupported(1) means that this DS1 is not operating in ISDN mode or there is no D channel defined on this span line.')
uds1StatDs0SrvcChngLst = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatDs0SrvcChngLst.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatDs0SrvcChngLst.setDescription('This object contains the current list of DS0s that have changed their state from In Service to Out of Service or Vice versa. The list is included in the corresponding SNMP trap.')
uds1StatMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatMultiFrame.setDescription('This object identifies when the E1/PRI NAC line has lost synchronization with the Time-Slot 16 Multi-Frame alignment pattern. Only valid for E1/CAS NAC.')
uds1StatRemMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatRemMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatRemMultiFrame.setDescription('This object identifies when the remote end of the specified E1/PRI NAC line has lost synchronization with the Time-Slot 16 Multi-Frame alignment pattern. Only valid for E1/CAS NAC.')
uds1StatServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("localOutOfService", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1StatServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: uds1StatServiceState.setDescription('This object shows the current state of the DS1 Service. Default = inService(2).')
uds1CmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 6), )
if mibBuilder.loadTexts: uds1CmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdTable.setDescription('The DS1 Command table contains an entry for each of the manageable CSUs in the chassis. It provides a means through which to take specific actions on one or more CSUs in the chassis.')
uds1CmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1), ).setIndexNames((0, "UDS1-MIB", "uds1CmdIndex"))
if mibBuilder.loadTexts: uds1CmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdEntry.setDescription('There is one entry in the DS1 Command table per CSU in the chassis.')
uds1CmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdIndex.setDescription('A unique value for each CSU in the chassis. The value of uds1CmdIndex matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1CmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CmdMgtStationId.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdMgtStationId.setDescription('This object is a generic read-write variable that a Management Station (MS) can use to guarantee that the results from a given command are the result of that specific MS. Each MS must SET a unique value to this object when doing commands and GET the value of this object together with uds1CmdReqId and uds1CmdResult to detect interference from other MSs.')
uds1CmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CmdReqId.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdReqId.setDescription('This object contains the value of the request-id field in the SNMP PDU which invoked the current or most recent command on this DS1 interface. If the request-id is unknown or undefined, this object contains the zero value.')
uds1CmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("noCommand", 1), ("forceReceiverReframe", 2), ("enterLoopback", 3), ("exitLoopback", 4), ("inService", 5), ("localOutOfService", 6), ("blockAnalogCalls", 7), ("blockDigitalCalls", 8), ("blockAllCalls", 9), ("blockNoCalls", 10), ("redAlarmOverride", 11), ("takeDownDChannel", 12), ("bringUpDChannel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CmdFunction.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdFunction.setDescription('This object identifies the command being requested.')
uds1CmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CmdForce.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdForce.setDescription('In some cases, the DS1 interface may be in a state such that certain commands could adversely affect connections. In such cases, a command request with uds1CmdForce not defined, or set to noForce will result in a warning. If the operator elects to ignore such warnings, uds1CmdForce can be set to force in a re-issued request and the command will be carried out regardless of its potentially hazzardous effects.')
uds1CmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1CmdParam.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdParam.setDescription('This object contains parameters that are specific to the particular command being issued. In some cases, there will be no additional parameters required.')
uds1CmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdResult.setDescription('This object contains the result of the most recently requested command, or the value none(1) if no commands have been requested since the last reset.')
uds1CmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 73))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("pendingSoftwareDownload", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1CmdCode.setStatus('mandatory')
if mibBuilder.loadTexts: uds1CmdCode.setDescription('The value of this object upon command completion indicates a further description of what went wrong if the command was unsuccessful.')
uds1TrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 4, 7), )
if mibBuilder.loadTexts: uds1TrapEnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaTable.setDescription('A trap enable table that defines a column for every trap that a DS1 entity can generate.')
uds1TrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1), ).setIndexNames((0, "UDS1-MIB", "uds1TrapEnaIndex"))
if mibBuilder.loadTexts: uds1TrapEnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaEntry.setDescription('There is one entry in this table for every CSU that exists in the chassis.')
uds1TrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uds1TrapEnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaIndex.setDescription('A unique value for each CSU in the chassis. The value of uds1TrapEnaIndex matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
uds1TrapEnaYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaYellowAlarm.setDescription('Enable the generation of an SNMP trap upon detection of a yellow alarm condition on the specified DS1.')
uds1TrapEnaRedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaRedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaRedAlarm.setDescription('Enable the generation of an SNMP trap upon detection of a red alarm condition on the specified DS1.')
uds1TrapEnaLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaLossOfSignal.setDescription('Enable the generation of an SNMP trap upon detection of loss of signal on the specified DS1.')
uds1TrapEnaAlarmIndSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaAlarmIndSignal.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaAlarmIndSignal.setDescription('Enable the generation of an SNMP trap upon detection of an alarm indication signal (AIS) on the specified DS1.')
uds1TrapEnaYellowAlarmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaYellowAlarmClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaYellowAlarmClr.setDescription('Enable the generation of an SNMP trap upon detection of a yellow alarm condition being cleared on the specified DS1.')
uds1TrapEnaRedAlarmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaRedAlarmClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaRedAlarmClr.setDescription('Enable the generation of an SNMP trap upon detection of a red alarm condition being cleared on the specified DS1.')
uds1TrapEnaLossOfSgnlClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaLossOfSgnlClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaLossOfSgnlClr.setDescription('Enable the generation of an SNMP trap upon detection of loss of signal condition being cleared on the specified DS1.')
uds1TrapEnaAlrmIndSgnlClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaAlrmIndSgnlClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaAlrmIndSgnlClr.setDescription('Enable the generation of an SNMP trap upon detection of an alarm indication signal (AIS) being cleared on the specified DS1.')
uds1TrapEnaContCrcAlrm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaContCrcAlrm.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaContCrcAlrm.setDescription('Enable the generation of an SNMP trap upon detection of a continuous CRC condition on the specified DS1.')
uds1TrapEnaContCrcAlrmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaContCrcAlrmClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaContCrcAlrmClr.setDescription('Enable the generation of an SNMP trap upon detection of the clearing of a continuous CRC condition on the specified DS1.')
uds1TrapEnaPhysStateChng = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaPhysStateChng.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaPhysStateChng.setDescription('Enable the generation of an SNMP trap upon detection of a change in the physical state of the specified DS1.')
uds1TrapEnaDchanInSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaDchanInSrvc.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaDchanInSrvc.setDescription('Enable the generation of an SNMP trap upon detection of a change in the service state of a D channel on this span line from Out of Service, Maintenance or Standby to In Service. Default = disableAll(2).')
uds1TrapEnaDchanOutOfSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaDchanOutOfSrvc.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaDchanOutOfSrvc.setDescription('Enable the generation of an SNMP trap upon detection of a change in the service state of a D channel on this span line from In Service to Out of Service, Maintenance or Standby. Default = disableAll(2).')
uds1TrapEnaDs0InSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaDs0InSrvc.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaDs0InSrvc.setDescription('Enable the generation of an SNMP trap upon detection of a change in the service state of a DS0 on this span line from Out of Service to In Service. Default = disableAll(2).')
uds1TrapEnaDs0OutOfSrvc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaDs0OutOfSrvc.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaDs0OutOfSrvc.setDescription('Enable the generation of an SNMP trap upon detection of a change in the service state of a DS0 on this span line from In Service to Out of Service. Default = disableAll(2).')
uds1TrapEnaMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaMultiFrame.setDescription('Enable the generation of an SNMP trap upon detection of a Multi-Frame Alignment condition on the specified DS1. Default = disableAll(2).')
uds1TrapEnaRemMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaRemMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaRemMultiFrame.setDescription('Enable the generation of an SNMP trap upon detection of a Remote Multi-Frame Alignment condition on the specified DS1. Default = disableAll(2).')
uds1TrapEnaMultiFrmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaMultiFrmClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaMultiFrmClr.setDescription('Enable the generation of an SNMP trap upon detection of clearing a Multi-Frame Alignment condition on the specified DS1. Default = disableAll(2).')
uds1TrapEnaRemMultiFrmClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 4, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uds1TrapEnaRemMultiFrmClr.setStatus('mandatory')
if mibBuilder.loadTexts: uds1TrapEnaRemMultiFrmClr.setDescription('Enable the generation of an SNMP trap upon detection of clearing a Remote Multi-Frame Alignment condition on the specified DS1. Default = disableAll(2).')
mibBuilder.exportSymbols("UDS1-MIB", uds1CfgIndex=uds1CfgIndex, uds1CurrExcessCRCErrors=uds1CurrExcessCRCErrors, uds1ConfigEntry=uds1ConfigEntry, uds1TrapEnaRedAlarm=uds1TrapEnaRedAlarm, uds1StatTable=uds1StatTable, uds1StatServiceState=uds1StatServiceState, uds1CmdEntry=uds1CmdEntry, uds1CfgCallProceedingRsp=uds1CfgCallProceedingRsp, uds1IntDeltaFrameAlligns=uds1IntDeltaFrameAlligns, uds1TrapEnaLossOfSgnlClr=uds1TrapEnaLossOfSgnlClr, uds1TrapEnaRedAlarmClr=uds1TrapEnaRedAlarmClr, uds1CfgIdleByte=uds1CfgIdleByte, uds1CurrIndex=uds1CurrIndex, uds1CmdReqId=uds1CmdReqId, uds1TotExcessCRCErrors=uds1TotExcessCRCErrors, uds1TrapEnaDchanInSrvc=uds1TrapEnaDchanInSrvc, uds1TrapEnaContCrcAlrm=uds1TrapEnaContCrcAlrm, uds1TrapEnaDs0OutOfSrvc=uds1TrapEnaDs0OutOfSrvc, uds1IntNumber=uds1IntNumber, uds1CurrentEntry=uds1CurrentEntry, uds1TrapEnaMultiFrame=uds1TrapEnaMultiFrame, uds1TrapEnaAlarmIndSignal=uds1TrapEnaAlarmIndSignal, uds1TrapEnaDchanOutOfSrvc=uds1TrapEnaDchanOutOfSrvc, uds1CurrFrameBitErrors=uds1CurrFrameBitErrors, uds1CfgNfasId=uds1CfgNfasId, uds1CfgChanBlockErrCode=uds1CfgChanBlockErrCode, uds1StatLoopBackInit=uds1StatLoopBackInit, uds1CfgRespToRemoteLoopbk=uds1CfgRespToRemoteLoopbk, uds1CfgXmitLineBuildOut=uds1CfgXmitLineBuildOut, uds1TrapEnaRemMultiFrame=uds1TrapEnaRemMultiFrame, uds1TrapEnaDs0InSrvc=uds1TrapEnaDs0InSrvc, uds1TrapEnaAlrmIndSgnlClr=uds1TrapEnaAlrmIndSgnlClr, uds1CfgEandMnoAddrTimer=uds1CfgEandMnoAddrTimer, uds1CfgAlertingRsp=uds1CfgAlertingRsp, uds1CfgNoMdmAvailErrCode=uds1CfgNoMdmAvailErrCode, uds1CmdMgtStationId=uds1CmdMgtStationId, uds1TotalTable=uds1TotalTable, uds1TrapEnaContCrcAlrmClr=uds1TrapEnaContCrcAlrmClr, uds1StatE1ContCrc=uds1StatE1ContCrc, uds1StatDchanOperational=uds1StatDchanOperational, uds1IntervalEntry=uds1IntervalEntry, uds1CfgDialInAdrAckWinkEn=uds1CfgDialInAdrAckWinkEn, uds1TrapEnaMultiFrmClr=uds1TrapEnaMultiFrmClr, uds1StatMultiFrame=uds1StatMultiFrame, uds1TrapEnaTable=uds1TrapEnaTable, uds1CfgDialInOutTrunkType=uds1CfgDialInOutTrunkType, uds1CfgBlockCallType=uds1CfgBlockCallType, uds1CfgStuffByteValue=uds1CfgStuffByteValue, uds1StatLossOfSignal=uds1StatLossOfSignal, uds1StatOutOfFrame=uds1StatOutOfFrame, uds1CmdForce=uds1CmdForce, uds1TotalEntry=uds1TotalEntry, uds1CfgDialOutAdrDly=uds1CfgDialOutAdrDly, uds1CurrentTable=uds1CurrentTable, uds1StatSwitchTypeActive=uds1StatSwitchTypeActive, uds1CfgDialInOutTrunkSt=uds1CfgDialInOutTrunkSt, uds1IntFrameBitErrors=uds1IntFrameBitErrors, uds1IntervalTable=uds1IntervalTable, uds1TrapEnaEntry=uds1TrapEnaEntry, uds1StatDChannel=uds1StatDChannel, uds1CmdCode=uds1CmdCode, uds1StatNfasDChannel=uds1StatNfasDChannel, uds1TrapEnaYellowAlarmClr=uds1TrapEnaYellowAlarmClr, uds1StatRemMultiFrame=uds1StatRemMultiFrame, uds1CurrBurstyErrSeconds=uds1CurrBurstyErrSeconds, uds1CfgZeroCoding=uds1CfgZeroCoding, uds1TrapEnaRemMultiFrmClr=uds1TrapEnaRemMultiFrmClr, uds1TrapEnaIndex=uds1TrapEnaIndex, uds1CfgSeizureWinkDly=uds1CfgSeizureWinkDly, usr=usr, uds1CfgNfasDChannel=uds1CfgNfasDChannel, uds1CmdResult=uds1CmdResult, uds1TrapEnaYellowAlarm=uds1TrapEnaYellowAlarm, uds1CfgDialInAdr=uds1CfgDialInAdr, uds1CmdParam=uds1CmdParam, uds1ConfigTable=uds1ConfigTable, uds1StatEntry=uds1StatEntry, uds1StatE1PhysicalState=uds1StatE1PhysicalState, uds1TrapEnaPhysStateChng=uds1TrapEnaPhysStateChng, uds1TotFrameBitErrors=uds1TotFrameBitErrors, uds1CfgNoIgwsAvailErrCode=uds1CfgNoIgwsAvailErrCode, uds1CfgServiceState=uds1CfgServiceState, uds1CfgDgtlBlockErrCode=uds1CfgDgtlBlockErrCode, uds1CurrDeltaFrameAlligns=uds1CurrDeltaFrameAlligns, uds1StatReceiverGain=uds1StatReceiverGain, nas=nas, uds1CmdIndex=uds1CmdIndex, uds1CmdFunction=uds1CmdFunction, uds1CfgAnlgBlockErrCode=uds1CfgAnlgBlockErrCode, uds1CfgAutoBusyEnable=uds1CfgAutoBusyEnable, uds1CmdTable=uds1CmdTable, uds1IntExcessCRCErrors=uds1IntExcessCRCErrors, uds1TotBurstyErrSeconds=uds1TotBurstyErrSeconds, uds1IntBurstyErrSeconds=uds1IntBurstyErrSeconds, uds1=uds1, uds1IntIndex=uds1IntIndex, uds1TotDeltaFrameAlligns=uds1TotDeltaFrameAlligns, uds1TotIndex=uds1TotIndex, uds1StatReceivingAIS=uds1StatReceivingAIS, uds1TrapEnaLossOfSignal=uds1TrapEnaLossOfSignal, uds1CfgIcbKeyword=uds1CfgIcbKeyword, uds1StatDs0SrvcChngLst=uds1StatDs0SrvcChngLst, uds1StatIndex=uds1StatIndex, uds1CfgPriSwitchType=uds1CfgPriSwitchType, uds1CfgOverlapRxMode=uds1CfgOverlapRxMode, uds1CfgShrtHaulDist=uds1CfgShrtHaulDist, uds1CfgJitterAttenuation=uds1CfgJitterAttenuation)
