#
# PySNMP MIB module HP-ICF-VG-RPTR (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-VG-RPTR
# Produced by pysmi-0.3.4 at Wed May  1 13:35:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hpicfVg, hpicfVgRptrTrapsPrefix, hpicfObjectModules = mibBuilder.importSymbols("HP-ICF-OID", "hpicfVg", "hpicfVgRptrTrapsPrefix", "hpicfObjectModules")
icfVgPortStatus, = mibBuilder.importSymbols("ICF-VG-RPTR", "icfVgPortStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, iso, TimeTicks, Gauge32, ObjectIdentity, Unsigned32, Integer32, NotificationType, ModuleIdentity, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "iso", "TimeTicks", "Gauge32", "ObjectIdentity", "Unsigned32", "Integer32", "NotificationType", "ModuleIdentity", "Counter32", "Bits")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpicfVgRptrMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11))
hpicfVgRptrMib.setRevisions(('2000-11-03 22:25', '1997-03-06 03:45', '1996-09-10 02:36', '1996-02-14 22:53', '1995-01-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfVgRptrMib.setRevisionsDescriptions(('Updated division name.', 'Added NOTIFICATION-GROUP information.', 'Updated division name and STATUS clauses.', 'Split this MIB module from the former monolithic hp-icf MIB. Added redundant uplink support and additional global counters for standard-compliant hardware support.', 'Initial version of this MIB module. Released with the HPJ2414A agent card for the HPJ2410A 100VG repeater.',))
if mibBuilder.loadTexts: hpicfVgRptrMib.setLastUpdated('200011032225Z')
if mibBuilder.loadTexts: hpicfVgRptrMib.setOrganization('Hewlett Packard Company, Network Infrastructure Solutions')
if mibBuilder.loadTexts: hpicfVgRptrMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfVgRptrMib.setDescription('This MIB module contains objects that provide HP-specific extensions to the 802.12 Repeater MIB.')
hpVgBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1))
hpVgBasicGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1))
hpVgEntityName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgEntityName.setStatus('current')
if mibBuilder.loadTexts: hpVgEntityName.setDescription("The local name of this 100BaseVG repeater. This is the same value as hpicfEntityName in the case where there is Distributed Management Protocol to access this device. For SNMPv1, this name is appended to the agent community name to obtain a community name to use to specify that the agent should proxy to this repeater. For example, if this agent has a community with a community name of 'public', and the value of this object is 'repeater1', the community 'public/repeater1' will specify that the agent should proxy to the public community of the repeater1 box to obtain management information about this repeater. If an agent receives a management request where the localEntity is not specified, it will default to the local repeater on which this agent is executing.")
hpVgRedundantUpLinksFlag = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgRedundantUpLinksFlag.setStatus('current')
if mibBuilder.loadTexts: hpVgRedundantUpLinksFlag.setDescription('This object is used to indicate that the hub is configured with redundant uplink ports.')
hpVgXcvrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3), )
if mibBuilder.loadTexts: hpVgXcvrTable.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrTable.setDescription('A table containing information about transceivers. All uplink, downlink, and redundent links are represented in this table')
hpVgXcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1), ).setIndexNames((0, "HP-ICF-VG-RPTR", "hpVgXcvrGroupIndex"), (0, "HP-ICF-VG-RPTR", "hpVgXcvrIndex"))
if mibBuilder.loadTexts: hpVgXcvrEntry.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrEntry.setDescription('An entry in the transceiver table')
hpVgXcvrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgXcvrGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrGroupIndex.setDescription('The group within the repeater for which this entry contains information. This object has the same value as the corresponding instance of icfVgGroupIndex.')
hpVgXcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgXcvrIndex.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrIndex.setDescription('The transceiver within the group for which this entry contains information.')
hpVgXcvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pmdMissing", 3), ("utp4", 4), ("stp2", 5), ("fibre", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrType.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrType.setDescription("The type of physical media supported by this transceiver. One of the following values: other undefined unknown true state not known pmdMissing PMD device not attached utp4 4-pair unshielded twisted pair stp2 2-pair shielded twisted pair fibre 802.12 fibre optic cabling This object may be 'unknown' if the implementation is not capable of identifying the PMD media type, or whether or not the PMD is even present.")
hpVgXcvrAssociatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgXcvrAssociatedPort.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrAssociatedPort.setDescription('The port within the group that this transceiver is associated with. There may be multiple transceivers associated with a single port. Also, a transceiver may be moved between ports.')
hpVgXcvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("inUse", 2), ("standby", 3), ("silent", 4), ("linkFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrState.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrState.setDescription("This object is set to 'unknown' if the transceiver is not present or its status cannot be determined. 'inUse' indicates that the transceiver is currently selected for use by its associated port. 'standby' indicates the associated port is using another tranceiver, but this tranceiver could be used if needed. 'silent' indicates that the tranceiver is not detecting any tones on the link. 'linkFailure' indicates that the tranceiver was unable to train for some reason.")
hpVgXcvrAbandonments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrAbandonments.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrAbandonments.setDescription("The total number of times the corresponding instance of the hpVgXcvrState object has entered the 'abandoned' state. For downlink ports this object will have the value 0.")
hpVgXcvrIsMovable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrIsMovable.setStatus('current')
if mibBuilder.loadTexts: hpVgXcvrIsMovable.setDescription('A true value indicates that the transceiver can be associated with a single port from a set of multiple ports. A false value indicates that a transceiver can only be associated with a single, fixed, port')
hpVgNullAddrTraining = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preventNullAddr", 1), ("allowNullAddr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgNullAddrTraining.setStatus('current')
if mibBuilder.loadTexts: hpVgNullAddrTraining.setDescription("This object is used to control whether the repeater will allow completion of training by end-nodes using null MAC addresses. The 802.12 standard is written to disallow such training. However, some end-nodes may use this configuration at power-up before any software is loaded. If so, the user may see frequent training occurring on the repeater because of this. In addition, some end-node applications may not work when initial training fails due to the locking out of null MAC addresses. The default setting of this object is to allow null MAC addresses to train. This is recommended for most situations, despite the fact that it contradicts the 802.12 standard. For repeaters that have First Learned address security on this hub, disallowing null-address training provides the most extensive security until the ports' authorized addresses are learned. However, if this creates problems for the end-node applications, it may be necessary to instead explicitly assign the ports' authorized addresses and configure this object to allow null-address training.")
hpVgBasicGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2))
hpVgBasicGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hpVgBasicGroupTable.setStatus('current')
if mibBuilder.loadTexts: hpVgBasicGroupTable.setDescription('HP specific extensions to the vgBasicGroupTable.')
hpVgBasicGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1), ).setIndexNames((0, "HP-ICF-VG-RPTR", "hpVgGrpGroupIndex"))
if mibBuilder.loadTexts: hpVgBasicGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hpVgBasicGroupEntry.setDescription('An entry in the table, containing HP extensions for a specific group.')
hpVgGrpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgGrpGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hpVgGrpGroupIndex.setDescription('The group within the repeater for which this entry contains information. This object has the same value as the corresponding instance of icfVgGroupIndex.')
hpVgGrpPortsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpVgGrpPortsAdminStatus.setDescription("The hpVgGrpPortsAdminStatus is a bit map of the state of the icfVgPortAdminStatus object for all of the ports in this group. The object has a one bit for each port for which the value of icfVgPortAdminStatus is equal to 'enabled(1)' and a zero bit for each port for which the value of icfVgPortAdminStatus is equal to 'disabled(2)'. The bits are placed into the OCTET STRING in the following order: octet 0 octet 1 octet 2 ... bits 7-0 bits 7-0 bits 7-0 ... ports 1-8 ports 9-16 ports 17-24 ... Values of unused bits in the last octet are undefined.")
hpVgGrpPortsTrained = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsTrained.setStatus('current')
if mibBuilder.loadTexts: hpVgGrpPortsTrained.setDescription("The hpVgGrpPortsTrained is a bit map which indicates which ports in this group are currently online. The object has a one bit for each port for which meets the following conditions: 1. The value of the corresponding instance of the ifVgPortAdminStatus object is equal to 'enabled(1)'. 2. The value of the corresponding instance of the icfVgPortStatus object is equal to 'active(1)'. The object has a zero bit for each port which does not meet the above conditions. The bits are placed into the OCTET STRING in the following order: octet 0 octet 1 octet 2 ... bits 7-0 bits 7-0 bits 7-0 ... ports 1-8 ports 9-16 ports 17-24 ... Values of unused bits in the last octet are undefined.")
hpVgGrpPortsInTraining = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsInTraining.setStatus('current')
if mibBuilder.loadTexts: hpVgGrpPortsInTraining.setDescription("The hpVgGrpPortsInTraining is a bit map which indicates which ports in this group are currently in the training state. The object has a one bit for each port which meets the following conditions: 1. The value of the corresponding instance of the ifVgPortAdminStatus object is equal to 'enabled(1)'. 2. The value of the corresponding instance of the icfVgPortStatus object is equal to 'training(3)'. The object has a zero bit for each port which does not meet the above conditions. The bits are placed into the OCTET STRING in the following order: octet 0 octet 1 octet 2 ... bits 7-0 bits 7-0 bits 7-0 ... ports 1-8 ports 9-16 ports 17-24 ... Values of unused bits in the last octet are undefined.")
hpVgGrpPortsCascaded = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsCascaded.setStatus('current')
if mibBuilder.loadTexts: hpVgGrpPortsCascaded.setDescription("The hpVgGrpPortsCascaded is a bit map which indicates which ports in this group have trained as cascaded repeater ports. The object has a one bit for each port which meets the following conditions: 1. The value of the corresponding instance of the ifVgPortAdminStatus object is equal to 'enabled(1)'. 2. The value of the corresponding instance of the icfVgPortStatus object is equal to 'active(1)'. 3. The value of the 'R' bit in the corresponding instance of the icfVgPortTrainingResult object is equal to one. The object has a zero bit for each port which does not meet the above conditions. The bits are placed into the OCTET STRING in the following order: octet 0 octet 1 octet 2 ... bits 7-0 bits 7-0 bits 7-0 ... ports 1-8 ports 9-16 ports 17-24 ... Values of unused bits in the last octet are undefined.")
hpVgGrpPortsPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsPromiscuous.setStatus('current')
if mibBuilder.loadTexts: hpVgGrpPortsPromiscuous.setDescription("The hpVgGrpPortsPromiscuous is a bit map which indicates which ports in this group have trained for promiscuous operation. The object has a one bit for each port which meets the following conditions: 1. The value of the corresponding instance of the ifVgPortAdminStatus object is equal to 'enabled(1)'. 2. The value of the corresponding instance of the icfVgPortStatus object is equal to 'active(1)'. 3. The value of the 'PP' field in the corresponding instance of the icfVgPortTrainingResult object is equal to 01. The object has a zero bit for each port which does not meet the above conditions. The bits are placed into the OCTET STRING in the following order: octet 0 octet 1 octet 2 ... bits 7-0 bits 7-0 bits 7-0 ... ports 1-8 ports 9-16 ports 17-24 ... Values of unused bits in the last octet are undefined.")
hpVgBasicPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3))
hpVgBasicPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hpVgBasicPortTable.setStatus('current')
if mibBuilder.loadTexts: hpVgBasicPortTable.setDescription('HP specific extensions to the vg port table.')
hpVgBasicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1), ).setIndexNames((0, "HP-ICF-VG-RPTR", "hpVgPortGroupIndex"), (0, "HP-ICF-VG-RPTR", "hpVgPortIndex"))
if mibBuilder.loadTexts: hpVgBasicPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpVgBasicPortEntry.setDescription('HP extended information about a specific vg port.')
hpVgPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgPortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hpVgPortGroupIndex.setDescription('The group that contains the port for which this entry contains information.')
hpVgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpVgPortIndex.setDescription('The port within the group for which this entry contains information.')
hpVgPortPolarityReversed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgPortPolarityReversed.setStatus('current')
if mibBuilder.loadTexts: hpVgPortPolarityReversed.setDescription('This object is used to indicate that the hub port was wired with the positive/negative polarity of its wire pairs reversed. Note that the port will continue to operate in this state, with the hub inverting the polarity internally.')
hpVgPortWireSkewError = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgPortWireSkewError.setStatus('current')
if mibBuilder.loadTexts: hpVgPortWireSkewError.setDescription('This object is used to indicate that a wire skew error has been detected on this port.')
hpVgPortAssociatedXcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgPortAssociatedXcvrIndex.setStatus('current')
if mibBuilder.loadTexts: hpVgPortAssociatedXcvrIndex.setDescription('This object is the index into the transceiver table, hpVgXcvrTable. The transceiver entry defines which transceiver is connected to the port. This object will be set to 0 if the port is not currently associated with a transceiver')
hpVgPortNumAssociatedXcvrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgPortNumAssociatedXcvrs.setStatus('current')
if mibBuilder.loadTexts: hpVgPortNumAssociatedXcvrs.setDescription('This object is the number of transceivers that are currently associated with this port via the hpVgXcvrTable.')
hpVgMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2))
hpVgMonitorGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1))
hpVgMonCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1))
hpVgMonGlbReadableFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbReadableFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aReadableFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbReadableFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbReadableFrames.setDescription('This object is the total number of good frames of valid frame length that have been received on all ports in this repeater. This counter is the summation of the values of the icfVgPortReadableFrames counter for all of the ports in this repeater.')
hpVgMonGlbReadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbReadableOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aReadableOctetsReceived.')
if mibBuilder.loadTexts: hpVgMonGlbReadableOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbReadableOctets.setDescription('This object is a count of the total number of octets contained in good frames that have been received on all ports in this repeater. This counter is the summation of the values of the icfVgPortReadableOctets counter for all of the ports in this repeater. Note that this counter will roll over very quickly. It is provided for backward compatibility for Network Management protocols that do not support 64 bit counters (e.g. SNMP version 1).')
hpVgMonGlbUnreadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbUnreadableOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aOctetsInUnreadableFramesRcvd.')
if mibBuilder.loadTexts: hpVgMonGlbUnreadableOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbUnreadableOctets.setDescription('This object is a count of the total number of octets contained in invalid frames that have been received on all ports in this repeater. This counter is the summation of the values of icfVgPortUnreadableOctets counter for all of the ports in this repeater. Note that this counter will roll over very quickly. It is provided for backward compatibility for Network Management protocols that do not support 64 bit counters (e.g. SNMP version 1).')
hpVgMonGlbHighPriorityFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aHighPriorityFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityFrames.setDescription('This object is a count of the total number of high priority frames that have been received on all ports in this repeater. This counter is a summation of the values of the icfVgPortHighPriorityFrames counter for all of the ports in this repeater.')
hpVgMonGlbHighPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aHighPriorityOctetsReceived.')
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityOctets.setDescription('This object is a count of the total number of octets contained in high priority frames that have been received on all ports of this repeater. This counter is a summation of the values of the icfVgPortHighPriorityOctets counter for all of the ports in this repeater. Note that this counter will roll over very quickly. It is provided for backward compatibility for Network Management protocols that do not support 64 bit counters (e.g. SNMP version 1).')
hpVgMonGlbBroadcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbBroadcastFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aBroadcastFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbBroadcastFrames.setDescription('This object is a count of the total number of broadcast packets that have been received on all ports in this repeater. This counter is a summation of the values of the icfVgPortBroadcastFrames counter for all of the ports in this repeater.')
hpVgMonGlbMulticastFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbMulticastFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aMulticastFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbMulticastFrames.setDescription('This object is a count of the total number of multicast packets that have been received on all ports in this repeater. This counter is a summation of the values of the icfVgPortMulticastFrames counter for all of the ports in this repeater.')
hpVgMonGlbIPMFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbIPMFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aIPMFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbIPMFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbIPMFrames.setDescription('This object is a count of the total number of frames that have been received on all ports in this repeater with an invalid packet marker. This counter is a summation of the values of the icfVgPortIPMFrames counter for all of the ports in this repeater.')
hpVgMonGlbDataErrorFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbDataErrorFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aDataErrorFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbDataErrorFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbDataErrorFrames.setDescription('This object is a count of the total number of errored frames received on all ports in this repeater. This counter is a summation of the values of the icfVgPortDataErrorFrames counter for all of the ports in this repeater.')
hpVgMonGlbPriorityPromotions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbPriorityPromotions.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aPriorityPromotions.')
if mibBuilder.loadTexts: hpVgMonGlbPriorityPromotions.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbPriorityPromotions.setDescription('This object is a count of the total number of times the priority promotion timer has expired on any port in this repeater. This counter is a summation of the values of the icfVgPortPriorityPromotions counter for all of the ports in this repeater.')
hpVgMonGlbHCReadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCReadableOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aReadableOctetsReceived.')
if mibBuilder.loadTexts: hpVgMonGlbHCReadableOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbHCReadableOctets.setDescription('This object is a count of the total number of octets contained in good frames that have been received on all ports in this repeater. This counter is the summation of the values of the icfVgPortReadableOctets counter for all of the ports in this repeater. This counter is a 64 bit version of hpVgMonGlbReadableOctets. It should be used by Network Management protocols which support 64 bit counters (e.g. SNMPv2).')
hpVgMonGlbHCUnreadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCUnreadableOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aOctetsInUnreadableFramesRcvd.')
if mibBuilder.loadTexts: hpVgMonGlbHCUnreadableOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbHCUnreadableOctets.setDescription('This object is a count of the total number of octets contained in invalid frames that have been received on all ports in this repeater. This counter is the summation of the values of icfVgPortUnreadableOctets counter for all of the ports in this repeater. This counter is a 64 bit version of hpVgMonGlbUnreadableOctets. It should be used by Network Management protocols which support 64 bit counters (e.g. SNMPv2).')
hpVgMonGlbHCHighPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCHighPriorityOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aHighPriorityOctetsReceived.')
if mibBuilder.loadTexts: hpVgMonGlbHCHighPriorityOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbHCHighPriorityOctets.setDescription('This object is a count of the total number of octets contained in high priority frames that have been received on all ports of this repeater. This counter is a summation of the values of the icfVgPortHighPriorityOctets counter for all of the ports in this repeater. This counter is a 64 bit version of hpVgMonGlbHighPriorityOctets. It should be used by Network Management protocols which support 64 bit counters (e.g. SNMPv2).')
hpVgMonGlbHCNormPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCNormPriorityOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aNormalPriorityOctetsReceived.')
if mibBuilder.loadTexts: hpVgMonGlbHCNormPriorityOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbHCNormPriorityOctets.setDescription('This object is a count of the total number of octets contained in normal priority frames that have been received on all ports of this repeater. This counter is a summation of the values of the icfVgPortNormPriorityOctets counter for all of the ports in this repeater. This counter is a 64 bit version of hpVgMonGlbNormPriorityOctets. It should be used by Network Management protocols which support 64 bit counters (e.g. SNMPv2).')
hpVgMonGlbNormPriorityFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aNormalPriorityFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityFrames.setDescription('This object is a count of the total number of normal priority frames received on all ports in this repeater. This counter is a summation of the values of the icfVgPortNormPriorityFrames counter for all of the ports in this repeater.')
hpVgMonGlbNormPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityOctets.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aNormalPriorityOctetsReceived.')
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityOctets.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityOctets.setDescription('This object is a count of the total number of normal priority octets received on all ports in this repeater. This counter is a summation of the values of the icfVgPortNormPriorityOctets counter for all of the ports in this repeater.')
hpVgMonGlbNullAddressedFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbNullAddressedFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aNullAddressedFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbNullAddressedFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbNullAddressedFrames.setDescription('This object is a count of the total number of null addressed packets that have been received on all ports. This counter is a summation of the values of the icfVgPortNullAddressedFrames counter for the ports in this repeater.')
hpVgMonGlbOversizeFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbOversizeFrames.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aOversizeFramesReceived.')
if mibBuilder.loadTexts: hpVgMonGlbOversizeFrames.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbOversizeFrames.setDescription('This object is a count of the total number of oversized frames that have been received on all ports. This counter is a summation of the values of the icfVgPortOversizeFrames counter for the ports in this repeater.')
hpVgMonGlbTransitionToTrainings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbTransitionToTrainings.setReference('IEEE Draft Std. 802.12, Draft 6, 23 November, 1994, 13.2.4.5.1, aTransitionsIntoTraining.')
if mibBuilder.loadTexts: hpVgMonGlbTransitionToTrainings.setStatus('current')
if mibBuilder.loadTexts: hpVgMonGlbTransitionToTrainings.setDescription('This object is a count of the total number of transitions to training on all ports. This counter is a summation of the values of the icfVgPortTransitionToTrainings counter for the ports in this repeater.')
hpVgMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 2))
hpVgMonitorPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 3))
hpVgRedundantUplinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 3, 0, 1)).setObjects(("HP-ICF-VG-RPTR", "hpVgXcvrState"))
if mibBuilder.loadTexts: hpVgRedundantUplinkTrap.setStatus('current')
if mibBuilder.loadTexts: hpVgRedundantUplinkTrap.setDescription("An hpVgRedundantUplinkTrap is sent anytime one of the tranceivers being used in a redundant uplink transitions from one of the 'unknown', 'inUse' or 'standby' states to either the 'silent' or 'linkFailure' state. The hpVgXcvrState is the new value of the tranceiver state for the tranceiver that made the transition.")
hpVgLossOfActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 3, 0, 2)).setObjects(("ICF-VG-RPTR", "icfVgPortStatus"))
if mibBuilder.loadTexts: hpVgLossOfActiveTrap.setStatus('current')
if mibBuilder.loadTexts: hpVgLossOfActiveTrap.setDescription("An hpVgLossOfActiveTrap is sent whenever an enabled port transitions from the active state to either the inactive or training state. The new value of the port's status is returned in the trap.")
hpicfVgRptrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1))
hpicfVgRptrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 1))
hpicfVgRptrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2))
hpicfVgRptrPreDot12Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 1, 1)).setObjects(("HP-ICF-VG-RPTR", "hpicfVgRptrPreDot12BasicGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrPreDot12MonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrPreDot12Compliance = hpicfVgRptrPreDot12Compliance.setStatus('obsolete')
if mibBuilder.loadTexts: hpicfVgRptrPreDot12Compliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for pre-standard HP 100VG repeaters.')
hpicfVgRptrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 1, 2)).setObjects(("HP-ICF-VG-RPTR", "hpicfVgRptrBasicGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrMonitorGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrXcvrGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrBasicTraps"), ("HP-ICF-VG-RPTR", "hpicfVgRptrRedundantUplinkGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrRedundantUplinkTraps"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrCompliance = hpicfVgRptrCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrCompliance.setDescription('The compliance statement for HP 802.12 repeaters.')
hpicfVgRptrPreDot12BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 1)).setObjects(("HP-ICF-VG-RPTR", "hpVgEntityName"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsAdminStatus"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsTrained"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsInTraining"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsCascaded"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsPromiscuous"), ("HP-ICF-VG-RPTR", "hpVgPortPolarityReversed"), ("HP-ICF-VG-RPTR", "hpVgPortWireSkewError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrPreDot12BasicGroup = hpicfVgRptrPreDot12BasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hpicfVgRptrPreDot12BasicGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* HP specific extensions to the 802.12 Repeater MIB providing status and configuration of pre-standard 802.12 repeaters.')
hpicfVgRptrBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 2)).setObjects(("HP-ICF-VG-RPTR", "hpVgEntityName"), ("HP-ICF-VG-RPTR", "hpVgNullAddrTraining"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsAdminStatus"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsTrained"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsInTraining"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsCascaded"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsPromiscuous"), ("HP-ICF-VG-RPTR", "hpVgPortPolarityReversed"), ("HP-ICF-VG-RPTR", "hpVgPortWireSkewError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrBasicGroup = hpicfVgRptrBasicGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrBasicGroup.setDescription('HP specific extensions to the 802.12 Repeater MIB providing status and configuration of 802.12 repeaters.')
hpicfVgRptrPreDot12MonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 3)).setObjects(("HP-ICF-VG-RPTR", "hpVgMonGlbReadableFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbBroadcastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbMulticastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbIPMFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbDataErrorFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbPriorityPromotions"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCHighPriorityOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrPreDot12MonitorGroup = hpicfVgRptrPreDot12MonitorGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hpicfVgRptrPreDot12MonitorGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* HP specific extensions to the 802.12 Repeater MIB providing global counters for pre-standard 802.12 repeaters.')
hpicfVgRptrMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 4)).setObjects(("HP-ICF-VG-RPTR", "hpVgMonGlbReadableFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbBroadcastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbMulticastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbIPMFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbDataErrorFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbPriorityPromotions"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCHighPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCNormPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbNormPriorityFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbNormPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbNullAddressedFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbOversizeFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbTransitionToTrainings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrMonitorGroup = hpicfVgRptrMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrMonitorGroup.setDescription('HP specific extensions to the 802.12 Repeater MIB providing global counters for 802.12 repeaters.')
hpicfVgRptrXcvrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 5)).setObjects(("HP-ICF-VG-RPTR", "hpVgXcvrType"), ("HP-ICF-VG-RPTR", "hpVgXcvrAssociatedPort"), ("HP-ICF-VG-RPTR", "hpVgXcvrState"), ("HP-ICF-VG-RPTR", "hpVgXcvrAbandonments"), ("HP-ICF-VG-RPTR", "hpVgXcvrIsMovable"), ("HP-ICF-VG-RPTR", "hpVgPortAssociatedXcvrIndex"), ("HP-ICF-VG-RPTR", "hpVgPortNumAssociatedXcvrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrXcvrGroup = hpicfVgRptrXcvrGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrXcvrGroup.setDescription('A collection of objects for configuring and monitoring tranceivers on 802.12 repeaters.')
hpicfVgRptrRedundantUplinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 6)).setObjects(("HP-ICF-VG-RPTR", "hpVgRedundantUpLinksFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrRedundantUplinkGroup = hpicfVgRptrRedundantUplinkGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrRedundantUplinkGroup.setDescription('A collection of objects for configuring redundant uplinks on 802.12 repeaters.')
hpicfVgRptrBasicTraps = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 7)).setObjects(("HP-ICF-VG-RPTR", "hpVgLossOfActiveTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrBasicTraps = hpicfVgRptrBasicTraps.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrBasicTraps.setDescription('A collection of notifications used to indicate port status changes on 802.12 repeaters.')
hpicfVgRptrRedundantUplinkTraps = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 8)).setObjects(("HP-ICF-VG-RPTR", "hpVgRedundantUplinkTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrRedundantUplinkTraps = hpicfVgRptrRedundantUplinkTraps.setStatus('current')
if mibBuilder.loadTexts: hpicfVgRptrRedundantUplinkTraps.setDescription('A collection of notifications used to indicate status changes on the redundant uplinks on 802.12 repeaters.')
mibBuilder.exportSymbols("HP-ICF-VG-RPTR", hpicfVgRptrPreDot12MonitorGroup=hpicfVgRptrPreDot12MonitorGroup, hpVgBasicGroupEntry=hpVgBasicGroupEntry, hpVgGrpPortsCascaded=hpVgGrpPortsCascaded, hpVgXcvrIndex=hpVgXcvrIndex, hpVgMonGlbMulticastFrames=hpVgMonGlbMulticastFrames, hpVgEntityName=hpVgEntityName, hpVgLossOfActiveTrap=hpVgLossOfActiveTrap, hpVgBasic=hpVgBasic, hpVgXcvrState=hpVgXcvrState, hpVgPortGroupIndex=hpVgPortGroupIndex, hpVgRedundantUplinkTrap=hpVgRedundantUplinkTrap, hpicfVgRptrMonitorGroup=hpicfVgRptrMonitorGroup, hpVgMonGlbUnreadableOctets=hpVgMonGlbUnreadableOctets, hpVgPortAssociatedXcvrIndex=hpVgPortAssociatedXcvrIndex, hpVgMonGlbNullAddressedFrames=hpVgMonGlbNullAddressedFrames, hpVgMonGlbReadableFrames=hpVgMonGlbReadableFrames, hpVgMonitor=hpVgMonitor, hpVgMonGlbOversizeFrames=hpVgMonGlbOversizeFrames, hpVgXcvrAbandonments=hpVgXcvrAbandonments, hpVgXcvrGroupIndex=hpVgXcvrGroupIndex, hpVgGrpPortsTrained=hpVgGrpPortsTrained, hpicfVgRptrPreDot12BasicGroup=hpicfVgRptrPreDot12BasicGroup, hpVgXcvrIsMovable=hpVgXcvrIsMovable, hpVgNullAddrTraining=hpVgNullAddrTraining, hpVgBasicGroupTable=hpVgBasicGroupTable, hpVgGrpPortsAdminStatus=hpVgGrpPortsAdminStatus, hpVgPortWireSkewError=hpVgPortWireSkewError, hpVgMonGlbHCHighPriorityOctets=hpVgMonGlbHCHighPriorityOctets, hpicfVgRptrBasicTraps=hpicfVgRptrBasicTraps, hpicfVgRptrBasicGroup=hpicfVgRptrBasicGroup, hpVgBasicPortEntry=hpVgBasicPortEntry, hpVgMonGlbReadableOctets=hpVgMonGlbReadableOctets, hpicfVgRptrXcvrGroup=hpicfVgRptrXcvrGroup, hpVgMonGlbHCUnreadableOctets=hpVgMonGlbHCUnreadableOctets, hpVgRedundantUpLinksFlag=hpVgRedundantUpLinksFlag, hpVgGrpPortsInTraining=hpVgGrpPortsInTraining, hpVgBasicPortTable=hpVgBasicPortTable, hpVgGrpGroupIndex=hpVgGrpGroupIndex, hpVgMonGlbNormPriorityOctets=hpVgMonGlbNormPriorityOctets, hpVgMonGlbHCReadableOctets=hpVgMonGlbHCReadableOctets, hpicfVgRptrPreDot12Compliance=hpicfVgRptrPreDot12Compliance, hpicfVgRptrMib=hpicfVgRptrMib, hpVgMonCounters=hpVgMonCounters, hpVgMonGlbDataErrorFrames=hpVgMonGlbDataErrorFrames, hpVgMonGlbIPMFrames=hpVgMonGlbIPMFrames, hpVgMonitorGroup=hpVgMonitorGroup, hpVgMonGlbHighPriorityFrames=hpVgMonGlbHighPriorityFrames, hpicfVgRptrCompliance=hpicfVgRptrCompliance, hpVgMonGlbPriorityPromotions=hpVgMonGlbPriorityPromotions, hpVgXcvrTable=hpVgXcvrTable, hpVgPortIndex=hpVgPortIndex, PYSNMP_MODULE_ID=hpicfVgRptrMib, hpVgPortNumAssociatedXcvrs=hpVgPortNumAssociatedXcvrs, hpVgMonGlbHCNormPriorityOctets=hpVgMonGlbHCNormPriorityOctets, hpVgGrpPortsPromiscuous=hpVgGrpPortsPromiscuous, hpVgPortPolarityReversed=hpVgPortPolarityReversed, hpVgMonGlbBroadcastFrames=hpVgMonGlbBroadcastFrames, hpicfVgRptrRedundantUplinkTraps=hpicfVgRptrRedundantUplinkTraps, hpicfVgRptrCompliances=hpicfVgRptrCompliances, hpVgMonGlbHighPriorityOctets=hpVgMonGlbHighPriorityOctets, hpVgMonitorGlobal=hpVgMonitorGlobal, hpVgBasicGlobal=hpVgBasicGlobal, hpVgXcvrEntry=hpVgXcvrEntry, hpVgMonitorPort=hpVgMonitorPort, hpicfVgRptrRedundantUplinkGroup=hpicfVgRptrRedundantUplinkGroup, hpVgMonGlbNormPriorityFrames=hpVgMonGlbNormPriorityFrames, hpVgMonGlbTransitionToTrainings=hpVgMonGlbTransitionToTrainings, hpVgXcvrType=hpVgXcvrType, hpVgBasicPort=hpVgBasicPort, hpVgBasicGroup=hpVgBasicGroup, hpicfVgRptrGroups=hpicfVgRptrGroups, hpVgXcvrAssociatedPort=hpVgXcvrAssociatedPort, hpicfVgRptrConformance=hpicfVgRptrConformance)
