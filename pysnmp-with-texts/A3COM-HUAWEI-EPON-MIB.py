#
# PySNMP MIB module A3COM-HUAWEI-EPON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-EPON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
hwLswSlotIndex, hwLswFrameIndex = mibBuilder.importSymbols("A3COM-HUAWEI-DEVICE-MIB", "hwLswSlotIndex", "hwLswFrameIndex")
h3cEpon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cEpon")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, TimeTicks, Counter32, iso, Integer32, Unsigned32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "TimeTicks", "Counter32", "iso", "Integer32", "Unsigned32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "ObjectIdentity", "MibIdentifier")
MacAddress, TruthValue, DateAndTime, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DateAndTime", "RowStatus", "DisplayString", "TextualConvention")
h3cEponMibObjects = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1))
if mibBuilder.loadTexts: h3cEponMibObjects.setLastUpdated('200705221008Z')
if mibBuilder.loadTexts: h3cEponMibObjects.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cEponMibObjects.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: h3cEponMibObjects.setDescription(' The objects in this MIB module are used to manage and display current configuration of Ethernet Passive Optical Network (EPON) port which are based on the Ethernet in the First Mile (EFM) Passive Optical Network(PON) as defined in IEEE Draft P802.3ah/D3.0 clause 60, 64, 65.. ')
h3cEponSysMan = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1))
h3cEponAutoAuthorize = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoAuthorize.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoAuthorize.setDescription(" This value determines whether software performs self-authorization for each Optical Network Unit(ONU) registering to the network. Setting it to false means for every ONU registering, software requires external authorization, and until it's done the ONU is not authenticated. True value means software authorizes each ONU registering to the network automatically. true - ONUs are always authorized. false - If 802.1x authorization is enable, the ONUs have to be authorized by the protocol. - If 802.1x authorization is disable, ONUs are always authorized. ")
h3cEponMonitorCycle = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMonitorCycle.setStatus('current')
if mibBuilder.loadTexts: h3cEponMonitorCycle.setDescription(' The cycle of alarm thresholds checking. Applying to the following types: Bit Error Rate(BER) alarm, Frame Error Rate(FER), Logical Link Identity(LLID) mismatch alarm and so on. The unit is second. ')
h3cEponMsgTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 3), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMsgTimeOut.setStatus('current')
if mibBuilder.loadTexts: h3cEponMsgTimeOut.setDescription(' Timeout waiting for a response from Optical Line Terminal(OLT) firmware after sending it a message. The unit is millisecond. ')
h3cEponMsgLoseNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 4), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMsgLoseNum.setStatus('current')
if mibBuilder.loadTexts: h3cEponMsgLoseNum.setDescription(' The times of messages sending timeouts, after which OLT will reset (applying to every OLT). ')
h3cEponSysHasEPONBoard = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponSysHasEPONBoard.setStatus('current')
if mibBuilder.loadTexts: h3cEponSysHasEPONBoard.setDescription(' true(1) - At least an EPON board exists. false(2) - No EPON board exists. ')
h3cEponMonitorCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponMonitorCycleEnable.setStatus('current')
if mibBuilder.loadTexts: h3cEponMonitorCycleEnable.setDescription(' Stop or continue monitoring. true(1) - Continue monitoring. false(2) - Stop monitoring. ')
h3cEponOltSoftwareErrAlmEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponOltSoftwareErrAlmEnable.setStatus('current')
if mibBuilder.loadTexts: h3cEponOltSoftwareErrAlmEnable.setDescription(' Software error alarm behavior of all active OLTs. true(1) - alarm enable. false(2) - alarm disable. ')
h3cEponPortLoopBackAlmEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponPortLoopBackAlmEnable.setStatus('current')
if mibBuilder.loadTexts: h3cEponPortLoopBackAlmEnable.setDescription(' LoopBack alarm behavior of EPON ports. true(1) - alarm enable. false(2) - alarm disable. ')
h3cEponMonitorCycleMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMonitorCycleMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cEponMonitorCycleMinVal.setDescription(' The lower limit of cycle which be confined to the h3cEponMonitorCycle. ')
h3cEponMonitorCycleMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMonitorCycleMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cEponMonitorCycleMaxVal.setDescription(' The upper limit of cycle which be confined to the h3cEponMonitorCycle. ')
h3cEponMsgTimeOutMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgTimeOutMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cEponMsgTimeOutMinVal.setDescription(' The lower limit of timeout which be confined to the h3cEponMsgTimeOut. ')
h3cEponMsgTimeOutMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgTimeOutMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cEponMsgTimeOutMaxVal.setDescription(' The upper limit of timeout which be confined to the h3cEponMsgTimeOut. ')
h3cEponMsgLoseNumMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgLoseNumMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cEponMsgLoseNumMinVal.setDescription(' The lower limit of time which be confined to the h3cEponMsgLoseNum. ')
h3cEponMsgLoseNumMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponMsgLoseNumMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cEponMsgLoseNumMaxVal.setDescription(' The upper limit of time which be confined to the h3cEponMsgLoseNum. ')
h3cEponSysScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 15))
h3cEponSysManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16), )
if mibBuilder.loadTexts: h3cEponSysManTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponSysManTable.setDescription(' This table defines system related parameters. ')
h3cEponSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponSlotIndex"))
if mibBuilder.loadTexts: h3cEponSysManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponSysManEntry.setDescription(' The entry of the table h3cEponSysManTable. ')
h3cEponSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponSlotIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponSlotIndex.setDescription(' Slot Index, the index of h3cEponSysManTable. ')
h3cEponModeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cmode", 1), ("hmode", 2))).clone('cmode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponModeSwitch.setStatus('current')
if mibBuilder.loadTexts: h3cEponModeSwitch.setDescription(' cmode - epon standard mode. hmode - private mode. ')
h3cEponAutomaticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutomaticMode.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutomaticMode.setDescription(" Automatic mode setting: when enabled - after new OLT is added, the OLT stack sets its encryption mode to 'triple churning' and configure the OLT to authorize ONU MAC addresses according to its table. enable -enable automatic mode. disable -disable automatic mode. ")
h3cEponOamDiscoveryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 4), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponOamDiscoveryTimeout.setStatus('current')
if mibBuilder.loadTexts: h3cEponOamDiscoveryTimeout.setDescription(' Time out parameter for extended OAM discovery process message, ranging from 0 to 2550, measured in 100 milliseconds. ')
h3cEponEncryptionNoReplyTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 5), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponEncryptionNoReplyTimeOut.setStatus('current')
if mibBuilder.loadTexts: h3cEponEncryptionNoReplyTimeOut.setDescription(' Encryption response timeout, ranging from 1 to 2550, measured in 100 milliseconds. ')
h3cEponEncryptionUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 6), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponEncryptionUpdateTime.setStatus('current')
if mibBuilder.loadTexts: h3cEponEncryptionUpdateTime.setDescription(' Encryption key update timer for all ONUs on slot, indicated by h3cEponSlotIndex, ranging from 1 to 255, measured in seconds. ')
h3cEponAutoBindStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoBindStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoBindStatus.setDescription(' enable - auto bind ONU ID when the ONU registered in the EPON system. disable - need manual bind ONU ID when the ONU registered in the EPON system. ')
h3cEponAutoUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17), )
if mibBuilder.loadTexts: h3cEponAutoUpdateTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateTable.setDescription(' EPON auto update ONU application configuration. ')
h3cEponAutoUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponSlotIndex"))
if mibBuilder.loadTexts: h3cEponAutoUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateEntry.setDescription(' The entry of the table h3cEponAutoUpdateTable. ')
h3cEponAutoUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateFileName.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateFileName.setDescription(' The name of ONU application file, the file name must be valid and include the path. It is a zero length string by default. ')
h3cEponAutoUpdateSchedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedStatus.setDescription(' The status of schedule update configuration. The h3cEponAutoUpdateFileName must be set before enable h3cEponAutoUpdateSchedStatus. enable - enable ONU schedule update. disable - disable ONU schedule update. ')
h3cEponAutoUpdateSchedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedTime.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedTime.setDescription(" The schedule update timing configuration is related to the h3cEponAutoUpdateSchedType. auto update daily: the string format is hhmm auto update weekly: the string format is hhmmw 'w' means update weekly, it ranges from 0 to 6: 0 - Sunday. 1 - Monday. 2 - Tuesday. 3 - Wednesday. 4 - Thursday. 5 - Friday. 6 - Saturday. auto update in coming date : the string format is hhmmyyyymmdd. The configuration will take effect only if h3cEponAutoUpdateSchedStatus is enabled. ")
h3cEponAutoUpdateSchedType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("daily", 1), ("weekly", 2), ("comingdate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedType.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateSchedType.setDescription(' The update type of auto updating configuration. daily - update ONU application every day. weekly - update ONU application every week. comingdate - update ONU application on coming date. ')
h3cEponAutoUpdateRealTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponAutoUpdateRealTimeStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponAutoUpdateRealTimeStatus.setDescription(' The status of real time update configuration. The h3cEponAutoUpdateFileName must be set before enable h3cEponAutoUpdateRealTimeStatus. enable - enable ONU real time update. disable - disable ONU real time update. ')
h3cEponOuiIndexNextTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 18), )
if mibBuilder.loadTexts: h3cEponOuiIndexNextTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiIndexNextTable.setDescription(' Next OUI index table. ')
h3cEponOuiIndexNextEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 18, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponSlotIndex"))
if mibBuilder.loadTexts: h3cEponOuiIndexNextEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiIndexNextEntry.setDescription(' The entry of the table h3cEponOuiIndexNextTable. ')
h3cEponOuiIndexNext = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponOuiIndexNext.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiIndexNext.setDescription(' This object contains an appropriate value to be used for h3cEponOuiIndex when creating rows in the h3cEponOuiTable. ')
h3cEponOuiTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 19), )
if mibBuilder.loadTexts: h3cEponOuiTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiTable.setDescription(' List of OUI and OAM supported by OLT. ')
h3cEponOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 19, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponSlotIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cEponOuiIndex"))
if mibBuilder.loadTexts: h3cEponOuiEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiEntry.setDescription(' The entry of the table h3cEponOuiTable. ')
h3cEponOuiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponOuiIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiIndex.setDescription(' The index of this table. ')
h3cEponOuiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponOuiValue.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiValue.setDescription(' OUI list supported by the extended OAM discovery process. The OUI is composed of six octets. The first six octets denote the first OUI , the second six octets denote the second OUI, and the like. ')
h3cEponOamVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 19, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponOamVersion.setStatus('current')
if mibBuilder.loadTexts: h3cEponOamVersion.setDescription(' Version of OAM protocol defined by the organization denoted by OUI. ')
h3cEponOuiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 19, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponOuiRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponOuiRowStatus.setDescription(' The status of this table entry. Only active, createAndGo and the destory are supported. ')
h3cEponMulticastControlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 20), )
if mibBuilder.loadTexts: h3cEponMulticastControlTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponMulticastControlTable.setDescription(' Multicast control global configuration. ')
h3cEponMulticastControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 20, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponMulticastVlanId"))
if mibBuilder.loadTexts: h3cEponMulticastControlEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponMulticastControlEntry.setDescription(' The entry of the table h3cEponMulticastControlTable. ')
h3cEponMulticastVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponMulticastVlanId.setStatus('current')
if mibBuilder.loadTexts: h3cEponMulticastVlanId.setDescription(' The index of this table. ')
h3cEponMulticastAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponMulticastAddressList.setStatus('current')
if mibBuilder.loadTexts: h3cEponMulticastAddressList.setDescription(' The multicast address, each four octets represents a multicast address, the address section ranging from the first four octets to the second four octets, and the like. ')
h3cEponMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 1, 20, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cEponMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: h3cEponMulticastStatus.setDescription(' The status of this table entry. Only active, createAndGo and the destory are supported. ')
h3cEponFileName = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 2))
h3cEponDbaUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponDbaUpdateFileName.setStatus('current')
if mibBuilder.loadTexts: h3cEponDbaUpdateFileName.setDescription(' The name of a binary file which is loaded to the OLT from an external source. Note that the filename must contain the file path. ')
h3cEponOnuUpdateFileName = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponOnuUpdateFileName.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuUpdateFileName.setDescription(' The filename of the ONU firmware to be updated. Note that the filename must contain the file path. ')
h3cEponOltMan = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3))
h3cOltSysManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1), )
if mibBuilder.loadTexts: h3cOltSysManTable.setStatus('current')
if mibBuilder.loadTexts: h3cOltSysManTable.setDescription(' This table defines several OLT system parameters: (1)laser on time (2)laser off time (3)whether multiple copy broadcast (4)whether discard packet (5)self test (6)self test result ')
h3cOltSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltSysManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOltSysManEntry.setDescription(' The entry of the table h3cOltSysManTable. ')
h3cOltLaserOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 1), Integer32().clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltLaserOnTime.setStatus('current')
if mibBuilder.loadTexts: h3cOltLaserOnTime.setDescription(' The laser on time of the ONUs during the discovery process, measured in Time Quanta(TQ). ')
h3cOltLaserOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 2), Integer32().clone(96)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltLaserOffTime.setStatus('current')
if mibBuilder.loadTexts: h3cOltLaserOffTime.setDescription(' The laser off time of the ONUs during the discovery process, measured in TQ. ')
h3cOltMultiCopyBrdCast = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltMultiCopyBrdCast.setStatus('current')
if mibBuilder.loadTexts: h3cOltMultiCopyBrdCast.setDescription(' true/false filtering of tagged multicast frames. The software avert tagged downstream frames with multicast or broadcast DA to the PON and not to the CPU, except for special multicast frames (link-constraint, IGMP control and ARP) that are passed to the CPU regardless of this feature. ')
h3cOltEnableDiscardPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltEnableDiscardPacket.setStatus('current')
if mibBuilder.loadTexts: h3cOltEnableDiscardPacket.setDescription(' Forward(false)/discard(true) any frames received from unlearned source address when the inside address table of the original ONU entry reach to the limit. ')
h3cOltSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("selftest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltSelfTest.setStatus('current')
if mibBuilder.loadTexts: h3cOltSelfTest.setDescription(" selftest(1): Test OLT to check whether it's OK. ")
h3cOltSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: h3cOltSelfTestResult.setDescription(' The self test result of the specific OLT. other(1): The self test result is another reason. ok(2): The self test result is OK. fail(3): The self test result is fail. ')
h3cOltMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltMaxRtt.setStatus('current')
if mibBuilder.loadTexts: h3cOltMaxRtt.setDescription(' Set the max Round Trip Time of this OLT. ')
h3cOltInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2), )
if mibBuilder.loadTexts: h3cOltInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cOltInfoTable.setDescription(' Primary status of the specified OLT. There will be one row in this table for each information in the system. (1)Software and hardware versions of the specified OLT (h3cOltFirmMajorVersion, h3cOltFirmMinorVersion, h3cOltHardMajorVersion, h3cOltHardMinorVersion) (2)Several physical capabilities of an OLT device. (h3cOltAgcLockTime, h3cOltAgcCdrTime) (3)The operation(activation) status of an OLT. (h3cOltMacAddress, h3cOltWorkMode) ')
h3cOltInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOltInfoEntry.setDescription(' The entry of the table h3cOltInfoTable. ')
h3cOltFirmMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltFirmMajorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOltFirmMajorVersion.setDescription(' OLT firmware major version. If the object length is zero, it means the version is unknown. ')
h3cOltFirmMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltFirmMinorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOltFirmMinorVersion.setDescription(' OLT firmware minor version. If the object length is zero, it means the version is unknown. ')
h3cOltHardMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltHardMajorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOltHardMajorVersion.setDescription(' OLT hardware major version. If the object length is zero, it means the version is unknown. ')
h3cOltHardMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltHardMinorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOltHardMinorVersion.setDescription(' OLT hardware minor version. If the object length is zero, it means the version is unknown. ')
h3cOltAgcLockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltAgcLockTime.setStatus('current')
if mibBuilder.loadTexts: h3cOltAgcLockTime.setDescription(' PON upstream data Automatic Gain Control(AGC) lock time, measured in TQ, range: 1 - 2^15. 0x7FFFFFFF: unknown value. ')
h3cOltAgcCdrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltAgcCdrTime.setStatus('current')
if mibBuilder.loadTexts: h3cOltAgcCdrTime.setDescription(' PON RX signal synchronization time, measured in TQ, range: 1 - 2^15. 0x7FFFFFFF: unknown value ')
h3cOltMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cOltMacAddress.setDescription(' OLT MAC address. ')
h3cOltWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("open", 2), ("reset", 3), ("closed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltWorkMode.setStatus('current')
if mibBuilder.loadTexts: h3cOltWorkMode.setDescription(' The operation(activation) modes of an OLT. other(1) - The OLT is in another mode. open(2) - The OLT is open. reset(3) - The OLT is reset. closed(4) - The OLT is closed. ')
h3cOltOpticalPowerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltOpticalPowerTx.setStatus('current')
if mibBuilder.loadTexts: h3cOltOpticalPowerTx.setDescription(' The optical power transmitted by this OLT. It measured in 0.01 dBm unit. ')
h3cOltOpticalPowerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltOpticalPowerRx.setStatus('current')
if mibBuilder.loadTexts: h3cOltOpticalPowerRx.setDescription(' The burst optical power received by this OLT. It measured in 0.01 dBm unit. ')
h3cOltDbaManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3), )
if mibBuilder.loadTexts: h3cOltDbaManTable.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaManTable.setDescription(' This table defines the primary parameters of the Dynamic Bandwidth Allocation(DBA) algorithm applying to the OLT. ')
h3cOltDbaManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltDbaManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaManEntry.setDescription(' The entry of the table h3cOltDbaManTable. ')
h3cOltDbaEnabledType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaEnabledType.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaEnabledType.setDescription(' Enable different types of the DBA algorithm. Start upstream dynamic bandwidth allocation algorithm, replacing former bandwidth allocation mechanism. internal(1) - OLT internal Service Level Agreement(SLA) based algorithm, always being activated. external(2) - DBA algorithm in a binary file which is loaded to the OLT from an external source. ')
h3cOltDbaDiscoveryLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 2), Integer32().clone(41500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLength.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLength.setDescription(' Discovery length in TQ units. ')
h3cOltDbaDiscovryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 3), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequency.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequency.setDescription(' How often should the OLT send discovery frames to the ONUs, measured in grant cycles. ')
h3cOltDbaCycleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 4), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaCycleLength.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaCycleLength.setDescription(' The grant cycle length in TQ units. ')
h3cOltDbaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaVersion.setDescription(' DBA version of the OLT. ')
h3cOltDbaUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltDbaUpdate.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaUpdate.setDescription(' Update(1): Update the DBA algorithm with a binary file which is loaded to the OLT from an external source(flash). Config the MIB object module h3cEponDbaUpdateFileName. ')
h3cOltDbaUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fail", 3), ("fileNotExist", 4), ("notSetFilename", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaUpdateResult.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaUpdateResult.setDescription(' The latest DBA update result. other: The DBA update result is another reason. ok: The DBA update result is OK. fail: The DBA update result is fail. fileNotExist: The DBA update failed because the file does not exist. notSetFilename: The DBA filename is not set. ')
h3cOltPortAlarmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4), )
if mibBuilder.loadTexts: h3cOltPortAlarmThresholdTable.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmThresholdTable.setDescription(' The table defines the alarm threshold of OLT. ')
h3cOltPortAlarmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOltPortAlarmThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmThresholdEntry.setDescription(' The entry of the table h3cOltPortAlarmThresholdTable. ')
h3cOltPortAlarmBerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmBerEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmBerEnabled.setDescription(' Behavior of BER alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmBerDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("berUplink", 1), ("berDownlink", 2), ("berAll", 3))).clone('berAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmBerDirect.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmBerDirect.setDescription(' Traffic direction to monitor for BER alarm. ')
h3cOltPortAlarmBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 3), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmBerThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmBerThreshold.setDescription(' BER threshold exceed which the alarm is raised. ')
h3cOltPortAlarmFerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmFerEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmFerEnabled.setDescription(' Behavior of FER alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmFerDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ferUplink", 1), ("ferDownlink", 2), ("ferAll", 3))).clone('ferAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmFerDirect.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmFerDirect.setDescription(' Traffic direction to monitor for FER alarm. ')
h3cOltPortAlarmFerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 6), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmFerThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmFerThreshold.setDescription(' Frame error rate exceed threshold then the alarm is raised. ')
h3cOltPortAlarmLlidMismatchEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMismatchEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMismatchEnabled.setDescription(' Behavior of LLID mismatch alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmLlidMismatchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 8), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMismatchThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMismatchThreshold.setDescription(' The minimal number of mismatched frames exceed threshold then LLID mismatch alarm is raised. ')
h3cOltPortAlarmRemoteStableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmRemoteStableEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmRemoteStableEnabled.setDescription(' Behavior of remote stable alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmLocalStableEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmLocalStableEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmLocalStableEnabled.setDescription(' Behavior of local stable alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmRegistrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmRegistrationEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmRegistrationEnabled.setDescription(' Behavior of registration alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmOamDisconnectionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmOamDisconnectionEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmOamDisconnectionEnabled.setDescription(' Behavior of Operations Administration and Maintenance(OAM) disconnection alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmEncryptionKeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmEncryptionKeyEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmEncryptionKeyEnabled.setDescription(' Behavior of encryption bad key alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmVendorSpecificEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmVendorSpecificEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmVendorSpecificEnabled.setDescription(' Behavior of vendor specific alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmRegExcessEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmRegExcessEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmRegExcessEnabled.setDescription(' Behavior of ONU registering over limitation alarm. true(1) - alarm enable. false(2) - alarm disable. ')
h3cOltPortAlarmDFEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 4, 1, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOltPortAlarmDFEEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmDFEEnabled.setDescription(' Behavior of device fatal error alarm. true - alarm enable. false - alarm disable. ')
h3cOltLaserOnTimeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOnTimeMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltLaserOnTimeMinVal.setDescription(' The lower limit of time which is confined to h3cOltLaserOnTime. ')
h3cOltLaserOnTimeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOnTimeMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltLaserOnTimeMaxVal.setDescription(' The upper limit of time which is confined to h3cOltLaserOnTime. ')
h3cOltLaserOffTimeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOffTimeMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltLaserOffTimeMinVal.setDescription(' The lower limit of time which is confined to h3cOltLaserOffTime. ')
h3cOltLaserOffTimeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltLaserOffTimeMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltLaserOffTimeMaxVal.setDescription(' The upper limit of time which is confined to h3cOltLaserOffTime. ')
h3cOltDbaDiscoveryLengthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLengthMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLengthMinVal.setDescription(' The lower limit of the discovery length which is confined to h3cOltDbaDiscoveryLength. ')
h3cOltDbaDiscoveryLengthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLengthMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaDiscoveryLengthMaxVal.setDescription(' The upper limit of the discovery length which is confined to h3cOltDbaDiscoveryLength. ')
h3cOltDbaDiscovryFrequencyMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequencyMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequencyMinVal.setDescription(' The lower limit of the discovery length which is confined to h3cOltDbaDiscovryFrequency. ')
h3cOltDbaDiscovryFrequencyMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequencyMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaDiscovryFrequencyMaxVal.setDescription(' The upper limit of the discovery length which is confined to h3cOltDbaDiscovryFrequency. ')
h3cOltDbaCycleLengthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaCycleLengthMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaCycleLengthMinVal.setDescription(' The lower limit of the frames which is confined to h3cOltDbaCycleLength. ')
h3cOltDbaCycleLengthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltDbaCycleLengthMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltDbaCycleLengthMaxVal.setDescription(' The upper limit of the frames which is confined to h3cOltDbaCycleLength. ')
h3cOltPortAlarmLlidMisMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisMinVal.setDescription(' The lower limit of the frames which is confined to h3cOltPortAlarmLlidMismatchThreshold. ')
h3cOltPortAlarmLlidMisMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisMaxVal.setDescription(' The upper limit of the frames which is confined to h3cOltPortAlarmLlidMismatchThreshold. ')
h3cOltPortAlarmBerMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmBerMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmBerMinVal.setDescription(' The lower limit of threshold which is confined to h3cOltPortAlarmBerThreshold. ')
h3cOltPortAlarmBerMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmBerMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmBerMaxVal.setDescription(' The upper limit of threshold which is confined to h3cOltPortAlarmBerThreshold. ')
h3cOltPortAlarmFerMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmFerMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmFerMinVal.setDescription(' The lower limit of threshold which is confined to h3cOltPortAlarmFerThreshold. ')
h3cOltPortAlarmFerMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltPortAlarmFerMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmFerMaxVal.setDescription(' The upper limit of threshold which is confined to h3cOltPortAlarmFerThreshold. ')
h3cOnuSilentTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 21), )
if mibBuilder.loadTexts: h3cOnuSilentTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSilentTable.setDescription(' This table is used for getting silent ONU information of OLT. ')
h3cOnuSilentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuSilentMacAddr"))
if mibBuilder.loadTexts: h3cOnuSilentEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSilentEntry.setDescription(' The entry of the table h3cOnuSilentTable. ')
h3cOnuSilentMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 21, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cOnuSilentMacAddr.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSilentMacAddr.setDescription(' The MAC address of silent ONUs in OLT. ')
h3cOnuSilentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSilentTime.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSilentTime.setDescription(' The aging time of a silent ONU. ')
h3cOltUsingOnuTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 22), )
if mibBuilder.loadTexts: h3cOltUsingOnuTable.setStatus('current')
if mibBuilder.loadTexts: h3cOltUsingOnuTable.setDescription(' The table containing configurations to manage ONU interface(s) based on OLT interface. ')
h3cOltUsingOnuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOltUsingOnuNum"))
if mibBuilder.loadTexts: h3cOltUsingOnuEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOltUsingOnuEntry.setDescription(' The entry of the table h3cOltUsingOnuTable. ')
h3cOltUsingOnuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cOltUsingOnuNum.setStatus('current')
if mibBuilder.loadTexts: h3cOltUsingOnuNum.setDescription(' The ONU interface number. This value is used to specify the ONU interface which the user wants to configure for an OLT interface. ')
h3cOltUsingOnuIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOltUsingOnuIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOltUsingOnuIfIndex.setDescription(' The ifIndex of the ONU interface. ')
h3cOltUsingOnuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 3, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOltUsingOnuRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOltUsingOnuRowStatus.setDescription(' This object is responsible for managing the creation, deletion and modification of rows, which supports active status and CreatAndGo, destroy operation. ')
h3cEponOnuMan = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5))
h3cOnuSysManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1), )
if mibBuilder.loadTexts: h3cOnuSysManTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSysManTable.setDescription(' This table implements the following functions for ONUs: 1. Encrypting all downstream/upstream and downstream directions traffic destined to and originated from a specific LLID (ONU in current implementation). 2. Restart a process of ONU authentication, using the OLT (IEEE 802.1x) authenticator. ')
h3cOnuSysManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuSysManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSysManEntry.setDescription(' The entry of the table h3cOnuSysManTable. ')
h3cOnuEncryptMan = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("downlink", 2), ("updownlink", 3))).clone('downlink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuEncryptMan.setStatus('current')
if mibBuilder.loadTexts: h3cOnuEncryptMan.setDescription(' Start encrypting all downstream/upstream and downstream directions traffic destined to and originated from a specific LLID (ONU in current implementation). ONU registration encryption key is used as an initial value. If the encryption key was updated after ONU registration, the last updated key is used. off(1): - Stop encrypting. downlink(2): - Start encrypting all downstream directions traffic. updownlink(3): - Start encrypting all downstream/upstream directions traffic. ')
h3cOnuReAuthorize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reAuthorize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuReAuthorize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuReAuthorize.setDescription(' Restart a process of ONU authentication. If 802.1x authentication is enabled, the OLT (IEEE 802.1x) authenticator is applied. Otherwise, use the default authentication. Until the reauthentication succeeds, the ONU remains its previous authorization mode. The reauthentication process includes a new authentication request sent to the authentication server. ')
h3cOnuMulticastFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMulticastFilterStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMulticastFilterStatus.setDescription(' true(1) - Multicast-Filter enable on ONU. false(2) - Multicast-Filter disable on ONU. ')
h3cOnuDbaReportQueueSetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 4), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDbaReportQueueSetNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDbaReportQueueSetNumber.setDescription(' The number of queue sets reported in MPCP report frames. ')
h3cOnuRemoteFecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRemoteFecStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRemoteFecStatus.setDescription(' Value that indicates status of the 1000BASE-PX PHY optional FEC Sublayer for forward error correction see [802.3ah] clause 65.2. enable - enable remote forward error correction. disable - disable remote forward error correction. ')
h3cOnuPortBerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPortBerStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPortBerStatus.setDescription(' enable - enable ONU port bit error rate alarm. disable - disable ONU port bit error rate alarm. ')
h3cOnuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuReset.setStatus('current')
if mibBuilder.loadTexts: h3cOnuReset.setDescription(' Reboot ONU. ')
h3cOnuMulticastControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("igmpsnooping", 1), ("multicastcontrol", 2))).clone('igmpsnooping')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMulticastControlMode.setDescription(' igmpsnooping - the traditional IGMP snooping mode. multicastcontrol - the specific multicast control mode. ')
h3cOnuAccessVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuAccessVlan.setStatus('current')
if mibBuilder.loadTexts: h3cOnuAccessVlan.setDescription(' The VLAN ID assigned to untagged frames received on ONU. ')
h3cOnuEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuEncryptKey.setStatus('current')
if mibBuilder.loadTexts: h3cOnuEncryptKey.setDescription(' The encryption key, used to encrypt all downstream traffic destined to and/or upstream traffic originating from a specific ONU. It is a zero length, or MD5 hashed string, by default, the string is empty. ')
h3cOnuUniUpDownTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuUniUpDownTrapStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUniUpDownTrapStatus.setDescription(' true - A notification will be sent when UNI link status is change. false - Device will not sent notification when UNI link status is change. ')
h3cOnuFecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuFecStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFecStatus.setDescription(' Value that indicates status of the 1000BASE-PX PHY optional FEC Sublayer for forward error correction (include remote onu and local OLT) see [802.3ah] clause 65.2 enable - enable forward error correction. disable - disable forward error correction. ')
h3cOnuMcastCtrlHostAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMcastCtrlHostAgingTime.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMcastCtrlHostAgingTime.setDescription(' The host aging time of multicast control mode on ONU, ranging from 200 to 1000, measured in seconds. ')
h3cOnuMulticastFastLeaveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuMulticastFastLeaveEnable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMulticastFastLeaveEnable.setDescription(' true(1) - Enable multicast fast leave attribute on all ethernet UNIs of the ONU. false(2) - Disable multicast fast leave attribute on all ethernet UNIs of the ONU. ')
h3cOnuPortIsolateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPortIsolateEnable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPortIsolateEnable.setDescription(' true(1) - Enable port isolate setting on all ethernet UNIs of the ONU. false(2) - Disable port isolate setting on all ethernet UNIs of the ONU. ')
h3cOnuLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2), )
if mibBuilder.loadTexts: h3cOnuLinkTestTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestTable.setDescription(' LLID link test applying to the ONU only including delay measurement option. The command tests a link to a single LLID over a period of time or once, using a variable number of measurement frames. The length of the measurement frames is also parameterized. The test uses a loopback mode of the ONU to return each measurement frame, loopback activation is done using randomly patterned OAM Protocol Data Unit(PDU) frames. ')
h3cOnuLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuLinkTestEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestEntry.setDescription(' The entry of h3cOnuLinkTestEntry. ')
h3cOnuLinkTestFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 1), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNum.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNum.setDescription(' Exact number of measurement frames. ')
h3cOnuLinkTestFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1514)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameSize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestFrameSize.setDescription(" Measurement frames data size, measured in bytes. Not including Preamble, SFD, VLAN tag, and FCS. Frame size minimum value is 56 - if VLAN tag is enabled('VLAN enable' field is set to ENABLE), and 60 - if VLAN tag is disabled. The actual measurement frames sent to the PON are always minimum 60 bytes long. When VLAN tag is enabled, the actual measurement frames size including FCS may reach (1514+4+4=)1522 bytes. 60(60 is VLAN tag disabled) - 1514 . ")
h3cOnuLinkTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestDelay.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestDelay.setDescription(' true:Link test includes delay measurement, which corresponds to the difference between sent and received times(including granting delay and firmware processing time overheads). false:Link test not includes a delay measurement. ')
h3cOnuLinkTestVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestVlanTag.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestVlanTag.setDescription(' true:Enable VLAN tag in link test frames. false:Link test not includes frames with VLAN tag. ')
h3cOnuLinkTestVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestVlanPriority.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestVlanPriority.setDescription(' VLAN priority: 0-7. ')
h3cOnuLinkTestVlanTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuLinkTestVlanTagID.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestVlanTagID.setDescription(' VLAN ID: 1-4094. ')
h3cOnuLinkTestResultSentFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultSentFrameNum.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestResultSentFrameNum.setDescription(' The total number of frames sent during the link test process. ')
h3cOnuLinkTestResultRetFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultRetFrameNum.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestResultRetFrameNum.setDescription(' The total number of frames return back during the link test process. ')
h3cOnuLinkTestResultRetErrFrameNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultRetErrFrameNum.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestResultRetErrFrameNum.setDescription(' The total number of error frames return back during the link test process. ')
h3cOnuLinkTestResultMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultMinDelay.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestResultMinDelay.setDescription(" The minimum delay time in TQ units, which corresponds to the difference between sent and received times (including granting delay and firmware processing time overheads). It's invalid if the field 'h3cOnuLinkTestDelay' is set to be true. ")
h3cOnuLinkTestResultMeanDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultMeanDelay.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestResultMeanDelay.setDescription(" The average delay time in TQ units, which corresponds to the difference between sent and received times (including granting delay and firmware processing time overheads). It's invalid if the field 'h3cOnuLinkTestDelay' is set to be true. ")
h3cOnuLinkTestResultMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestResultMaxDelay.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestResultMaxDelay.setDescription(" The maximum delay time in TQ units, which corresponds to the difference between sent and received times (including granting delay and firmware processing time overheads). It's invalid if the field 'h3cOnuLinkTestDelay' is set to be true. ")
h3cOnuBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3), )
if mibBuilder.loadTexts: h3cOnuBandWidthTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBandWidthTable.setDescription(' Set bandwidth policy parameters(restrictions)for a LLID (only for the ONU). Default policies are set to disable. Policy parameters will be erased upon LLID network disconnection. ')
h3cOnuBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuBandWidthEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBandWidthEntry.setDescription(' The entry of table h3cOnuBandWidthTable. ')
h3cOnuDownStreamBandWidthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamBandWidthPolicy.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDownStreamBandWidthPolicy.setDescription(' true:Enable static bandwidth configuration policing. false:Disable static bandwidth configuration policing. ')
h3cOnuDownStreamMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDownStreamMaxBandWidth.setDescription(' Maximum bandwidth allowed for the ONU, measured in Kbits/Sec. ')
h3cOnuDownStreamMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388480)).clone(8388480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDownStreamMaxBurstSize.setDescription(' Maximal number of bytes in a burst. The value is truncated to the nearest smaller 128 bytes multiple value, measured in bytes. ')
h3cOnuDownStreamHighPriorityFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamHighPriorityFirst.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDownStreamHighPriorityFirst.setDescription(' true:Enable high priority frames preference. false:Disable high priority frames preference. ')
h3cOnuDownStreamShortFrameFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDownStreamShortFrameFirst.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDownStreamShortFrameFirst.setDescription(' true:Enable short frames preference. false:Disable short frames preference. ')
h3cOnuP2PBandWidthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PBandWidthPolicy.setStatus('current')
if mibBuilder.loadTexts: h3cOnuP2PBandWidthPolicy.setDescription(' true:Enable static bandwidth configuration policing. false:Disable static bandwidth configuration policing. ')
h3cOnuP2PMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: h3cOnuP2PMaxBandWidth.setDescription(' Maximum bandwidth allowed for the ONU, measured in Kbits/Sec. ')
h3cOnuP2PMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388480)).clone(8388480)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuP2PMaxBurstSize.setDescription(' Maximal number of bytes in a burst. The value is truncated to the nearest smaller 128 bytes multiple value, measured in bytes. ')
h3cOnuP2PHighPriorityFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PHighPriorityFirst.setStatus('current')
if mibBuilder.loadTexts: h3cOnuP2PHighPriorityFirst.setDescription(' true:Enable high priority frames preference. false:Disable high priority frames preference. ')
h3cOnuP2PShortFrameFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuP2PShortFrameFirst.setStatus('current')
if mibBuilder.loadTexts: h3cOnuP2PShortFrameFirst.setDescription(' true:Enable short frames preference. false:Disable short frames preference. ')
h3cOnuSlaManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4), )
if mibBuilder.loadTexts: h3cOnuSlaManTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaManTable.setDescription(' Two types of DBA algorithm are supported in the ONU. The internal SLA based algorithm is always activated. This table defines the primary parameter about the internal SLA algorithm. ')
h3cOnuSlaManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuSlaManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaManEntry.setDescription(' The entry of table h3cOnuSlaManTable. ')
h3cOnuSlaMaxBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidth.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidth.setDescription(' Maximum bandwidth - measured in Kbit/s. The value of this object should be the multiple of the value of h3cOnuSlaBandWidthStepVal. The minimum bandwidth should not be larger than the maximum bandwidth. ')
h3cOnuSlaMinBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidth.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidth.setDescription(' Minimum bandwidth - measured in Kbit/s. The value of this object should be the multiple of the value of h3cOnuSlaBandWidthStepVal. The maximum bandwidth should be larger than the minimum bandwidth. ')
h3cOnuSlaBandWidthStepVal = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaBandWidthStepVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaBandWidthStepVal.setDescription(' Granularity of bandwidth - measured in Kbit/s. The value of h3cOnuSlaMaxBandWidth and h3cOnuSlaMinBandWidth should be the multiple of the value of this object. ')
h3cOnuSlaDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaDelay.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaDelay.setDescription(' low - low delay. high - high delay. The delay constraint of a specific ONU. Set to high may improve the bandwidth usage at the cost of delay. ')
h3cOnuSlaFixedBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaFixedBandWidth.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaFixedBandWidth.setDescription(' Fixed bandwidth - measured in Kbit/s. The value of this object should be the multiple of the value of h3cOnuSlaBandWidthStepVal. ')
h3cOnuSlaPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaPriorityClass.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaPriorityClass.setDescription(' Precedence of this flow over others in case of contention. 0 is the lowest priority and 7 is the highest priority. ')
h3cOnuSlaFixedPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuSlaFixedPacketSize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaFixedPacketSize.setDescription(' Fixed packet size - measured in byte. The value of this object should be valid when h3cOnuSlaFixedBandWidth is configured. ')
h3cOnuInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5), )
if mibBuilder.loadTexts: h3cOnuInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuInfoTable.setDescription(' Primary status of the specified ONU. There will be one row in this table for each information in the system. (1)Software and hardware versions of the specified ONU (h3cOnuHardMajorVersion, h3cOnuHardMinorVersion, h3cOnuUniMacType) (2)Several physical capabilities of the ONU. (h3cOnuLaserOnTime, h3cOnuLaserOffTime, h3cOnuGrantFifoDep.) (3)The operation(activation) status of the ONU. (h3cOnuWorkMode) ')
h3cOnuInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuInfoEntry.setDescription(' The entry of the h3cOnuInfoTable. ')
h3cOnuHardMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuHardMajorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOnuHardMajorVersion.setDescription(' ONU hardware major version. If the object length is zero, it means the version is unknown. ')
h3cOnuHardMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuHardMinorVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOnuHardMinorVersion.setDescription(' ONU hardware minor version. If the object length is zero, it means the version is unknown. ')
h3cOnuSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSoftwareVersion.setDescription(' ONU software version. ')
h3cOnuUniMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mii", 2), ("gmii", 3), ("tbi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUniMacType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUniMacType.setDescription(' ONU User Network Interface(UNI) port MAC type. ')
h3cOnuLaserOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLaserOnTime.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLaserOnTime.setDescription(' The ONU laser on time measured in TQ units. If the object value is 0x7FFFFFFF, it means h3cOnuLaserOnTime is unknown. ')
h3cOnuLaserOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLaserOffTime.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLaserOffTime.setDescription(' The ONU laser off time measured in TQ units. If the object value is 0x7FFFFFFF, it means h3cOnuLaserOffTime is unknown. ')
h3cOnuGrantFifoDep = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 255), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuGrantFifoDep.setStatus('current')
if mibBuilder.loadTexts: h3cOnuGrantFifoDep.setDescription(' Maximal number of grant records an ONU can store, relevant to ONU only. range: 1 - 255. 0x7FFFFFFF: unknown value. ')
h3cOnuWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("pending", 3), ("off", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuWorkMode.setStatus('current')
if mibBuilder.loadTexts: h3cOnuWorkMode.setDescription(' The operation(activation) mode of an ONU. other(1) - ONU is in another mode. on(2) - ONU is registered and authorized to the network. In this mode it works as a media converter. pending(3) - ONU has been registered to the PON, but not authorized to the network. off(4) - ONU is not registered to the network. ')
h3cOnuPCBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPCBVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPCBVersion.setDescription(' ONU PCB version. ')
h3cOnuRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRtt.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRtt.setDescription(' The signal round-trip-time(RTT) received. ')
h3cOnuEEPROMVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuEEPROMVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOnuEEPROMVersion.setDescription(' ONU EEPROM version. ')
h3cOnuRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRegType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRegType.setDescription(' ONU registered type. ')
h3cOnuHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuHostType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuHostType.setDescription(' ONU host type. ')
h3cOnuDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuDistance.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDistance.setDescription(' The distance between OLT and ONU, measured in meter. ')
h3cOnuLlid = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLlid.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLlid.setDescription(' The link layer identifier, which uniquely identifies the ONU of a specific OLT. ')
h3cOnuVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuVendorId.setStatus('current')
if mibBuilder.loadTexts: h3cOnuVendorId.setDescription(' ONU vendor ID. ')
h3cOnuFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirmwareVersion.setDescription(' ONU firmware version. ')
h3cOnuOpticalPowerReceivedByOlt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuOpticalPowerReceivedByOlt.setStatus('current')
if mibBuilder.loadTexts: h3cOnuOpticalPowerReceivedByOlt.setDescription(' The burst ONU optical power received by OLT, and when the ONU status is up the value is usable. It measured in 0.01 dBm unit. ')
h3cOnuMacAddrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 6), )
if mibBuilder.loadTexts: h3cOnuMacAddrInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMacAddrInfoTable.setDescription(' This table used for getting MAC address information of ONU. ')
h3cOnuMacAddrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuMacIndex"))
if mibBuilder.loadTexts: h3cOnuMacAddrInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMacAddrInfoEntry.setDescription(' The entry of the h3cEponOnuMacAddrInfoTable. ')
h3cOnuMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cOnuMacIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMacIndex.setDescription(' The index of ONUs in one OLT. ')
h3cOnuMacAddrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bound", 1), ("registered", 2), ("run", 3), ("regIncorrect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMacAddrFlag.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMacAddrFlag.setDescription(' The flag of ONU status. 1 - bound:The ONU is bound but not registered. 2 - registered:The ONU is registered but not bound. 3 - run:The ONU is registered and bound on one OLT. 4 - regIncorrect:The ONU is bound on one OLT and registered on another OLT. ')
h3cOnuMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMacAddress.setDescription(' The MAC address of ONU. ')
h3cOnuBindMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 7), )
if mibBuilder.loadTexts: h3cOnuBindMacAddrTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBindMacAddrTable.setDescription(' This table implements the following functions for ONUs: Bind MAC of ONU. ')
h3cOnuBindMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuBindMacAddrEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBindMacAddrEntry.setDescription(' The entry of the table h3cOnuBindMacAddrTable. ')
h3cOnuBindMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 7, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuBindMacAddress.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBindMacAddress.setDescription(' Bind the MAC of ONU. While the MAC is not bound, the ONU can not go into effect and configurations can not be set. Set 0-0-0 (MAC address) to the EPON device port will unbind the relationship with the original MAC and configurations will be set to default values. ')
h3cOnuBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuBindType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBindType.setDescription(' Set the binding type with the ONU which is confined to the index of h3cEponOnuTypeDescr. ')
h3cOnuFirmwareUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 8), )
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateTable.setDescription(' This table implements the following functions for ONUs: 1. Update the ONU firmware. 2. Result of update ONU firmware. ')
h3cOnuFirmwareUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateEntry.setDescription(' The entry of the table h3cOnuFirmwareUpdateTable. ')
h3cOnuUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuUpdate.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdate.setDescription(' update(1): Update the ONU firmware. Config the MIB object module h3cEponOnuUpdateFileName with the filename of ONU firmware first. ')
h3cOnuUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("updating", 1), ("ok", 2), ("fail", 3), ("fileNotExist", 4), ("notSetFilename", 5), ("fileNotMatchONU", 6), ("timeout", 7), ("otherError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUpdateResult.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateResult.setDescription(' The ONU firmware update result. updating - The ONU is updating firmware right now. ok - The ONU update result is OK. fail - The ONU update result is fail. fileNotExist - The ONU update failed because the file does not exist. notSetFilename - The ONU firmware filename is not set. fileNotMatchONU - The ONU firmware does not match the ONU. timeout - The ONU responses timeout. otherError - The ONU update result is unknown. ')
h3cOnuUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuUpdateFileName.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateFileName.setDescription(' The filename of the ONU firmware to be updated. Note that the filename must contain the file path. ')
h3cOnuLinkTestFrameNumMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNumMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNumMinVal.setDescription('The lower limit of measurement frames which is confined to h3cOnuLinkTestFrameNum.')
h3cOnuLinkTestFrameNumMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNumMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuLinkTestFrameNumMaxVal.setDescription('The upper limit of measurement frames which is confined to h3cOnuLinkTestFrameNum.')
h3cOnuSlaMaxBandWidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidthMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidthMinVal.setDescription(' The lower limit of maximum-bandwidth which is confined to h3cOnuSlaMaxBandWidth.')
h3cOnuSlaMaxBandWidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidthMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaMaxBandWidthMaxVal.setDescription(' The upper limit of maximum-bandwidth which is confined to h3cOnuSlaMaxBandWidth.')
h3cOnuSlaMinBandWidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidthMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidthMinVal.setDescription(' The lower limit of minimum-bandwidth which is confined to h3cOnuSlaMinBandWidth.')
h3cOnuSlaMinBandWidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidthMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSlaMinBandWidthMaxVal.setDescription(' The upper limit of minimum-bandwidth which is confined to h3cOnuSlaMinBandWidth.')
h3cEponOnuTypeManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 15), )
if mibBuilder.loadTexts: h3cEponOnuTypeManTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuTypeManTable.setDescription(' This table is used for getting ONU bind type in current version. ')
h3cEponOnuTypeManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 15, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponOnuTypeIndex"))
if mibBuilder.loadTexts: h3cEponOnuTypeManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuTypeManEntry.setDescription(' The entry of the h3cEponOnuTypeManTable. ')
h3cEponOnuTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponOnuTypeIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuTypeIndex.setDescription(' The ONU type index. ')
h3cEponOnuTypeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 15, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponOnuTypeDescr.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuTypeDescr.setDescription(' The ONU type description which can be used to bind ONU in current version. the value of h3cOnuBindType can be configured by the index of h3cEponOnuTypeDescr. ')
h3cOnuPacketManTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 16), )
if mibBuilder.loadTexts: h3cOnuPacketManTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPacketManTable.setDescription(' This table implements the following functions: (1)Manage packet priority trust mode. (2)Manage packet queue-scheduler mode. ')
h3cOnuPacketManEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuPacketManEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPacketManEntry.setDescription(' The entry of the h3cOnuPacketManTable. ')
h3cOnuPriorityTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dscp", 1), ("ipprecedence", 2), ("cos", 3))).clone('cos')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPriorityTrust.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityTrust.setDescription(' The QOS mode which is assigned on ONU. dscp - The service dscp of politic Priority. ipprecedence - The service IP precedence of politic Priority. cos - The service cos of politic Priority. ')
h3cOnuQueueScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spq", 1), ("wfq", 2))).clone('spq')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueScheduler.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueScheduler.setDescription(' The packet queue-scheduler mode which is assigned on ONU. spq - strict priority queuing. wfq - specifies the weights for weighted round-robin queuing. ')
h3cOnuProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17), )
if mibBuilder.loadTexts: h3cOnuProtocolTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuProtocolTable.setDescription(' This table implements the following functions: (1)Manage STP status. (2)Manage IGMP-snooping. (3)Manage DHCP-snooping. ')
h3cOnuProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuProtocolEntry.setDescription(' The entry of h3cOnuProtocolTable. ')
h3cOnuStpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuStpStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuStpStatus.setDescription(' true(1) - STP status enable on ONU. false(2) - STP status disable on ONU. ')
h3cOnuIgmpSnoopingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingStatus.setDescription(' true(1) - IGMP snooping status enable on ONU. false(2) - IGMP snooping status disable on ONU. ')
h3cOnuDhcpsnoopingOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDhcpsnoopingOption82.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDhcpsnoopingOption82.setDescription(' true(1) - DHCP snooping Option 82 status enable on ONU. false(2) - DHCP snooping Option 82 status disable on ONU. ')
h3cOnuDhcpsnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDhcpsnooping.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDhcpsnooping.setDescription(' true(1) - DHCP snooping status enable on ONU. false(2) - DHCP snooping status disable on ONU. ')
h3cOnuPppoe = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuPppoe.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPppoe.setDescription(' true(1) - PPPOE status enable on ONU. false(2) - PPPOE status disable on ONU. ')
h3cOnuIgmpSnoopingHostAgingT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingHostAgingT.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingHostAgingT.setDescription(' Set the host aging time of IGMP on ONU. ')
h3cOnuIgmpSnoopingMaxRespT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingMaxRespT.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingMaxRespT.setDescription(' Set the max response time of IGMP on ONU. ')
h3cOnuIgmpSnoopingRouterAgingT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingRouterAgingT.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingRouterAgingT.setDescription(' Set the router aging time of IGMP on ONU. ')
h3cOnuIgmpSnoopingAggReportS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingAggReportS.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingAggReportS.setDescription(' true(1) - Igmp snooping aggregation report status enable on ONU. false(2) - Igmp snooping aggregation report status disable on ONU. ')
h3cOnuIgmpSnoopingAggLeaveS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 17, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingAggLeaveS.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgmpSnoopingAggLeaveS.setDescription(' true(1) - Igmp snooping aggregation leave status enable on ONU. false(2) - Igmp snooping aggregation leave status disable on ONU. ')
h3cOnuDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 18), )
if mibBuilder.loadTexts: h3cOnuDot1xTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDot1xTable.setDescription(' This table implements the following functions: (1)Manage 802.1x account. (2)Manage 802.1x password. ONU will be authorized to send and receive frames when the account and the password are all right, otherwise this ONU will be unavailable. ')
h3cOnuDot1xEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuDot1xEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDot1xEntry.setDescription(' The entry of the h3cOnuDot1xTable. ')
h3cOnuDot1xAccount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 18, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDot1xAccount.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDot1xAccount.setDescription(" ONU 802.1X account. The object value cannot be set as 'a', 'al' or 'all'. The object should be set together with h3cOnuDot1xPassword. ")
h3cOnuDot1xPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 18, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDot1xPassword.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDot1xPassword.setDescription(' ONU 802.1X password. The object should be set together with h3cOnuDot1xAccount. ')
h3cEponBatchOperationMan = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6))
h3cOnuPriorityQueueTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 19), )
if mibBuilder.loadTexts: h3cOnuPriorityQueueTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueTable.setDescription(' This table contains specific information of priority queue. ')
h3cOnuPriorityQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuQueueDirection"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuQueueId"))
if mibBuilder.loadTexts: h3cOnuPriorityQueueEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueEntry.setDescription(' The entry of h3cOnuPriorityQueueTable. ')
h3cOnuQueueDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: h3cOnuQueueDirection.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueDirection.setDescription(' The direction of priority queue. ')
h3cOnuQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: h3cOnuQueueId.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueId.setDescription(' The queue ID of priority queue. ')
h3cOnuQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 19, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueSize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueSize.setDescription(' The size of priority queue, measured in percent. The total length of all priority queues is a constant, by default, it is assigned to all of the priority queues evenly. The length of each priority queue may be changed by changing the value of h3cOnuPriorityQueueSize. The total size of the inbound or outbound priority queues should be not more than 100. ')
h3cOnuCountTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 20), )
if mibBuilder.loadTexts: h3cOnuCountTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCountTable.setDescription(' This table contains statistics of ONU port. ')
h3cOnuCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuCountEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCountEntry.setDescription(' The entry of h3cOnuCountTable. ')
h3cOnuInCRCErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 20, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuInCRCErrPkts.setStatus('current')
if mibBuilder.loadTexts: h3cOnuInCRCErrPkts.setDescription(' The total number of frames received with bad CRC checksum. ')
h3cOnuOutDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 20, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuOutDroppedFrames.setStatus('current')
if mibBuilder.loadTexts: h3cOnuOutDroppedFrames.setDescription(' The total number of frames dropped because of buffer failure. ')
h3cEponOnuScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21))
h3cOnuPriorityQueueSizeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueSizeMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueSizeMinVal.setDescription(' The lower limit of queue size which is confined to h3cOnuQueueSize. ')
h3cOnuPriorityQueueSizeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueSizeMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueSizeMaxVal.setDescription(' The upper limit of queue size which is confined to h3cOnuQueueSize. ')
h3cOnuPriorityQueueBandwidthMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBandwidthMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueBandwidthMinVal.setDescription(' The lower limit of h3cOnuQueueMaxBandwidth. ')
h3cOnuPriorityQueueBandwidthMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBandwidthMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueBandwidthMaxVal.setDescription(' The upper limit of h3cOnuQueueMaxBandwidth. ')
h3cOnuPriorityQueueBurstsizeMinVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBurstsizeMinVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueBurstsizeMinVal.setDescription(' The lower limit of h3cOnuQueueMaxBurstsize. ')
h3cOnuPriorityQueueBurstsizeMaxVal = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPriorityQueueBurstsizeMaxVal.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPriorityQueueBurstsizeMaxVal.setDescription(' The upper limit of h3cOnuQueueMaxBurstsize. ')
h3cOnuUpdateByTypeNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 21, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeNextIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateByTypeNextIndex.setDescription(' Offer a free index of h3cOnuFirmwareUpdateByTypeTable. ')
h3cOnuQueueBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 22), )
if mibBuilder.loadTexts: h3cOnuQueueBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueBandwidthTable.setDescription(' This table contains specific bandwidth information of ONU priority queue. ')
h3cOnuQueueBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuQueueDirection"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuQueueId"))
if mibBuilder.loadTexts: h3cOnuQueueBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueBandwidthEntry.setDescription(' The entry of h3cOnuQueueBandwidthTable. ')
h3cOnuQueueMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueMaxBandwidth.setDescription(' The maximum bandwidth of specific ONU priority queue, measured in 100Kbps. ')
h3cOnuQueueMaxBurstsize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 22, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueueMaxBurstsize.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueueMaxBurstsize.setDescription(' The maximum burst size of specific ONU priority queue, measured in 64Bytes. ')
h3cOnuQueuePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 22, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuQueuePolicyStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuQueuePolicyStatus.setDescription(' true - enable bandwidth policy false - disable bandwidth policy The bandwidth administrative status of specific ONU priority queue. ')
h3cOnuIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23), )
if mibBuilder.loadTexts: h3cOnuIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIpAddressTable.setDescription(' ONU IP address table. ')
h3cOnuIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIpAddressEntry.setDescription(' The entry of h3cOnuIpAddressTable. ')
h3cOnuIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIpAddress.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIpAddress.setDescription(' The IP address assigned to the ONU. ')
h3cOnuIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIpAddressMask.setDescription(' The mask of IP address denoted by h3cOnuIpAddress. ')
h3cOnuIpAddressGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuIpAddressGateway.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIpAddressGateway.setDescription(' The gateway of IP address denoted by h3cOnuIpAddress. ')
h3cOnuDhcpallocate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDhcpallocate.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDhcpallocate.setDescription(' true(1) - ONU auto allocate IP address status enable. false(2) - ONU auto allocate IP address status disable. ')
h3cOnuManageVID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuManageVID.setStatus('current')
if mibBuilder.loadTexts: h3cOnuManageVID.setDescription(' The management VLAN of ONU denoted by h3cOnuManageVID. ')
h3cOnuManageVlanIntfS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 23, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuManageVlanIntfS.setStatus('current')
if mibBuilder.loadTexts: h3cOnuManageVlanIntfS.setDescription(' The management interface status of ONU denoted by h3cOnuManageVlanIntfS. ')
h3cOnuChipSetInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 24), )
if mibBuilder.loadTexts: h3cOnuChipSetInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuChipSetInfoTable.setDescription(' ONU vendor specific information of ONU. ')
h3cOnuChipSetInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 24, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuChipSetInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuChipSetInfoEntry.setDescription(' The entry of h3cOnuChipSetInfoTable. ')
h3cOnuChipSetVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 24, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetVendorId.setStatus('current')
if mibBuilder.loadTexts: h3cOnuChipSetVendorId.setDescription(" Chipset vendor ID, which identifies the ONU's PON chip vendor according JEDEC ID code. ")
h3cOnuChipSetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetModel.setStatus('current')
if mibBuilder.loadTexts: h3cOnuChipSetModel.setDescription(' Chip model, numbering(range from 0 to 0xFF) by the chip vendor. ')
h3cOnuChipSetRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetRevision.setStatus('current')
if mibBuilder.loadTexts: h3cOnuChipSetRevision.setDescription(' Chip revision. ')
h3cOnuChipSetDesignDate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 24, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuChipSetDesignDate.setStatus('current')
if mibBuilder.loadTexts: h3cOnuChipSetDesignDate.setDescription(' Chip design date. ')
h3cOnuCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25), )
if mibBuilder.loadTexts: h3cOnuCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCapabilityTable.setDescription(' Capability of ONU. ')
h3cOnuCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCapabilityEntry.setDescription(' The entry of the table h3cOnuCapabilityTable. ')
h3cOnuServiceSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 1), Bits().clone(namedValues=NamedValues(("geinterfacesupport", 0), ("feinterfacesupport", 1), ("voipservicesupport", 2), ("tdmservicesupport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuServiceSupported.setStatus('current')
if mibBuilder.loadTexts: h3cOnuServiceSupported.setDescription(' Services types supported by the ONU. These functional groups can be supported independently. geinterfacesupport - supporting (1)/not supporting(0) Gbit Ethernet GE interface. feinterfacesupport - supporting (1)/not supporting(0) 100M Ethernet FE interface.(maximum rate is 100M, without GEinterface) voipservicesupport - supporting (1)/not supporting(0)VoIP service. tdmservicesupport - supporting (1)/not supporting(0)TDM CES service. ')
h3cOnuGEPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuGEPortNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuGEPortNumber.setDescription(' The current gigabit ethernet ports number supported by the ONU. ')
h3cOnuFEPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFEPortNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFEPortNumber.setDescription(' the current fast ethernet ports number supported by the ONU. ')
h3cOnuPOTSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuPOTSPortNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPOTSPortNumber.setDescription(' The current POTS ports number supported by the ONU ')
h3cOnuE1PortsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuE1PortsNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuE1PortsNumber.setDescription(' The current E1 ports number supported by the ONU. ')
h3cOnuUpstreamQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuUpstreamQueueNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpstreamQueueNumber.setDescription(' The number of upstream queues supported by the ONU. ')
h3cOnuMaxUpstreamQueuePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMaxUpstreamQueuePerPort.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMaxUpstreamQueuePerPort.setDescription(' The number of maximum upstream queues per port of the ONU. ')
h3cOnuDownstreamQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuDownstreamQueueNumber.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDownstreamQueueNumber.setDescription(' The number of downstream queues supported by the ONU. ')
h3cOnuMaxDownstreamQueuePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMaxDownstreamQueuePerPort.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMaxDownstreamQueuePerPort.setDescription(' The number of maximum downstream queues per port of the ONU. ')
h3cOnuBatteryBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuBatteryBackup.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBatteryBackup.setDescription(' true(1) - ONU supports a reserve battery. false(2) - ONU does not support a reserve battery. ')
h3cOnuIgspFastLeaveSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuIgspFastLeaveSupported.setStatus('current')
if mibBuilder.loadTexts: h3cOnuIgspFastLeaveSupported.setDescription(' true(1) - ONU supports fast leave in igsp mode. false(2) - ONU does not support fast leave in igsp mode. ')
h3cOnuMCtrlFastLeaveSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 25, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuMCtrlFastLeaveSupported.setStatus('current')
if mibBuilder.loadTexts: h3cOnuMCtrlFastLeaveSupported.setDescription(' true(1) - ONU supports fast leave in multicast control mode. false(2) - ONU does not support fast leave in multicast control mode. ')
h3cOnuDbaReportTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 26), )
if mibBuilder.loadTexts: h3cOnuDbaReportTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDbaReportTable.setDescription(' This table defines the information of DBA(dynamic bandwidth allocation) report threshold contained in the MPCP report frames. ')
h3cOnuDbaReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuDbaReportQueueId"))
if mibBuilder.loadTexts: h3cOnuDbaReportEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDbaReportEntry.setDescription(' The entry of the table h3cOnuDbaReportTable. ')
h3cOnuDbaReportQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cOnuDbaReportQueueId.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDbaReportQueueId.setDescription(' The DBA report queue ID. ')
h3cOnuDbaReportThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDbaReportThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDbaReportThreshold.setDescription(' The threshold of the DBA report queue. the following is the queue ID and the related default threshold setting. 1 - 0 2 - 0 3 - 0 4 - 65535 5 - 65535 6 - 0 7 - 0 8 - 0 ')
h3cOnuDbaReportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuDbaReportStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuDbaReportStatus.setDescription(' enable -threshold configuration is active for the queue. disable -threshold configuration is not active for the queue. ')
h3cOnuCosToLocalPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 27), )
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceTable.setDescription('Table of map of the COS to local-precedence.')
h3cOnuCosToLocalPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 27, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuCosToLocalPrecedenceCosIndex"))
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceEntry.setDescription('Configuration information of map of the COS to local precedence.')
h3cOnuCosToLocalPrecedenceCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceCosIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceCosIndex.setDescription('Index of the map, obtains from packet cos value.')
h3cOnuCosToLocalPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: h3cOnuCosToLocalPrecedenceValue.setDescription('Value of local precedence.')
h3cEponOnuStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 28), )
if mibBuilder.loadTexts: h3cEponOnuStpPortTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuStpPortTable.setDescription('Table of ONU STP ports.')
h3cEponOnuStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 28, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cEponStpPortIndex"))
if mibBuilder.loadTexts: h3cEponOnuStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuStpPortEntry.setDescription('Configuration information of ONU STP ports.')
h3cEponStpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 144))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponStpPortIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponStpPortIndex.setDescription('The index of the STP ports.')
h3cEponStpPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 28, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponStpPortDescr.setStatus('current')
if mibBuilder.loadTexts: h3cEponStpPortDescr.setDescription('The description of the STP ports.')
h3cEponStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponStpPortState.setStatus('current')
if mibBuilder.loadTexts: h3cEponStpPortState.setDescription('The current state of the port (i.e. disabled, discarding, learning and forwarding).')
h3cOnuPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29), )
if mibBuilder.loadTexts: h3cOnuPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPhysicalTable.setDescription(' This table is used for getting ONU physical information. ')
h3cOnuPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cOnuPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuPhysicalEntry.setDescription(' The entry of the h3cOnuPhysicalTable. ')
h3cOnuBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuBridgeMac.setStatus('current')
if mibBuilder.loadTexts: h3cOnuBridgeMac.setDescription(' The bridge MAC address of ONU. ')
h3cOnuFirstPonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFirstPonMac.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirstPonMac.setDescription(' The MAC address of ONU first PON port. ')
h3cOnuFirstPonRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notExist", 1), ("absent", 2), ("offline", 3), ("silent", 4), ("down", 5), ("up", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuFirstPonRegState.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirstPonRegState.setDescription(' The register state of ONU first PON port. ')
h3cOnuSecondPonMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSecondPonMac.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSecondPonMac.setDescription(' The MAC address of ONU second PON port. ')
h3cOnuSecondPonRegState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notExist", 1), ("absent", 2), ("offline", 3), ("silent", 4), ("down", 5), ("up", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSecondPonRegState.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSecondPonRegState.setDescription(' The register state of ONU second PON port. ')
h3cOnuSmlkTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30), )
if mibBuilder.loadTexts: h3cOnuSmlkTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkTable.setDescription(' This table is used for getting ONU SMLK information. ')
h3cOnuSmlkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuSmlkGroupID"))
if mibBuilder.loadTexts: h3cOnuSmlkEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkEntry.setDescription(' The entry of the h3cOnuSmlkTable. ')
h3cOnuSmlkGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkGroupID.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkGroupID.setDescription(' The SMLK group ID of ONU. ')
h3cOnuSmlkFirstPonRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkFirstPonRole.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkFirstPonRole.setDescription(' The role of ONU first PON port in a SMLK group. ')
h3cOnuSmlkFirstPonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("down", 3), ("null", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkFirstPonStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkFirstPonStatus.setDescription(' The transmitting status of ONU first PON port in a SMLK group. ')
h3cOnuSmlkSecondPonRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("null", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkSecondPonRole.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkSecondPonRole.setDescription(' The role of ONU second PON port in a SMLK group. ')
h3cOnuSmlkSecondPonStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("down", 3), ("null", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuSmlkSecondPonStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkSecondPonStatus.setDescription(' The transmitting status of ONU second PON port in a SMLK group. ')
h3cOnuRS485PropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31), )
if mibBuilder.loadTexts: h3cOnuRS485PropertiesTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485PropertiesTable.setDescription('Property table.')
h3cOnuRS485PropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuRS485SerialIndex"))
if mibBuilder.loadTexts: h3cOnuRS485PropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485PropertiesEntry.setDescription('The entry of property table.')
h3cOnuRS485SerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cOnuRS485SerialIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SerialIndex.setDescription('The index of serial port.')
h3cOnuRS485BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("baudRate300", 1), ("baudRate600", 2), ("baudRate1200", 3), ("baudRate2400", 4), ("baudRate4800", 5), ("baudRate9600", 6), ("baudRate19200", 7), ("baudRate38400", 8), ("baudRate57600", 9), ("baudRate115200", 10))).clone('baudRate9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485BaudRate.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485BaudRate.setDescription('The port baud rate.')
h3cOnuRS485DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("six", 2), ("seven", 3), ("eight", 4))).clone('eight')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485DataBits.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485DataBits.setDescription('The port number of data bits in a character.')
h3cOnuRS485Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485Parity.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485Parity.setDescription('The port sense of a character parity bit.')
h3cOnuRS485StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3))).clone('one')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485StopBits.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485StopBits.setDescription('The port number of stop bits.')
h3cOnuRS485FlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("xonOrxoff", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485FlowControl.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485FlowControl.setDescription("The port type of input flow control. 'none' indicates no flow control at this level. 'hardware' indicates using hardware signals. 'xonOrxoff' indicates using software function.")
h3cOnuRS485TXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485TXOctets.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485TXOctets.setDescription('The number of output octets about the port. The unit is byte.')
h3cOnuRS485RXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485RXOctets.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485RXOctets.setDescription('The number of input octets about the port. The unit is byte.')
h3cOnuRS485TXErrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485TXErrOctets.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485TXErrOctets.setDescription('The number of output error octets about the port. The unit is byte.')
h3cOnuRS485RXErrOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485RXErrOctets.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485RXErrOctets.setDescription('The number of input error octets about the port. The unit is byte.')
h3cOnuRS485ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("counting", 1), ("clear", 2))).clone('counting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cOnuRS485ResetStatistics.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485ResetStatistics.setDescription('Reset the counters to zero, including h3cOnuRS485TXOctets, h3cOnuRS485RXOctets, h3cOnuRS485TXErrOctets and h3cOnuRS485RXErrOctets.')
h3cOnuRS485SessionSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 32), )
if mibBuilder.loadTexts: h3cOnuRS485SessionSummaryTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionSummaryTable.setDescription('Session summary table.')
h3cOnuRS485SessionSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 32, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuRS485SerialIndex"))
if mibBuilder.loadTexts: h3cOnuRS485SessionSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionSummaryEntry.setDescription('The entry of session summary table.')
h3cOnuRS485SessionMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485SessionMaxNum.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionMaxNum.setDescription('The max session number of every serial port which can be supported.')
h3cOnuRS485SessionNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485SessionNextIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionNextIndex.setDescription('The next valid index used for creating a new session raw. When there is no valid index left, it will return 0. ')
h3cOnuRS485SessionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33), )
if mibBuilder.loadTexts: h3cOnuRS485SessionTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionTable.setDescription('RS485 raw session table. Data received from RS485 will be sent to the destination by raw sockets. ')
h3cOnuRS485SessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuRS485SerialIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuRS485SessionIndex"))
if mibBuilder.loadTexts: h3cOnuRS485SessionEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionEntry.setDescription('The entry of session table.')
h3cOnuRS485SessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: h3cOnuRS485SessionIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionIndex.setDescription('Raw session index.')
h3cOnuRS485SessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcpClient", 2), ("tcpServer", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionType.setDescription('The type of a session. A session can use UDP socket, TCP socket as a client, or TCP socket as a server.')
h3cOnuRS485SessionAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionAddType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionAddType.setDescription('This object indicates the transport type of the address contained in h3cOnuRS485SessionRemoteIP object.')
h3cOnuRS485SessionRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionRemoteIP.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionRemoteIP.setDescription("The IP of remote landing. When session type is 'udp', this is the peer IP. When session type is 'tcpClient', this is the server IP. When session type is 'tcpServer', this is invalid. ")
h3cOnuRS485SessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionRemotePort.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionRemotePort.setDescription("The port of remote landing. When session type is 'udp', this is the peer port. When session type is 'tcpClient', this is the server port. When session type is 'tcpServer', this is invalid. ")
h3cOnuRS485SessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionLocalPort.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionLocalPort.setDescription("Local socket port. When session type is 'udp', this is local UDP socket port. When session type is 'tcpClient', this is invalid. When session type is 'tcpServer', this is the local port which will be listened. ")
h3cOnuRS485SessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 33, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuRS485SessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionRowStatus.setDescription('The status used for creating, modifying, and deleting instances of the columnar objects in raw session table.')
h3cOnuRS485SessionErrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 34), )
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfoTable.setDescription('Error information table. When failed to create a session, error information can be got from this table.')
h3cOnuRS485SessionErrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuRS485SerialIndex"), (0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuRS485SessionIndex"))
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfoEntry.setDescription('The entry of error information table.')
h3cOnuRS485SessionErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 5, 34, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfo.setStatus('current')
if mibBuilder.loadTexts: h3cOnuRS485SessionErrInfo.setDescription("Error information string. When a response with 'noCreeation' for row creation in table h3cOnuRS485SessionTable, the error reason can be got from this object.")
h3cEponBatchOperationBySlotTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 1), )
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotTable.setDescription(' This table is used for batch operation by slot. ')
h3cEponBatchOperationBySlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cEponBatchOperationBySlotIndex"))
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotEntry.setDescription(' The entry of the h3cEponBatchOperationBySlotTable. ')
h3cEponBatchOperationBySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotIndex.setDescription(' The EPON board index. ')
h3cEponBatchOperationBySlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 10))).clone(namedValues=NamedValues(("resetUnknown", 1), ("updateDba", 9), ("updateONU", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotType.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotType.setDescription(' The types of batch operation by slot: 1 - resetUnknown, the object value is not set. 9 - updateDba, update OLT DBA algorithm. Config the MIB object module h3cEponDbaUpdateFileName. 10 - updateONU, update ONU firmware. Config the MIB object module h3cEponOnuUpdateFileName with the filename of ONU firmware first. ')
h3cEponBatchOperationBySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("batOpBySlot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationBySlot.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationBySlot.setDescription(' Execute batch operation. ')
h3cEponBatchOperationBySlotResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotResult.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationBySlotResult.setDescription(' The result of batch operation. 0xFFFF - other, general error. 1 - working, operation is not completed. 2 - successful, completed successfully. 3 - failed because the DBA source file does not exist. 4 - failed because the ONU firmware file does not exist. 5 - failed because of not set the filename of DBA source. 6 - failed because of not set the filename of ONU firmware. 7 - failed because of not set slottype. ')
h3cEponBatchOperationByOLTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 2), )
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTTable.setDescription(' This table is used for batch operation by OLT. ')
h3cEponBatchOperationByOLTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTEntry.setDescription(' The entry of the h3cEponBatchOperationByOLTTable. ')
h3cEponBatchOperationByOLTType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5))).clone(namedValues=NamedValues(("resetUnknown", 1), ("updateONU", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTType.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTType.setDescription(' The types of batch operation by OLT(operation for all ONUs in the OLT): 1 -- resetUnknown, the object value is not set. 5 -- updateONU, update ONU firmware. configure the MIB object module h3cEponOnuUpdateFileName with the filename of ONU firmware first. ')
h3cEponBatchOperationByOLT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("batOpByOlt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cEponBatchOperationByOLT.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationByOLT.setDescription(' Execute batch operation. ')
h3cEponBatchOperationByOLTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTResult.setStatus('current')
if mibBuilder.loadTexts: h3cEponBatchOperationByOLTResult.setDescription(' The result of batch operation: 0xFFFF -- other, gernal error. 1 -- working, operation is not completed. 2 -- successful, operation completed successfully. 4 -- failed because the ONU firmware file does not exist. 6 -- failed because of not set the filename of ONU firmware. 7 -- failed because of not set olttype. ')
h3cOnuFirmwareUpdateByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 3), )
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateByTypeTable.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateByTypeTable.setDescription(' This table is used to update ONU by ONU type. ')
h3cOnuFirmwareUpdateByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-EPON-MIB", "h3cOnuUpdateByOnuTypeIndex"))
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateByTypeEntry.setStatus('current')
if mibBuilder.loadTexts: h3cOnuFirmwareUpdateByTypeEntry.setDescription(' The entry of the h3cOnuFirmwareUpdateByTypeTable. ')
h3cOnuUpdateByOnuTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cOnuUpdateByOnuTypeIndex.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateByOnuTypeIndex.setDescription(' The type and file relationship table entry index. ')
h3cOnuUpdateByTypeOnuType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeOnuType.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateByTypeOnuType.setDescription(' The type of ONUs. ')
h3cOnuUpdateByTypeFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeFileName.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateByTypeFileName.setDescription(' The file to be updated for the type of ONUs. ')
h3cOnuUpdateByTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 6, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cOnuUpdateByTypeRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cOnuUpdateByTypeRowStatus.setDescription(' The status of this table entry. Only createAndGo and destroy actions are supported. ')
h3cEponErrorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7))
h3cEponSoftwareErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponSoftwareErrorCode.setStatus('current')
if mibBuilder.loadTexts: h3cEponSoftwareErrorCode.setDescription(' OLT software error code. ')
h3cOamVendorSpecificAlarmCode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOamVendorSpecificAlarmCode.setStatus('current')
if mibBuilder.loadTexts: h3cOamVendorSpecificAlarmCode.setDescription(' Alarm code of the vendor. ')
h3cEponOnuRegErrorMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 3), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOnuRegErrorMacAddr.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuRegErrorMacAddr.setDescription(' The MAC of ONU registered error. ')
h3cOamEventLogType = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOamEventLogType.setStatus('current')
if mibBuilder.loadTexts: h3cOamEventLogType.setDescription(' The type of event that generated this entry in the event log. ')
h3cOamEventLogLocation = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOamEventLogLocation.setStatus('current')
if mibBuilder.loadTexts: h3cOamEventLogLocation.setDescription(' Whether this event occurred locally, or was received from the OAM peer via Ethernet OAM. ')
h3cEponLoopbackPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponLoopbackPortIndex.setStatus('current')
if mibBuilder.loadTexts: h3cEponLoopbackPortIndex.setDescription(' The index of port which generate loop back event. ')
h3cEponLoopbackPortDescr = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponLoopbackPortDescr.setStatus('current')
if mibBuilder.loadTexts: h3cEponLoopbackPortDescr.setDescription(' A textual string containing information about the port generated loop back event. ')
h3cOltPortAlarmLlidMisFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 8), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisFrames.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmLlidMisFrames.setDescription(' the amount of mismatched frames about the LLID mismatch alarm. ')
h3cOltPortAlarmBer = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 9), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOltPortAlarmBer.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmBer.setDescription(' error bit rate. ')
h3cOltPortAlarmFer = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cOltPortAlarmFer.setStatus('current')
if mibBuilder.loadTexts: h3cOltPortAlarmFer.setDescription(' error frames rate. ')
h3cEponOnuRegSilentMac = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOnuRegSilentMac.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuRegSilentMac.setDescription(' The MAC of silent ONU. ')
h3cEponOperationResult = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOperationResult.setStatus('current')
if mibBuilder.loadTexts: h3cEponOperationResult.setDescription(' The result of EPON operation. ')
h3cEponOnuLaserState = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 7, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("laserAlwaysOn", 2), ("signalDegradation", 3), ("endOfLife", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cEponOnuLaserState.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuLaserState.setDescription(' The state of ONU laser. ')
h3cEponTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8))
h3cEponTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0))
h3cEponPortAlarmBerTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmBerDirect"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmBer"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmBerThreshold"))
if mibBuilder.loadTexts: h3cEponPortAlarmBerTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponPortAlarmBerTrap.setDescription(' A h3cEponPortAlarmBerTrap notification is sent when a BER threshold crossing event is detected. ')
h3cEponPortAlarmFerTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmFerDirect"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmFer"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmFerThreshold"))
if mibBuilder.loadTexts: h3cEponPortAlarmFerTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponPortAlarmFerTrap.setDescription(' A h3cEponPortAlarmFerTrap notification is sent when a frame error rate threshold crossing event is detected. ')
h3cEponErrorLLIDFrameTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmLlidMisFrames"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmLlidMismatchThreshold"))
if mibBuilder.loadTexts: h3cEponErrorLLIDFrameTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponErrorLLIDFrameTrap.setDescription(' A h3cEponErrorLLIDFrameTrap notification is sent when a LLID mismatched frames rate threshold crossing event is detected. ')
h3cEponLoopBackEnableTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponLoopbackPortIndex"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponLoopbackPortDescr"))
if mibBuilder.loadTexts: h3cEponLoopBackEnableTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponLoopBackEnableTrap.setDescription(' A h3cEponLoopBackEnableTrap notification is sent when the loop back command is committed. ')
h3cEponOnuRegistrationErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponOnuRegErrorMacAddr"))
if mibBuilder.loadTexts: h3cEponOnuRegistrationErrTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuRegistrationErrTrap.setDescription(' A h3cEponOnuRegistrationErrTrap notification is sent when a ONU register failed. ')
h3cEponOamDisconnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOamDisconnectionTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOamDisconnectionTrap.setDescription(" A h3cEponOamDisconnectionTrap notification is sent when LLID's OAM link is disconnected. ")
h3cEponEncryptionKeyErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 7)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponEncryptionKeyErrTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponEncryptionKeyErrTrap.setDescription(" A h3cEponEncryptionKeyErrTrap notification is sent when LLID's encryption key is bad. ")
h3cEponRemoteStableTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponRemoteStableTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponRemoteStableTrap.setDescription(' A h3cEponRemoteStableTrap notification is sent when remote Data Terminal Equipment(DTE) has not seen or is unsatisfied with local state information. ')
h3cEponLocalStableTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponLocalStableTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponLocalStableTrap.setDescription(' A h3cEponLocalStableTrap notification is sent when DTE has not seen or is unsatisfied with remote state information. ')
h3cEponOamVendorSpecificTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOamVendorSpecificAlarmCode"))
if mibBuilder.loadTexts: h3cEponOamVendorSpecificTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOamVendorSpecificTrap.setDescription(' A h3cEponOamVendorSpecificTrap notification is sent when system vendor specific OAM alarm raised. ')
h3cEponSoftwareErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 11)).setObjects(("A3COM-HUAWEI-DEVICE-MIB", "hwLswFrameIndex"), ("A3COM-HUAWEI-DEVICE-MIB", "hwLswSlotIndex"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponSoftwareErrorCode"))
if mibBuilder.loadTexts: h3cEponSoftwareErrTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponSoftwareErrTrap.setDescription(' A h3cEponSoftwareErrTrap notification is sent when a PAS-SOFT internal error occurs. ')
h3cEponPortAlarmBerRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 12)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmBerDirect"))
if mibBuilder.loadTexts: h3cEponPortAlarmBerRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponPortAlarmBerRecoverTrap.setDescription(' A h3cEponPortAlarmBerRecoverTrap notification is sent when a BER threshold crossing event is detected and then recovered. ')
h3cEponPortAlarmFerRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 13)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOltPortAlarmFerDirect"))
if mibBuilder.loadTexts: h3cEponPortAlarmFerRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponPortAlarmFerRecoverTrap.setDescription(' A h3cEponPortAlarmFerRecoverTrap notification is sent when a frame error rate threshold crossing event is detected and then recoverd. ')
h3cEponErrorLLIDFrameRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 14)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponErrorLLIDFrameRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponErrorLLIDFrameRecoverTrap.setDescription(' A h3cEponErrorLLIDFrameRecoverTrap notification is sent when a LLID mismatched frames rate threshold crossing event is detected and then recoverd. ')
h3cEponLoopBackEnableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 15)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponLoopBackEnableRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponLoopBackEnableRecoverTrap.setDescription(' A h3cEponLoopBackEnableRecoverTrap notification is sent when the loop back is detected and then recoverd. ')
h3cEponOnuRegistrationErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 16)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponOnuRegErrorMacAddr"))
if mibBuilder.loadTexts: h3cEponOnuRegistrationErrRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuRegistrationErrRecoverTrap.setDescription(' A h3cEponOnuRegistrationErrRecoverTrap notification is sent when an ONU register failed and then register successful again. ')
h3cEponOamDisconnectionRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 17)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOamDisconnectionRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOamDisconnectionRecoverTrap.setDescription(" A h3cEponOamDisconnectionRecoverTrap notification is sent when LLID's OAM link is disconnected and then connected. ")
h3cEponEncryptionKeyErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 18)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponEncryptionKeyErrRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponEncryptionKeyErrRecoverTrap.setDescription(" A h3cEponEncryptionKeyErrRecoverTrap notification is sent when LLID's encryption key is bad and then right. ")
h3cEponRemoteStableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 19)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponRemoteStableRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponRemoteStableRecoverTrap.setDescription(' A h3cEponRemoteStableRecoverTrap notification is sent when remote DTE has not seen or is unsatisfied with local state information and then is realized. ')
h3cEponLocalStableRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 20)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponLocalStableRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponLocalStableRecoverTrap.setDescription(' A h3cEponLocalStableRecoverTrap notification is sent when DTE has not seen or is unsatisfied with remote state information and then is realized. ')
h3cEponOamVendorSpecificRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 21)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOamVendorSpecificAlarmCode"))
if mibBuilder.loadTexts: h3cEponOamVendorSpecificRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOamVendorSpecificRecoverTrap.setDescription(' A h3cEponOamVendorSpecificRecoverTrap notification is sent when system vendor specific OAM alarm is detected and then recovered. ')
h3cEponSoftwareErrRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 22)).setObjects(("A3COM-HUAWEI-DEVICE-MIB", "hwLswFrameIndex"), ("A3COM-HUAWEI-DEVICE-MIB", "hwLswSlotIndex"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponSoftwareErrorCode"))
if mibBuilder.loadTexts: h3cEponSoftwareErrRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponSoftwareErrRecoverTrap.setDescription(' A h3cEponSoftwareErrRecoverTrap notification is sent when a PAS-SOFT internal error is detected and then recovered. ')
h3cDot3OamThresholdRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 23)).setObjects(("IF-MIB", "ifIndex"), ("A3COM-HUAWEI-EPON-MIB", "h3cOamEventLogType"), ("A3COM-HUAWEI-EPON-MIB", "h3cOamEventLogLocation"))
if mibBuilder.loadTexts: h3cDot3OamThresholdRecoverEvent.setStatus('current')
if mibBuilder.loadTexts: h3cDot3OamThresholdRecoverEvent.setDescription(' A h3cDot3OamThresholdRecoverEvent notification is sent when h3cDot3OamThresholdEvent is detected and then recoverd. ')
h3cDot3OamNonThresholdRecoverEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 24)).setObjects(("IF-MIB", "ifIndex"), ("A3COM-HUAWEI-EPON-MIB", "h3cOamEventLogType"), ("A3COM-HUAWEI-EPON-MIB", "h3cOamEventLogLocation"))
if mibBuilder.loadTexts: h3cDot3OamNonThresholdRecoverEvent.setStatus('current')
if mibBuilder.loadTexts: h3cDot3OamNonThresholdRecoverEvent.setDescription(' A h3cDot3OamNonThresholdRecoverEvent notification is sent when h3cDot3OamNonThresholdEvent is detected and then recoverd. ')
h3cEponOnuRegExcessTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 25)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOnuRegExcessTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuRegExcessTrap.setDescription(' A h3cEponOnuRegExcessTrap notification is sent when the number of registered ONUs exceeds the limit. ')
h3cEponOnuRegExcessRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 26)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOnuRegExcessRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuRegExcessRecoverTrap.setDescription(' A h3cEponOnuRegExcessRecoverTrap notification is sent when h3cEponOnuRegExcessTrap is detected and then recoverd. ')
h3cEponOnuPowerOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 27)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOnuPowerOffTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuPowerOffTrap.setDescription(' A h3cEponOnuPowerOffTrap notification is sent when ONU is power off. ')
h3cEponOltSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 28)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOltSwitchoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOltSwitchoverTrap.setDescription(' A h3cEponOltSwithoverTrap notification is sent when OLT switchover is detected. ')
h3cEponOltDFETrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 29)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOltDFETrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOltDFETrap.setDescription(' A h3cEponOltDFETrap notification is sent when there was a serious problem(device fatal error) on OLT. ')
h3cEponOltDFERecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 30)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: h3cEponOltDFERecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOltDFERecoverTrap.setDescription(' A h3cEponOltDFERecoverTrap notification is sent when device fatal error is detected and then recoverd. ')
h3cEponOnuSilenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 31)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponOnuRegSilentMac"))
if mibBuilder.loadTexts: h3cEponOnuSilenceTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuSilenceTrap.setDescription(' The h3cEponOnuSilenceTrap notification is sent when an unbound ONU try to register to an OLT. ')
h3cEponOnuSilenceRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 32)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponOnuRegSilentMac"))
if mibBuilder.loadTexts: h3cEponOnuSilenceRecoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuSilenceRecoverTrap.setDescription(' The h3cEponOnuSilenceRecoverTrap notification is sent when a silent ONU is bound in the OLT or the aging onu mac address is timeout. ')
h3cEponOnuUpdateResultTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 33)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuBindMacAddress"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuUpdateResult"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuRegType"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuUpdateFileName"))
if mibBuilder.loadTexts: h3cEponOnuUpdateResultTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuUpdateResultTrap.setDescription(' A h3cEponUpdateResultTrap notification is sent when an ONU reported its firmware update result. ')
h3cEponOnuAutoBindTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 34)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuBindMacAddress"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponOperationResult"))
if mibBuilder.loadTexts: h3cEponOnuAutoBindTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuAutoBindTrap.setDescription(' A h3cEponOnuAutoBindTrap notification is sent when a silent ONU is bound automatically. ')
h3cEponOnuPortStpStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 35)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponStpPortIndex"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponStpPortDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponStpPortState"))
if mibBuilder.loadTexts: h3cEponOnuPortStpStateTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuPortStpStateTrap.setDescription(' A h3cEponOnuPortStpStateTrap notification is sent when a port turns into another state in STP environment. ')
h3cEponOnuLaserFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 36)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cEponOnuLaserState"))
if mibBuilder.loadTexts: h3cEponOnuLaserFailedTrap.setStatus('current')
if mibBuilder.loadTexts: h3cEponOnuLaserFailedTrap.setDescription(' A h3cEponOnuLaserFailedTrap notification is sent when an ONU has trouble with laser, such as laser constantly turned on, signal degradation or optics EOL (End of Life). ')
h3cOnuSmlkSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 8, 0, 37)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuSmlkGroupID"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuSmlkFirstPonStatus"), ("A3COM-HUAWEI-EPON-MIB", "h3cOnuSmlkSecondPonStatus"))
if mibBuilder.loadTexts: h3cOnuSmlkSwitchoverTrap.setStatus('current')
if mibBuilder.loadTexts: h3cOnuSmlkSwitchoverTrap.setDescription(' A h3cOnuSmlkSwitchoverTrap notification is sent when an ONU SMLK switchover is detected. ')
h3cEponStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 9))
h3cEponStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 9, 1), )
if mibBuilder.loadTexts: h3cEponStatTable.setStatus('current')
if mibBuilder.loadTexts: h3cEponStatTable.setDescription(' This table contains line code error statistics of epon port. ')
h3cEponStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cEponStatEntry.setStatus('current')
if mibBuilder.loadTexts: h3cEponStatEntry.setDescription(' The entry of h3cEponStatTable. ')
h3cEponStatFER = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 9, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponStatFER.setStatus('current')
if mibBuilder.loadTexts: h3cEponStatFER.setDescription(' The frame error rate of epon port, measured in 1e-9 unit. ')
h3cEponStatBER = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 42, 1, 9, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cEponStatBER.setStatus('current')
if mibBuilder.loadTexts: h3cEponStatBER.setDescription(' The bit error rate of epon port, measured in 1e-9 unit. ')
mibBuilder.exportSymbols("A3COM-HUAWEI-EPON-MIB", h3cEponAutoUpdateTable=h3cEponAutoUpdateTable, h3cOnuSlaManTable=h3cOnuSlaManTable, h3cOltDbaDiscoveryLength=h3cOltDbaDiscoveryLength, h3cEponMonitorCycleMaxVal=h3cEponMonitorCycleMaxVal, h3cOnuSmlkGroupID=h3cOnuSmlkGroupID, h3cOnuIpAddressGateway=h3cOnuIpAddressGateway, h3cOnuPriorityQueueBurstsizeMinVal=h3cOnuPriorityQueueBurstsizeMinVal, h3cEponAutoUpdateFileName=h3cEponAutoUpdateFileName, h3cOltDbaDiscoveryLengthMaxVal=h3cOltDbaDiscoveryLengthMaxVal, h3cOnuPacketManEntry=h3cOnuPacketManEntry, h3cEponOperationResult=h3cEponOperationResult, h3cOnuRS485SessionAddType=h3cOnuRS485SessionAddType, h3cEponErrorInfo=h3cEponErrorInfo, h3cOltPortAlarmLlidMisMaxVal=h3cOltPortAlarmLlidMisMaxVal, h3cEponRemoteStableRecoverTrap=h3cEponRemoteStableRecoverTrap, h3cOnuDownStreamHighPriorityFirst=h3cOnuDownStreamHighPriorityFirst, h3cOnuRS485RXOctets=h3cOnuRS485RXOctets, h3cOltPortAlarmLlidMisFrames=h3cOltPortAlarmLlidMisFrames, h3cOnuVendorId=h3cOnuVendorId, h3cOnuSlaMinBandWidth=h3cOnuSlaMinBandWidth, h3cOnuSlaPriorityClass=h3cOnuSlaPriorityClass, h3cOnuOutDroppedFrames=h3cOnuOutDroppedFrames, h3cOnuSecondPonMac=h3cOnuSecondPonMac, h3cOltSysManEntry=h3cOltSysManEntry, h3cOnuEEPROMVersion=h3cOnuEEPROMVersion, h3cOnuBindMacAddress=h3cOnuBindMacAddress, h3cEponPortAlarmBerRecoverTrap=h3cEponPortAlarmBerRecoverTrap, h3cEponOnuPortStpStateTrap=h3cEponOnuPortStpStateTrap, h3cOnuP2PBandWidthPolicy=h3cOnuP2PBandWidthPolicy, h3cOnuMacAddrInfoTable=h3cOnuMacAddrInfoTable, h3cOnuUpdateByTypeNextIndex=h3cOnuUpdateByTypeNextIndex, h3cOnuFirmwareUpdateByTypeEntry=h3cOnuFirmwareUpdateByTypeEntry, h3cOnuSlaMaxBandWidth=h3cOnuSlaMaxBandWidth, h3cOnuSmlkFirstPonStatus=h3cOnuSmlkFirstPonStatus, h3cOnuHostType=h3cOnuHostType, h3cOnuReAuthorize=h3cOnuReAuthorize, h3cEponSysManEntry=h3cEponSysManEntry, h3cOnuCountEntry=h3cOnuCountEntry, h3cOnuSmlkSecondPonStatus=h3cOnuSmlkSecondPonStatus, h3cOnuSysManEntry=h3cOnuSysManEntry, h3cEponOuiIndexNext=h3cEponOuiIndexNext, h3cDot3OamThresholdRecoverEvent=h3cDot3OamThresholdRecoverEvent, h3cOnuRS485SessionLocalPort=h3cOnuRS485SessionLocalPort, h3cOnuRegType=h3cOnuRegType, h3cEponSysMan=h3cEponSysMan, h3cOnuQueueMaxBurstsize=h3cOnuQueueMaxBurstsize, h3cOnuSmlkEntry=h3cOnuSmlkEntry, h3cOltPortAlarmFerEnabled=h3cOltPortAlarmFerEnabled, h3cOnuLlid=h3cOnuLlid, h3cOltPortAlarmLlidMisMinVal=h3cOltPortAlarmLlidMisMinVal, h3cOnuBandWidthTable=h3cOnuBandWidthTable, h3cOnuDownStreamBandWidthPolicy=h3cOnuDownStreamBandWidthPolicy, h3cEponLoopbackPortDescr=h3cEponLoopbackPortDescr, h3cOnuBindType=h3cOnuBindType, h3cOnuProtocolTable=h3cOnuProtocolTable, h3cEponBatchOperationBySlotIndex=h3cEponBatchOperationBySlotIndex, h3cOnuPriorityQueueBandwidthMinVal=h3cOnuPriorityQueueBandwidthMinVal, h3cOltHardMinorVersion=h3cOltHardMinorVersion, h3cOnuPriorityQueueBandwidthMaxVal=h3cOnuPriorityQueueBandwidthMaxVal, h3cOnuCountTable=h3cOnuCountTable, h3cOltDbaUpdateResult=h3cOltDbaUpdateResult, h3cOnuDbaReportThreshold=h3cOnuDbaReportThreshold, h3cEponOnuUpdateFileName=h3cEponOnuUpdateFileName, h3cOnuE1PortsNumber=h3cOnuE1PortsNumber, h3cOnuFecStatus=h3cOnuFecStatus, h3cOltPortAlarmFerMaxVal=h3cOltPortAlarmFerMaxVal, h3cOnuChipSetRevision=h3cOnuChipSetRevision, h3cEponOnuLaserState=h3cEponOnuLaserState, h3cEponTrapPrefix=h3cEponTrapPrefix, h3cOnuRS485BaudRate=h3cOnuRS485BaudRate, h3cOnuBandWidthEntry=h3cOnuBandWidthEntry, h3cOnuGrantFifoDep=h3cOnuGrantFifoDep, h3cOnuOpticalPowerReceivedByOlt=h3cOnuOpticalPowerReceivedByOlt, h3cOnuLinkTestFrameSize=h3cOnuLinkTestFrameSize, h3cOltUsingOnuRowStatus=h3cOltUsingOnuRowStatus, h3cOnuQueueBandwidthEntry=h3cOnuQueueBandwidthEntry, h3cEponMulticastVlanId=h3cEponMulticastVlanId, h3cOltPortAlarmFerThreshold=h3cOltPortAlarmFerThreshold, h3cOnuCosToLocalPrecedenceEntry=h3cOnuCosToLocalPrecedenceEntry, h3cOnuIpAddressMask=h3cOnuIpAddressMask, h3cOltLaserOnTimeMaxVal=h3cOltLaserOnTimeMaxVal, h3cOnuFirmwareUpdateEntry=h3cOnuFirmwareUpdateEntry, h3cEponStatFER=h3cEponStatFER, h3cOltDbaVersion=h3cOltDbaVersion, h3cOnuBindMacAddrEntry=h3cOnuBindMacAddrEntry, h3cOltDbaManEntry=h3cOltDbaManEntry, h3cOnuProtocolEntry=h3cOnuProtocolEntry, h3cOnuLinkTestVlanTag=h3cOnuLinkTestVlanTag, h3cOnuRS485FlowControl=h3cOnuRS485FlowControl, h3cOnuPortIsolateEnable=h3cOnuPortIsolateEnable, h3cEponBatchOperationMan=h3cEponBatchOperationMan, h3cOnuDhcpsnoopingOption82=h3cOnuDhcpsnoopingOption82, h3cEponOnuScalarGroup=h3cEponOnuScalarGroup, h3cOnuRS485ResetStatistics=h3cOnuRS485ResetStatistics, h3cOnuQueuePolicyStatus=h3cOnuQueuePolicyStatus, h3cOltEnableDiscardPacket=h3cOltEnableDiscardPacket, h3cEponOnuSilenceRecoverTrap=h3cEponOnuSilenceRecoverTrap, h3cEponTrap=h3cEponTrap, h3cEponOuiRowStatus=h3cEponOuiRowStatus, h3cOltPortAlarmEncryptionKeyEnabled=h3cOltPortAlarmEncryptionKeyEnabled, h3cOnuSlaBandWidthStepVal=h3cOnuSlaBandWidthStepVal, h3cOamVendorSpecificAlarmCode=h3cOamVendorSpecificAlarmCode, h3cOnuQueueDirection=h3cOnuQueueDirection, h3cEponStpPortDescr=h3cEponStpPortDescr, h3cOltAgcLockTime=h3cOltAgcLockTime, h3cOnuDbaReportQueueSetNumber=h3cOnuDbaReportQueueSetNumber, h3cEponOnuRegistrationErrTrap=h3cEponOnuRegistrationErrTrap, h3cOnuSmlkFirstPonRole=h3cOnuSmlkFirstPonRole, h3cOnuQueueId=h3cOnuQueueId, h3cEponStatTable=h3cEponStatTable, h3cOltDbaCycleLength=h3cOltDbaCycleLength, h3cOnuFirstPonMac=h3cOnuFirstPonMac, h3cOnuBindMacAddrTable=h3cOnuBindMacAddrTable, h3cEponMsgTimeOut=h3cEponMsgTimeOut, h3cEponMulticastControlEntry=h3cEponMulticastControlEntry, h3cOnuLaserOnTime=h3cOnuLaserOnTime, h3cOnuDhcpsnooping=h3cOnuDhcpsnooping, PYSNMP_MODULE_ID=h3cEponMibObjects, h3cEponLocalStableRecoverTrap=h3cEponLocalStableRecoverTrap, h3cOltFirmMinorVersion=h3cOltFirmMinorVersion, h3cOnuChipSetInfoEntry=h3cOnuChipSetInfoEntry, h3cEponOnuLaserFailedTrap=h3cEponOnuLaserFailedTrap, h3cOltMacAddress=h3cOltMacAddress, h3cEponOltMan=h3cEponOltMan, h3cOltSysManTable=h3cOltSysManTable, h3cEponPortAlarmFerTrap=h3cEponPortAlarmFerTrap, h3cOnuMCtrlFastLeaveSupported=h3cOnuMCtrlFastLeaveSupported, h3cOnuRS485SessionSummaryEntry=h3cOnuRS485SessionSummaryEntry, h3cOltDbaCycleLengthMaxVal=h3cOltDbaCycleLengthMaxVal, h3cOltUsingOnuNum=h3cOltUsingOnuNum, h3cEponOnuRegExcessRecoverTrap=h3cEponOnuRegExcessRecoverTrap, h3cEponMsgLoseNumMaxVal=h3cEponMsgLoseNumMaxVal, h3cEponOnuUpdateResultTrap=h3cEponOnuUpdateResultTrap, h3cOltPortAlarmVendorSpecificEnabled=h3cOltPortAlarmVendorSpecificEnabled, h3cOltPortAlarmLocalStableEnabled=h3cOltPortAlarmLocalStableEnabled, h3cEponAutoBindStatus=h3cEponAutoBindStatus, h3cOnuPCBVersion=h3cOnuPCBVersion, h3cEponErrorLLIDFrameRecoverTrap=h3cEponErrorLLIDFrameRecoverTrap, h3cOltAgcCdrTime=h3cOltAgcCdrTime, h3cEponBatchOperationByOLT=h3cEponBatchOperationByOLT, h3cOnuLinkTestResultRetErrFrameNum=h3cOnuLinkTestResultRetErrFrameNum, h3cOnuRS485SessionErrInfoEntry=h3cOnuRS485SessionErrInfoEntry, h3cOnuLinkTestFrameNumMaxVal=h3cOnuLinkTestFrameNumMaxVal, h3cOltPortAlarmDFEEnabled=h3cOltPortAlarmDFEEnabled, h3cOltPortAlarmRemoteStableEnabled=h3cOltPortAlarmRemoteStableEnabled, h3cOnuPriorityQueueEntry=h3cOnuPriorityQueueEntry, h3cEponOltDFERecoverTrap=h3cEponOltDFERecoverTrap, h3cOltPortAlarmBerThreshold=h3cOltPortAlarmBerThreshold, h3cOnuFirmwareUpdateTable=h3cOnuFirmwareUpdateTable, h3cOltPortAlarmOamDisconnectionEnabled=h3cOltPortAlarmOamDisconnectionEnabled, h3cEponOamVendorSpecificTrap=h3cEponOamVendorSpecificTrap, h3cOnuLinkTestVlanPriority=h3cOnuLinkTestVlanPriority, h3cOnuMacIndex=h3cOnuMacIndex, h3cOnuIgmpSnoopingHostAgingT=h3cOnuIgmpSnoopingHostAgingT, h3cOnuEncryptMan=h3cOnuEncryptMan, h3cOnuInCRCErrPkts=h3cOnuInCRCErrPkts, h3cOnuBatteryBackup=h3cOnuBatteryBackup, h3cOltMaxRtt=h3cOltMaxRtt, h3cEponAutoAuthorize=h3cEponAutoAuthorize, h3cOltPortAlarmFer=h3cOltPortAlarmFer, h3cOnuSilentEntry=h3cOnuSilentEntry, h3cEponOamVersion=h3cEponOamVersion, h3cEponOuiEntry=h3cEponOuiEntry, h3cOnuSlaDelay=h3cOnuSlaDelay, h3cEponMonitorCycleMinVal=h3cEponMonitorCycleMinVal, h3cOnuLinkTestDelay=h3cOnuLinkTestDelay, h3cOnuDbaReportQueueId=h3cOnuDbaReportQueueId, h3cEponBatchOperationByOLTType=h3cEponBatchOperationByOLTType, h3cOltLaserOffTimeMinVal=h3cOltLaserOffTimeMinVal, h3cEponStatBER=h3cEponStatBER, h3cOltPortAlarmThresholdEntry=h3cOltPortAlarmThresholdEntry, h3cOnuP2PShortFrameFirst=h3cOnuP2PShortFrameFirst, h3cOnuIpAddressEntry=h3cOnuIpAddressEntry, h3cEponLoopBackEnableRecoverTrap=h3cEponLoopBackEnableRecoverTrap, h3cOltWorkMode=h3cOltWorkMode, h3cOnuEncryptKey=h3cOnuEncryptKey, h3cOnuBridgeMac=h3cOnuBridgeMac, h3cOltInfoEntry=h3cOltInfoEntry, h3cOnuDbaReportTable=h3cOnuDbaReportTable, h3cEponLocalStableTrap=h3cEponLocalStableTrap, h3cEponMsgTimeOutMaxVal=h3cEponMsgTimeOutMaxVal, h3cEponOnuTypeManEntry=h3cEponOnuTypeManEntry, h3cOnuPOTSPortNumber=h3cOnuPOTSPortNumber, h3cEponOltDFETrap=h3cEponOltDFETrap, h3cOltUsingOnuTable=h3cOltUsingOnuTable, h3cEponAutoUpdateRealTimeStatus=h3cEponAutoUpdateRealTimeStatus, h3cOnuLinkTestResultMeanDelay=h3cOnuLinkTestResultMeanDelay, h3cOnuIgmpSnoopingStatus=h3cOnuIgmpSnoopingStatus, h3cEponOamDisconnectionRecoverTrap=h3cEponOamDisconnectionRecoverTrap, h3cOnuCapabilityEntry=h3cOnuCapabilityEntry, h3cEponOnuAutoBindTrap=h3cEponOnuAutoBindTrap, h3cEponDbaUpdateFileName=h3cEponDbaUpdateFileName, h3cEponMsgTimeOutMinVal=h3cEponMsgTimeOutMinVal, h3cEponFileName=h3cEponFileName, h3cOnuSlaMinBandWidthMinVal=h3cOnuSlaMinBandWidthMinVal, h3cOnuRS485SessionRemotePort=h3cOnuRS485SessionRemotePort, h3cOnuLinkTestVlanTagID=h3cOnuLinkTestVlanTagID, h3cOnuWorkMode=h3cOnuWorkMode, h3cOnuRS485SessionRowStatus=h3cOnuRS485SessionRowStatus, h3cOnuSlaManEntry=h3cOnuSlaManEntry, h3cOltInfoTable=h3cOltInfoTable, h3cOnuDistance=h3cOnuDistance, h3cOltSelfTest=h3cOltSelfTest, h3cOltLaserOffTimeMaxVal=h3cOltLaserOffTimeMaxVal, h3cOnuRS485SessionSummaryTable=h3cOnuRS485SessionSummaryTable, h3cOltPortAlarmFerMinVal=h3cOltPortAlarmFerMinVal, h3cEponOuiValue=h3cEponOuiValue, h3cOnuRemoteFecStatus=h3cOnuRemoteFecStatus, h3cOnuPriorityQueueSizeMaxVal=h3cOnuPriorityQueueSizeMaxVal, h3cOnuQueueBandwidthTable=h3cOnuQueueBandwidthTable, h3cOnuFirmwareVersion=h3cOnuFirmwareVersion, h3cOnuLinkTestResultRetFrameNum=h3cOnuLinkTestResultRetFrameNum, h3cOnuLinkTestFrameNum=h3cOnuLinkTestFrameNum, h3cOnuDhcpallocate=h3cOnuDhcpallocate, h3cEponAutoUpdateSchedStatus=h3cEponAutoUpdateSchedStatus, h3cEponOltSoftwareErrAlmEnable=h3cEponOltSoftwareErrAlmEnable, h3cOnuInfoTable=h3cOnuInfoTable, h3cOnuP2PMaxBandWidth=h3cOnuP2PMaxBandWidth, h3cEponStat=h3cEponStat, h3cOnuPriorityTrust=h3cOnuPriorityTrust, h3cOnuDbaReportStatus=h3cOnuDbaReportStatus, h3cOnuUniUpDownTrapStatus=h3cOnuUniUpDownTrapStatus, h3cOltOpticalPowerTx=h3cOltOpticalPowerTx, h3cEponSoftwareErrTrap=h3cEponSoftwareErrTrap, h3cEponEncryptionUpdateTime=h3cEponEncryptionUpdateTime, h3cEponSoftwareErrRecoverTrap=h3cEponSoftwareErrRecoverTrap, h3cOnuPriorityQueueSizeMinVal=h3cOnuPriorityQueueSizeMinVal, h3cOnuSlaMinBandWidthMaxVal=h3cOnuSlaMinBandWidthMaxVal, h3cEponBatchOperationBySlotResult=h3cEponBatchOperationBySlotResult, h3cOnuCapabilityTable=h3cOnuCapabilityTable, h3cOamEventLogLocation=h3cOamEventLogLocation, h3cOnuMulticastFastLeaveEnable=h3cOnuMulticastFastLeaveEnable, h3cOnuMaxUpstreamQueuePerPort=h3cOnuMaxUpstreamQueuePerPort, h3cOnuRS485SessionType=h3cOnuRS485SessionType, h3cOnuPriorityQueueTable=h3cOnuPriorityQueueTable, h3cOnuDot1xEntry=h3cOnuDot1xEntry, h3cOnuDownstreamQueueNumber=h3cOnuDownstreamQueueNumber, h3cOnuSilentMacAddr=h3cOnuSilentMacAddr, h3cEponMulticastAddressList=h3cEponMulticastAddressList, h3cOnuPacketManTable=h3cOnuPacketManTable, h3cEponOnuStpPortEntry=h3cEponOnuStpPortEntry, h3cOnuManageVID=h3cOnuManageVID, h3cOnuRS485SessionTable=h3cOnuRS485SessionTable, h3cEponStpPortState=h3cEponStpPortState, h3cOnuFEPortNumber=h3cOnuFEPortNumber, h3cOnuRS485DataBits=h3cOnuRS485DataBits, h3cOnuStpStatus=h3cOnuStpStatus, h3cOnuRS485TXErrOctets=h3cOnuRS485TXErrOctets, h3cOnuDownStreamMaxBandWidth=h3cOnuDownStreamMaxBandWidth, h3cOnuRS485SessionErrInfoTable=h3cOnuRS485SessionErrInfoTable, h3cEponEncryptionKeyErrTrap=h3cEponEncryptionKeyErrTrap, h3cOnuMulticastControlMode=h3cOnuMulticastControlMode, h3cOnuRS485RXErrOctets=h3cOnuRS485RXErrOctets, h3cOnuIgmpSnoopingMaxRespT=h3cOnuIgmpSnoopingMaxRespT)
mibBuilder.exportSymbols("A3COM-HUAWEI-EPON-MIB", h3cOltDbaCycleLengthMinVal=h3cOltDbaCycleLengthMinVal, h3cOnuQueueSize=h3cOnuQueueSize, h3cOnuSmlkTable=h3cOnuSmlkTable, h3cEponOamDisconnectionTrap=h3cEponOamDisconnectionTrap, h3cOnuUniMacType=h3cOnuUniMacType, h3cEponBatchOperationBySlotEntry=h3cEponBatchOperationBySlotEntry, h3cOnuDbaReportEntry=h3cOnuDbaReportEntry, h3cOltPortAlarmBer=h3cOltPortAlarmBer, h3cOnuSilentTime=h3cOnuSilentTime, h3cOltPortAlarmBerEnabled=h3cOltPortAlarmBerEnabled, h3cOnuLinkTestResultSentFrameNum=h3cOnuLinkTestResultSentFrameNum, h3cEponSysScalarGroup=h3cEponSysScalarGroup, h3cOnuPortBerStatus=h3cOnuPortBerStatus, h3cEponOnuRegExcessTrap=h3cEponOnuRegExcessTrap, h3cOnuHardMinorVersion=h3cOnuHardMinorVersion, h3cOnuUpdateResult=h3cOnuUpdateResult, h3cOltUsingOnuIfIndex=h3cOltUsingOnuIfIndex, h3cOnuMulticastFilterStatus=h3cOnuMulticastFilterStatus, h3cOltOpticalPowerRx=h3cOltOpticalPowerRx, h3cOnuRS485SessionErrInfo=h3cOnuRS485SessionErrInfo, h3cOltDbaUpdate=h3cOltDbaUpdate, h3cOltLaserOnTimeMinVal=h3cOltLaserOnTimeMinVal, h3cEponOnuTypeManTable=h3cEponOnuTypeManTable, h3cOnuRS485SessionMaxNum=h3cOnuRS485SessionMaxNum, h3cOnuGEPortNumber=h3cOnuGEPortNumber, h3cOltMultiCopyBrdCast=h3cOltMultiCopyBrdCast, h3cEponRemoteStableTrap=h3cEponRemoteStableTrap, h3cOnuMacAddrInfoEntry=h3cOnuMacAddrInfoEntry, h3cOnuChipSetModel=h3cOnuChipSetModel, h3cOnuFirmwareUpdateByTypeTable=h3cOnuFirmwareUpdateByTypeTable, h3cEponAutoUpdateSchedTime=h3cEponAutoUpdateSchedTime, h3cEponMsgLoseNum=h3cEponMsgLoseNum, h3cOnuRS485SessionIndex=h3cOnuRS485SessionIndex, h3cOnuIpAddressTable=h3cOnuIpAddressTable, h3cOltPortAlarmThresholdTable=h3cOltPortAlarmThresholdTable, h3cOltDbaEnabledType=h3cOltDbaEnabledType, h3cOnuSilentTable=h3cOnuSilentTable, h3cEponOamVendorSpecificRecoverTrap=h3cEponOamVendorSpecificRecoverTrap, h3cEponAutoUpdateEntry=h3cEponAutoUpdateEntry, h3cEponOnuMan=h3cEponOnuMan, h3cOnuSlaFixedPacketSize=h3cOnuSlaFixedPacketSize, h3cOnuDot1xTable=h3cOnuDot1xTable, h3cEponSysHasEPONBoard=h3cEponSysHasEPONBoard, h3cOnuQueueScheduler=h3cOnuQueueScheduler, h3cOnuQueueMaxBandwidth=h3cOnuQueueMaxBandwidth, h3cEponOnuPowerOffTrap=h3cEponOnuPowerOffTrap, h3cEponMulticastControlTable=h3cEponMulticastControlTable, h3cOnuRS485SerialIndex=h3cOnuRS485SerialIndex, h3cOltPortAlarmRegistrationEnabled=h3cOltPortAlarmRegistrationEnabled, h3cOltDbaDiscovryFrequencyMaxVal=h3cOltDbaDiscovryFrequencyMaxVal, h3cEponErrorLLIDFrameTrap=h3cEponErrorLLIDFrameTrap, h3cOnuSysManTable=h3cOnuSysManTable, h3cEponBatchOperationByOLTEntry=h3cEponBatchOperationByOLTEntry, h3cOnuAccessVlan=h3cOnuAccessVlan, h3cOnuUpdateByOnuTypeIndex=h3cOnuUpdateByOnuTypeIndex, h3cOnuP2PMaxBurstSize=h3cOnuP2PMaxBurstSize, h3cEponMsgLoseNumMinVal=h3cEponMsgLoseNumMinVal, h3cOltLaserOffTime=h3cOltLaserOffTime, h3cOnuMcastCtrlHostAgingTime=h3cOnuMcastCtrlHostAgingTime, h3cOnuPriorityQueueBurstsizeMaxVal=h3cOnuPriorityQueueBurstsizeMaxVal, h3cEponPortAlarmBerTrap=h3cEponPortAlarmBerTrap, h3cOnuUpdateByTypeOnuType=h3cOnuUpdateByTypeOnuType, h3cOltUsingOnuEntry=h3cOltUsingOnuEntry, h3cOnuUpdateByTypeFileName=h3cOnuUpdateByTypeFileName, h3cEponOnuRegSilentMac=h3cEponOnuRegSilentMac, h3cOnuRS485StopBits=h3cOnuRS485StopBits, h3cOnuLinkTestResultMaxDelay=h3cOnuLinkTestResultMaxDelay, h3cOltSelfTestResult=h3cOltSelfTestResult, h3cOnuInfoEntry=h3cOnuInfoEntry, h3cOamEventLogType=h3cOamEventLogType, h3cOnuSlaMaxBandWidthMaxVal=h3cOnuSlaMaxBandWidthMaxVal, h3cOnuSlaFixedBandWidth=h3cOnuSlaFixedBandWidth, h3cOnuLaserOffTime=h3cOnuLaserOffTime, h3cOnuSlaMaxBandWidthMinVal=h3cOnuSlaMaxBandWidthMinVal, h3cEponBatchOperationByOLTTable=h3cEponBatchOperationByOLTTable, h3cOnuSecondPonRegState=h3cOnuSecondPonRegState, h3cEponOnuRegErrorMacAddr=h3cEponOnuRegErrorMacAddr, h3cEponPortLoopBackAlmEnable=h3cEponPortLoopBackAlmEnable, h3cEponSysManTable=h3cEponSysManTable, h3cOnuChipSetVendorId=h3cOnuChipSetVendorId, h3cOnuDownStreamShortFrameFirst=h3cOnuDownStreamShortFrameFirst, h3cOnuLinkTestEntry=h3cOnuLinkTestEntry, h3cOnuPhysicalEntry=h3cOnuPhysicalEntry, h3cEponAutomaticMode=h3cEponAutomaticMode, h3cOnuRS485SessionRemoteIP=h3cOnuRS485SessionRemoteIP, h3cEponOnuSilenceTrap=h3cEponOnuSilenceTrap, h3cOnuPppoe=h3cOnuPppoe, h3cEponAutoUpdateSchedType=h3cEponAutoUpdateSchedType, h3cOnuLinkTestTable=h3cOnuLinkTestTable, h3cOltDbaDiscoveryLengthMinVal=h3cOltDbaDiscoveryLengthMinVal, h3cEponOuiIndexNextTable=h3cEponOuiIndexNextTable, h3cOnuIgmpSnoopingAggLeaveS=h3cOnuIgmpSnoopingAggLeaveS, h3cEponOuiTable=h3cEponOuiTable, h3cOnuRtt=h3cOnuRtt, h3cOnuP2PHighPriorityFirst=h3cOnuP2PHighPriorityFirst, h3cDot3OamNonThresholdRecoverEvent=h3cDot3OamNonThresholdRecoverEvent, h3cEponStpPortIndex=h3cEponStpPortIndex, h3cOltPortAlarmRegExcessEnabled=h3cOltPortAlarmRegExcessEnabled, h3cOltDbaDiscovryFrequency=h3cOltDbaDiscovryFrequency, h3cEponOnuStpPortTable=h3cEponOnuStpPortTable, h3cOltFirmMajorVersion=h3cOltFirmMajorVersion, h3cOnuPhysicalTable=h3cOnuPhysicalTable, h3cOnuLinkTestFrameNumMinVal=h3cOnuLinkTestFrameNumMinVal, h3cOnuLinkTestResultMinDelay=h3cOnuLinkTestResultMinDelay, h3cEponMibObjects=h3cEponMibObjects, h3cOnuUpdate=h3cOnuUpdate, h3cOltHardMajorVersion=h3cOltHardMajorVersion, h3cOnuHardMajorVersion=h3cOnuHardMajorVersion, h3cOnuRS485PropertiesEntry=h3cOnuRS485PropertiesEntry, h3cOltDbaManTable=h3cOltDbaManTable, h3cOltLaserOnTime=h3cOltLaserOnTime, h3cEponLoopbackPortIndex=h3cEponLoopbackPortIndex, h3cOnuChipSetInfoTable=h3cOnuChipSetInfoTable, h3cOltPortAlarmBerMinVal=h3cOltPortAlarmBerMinVal, h3cOltDbaDiscovryFrequencyMinVal=h3cOltDbaDiscovryFrequencyMinVal, h3cOnuIgspFastLeaveSupported=h3cOnuIgspFastLeaveSupported, h3cOnuSoftwareVersion=h3cOnuSoftwareVersion, h3cOnuRS485PropertiesTable=h3cOnuRS485PropertiesTable, h3cOnuMacAddress=h3cOnuMacAddress, h3cOnuCosToLocalPrecedenceValue=h3cOnuCosToLocalPrecedenceValue, h3cOnuRS485TXOctets=h3cOnuRS485TXOctets, h3cEponOamDiscoveryTimeout=h3cEponOamDiscoveryTimeout, h3cEponBatchOperationBySlot=h3cEponBatchOperationBySlot, h3cOltPortAlarmFerDirect=h3cOltPortAlarmFerDirect, h3cEponLoopBackEnableTrap=h3cEponLoopBackEnableTrap, h3cOnuUpdateByTypeRowStatus=h3cOnuUpdateByTypeRowStatus, h3cOltPortAlarmLlidMismatchEnabled=h3cOltPortAlarmLlidMismatchEnabled, h3cOnuDot1xAccount=h3cOnuDot1xAccount, h3cOltPortAlarmBerDirect=h3cOltPortAlarmBerDirect, h3cOnuReset=h3cOnuReset, h3cOnuDot1xPassword=h3cOnuDot1xPassword, h3cOnuSmlkSecondPonRole=h3cOnuSmlkSecondPonRole, h3cOnuDownStreamMaxBurstSize=h3cOnuDownStreamMaxBurstSize, h3cOnuChipSetDesignDate=h3cOnuChipSetDesignDate, h3cEponOnuTypeDescr=h3cEponOnuTypeDescr, h3cOnuRS485SessionEntry=h3cOnuRS485SessionEntry, h3cEponOuiIndex=h3cEponOuiIndex, h3cOnuIgmpSnoopingAggReportS=h3cOnuIgmpSnoopingAggReportS, h3cEponPortAlarmFerRecoverTrap=h3cEponPortAlarmFerRecoverTrap, h3cEponBatchOperationBySlotType=h3cEponBatchOperationBySlotType, h3cEponMulticastStatus=h3cEponMulticastStatus, h3cOnuUpdateFileName=h3cOnuUpdateFileName, h3cOnuRS485SessionNextIndex=h3cOnuRS485SessionNextIndex, h3cEponBatchOperationByOLTResult=h3cEponBatchOperationByOLTResult, h3cOnuMaxDownstreamQueuePerPort=h3cOnuMaxDownstreamQueuePerPort, h3cEponMonitorCycleEnable=h3cEponMonitorCycleEnable, h3cEponSlotIndex=h3cEponSlotIndex, h3cEponOuiIndexNextEntry=h3cEponOuiIndexNextEntry, h3cOnuRS485Parity=h3cOnuRS485Parity, h3cOnuUpstreamQueueNumber=h3cOnuUpstreamQueueNumber, h3cOnuServiceSupported=h3cOnuServiceSupported, h3cOnuSmlkSwitchoverTrap=h3cOnuSmlkSwitchoverTrap, h3cOnuIgmpSnoopingRouterAgingT=h3cOnuIgmpSnoopingRouterAgingT, h3cOltPortAlarmLlidMismatchThreshold=h3cOltPortAlarmLlidMismatchThreshold, h3cEponStatEntry=h3cEponStatEntry, h3cOnuIpAddress=h3cOnuIpAddress, h3cOltPortAlarmBerMaxVal=h3cOltPortAlarmBerMaxVal, h3cEponEncryptionNoReplyTimeOut=h3cEponEncryptionNoReplyTimeOut, h3cEponSoftwareErrorCode=h3cEponSoftwareErrorCode, h3cOnuFirstPonRegState=h3cOnuFirstPonRegState, h3cOnuManageVlanIntfS=h3cOnuManageVlanIntfS, h3cEponOnuRegistrationErrRecoverTrap=h3cEponOnuRegistrationErrRecoverTrap, h3cEponOnuTypeIndex=h3cEponOnuTypeIndex, h3cOnuCosToLocalPrecedenceTable=h3cOnuCosToLocalPrecedenceTable, h3cOnuMacAddrFlag=h3cOnuMacAddrFlag, h3cEponBatchOperationBySlotTable=h3cEponBatchOperationBySlotTable, h3cOnuCosToLocalPrecedenceCosIndex=h3cOnuCosToLocalPrecedenceCosIndex, h3cEponEncryptionKeyErrRecoverTrap=h3cEponEncryptionKeyErrRecoverTrap, h3cEponOltSwitchoverTrap=h3cEponOltSwitchoverTrap, h3cEponMonitorCycle=h3cEponMonitorCycle, h3cEponModeSwitch=h3cEponModeSwitch)
