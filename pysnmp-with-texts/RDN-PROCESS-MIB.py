#
# PySNMP MIB module RDN-PROCESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-PROCESS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:54:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
rdnChassis, = mibBuilder.importSymbols("RDN-CHASSIS-MIB", "rdnChassis")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter32, iso, ModuleIdentity, MibIdentifier, Bits, ObjectIdentity, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "iso", "ModuleIdentity", "MibIdentifier", "Bits", "ObjectIdentity", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rdnProcessMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 1, 20))
rdnProcessMIB.setRevisions(('2008-08-08 00:00', '2003-11-05 00:00', '2003-03-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rdnProcessMIB.setRevisionsDescriptions(("Added Copyright Statement into MIB modules's description.", 'Updated the CONTACT-INFO.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: rdnProcessMIB.setLastUpdated('200808080000Z')
if mibBuilder.loadTexts: rdnProcessMIB.setOrganization('Motorola, Inc.')
if mibBuilder.loadTexts: rdnProcessMIB.setContactInfo('Motorola Inc. Customer Service 101 Tournament Drive Horsham, PA 19044 US Tel: +1 888 944 4357 Int Tel: +1 215 323 0044 Fax: +1 215 323 1502 Email: CPSSupport@Motorola.com')
if mibBuilder.loadTexts: rdnProcessMIB.setDescription('The MIB module to describe active system processes and memory usages. Copyright (C) 2003, 2008 by Motorola, Inc. All rights reserved.')
class RdnTaskPriorityType(TextualConvention, Integer32):
    description = 'The task priority in the BSR system. It maps from the vxWorks task priorities: 0 to 10: critical 11 to 50: high 51 to 100: normal 101 to 254: low 255: notAssigned'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("high", 2), ("normal", 3), ("low", 4), ("notAssigned", 5))

rdnProcessMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1))
rdnCPUTotalTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1), )
if mibBuilder.loadTexts: rdnCPUTotalTable.setStatus('current')
if mibBuilder.loadTexts: rdnCPUTotalTable.setDescription('A table of overall CPU utilizations per processor. ')
rdnCPUTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1), ).setIndexNames((0, "RDN-PROCESS-MIB", "rdnSlotSnmpIndex"), (0, "RDN-PROCESS-MIB", "rdnCPUIndex"))
if mibBuilder.loadTexts: rdnCPUTotalEntry.setStatus('current')
if mibBuilder.loadTexts: rdnCPUTotalEntry.setDescription('Overall information about the CPU utilization.')
rdnSlotSnmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: rdnSlotSnmpIndex.setStatus('current')
if mibBuilder.loadTexts: rdnSlotSnmpIndex.setDescription('A Logical index uniquely identifies a slot in the system. The value of this field is the physical slot ID plus 1.')
rdnCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: rdnCPUIndex.setStatus('current')
if mibBuilder.loadTexts: rdnCPUIndex.setDescription('An index uniquely represents a CPU in the system. This index is assigned arbitrarily by the SNMP engine. It starts from 1.')
rdnCPUType = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCPUType.setStatus('current')
if mibBuilder.loadTexts: rdnCPUType.setDescription('The predefined CPU name in human readable format. It is used to associate CPU number with the CPU name to help to identify the CPU that is querying. e.g. PowerPC 750, IXP1200-US, etc.')
rdnTotalAllocatableMem = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 4), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTotalAllocatableMem.setStatus('current')
if mibBuilder.loadTexts: rdnTotalAllocatableMem.setDescription('The total memory that is available for dynamic allocation in the system.')
rdnTotalMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 5), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTotalMemAllocated.setStatus('current')
if mibBuilder.loadTexts: rdnTotalMemAllocated.setDescription('The total of allocated memory for all the tasks.')
rdnTotalFreeMem = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 6), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTotalFreeMem.setStatus('current')
if mibBuilder.loadTexts: rdnTotalFreeMem.setDescription('The total free memory.')
rdnTotalCPUUtilization5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTotalCPUUtilization5Sec.setStatus('current')
if mibBuilder.loadTexts: rdnTotalCPUUtilization5Sec.setDescription('The overall CPU utilization rate in the last 5-second period. The unit is 1/100.')
rdnTotalCPUUtilization1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTotalCPUUtilization1Min.setStatus('current')
if mibBuilder.loadTexts: rdnTotalCPUUtilization1Min.setDescription('The overall CPU utilization rate in the last 1-minute period. The unit is 1/100.')
rdnTotalCPUUtilization5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTotalCPUUtilization5Min.setStatus('current')
if mibBuilder.loadTexts: rdnTotalCPUUtilization5Min.setDescription('The overall CPU utilization rate in the last 5-minute period. The unit is 1/100.')
rdnTaskTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2), )
if mibBuilder.loadTexts: rdnTaskTable.setStatus('current')
if mibBuilder.loadTexts: rdnTaskTable.setDescription('A table of general information about the tasks on this device.')
rdnTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1), ).setIndexNames((0, "RDN-PROCESS-MIB", "rdnSlotSnmpIndex"), (0, "RDN-PROCESS-MIB", "rdnCPUIndex"), (0, "RDN-PROCESS-MIB", "rdnTaskId"))
if mibBuilder.loadTexts: rdnTaskEntry.setStatus('current')
if mibBuilder.loadTexts: rdnTaskEntry.setDescription('General information, about an active task on this device. One entry for each CPU, each task.')
rdnTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskId.setStatus('current')
if mibBuilder.loadTexts: rdnTaskId.setDescription('This entry is generated when task is created by the OS (also called process ID, PID). It unique identifies a task that is running in the system (per CPU system).')
rdnTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskName.setStatus('current')
if mibBuilder.loadTexts: rdnTaskName.setDescription('The name associated with this task/process.')
rdnTaskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 3), RdnTaskPriorityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskPriority.setStatus('current')
if mibBuilder.loadTexts: rdnTaskPriority.setDescription('The priority level at which the task is running.')
rdnTaskMemAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 4), Unsigned32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskMemAllocated.setStatus('current')
if mibBuilder.loadTexts: rdnTaskMemAllocated.setDescription('The total memory that is allocated by this task.')
rdnTaskUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: rdnTaskUtil5Sec.setDescription('The CPU utilization rate for this task during the past 5 seconds interval.')
rdnTaskUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskUtil1Min.setStatus('current')
if mibBuilder.loadTexts: rdnTaskUtil1Min.setDescription('The CPU utilization rate for this task during the past 1 minute interval.')
rdnTaskUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 20, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('1/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnTaskUtil5Min.setStatus('current')
if mibBuilder.loadTexts: rdnTaskUtil5Min.setDescription('The CPU utilization rate for this task during the past 5 minute interval. Unit is 1/1000. ')
rdnProcessMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 20, 2))
rdnProcessMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 20, 2, 0))
rdnProcessMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 20, 3))
rdnProcessCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 20, 3, 1))
rdnProcessGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 20, 3, 2))
rdnProcessMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4981, 1, 20, 3, 1, 1)).setObjects(("RDN-PROCESS-MIB", "rdnCPUTotalGroup"), ("RDN-PROCESS-MIB", "rdnTaskGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rdnProcessMIBCompliance = rdnProcessMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rdnProcessMIBCompliance.setDescription('The compliance statement for entities which implement the Motorola Process MIB.')
rdnCPUTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4981, 1, 20, 3, 2, 1)).setObjects(("RDN-PROCESS-MIB", "rdnCPUType"), ("RDN-PROCESS-MIB", "rdnTotalAllocatableMem"), ("RDN-PROCESS-MIB", "rdnTotalMemAllocated"), ("RDN-PROCESS-MIB", "rdnTotalFreeMem"), ("RDN-PROCESS-MIB", "rdnTotalCPUUtilization5Sec"), ("RDN-PROCESS-MIB", "rdnTotalCPUUtilization1Min"), ("RDN-PROCESS-MIB", "rdnTotalCPUUtilization5Min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rdnCPUTotalGroup = rdnCPUTotalGroup.setStatus('current')
if mibBuilder.loadTexts: rdnCPUTotalGroup.setDescription('A collection of objects providing total CPU utilization ratio for each CPU in the system.')
rdnTaskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4981, 1, 20, 3, 2, 2)).setObjects(("RDN-PROCESS-MIB", "rdnTaskId"), ("RDN-PROCESS-MIB", "rdnTaskName"), ("RDN-PROCESS-MIB", "rdnTaskPriority"), ("RDN-PROCESS-MIB", "rdnTaskMemAllocated"), ("RDN-PROCESS-MIB", "rdnTaskUtil5Sec"), ("RDN-PROCESS-MIB", "rdnTaskUtil1Min"), ("RDN-PROCESS-MIB", "rdnTaskUtil5Min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rdnTaskGroup = rdnTaskGroup.setStatus('current')
if mibBuilder.loadTexts: rdnTaskGroup.setDescription('A collection of objects providing per task information in the system.')
mibBuilder.exportSymbols("RDN-PROCESS-MIB", rdnTotalAllocatableMem=rdnTotalAllocatableMem, rdnTotalFreeMem=rdnTotalFreeMem, rdnCPUType=rdnCPUType, rdnTaskTable=rdnTaskTable, rdnCPUTotalGroup=rdnCPUTotalGroup, rdnProcessMIBConformance=rdnProcessMIBConformance, rdnTaskUtil1Min=rdnTaskUtil1Min, rdnCPUTotalEntry=rdnCPUTotalEntry, rdnCPUIndex=rdnCPUIndex, rdnTaskMemAllocated=rdnTaskMemAllocated, PYSNMP_MODULE_ID=rdnProcessMIB, rdnTotalCPUUtilization5Sec=rdnTotalCPUUtilization5Sec, rdnTaskUtil5Min=rdnTaskUtil5Min, rdnTaskName=rdnTaskName, rdnProcessMIBObjects=rdnProcessMIBObjects, rdnSlotSnmpIndex=rdnSlotSnmpIndex, rdnTaskUtil5Sec=rdnTaskUtil5Sec, rdnProcessMIBNotifs=rdnProcessMIBNotifs, rdnTotalMemAllocated=rdnTotalMemAllocated, rdnTaskGroup=rdnTaskGroup, rdnProcessCompliances=rdnProcessCompliances, rdnProcessGroups=rdnProcessGroups, rdnTaskEntry=rdnTaskEntry, rdnTaskPriority=rdnTaskPriority, rdnCPUTotalTable=rdnCPUTotalTable, RdnTaskPriorityType=RdnTaskPriorityType, rdnProcessMIB=rdnProcessMIB, rdnTotalCPUUtilization5Min=rdnTotalCPUUtilization5Min, rdnTaskId=rdnTaskId, rdnProcessMIBNotifPrefix=rdnProcessMIBNotifPrefix, rdnTotalCPUUtilization1Min=rdnTotalCPUUtilization1Min, rdnProcessMIBCompliance=rdnProcessMIBCompliance)
