#
# PySNMP MIB module IBM6611-DLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM6611-DLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, TimeTicks, ModuleIdentity, Integer32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Unsigned32, ObjectIdentity, Counter64, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "TimeTicks", "ModuleIdentity", "Integer32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Unsigned32", "ObjectIdentity", "Counter64", "enterprises", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm6611 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2))
ibmappn = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13))
ibmdls = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 9))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class FilterType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("deny", 1), ("permit", 2))

ibmdlsVirtualRingSegmentNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsVirtualRingSegmentNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsVirtualRingSegmentNumber.setDescription('The token ring segment number used in all frames passed to or from the IBM 6611 Data Link Switching function.')
ibmdlsFrameFilterType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 2), FilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsFrameFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsFrameFilterType.setDescription('The type of SNA filtering applied using the ibmdlsLocalFrameFilterTable and ibmdlsRemoteFrameFilterTable. If this field = permit(2), then all filters defined for SNA use the action of permitting frames to be forwarded if they meet the criteria given by the source and destination address values. If this field = deny(1), then all filters defined for SNA use the action of denying frames to be forwarded if they meet the criteria given by the source and destination address values.')
ibmdlsNameFilterType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 3), FilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsNameFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsNameFilterType.setDescription('The type of NetBIOS filtering applied using the ibmdlsLocalNameFilterTable and ibmdlsRemoteNameFilterTable. If this field = permit(2), then all filters defined for NetBIOS use the action of permitting frames to be forwarded if they meet the criteria given by the source and destination address values. If this field = deny(1), then all filters defined for NetBIOS use the action of denying frames to be forwarded if they meet the criteria given by the source and destination address values.')
ibmdlsRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4), )
if mibBuilder.loadTexts: ibmdlsRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRouterTable.setDescription('A table of information regarding all routers participating in Data Link Switching.')
ibmdlsRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsRouterAddress"))
if mibBuilder.loadTexts: ibmdlsRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRouterEntry.setDescription('Information for a single participating router.')
ibmdlsRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRouterAddress.setDescription('The IP address of the router participating in Data Link Switching.')
ibmdlsRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRouterStatus.setDescription('The current state of the remote connection')
ibmdlsRouterDefinedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("system", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRouterDefinedBy.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRouterDefinedBy.setDescription('The origin of this entry. user(1) indicates that this router is defined via the Configuration Program. system(2) indicates that this router was defined automatically as a result of a connection request from another router.')
ibmdlsLocalFrameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5), )
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterTable.setDescription('The SNA local frame filter table. This table contains information regarding the filtering of SNA frames received from local LAN segments.')
ibmdlsLocalFrameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsLocalFrameFilterID"))
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterEntry.setDescription('Filter information for a MAC address source-destination pair.')
ibmdlsLocalFrameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterID.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterID.setDescription('A unique identifier for this filter.')
ibmdlsLocalFrameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterSrcAddress.setDescription('The source MAC address that this filter is applied to.')
ibmdlsLocalFrameFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterSrcMask.setDescription('A mask indicating the bits of the source address considered significant when using the filter. For every bit equal to one in the mask, the same bit in the source address is considered significant.')
ibmdlsLocalFrameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterDestAddress.setDescription('The destination MAC address that this filter is applied to.')
ibmdlsLocalFrameFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 5, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterDestMask.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalFrameFilterDestMask.setDescription('A mask indicating the bits of the destination address considered significant when using the filter. For every bit equal to one in the mask, the same bit in the destination address is considered significant.')
ibmdlsRemoteFrameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6), )
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterTable.setDescription('The SNA remote frame filter table. This table contains information regarding the filtering of SNA frames received from other participating DLS routers.')
ibmdlsRemoteFrameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsRemoteFrameFilterID"))
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterEntry.setDescription('Filter information for a MAC address source-destination pair.')
ibmdlsRemoteFrameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterID.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterID.setDescription('A unique identifier for this filter.')
ibmdlsRemoteFrameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterSrcAddress.setDescription('The source MAC address that this filter is applied to.')
ibmdlsRemoteFrameFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterSrcMask.setDescription('A mask indicating the bits of the source address considered significant when using the filter. For every bit equal to one in the mask, the same bit in the source address is considered significant.')
ibmdlsRemoteFrameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterDestAddress.setDescription('The destination MAC address that this filter is applied to.')
ibmdlsRemoteFrameFilterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 6, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterDestMask.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteFrameFilterDestMask.setDescription('A mask indicating the bits of the destination address considered significant when using the filter. For every bit equal to one in the mask, the same bit in the destination address is considered significant.')
ibmdlsLocalNameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7), )
if mibBuilder.loadTexts: ibmdlsLocalNameFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalNameFilterTable.setDescription('The NetBIOS local name filter table. This table contains information regarding the filtering of NetBIOS frames received from local LAN segments.')
ibmdlsLocalNameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsLocalNameFilterID"))
if mibBuilder.loadTexts: ibmdlsLocalNameFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalNameFilterEntry.setDescription('Filter information for a NetBIOS source-destination name pair.')
ibmdlsLocalNameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalNameFilterID.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalNameFilterID.setDescription('A unique identifier for this filter.')
ibmdlsLocalNameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalNameFilterSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalNameFilterSrcAddress.setDescription('The source NetBIOS name that this filter is applied to.')
ibmdlsLocalNameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsLocalNameFilterDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsLocalNameFilterDestAddress.setDescription('The destination NetBIOS name that this filter is applied to.')
ibmdlsRemoteNameFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8), )
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterTable.setDescription('The NetBIOS name filter table. This table contains information regarding the filtering of NetBIOS frames received from other participating DLS routers.')
ibmdlsRemoteNameFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsRemoteNameFilterID"))
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterEntry.setDescription('Filter information for a NetBIOS source-destination name pair.')
ibmdlsRemoteNameFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterID.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterID.setDescription('A unique identifier for this filter.')
ibmdlsRemoteNameFilterSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterSrcAddress.setDescription('The source NetBIOS name that this filter is applied to.')
ibmdlsRemoteNameFilterDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsRemoteNameFilterDestAddress.setDescription('The destination NetBIOS name that this filter is applied to.')
ibmdlsDefaultDestTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9), )
if mibBuilder.loadTexts: ibmdlsDefaultDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultDestTable.setDescription('Table of default routers for MAC addresses.')
ibmdlsDefaultDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsDefaultDestAddress"))
if mibBuilder.loadTexts: ibmdlsDefaultDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultDestEntry.setDescription('Mapping of a MAC address to a default router.')
ibmdlsDefaultDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultDestAddress.setDescription('The destination address that this table entry applies to.')
ibmdlsDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultRouterAddress.setDescription('The default router used for reaching the destination address in ibmdlsDefaultDestAddress.')
ibmdlsDefaultNBDestTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10), )
if mibBuilder.loadTexts: ibmdlsDefaultNBDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultNBDestTable.setDescription('Table of default routers for NetBIOS names.')
ibmdlsDefaultNBDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsDefaultNBDestName"))
if mibBuilder.loadTexts: ibmdlsDefaultNBDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultNBDestEntry.setDescription('Mapping of a NetBIOS name to a default router.')
ibmdlsDefaultNBDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultNBDestName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultNBDestName.setDescription('The destination NetBIOS name that this table entry applies to.')
ibmdlsDefaultNBRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsDefaultNBRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsDefaultNBRouterAddress.setDescription('The default router used for reaching the destination name in ibmdlsDefaultNBDestName.')
ibmdlsStationTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11), )
if mibBuilder.loadTexts: ibmdlsStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationTable.setDescription('Table of configuration information on SNA stations attached to this router.')
ibmdlsStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsStationIfIndex"), (0, "IBM6611-DLS-MIB", "ibmdlsStationAddress"))
if mibBuilder.loadTexts: ibmdlsStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationEntry.setDescription('Information on a single SNA station attached to this router.')
ibmdlsStationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationIfIndex.setDescription('The value of IfIndex for the port to which this station is attached.')
ibmdlsStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationAddress.setDescription('The SDLC address of this station.')
ibmdlsStationTransmitWindowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationTransmitWindowCount.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationTransmitWindowCount.setDescription('The number of SDLC information frames to send to this station before turning the line around to get a response.')
ibmdlsStationRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationRetransmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationRetransmitCount.setDescription('The number of contiguous information frame bursts that will be transmitted to this station before declaring a permanent transmission error.')
ibmdlsStationRetransmitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationRetransmitThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationRetransmitThreshold.setDescription('The number of information frame transmissions allowed as a percentage of total information frame transmissions. The specified rate is the maximum rate of retransmissions allowed above which an error log entry will be make.')
ibmdlsStationForceDisconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(120)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationForceDisconnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationForceDisconnectTimeout.setDescription('The number of seconds that the IBM 6611 will wait after requesting a disconnect from the link (DISC) before forcing a disconnect.')
ibmdlsStationMaxIfieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(265, 30729)).clone(265)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationMaxIfieldSize.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationMaxIfieldSize.setDescription('The value in bytes of the maximum I-field size (a multiple of 256 plus 9).')
ibmdlsStationPrimaryRepollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollTimeout.setDescription('The length of time (in tenths of seconds) that the primary station will wait for a response from the secondary station.')
ibmdlsStationPrimaryRepollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollCount.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollCount.setDescription('The number of times that the primary station will poll the secondary station unsuccessfully before marking the station as not working.')
ibmdlsStationPrimaryRepollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationPrimaryRepollThreshold.setDescription('The number of repolls as a percentage of the total polls sent to the secondary station. The specified percentage equals the maximum rate of repolls allowed, above which the IBM 6611 declares that a temporary error has occurred and logs an entry in the system error log.')
ibmdlsStationPrimarySlowListTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationPrimarySlowListTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationPrimarySlowListTimeout.setDescription('The number of seconds that the primary station will wait between polls to stations on the slow list.')
ibmdlsStationSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationSrcAddress.setDescription('The token ring physical address used for this station.')
ibmdlsStationDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 11, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsStationDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsStationDestAddress.setDescription('The token ring physical address to which this station should be connected. If this information is not available the IBM 6611 Network Processor will return a length of zero for this object.')
ibmdlsCirTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12), )
if mibBuilder.loadTexts: ibmdlsCirTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirTable.setDescription('Table of information on DLS circuits active on this router.')
ibmdlsCirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1), ).setIndexNames((0, "IBM6611-DLS-MIB", "ibmdlsCirIfIndex"), (0, "IBM6611-DLS-MIB", "ibmdlsCirSrcAddress"), (0, "IBM6611-DLS-MIB", "ibmdlsCirSrcSap"), (0, "IBM6611-DLS-MIB", "ibmdlsCirDestAddress"), (0, "IBM6611-DLS-MIB", "ibmdlsCirDestSap"))
if mibBuilder.loadTexts: ibmdlsCirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirEntry.setDescription('Information on a DLS circuit.')
ibmdlsCirIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirIfIndex.setDescription('The value of IfIndex for the interface supporting this circuit.')
ibmdlsCirSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirSrcAddress.setDescription('The MAC address of the source of this circuit.')
ibmdlsCirSrcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirSrcSap.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirSrcSap.setDescription('The SAP identifier of the source of this circuit.')
ibmdlsCirDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirDestAddress.setDescription('The MAC address of the destination of this circuit.')
ibmdlsCirDestSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirDestSap.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirDestSap.setDescription('The SAP identifier of the destination of this circuit.')
ibmdlsCirPartnerRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirPartnerRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirPartnerRouterAddress.setDescription('The IP address of the partner router used by this circuit.')
ibmdlsCirLocalLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("opening", 1), ("opened", 2), ("closing", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkState.setDescription('The state of the local link station used by this circuit.')
ibmdlsCirLocalLinkSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("calling", 1), ("listening", 2), ("contacted", 3), ("localBusy", 4), ("remoteBusy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkSubState.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkSubState.setDescription('The sub-state of the local link station used by this circuit.')
ibmdlsCirLocalLinkRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRouting.setReference("IBM Token-ring Network: Architecture Reference (SC30-3374), see 'Routing Information Field'.")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRouting.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRouting.setDescription('The routing information field used by the local link portion of this circuit. The routing information field consists of a 2-byte routing control field and up to eight 2-byte route designators.')
ibmdlsCirLocalLinkTestCmdsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsSent.setDescription('The number of test commands sent by the local link station used by this circuit.')
ibmdlsCirLocalLinkTestCmdsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsFail.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsFail.setDescription('The number of test commands failed by the local link station used by this circuit.')
ibmdlsCirLocalLinkTestCmdsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsRcv.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkTestCmdsRcv.setDescription('The number of test commands received by the local link station used by this circuit.')
ibmdlsCirLocalLinkDataPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktSent.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktSent.setDescription('The number of sequenced data packets sent by the local link station used by this circuit.')
ibmdlsCirLocalLinkDataPktResent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktResent.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktResent.setDescription('The number of sequenced data packets resent by the local link station used by this circuit.')
ibmdlsCirLocalLinkMaxContResent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkMaxContResent.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkMaxContResent.setDescription('The maximum number of contiguous resendings by the local link station used by this circuit.')
ibmdlsCirLocalLinkDataPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktRcv.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkDataPktRcv.setDescription('The number of sequenced data packets received by the local link station used by this circuit.')
ibmdlsCirLocalLinkInvalidPktRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkInvalidPktRcv.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkInvalidPktRcv.setDescription('The number of invalid packets received by the local link station used by this circuit.')
ibmdlsCirLocalLinkAdpRcvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkAdpRcvErr.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkAdpRcvErr.setDescription('The number of data-detected receive errors by the local link station used by this circuit.')
ibmdlsCirLocalLinkAdpSendErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkAdpSendErr.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkAdpSendErr.setDescription('The number of data-detected transmit errors by the local link station used by this circuit.')
ibmdlsCirLocalLinkRcvInactiveTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRcvInactiveTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkRcvInactiveTimeouts.setDescription('The number of inactivity timeouts received by the local link station used by this circuit.')
ibmdlsCirLocalLinkCmdPollsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdPollsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdPollsSent.setDescription('The number of command polls sent by the local link station used by this circuit.')
ibmdlsCirLocalLinkCmdRepollsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdRepollsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdRepollsSent.setDescription('The number of command repolls sent by the local link station used by this circuit.')
ibmdlsCirLocalLinkCmdContRepolls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 9, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdContRepolls.setStatus('mandatory')
if mibBuilder.loadTexts: ibmdlsCirLocalLinkCmdContRepolls.setDescription('The number of continuous repolls sent by the local link station used by this circuit.')
mibBuilder.exportSymbols("IBM6611-DLS-MIB", ibmdlsCirLocalLinkCmdRepollsSent=ibmdlsCirLocalLinkCmdRepollsSent, ibmappn=ibmappn, ibmdlsRemoteFrameFilterDestMask=ibmdlsRemoteFrameFilterDestMask, ibmdlsCirLocalLinkTestCmdsFail=ibmdlsCirLocalLinkTestCmdsFail, ibmdlsLocalFrameFilterEntry=ibmdlsLocalFrameFilterEntry, ibmdlsRemoteFrameFilterTable=ibmdlsRemoteFrameFilterTable, ibmdlsCirDestSap=ibmdlsCirDestSap, ibmdlsStationTable=ibmdlsStationTable, ibmdlsStationForceDisconnectTimeout=ibmdlsStationForceDisconnectTimeout, ibmdlsCirLocalLinkInvalidPktRcv=ibmdlsCirLocalLinkInvalidPktRcv, ibmdlsDefaultNBDestName=ibmdlsDefaultNBDestName, ibmdlsCirLocalLinkDataPktSent=ibmdlsCirLocalLinkDataPktSent, ibmdls=ibmdls, ibmdlsCirLocalLinkDataPktResent=ibmdlsCirLocalLinkDataPktResent, ibmdlsRemoteNameFilterID=ibmdlsRemoteNameFilterID, FilterType=FilterType, ibmdlsStationIfIndex=ibmdlsStationIfIndex, ibmdlsRemoteNameFilterSrcAddress=ibmdlsRemoteNameFilterSrcAddress, ibmdlsDefaultDestAddress=ibmdlsDefaultDestAddress, ibmdlsCirPartnerRouterAddress=ibmdlsCirPartnerRouterAddress, ibmdlsDefaultDestEntry=ibmdlsDefaultDestEntry, ibmdlsCirLocalLinkState=ibmdlsCirLocalLinkState, ibmdlsCirLocalLinkRcvInactiveTimeouts=ibmdlsCirLocalLinkRcvInactiveTimeouts, ibmdlsLocalFrameFilterTable=ibmdlsLocalFrameFilterTable, ibmdlsStationPrimaryRepollCount=ibmdlsStationPrimaryRepollCount, ibmdlsFrameFilterType=ibmdlsFrameFilterType, ibm6611=ibm6611, ibmdlsStationRetransmitThreshold=ibmdlsStationRetransmitThreshold, ibmdlsRouterTable=ibmdlsRouterTable, ibmdlsStationEntry=ibmdlsStationEntry, ibmdlsLocalFrameFilterID=ibmdlsLocalFrameFilterID, ibmdlsRemoteNameFilterDestAddress=ibmdlsRemoteNameFilterDestAddress, ibmProd=ibmProd, ibmdlsStationPrimarySlowListTimeout=ibmdlsStationPrimarySlowListTimeout, ibmdlsCirSrcAddress=ibmdlsCirSrcAddress, ibmdlsStationPrimaryRepollThreshold=ibmdlsStationPrimaryRepollThreshold, ibmdlsDefaultNBDestEntry=ibmdlsDefaultNBDestEntry, ibmdlsCirDestAddress=ibmdlsCirDestAddress, ibmdlsLocalFrameFilterSrcMask=ibmdlsLocalFrameFilterSrcMask, ibmdlsLocalNameFilterTable=ibmdlsLocalNameFilterTable, ibmdlsLocalNameFilterSrcAddress=ibmdlsLocalNameFilterSrcAddress, ibmdlsLocalFrameFilterSrcAddress=ibmdlsLocalFrameFilterSrcAddress, ibmdlsDefaultNBRouterAddress=ibmdlsDefaultNBRouterAddress, ibmdlsRemoteFrameFilterDestAddress=ibmdlsRemoteFrameFilterDestAddress, ibmdlsLocalFrameFilterDestMask=ibmdlsLocalFrameFilterDestMask, ibmdlsStationSrcAddress=ibmdlsStationSrcAddress, ibmdlsRemoteFrameFilterID=ibmdlsRemoteFrameFilterID, ibmdlsDefaultNBDestTable=ibmdlsDefaultNBDestTable, ibmdlsDefaultDestTable=ibmdlsDefaultDestTable, ibmdlsStationRetransmitCount=ibmdlsStationRetransmitCount, ibmdlsLocalNameFilterID=ibmdlsLocalNameFilterID, ibmdlsRouterEntry=ibmdlsRouterEntry, ibmdlsLocalNameFilterEntry=ibmdlsLocalNameFilterEntry, ibmdlsStationDestAddress=ibmdlsStationDestAddress, ibmdlsCirLocalLinkTestCmdsSent=ibmdlsCirLocalLinkTestCmdsSent, MacAddress=MacAddress, ibmdlsCirLocalLinkTestCmdsRcv=ibmdlsCirLocalLinkTestCmdsRcv, ibmdlsRemoteFrameFilterEntry=ibmdlsRemoteFrameFilterEntry, ibmdlsRemoteNameFilterTable=ibmdlsRemoteNameFilterTable, ibmdlsRouterDefinedBy=ibmdlsRouterDefinedBy, ibmdlsCirLocalLinkRouting=ibmdlsCirLocalLinkRouting, ibmdlsStationPrimaryRepollTimeout=ibmdlsStationPrimaryRepollTimeout, ibmdlsStationTransmitWindowCount=ibmdlsStationTransmitWindowCount, ibmdlsStationAddress=ibmdlsStationAddress, ibmdlsCirLocalLinkAdpSendErr=ibmdlsCirLocalLinkAdpSendErr, ibmdlsStationMaxIfieldSize=ibmdlsStationMaxIfieldSize, ibmdlsNameFilterType=ibmdlsNameFilterType, ibmdlsRouterStatus=ibmdlsRouterStatus, ibmdlsRemoteFrameFilterSrcAddress=ibmdlsRemoteFrameFilterSrcAddress, ibmdlsDefaultRouterAddress=ibmdlsDefaultRouterAddress, ibmdlsCirLocalLinkSubState=ibmdlsCirLocalLinkSubState, ibmdlsRouterAddress=ibmdlsRouterAddress, ibmdlsCirLocalLinkDataPktRcv=ibmdlsCirLocalLinkDataPktRcv, ibmdlsLocalNameFilterDestAddress=ibmdlsLocalNameFilterDestAddress, ibmdlsCirTable=ibmdlsCirTable, ibmdlsCirLocalLinkMaxContResent=ibmdlsCirLocalLinkMaxContResent, ibmdlsLocalFrameFilterDestAddress=ibmdlsLocalFrameFilterDestAddress, ibmdlsCirLocalLinkCmdContRepolls=ibmdlsCirLocalLinkCmdContRepolls, ibm=ibm, ibmdlsVirtualRingSegmentNumber=ibmdlsVirtualRingSegmentNumber, ibmdlsCirIfIndex=ibmdlsCirIfIndex, ibmdlsCirLocalLinkCmdPollsSent=ibmdlsCirLocalLinkCmdPollsSent, ibmdlsRemoteFrameFilterSrcMask=ibmdlsRemoteFrameFilterSrcMask, ibmdlsRemoteNameFilterEntry=ibmdlsRemoteNameFilterEntry, ibmdlsCirSrcSap=ibmdlsCirSrcSap, ibmdlsCirLocalLinkAdpRcvErr=ibmdlsCirLocalLinkAdpRcvErr, ibmdlsCirEntry=ibmdlsCirEntry)
