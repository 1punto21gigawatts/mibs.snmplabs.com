#
# PySNMP MIB module HPN-ICF-FC-FLOGIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-FC-FLOGIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
HpnicfFcNameId, HpnicfFcBbCredit, HpnicfFcClassOfServices, HpnicfFcAddressId, HpnicfFcRxMTU = mibBuilder.importSymbols("HPN-ICF-FC-TC-MIB", "HpnicfFcNameId", "HpnicfFcBbCredit", "HpnicfFcClassOfServices", "HpnicfFcAddressId", "HpnicfFcRxMTU")
hpnicfSan, hpnicfVsanIndex = mibBuilder.importSymbols("HPN-ICF-VSAN-MIB", "hpnicfSan", "hpnicfVsanIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, TimeTicks, NotificationType, Gauge32, IpAddress, Integer32, ModuleIdentity, MibIdentifier, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "TimeTicks", "NotificationType", "Gauge32", "IpAddress", "Integer32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpnicfFcFLogin = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3))
hpnicfFcFLogin.setRevisions(('2013-02-27 11:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfFcFLogin.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpnicfFcFLogin.setLastUpdated('201302271100Z')
if mibBuilder.loadTexts: hpnicfFcFLogin.setOrganization('')
if mibBuilder.loadTexts: hpnicfFcFLogin.setContactInfo('')
if mibBuilder.loadTexts: hpnicfFcFLogin.setDescription('This MIB module is for representing fabric login information.')
hpnicfFcFLoginMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1))
hpnicfFcFLoginTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1), )
if mibBuilder.loadTexts: hpnicfFcFLoginTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginTable.setDescription('A table of Fibre Channel related service parameters used to represent the fabric login information in accord with each Nx_Port attached to a particular Fibre Channel port in a particular VSAN (Virtual Storage Area Network). Each entry is created by a fabric switch when an Nx_Port successfully logged in to it explicitly or implicitly, and is deleted when the port logged out.')
hpnicfFcFLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-VSAN-MIB", "hpnicfVsanIndex"), (0, "HPN-ICF-FC-FLOGIN-MIB", "hpnicfFcFLoginIndex"))
if mibBuilder.loadTexts: hpnicfFcFLoginEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginEntry.setDescription('A group of Fibre Channel related service parameters used to represent fabric login information of a specific Nx_Port.')
hpnicfFcFLoginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 1), HpnicfFcAddressId())
if mibBuilder.loadTexts: hpnicfFcFLoginIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginIndex.setDescription('The index of current fabric login entry. The Fibre Channel address identifier is used to identify the associated Nx_Port of this entry.')
hpnicfFcFLoginPortNodeWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 2), HpnicfFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginPortNodeWWN.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginPortNodeWWN.setDescription('The world wide name of the Remote Node to which the logged-in Nx_Port belongs.')
hpnicfFcFLoginPortWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 3), HpnicfFcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginPortWWN.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginPortWWN.setDescription('The world wide name of the logged-in Nx_Port.')
hpnicfFcFLoginPortFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 4), HpnicfFcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginPortFcId.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginPortFcId.setDescription('The Fibre Channel address identifier that has been assigned by the fabric to the logged-in Nx_Port.')
hpnicfFcFLoginRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 5), HpnicfFcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginRxBbCredit.setDescription('The maximum number of buffers available for a recipient to receive frames from the logged-in Nx_Port in Class2, Class3. The object is used in the buffer-to-buffer flow control from the logged-in Nx_Port to Fx_Port.')
hpnicfFcFLoginTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 6), HpnicfFcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginTxBbCredit.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginTxBbCredit.setDescription('The total number of buffers available for a sender to transmit frames to the logged-in Nx_Port in Class2, Class3. The object is used in the buffer-to-buffer flow control from Fx_Port to the logged-in Nx_Port.')
hpnicfFcFLoginClass2RxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 7), HpnicfFcRxMTU()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginClass2RxMTU.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginClass2RxMTU.setDescription('The object specifies the Maximum Transmission Unit of an Fibre Channel frame that can be received by the logged-in Nx_Port in Class 2 service.')
hpnicfFcFLoginClass3RxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 8), HpnicfFcRxMTU()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginClass3RxMTU.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginClass3RxMTU.setDescription('The object specifies the Maximum Transmission Unit of an Fibre Channel frame that can be received by the logged-in Nx_Port in Class 3 service.')
hpnicfFcFLoginSuppClassRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 9), HpnicfFcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginSuppClassRequested.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginSuppClassRequested.setDescription('The object indicating the supported Classes that the logged-in Nx_Port has requested.')
hpnicfFcFLoginClass2ReqAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginClass2ReqAgreed.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginClass2ReqAgreed.setDescription("The object indicating whether the Fx_Port has agreed to support Class 2 delivery that the logged-in Nx_Port requested. It's meaningful only when the Class 2 delivery has been requested.")
hpnicfFcFLoginClass3ReqAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 3, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcFLoginClass3ReqAgreed.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcFLoginClass3ReqAgreed.setDescription("The object indicating whether the Fx_Port has agreed to support Class 3 delivery that the logged-in Nx_Port requested. It's meaningful only when the Class 3 delivery has been requested.")
mibBuilder.exportSymbols("HPN-ICF-FC-FLOGIN-MIB", hpnicfFcFLoginClass3RxMTU=hpnicfFcFLoginClass3RxMTU, hpnicfFcFLoginPortFcId=hpnicfFcFLoginPortFcId, hpnicfFcFLoginMibObjects=hpnicfFcFLoginMibObjects, hpnicfFcFLoginRxBbCredit=hpnicfFcFLoginRxBbCredit, hpnicfFcFLoginEntry=hpnicfFcFLoginEntry, hpnicfFcFLogin=hpnicfFcFLogin, hpnicfFcFLoginTxBbCredit=hpnicfFcFLoginTxBbCredit, hpnicfFcFLoginSuppClassRequested=hpnicfFcFLoginSuppClassRequested, hpnicfFcFLoginClass3ReqAgreed=hpnicfFcFLoginClass3ReqAgreed, hpnicfFcFLoginTable=hpnicfFcFLoginTable, PYSNMP_MODULE_ID=hpnicfFcFLogin, hpnicfFcFLoginPortWWN=hpnicfFcFLoginPortWWN, hpnicfFcFLoginPortNodeWWN=hpnicfFcFLoginPortNodeWWN, hpnicfFcFLoginClass2RxMTU=hpnicfFcFLoginClass2RxMTU, hpnicfFcFLoginClass2ReqAgreed=hpnicfFcFLoginClass2ReqAgreed, hpnicfFcFLoginIndex=hpnicfFcFLoginIndex)
