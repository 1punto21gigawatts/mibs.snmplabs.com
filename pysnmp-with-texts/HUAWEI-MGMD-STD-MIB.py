#
# PySNMP MIB module HUAWEI-MGMD-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MGMD-STD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, NotificationType, Bits, Integer32, MibIdentifier, Gauge32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, ObjectIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Bits", "Integer32", "MibIdentifier", "Gauge32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "ObjectIdentity", "iso", "Unsigned32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hwMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149))
hwMgmdStdMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3))
hwMgmdStdMib.setRevisions(('2014-07-09 00:00', '2014-07-01 00:00', '2014-06-20 00:00', '2013-08-28 00:00', '2007-04-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwMgmdStdMib.setRevisionsDescriptions(('1.Add hwMgmdHostStarGThresholdExceed trap. 2.Add hwMgmdHostStarGThresholdExceedClear trap. 3.Add hwMgmdHostStarGExceed trap. 4.Add hwMgmdHostStarGExceedClear trap. 5.Add hwMgmdHostSGThreshodExceed trap. 6.Add hwMgmdHostSGThreshodExceedClear trap. 7.Add hwMgmdHostSGExceed trap. 8.Add hwMgmdHostSGExceedClear trap. ', '1.Correct trap name hwMgmdTotalLimitThreshodExceed to hwMgmdTotalLimitThresholdExceed and modify the description. 2.Correct trap name hwMgmdTotalLimitThreshodExceedClear to hwMgmdTotalLimitThresholdExceedClear and modify the description. ', '1.Add hwMgmdTotalLimitThreshodExceed trap. 2.Add hwMgmdTotalLimitThreshodExceedClear trap. ', 'Modify import mibs', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwMgmdStdMib.setLastUpdated('201407090000Z')
if mibBuilder.loadTexts: hwMgmdStdMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwMgmdStdMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwMgmdStdMib.setDescription('The MIB module for MGMD Management. Huawei Technologies Co.,Ltd . Supplementary information may be available at: http://www.huawei.com')
class HWMgmdCtlMsgState(TextualConvention, Integer32):
    description = 'The PIM control message state. valid(1) The valid IGMP/MLD control message has been received. invalid(2) The invalid IGMP/MLD control message has been received. ignore(3) The IGMP/MLD control message has been ignored.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("valid", 1), ("invalid", 2), ("ignore", 3))

hwMgmdMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1))
hwMgmdMibGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2))
hwMgmdMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3))
hwMgmdRouterInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4), )
if mibBuilder.loadTexts: hwMgmdRouterInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceTable.setDescription('The (conceptual) table listing the interfaces on which IGMP or MLD is enabled.')
hwMgmdRouterInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1), ).setIndexNames((0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceIfIndex"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceQuerierType"))
if mibBuilder.loadTexts: hwMgmdRouterInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceEntry.setDescription('An entry (conceptual row) representing an interface on which IGMP or MLD is enabled.')
hwMgmdRouterInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMgmdRouterInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceIfIndex.setDescription('The ifIndex value of the interface for which IGMP or MLD is enabled. The table is indexed by the ifIndex value and the InetAddressType to allow for interfaces that may be configured in both IPv4 and IPv6 modes.')
hwMgmdRouterInterfaceQuerierType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerierType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerierType.setDescription('The address type of this interface. This entry along with the ifIndex value acts as the index to the hwMgmdRouterInterface table. A physical interface may be configured in multiple modes concurrently, e.g., in IPv4 and IPv6 modes connected to the same interface; however, the traffic is considered to be logically separate.')
hwMgmdRouterInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerier.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerier.setDescription('The address of the IGMP or MLD Querier on the IP subnet to which this interface is attached. The InetAddressType, e.g., IPv4 or IPv6, is identified by the hwMgmdRouterInterfaceQuerierType variable in the hwMgmdRouterInterface table.')
hwMgmdRouterInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31744)).clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQueryInterval.setDescription('The frequency at which IGMP or MLD Host-Query packets are transmitted on this interface.')
hwMgmdRouterInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceStatus.setDescription('The activation of a row enables the router side of IGMP or MLD on the interface. The destruction of a row disables the router side of IGMP or MLD on the interface.')
hwMgmdRouterInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceVersion.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceVersion.setDescription('The version of MGMD that is running on this interface. Value 1 applies to IGMPv1 routers only. Value 2 applies to IGMPv2 and MLDv1 routers, and value 3 applies to IGMPv3 and MLDv2 routers. This object can be used to configure a router capable of running either version. For IGMP and MLD to function correctly, all routers on a LAN must be configured to run the same version on that LAN.')
hwMgmdRouterInterfaceQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQueryMaxResponseTime.setReference('RFC 3810, Section 9.3')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQueryMaxResponseTime.setDescription('The maximum query response interval advertised in MGMDv2 or IGMPv3 queries on this interface.')
hwMgmdRouterInterfaceQuerierUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerierUpTime.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerierUpTime.setDescription('The time since hwMgmdRouterInterfaceQuerier was last changed.')
hwMgmdRouterInterfaceQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerierExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceQuerierExpiryTime.setDescription('The amount of time remaining before the Other Querier Present Timer expires. If the local system is the querier, the value of this object is zero.')
hwMgmdRouterInterfaceWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceWrongVersionQueries.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceWrongVersionQueries.setDescription('The number of general queries received whose IGMP or MLD version does not match the equivalent hwMgmdRouterInterfaceVersion, over the lifetime of the row entry. Both IGMP and MLD require that all routers on a LAN be configured to run the same version. Thus, if any general queries are received with the wrong version, this indicates a configuration error.')
hwMgmdRouterInterfaceJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceJoins.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceJoins.setDescription('The number of times a group membership has been added on this interface, that is, the number of times an entry for this interface has been added to the Cache Table. This object can give an indication of the amount of activity between samples over time.')
hwMgmdRouterInterfaceProxyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceProxyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceProxyIfIndex.setDescription('Some devices implement a form of IGMP or MLD proxying whereby memberships learned on the interface represented by this row cause Host Membership Reports to be sent on the interface whose ifIndex value is given by this object. Such a device would implement the hwMgmdV2RouterBaseMIBGroup only on its router interfaces (those interfaces with non-zero hwMgmdRouterInterfaceProxyIfIndex). Typically, the value of this object is 0, indicating that no proxying is being done.')
hwMgmdRouterInterfaceGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceGroups.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceGroups.setDescription('The current number of entries for this interface in the RouterCache Table.')
hwMgmdRouterInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceRobustness.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP and MLD are robust to (Robustness Variable-1) packet losses.')
hwMgmdRouterInterfaceLastMembQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(10)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceLastMembQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceLastMembQueryIntvl.setDescription('The Last Member Query Interval is the Max Query Response Interval inserted into group-specific queries sent in response to leave group messages, and is also the amount of time between group-specific query messages. This value may be tuned to modify the leave latency of the network. A reduced value results in reduced time to detect the loss of the last member of a group. The value of this object is irrelevant if hwMgmdRouterInterfaceVersion is 1.')
hwMgmdRouterInterfaceLastMembQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceLastMembQueryCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceLastMembQueryCount.setDescription('Represents the number of group-specific and group-and- source-specific queries sent by the router before it assumes there are no local members.')
hwMgmdRouterInterfaceStartupQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceStartupQueryCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceStartupQueryCount.setDescription('Represents the number of Queries sent out on startup, separated by the Startup Query Interval.')
hwMgmdRouterInterfaceStartupQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterInterfaceStartupQueryInterval.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterInterfaceStartupQueryInterval.setDescription('This variable represents the interval between General Queries sent by a Querier on startup.')
hwMgmdRouterCacheTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6), )
if mibBuilder.loadTexts: hwMgmdRouterCacheTable.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheTable.setDescription('The (conceptual) table listing the IP multicast groups for which there are members on a particular router interface.')
hwMgmdRouterCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1), ).setIndexNames((0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheAddressType"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheAddress"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheIfIndex"))
if mibBuilder.loadTexts: hwMgmdRouterCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheEntry.setDescription('An entry (conceptual row) in the hwMgmdRouterCacheTable.')
hwMgmdRouterCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hwMgmdRouterCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheAddressType.setDescription('The address type of the hwMgmdRouterCacheTable entry. This value applies to both the hwMgmdRouterCacheAddress and the hwMgmdRouterCacheLastReporter entries.')
hwMgmdRouterCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hwMgmdRouterCacheAddress.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheAddress.setDescription('The IP multicast group address for which this entry contains information. The InetAddressType, e.g., IPv4 or IPv6, is identified by the hwMgmdRouterCacheAddressType variable in the hwMgmdRouterCache table.')
hwMgmdRouterCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hwMgmdRouterCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheIfIndex.setDescription('The interface for which this entry contains information for an IP multicast group address.')
hwMgmdRouterCacheLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheLastReporter.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheLastReporter.setDescription('The IP address of the source of the last membership report received for this IP multicast group address on this interface. If no membership report has been received, this object has the value 0. The InetAddressType, e.g., IPv4 or IPv6, is identified by the hwMgmdRouterCacheAddressType variable in the hwMgmdRouterCache table.')
hwMgmdRouterCacheUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheUpTime.setDescription('The time elapsed since this entry was created.')
hwMgmdRouterCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheExpiryTime.setDescription('This value represents the time remaining before the Group Membership Interval state expires. The value must always be greater than or equal to 1.')
hwMgmdRouterCacheExcludeModeExpiryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheExcludeModeExpiryTimer.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheExcludeModeExpiryTimer.setDescription('This value is applicable only to MGMDv3-compatible nodes and represents the time remaining before the interface EXCLUDE state expires and the interface state transitions to INCLUDE mode. This value can never be greater than hwMgmdRouterCacheExpiryTime.')
hwMgmdRouterCacheVersion1HostTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheVersion1HostTimer.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheVersion1HostTimer.setDescription('The time remaining until the local router will assume that there are no longer any MGMD version 1 members on the IP subnet attached to this interface. This entry only applies to IGMPv1 hosts, and is not implemented for MLD. Upon hearing any MGMDv1 Membership Report (IGMPv1 only), this value is reset to the group membership timer. While this time remaining is non-zero, the local router ignores any MGMDv2 Leave messages (IGMPv2 only) for this group that it receives on this interface.')
hwMgmdRouterCacheVersion2HostTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheVersion2HostTimer.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheVersion2HostTimer.setDescription('The time remaining until the local router will assume that there are no longer any MGMD version 2 members on the IP subnet attached to this interface. This entry applies to both IGMP and MLD hosts. Upon hearing any MGMDv2 Membership Report, this value is reset to the group membership timer. Assuming no MGMDv1 hosts have been detected, the local router does not ignore any MGMDv2 Leave messages for this group that it receives on this interface.')
hwMgmdRouterCacheSourceFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterCacheSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterCacheSourceFilterMode.setDescription('The current cache state, applicable to MGMDv3 compatible nodes. The value indicates whether the state is INCLUDE or EXCLUDE.')
hwMgmdInverseRouterCacheTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 8), )
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheTable.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheTable.setDescription('The (conceptual) table listing the interfaces that are members of a particular group. This is an inverse lookup table for entries in the hwMgmdRouterCacheTable.')
hwMgmdInverseRouterCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 8, 1), ).setIndexNames((0, "HUAWEI-MGMD-STD-MIB", "hwMgmdInverseRouterCacheIfIndex"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdInverseRouterCacheAddressType"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdInverseRouterCacheAddress"))
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheEntry.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheEntry.setDescription('An entry (conceptual row) in the hwMgmdInverseRouterCacheTable.')
hwMgmdInverseRouterCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheIfIndex.setDescription('The interface for which this entry contains information.')
hwMgmdInverseRouterCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 8, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheAddressType.setDescription('The address type of the hwMgmdInverseRouterCacheTable entry.')
hwMgmdInverseRouterCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 8, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheAddress.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInverseRouterCacheAddress.setDescription('The IP multicast group address for which this entry contains information. The InetAddressType, e.g., IPv4 or IPv6, is identified by the hwMgmdInverseRouterCacheAddressType variable in the hwMgmdInverseRouterCache table.')
hwMgmdRouterSrcListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10), )
if mibBuilder.loadTexts: hwMgmdRouterSrcListTable.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListTable.setDescription('The (conceptual) table listing the Source List entries corresponding to each interface and multicast group pair on a Router.')
hwMgmdRouterSrcListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10, 1), ).setIndexNames((0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterSrcListAddressType"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterSrcListAddress"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterSrcListIfIndex"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdRouterSrcListHostAddress"))
if mibBuilder.loadTexts: hwMgmdRouterSrcListEntry.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListEntry.setDescription('An entry (conceptual row) in the hwMgmdRouterSrcListTable.')
hwMgmdRouterSrcListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hwMgmdRouterSrcListAddressType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListAddressType.setDescription('The address type of the InetAddress variables in this table. This value applies to the hwMgmdRouterSrcListHostAddress and hwMgmdRouterSrcListAddress entries.')
hwMgmdRouterSrcListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: hwMgmdRouterSrcListAddress.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListAddress.setDescription('The IP multicast group address for which this entry contains information.')
hwMgmdRouterSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: hwMgmdRouterSrcListIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListIfIndex.setDescription('The interface for which this entry contains information for an IP multicast group address.')
hwMgmdRouterSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterSrcListHostAddress.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListHostAddress.setDescription('The host address to which this entry corresponds. The hwMgmdRouterCacheSourceFilterMode value for this group address and interface indicates whether this host address is included or excluded.')
hwMgmdRouterSrcListExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 10, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdRouterSrcListExpire.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterSrcListExpire.setDescription('This value indicates the relevance of the SrcList entry, whereby a non-zero value indicates this is an INCLUDE state value, and a zero value indicates this to be an EXCLUDE state value.')
hwMgmdCtlMsgCountTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11), )
if mibBuilder.loadTexts: hwMgmdCtlMsgCountTable.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountTable.setDescription('The (conceptual) table used to list the control message counter on all the interfaces on which IGMP or MLD is enabled.')
hwMgmdCtlMsgCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1), ).setIndexNames((0, "HUAWEI-MGMD-STD-MIB", "hwMgmdCtlMsgCountIfIndex"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdCtlMsgCountQuerierType"), (0, "HUAWEI-MGMD-STD-MIB", "hwMgmdCtlMsgCountState"))
if mibBuilder.loadTexts: hwMgmdCtlMsgCountEntry.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountEntry.setDescription('An entry (conceptual row) representing an interface on which IGMP or MLD is enabled. Dynamically created row state is non-volatile, and upon agent reboot should be reinstantiated as a conceptual row. Any change in read-create objects should therefore be backed up by stable storage.')
hwMgmdCtlMsgCountIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwMgmdCtlMsgCountIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountIfIndex.setDescription('The ifIndex value of the interface for which IGMP or MLD is enabled. The table is indexed by the ifIndex value and the InetAddressType to allow for interfaces which may be configured in both IPv4 and IPv6 modes.')
hwMgmdCtlMsgCountQuerierType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hwMgmdCtlMsgCountQuerierType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountQuerierType.setDescription('The address type of this interface. This entry along with the ifIndex value acts as the index to the hwMgmdRouterInterface table. A physical interface may be configured in multiple modes concurrently, e.g. in IPv4 and IPv6 modes connected to the same interface, however the traffic is considered to be logically separate.')
hwMgmdCtlMsgCountState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 3), HWMgmdCtlMsgState())
if mibBuilder.loadTexts: hwMgmdCtlMsgCountState.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountState.setDescription('The IGMP/MLD control message state.')
hwMgmdCtlMsgCountQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountQuery.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountQuery.setDescription('The number of IGMP/MLD Query on this interface.')
hwMgmdCtlMsgCountReportASM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountReportASM.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountReportASM.setDescription('The number of IGMP/MLD report with ASM group on this interface.')
hwMgmdCtlMsgCountReportSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountReportSSM.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountReportSSM.setDescription('The number of IGMP/MLD report with SSM group on this interface.')
hwMgmdCtlMsgCountLeaveASM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountLeaveASM.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountLeaveASM.setDescription('The number of IGMP/MLD leave with ASM group on this interface.')
hwMgmdCtlMsgCountLeaveSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountLeaveSSM.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountLeaveSSM.setDescription('The number of IGMP/MLD leave with ASM group on this interface.')
hwMgmdCtlMsgCountISIN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountISIN.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountISIN.setDescription('The number of IGMP/MLD is_in on this interface.')
hwMgmdCtlMsgCountISEX = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountISEX.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountISEX.setDescription('The number of IGMP/MLD is_ex on this interface.')
hwMgmdCtlMsgCountTOIN = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountTOIN.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountTOIN.setDescription('The number of IGMP/MLD to_in on this interface.')
hwMgmdCtlMsgCountTOEX = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountTOEX.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountTOEX.setDescription('The number of IGMP/MLD to_ex on this interface.')
hwMgmdCtlMsgCountALLOW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountALLOW.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountALLOW.setDescription('The number of IGMP/MLD allow on this interface.')
hwMgmdCtlMsgCountBLOCK = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountBLOCK.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountBLOCK.setDescription('The number of IGMP/MLD block on this interface.')
hwMgmdCtlMsgCountSrcRecTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountSrcRecTotal.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountSrcRecTotal.setDescription('The number of total IGMP/MLD source record on this interface.')
hwMgmdCtlMsgCountOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 1, 11, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdCtlMsgCountOthers.setStatus('current')
if mibBuilder.loadTexts: hwMgmdCtlMsgCountOthers.setDescription('The number of total IGMP/MLD others packet on this interface.')
hwMgmdGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwMgmdGroup.setDescription('Group address of the entry.')
hwMgmdSource = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdSource.setStatus('obsolete')
if mibBuilder.loadTexts: hwMgmdSource.setDescription('Source address of the entry.')
hwMgmdLimitInterfaceIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdLimitInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdLimitInterfaceIfIndex.setDescription('The interface from which an IGMP or a MLD limit trap is most recently sent. If this router has not sent a limit trap, this object is set to 0.')
hwMgmdGlobalEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdGlobalEntries.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGlobalEntries.setDescription('The total number of IGMP or MLD entries of this instance.')
hwMgmdInterfaceEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdInterfaceEntries.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInterfaceEntries.setDescription('The total number of IGMP or MLD entries on the interface.')
hwMgmdTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hwMgmdTotalEntries.setDescription('The total number of IGMP or MLD entries of all instances.')
hwMgmdGmpJoinGrpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpJoinGrpAddr.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpJoinGrpAddr.setDescription('The IGMP or MLD group address to join.')
hwMgmdGmpJoinSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpJoinSrcAddr.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpJoinSrcAddr.setDescription('The IGMP or MLD source address to join.')
hwMgmdGmpJoinSenderIp = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpJoinSenderIp.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpJoinSenderIp.setDescription('The host IP address for sending membership report.')
hwMgmdGmpJoinVersion = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpJoinVersion.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpJoinVersion.setDescription('The version of MGMD which is running on this interface. Value 1 applies to IGMPv1 and MLDv1 version. Value 2 applies to IGMPv2 and MLDv2 version, and value 3 applies to IGMPv3 version. This object can be used to configure a router capable of running either version. For IGMP and MLD to function correctly, all routers on a LAN must be configured to run the same version on that LAN. This object MAY be modified under any rowstatus condition. ???? DEFVAL { 2 }')
hwMgmdGmpInterfaceIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 11), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpInterfaceIfIndex.setDescription('The ifIndex value of the interface for which IGMP or MLD is enabled. The table is indexed by the ifIndex value and the InetAddressType to allow for interfaces which may be configured in both IPv4 and IPv6 modes.')
hwMgmdGmpInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpInterfaceName.setDescription('The interface name of the interface for which IGMP or MLD is enabled.')
hwMgmdGmpLimitGroupAddressType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 13), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpLimitGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpLimitGroupAddressType.setDescription('The address type of the multicast group address in the most recently sent IGMP or MLD limit trap. If this router has not sent a limit trap, this object is set to 0.')
hwMgmdGmpLimitGroup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 14), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpLimitGroup.setDescription('The multicast group address in the most recently sent IGMP or MLD limit trap. The InetAddressType is defined by the hwMgmdGmpLimitGroupAddressType object.')
hwMgmdGmpLimitSource = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 15), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdGmpLimitSource.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpLimitSource.setDescription('The source address in the most recently sent IGMP or MLD limit trap. The InetAddressType is defined by the hwMgmdGmpLimitGroupAddressType object.')
hwMgmdInstanceName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdInstanceName.setStatus('current')
if mibBuilder.loadTexts: hwMgmdInstanceName.setDescription('The instance name of the trap.')
hwMgmdNotificationAddressType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 17), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdNotificationAddressType.setStatus('current')
if mibBuilder.loadTexts: hwMgmdNotificationAddressType.setDescription('The address type of the multicast group address in the most recently sent IGMP or MLD limit trap.')
hwMgmdTotalLimitCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMgmdTotalLimitCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdTotalLimitCurrentCount.setDescription('The current number of IGMP or MLD entries of all instances.')
hwMgmdTotalLimitThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdTotalLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMgmdTotalLimitThreshold.setDescription('The threshold value of IGMP or MLD entries uppper limit(%) of all instances.')
hwMgmdHostStarGCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostStarGCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGCurrentCount.setDescription('The current number of IGMP or MLD proxy (*, G) entries of all instances.')
hwMgmdHostStarGThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostStarGThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGThreshold.setDescription('The threshold value of IGMP or MLD proxy (*, G) entries uppper limit(%) of all instances.')
hwMgmdHostStarGTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostStarGTotalCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGTotalCount.setDescription('The total number of IGMP or MLD proxy (*, G) entries of all instances.')
hwMgmdHostNotificationSrcAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 23), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostNotificationSrcAddr.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostNotificationSrcAddr.setDescription('The source address in the most recently sent IGMP or MLD proxy limit trap.')
hwMgmdHostNotificationGrpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 24), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostNotificationGrpAddr.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostNotificationGrpAddr.setDescription('The multicast group address in the most recently sent IGMP or MLD proxy limit trap.')
hwMgmdHostSGCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostSGCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGCurrentCount.setDescription('The current number of IGMP or MLD proxy (S, G) entries of all instances.')
hwMgmdHostSGThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostSGThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGThreshold.setDescription('The threshold value of IGMP or MLD proxy (S, G)entries uppper limit(%) of all instances.')
hwMgmdHostSGTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 2, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMgmdHostSGTotalCount.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGTotalCount.setDescription('The total number of IGMP or MLD proxy (S, G) entries of all instances.')
hwMgmdGlobalLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 1)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGlobalEntries"))
if mibBuilder.loadTexts: hwMgmdGlobalLimit.setStatus('obsolete')
if mibBuilder.loadTexts: hwMgmdGlobalLimit.setDescription('A hwMgmdGlobalLimit notification signifies that an IGMP report has been limited for up to maximum entries of IGMP global routing-table. This notification is generated whenever an IGMP report failed to create membership as IGMP global routing-table limit.')
hwMgmdInterfaceLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 2)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdLimitInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInterfaceEntries"))
if mibBuilder.loadTexts: hwMgmdInterfaceLimit.setStatus('obsolete')
if mibBuilder.loadTexts: hwMgmdInterfaceLimit.setDescription('A hwMgmdInterfaceLimit notification signifies that an IGMP report has been limited for up to maximum entries of IGMP interface routing-table. This notification is generated whenever an IGMP report failed to create membership as IGMP interface routing-table limit.')
hwMgmdTotalLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 3)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalEntries"))
if mibBuilder.loadTexts: hwMgmdTotalLimit.setStatus('obsolete')
if mibBuilder.loadTexts: hwMgmdTotalLimit.setDescription('A hwMgmdTotalLimit notification signifies that an IGMP report has been limited for up to maximum entries of IGMP total routing-table. This notification is generated whenever an IGMP report failed to create membership as IGMP total routing-table limit.')
hwMgmdGmpJoin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 4)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceName"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinVersion"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinSrcAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinGrpAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinSenderIp"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdGmpJoin.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpJoin.setDescription('A hwMgmdGmpJoin notification signifies the IGMP or MLD join message was received.')
hwMgmdGmpLeave = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 5)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceName"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinSrcAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinGrpAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdGmpLeave.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGmpLeave.setDescription('A hwMgmdGmpLeave notification signifies the IGMP or MLD group leaved.')
hwMgmdGMPGlobalLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 6)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGlobalEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdGMPGlobalLimit.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGMPGlobalLimit.setDescription('This object indicates that the number of global IGMP or MLD entries of the instance reaches the upper limit. This trap message is generated when IGMP or MLD fails to create membership because the number of global IGMP or MLD entries of the instance reaches the upper limit.')
hwMgmdGMPInterfaceLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 7)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdLimitInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInterfaceEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceName"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdGMPInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGMPInterfaceLimit.setDescription('This object indicates that the number of IGMP or MLD entries on the interface reaches the upper limit. This trap message is generated when IGMP or MLD fails to create membership because the number of IGMP or MLD entries on the interface reaches the upper limit.')
hwMgmdGMPTotalLimit = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 8)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalEntries"))
if mibBuilder.loadTexts: hwMgmdGMPTotalLimit.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGMPTotalLimit.setDescription('This object indicates that the number of IGMP or MLD entries of all instances reaches the upper limit. This trap message is generated when IGMP or MLD fails to create membership because the number of IGMP or MLD entries of all instances reaches the upper limit.')
hwMgmdGMPInterfaceLimitClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 9)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdLimitInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInterfaceEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceName"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdGMPInterfaceLimitClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGMPInterfaceLimitClear.setDescription('This object indicates that the number of IGMP or MLD entries on the interface falls below the upper limit. This trap message is generated when IGMP or MLD delete an entry resulting in the number of IGMP or MLD entries on the interface falls below the upper limit.')
hwMgmdGMPGlobalLimitClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 10)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGlobalEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdGMPGlobalLimitClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGMPGlobalLimitClear.setDescription('This object indicates that the number of global IGMP or MLD entries of the instance falls blow the upper limit. This trap message is generated when IGMP or MLD delete an entry resulting in the number of global IGMP or MLD entries of the instance falls below the upper limit.')
hwMgmdGMPTotalLimitClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 11)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalEntries"))
if mibBuilder.loadTexts: hwMgmdGMPTotalLimitClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdGMPTotalLimitClear.setDescription('This object indicates that the number of IGMP or MLD entries of all instances falls below the upper limit. This trap message is generated when IGMP or MLD delete an entry resulting in the number of IGMP or MLD entries of all instances falls below the upper limit.')
hwMgmdTotalLimitThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 12)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalEntries"))
if mibBuilder.loadTexts: hwMgmdTotalLimitThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwMgmdTotalLimitThresholdExceed.setDescription('A hwMgmdTotalLimitThresholdExceed notification signifies that IGMP or MLD entries count of all instances reached the upper threshold.')
hwMgmdTotalLimitThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 13)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalEntries"))
if mibBuilder.loadTexts: hwMgmdTotalLimitThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdTotalLimitThresholdExceedClear.setDescription('A hwMgmdTotalLimitThresholdExceedClear notification signifies that IGMP or MLD entries count of all instances fell below the lower threshold.')
hwMgmdHostStarGThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 14)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGTotalCount"))
if mibBuilder.loadTexts: hwMgmdHostStarGThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGThresholdExceed.setDescription('A hwMgmdHostStarGThresholdExceed notification signifies that IGMP or MLD proxy (*, G) entries count of all instances reached the upper threshold.')
hwMgmdHostStarGThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 15)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGTotalCount"))
if mibBuilder.loadTexts: hwMgmdHostStarGThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGThresholdExceedClear.setDescription('A hwMgmdHostStarGThresholdExceedClear notification signifies that IGMP or MLD proxy (*, G) entries count of all instances fell below the lower threshold.')
hwMgmdHostStarGExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 16)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostNotificationSrcAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostNotificationGrpAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGTotalCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdHostStarGExceed.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGExceed.setDescription('A hwMgmdHostStarGExceed notification signifies that IGMP or MLD proxy (*, G) entries can not be created because the limit is reached.')
hwMgmdHostStarGExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 17)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGTotalCount"))
if mibBuilder.loadTexts: hwMgmdHostStarGExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostStarGExceedClear.setDescription('A hwMgmdHostStarGExceedClear notification signifies that IGMP or MLD proxy (*, G) entries can be created because can be created because the number of IGMP or MLD (*, G) entries fell below the limit.')
hwMgmdHostSGThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 18)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGTotalCount"))
if mibBuilder.loadTexts: hwMgmdHostSGThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGThresholdExceed.setDescription('A hwMgmdHostSGThresholdExceed notification signifies that IGMP or MLD proxy (S, G) entries count of all instances reached the upper threshold.')
hwMgmdHostSGThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 19)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGTotalCount"))
if mibBuilder.loadTexts: hwMgmdHostSGThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGThresholdExceedClear.setDescription('A hwMgmdHostSGThresholdExceedClear notification signifies that IGMP or MLD proxy (S, G) entries count of all instances fell below the lower threshold.')
hwMgmdHostSGExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 20)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostNotificationSrcAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostNotificationGrpAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGTotalCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"))
if mibBuilder.loadTexts: hwMgmdHostSGExceed.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGExceed.setDescription('A hwMgmdHostSGExceed notification signifies that IGMP or MLD proxy (S, G) entries can not be created because the limit of all instances is reached.')
hwMgmdHostSGExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 3, 21)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGTotalCount"))
if mibBuilder.loadTexts: hwMgmdHostSGExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMgmdHostSGExceedClear.setDescription('A hwMgmdHostSGExceedClear notification signifies that IGMP or MLD proxy (S, G) entries can be created because can be created because the number of IGMP or MLD (S, G) entries of all instances fell below the limit.')
hwMgmdMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4))
hwMgmdMibCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 3))
hwMgmdMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4))
hwMgmdIgmpV1RouterMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 3, 2)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterBaseMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdIgmpV1RouterMibCompliance = hwMgmdIgmpV1RouterMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMgmdIgmpV1RouterMibCompliance.setDescription('The version statement for routers running IGMPv1, RFC 1112 [4], and implementing the MGMD Mib. MGMDv1 applies to hosts and routers running IGMPv1 only. IGMPv1 routers must support the IPv4 address type ')
hwMgmdIgmpV2RouterMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 3, 4)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2RouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2IgmpRouterMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2RouterOptMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2ProxyMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdMibNotificationObjects"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdMibNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdIgmpV2RouterMibCompliance = hwMgmdIgmpV2RouterMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMgmdIgmpV2RouterMibCompliance.setDescription('The version statement for routers running IGMPv2, RFC 2236 [5], and implementing the MGMD Mib. MGMDv2 applies to hosts and routers running IGMPv2 or MLDv1. IGMPv2 routers must support the IPv4 address type ')
hwMgmdMldV1RouterMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 3, 6)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2RouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2RouterOptMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2ProxyMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdMibNotificationObjects"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdMibNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdMldV1RouterMibCompliance = hwMgmdMldV1RouterMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMgmdMldV1RouterMibCompliance.setDescription('The version statement for routers running MLDv1, RFC 2710 [7], and implementing the MGMD Mib. MGMDv2 applies to hosts and routers running IGMPv2 or MLDv1. MLDv1 routers must support the IPv6 address type.')
hwMgmdIgmpV3RouterMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 3, 8)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2RouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2IgmpRouterMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV3RouterMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdIgmpV3RouterMibCompliance = hwMgmdIgmpV3RouterMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMgmdIgmpV3RouterMibCompliance.setDescription('The version statement for routers running IGMPv3, RFC 3376 [6], and implementing the MGMD Mib. MGMDv3 applies to hosts and routers running IGMPv3 or MLDv2. IGMPv3 routers must support the IPv4 address type.')
hwMgmdMldV2RouterMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 3, 10)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV2RouterBaseMibGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdV3RouterMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdMldV2RouterMibCompliance = hwMgmdMldV2RouterMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMgmdMldV2RouterMibCompliance.setDescription('The version statement for routers running MLDv2 [8] and implementing the MGMD Mib. MGMDv3 applies to hosts and routers running IGMPv3 or MLDv2. MLDv2 routers must support the IPv6 address type.')
hwMgmdRouterBaseMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 2)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceStatus"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheUpTime"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheExpiryTime"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceJoins"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceGroups"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheLastReporter"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceQuerierUpTime"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceQuerierExpiryTime"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdRouterBaseMibGroup = hwMgmdRouterBaseMibGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdRouterBaseMibGroup.setDescription('The basic collection of objects providing management of MGMD version 1, 2 or 3 for Routers.')
hwMgmdV2RouterBaseMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 6)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceVersion"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceQuerier"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceQueryMaxResponseTime"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceRobustness"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceWrongVersionQueries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceLastMembQueryIntvl"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceLastMembQueryCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceStartupQueryCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceStartupQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdV2RouterBaseMibGroup = hwMgmdV2RouterBaseMibGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdV2RouterBaseMibGroup.setDescription('A collection of additional objects for management of MGMD version 2 in routers.')
hwMgmdV2IgmpRouterMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 7)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheVersion1HostTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdV2IgmpRouterMibGroup = hwMgmdV2IgmpRouterMibGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdV2IgmpRouterMibGroup.setDescription('A collection of further objects required by IGMPv2 routers for MGMD version 2 compliance. ')
hwMgmdV2ProxyMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 8)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterInterfaceProxyIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdV2ProxyMibGroup = hwMgmdV2ProxyMibGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdV2ProxyMibGroup.setDescription('A collection of additional objects for management of MGMD proxy devices.')
hwMgmdV2RouterOptMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 9)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdInverseRouterCacheAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdV2RouterOptMibGroup = hwMgmdV2RouterOptMibGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdV2RouterOptMibGroup.setDescription('An additional optional object for management of MGMD version 2 in routers.')
hwMgmdV3RouterMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 11)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheSourceFilterMode"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheVersion2HostTimer"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterCacheExcludeModeExpiryTimer"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterSrcListHostAddress"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdRouterSrcListExpire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdV3RouterMibGroup = hwMgmdV3RouterMibGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdV3RouterMibGroup.setDescription('A collection of additional objects for management of MGMD version 3 in routers.')
hwMgmdMibNotificationObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 12)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdLimitInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGlobalEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInterfaceEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalEntries"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinGrpAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinSrcAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinSenderIp"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoinVersion"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceIfIndex"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpInterfaceName"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroupAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitGroup"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLimitSource"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInstanceName"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdNotificationAddressType"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGTotalCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostNotificationSrcAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostNotificationGrpAddr"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGCurrentCount"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGThreshold"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGTotalCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdMibNotificationObjects = hwMgmdMibNotificationObjects.setStatus('current')
if mibBuilder.loadTexts: hwMgmdMibNotificationObjects.setDescription('A collection of objects to support notification of MGMD notification network management events.')
hwMgmdMibNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 149, 3, 4, 4, 13)).setObjects(("HUAWEI-MGMD-STD-MIB", "hwMgmdGlobalLimit"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdInterfaceLimit"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimit"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpJoin"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGmpLeave"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGMPGlobalLimit"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGMPInterfaceLimit"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGMPTotalLimit"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGMPInterfaceLimitClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGMPGlobalLimitClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdGMPTotalLimitClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitThresholdExceed"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdTotalLimitThresholdExceedClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGThresholdExceed"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGThresholdExceedClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGExceed"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostStarGExceedClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGThresholdExceed"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGThresholdExceedClear"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGExceed"), ("HUAWEI-MGMD-STD-MIB", "hwMgmdHostSGExceedClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMgmdMibNotificationGroup = hwMgmdMibNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwMgmdMibNotificationGroup.setDescription('A collection of notifications for signaling MGMD notification management events.')
mibBuilder.exportSymbols("HUAWEI-MGMD-STD-MIB", hwMgmdRouterInterfaceQueryInterval=hwMgmdRouterInterfaceQueryInterval, hwMgmdRouterCacheVersion1HostTimer=hwMgmdRouterCacheVersion1HostTimer, hwMgmdRouterCacheExpiryTime=hwMgmdRouterCacheExpiryTime, hwMgmdHostStarGTotalCount=hwMgmdHostStarGTotalCount, hwMgmdRouterCacheExcludeModeExpiryTimer=hwMgmdRouterCacheExcludeModeExpiryTimer, hwMgmdMldV1RouterMibCompliance=hwMgmdMldV1RouterMibCompliance, hwMgmdMibNotificationObjects=hwMgmdMibNotificationObjects, hwMgmdHostSGExceed=hwMgmdHostSGExceed, hwMgmdRouterInterfaceQueryMaxResponseTime=hwMgmdRouterInterfaceQueryMaxResponseTime, hwMgmdRouterInterfaceRobustness=hwMgmdRouterInterfaceRobustness, hwMgmdRouterSrcListAddress=hwMgmdRouterSrcListAddress, hwMgmdHostSGExceedClear=hwMgmdHostSGExceedClear, hwMgmdGlobalLimit=hwMgmdGlobalLimit, hwMgmdGmpJoinVersion=hwMgmdGmpJoinVersion, hwMgmdNotificationAddressType=hwMgmdNotificationAddressType, hwMgmdTotalLimit=hwMgmdTotalLimit, hwMgmdRouterInterfaceLastMembQueryIntvl=hwMgmdRouterInterfaceLastMembQueryIntvl, hwMgmdInverseRouterCacheTable=hwMgmdInverseRouterCacheTable, hwMgmdRouterCacheAddress=hwMgmdRouterCacheAddress, hwMgmdCtlMsgCountQuerierType=hwMgmdCtlMsgCountQuerierType, hwMgmdGmpJoinSenderIp=hwMgmdGmpJoinSenderIp, hwMgmdGmpLimitGroup=hwMgmdGmpLimitGroup, hwMgmdGMPTotalLimitClear=hwMgmdGMPTotalLimitClear, hwMgmdIgmpV2RouterMibCompliance=hwMgmdIgmpV2RouterMibCompliance, hwMgmdRouterSrcListIfIndex=hwMgmdRouterSrcListIfIndex, hwMgmdV2RouterOptMibGroup=hwMgmdV2RouterOptMibGroup, hwMgmdHostSGThreshold=hwMgmdHostSGThreshold, hwMgmdLimitInterfaceIfIndex=hwMgmdLimitInterfaceIfIndex, hwMgmdGmpJoinGrpAddr=hwMgmdGmpJoinGrpAddr, hwMgmdRouterCacheTable=hwMgmdRouterCacheTable, hwMgmdCtlMsgCountSrcRecTotal=hwMgmdCtlMsgCountSrcRecTotal, hwMgmdRouterInterfaceProxyIfIndex=hwMgmdRouterInterfaceProxyIfIndex, hwMgmdGmpJoin=hwMgmdGmpJoin, hwMgmdHostStarGExceed=hwMgmdHostStarGExceed, hwMgmdRouterCacheIfIndex=hwMgmdRouterCacheIfIndex, hwMgmdCtlMsgCountLeaveSSM=hwMgmdCtlMsgCountLeaveSSM, hwMgmdIgmpV3RouterMibCompliance=hwMgmdIgmpV3RouterMibCompliance, hwMgmdRouterInterfaceQuerier=hwMgmdRouterInterfaceQuerier, hwMgmdMldV2RouterMibCompliance=hwMgmdMldV2RouterMibCompliance, hwMgmdRouterInterfaceQuerierExpiryTime=hwMgmdRouterInterfaceQuerierExpiryTime, hwMgmdRouterSrcListEntry=hwMgmdRouterSrcListEntry, hwMgmdCtlMsgCountTable=hwMgmdCtlMsgCountTable, hwMgmdInverseRouterCacheAddressType=hwMgmdInverseRouterCacheAddressType, hwMgmdRouterInterfaceTable=hwMgmdRouterInterfaceTable, hwMgmdCtlMsgCountTOIN=hwMgmdCtlMsgCountTOIN, hwMgmdTotalLimitCurrentCount=hwMgmdTotalLimitCurrentCount, hwMgmdRouterSrcListHostAddress=hwMgmdRouterSrcListHostAddress, hwMgmdGMPInterfaceLimit=hwMgmdGMPInterfaceLimit, hwMgmdRouterInterfaceQuerierType=hwMgmdRouterInterfaceQuerierType, hwMgmdGMPInterfaceLimitClear=hwMgmdGMPInterfaceLimitClear, hwMgmdRouterInterfaceJoins=hwMgmdRouterInterfaceJoins, hwMgmdRouterInterfaceEntry=hwMgmdRouterInterfaceEntry, PYSNMP_MODULE_ID=hwMgmdStdMib, hwMgmdCtlMsgCountISIN=hwMgmdCtlMsgCountISIN, hwMgmdInverseRouterCacheIfIndex=hwMgmdInverseRouterCacheIfIndex, hwMgmdRouterInterfaceWrongVersionQueries=hwMgmdRouterInterfaceWrongVersionQueries, hwMgmdMibObjects=hwMgmdMibObjects, hwMgmdTotalLimitThreshold=hwMgmdTotalLimitThreshold, hwMgmdV2ProxyMibGroup=hwMgmdV2ProxyMibGroup, hwMgmdInverseRouterCacheAddress=hwMgmdInverseRouterCacheAddress, hwMgmdHostNotificationGrpAddr=hwMgmdHostNotificationGrpAddr, hwMgmdRouterSrcListTable=hwMgmdRouterSrcListTable, hwMgmdGlobalEntries=hwMgmdGlobalEntries, hwMgmdRouterCacheEntry=hwMgmdRouterCacheEntry, hwMgmdCtlMsgCountBLOCK=hwMgmdCtlMsgCountBLOCK, hwMgmdRouterInterfaceVersion=hwMgmdRouterInterfaceVersion, hwMgmdRouterCacheLastReporter=hwMgmdRouterCacheLastReporter, hwMgmdGMPGlobalLimit=hwMgmdGMPGlobalLimit, hwMgmdCtlMsgCountLeaveASM=hwMgmdCtlMsgCountLeaveASM, hwMgmdHostSGThresholdExceedClear=hwMgmdHostSGThresholdExceedClear, hwMgmdSource=hwMgmdSource, hwMgmdHostSGTotalCount=hwMgmdHostSGTotalCount, hwMgmdMibGeneralObjects=hwMgmdMibGeneralObjects, hwMgmdCtlMsgCountQuery=hwMgmdCtlMsgCountQuery, hwMgmdTotalEntries=hwMgmdTotalEntries, hwMgmdCtlMsgCountOthers=hwMgmdCtlMsgCountOthers, hwMgmdV2RouterBaseMibGroup=hwMgmdV2RouterBaseMibGroup, hwMgmdRouterInterfaceGroups=hwMgmdRouterInterfaceGroups, hwMgmdMibNotificationGroup=hwMgmdMibNotificationGroup, hwMgmdTotalLimitThresholdExceedClear=hwMgmdTotalLimitThresholdExceedClear, hwMgmdCtlMsgCountReportSSM=hwMgmdCtlMsgCountReportSSM, hwMgmdRouterSrcListExpire=hwMgmdRouterSrcListExpire, hwMgmdInstanceName=hwMgmdInstanceName, hwMgmdMibNotifications=hwMgmdMibNotifications, hwMgmdCtlMsgCountIfIndex=hwMgmdCtlMsgCountIfIndex, hwMgmdGroup=hwMgmdGroup, hwMgmdCtlMsgCountEntry=hwMgmdCtlMsgCountEntry, hwMgmdRouterSrcListAddressType=hwMgmdRouterSrcListAddressType, hwMgmdRouterCacheVersion2HostTimer=hwMgmdRouterCacheVersion2HostTimer, hwMgmdRouterCacheUpTime=hwMgmdRouterCacheUpTime, hwMgmdCtlMsgCountISEX=hwMgmdCtlMsgCountISEX, hwMgmdCtlMsgCountReportASM=hwMgmdCtlMsgCountReportASM, hwMgmdGMPTotalLimit=hwMgmdGMPTotalLimit, hwMgmdGmpLimitGroupAddressType=hwMgmdGmpLimitGroupAddressType, HWMgmdCtlMsgState=HWMgmdCtlMsgState, hwMgmdMibGroups=hwMgmdMibGroups, hwMgmdRouterInterfaceStartupQueryInterval=hwMgmdRouterInterfaceStartupQueryInterval, hwMgmdHostStarGCurrentCount=hwMgmdHostStarGCurrentCount, hwMgmdHostStarGThreshold=hwMgmdHostStarGThreshold, hwMgmdRouterInterfaceQuerierUpTime=hwMgmdRouterInterfaceQuerierUpTime, hwMgmdRouterInterfaceStartupQueryCount=hwMgmdRouterInterfaceStartupQueryCount, hwMgmdCtlMsgCountTOEX=hwMgmdCtlMsgCountTOEX, hwMgmdRouterInterfaceStatus=hwMgmdRouterInterfaceStatus, hwMgmdRouterCacheSourceFilterMode=hwMgmdRouterCacheSourceFilterMode, hwMgmdV3RouterMibGroup=hwMgmdV3RouterMibGroup, hwMgmdIgmpV1RouterMibCompliance=hwMgmdIgmpV1RouterMibCompliance, hwMgmdInterfaceEntries=hwMgmdInterfaceEntries, hwMgmdGMPGlobalLimitClear=hwMgmdGMPGlobalLimitClear, hwMgmdGmpLimitSource=hwMgmdGmpLimitSource, hwMgmdRouterInterfaceLastMembQueryCount=hwMgmdRouterInterfaceLastMembQueryCount, hwMgmdInterfaceLimit=hwMgmdInterfaceLimit, hwMgmdCtlMsgCountALLOW=hwMgmdCtlMsgCountALLOW, hwMgmdTotalLimitThresholdExceed=hwMgmdTotalLimitThresholdExceed, hwMgmdInverseRouterCacheEntry=hwMgmdInverseRouterCacheEntry, hwMgmdGmpLeave=hwMgmdGmpLeave, hwMcast=hwMcast, hwMgmdGmpInterfaceIfIndex=hwMgmdGmpInterfaceIfIndex, hwMgmdRouterCacheAddressType=hwMgmdRouterCacheAddressType, hwMgmdGmpJoinSrcAddr=hwMgmdGmpJoinSrcAddr, hwMgmdStdMib=hwMgmdStdMib, hwMgmdHostStarGThresholdExceedClear=hwMgmdHostStarGThresholdExceedClear, hwMgmdMibCompliance=hwMgmdMibCompliance, hwMgmdRouterInterfaceIfIndex=hwMgmdRouterInterfaceIfIndex, hwMgmdHostStarGExceedClear=hwMgmdHostStarGExceedClear, hwMgmdHostStarGThresholdExceed=hwMgmdHostStarGThresholdExceed, hwMgmdCtlMsgCountState=hwMgmdCtlMsgCountState, hwMgmdRouterBaseMibGroup=hwMgmdRouterBaseMibGroup, hwMgmdHostSGThresholdExceed=hwMgmdHostSGThresholdExceed, hwMgmdMibConformance=hwMgmdMibConformance, hwMgmdHostNotificationSrcAddr=hwMgmdHostNotificationSrcAddr, hwMgmdGmpInterfaceName=hwMgmdGmpInterfaceName, hwMgmdV2IgmpRouterMibGroup=hwMgmdV2IgmpRouterMibGroup, hwMgmdHostSGCurrentCount=hwMgmdHostSGCurrentCount)
