#
# PySNMP MIB module MY-ANTI-ARPCHEAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-ANTI-ARPCHEAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
IfIndex, = mibBuilder.importSymbols("MY-TC", "IfIndex")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, TimeTicks, Gauge32, Integer32, ModuleIdentity, MibIdentifier, Unsigned32, NotificationType, ObjectIdentity, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "TimeTicks", "Gauge32", "Integer32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "NotificationType", "ObjectIdentity", "iso", "Counter64")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
myAntiArpcheatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41))
myAntiArpcheatMIB.setRevisions(('2007-01-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myAntiArpcheatMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: myAntiArpcheatMIB.setLastUpdated('200701290000Z')
if mibBuilder.loadTexts: myAntiArpcheatMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myAntiArpcheatMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myAntiArpcheatMIB.setDescription('This module defines my anti arpcheat mibs.')
myAntiArpcheatMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1))
myTrustedArpDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myTrustedArpDelete.setStatus('current')
if mibBuilder.loadTexts: myTrustedArpDelete.setDescription('Setting the variable value to zero refers to delete all the trusted ARP and L2 interface bindings. Setting any variable values other than zero refers to no action taken.')
myTrustedArpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2), )
if mibBuilder.loadTexts: myTrustedArpTable.setStatus('current')
if mibBuilder.loadTexts: myTrustedArpTable.setDescription('It is used to set the trusted ARP and lists of trusted ARP and L2 interface bindings.')
myTrustedArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2, 1), ).setIndexNames((0, "MY-ANTI-ARPCHEAT-MIB", "trustedArpIfIndex"), (0, "MY-ANTI-ARPCHEAT-MIB", "trustedArpIp"))
if mibBuilder.loadTexts: myTrustedArpEntry.setStatus('current')
if mibBuilder.loadTexts: myTrustedArpEntry.setDescription('Lists of the trusted ARP and L2 interface bindins.')
trustedArpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2, 1, 1), IfIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedArpIfIndex.setStatus('current')
if mibBuilder.loadTexts: trustedArpIfIndex.setDescription('The interface that is correspondent with the trusted ARP.')
trustedArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedArpIp.setStatus('current')
if mibBuilder.loadTexts: trustedArpIp.setDescription('The IP address that is correspondent with the trusted ARP.')
trustedArpMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedArpMediaPhysAddress.setStatus('current')
if mibBuilder.loadTexts: trustedArpMediaPhysAddress.setDescription('The MAC address that is correspondent with the trusted ARP.')
trustedArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2, 1, 4), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedArpVlan.setStatus('current')
if mibBuilder.loadTexts: trustedArpVlan.setDescription('The VLAN ID to which the interface that is correspondent with the trusted ARP belongs.')
trustedArpOperationType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedArpOperationType.setStatus('current')
if mibBuilder.loadTexts: trustedArpOperationType.setDescription('Setting the variable value to zero refers to delete the binding of trusted ARP and L2 interface. Setting the variable value to 1 refers to add the binding of trusted ARP and L2 interface. Setting any values other than 0 and 1 refers to no action taken.')
myAntiArpcheatMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 2))
myAntiArpcheatMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 2, 1))
myAntiArpcheatMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 2, 2))
myAntiArpcheatMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 2, 1, 1)).setObjects(("MY-ANTI-ARPCHEAT-MIB", "myAntiArpcheatMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myAntiArpcheatMIBCompliance = myAntiArpcheatMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myAntiArpcheatMIBCompliance.setDescription('The compliance statement for entities which implement the My Anti Arpcheat MIB')
myAntiArpcheatMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 41, 2, 2, 1)).setObjects(("MY-ANTI-ARPCHEAT-MIB", "myTrustedArpDelete"), ("MY-ANTI-ARPCHEAT-MIB", "trustedArpIfIndex"), ("MY-ANTI-ARPCHEAT-MIB", "trustedArpIp"), ("MY-ANTI-ARPCHEAT-MIB", "trustedArpMediaPhysAddress"), ("MY-ANTI-ARPCHEAT-MIB", "trustedArpVlan"), ("MY-ANTI-ARPCHEAT-MIB", "trustedArpOperationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myAntiArpcheatMIBGroup = myAntiArpcheatMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myAntiArpcheatMIBGroup.setDescription('A collection of objects providing anti arpcheat management and opertion to a My agent.')
mibBuilder.exportSymbols("MY-ANTI-ARPCHEAT-MIB", myAntiArpcheatMIBCompliance=myAntiArpcheatMIBCompliance, trustedArpMediaPhysAddress=trustedArpMediaPhysAddress, trustedArpOperationType=trustedArpOperationType, PYSNMP_MODULE_ID=myAntiArpcheatMIB, myAntiArpcheatMIBGroups=myAntiArpcheatMIBGroups, trustedArpIfIndex=trustedArpIfIndex, myAntiArpcheatMIBObjects=myAntiArpcheatMIBObjects, myAntiArpcheatMIBConformance=myAntiArpcheatMIBConformance, myAntiArpcheatMIBGroup=myAntiArpcheatMIBGroup, myAntiArpcheatMIB=myAntiArpcheatMIB, trustedArpIp=trustedArpIp, myTrustedArpTable=myTrustedArpTable, myAntiArpcheatMIBCompliances=myAntiArpcheatMIBCompliances, trustedArpVlan=trustedArpVlan, myTrustedArpEntry=myTrustedArpEntry, myTrustedArpDelete=myTrustedArpDelete)
