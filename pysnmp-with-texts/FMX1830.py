#
# PySNMP MIB module FMX1830 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FMX1830
# Produced by pysmi-0.3.4 at Wed May  1 13:14:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, Bits, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, ModuleIdentity, enterprises, NotificationType, MibIdentifier, Gauge32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Bits", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "ModuleIdentity", "enterprises", "NotificationType", "MibIdentifier", "Gauge32", "Unsigned32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
fmxbd = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65))
devices = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1))
terminal_server = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2)).setLabel("terminal-server")
port = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 1))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 2))
service = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 3))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 4))
serverAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5))
serverMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6))
serverDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 1))
fmxServerDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 1, 1))
serverProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 2))
protNone = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 2, 1))
protTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 2, 2))
protRlogin = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 2, 3))
protLt = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 5, 2, 4))
fmxServerMib = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1))
fmxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1))
fmxPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2))
fmxService = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3))
fmxProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4))
fmxIpSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5))
fmxHostname = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6))
fmxNameserver = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7))
fmxTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8))
fmxIp = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9))
fmxArp = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 10))
fmxTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11))
fmxTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12))
fmxRlogin = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13))
fmxLt = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14))
fmxQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15))
fmxSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16))
class Character(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class DisplayChar(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(32, 126)

class LtGroupList(OctetString):
    pass

vSysIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSysIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: vSysIdentifier.setDescription('A unique identifier of the server type. The OID is one of those found under { serverDevice }, such as { fmxServerDevice }.')
vSysReboot = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysReboot.setStatus('mandatory')
if mibBuilder.loadTexts: vSysReboot.setDescription("A control to reinitialize the server. In response to a get-request or get-next-request, the agent always returns 'ready(1)' as the value. Setting the value to 'execute(2)' causes the server to reboot.")
vSysLtGroupStatus = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSysLtGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vSysLtGroupStatus.setDescription('An integer indicating whether the fmxLt group is implemented on this particular unit. That entire group has a status of optional, as some software configurations executing in a server unit may not implement the group. For example, the group is not implemented in a unit which is configured without the Lat-compatible protocol, and in this case the value of vSysLtGroupStatus is absent(2). This variable gives management stations an easy way to determine whether the group is implemented in the particular unit being managed.')
vSysPrimaryBoot = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rom", 1), ("mop", 2), ("bootp", 3), ("tftp", 4), ("card", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysPrimaryBoot.setStatus('mandatory')
if mibBuilder.loadTexts: vSysPrimaryBoot.setDescription('The primary boot method of the server. This boot method is attempted first on system re-initialization.')
vSysSecondaryBoot = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rom", 1), ("mop", 2), ("bootp", 3), ("tftp", 4), ("card", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysSecondaryBoot.setStatus('mandatory')
if mibBuilder.loadTexts: vSysSecondaryBoot.setDescription('The secondary boot method of the server. This boot method is attempted on system re-initialization when the primary boot method fails.')
vSysBootFilePath = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBootFilePath.setStatus('mandatory')
if mibBuilder.loadTexts: vSysBootFilePath.setDescription("The pathname on the remote boot host of the server's boot file for boot through TFTP.")
vSysBootFileName = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBootFileName.setStatus('mandatory')
if mibBuilder.loadTexts: vSysBootFileName.setDescription("The filename of the server's boot file for boot through MOP, TFTP, or Card.")
vSysBootServer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBootServer.setStatus('mandatory')
if mibBuilder.loadTexts: vSysBootServer.setDescription("The IP address of the boot server for boot through TFTP or BOOTP. A value of '0.0.0.0' (on read or write) indicates that no boot server is defined.")
vSysRemoteBoot = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysRemoteBoot.setStatus('mandatory')
if mibBuilder.loadTexts: vSysRemoteBoot.setDescription('Indicates whether this server will supply system software as a boot image for remote servers when they request a network boot.')
vSysEtherType = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autoSelect", 1), ("thinWire", 2), ("thickWire", 3), ("tenBaseT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysEtherType.setStatus('mandatory')
if mibBuilder.loadTexts: vSysEtherType.setDescription("Selects the operating ethernet interface. 'autoSelect(1)' indicates that the server will automatically select an interface by identifying that interface showing network activity. Note that the server must be rebooted before a change in the value of this variable actually takes effect.")
vSysBroadband = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysBroadband.setStatus('mandatory')
if mibBuilder.loadTexts: vSysBroadband.setDescription('Determines whether or not the server is configured to interface with with broadband network tranceivers. Note that the server must be rebooted before a change in the value of this variable actually takes effect.')
vSysPasswordLimit = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysPasswordLimit.setStatus('mandatory')
if mibBuilder.loadTexts: vSysPasswordLimit.setDescription('Determines the number of times the server will allow a user to mistype a local password, either to login to a port or connect to a local service, before refusing the login attempt. The value 0 indicates infinite password attempts.')
vSysPrivPassword = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysPrivPassword.setStatus('mandatory')
if mibBuilder.loadTexts: vSysPrivPassword.setDescription('The password required for users to enter privileged mode, and have access to privileged commands. Note that on a set-request, the new value is automatically converted to upper-case, as is the user password input.')
vSysMaintenancePassword = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSysMaintenancePassword.setStatus('mandatory')
if mibBuilder.loadTexts: vSysMaintenancePassword.setDescription('The password required for access to the server remote console port through the MOP network protocol.')
vPortBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: vPortBroadcast.setDescription("Determines whether or not port users may broadcast text directly to other ports, using the local 'BROADCAST' command.")
vPortInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: vPortInactivityTimer.setDescription("The number of minutes that may pass with no port activity before that port is automatically logged out, if the port's inactivity logout feature is enabled.")
vPortAbsoluteTimer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAbsoluteTimer.setStatus('mandatory')
if mibBuilder.loadTexts: vPortAbsoluteTimer.setDescription("The number of minutes that may pass with no port activity before that port is automatically logged out, if the port's absolute logout feature is enabled.")
vPortLock = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLock.setStatus('mandatory')
if mibBuilder.loadTexts: vPortLock.setDescription("Determines whether or not the server will allow a user to lock a port using the local 'LOCK' command.")
vPortLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLoginPassword.setStatus('mandatory')
if mibBuilder.loadTexts: vPortLoginPassword.setDescription("The password required for users to login ports with vPortPasswordEnable = 'enabled(1)'. On a set-request the agent converts lower case ASCII characters to upper case for this object, because the user's password input is also converted before comparison.")
vPortConsoleIndex = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortConsoleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vPortConsoleIndex.setDescription('The value of vPortIndex for the port which is serving as the local console port. Abnormal event messages are automatically directed to the local console port. A value of 0 indicates that console messages are disabled.')
vPortFailover = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortFailover.setStatus('mandatory')
if mibBuilder.loadTexts: vPortFailover.setDescription('Determines whether or not the port failover feature is enabled.')
vPortSignalCheck = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSignalCheck.setStatus('mandatory')
if mibBuilder.loadTexts: vPortSignalCheck.setDescription('Determines whether or not the port signal check feature can be enabled for individual ports.')
vPortLoginMsgEnable = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLoginMsgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortLoginMsgEnable.setDescription('Determines whether or not the server prints an introductory login message to the user when the user completes a login to a port.')
vPortBreakDuration = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBreakDuration.setStatus('mandatory')
if mibBuilder.loadTexts: vPortBreakDuration.setDescription('Determines the length, in milliseconds, of a BREAK when transmitted from a physical port.')
vPortXoffMark = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortXoffMark.setStatus('mandatory')
if mibBuilder.loadTexts: vPortXoffMark.setDescription('Determines the number of free bytes in a port input buffer at which point the port will XOFF the attached device. When set, the new value will not take effect until the server is re-initialized.')
vPortXonMark = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 510))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortXonMark.setStatus('mandatory')
if mibBuilder.loadTexts: vPortXonMark.setDescription('Determines the number of used bytes in a port input buffer at which point the port will XON the attached device. When set, the new value will not take effect until the server is re-initialized.')
vPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vPortNumber.setDescription('An integer indicating the number of entries in vPortTable. This value cannot change from one re-initialization of the unit to the next re-initialization.')
vPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14), )
if mibBuilder.loadTexts: vPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortTable.setDescription('A list of port entries. The number of entries is given by the value of vPortNumber.')
vPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1), ).setIndexNames((0, "FMX1830", "vPortIndex"))
if mibBuilder.loadTexts: vPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vPortEntry.setDescription('Status and parameter values for a port.')
vPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vPortIndex.setDescription("A unique value for each port. Its value ranges between 1 and the value of vPortNumber. The value for each port will remain constant at least from one re-initialization of the unit's network management system to the next re-initialization.")
vPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("physicalRS-232", 2), ("physicalRS-423", 3), ("physicalModem", 4), ("physicalLCDPanel", 5), ("virtualConsole", 6), ("virtualNPT", 7), ("virtualX25", 8), ("virtual3270", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortType.setStatus('mandatory')
if mibBuilder.loadTexts: vPortType.setDescription('An integer indicating the type of the port. Virtual ports should be considered communication channels to their particular interface. For example, a virtualX25(7) port is a channel to an X.25 interface for establishing connections to/from that interface.')
vPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortName.setStatus('mandatory')
if mibBuilder.loadTexts: vPortName.setDescription("A textual name for the port. This name is used in LAT-compatible session start requests, where a device can request to be connected to a port with a given name. On a set-request the agent converts lower case ASCII characters to upper case for this object. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortUserName.setStatus('mandatory')
if mibBuilder.loadTexts: vPortUserName.setDescription('The textual username typed in by the user who logged into the port.')
vPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("idle", 2), ("local", 3), ("connecting", 4), ("connected", 5), ("locked", 6), ("serial-interface", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortState.setStatus('mandatory')
if mibBuilder.loadTexts: vPortState.setDescription("The current operational state of the port. 'idle(2)' indicates that the port has no sessions and is logged out. 'local(3)' indicates that the port is currently in local server mode, although suspended sessions may exist on the port. 'connecting(4)' indicates that the server is attempting to connect the port to a session. 'connected(5) indicates that the port is currently connected to a protocol session. 'locked(6)' indicates that the port has been locked by a local LOCK command and is awaiting the unlock password. 'serial-interface(7)' indicates that the port is acting as an interface for a serial link controlled by SLIP, PPP, etc.")
vPortLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLogout.setStatus('mandatory')
if mibBuilder.loadTexts: vPortLogout.setDescription("A control to logout a port. In response to a get-request or get-next-request, the agent always returns 'ready(1)' as the value. Setting the value to 'execute(2)' causes all sessions on the port to be disconnected and the port is returned to idle state.")
vPortActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: vPortActiveSessions.setDescription('The number of presently active sessions on the port, whether current or suspended.')
vPortCurrSessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCurrSessNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vPortCurrSessNumber.setDescription("The reference number of the port's current session. There is a unique non-zero reference number for each session on a port. The reference number stays constant for the life of the session. It can be used in conjunction with vPortIndex to index into the appropriate session table for retrieval of session information (vTelSessTable, vLtSessTable, or vRlogSessTable). If there are no sessions on the port, or if none of them is current, this object will have the value 0.")
vPortCurrSessProt = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCurrSessProt.setStatus('mandatory')
if mibBuilder.loadTexts: vPortCurrSessProt.setDescription('An identifier of which higher-level protocol the current port session is running over. The possibilities are { protNone } (for no current session, or unknown), { protTelnet }, { protRlogin }, or { protLt }.')
vPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("dynamic", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAccess.setStatus('mandatory')
if mibBuilder.loadTexts: vPortAccess.setDescription("An indication of the allowed types of access to the port. 'local(1)' indicates that the port can only carry sessions initiated by it. 'remote(2)' indicates that the port can only accept connections initiated by another entity. 'dynamic(3)' indicates that the port can both initiate sessions and accept connections initiated by another entity. 'none(4)' indicates that the port can not pass any characters, and can neither initiate nor accept connections. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortVirtualEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVirtualEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortVirtualEnable.setDescription("An indication of the current setting of the port's virtual characteristic. This parameter affects the port's actions when connections are established. Refer to the user manual for a complete description of this parameter. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortVirtualString = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVirtualString.setStatus('mandatory')
if mibBuilder.loadTexts: vPortVirtualString.setDescription("An indication of the current setting of the port's virtual text string. This parameter affects the port's actions when connections are established. Refer to the user manual for a complete description of this parameter. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortSessionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSessionLimit.setStatus('mandatory')
if mibBuilder.loadTexts: vPortSessionLimit.setDescription("The maximum number of simultaneous sessions allowed on the port. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortProfile.setStatus('mandatory')
if mibBuilder.loadTexts: vPortProfile.setDescription("The name of the profile in use for the port. The profile contains session parameter information for Telnet and Rlogin. When the port initiates a Telnet or Rlogin session, the parameters to be used for that session are taken from the port's profile. vPortProfilename can be used to index into the profile table and retrieve/modify the relevant parameters. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortQueueing = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortQueueing.setStatus('mandatory')
if mibBuilder.loadTexts: vPortQueueing.setDescription("An indication of whether the LAT-compatible protocol will request session queueing when attempting to establish a session initiated at this port. If queueing is requested, a remote node will queue the connection request in the case of resource failures and accept the session when it is able. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortPasswordEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPasswordEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortPasswordEnable.setDescription("An indication of whether the system password must be entered to login to the port. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortTacacsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortTacacsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortTacacsEnable.setDescription("An indication of whether the username and password entered at login must be verified by a Tacacs server before port access is permitted. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortSecurityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSecurityEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortSecurityEnable.setDescription("An indication of whether the port security feature is enabled. Ports for which security is enabled are allowed to execute only a limited subset of the available local commands. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 19), LtGroupList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortGroups.setStatus('mandatory')
if mibBuilder.loadTexts: vPortGroups.setDescription("Indicates which LAT-compatible groups are authorized and currently enabled on the port. There are 256 possible LAT-compatible groups (0-255). Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortBreakMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBreakMode.setStatus('mandatory')
if mibBuilder.loadTexts: vPortBreakMode.setDescription("An indication of how a BREAK is interpreted when received at the port as input. 'local(1)' indicates that a received BREAK causes any current session to be suspended and the port returned to local mode. If there is no current session, the BREAK causes any port output in progress to be aborted. 'remote(2)' indicates that a received BREAK is passed through the current session to the other side via a protocol-specific mechanism. If there is no current session, the BREAK causes any port output in progress to be aborted. 'disabled(3)' indicates that all received BREAKs are ignored. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortBackSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 21), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBackSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: vPortBackSwitch.setDescription("A 'hot' key which, when received at the port's input, causes the current session to be changed to the immediately preceding session (from session 3 to session 2, for example). A value of 0 means that no backwards switch is in effect. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortForwSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 22), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortForwSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: vPortForwSwitch.setDescription("A 'hot' key which, when received at the port's input, causes the current session to be changed to the next numerical session (from session 3 to session 4, for example). A value of 0 means that no forwards switch is in effect. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortLocalSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 23), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLocalSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: vPortLocalSwitch.setDescription("A 'hot' key which, when received at the port's input, forces the port to suspend any current session and return to local mode. If no current session exists, any port output currently in progress is aborted. A value of 0 means that no local switch is in effect. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortPrefSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefSvc.setStatus('mandatory')
if mibBuilder.loadTexts: vPortPrefSvc.setDescription("A string defining the port's preferred service. A user at the port does not need to specify the service name (or node address) to connect to the service, he simply executes the connect command. Alternately, the port may connect to this service immediately upon being logged in from an idle state. The exact mode of operation depends on the setting of vPortPrefMode. A zero-length value for this object means that no preferred service is in effect. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortPrefNode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefNode.setStatus('mandatory')
if mibBuilder.loadTexts: vPortPrefNode.setDescription("A string defining the node name for the port's preferred service. Multiple LAT-compatible nodes may offer the same service name. This object defines which node is the preferred choice for the port. A zero-length value for this object means that no preferred node is in effect. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortPrefPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefPort.setStatus('mandatory')
if mibBuilder.loadTexts: vPortPrefPort.setDescription("A string defining the port name for the port's preferred service. For LAT-compatible services this string identifies the LAT-compatible port name of the desired destination. For IP hosts this string defines the desired TCP port number. A zero-length value means that no preferred port is in effect. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortPrefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("preferred", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrefMode.setStatus('mandatory')
if mibBuilder.loadTexts: vPortPrefMode.setDescription("An indication of the mode of preferred service connection. 'preferred(2)' indicates the 'preferred' mode of connection. In this mode users may break back to local mode by means of the BREAK key or a defined local switch. 'dedicated(3)' indicates that the port cannot function in local mode at all. It is dedicated to the specified service. Once the service connection is broken, the port is logged out. When the port is logged in, it immediately connects to the dedicated service. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortAutoConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAutoConnect.setStatus('mandatory')
if mibBuilder.loadTexts: vPortAutoConnect.setDescription("A port characteristic which, when enabled, causes the port to automatically attempt to re-establish any connection which is abnormally terminated, such as by network media failure. If a preferred service is also defined, the port will automatically attempt connection to the preferred service upon login. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: vPortPrompt.setDescription("The prompt string for the port when it is in local mode. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortInactiveLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortInactiveLogout.setStatus('mandatory')
if mibBuilder.loadTexts: vPortInactiveLogout.setDescription("A port characteristic which, when enabled, causes the port to automatically become logged out if it has no active sessions and no data has been received or transmitted at the port for the duration of the vSysInactivityTimer. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortAutoPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAutoPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: vPortAutoPrompt.setDescription("A port characteristic which, when enabled, causes the LAT-compatible service prompt to appear at the port immediately upon connecting to a LAT-compatible service. Many LAT-compatible services do not supply a prompt until a carriage return is encountered. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortBroadcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBroadcastEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortBroadcastEnable.setDescription("A port characteristic which, when enabled, allows characters broadcast from other server ports to appear at the port. If disabled, such broadcasts are not permitted to the particular port. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: vPortInterrupts.setDescription("A port characteristic which, when enabled, allows a remote connection to the port to be interrupted by a local user by means of the BREAK key. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortMessageCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortMessageCodes.setStatus('mandatory')
if mibBuilder.loadTexts: vPortMessageCodes.setDescription("A port characteristic which, when enabled, causes a message code reference number to be generated along with any port status or error messages. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVerification.setStatus('mandatory')
if mibBuilder.loadTexts: vPortVerification.setDescription("A port characteristic which, when enabled, causes a status message to appear on each connection attempt by the port. The status message indicates success or failure of the connection and provides the session number of the newly established session. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortDialup = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDialup.setStatus('mandatory')
if mibBuilder.loadTexts: vPortDialup.setDescription("A port characteristic which, when enabled, causes the server to identify that the port is configured for modem dial-in service when it connects to a LAT-compatible service. This may cause the service to initiate any security features it chooses to verify the authority or source of the connecting user. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortRemoteModify = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortRemoteModify.setStatus('mandatory')
if mibBuilder.loadTexts: vPortRemoteModify.setDescription("A port characteristic which, when enabled, causes the server to allow modification of local port parameters (speed, character size, parity, etc.) from the remote end of the connection through protocol-specific means. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortAbsoluteLogout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAbsoluteLogout.setStatus('mandatory')
if mibBuilder.loadTexts: vPortAbsoluteLogout.setDescription("A port characteristic which, when enabled, causes the port to automatically become logged out if no data has been received or transmitted at the port for the duration of the vSysAbsoluteTimer, regardless of the presence of suspended sessions on the port. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortIOflush = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortIOflush.setStatus('mandatory')
if mibBuilder.loadTexts: vPortIOflush.setDescription("A port characteristic which, when enabled, causes the server to automatically flush the port's output buffer when the port becomes logged out. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortLogoutMsgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortLogoutMsgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortLogoutMsgEnable.setDescription("A port characteristic which, when enabled, causes the port to print a message whenever it becomes logged out. Note for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortScreenType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ansi", 1), ("softcopy", 2), ("hardcopy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortScreenType.setStatus('mandatory')
if mibBuilder.loadTexts: vPortScreenType.setDescription("A port characteristic which determines the type of output device connected to the port, and therefore determines the output data formatting used for server configuration and statistics screens. 'ansi(1)' indicates that ANSI-compatible screen formatting sequences may be used. 'softcopy(2)' specifies that VT-100 screen formatting sequences may be used. 'hardcopy(3)' indicates that no screen-formatting sequences may be used. Note that for ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' this object is not modifiable. The agent will accept any valid value on a set-request for such ports.")
vPortFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("xonXoff", 2), ("hardware", 3), ("ctsRts", 4), ("dsrDtr", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortFlowType.setStatus('mandatory')
if mibBuilder.loadTexts: vPortFlowType.setDescription("The port's type of flow control. 'none(1)' indicates that no flow control is in effect. 'xonXoff(2)' indicates software flow control by recognizing XON and XOFF characters. 'hardware(3)' indicates flow control delegated to the lower level, for example a parallel port. 'ctsRts(4)' and 'dsrDtr(5)' are specific to ports with vPortType = 'physicalRS-232(2) or 'physicalRS-423(3)'.")
vPortInFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortInFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: vPortInFlowState.setDescription("The current operational state of input flow control on the port. 'none' indicates not applicable. 'unknown' indicates this level does not know. 'stop' indicates flow not allowed. 'go' indicates flow allowed.")
vPortOutFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("stop", 3), ("go", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortOutFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: vPortOutFlowState.setDescription("The current operational state of output flow control on the port. 'none' indicates not applicable. 'unknown' indicates this level does not know. 'stop' indicates flow not allowed. 'go' indicates flow allowed.")
vPortCTSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCTSstate.setStatus('mandatory')
if mibBuilder.loadTexts: vPortCTSstate.setDescription("The current state of the port's CLEAR-TO-SEND input. 'none(1)' indicates that the port has no CTS input. 'unknown(4)' indicates that the state of the input signal is unavailable to this software level.")
vPortDSRstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDSRstate.setStatus('mandatory')
if mibBuilder.loadTexts: vPortDSRstate.setDescription("The current state of the port's DATA-SET-READY input. 'none(1)' indicates that the port has no DSR input. 'unknown(4)' indicates that the state of the input signal is unavailable to this software level.")
vPortDCDstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDCDstate.setStatus('mandatory')
if mibBuilder.loadTexts: vPortDCDstate.setDescription("The current state of the port's DATA-CARRIER-DETECT input. 'none(1)' indicates that the port has no DCD input. 'unknown(4)' indicates that the state of the input signal is unavailable to this software level.")
vPortDTRstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDTRstate.setStatus('mandatory')
if mibBuilder.loadTexts: vPortDTRstate.setDescription("The current state of the port's DATA-TERMINAL-READY output. 'none(1)' indicates that the port has no DTR output. 'unknown(4)' indicates that the state of the output signal is unavailable to this software level.")
vPortRIstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortRIstate.setStatus('mandatory')
if mibBuilder.loadTexts: vPortRIstate.setDescription("The current state of the port's RING-INDICATOR input. 'none(1)' indicates that the port has no RI input. 'unknown(4)' indicates that the state of the input signal is unavailable to this software level.")
vPortRTSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortRTSstate.setStatus('mandatory')
if mibBuilder.loadTexts: vPortRTSstate.setDescription("The current state of the port's REQUEST-TO-SEND output. 'none(1)' indicates that the port has no RTS output. 'unknown(4)' indicates that the state of the output signal is unavailable to this software level.")
vPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("baud-110", 2), ("baud-300", 3), ("baud-600", 4), ("baud-1200", 5), ("baud-2400", 6), ("baud-4800", 7), ("baud-9600", 8), ("baud-14400", 9), ("baud-19200", 10), ("baud-28800", 11), ("baud-38400", 12), ("baud-57600", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: vPortSpeed.setDescription("The serial baud rate of the port. 'none(1)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortCharSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("seven-bits", 2), ("eight-bits", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortCharSize.setStatus('mandatory')
if mibBuilder.loadTexts: vPortCharSize.setDescription("The size of serial characters transmitted/received at the port, excluding parity and stop bits. 'none(1)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortParityType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("not-applicable", 1), ("none", 2), ("even", 3), ("odd", 4), ("mark", 5), ("space", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortParityType.setStatus('mandatory')
if mibBuilder.loadTexts: vPortParityType.setDescription("The type of parity used for serial transmission and reception of characters at the port. 'not-applicable(1)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: vPortAutobaud.setDescription("Indicates whether the port will automatically attempt to autobaud to an external serial device after being logged out. 'not-applicable(3)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortModemControl.setStatus('mandatory')
if mibBuilder.loadTexts: vPortModemControl.setDescription("Indicates whether the port modem control characteristic is enabled. When enabled, a physical serial port will not function unless modem signals are asserted, and the port's DTR output is dropped for 5 seconds each time the port gets logged out. 'not-applicable(3)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortDSRlogout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDSRlogout.setStatus('mandatory')
if mibBuilder.loadTexts: vPortDSRlogout.setDescription("Indicates whether the port DSRlogout characteristic is enabled. When enabled, a physical serial port will automatically be logged out when the DSR input is dropped. 'not-applicable(3)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortRing = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortRing.setStatus('mandatory')
if mibBuilder.loadTexts: vPortRing.setDescription("Indicates whether the port ring characteristic is enabled. When enabled, a physical serial port will raise and lower its RTS output and wait for the DSR input to be raised before accepting a remote connection request. 'not-applicable(3)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortDTRwait = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDTRwait.setStatus('mandatory')
if mibBuilder.loadTexts: vPortDTRwait.setDescription("Indicates whether the port DTRwait characteristic is enabled. When enabled, a physical serial port will delay asserting its DTR and RTS outputs until the RI input signal is asserted. 'not-applicable(3)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortSignalCheckEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSignalCheckEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vPortSignalCheckEnable.setDescription("Indicates whether the port signal check characteristic is enabled. When enabled, a physical serial port will check for the assertion of the DSR input signal before accepting a remote connection request. 'not-applicable(3)' indicates that the port is not a physical serial port. The agent will accept any valid value on a set-request for such ports.")
vPortHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("signalCTS", 1), ("signalRI", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortHandshake.setStatus('mandatory')
if mibBuilder.loadTexts: vPortHandshake.setDescription("On some server units the physical serial ports have connectors which do not allow both the CTS and RI input signals. This object indicates how the input signal is to be interpreted. 'not-applicable(3)' indicates that the port is not a physical serial port, or that the serial port can accept both the CTS and RI input signals. The agent will accept any valid value on a set-request for such ports.")
vPortRcvChars = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortRcvChars.setStatus('mandatory')
if mibBuilder.loadTexts: vPortRcvChars.setDescription('Total number of characters detected as input from the port since system re-initialization, including locally-processed input, and input sent to all sessions.')
vPortTrnChars = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortTrnChars.setStatus('mandatory')
if mibBuilder.loadTexts: vPortTrnChars.setDescription('Total number of characters detected as output from the port since system re-initialization, including locally-creating output, and output received from all sessions.')
vPortFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: vPortFrameErrs.setDescription('Total number of received characters which were rejected because a framing error was detected. This counter only applies to physical serial ports. The value 0 will be returned for all other ports.')
vPortOverrunErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: vPortOverrunErrs.setDescription('Total number of received characters which were rejected for lack of character FIFO space on the serial communication controller. This counter only applies to physical serial ports. The value 0 will be returned for all other ports.')
vPortParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: vPortParityErrs.setDescription('Total number of received characters which were rejected because a parity error was detected. This counter only applies to physical serial ports. The value 0 will be returned for all other ports.')
vPortCharsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 2, 14, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortCharsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: vPortCharsDropped.setDescription('Total number of received characters which were rejected for any reason not covered in other objects, for example lack of input buffer space. This counter only applies to physical serial ports. The value 0 will be returned for all other ports.')
vSvcRatingMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scaled", 1), ("unScaled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcRatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcRatingMode.setDescription("Determines the method of computation for the rating of local services. 'scaled(2)' indicates that an algorithm is used where the rating is scaled to be between 0 and 255. 'unScaled(1)' indicates that the service rating is equal to the number of available service ports.")
vSvcCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSvcCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcCurrNumber.setDescription('An integer indicating the current number of entries in vSvcTable. This object is not constant.')
vSvcTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3), )
if mibBuilder.loadTexts: vSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcTable.setDescription('A list of service entries. The number of entries is given by the value of vSvcCurrNumber.')
vSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1), ).setIndexNames((0, "FMX1830", "vSvcName"))
if mibBuilder.loadTexts: vSvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcEntry.setDescription('Status and parameter values for a service.')
vSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcName.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcName.setDescription("A string which identifies the service uniquely among all other local services configured in the unit. This name is transmitted as part of the unit's LAT-compatible multicast messages. On a set-request the string is automatically converted to upper-case, as lower-case service names are not allowed on the server.")
vSvcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcPorts.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcPorts.setDescription("A 32-byte string which represents a bit map of which server ports are enabled for the service. Each server port is represented by one bit in the 32 bytes. If the bit is turned on, the corresponding server port is enabled for the service. The least significant bit of each byte represents the lowest of the ports for that byte. For example, port 1 (port with vPortIndex = 1) is represented by the least significant bit of the first byte, and port 16 (port with vPortIndex = 16) is represented by the most significant bit of the second byte, etc. Note that 32 bytes allows for up to 256 ports. For servers configured with less than 256 ports, all bits above the highest port number must always be zero. Note also that ports with vPortType = 'physicalLCDPanel(5)' or vPortType = 'virtualConsole(6)' cannot be enabled on a service.")
vSvcIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcIdent.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcIdent.setDescription("A locally-administered identification string which is associated with the service and is transmitted as part of the unit's LAT-compatible multicast messages.")
vSvcRating = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSvcRating.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcRating.setDescription("An integer indicating the ability for connections to this service to be accepted by the server. The higher the value, the more able the server is to accept connections to this service. A very low value indicates that the resources for this service are close to exhausted. The most dominant factor for determining the service rating is the number of idle ports which are enabled for the service. If a service has no idle ports enabled, its rating is zero. This number is transmitted as part of the unit's LAT-compatible multicast messages.")
vSvcLtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcLtEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcLtEnable.setDescription("Indicates whether the server will accept connections to this service over the LAT-compatible protocol. 'disabled(2)' indicates that LAT-compatible connections will not be accepted.")
vSvcTelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcTelEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcTelEnable.setDescription("Indicates whether the server will accept connections to this service over the Telnet protocol. 'disabled(2)' indicates that Telnet connections will not be accepted.")
vSvcLprEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcLprEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcLprEnable.setDescription("Indicates whether the server will accept connections to this service over the LPR line printer protocol. 'disabled(2)' indicates that LPR connections will not be accepted.")
vSvcRawEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcRawEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcRawEnable.setDescription('If enabled(1), indicates that the server will not interpret Telnet interesting characters when a Telnet connection is established to the service.')
vSvcVirtualEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcVirtualEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcVirtualEnable.setDescription('Indicates whether the virtual characteristic is enabled or not on this service. Refer to the user manual for more information on the service virtual characteristic.')
vSvcVirtualText = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcVirtualText.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcVirtualText.setDescription('Defines the virtual text string for this service. Refer to the user manual for more information on the function of the service virtual text string.')
vSvcConnectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcConnectEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcConnectEnable.setDescription('Indicates whether connections are presently being accepted for this service or not. It is a way of temporarily turning off the service without deleting it from the table.')
vSvcPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcPassword.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcPassword.setDescription('Defines the password that must be correctly supplied before a session to this service can be established. a zero-length value indicates that no password must be supplied. Note that on a set-request, the new value is automatically converted to upper-case, as is the user password input.')
vSvcQueueEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcQueueEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcQueueEnable.setDescription('Indicates whether or not the server will queue connection requests to the service if it is unavailable.')
vSvcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcIpAddr.setDescription("Indicates the only IP address upon which the service will carry TCP sessions. This is used when the server has multiple IP addresses and it is desired that the service only respond to connection requests on one of those addresses. A value of 0.0.0.0 indicates that any of the server's IP addresses can be used to connect to this service.")
vSvcTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcTcpPort.setDescription('Indicates the TCP port on which this service accepts TCP connections. A value of zero normally means that no TCP port has been assigned.')
vSvcProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcProfile.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcProfile.setDescription('Indicates the profile entry in the vProfTable which is used to determine Telnet parameters when a Telnet connection is accepted to the service. A zero-length value indicates that only default profile parameter values will be used.')
vSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vSvcStatus.setDescription('The current status of this service entry. Setting this object to the value invalid(2) has the effect of deleting the entry from the service table.')
vProfCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vProfCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vProfCurrNumber.setDescription('An integer indicating the current number of entries in vProfTable. This object is not constant.')
vProfTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2), )
if mibBuilder.loadTexts: vProfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vProfTable.setDescription('A list of profile entries. The number of entries is given by the value of vProfCurrNumber.')
vProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1), ).setIndexNames((0, "FMX1830", "vProfName"))
if mibBuilder.loadTexts: vProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vProfEntry.setDescription('Parameter values for a profile entry.')
vProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfName.setStatus('mandatory')
if mibBuilder.loadTexts: vProfName.setDescription('A unique string value for each profile.')
vProfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfDomain.setStatus('mandatory')
if mibBuilder.loadTexts: vProfDomain.setDescription("A domain name extension that may be appended to a user-specified hostname with which the user wishes to start a session. For example, if the user's port profile has a vProfDomain of 'dss.com', and the user attempts to start a session to the specified host 'pluto,' the server will first attempt to resolve the hostname 'pluto,' and if this is unsuccessful it will then attempt to resolve the hostname 'pluto.dss.com.' This automatic appending of domain extension is only attempted if the value of vProfConcatenate is 'enabled(1).' A zero-length value indicates that no extension is used.")
vProfConcatenate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfConcatenate.setStatus('mandatory')
if mibBuilder.loadTexts: vProfConcatenate.setDescription("An indication of whether the server will append the value of vProfDomain to a user-specified hostname when the user wishes to start a session to the host (see vProfDomain). 'enabled(1)' indicates that the server will attempt to resolve the concatenated hostname if the unconcatenated hostname cannot be resolved to an IP address. 'disabled(2)' indicates that the server will not attempt the hostname concatenization.")
vProfPermHostOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfPermHostOnly.setStatus('mandatory')
if mibBuilder.loadTexts: vProfPermHostOnly.setDescription("An indication of whether the server will attempt to resolve a user-specified hostname through the network nameserver protocol for ports with this profile. 'disabled(1)' indicates that the server will automatically attempt to resolve an unknown user-specified hostname. 'enabled(2)' indicates that if the user-specified hostname is not already in the hostname table, the server will not attempt to resolve it through the nameserver protocol.")
vProfTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: vProfTcpPort.setDescription('The default remote TCP port to which the server will attempt to connect when a user starts a Telnet/Rlogin session on a port with this profile.')
vProfTcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTcpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: vProfTcpTimeout.setDescription('The maximum number of seconds TCP will wait for an acknowledgement before terminating the session.')
vProfTcpKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTcpKeepalive.setStatus('mandatory')
if mibBuilder.loadTexts: vProfTcpKeepalive.setDescription('The number of seconds that the sessions intiated with this profile may remain idle (no characters transmitted or recieved) before a TCP keepalive message is generated. A value of 0 indicates that keepalive messages are never generated.')
vProfIpTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfIpTTL.setStatus('mandatory')
if mibBuilder.loadTexts: vProfIpTTL.setDescription('The value of the IP time to live on packets transmitted for sessions initiated with this profile.')
vProfIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfIpPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: vProfIpPrecedence.setDescription('The value of the IP precedence on packets transmitted for sessions initiated with this profile.')
vProfTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfTermType.setStatus('mandatory')
if mibBuilder.loadTexts: vProfTermType.setDescription('The terminal type that Telnet/Rlogin will attempt to negotiate with the remote node for sessions initiated with this profile. A zero-length value indicates that no terminal type is negotiated.')
vProfCrToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfCrToNet.setStatus('mandatory')
if mibBuilder.loadTexts: vProfCrToNet.setDescription('The character sequence which is sent by Telnet to the remote node to indicate a carriage return in the data stream for sessions initiated with this profile.')
vProfCrFromTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfCrFromTerm.setStatus('mandatory')
if mibBuilder.loadTexts: vProfCrFromTerm.setDescription('The local character sequence which, when delivered to Telnet for transmission, is interpreted as a carriage return and translated to the sequence indicated by vProfCrToNet for sessions initiated with this profile.')
vProfPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 13), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfPadChar.setStatus('mandatory')
if mibBuilder.loadTexts: vProfPadChar.setDescription('The character used by the local Telnet implementation to pad transmitted data immediately following a carriage return for sessions initiated with this profile. A value of 0 indicates that the character is disabled.')
vProfPadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfPadLength.setStatus('mandatory')
if mibBuilder.loadTexts: vProfPadLength.setDescription('The number of pad characters inserted into the data stream by the local Telnet implementation immediately following a carriage return for sessions initiated with this profile.')
vProfEndRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 15), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfEndRecord.setStatus('mandatory')
if mibBuilder.loadTexts: vProfEndRecord.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as an end-of-record character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfNop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 16), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfNop.setStatus('mandatory')
if mibBuilder.loadTexts: vProfNop.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as a no-op character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfDataMark = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 17), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfDataMark.setStatus('mandatory')
if mibBuilder.loadTexts: vProfDataMark.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as a data mark character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 18), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfBreak.setStatus('mandatory')
if mibBuilder.loadTexts: vProfBreak.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as a break character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfIntProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 19), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfIntProcess.setStatus('mandatory')
if mibBuilder.loadTexts: vProfIntProcess.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the interrupt process character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfAbortOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 20), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfAbortOutput.setStatus('mandatory')
if mibBuilder.loadTexts: vProfAbortOutput.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the abort output character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfAttention = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 21), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfAttention.setStatus('mandatory')
if mibBuilder.loadTexts: vProfAttention.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the attention character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 22), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfEraseChar.setStatus('mandatory')
if mibBuilder.loadTexts: vProfEraseChar.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the backspace character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 23), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfEraseLine.setStatus('mandatory')
if mibBuilder.loadTexts: vProfEraseLine.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the erase line character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfGoAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 24), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfGoAhead.setStatus('mandatory')
if mibBuilder.loadTexts: vProfGoAhead.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the go ahead character and translated to the appropriate Telnet control function for sessions initiated with this profile. A value of 255 indicates that the character is disabled.')
vProfNullPass = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfNullPass.setStatus('mandatory')
if mibBuilder.loadTexts: vProfNullPass.setDescription('When enabled, null characters received by Telnet immediately following carriage return characters are passed through the data stream untouched. When disabled, these padding null characters are removed from the received data stream. This applies to sessions initiated with this profile.')
vProfLocalEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfLocalEcho.setStatus('mandatory')
if mibBuilder.loadTexts: vProfLocalEcho.setDescription("Determines how the local Telnet entity negotiates the local echo option with the remote Telnet entity for sessions initiated with this profile. 'attempt(1)' indicates the the local Telnet entity actively attempts to enable the option. 'refuse(2)' indicates that the local Telnet entity will refuse to enable the option even when requested by the remote entity. 'allow(3) indicates that the local Telnet entity will not actively attempt to enable the option, but will enable the option when requested by the remote entity.")
vProfRemoteEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfRemoteEcho.setStatus('mandatory')
if mibBuilder.loadTexts: vProfRemoteEcho.setDescription("Determines how the local Telnet entity negotiates the remote echo option with the remote Telnet entity for sessions initiated with this profile. 'attempt(1)' indicates the the local Telnet entity actively attempts to enable the option. 'refuse(2)' indicates that the local Telnet entity will refuse to enable the option even when requested by the remote entity. 'allow(3) indicates that the local Telnet entity will not actively attempt to enable the option, but will enable the option when requested by the remote entity.")
vProfLocalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfLocalBinary.setStatus('mandatory')
if mibBuilder.loadTexts: vProfLocalBinary.setDescription("Determines how the local Telnet entity negotiates the local binary option with the remote Telnet entity for sessions initiated with this profile. 'attempt(1)' indicates the the local Telnet entity actively attempts to enable the option. 'refuse(2)' indicates that the local Telnet entity will refuse to enable the option even when requested by the remote entity. 'allow(3) indicates that the local Telnet entity will not actively attempt to enable the option, but will enable the option when requested by the remote entity.")
vProfRemoteBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("attempt", 1), ("refuse", 2), ("allow", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfRemoteBinary.setStatus('mandatory')
if mibBuilder.loadTexts: vProfRemoteBinary.setDescription("Determines how the local Telnet entity negotiates the remote binary option with the remote Telnet entity for sessions initiated with this profile. 'attempt(1)' indicates the the local Telnet entity actively attempts to enable the option. 'refuse(2)' indicates that the local Telnet entity will refuse to enable the option even when requested by the remote entity. 'allow(3) indicates that the local Telnet entity will not actively attempt to enable the option, but will enable the option when requested by the remote entity.")
vProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vProfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vProfStatus.setDescription('The current status of this profile entry. Setting this object to the value invalid(2) has the effect of deleting the entry from the profile table.')
vSecEnable = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSecEnable.setDescription("Determines whether or not the server's IP security feature is enabled.")
vSecCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSecCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vSecCurrNumber.setDescription('An integer indicating the current number of entries in vSecTable. This object is not constant.')
vSecTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3), )
if mibBuilder.loadTexts: vSecTable.setStatus('mandatory')
if mibBuilder.loadTexts: vSecTable.setDescription('A list of security entries. The number of entries is given by the value of vSecCurrNumber.')
vSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3, 1), ).setIndexNames((0, "FMX1830", "vSecIndex"))
if mibBuilder.loadTexts: vSecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vSecEntry.setDescription('Parameter values for a security entry.')
vSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vSecIndex.setDescription('A unique value for each security entry.')
vSecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vSecAddress.setDescription('The target address of the IP security entry.')
vSecMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecMask.setStatus('mandatory')
if mibBuilder.loadTexts: vSecMask.setDescription('A mask which is applied to vSecAddress to determine its significant bits.')
vSecGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3, 1, 4), LtGroupList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecGroups.setStatus('mandatory')
if mibBuilder.loadTexts: vSecGroups.setDescription('A set of group numbers which determines which security entries are in use on which ports.')
vSecStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSecStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vSecStatus.setDescription('The current status of this security entry. Setting this object to the value invalid(2) has the effect of deleting the entry from the security table.')
vHostCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vHostCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vHostCurrNumber.setDescription('An integer indicating the current number of entries in vHostTable. This object is not constant.')
vHostTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 2), )
if mibBuilder.loadTexts: vHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: vHostTable.setDescription('A list of hostname entries. The number of entries is given by the value of vHostCurrNumber.')
vHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 2, 1), ).setIndexNames((0, "FMX1830", "vHostHostname"))
if mibBuilder.loadTexts: vHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vHostEntry.setDescription('Parameter and status values for a hostname entry.')
vHostHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vHostHostname.setStatus('mandatory')
if mibBuilder.loadTexts: vHostHostname.setDescription("The hostname of the host. Note that if the value of vNsAllowLowerCase is 'disabled(2)', then on a set-request the specified hostname is automatically converted to upper case.")
vHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vHostAddress.setDescription('The IP address of the host.')
vHostTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vHostTTL.setStatus('mandatory')
if mibBuilder.loadTexts: vHostTTL.setDescription("The time to live (in seconds) of this entry in the host table. If the entry has been dynamically created by the nameserver protocol, the TTL will be a non-zero value indicating its remaining lifetime. Upon expiration of the TTL the entry is automatically deleted from the table. If the entry was created by a network administrator, the entry is considered 'permanent' and the value of its vHostTTL will be 0.")
vHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vHostStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vHostStatus.setDescription("The desired status of this host entry. Setting this object to the value 'invalid(2)' indicates that the entry is desired to be deleted from the host table. Only permanent entries will be deleted (entries for which the value of vHostTTL is 0). Dynamic entries are only deleted upon expiration of their vHostTTL or upon system re-initialization.")
vNsRequestMode = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("recursive", 1), ("nonRecursive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsRequestMode.setStatus('mandatory')
if mibBuilder.loadTexts: vNsRequestMode.setDescription("The current mode of network hostname resolution. 'recursive(1)' indicates that the server sends recursive-type requests to network nameservers. 'nonRecursive(2)' indicates that the server does not send recursive-type nameserver requests.")
vNsAllowLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsAllowLowerCase.setStatus('mandatory')
if mibBuilder.loadTexts: vNsAllowLowerCase.setDescription("Determines whether the nameserver resolver will automatically convert user-specified hostnames to upper case before attempting to resolve them. 'disabled(2)' indicates that automatic conversion to upper case will take place.")
vNsCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vNsCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vNsCurrNumber.setDescription('An integer indicating the current number of entries in vNsTable. This object is not constant.')
vNsTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 4), )
if mibBuilder.loadTexts: vNsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vNsTable.setDescription('A list of nameserver entries. The number of entries is given by the value of vNsCurrNumber.')
vNsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 4, 1), ).setIndexNames((0, "FMX1830", "vNsAddress"))
if mibBuilder.loadTexts: vNsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vNsEntry.setDescription('Parameter values for a nameserver entry.')
vNsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vNsAddress.setDescription('The IP address of the nameserver host.')
vNsHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vNsHostname.setStatus('mandatory')
if mibBuilder.loadTexts: vNsHostname.setDescription('The resolved hostname of the nameserver host A zero- length value indicates that the hostname is unknown at the present time.')
vNsTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vNsTTL.setStatus('mandatory')
if mibBuilder.loadTexts: vNsTTL.setDescription("The time to live (in seconds) of this entry in the nameserver table. If the entry has been dynamically created by the nameserver protocol, the TTL will be a non-zero value indicating its remaining lifetime. Upon expiration of the TTL the entry is automatically deleted from the table. If the entry was created by a network administrator, the entry is considered 'permanent' and the value of its vNsTTL will be 0.")
vNsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vNsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vNsStatus.setDescription("The status of this nameserver entry. Setting this object to the value 'invalid(2)' has the effect of deleting the entry from the nameserver table. Dynamic entries are also automatically deleted upon expiration of their vNsTTL or upon system re-initialization.")
vTacServerCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTacServerCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vTacServerCurrNumber.setDescription('An integer indicating the current number of entries in vTacTable. This object is not constant.')
vTacTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8, 2), )
if mibBuilder.loadTexts: vTacTable.setStatus('mandatory')
if mibBuilder.loadTexts: vTacTable.setDescription('A list of Tacacs server entries. The number of entries is given by the value of vTacServerCurrNumber.')
vTacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8, 2, 1), ).setIndexNames((0, "FMX1830", "vTacAddress"))
if mibBuilder.loadTexts: vTacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vTacEntry.setDescription('Parameter values for a Tacacs server entry.')
vTacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vTacAddress.setDescription('The IP address of the Tacacs server host.')
vTacHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTacHostname.setStatus('mandatory')
if mibBuilder.loadTexts: vTacHostname.setDescription('The resolved hostname of the Tacacs server host. If the hostname is currently unknown, a zero-length value is returned.')
vTacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vTacStatus.setDescription('The current status of this Tacacs server entry. Setting this object to the value invalid(2) has the effect of deleting the entry from the Tacacs server table.')
vIpBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vIpBcastAddr.setDescription('The IP address to be used for IP limited broadcasts originating from this unit.')
vIpMaxAddr = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vIpMaxAddr.setDescription('An integer indicating the maximum number of IP addresses that can be simultaneously assigned to this unit, totaling over all interfaces. Note that the server must be rebooted before a change in the value of this variable actually takes effect.')
vIpMaxHostHashEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("size-11", 1), ("size-13", 2), ("size-17", 3), ("size-19", 4), ("size-23", 5), ("size-29", 6), ("size-31", 7), ("size-37", 8), ("size-41", 9), ("size-43", 10), ("size-47", 11), ("size-49", 12), ("size-53", 13), ("size-59", 14), ("size-61", 15), ("size-67", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxHostHashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: vIpMaxHostHashEntries.setDescription('An integer indicating the number of buckets in the host route hash table. Note that the server must be rebooted before a change in the value of this variable actually takes effect.')
vIpMaxNetHashEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("size-11", 1), ("size-13", 2), ("size-17", 3), ("size-19", 4), ("size-23", 5), ("size-29", 6), ("size-31", 7), ("size-37", 8), ("size-41", 9), ("size-43", 10), ("size-47", 11), ("size-49", 12), ("size-53", 13), ("size-59", 14), ("size-61", 15), ("size-67", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxNetHashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: vIpMaxNetHashEntries.setDescription('An integer indicating the number of buckets in the network route hash table. Note that the server must be rebooted before a change in the value of this variable actually takes effect.')
vIpMaxInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxInterfaces.setStatus('mandatory')
if mibBuilder.loadTexts: vIpMaxInterfaces.setDescription('An integer indicating the maximum number of IP interfaces of all types that can be configured on the unit. Note that the server must be rebooted before a change in the value of this variable actually takes effect.')
vIpMaxRoutes = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vIpMaxRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: vIpMaxRoutes.setDescription("An integer indicating the maximum number of entries in the unit's route table. Note that the server must be rebooted before a change in the value of this variable actually takes effect.")
vArpMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: vArpMaxEntries.setDescription("An integer indicating the maximum number of entries in the unit's ARP table. Note that the server must be rebooted before a change in the value of this variable actually takes effect.")
vArpRetryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpRetryTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: vArpRetryTimeout.setDescription('An integer indicating the number of seconds between ARP retransmit attempts.')
vArpRetryMax = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpRetryMax.setStatus('mandatory')
if mibBuilder.loadTexts: vArpRetryMax.setDescription('An integer indicating the maximum number of ARP retransmit attempts.')
vArpConfirmTimer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpConfirmTimer.setStatus('mandatory')
if mibBuilder.loadTexts: vArpConfirmTimer.setDescription('An integer indicating the number of seconds between confirmations of an ARP entry.')
vArpIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vArpIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: vArpIdleTimeout.setDescription('An integer indicating the number of seconds that a non-permanent ARP entry can go unused before it is deleted from the table. A non-permanent entry is one which was entered into the table by the ARP protocol rather than manually entered by a network administrator.')
vTcpIpPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpIpPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: vTcpIpPrecedence.setDescription('An integer indicating the value of the IP precedence that the TCP layer will request.')
vTcpSendQSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpSendQSize.setStatus('mandatory')
if mibBuilder.loadTexts: vTcpSendQSize.setDescription('An integer indicating the maximum number of data bytes that will be queued for transmission by the TCP protocol layer.')
vTcpRcvWinSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpRcvWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: vTcpRcvWinSize.setDescription('An integer indicating the TCP receive window size in bytes.')
vTcpSegSize = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpSegSize.setStatus('mandatory')
if mibBuilder.loadTexts: vTcpSegSize.setDescription('An integer indicating the TCP segment size in bytes.')
vTcpTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpTimerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vTcpTimerInterval.setDescription('An integer indicating the resolution (in 1/100 s) of all timer values used by TCP.')
vTcpChecksumEnable = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTcpChecksumEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vTcpChecksumEnable.setDescription('An integer indicating whether TCP checksums are enabled for all TCP connections.')
vTelCourierEnable = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelCourierEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vTelCourierEnable.setDescription('Determines whether or not the Telnet courier feature is enabled.')
vTelCourierText = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelCourierText.setStatus('mandatory')
if mibBuilder.loadTexts: vTelCourierText.setDescription('Defines the text which is tranmsitted for the Telnet courier feature.')
vTelSessCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessCurrNumber.setDescription('An integer indicating the current number of entries in vTelSessTable. This object is not constant.')
vTelSessTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4), )
if mibBuilder.loadTexts: vTelSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessTable.setDescription('A list of Telnet session entries. The number of entries is given by the value of vTelSessCurrNumber.')
vTelSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1), ).setIndexNames((0, "FMX1830", "vTelSessPortIndex"), (0, "FMX1830", "vTelSessIndex"))
if mibBuilder.loadTexts: vTelSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessEntry.setDescription('Parameter and status values for a Telnet session entry.')
vTelSessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessPortIndex.setDescription('The value of vPortIndex for the port to which this session belongs.')
vTelSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessIndex.setDescription('The session index in the context of the port, a non-zero positive integer. Session indexes within a port need not be sequential. Session indexes may be reused for different ports. For example, port 1 and port 3 may both have a session 2 at the same time.')
vTelSessOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessOrigin.setDescription("The session's source of establishment.")
vTelSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("starting", 1), ("running", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessState.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessState.setDescription('The current state of the session.')
vTelSessDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessDisconnect.setDescription("A control to terminate the session. In response to a get-request or get-next-request, the agent always returns 'ready(1)' as the value. Setting the value to 'execute(2)' causes termination.")
vTelSessLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessLocalAddr.setDescription('The local IP address for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vTelSessLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessLocalTcpPort.setDescription('The local TCP port number for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vTelSessRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessRemAddr.setDescription('The remote IP address for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vTelSessRemTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessRemTcpPort.setDescription('The remote TCP port number for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vTelSessCrToNet = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessCrToNet.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessCrToNet.setDescription('The character sequence which is sent to the remote node of the session to indicate a carriage return in the data stream.')
vTelSessCrFromTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessCrFromTerm.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessCrFromTerm.setDescription('The local character sequence which, when delivered to Telnet for transmission, is interpreted as a carriage return and translated to the sequence indicated by vTelSessCrToNet.')
vTelSessPadChar = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 12), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessPadChar.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessPadChar.setDescription('The character used by the local Telnet implementation to pad transmitted data immediately following a carriage return. A value of 0 indicates that the character is disabled.')
vTelSessPadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessPadLength.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessPadLength.setDescription('The number of pad characters inserted into the data stream by the local Telnet implementation immediately following a carriage return.')
vTelSessUserTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessUserTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessUserTimeout.setDescription('The maximum number of seconds Telnet instructs TCP to wait for an acknowledgement before terminating the session.')
vTelSessKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessKeepalive.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessKeepalive.setDescription('The number of seconds that the session may remain idle (no characters transmitted or recieved) before a TCP keepalive message is generated. A value of 0 indicates that keepalive messages are never generated.')
vTelSessIpTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessIpTTL.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessIpTTL.setDescription('The value of the IP time to live on packets transmitted for this session.')
vTelSessIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessIpPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessIpPrecedence.setDescription('The value of the IP precedence on packets transmitted for this session.')
vTelSessEndRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 18), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessEndRecord.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessEndRecord.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as an end-of-record character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessNop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 19), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessNop.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessNop.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as a no-op character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessDataMark = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 20), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessDataMark.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessDataMark.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as a data mark character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 21), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessBreak.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessBreak.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as a break character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessIntProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 22), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessIntProcess.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessIntProcess.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the interrupt process character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessAbortOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 23), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessAbortOutput.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessAbortOutput.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the abort output character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessAttention = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 24), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessAttention.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessAttention.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the attention character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 25), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessEraseChar.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessEraseChar.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the backspace character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 26), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessEraseLine.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessEraseLine.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the erase line character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessGoAhead = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 27), Character()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessGoAhead.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessGoAhead.setDescription('The local character which, when delivered to Telnet for transmission, is interpreted as the go ahead character and translated to the appropriate Telnet control function. A value of 255 indicates that the character is disabled.')
vTelSessNullPass = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vTelSessNullPass.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessNullPass.setDescription('When enabled, null characters received by Telnet immediately following carriage return characters are passed through the data stream untouched. When disabled, these padding null characters are removed from the received data stream.')
vTelSessTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessTermType.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessTermType.setDescription('A text string indicating the currently negotiated terminal type for the session. A zero-length value indicates no terminal type has been negotiated.')
vTelSessLocalEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalEcho.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessLocalEcho.setDescription('When enabled, the local Telnet will perform local echoing of all data delivered to it for transmission.')
vTelSessRemoteEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemoteEcho.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessRemoteEcho.setDescription('When enabled, the remote Telnet will perform echoing of all received network data.')
vTelSessLocalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessLocalBinary.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessLocalBinary.setDescription('When enabled, the local Telnet will transmit data in binary mode.')
vTelSessRemoteBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 12, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vTelSessRemoteBinary.setStatus('mandatory')
if mibBuilder.loadTexts: vTelSessRemoteBinary.setDescription('When enabled, the remote Telnet will transmit data in binary mode.')
vRlogSessCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessCurrNumber.setDescription('An integer indicating the current number of entries in vRlogSessTable. This object is not constant.')
vRlogSessTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2), )
if mibBuilder.loadTexts: vRlogSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessTable.setDescription('A list of Rlogin session entries. The number of entries is given by the value of vRlogSessCurrNumber.')
vRlogSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1), ).setIndexNames((0, "FMX1830", "vRlogSessPortIndex"), (0, "FMX1830", "vRlogSessIndex"))
if mibBuilder.loadTexts: vRlogSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessEntry.setDescription('Parameter and status values for a Rlogin session entry.')
vRlogSessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessPortIndex.setDescription('The value of vPortIndex for the port to which this session belongs.')
vRlogSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessIndex.setDescription('The session index in the context of the port, a non-zero positive integer. Session indexes within a port need not be sequential. Session indexes may be reused for different ports. For example, port 1 and port 3 may both have a session 2 at the same time.')
vRlogSessOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessOrigin.setDescription("The session's source of establishment.")
vRlogSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("starting", 1), ("running", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessState.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessState.setDescription('The current state of the session.')
vRlogSessDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRlogSessDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessDisconnect.setDescription("A control to terminate the session. In response to a get-request or get-next-request, the agent always returns 'ready(1)' as the value. Setting the value to 'execute(2)' causes termination.")
vRlogSessLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessLocalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessLocalAddr.setDescription('The local IP address for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vRlogSessLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessLocalTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessLocalTcpPort.setDescription('The local TCP port number for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vRlogSessRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessRemAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessRemAddr.setDescription('The remote IP address for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vRlogSessRemTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessRemTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessRemTcpPort.setDescription('The remote TCP port number for this session. This object supplies part of the necessary index information to locate the corresponding session in the MIB II TcpConnTable.')
vRlogSessTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 13, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRlogSessTermType.setStatus('mandatory')
if mibBuilder.loadTexts: vRlogSessTermType.setDescription('A text string indicating the currently negotiated terminal type for the session. A zero-length value indicates no terminal type has been negotiated.')
vLtNodeName = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: vLtNodeName.setDescription("The LAT-compatible node name for this unit. This name is transmitted as part of the node's LAT-compatible multicast messages.")
vLtNodeID = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: vLtNodeID.setDescription("The LAT-compatible identification string for this server. This string is transmitted as part of the agent's LAT-compatible multicast messages.")
vLtNodeGroups = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 3), LtGroupList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNodeGroups.setStatus('mandatory')
if mibBuilder.loadTexts: vLtNodeGroups.setDescription("A bit string indicating the LAT-compatible groups which are transmitted as part of the node's LAT-compatible multicast messages.")
vLtNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vLtNumber.setDescription("An integer indicating the LAT-compatible number that is tranmsitted as part of the node's LAT-compatible multicast messages.")
vLtMcastEnable = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMcastEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vLtMcastEnable.setDescription("An integer indicating whether the unit's LAT-compatible periodic multicast is enabled or not. If enabled, the unit will transmit one LAT-compatible multicast message every vLtMcastTimer seconds if it has any local services to announce.")
vLtMcastTimer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMcastTimer.setStatus('mandatory')
if mibBuilder.loadTexts: vLtMcastTimer.setDescription("An integer indicating the unit's multicast timer value in seconds. If multicasts are enabled, the unit will transmit one LAT-compatible multicast message every vLtMcastTimer seconds if it has any local services to announce.")
vLtCktTimer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtCktTimer.setStatus('mandatory')
if mibBuilder.loadTexts: vLtCktTimer.setDescription("An integer indicating the unit's circuit timer value in milliseconds. For circuits on which the unit is the master, circuit data is collected for transmission once every circuit timer interval.")
vLtKeepaliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtKeepaliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: vLtKeepaliveTimer.setDescription("An integer indicating the unit's keepalive timer value in seconds. For circuits on which the unit is the master, a keepalive message is transmitted once every keepalive timer interval if the circuit is otherwise idle.")
vLtMaxRetran = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxRetran.setStatus('mandatory')
if mibBuilder.loadTexts: vLtMaxRetran.setDescription('An integer indicating the maximum number of times the unit will attempt to retransmit LAT-compatible messages.')
vLtSlotPerCkt = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtSlotPerCkt.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSlotPerCkt.setDescription('An integer indicating the maximum number of slots per circuit that the unit can support. This effectively limits the number of sessions the unit can maintain with any other node on a single circuit.')
vLtMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxNodes.setStatus('mandatory')
if mibBuilder.loadTexts: vLtMaxNodes.setDescription('An integer indicating the maximum number of LAT-compatible nodes about which the unit will maintain information necessary for session establishment. When the unit receives LAT-compatible multicasts, it enters the pertinent information into its internal node table. This object indicates the maximum number of entries in the node table.')
vLtMaxSvcs = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: vLtMaxSvcs.setDescription('An integer indicating the maximum number of LAT-compatible services about which the unit will maintain information necessary for session establishment. When the unit receives LAT-compatible multicasts, it enters the pertinent information into its internal service table. This object indicates the size of the service table.')
vLtMaxCkts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtMaxCkts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtMaxCkts.setDescription('An integer indicating the maximum number of simultaneous active LAT-compatible circuits. In effect this object governs the maximum number of LAT-compatible nodes with which the unit can maintain simultaneous connections.')
vLtSessCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessCurrNumber.setDescription('An integer indicating the current number of entries in vLtSessTable. This object is not constant.')
vLtSessTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15), )
if mibBuilder.loadTexts: vLtSessTable.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessTable.setDescription('A list of LAT-compatible session entries. The number of entries is given by the value of vLtSessCurrNumber.')
vLtSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1), ).setIndexNames((0, "FMX1830", "vLtSessPortIndex"))
if mibBuilder.loadTexts: vLtSessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessEntry.setDescription('Parameter and status values for a LAT-compatible session entry.')
vLtSessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessPortIndex.setDescription('The value of vPortIndex for the port to which this session belongs.')
vLtSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessIndex.setDescription('The session index in the context of the port, a non-zero positive integer. Session indexes within a port need not be sequential. Session indexes may be reused for different ports. For example, port 1 and port 3 may both have a session 2 at the same time.')
vLtSessOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("network", 2), ("local", 3), ("remote-port", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessOrigin.setDescription("The session's source of establishment. 'network(2)' indicates that a remote node has started this session. 'local(3)' indicates that the session was started by the agent port given by vLtSessPortIndex. 'remote-port(4)' indicates that the session is local between two server ports, and the port given by vLtSessPortIndex was not the initiator of the session.")
vLtSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("starting", 1), ("running", 2), ("stopping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessState.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessState.setDescription('The current state of the session.')
vLtSessDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLtSessDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessDisconnect.setDescription("A control to terminate the session. In response to a get-request or get-next-request, the agent always returns 'ready(1)' as the value. Setting the value to 'execute(2)' causes termination.")
vLtSessSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessSvcName.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessSvcName.setDescription('A (readable) text string indicating the name of the LAT-compatible remote service. A zero-length value indicates that the remote service for this session is unknown.')
vLtSessNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessNodeName.setDescription('A (readable) text string indicating the name of the LAT-compatible remote node. A zero-length value indicates that the remote node for this session is unknown.')
vLtSessDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 15, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtSessDestName.setStatus('mandatory')
if mibBuilder.loadTexts: vLtSessDestName.setDescription('A (readable) text string indicating the name of the LAT-compatible remote destination port. A zero-length value indicates that the remote port name for this session is unknown.')
vLtTotalRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalRcvPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtTotalRcvPkts.setDescription('A count of the total number of LAT-compatible messages received and processed by the unit.')
vLtTotalTrnPkts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalTrnPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtTotalTrnPkts.setDescription('A count of the total number of LAT-compatible messages transmitted by the unit.')
vLtTotalRetranPkts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalRetranPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtTotalRetranPkts.setDescription('A count of the total number of LAT-compatible messages retransmited.')
vLtRcvCorruptPkts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtRcvCorruptPkts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtRcvCorruptPkts.setDescription('A count of the total number of LAT-compatible station packets recieved which were found to be invalid or corrupted.')
vLtRcvCorruptMcasts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtRcvCorruptMcasts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtRcvCorruptMcasts.setDescription('A count of the total number of LAT-compatible multicast packets recieved which were found to be invalid or corrupted.')
vLtRcvDuplicatePkts = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtRcvDuplicatePkts.setStatus('mandatory')
if mibBuilder.loadTexts: vLtRcvDuplicatePkts.setDescription('A count of the total number of LAT-compatible messages received which had already been acknowledged by the unit.')
vLtReqAccepted = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtReqAccepted.setStatus('mandatory')
if mibBuilder.loadTexts: vLtReqAccepted.setDescription('A count of the total number of remote connection requests which were received and accepted by the unit.')
vLtReqRejected = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtReqRejected.setStatus('mandatory')
if mibBuilder.loadTexts: vLtReqRejected.setDescription('A count of the total number of remote connection requests which were received and rejected by the unit.')
vLtTotalNodeDiscards = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 14, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLtTotalNodeDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: vLtTotalNodeDiscards.setDescription('A count of the total number of LAT-compatible nodes that the unit has not been able to insert into its internal node table, due to resource failures.')
vQueMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vQueMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: vQueMaxEntries.setDescription('An integer indicating the maximum number of queued connection requests. This governs the maximum value that vQueCurrNumber can take.')
vQueCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vQueCurrNumber.setDescription('An integer indicating the current number of entries in vQueTable. This object is not constant.')
vQueTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3), )
if mibBuilder.loadTexts: vQueTable.setStatus('mandatory')
if mibBuilder.loadTexts: vQueTable.setDescription('A list of queue entries. The number of entries is given by the value of vQueCurrNumber.')
vQueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3, 1), ).setIndexNames((0, "FMX1830", "vQueEntryNumber"))
if mibBuilder.loadTexts: vQueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vQueEntry.setDescription('Parameter and status values for a queue entry.')
vQueEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vQueEntryNumber.setDescription('A unique identifier for the queue entry. Entry numbers may be re-used, but there will never be two simultaneous queue entries with the same value of vQueEntryNumber.')
vQueSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueSvcName.setStatus('mandatory')
if mibBuilder.loadTexts: vQueSvcName.setDescription('The name of the service for which this queue entry is awating connection.')
vQueNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQueNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: vQueNodeName.setDescription('The name of the remote node with which the connection will take place.')
vQuePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vQuePortName.setStatus('mandatory')
if mibBuilder.loadTexts: vQuePortName.setDescription('The name of the port with which the connection will take place.')
vQueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vQueStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vQueStatus.setDescription("The current status of the queue entry. Setting the value of this object to 'invalid(2)' has the effect of deleting the queue entry.")
vSnmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpReadCommunity.setDescription('A current community name in use by the agent for which get-requests and getnext-requests are permitted.')
vSnmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpWriteCommunity.setDescription('A current community name in use by the agent for which the set-request is permitted.')
vSnmpReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpReadWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpReadWriteCommunity.setDescription('A current community name in use by the agent for which set-requests, get-requests, and getnext-requests are permitted.')
vSnmpWriteEnable = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpWriteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpWriteEnable.setDescription('An integer which indicates whether SET requests are permitted from any management station. This flag overrides use of the WRITE or READWRITE community names. Thus, if this object has the value disabled(2), no SET requests are permitted regardless of community name.')
vSnmpTrapDestCurrNumber = MibScalar((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vSnmpTrapDestCurrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestCurrNumber.setDescription('An integer indicating the current number of entries in vSnmpTrapDestTable. This object is not constant.')
vSnmpTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6), )
if mibBuilder.loadTexts: vSnmpTrapDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestTable.setDescription('A list of destination management stations to which this agent will address certain generated trap messages. The number of entries is given by the value of vSnmpTrapDestCurrNumber.')
vSnmpTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6, 1), ).setIndexNames((0, "FMX1830", "vSnmpTrapDestAddr"))
if mibBuilder.loadTexts: vSnmpTrapDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestEntry.setDescription('Parameter and status values for a SNMP trap destination entry.')
vSnmpTrapDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestAddr.setDescription('The IP address of this trap destination node.')
vSnmpTrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readwrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestCommunity.setDescription('Indication of which of the three locally maintained community names will be used in trap messages addressed to this trap destination.')
vSnmpTrapDestColdEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestColdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestColdEnable.setDescription("An indication of whether trap messages of the 'cold-start' type will be sent to this trap destination.")
vSnmpTrapDestAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestAuthEnable.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestAuthEnable.setDescription("An indication of whether trap messages of the 'authentication-failure' type will be sent to this trap destination.")
vSnmpTrapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 65, 1, 2, 6, 1, 16, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vSnmpTrapDestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vSnmpTrapDestStatus.setDescription("The current status of the trap destination entry. Setting this object to the value 'invalid(2)' has the effect of deleting the entry.")
mibBuilder.exportSymbols("FMX1830", vSnmpWriteCommunity=vSnmpWriteCommunity, vPortLocalSwitch=vPortLocalSwitch, fmxSnmp=fmxSnmp, vProfTermType=vProfTermType, vPortVirtualEnable=vPortVirtualEnable, vLtMaxCkts=vLtMaxCkts, vRlogSessTable=vRlogSessTable, server=server, vLtSessCurrNumber=vLtSessCurrNumber, vQueEntryNumber=vQueEntryNumber, vPortBackSwitch=vPortBackSwitch, vRlogSessPortIndex=vRlogSessPortIndex, vNsCurrNumber=vNsCurrNumber, vProfPadChar=vProfPadChar, vLtRcvCorruptPkts=vLtRcvCorruptPkts, vSysLtGroupStatus=vSysLtGroupStatus, vProfEndRecord=vProfEndRecord, vPortPrefPort=vPortPrefPort, vNsAllowLowerCase=vNsAllowLowerCase, vPortCharsDropped=vPortCharsDropped, vHostHostname=vHostHostname, vQueNodeName=vQueNodeName, vLtSessOrigin=vLtSessOrigin, protRlogin=protRlogin, vPortOverrunErrs=vPortOverrunErrs, vTelSessBreak=vTelSessBreak, vSysPasswordLimit=vSysPasswordLimit, vLtSessNodeName=vLtSessNodeName, vPortSecurityEnable=vPortSecurityEnable, vPortRcvChars=vPortRcvChars, protTelnet=protTelnet, vTelSessIpTTL=vTelSessIpTTL, vTelSessLocalTcpPort=vTelSessLocalTcpPort, vPortCTSstate=vPortCTSstate, vIpBcastAddr=vIpBcastAddr, vLtMaxNodes=vLtMaxNodes, vHostStatus=vHostStatus, vSecStatus=vSecStatus, vPortFailover=vPortFailover, vPortAutobaud=vPortAutobaud, vTelSessState=vTelSessState, vLtRcvDuplicatePkts=vLtRcvDuplicatePkts, vRlogSessDisconnect=vRlogSessDisconnect, vSecGroups=vSecGroups, vProfTcpTimeout=vProfTcpTimeout, vArpIdleTimeout=vArpIdleTimeout, vLtMcastTimer=vLtMcastTimer, vTelSessNop=vTelSessNop, vTcpChecksumEnable=vTcpChecksumEnable, vQueEntry=vQueEntry, vSnmpReadWriteCommunity=vSnmpReadWriteCommunity, fmxPort=fmxPort, vProfEraseChar=vProfEraseChar, vSnmpTrapDestEntry=vSnmpTrapDestEntry, vSvcVirtualText=vSvcVirtualText, vPortPrefMode=vPortPrefMode, fmxServerDevice=fmxServerDevice, vTelSessAbortOutput=vTelSessAbortOutput, vSysEtherType=vSysEtherType, vLtSessDisconnect=vLtSessDisconnect, vNsStatus=vNsStatus, vPortTable=vPortTable, vTelSessRemoteBinary=vTelSessRemoteBinary, vTacHostname=vTacHostname, fmxSystem=fmxSystem, vLtNodeID=vLtNodeID, vSysBootServer=vSysBootServer, vRlogSessTermType=vRlogSessTermType, vProfTable=vProfTable, vArpRetryMax=vArpRetryMax, vTelSessCrToNet=vTelSessCrToNet, vPortRemoteModify=vPortRemoteModify, serverMibs=serverMibs, vProfNop=vProfNop, vLtTotalNodeDiscards=vLtTotalNodeDiscards, vSnmpTrapDestAddr=vSnmpTrapDestAddr, vTelSessEndRecord=vTelSessEndRecord, vTelCourierText=vTelCourierText, vProfDataMark=vProfDataMark, vTelSessCurrNumber=vTelSessCurrNumber, vLtMaxSvcs=vLtMaxSvcs, vPortRIstate=vPortRIstate, vPortBroadcastEnable=vPortBroadcastEnable, vIpMaxInterfaces=vIpMaxInterfaces, fmxLt=fmxLt, vLtNodeGroups=vLtNodeGroups, vPortName=vPortName, vProfConcatenate=vProfConcatenate, vProfCrFromTerm=vProfCrFromTerm, vPortConsoleIndex=vPortConsoleIndex, vPortTrnChars=vPortTrnChars, vSecIndex=vSecIndex, vPortCurrSessNumber=vPortCurrSessNumber, vQueStatus=vQueStatus, vProfPadLength=vProfPadLength, vPortTacacsEnable=vPortTacacsEnable, vPortBreakDuration=vPortBreakDuration, vRlogSessLocalAddr=vRlogSessLocalAddr, vRlogSessEntry=vRlogSessEntry, vTelSessDataMark=vTelSessDataMark, vLtMaxRetran=vLtMaxRetran, vRlogSessLocalTcpPort=vRlogSessLocalTcpPort, vSecEnable=vSecEnable, fmxRlogin=fmxRlogin, vSnmpReadCommunity=vSnmpReadCommunity, vSecAddress=vSecAddress, vSvcName=vSvcName, serverDevice=serverDevice, vTelSessRemAddr=vTelSessRemAddr, vPortOutFlowState=vPortOutFlowState, vPortVirtualString=vPortVirtualString, vPortDCDstate=vPortDCDstate, vRlogSessRemTcpPort=vRlogSessRemTcpPort, vSysPrimaryBoot=vSysPrimaryBoot, vPortPasswordEnable=vPortPasswordEnable, vSvcLprEnable=vSvcLprEnable, devices=devices, vTcpTimerInterval=vTcpTimerInterval, fmxNameserver=fmxNameserver, vTelSessIpPrecedence=vTelSessIpPrecedence, vPortRing=vPortRing, vTelSessNullPass=vTelSessNullPass, vTacAddress=vTacAddress, vSvcStatus=vSvcStatus, vHostTTL=vHostTTL, vProfIpPrecedence=vProfIpPrecedence, vPortLoginMsgEnable=vPortLoginMsgEnable, vPortBroadcast=vPortBroadcast, vPortState=vPortState, vTelSessPortIndex=vTelSessPortIndex, vSvcTable=vSvcTable, vSvcRatingMode=vSvcRatingMode, vLtSessState=vLtSessState, vRlogSessCurrNumber=vRlogSessCurrNumber, vQueSvcName=vQueSvcName, vLtNodeName=vLtNodeName, service=service, fibronics=fibronics, fmxTelnet=fmxTelnet, vHostTable=vHostTable, vIpMaxNetHashEntries=vIpMaxNetHashEntries, vTcpIpPrecedence=vTcpIpPrecedence, vPortDSRstate=vPortDSRstate, vProfLocalBinary=vProfLocalBinary, protLt=protLt, vPortAbsoluteTimer=vPortAbsoluteTimer, vTelSessTermType=vTelSessTermType, vProfCurrNumber=vProfCurrNumber, vTelSessOrigin=vTelSessOrigin, fmxQueue=fmxQueue, vPortDTRstate=vPortDTRstate, vProfIpTTL=vProfIpTTL, vSysBootFileName=vSysBootFileName, vPortGroups=vPortGroups, vArpRetryTimeout=vArpRetryTimeout, fmxbd=fmxbd, vTelSessEraseLine=vTelSessEraseLine, vPortSignalCheckEnable=vPortSignalCheckEnable, vProfBreak=vProfBreak, vTelSessGoAhead=vTelSessGoAhead, vPortModemControl=vPortModemControl, vPortCurrSessProt=vPortCurrSessProt, fmxTcp=fmxTcp, vQuePortName=vQuePortName, vTcpSegSize=vTcpSegSize, vTelSessRemTcpPort=vTelSessRemTcpPort, fmxService=fmxService, vTelSessLocalEcho=vTelSessLocalEcho, vProfEraseLine=vProfEraseLine, vNsTable=vNsTable, fmxIp=fmxIp, vPortQueueing=vPortQueueing, vHostCurrNumber=vHostCurrNumber, vPortAutoPrompt=vPortAutoPrompt, vPortIOflush=vPortIOflush, vPortLock=vPortLock, vPortPrefSvc=vPortPrefSvc, vTacStatus=vTacStatus, vLtSessTable=vLtSessTable, vPortUserName=vPortUserName, vProfName=vProfName, vSecCurrNumber=vSecCurrNumber, vSvcVirtualEnable=vSvcVirtualEnable, vSvcPassword=vSvcPassword, fmxArp=fmxArp, vTacTable=vTacTable, vLtNumber=vLtNumber, vSysBroadband=vSysBroadband, vPortSessionLimit=vPortSessionLimit, vLtSessIndex=vLtSessIndex, slot=slot, vPortScreenType=vPortScreenType, vSysBootFilePath=vSysBootFilePath, vLtTotalRetranPkts=vLtTotalRetranPkts, vSvcCurrNumber=vSvcCurrNumber, vTelSessIndex=vTelSessIndex, vNsHostname=vNsHostname, port=port, vPortLoginPassword=vPortLoginPassword, vQueCurrNumber=vQueCurrNumber, vTcpRcvWinSize=vTcpRcvWinSize, vHostEntry=vHostEntry, vSvcIpAddr=vSvcIpAddr, vPortDTRwait=vPortDTRwait, vSysReboot=vSysReboot, vSnmpTrapDestCommunity=vSnmpTrapDestCommunity, vSnmpTrapDestAuthEnable=vSnmpTrapDestAuthEnable, vHostAddress=vHostAddress, vProfPermHostOnly=vProfPermHostOnly, vLtReqAccepted=vLtReqAccepted, vPortHandshake=vPortHandshake, vPortAccess=vPortAccess, vTelSessCrFromTerm=vTelSessCrFromTerm, vPortInactivityTimer=vPortInactivityTimer, vPortBreakMode=vPortBreakMode, vPortEntry=vPortEntry, vNsTTL=vNsTTL, fmxServerMib=fmxServerMib, vQueMaxEntries=vQueMaxEntries, vSvcRating=vSvcRating, vProfTcpPort=vProfTcpPort, vLtTotalTrnPkts=vLtTotalTrnPkts, vRlogSessIndex=vRlogSessIndex, vSysMaintenancePassword=vSysMaintenancePassword, vSecMask=vSecMask, vTelSessIntProcess=vTelSessIntProcess, serverProtocol=serverProtocol, vTelSessPadLength=vTelSessPadLength, vProfTcpKeepalive=vProfTcpKeepalive, vIpMaxHostHashEntries=vIpMaxHostHashEntries, vPortDSRlogout=vPortDSRlogout, vLtSessSvcName=vLtSessSvcName, vProfDomain=vProfDomain, vPortProfile=vPortProfile, vLtReqRejected=vLtReqRejected, vLtRcvCorruptMcasts=vLtRcvCorruptMcasts, vProfGoAhead=vProfGoAhead, vPortLogout=vPortLogout, vRlogSessState=vRlogSessState, vPortPrefNode=vPortPrefNode, vSysRemoteBoot=vSysRemoteBoot, vTelSessLocalBinary=vTelSessLocalBinary, vTelSessDisconnect=vTelSessDisconnect, vPortIndex=vPortIndex, vRlogSessOrigin=vRlogSessOrigin, vTelSessKeepalive=vTelSessKeepalive, vTelSessTable=vTelSessTable, protNone=protNone, vNsEntry=vNsEntry, vLtMcastEnable=vLtMcastEnable, vProfNullPass=vProfNullPass, vPortAutoConnect=vPortAutoConnect, vSnmpWriteEnable=vSnmpWriteEnable, vPortInterrupts=vPortInterrupts)
mibBuilder.exportSymbols("FMX1830", vPortXonMark=vPortXonMark, vIpMaxAddr=vIpMaxAddr, vLtKeepaliveTimer=vLtKeepaliveTimer, vProfRemoteBinary=vProfRemoteBinary, vLtSessPortIndex=vLtSessPortIndex, vTelSessRemoteEcho=vTelSessRemoteEcho, vSvcProfile=vSvcProfile, vIpMaxRoutes=vIpMaxRoutes, vPortFrameErrs=vPortFrameErrs, vSnmpTrapDestCurrNumber=vSnmpTrapDestCurrNumber, vPortSignalCheck=vPortSignalCheck, vQueTable=vQueTable, vProfEntry=vProfEntry, vTelCourierEnable=vTelCourierEnable, vPortDialup=vPortDialup, vPortActiveSessions=vPortActiveSessions, vPortFlowType=vPortFlowType, vArpConfirmTimer=vArpConfirmTimer, fmxHostname=fmxHostname, fmxTacacs=fmxTacacs, vSysSecondaryBoot=vSysSecondaryBoot, vPortSpeed=vPortSpeed, vTacEntry=vTacEntry, vTelSessUserTimeout=vTelSessUserTimeout, vProfLocalEcho=vProfLocalEcho, vLtSessDestName=vLtSessDestName, vPortMessageCodes=vPortMessageCodes, vLtSessEntry=vLtSessEntry, vNsAddress=vNsAddress, vPortPrompt=vPortPrompt, vSvcEntry=vSvcEntry, vPortLogoutMsgEnable=vPortLogoutMsgEnable, vRlogSessRemAddr=vRlogSessRemAddr, vPortXoffMark=vPortXoffMark, LtGroupList=LtGroupList, vTelSessAttention=vTelSessAttention, vLtCktTimer=vLtCktTimer, vSysIdentifier=vSysIdentifier, vSvcTcpPort=vSvcTcpPort, vTelSessLocalAddr=vTelSessLocalAddr, vSvcRawEnable=vSvcRawEnable, vPortParityErrs=vPortParityErrs, fmxProfile=fmxProfile, vSvcTelEnable=vSvcTelEnable, vProfAbortOutput=vProfAbortOutput, vTcpSendQSize=vTcpSendQSize, vSysPrivPassword=vSysPrivPassword, vProfRemoteEcho=vProfRemoteEcho, terminal_server=terminal_server, vProfAttention=vProfAttention, vTacServerCurrNumber=vTacServerCurrNumber, vSvcIdent=vSvcIdent, vPortNumber=vPortNumber, vPortInactiveLogout=vPortInactiveLogout, vPortCharSize=vPortCharSize, vTelSessEraseChar=vTelSessEraseChar, vPortAbsoluteLogout=vPortAbsoluteLogout, vSnmpTrapDestTable=vSnmpTrapDestTable, vProfStatus=vProfStatus, fmxIpSecurity=fmxIpSecurity, Character=Character, vSvcConnectEnable=vSvcConnectEnable, vSvcLtEnable=vSvcLtEnable, vPortType=vPortType, vPortParityType=vPortParityType, vPortInFlowState=vPortInFlowState, vProfIntProcess=vProfIntProcess, vPortRTSstate=vPortRTSstate, vSvcQueueEnable=vSvcQueueEnable, vArpMaxEntries=vArpMaxEntries, vLtSlotPerCkt=vLtSlotPerCkt, vTelSessPadChar=vTelSessPadChar, vSvcPorts=vSvcPorts, vSecEntry=vSecEntry, serverAdmin=serverAdmin, vSecTable=vSecTable, DisplayChar=DisplayChar, vNsRequestMode=vNsRequestMode, vTelSessEntry=vTelSessEntry, vLtTotalRcvPkts=vLtTotalRcvPkts, vPortVerification=vPortVerification, vProfCrToNet=vProfCrToNet, vPortForwSwitch=vPortForwSwitch, vSnmpTrapDestStatus=vSnmpTrapDestStatus, vSnmpTrapDestColdEnable=vSnmpTrapDestColdEnable)
