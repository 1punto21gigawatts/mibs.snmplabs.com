#
# PySNMP MIB module DOCS-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
docsIfMib, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfMib")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, TimeTicks, Bits, Integer32, Counter32, IpAddress, ModuleIdentity, Unsigned32, MibIdentifier, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Bits", "Integer32", "Counter32", "IpAddress", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64")
TruthValue, TextualConvention, TimeStamp, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "TimeStamp", "DisplayString", "MacAddress", "RowStatus")
docsQosMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 127, 7))
docsQosMIB.setRevisions(('2001-11-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsQosMIB.setRevisionsDescriptions(("Published as draft-ietf-ipcdn-qos-mib-06.txt. Changes from qos-mib-05 include: -Deprecated objects that were of type IpAddress and added new objects that were of type InetAddressType and InetAddress, to support both IPv4 and IPv6 in the docsQosPktClassTable. -Clarified the default value of the docsQosPktClassIpDestMask and docsQosPktClassIpSourceMask. -Corrected the description of the individual bits that make up the docsQosParamsSetRequestPolicyOct. -Corrected the spelling of docsCableMaclayer in the description of the docsQosServiceFlowLogIfIndex. -Clarified that some of counters from the docsQosDynamicServiceStatsTable, include retries. -Changed references to the latest Data-Over-Cable Service Interface Specifications: Radio Frequency Interface Specification. -Added objects that were removed from earlier revisions of the mib, as obsolete. -Clarified the Cable Modem's implementation of the docsQosParamSetTosAndMask. -Change the description of objects within the docsQosServiceClassTable, so that they were no longer templates for obsolete objects. ",))
if mibBuilder.loadTexts: docsQosMIB.setLastUpdated('200111090000Z')
if mibBuilder.loadTexts: docsQosMIB.setOrganization('IETF IPCDN Working Group')
if mibBuilder.loadTexts: docsQosMIB.setContactInfo(' Co-Author: Michael Patrick Postal: Motorola ISG 20 Cabot Blvd, MS M4-30 Mansfield, MA 02048-1193 U.S.A. Phone: +1 508 261 5707 E-mail: michael.patrick@motorola.com Co-Author: William Murwin Postal: Motorola BCS 20 Cabot Blvd, MS M4-25 Mansfield, MA 02048-1193 U.S.A. Phone: +1 508 261 5578 E-mail: w.murwin@motorola.com')
if mibBuilder.loadTexts: docsQosMIB.setDescription('This is the management information for Quality Of Service (QOS) for DOCSIS 1.1.')
docsQosMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 1))
class IfDirection(TextualConvention, Integer32):
    description = 'Indicates a direction on an RF MAC interface. The value downstream(1) is from Cable Modem Termination System to Cable Modem. The value upstream(2) is from Cable Modem to Cable Modem Termination System.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("downstream", 1), ("upstream", 2))

class BitRate(TextualConvention, Unsigned32):
    description = 'The rate of traffic in unit of bits per second. Used to specify traffic rate for QOS.'
    status = 'current'
    displayHint = 'd'

class SchedulingType(TextualConvention, Integer32):
    description = 'The scheduling service provided by a CMTS for an upstream service flow. If the parameter is omitted from an upstream QOS Parameter Set, this object takes the value of bestEffort (2). This parameter must be reported as undefined (1) for downstream QOS Parameter Sets.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6))

docsQosPktClassTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1), )
if mibBuilder.loadTexts: docsQosPktClassTable.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassTable.setDescription('This table describes the packet classification configured on the CM or CMTS. The model is that a packet either received as input from an interface or transmitted for output on an interface may be compared against an ordered list of rules pertaining to the packet contents. Each rule is a row of this table. A matching rule provides a service flow id to to which the packet is classified. All rules need to match for a packet to match a classifier. The objects in this row correspond to a set of Classifier Encoding parameters in a DOCSIS MAC management message. The docsQosPktClassBitMap indicates which particular parameters were present in the classifier as signalled in the DOCSIS message. If the referenced parameter was not present in the signalled DOCSIS 1.1 Classifier, the corresponding object in this row reports a value as specified in the DESCRIPTION section. ')
docsQosPktClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosPktClassEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassEntry.setDescription('An entry in this table provides a single packet classifier rule. The index ifIndex is an ifType of docsCableMaclayer(127).')
docsQosPktClassId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQosPktClassId.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.3.2')
if mibBuilder.loadTexts: docsQosPktClassId.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassId.setDescription('Index assigned to packet classifier entry by the CMTS which is unique per service flow.')
docsQosPktClassDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDirection.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassDirection.setDescription('Indicates the direction to which the classifier is applied.')
docsQosPktClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassPriority.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.3.5')
if mibBuilder.loadTexts: docsQosPktClassPriority.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassPriority.setDescription('The value specifies the order of evaluation of the classifiers. The higher the value the higher the priority. The value of 0 is used as default in provisioned service flows classifiers. The default value of 64 is used for dynamic service flow classifiers. If the referenced parameter is not present in a classifier, this object reports the default value as defined above.')
docsQosPktClassIpTosLow = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosLow.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.1')
if mibBuilder.loadTexts: docsQosPktClassIpTosLow.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassIpTosLow.setDescription('The low value of a range of TOS byte values. If the referenced parameter is not present in a classifier, this object reports the value of 0.')
docsQosPktClassIpTosHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosHigh.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.1')
if mibBuilder.loadTexts: docsQosPktClassIpTosHigh.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassIpTosHigh.setDescription('The 8-bit high value of a range of TOS byte values. If the referenced parameter is not present in a classifier, this object reports the value of 0.')
docsQosPktClassIpTosMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpTosMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.1')
if mibBuilder.loadTexts: docsQosPktClassIpTosMask.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassIpTosMask.setDescription('The mask value is bitwise ANDed with TOS byte in an IP packet and this value is used check range checking of TosLow and TosHigh. If the referenced parameter is not present in a classifier, this object reports the value of 0.')
docsQosPktClassIpProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 258))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpProtocol.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.2')
if mibBuilder.loadTexts: docsQosPktClassIpProtocol.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassIpProtocol.setDescription('This object indicates the value of the IP Protocol field required for IP packets to match this rule. The value 256 matches traffic with any IP Protocol value. The value 257 by convention matches both TCP and UDP. If the referenced parameter is not present in a classifier, this object reports the value of 258.')
docsQosPktClassIpSourceAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpSourceAddr.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.3')
if mibBuilder.loadTexts: docsQosPktClassIpSourceAddr.setStatus('deprecated')
if mibBuilder.loadTexts: docsQosPktClassIpSourceAddr.setDescription('This object is deprecated in favor of the object pair docsQosPktClassInetSourceAddrType and docsQosPktClassInetSourceAddr. Agents that choose to implement this object MUST report an address that matches docsQosPktClassInetSourceAddr object as long as docsQosPktClassInetSourceAddrType is ipv4(1). Otherwise, the value of this object shall be 0.0.0.0.')
docsQosPktClassIpSourceMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpSourceMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.4')
if mibBuilder.loadTexts: docsQosPktClassIpSourceMask.setStatus('deprecated')
if mibBuilder.loadTexts: docsQosPktClassIpSourceMask.setDescription('This object is deprecated in favor of the object pair docsQosPktClassInetSourceMaskType and docsQosPktClassInetSourceMask. Agents that choose to implement this object MUST report an address that matches docsQosPktClassInetSourceMask object as long as docsQosPktClassInetSourceMaskType is ipv4(1). Otherwise, the value of this object shall be 255.255.255.255. SNMP mangers should note that agent implementation of previous versions of this MIB report 0.0.0.0 as the value when the reference parameter is not present, rather than 255.255.255.255.')
docsQosPktClassIpDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpDestAddr.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.5')
if mibBuilder.loadTexts: docsQosPktClassIpDestAddr.setStatus('deprecated')
if mibBuilder.loadTexts: docsQosPktClassIpDestAddr.setDescription('This object is deprecated in favor of the object pair docsQosPktClassInetDestAddrType and docsQosPktClassInetDestAddr. Agents that choose to implement this object MUST report an address that matches docsQosPktClassInetDestAddr object as long as docsQosPktClassInetDestAddrType is ipv4(1). Otherwise, the value of this object shall be 0.0.0.0.')
docsQosPktClassIpDestMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassIpDestMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.6')
if mibBuilder.loadTexts: docsQosPktClassIpDestMask.setStatus('deprecated')
if mibBuilder.loadTexts: docsQosPktClassIpDestMask.setDescription('This object is deprecated in favor of the object pair docsQosPktClassInetDestMaskType and docsQosPktClassInetDestMask. Agents that choose to implement this object MUST report an address that matches docsQosPktClassInetDestMask object as long as docsQosPktClassInetDestMaskType is ipv4(1). Otherwise, the value of this object shall be 255.255.255.255. SNMP mangers should note that agent implementation of previous versions of this MIB report 0.0.0.0 as the value when the reference parameter is not present, rather than 255.255.255.255.')
docsQosPktClassSourcePortStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourcePortStart.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.7')
if mibBuilder.loadTexts: docsQosPktClassSourcePortStart.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassSourcePortStart.setDescription('This object specifies the low end inclusive range of TCP/UDP source port numbers to which a packet is compared. This object is irrelevant for non-TCP/UDP IP packets. If the referenced parameter is not present in a classifier, this object reports the value of 0.')
docsQosPktClassSourcePortEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourcePortEnd.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.8')
if mibBuilder.loadTexts: docsQosPktClassSourcePortEnd.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassSourcePortEnd.setDescription('This object specifies the high end inclusive range of TCP/UDP source port numbers to which a packet is compared. This object is irrelevant for non-TCP/UDP IP packets. If the referenced parameter is not present in a classifier, this object reports the value of 65535.')
docsQosPktClassDestPortStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestPortStart.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.9')
if mibBuilder.loadTexts: docsQosPktClassDestPortStart.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassDestPortStart.setDescription('This object specifies the low end inclusive range of TCP/UDP destination port numbers to which a packet is compared. If the referenced parameter is not present in a classifier, this object reports the value of 0.')
docsQosPktClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestPortEnd.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.10')
if mibBuilder.loadTexts: docsQosPktClassDestPortEnd.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassDestPortEnd.setDescription('This object specifies the high end inclusive range of TCP/UDP destination port numbers to which a packet is compared. If the referenced parameter is not present in a classifier, this object reports the value of 65535.')
docsQosPktClassDestMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestMacAddr.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.6.1')
if mibBuilder.loadTexts: docsQosPktClassDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassDestMacAddr.setDescription("An Ethernet packet matches an entry when its destination MAC address bitwise ANDed with docsQosPktClassDestMacMask equals the value of docsQosPktClassDestMacAddr. If the referenced parameter is not present in a classifier, this object reports the value of '000000000000'H. ")
docsQosPktClassDestMacMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassDestMacMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.6.1')
if mibBuilder.loadTexts: docsQosPktClassDestMacMask.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassDestMacMask.setDescription("An Ethernet packet matches an entry when its destination MAC address bitwise ANDed with docsQosPktClassDestMacMask equals the value of docsQosPktClassDestMacAddr. If the referenced parameter is not present in a classifier, this object reports the value of '000000000000'H. ")
docsQosPktClassSourceMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassSourceMacAddr.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.6.2')
if mibBuilder.loadTexts: docsQosPktClassSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassSourceMacAddr.setDescription("An Ethernet packet matches this entry when its source MAC address equals the value of this object. If the referenced parameter is not present in a classifier, this object reports the value of 'FFFFFFFFFFFF'H. ")
docsQosPktClassEnetProtocolType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethertype", 1), ("dsap", 2), ("mac", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassEnetProtocolType.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.6.3')
if mibBuilder.loadTexts: docsQosPktClassEnetProtocolType.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassEnetProtocolType.setDescription('This object indicates the format of the layer 3 protocol id in the Ethernet packet. A value of none(0) means that the rule does not use the layer 3 protocol type as a matching criteria. A value of ethertype(1) means that the rule applies only to frames which contains an EtherType value. Ethertype values are contained in packets using the Dec-Intel-Xerox (DIX) encapsulation or the RFC1042 Sub-Network Access Protocol (SNAP) encapsulation formats. A value of dsap(2) means that the rule applies only to frames using the IEEE802.3 encapsulation format with a Destination Service Access Point (DSAP) other than 0xAA (which is reserved for SNAP). A value of mac(3) means that the rule applies only to MAC management messages for MAC management messages. A value of all(4) means that the rule matches all Ethernet packets. If the Ethernet frame contains an 802.1P/Q Tag header (i.e. EtherType 0x8100), this object applies to the embedded EtherType field within the 802.1P/Q header. If the referenced parameter is not present in a classifier, this object reports the value of 0. ')
docsQosPktClassEnetProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassEnetProtocol.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.6.3')
if mibBuilder.loadTexts: docsQosPktClassEnetProtocol.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassEnetProtocol.setDescription("If docsQosEthPktClassProtocolType is none(0), this object is ignored when considering whether a packet matches the current rule. If dosQosPktClassEnetProtocolType is ethertype(1), this object gives the 16-bit value of the EtherType that the packet must match in order to match the rule. If docsQosPktClassEnetProtocolType is dsap(2), the lower 8 bits of this object's value must match the DSAP byte of the packet in order to match the rule. If docsQosPktClassEnetProtocolType is mac(3), the lower 8 bits of this object value represent a lower bound (inclusive) of MAC management message type codes matched, and the upper 8 bits of this object value represent the upper bound (inclusive) of matched MAC message type codes. Certain message type codes are excluded from matching, as specified in the reference. If the Ethernet frame contains an 802.1P/Q Tag header (i.e. EtherType 0x8100), this object applies to the embedded EtherType field within the 802.1P/Q header. If the referenced parameter is not present in the classifier, the value of this object is reported as 0. ")
docsQosPktClassUserPriApplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriApplies.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosPktClassUserPriApplies.setDescription('This object is obsolete.')
docsQosPktClassUserPriLow = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriLow.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.7.1')
if mibBuilder.loadTexts: docsQosPktClassUserPriLow.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassUserPriLow.setDescription('This object applies only to Ethernet frames using the 802.1P/Q tag header (indicated with EtherType 0x8100). Such frames include a 16-bit Tag that contains a 3 bit Priority field and a 12 bit VLAN number. Tagged Ethernet packets must have a 3-bit Priority field within the range of docsQosPktClassPriLow and docsQosPktClassPriHigh in order to match this rule. If the referenced parameter is not present in the classifier, the value of this object is reported as 0. ')
docsQosPktClassUserPriHigh = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassUserPriHigh.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.7.1')
if mibBuilder.loadTexts: docsQosPktClassUserPriHigh.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassUserPriHigh.setDescription('This object applies only to Ethernet frames using the 802.1P/Qtag header (indicated with EtherType 0x8100). Such frames include a 16-bit Tag that contains a 3 bit Priority field and a 12 bit VLAN number. Tagged Ethernet packets must have a 3-bit Priority field within the range of docsQosPktClassPriLow and docsQosPktClassPriHigh in order to match this rule. If the referenced parameter is not present in the classifier, the value of this object is reported as 7. ')
docsQosPktClassVlanId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassVlanId.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.7.2')
if mibBuilder.loadTexts: docsQosPktClassVlanId.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassVlanId.setDescription("This object applies only to Ethernet frames using the 802.1P/Q tag header. If this object's value is nonzero, tagged packets must have a VLAN Identifier that matches the value in order to match the rule. Only the least significant 12 bits of this object's value are valid. If the referenced parameter is not present in the classifier, the value of this object is reported as 0. ")
docsQosPktClassState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassState.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.3.6')
if mibBuilder.loadTexts: docsQosPktClassState.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassState.setDescription('This object indicates whether or not the classifier is enabled to classify packets to a Service Flow. If the referenced parameter is not present in the classifier, the value of this object is reported as active(1). ')
docsQosPktClassPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassPkts.setDescription('This object counts the number of packets that have been classified using this entry.')
docsQosPktClassBitMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("rulePriority", 0), ("activationState", 1), ("ipTos", 2), ("ipProtocol", 3), ("ipSourceAddr", 4), ("ipSourceMask", 5), ("ipDestAddr", 6), ("ipDestMask", 7), ("sourcePortStart", 8), ("sourcePortEnd", 9), ("destPortStart", 10), ("destPortEnd", 11), ("destMac", 12), ("sourceMac", 13), ("ethertype", 14), ("userPri", 15), ("vlanId", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassBitMap.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassBitMap.setDescription("This object indicates which parameter encodings were actually present in the DOCSIS packet classifier encoding signaled in the DOCSIS message that created or modified the classifier. Note that Dynamic Service Change messages have replace semantics, so that all non-default parameters must be present whether the classifier is being created or changed. A bit of of this object is set to 1 if the parameter indicated by the comment was present in the classifier encoding, and 0 otherwise. Note that BITS are encoded most significant bit first, so that if e.g. bits 6 and 7 are set, this object is encoded as the octet string '030000'H. ")
docsQosPktClassInetSourceAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetSourceAddrType.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.3')
if mibBuilder.loadTexts: docsQosPktClassInetSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetSourceAddrType.setDescription('The type of the internet address for docsQosPktClassInetSourceAddr. This type must be the same as the docsQosPktClassInetSourceMaskType. If the referenced parameter is not present in a classifier, this object reports the value of ipv4(1).')
docsQosPktClassInetSourceAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 29), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetSourceAddr.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.3')
if mibBuilder.loadTexts: docsQosPktClassInetSourceAddr.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetSourceAddr.setDescription("This object specifies the value of the IP Source Address required for packets to match this rule. An IP packet matches the rule when the packet ip source address bitwise ANDed with the docsQosPktClassInetSourceMask value equals the docsQosPktClassInetSourceAddr value. If the referenced parameter is not present in a classifier, this object reports the value of '00000000'H.")
docsQosPktClassInetSourceMaskType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetSourceMaskType.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.4')
if mibBuilder.loadTexts: docsQosPktClassInetSourceMaskType.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetSourceMaskType.setDescription('The type of the internet address for docsQosPktClassInetSourceMask. This type must be the same as the docsQosPktClassInetSourceAddrType. If the referenced parameter is not present in a classifier, this object reports the value of ipv4(1).')
docsQosPktClassInetSourceMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 31), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetSourceMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.4')
if mibBuilder.loadTexts: docsQosPktClassInetSourceMask.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetSourceMask.setDescription("This object specifies which bits of a packet's IP Source Address that are compared to match this rule. An IP packet matches the rule when the packet source address bitwise ANDed with the docsQosPktClassInetSourceMask value equals the docsQosIpPktClassInetSourceAddr value. If the referenced parameter is not present in a classifier, this object reports the value of 'FFFFFFFF'H.")
docsQosPktClassInetDestAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 32), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetDestAddrType.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.5')
if mibBuilder.loadTexts: docsQosPktClassInetDestAddrType.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetDestAddrType.setDescription('The type of the internet address for docsQosPktClassInetDestAddr. This type must be the same as the docsQosPktClassInetDestMaskType. If the referenced parameter is not present in a classifier, this object reports the value of ipv4(1).')
docsQosPktClassInetDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 33), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetDestAddr.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.5')
if mibBuilder.loadTexts: docsQosPktClassInetDestAddr.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetDestAddr.setDescription("This object specifies the value of the IP Destination Address required for packets to match this rule. An IP packet matches the rule when the packet ip destination address bitwise ANDed with the docsQosPktClassInetDestMask value equals the docsQosPktClassInetDestAddr value. If the referenced parameter is not present in a classifier, this object reports the value of '00000000'H.")
docsQosPktClassInetDestMaskType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetDestMaskType.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.6')
if mibBuilder.loadTexts: docsQosPktClassInetDestMaskType.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetDestMaskType.setDescription('The type of the internet address for docsQosPktClassInetDestMask. This type must be the same as the docsQosPktClassInetDestAddrType. If the referenced parameter is not present in a classifier, this object reports the value of ipv4(1).')
docsQosPktClassInetDestMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 1, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPktClassInetDestMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.5.6')
if mibBuilder.loadTexts: docsQosPktClassInetDestMask.setStatus('current')
if mibBuilder.loadTexts: docsQosPktClassInetDestMask.setDescription("This object specifies which bits of a packet's IP Destination Address that are compared to match this rule. An IP packet matches the rule when the packet destination address bitwise ANDed with the docsQosPktClassInetDestMask value equals the docsQosIpPktClassInetDestAddr value. If the referenced parameter is not present in a classifier, this object reports the value of 'FFFFFFFF'H.")
docsQosParamSetTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2), )
if mibBuilder.loadTexts: docsQosParamSetTable.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetTable.setDescription('This table describes the set of DOCSIS 1.1 QOS parameters defined in a managed device. The ifIndex index specifies a DOCSIS MAC Domain. The docsQosServiceFlowId index specifies a particular Service Flow. The docsQosParamSetType index indicates whether the active, admitted, or provisioned QOS Parameter Set is being described by the row. Only the QOS Parameter Sets of Docsis 1.1 service flows are represented in this table. Docsis 1.0 QOS service profiles are not represented in this table. Each row corresponds to a DOCSIS QOS Parameter Set as signaled via DOCSIS MAC management messages. Each object in the row corresponds to one or part of one DOCSIS 1.1 Service Flow Encoding. The docsQosParamSetBitMap object in the row indicates which particular parameters were signalled in the original registration or dynamic service request message that created the QOS Parameter Set. In many cases, even if a QOS Parameter Set parameter was not signalled, the DOCSIS specification calls for a default value to be used. That default value is reported as the value of the corresponding object in this row. Many objects are not applicable depending on the service flow direction or upstream scheduling type. The object value reported in this case is specified in the DESCRIPTION clause. ')
docsQosParamSetEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS-MIB", "docsQosParamSetType"))
if mibBuilder.loadTexts: docsQosParamSetEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetEntry.setDescription('A unique set of QOS parameters.')
docsQosParamSetServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetServiceClassName.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.3.4')
if mibBuilder.loadTexts: docsQosParamSetServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetServiceClassName.setDescription('Refers to the Service Class Name that the parameter set values were derived. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is a zero length string. ')
docsQosParamSetPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetPriority.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.1')
if mibBuilder.loadTexts: docsQosParamSetPriority.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetPriority.setDescription('The relative priority of a service flow. Higher numbers indicate higher priority. This priority should only be used to differentiate service flow with identical parameter sets. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is 0. If the parameter is not applicable, the reported value is 0. ')
docsQosParamSetMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 6), BitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficRate.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.2')
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficRate.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficRate.setDescription('Maximum sustained traffic rate allowed for this service flow in bits/sec. Must count all MAC frame data PDU from the bytes following the MAC header HCS to the end of the CRC. The number of bytes forwarded is limited during any time interval. The value 0 means no maximum traffic rate is enforced. This object applies to both upstream and downstream service flows. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is 0. If the parameter is not applicable, it is reported as 0. ')
docsQosParamSetMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficBurst.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.3')
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficBurst.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetMaxTrafficBurst.setDescription('Specifies the token bucket size in bytes for this parameter set. The value is calculated from the byte following the MAC header HCS to the end of the CRC. This object is applied in conjunction with docsQosParamSetMaxTrafficRate to calculate maximum sustained traffic rate. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object for scheduling types bestEffort (2), nonRealTimePollingService(3), and realTimePollingService(4) is 1522. If this parameter is not applicable, it is reported as 0. ')
docsQosParamSetMinReservedRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 8), BitRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinReservedRate.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.4')
if mibBuilder.loadTexts: docsQosParamSetMinReservedRate.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetMinReservedRate.setDescription('Specifies the guaranteed minimum rate in bits/sec for this parameter set. The value is calculated from the byte following the MAC header HCS to the end of the CRC. The default value of 0 has the meaning that no bandwidth is reserved. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is 0. If the parameter is not applicable, it is reported as 0. ')
docsQosParamSetMinReservedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMinReservedPkt.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.5')
if mibBuilder.loadTexts: docsQosParamSetMinReservedPkt.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetMinReservedPkt.setDescription("Specifies an assumed minimum packet size in bytes for which the docsQosParamSetMinReservedRate will be provided. The value is calculated from the byte following the MAC header HCS to the end of the CRC. If the referenced parameter is omitted from a DOCSIS QOS parameter set, the default value is CMTS implementation dependent. In this case, the CMTS reports the default value it is using and the CM reports a value of 0. If the referenced parameter is not applicable to the direction or scheduling type of the service flow, both CMTS and CM report this object's value as 0. ")
docsQosParamSetActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetActiveTimeout.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.6')
if mibBuilder.loadTexts: docsQosParamSetActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetActiveTimeout.setDescription('Specifies the maximum duration in seconds that resources remain unused on an active service flow before CMTS signals that both active and admitted parameters set are null. The default value of 0 signifies an infinite amount of time. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is 0. ')
docsQosParamSetAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetAdmittedTimeout.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.5.7')
if mibBuilder.loadTexts: docsQosParamSetAdmittedTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetAdmittedTimeout.setDescription('Specifies the maximum duration in seconds that resources remain in admitted state before resources must be released. The value of 0 signifies an infinite amount of time. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is 200. ')
docsQosParamSetMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxConcatBurst.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.1')
if mibBuilder.loadTexts: docsQosParamSetMaxConcatBurst.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetMaxConcatBurst.setDescription("Specifies the maximum concatenated burst in bytes which an upstream service flow is allowed. The value is calculated from the FC byte of the Concatenation MAC Header to the last CRC byte in of the last concatenated MAC frame, inclusive. The value of 0 specifies no maximum burst. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set, the default value of this object is 0. If the parameter is not applicable, this object's value is reported as 0. ")
docsQosParamSetSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 13), SchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetSchedulingType.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.2')
if mibBuilder.loadTexts: docsQosParamSetSchedulingType.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetSchedulingType.setDescription("Specifies the upstream scheduling service used for upstream service flow. If the referenced parameter is not present in the corresponding DOCSIS QOS Parameter Set of an upstream service flow, the default value of this object is bestEffort(2). For QOS parameter sets of downstream service flows, this object's value is reported as undefined(1). ")
docsQosParamSetNomPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetNomPollInterval.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.4')
if mibBuilder.loadTexts: docsQosParamSetNomPollInterval.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetNomPollInterval.setDescription("Specifies the nominal interval in microseconds between successive unicast request opportunities on an upstream service flow. This object applies only to upstream service flows with schedulingType of value nonRealTimePollingService(3), realTimePollingService(4), and unsolictedGrantServiceWithAD(5). The parameter is mandatory for realTimePollingService(4). If the parameter is omitted with nonRealTimePollingService(3), the CMTS uses an implementation dependent value. If the parameter is omitted with unsolictedGrantServiceWithAD(5), the CMTS uses as a default value the value of the Nominal Grant Interval parameter. In all cases, the CMTS reports the value it is using when the parameter is applicable. The CM reports the signaled parameter value if it was signaled, and 0 otherwise. If the referenced parameter is not applicable to the direction or scheduling type of the corresponding DOCSIS QOS Parameter Set, both CMTS and CM report this object's value as 0. ")
docsQosParamSetTolPollJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTolPollJitter.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.5')
if mibBuilder.loadTexts: docsQosParamSetTolPollJitter.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetTolPollJitter.setDescription("Specifies the maximum amount of time in microseconds that the unicast request interval may be delayed from the nominal periodic schedule on an upstream service flow. This parameter is applicable only to upstream service flows with a Schedulingtype of realTimePollingService(4) or unsolictedGrantServiceWithAD(5). If the referenced parameter is applicable but not present in the corresponding DOCSIS QOS Parameter Set, the CMTS uses an implementation dependent value and reports the value it is using. The CM reports a value of 0 in this case. If the parameter is not applicable to the direction or upstream scheduling type of the service flow, both CMTS and CM report this object's value as 0. ")
docsQosParamSetUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetUnsolicitGrantSize.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.6')
if mibBuilder.loadTexts: docsQosParamSetUnsolicitGrantSize.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetUnsolicitGrantSize.setDescription("Specifies the unsolicited grant size in bytes. The grant size includes the entire MAC frame data PDU from the Frame Control byte to end of the MAC frame. The referenced parameter is applicable only for upstream flows with a SchedulingType of of unsolicitedGrantServicewithAD(5) or unsolicitedGrantService(6), and is mandatory when applicable. Both CMTS and CM report the signaled value of the parameter in this case. If the referenced parameter is not applicable to the direction or scheduling type of the corresponding DOCSIS QOS Parameter Set, both CMTS and CM report this object's value as 0. ")
docsQosParamSetNomGrantInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetNomGrantInterval.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.7')
if mibBuilder.loadTexts: docsQosParamSetNomGrantInterval.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetNomGrantInterval.setDescription("Specifies the nominal interval in microseconds between successive data grant opportunities on an upstream service flow. The referenced parameter is applicable only for upstream flows with a SchedulingType of of unsolicitedGrantServicewithAD(5) or unsolicitedGrantService(6), and is mandatory when applicable. Both CMTS and CM report the signaled value of the parameter in this case. If the referenced parameter is not applicable to the direction or scheduling type of the corresponding DOCSIS QOS Parameter Set, both CMTS and CM report this object's value as 0. ")
docsQosParamSetTolGrantJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 19), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTolGrantJitter.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.8')
if mibBuilder.loadTexts: docsQosParamSetTolGrantJitter.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetTolGrantJitter.setDescription("Specifies the maximum amount of time in microseconds that the transmission opportunities may be delayed from the nominal periodic schedule. The referenced parameter is applicable only for upstream flows with a SchedulingType of of unsolicitedGrantServicewithAD(5) or unsolicitedGrantService(6), and is mandatory when applicable. Both CMTS and CM report the signaled value of the parameter in this case. If the referenced parameter is not applicable to the direction or scheduling type of the corresponding DOCSIS QOS Parameter Set, both CMTS and CM report this object's value as 0. ")
docsQosParamSetGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetGrantsPerInterval.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.9')
if mibBuilder.loadTexts: docsQosParamSetGrantsPerInterval.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetGrantsPerInterval.setDescription("Specifies the number of data grants per Nominal Grant Interval (docsQosParamSetNomGrantInterval). The referenced parameter is applicable only for upstream flows with a SchedulingType of of unsolicitedGrantServicewithAD(5) or unsolicitedGrantService(6), and is mandatory when applicable. Both CMTS and CM report the signaled value of the parameter in this case. If the referenced parameter is not applicable to the direction or scheduling type of the corresponding DOCSIS QOS Parameter Set, both CMTS and CM report this object's value as 0. ")
docsQosParamSetTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTosAndMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.10')
if mibBuilder.loadTexts: docsQosParamSetTosAndMask.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetTosAndMask.setDescription("Specifies the AND mask for IP TOS byte for overwriting IP packets TOS value. The IP packets TOS byte is bitwise ANDed with docsQosParamSetTosAndMask and result is bitwise ORed with docsQosParamSetTosORMask and result is written to IP packet TOS byte. A value of 'FF'H for docsQosParamSetTosAndMask and a value of '00'H for docsQosParamSetTosOrMask means that IP Packet TOS byte is not overwritten. Even though the this object is only enforced by the Cable Modem Termination System (CMTS), Cable Modems must report the value as signaled in the referenced parameter. This combination is reported if the referenced parameter is not present in a QOS Parameter Set.")
docsQosParamSetTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetTosOrMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.10')
if mibBuilder.loadTexts: docsQosParamSetTosOrMask.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetTosOrMask.setDescription('Specifies the OR mask for IP TOS byte. See the description of docsQosParamSetTosAndMask for further details.')
docsQosParamSetMaxLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 23), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetMaxLatency.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.7.1')
if mibBuilder.loadTexts: docsQosParamSetMaxLatency.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetMaxLatency.setDescription('Specifies the maximum latency between the reception of a packet by the CMTS on its NSI and the forwarding of the packet to the RF interface. A value of 0 signifies no maximum latency enforced. This object only applies to downstream service flows. If the referenced parameter is not present in the corresponding downstream DOCSIS QOS Parameter Set, the default value is 0. This parameter is not applicable to upstream DOCSIS QOS Parameter Sets, and its value is reported as 0 in this case. ')
docsQosParamSetType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("admitted", 2), ("provisioned", 3))))
if mibBuilder.loadTexts: docsQosParamSetType.setReference('SP-RFIv1.1-I07-010829, 8.1.5')
if mibBuilder.loadTexts: docsQosParamSetType.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetType.setDescription('Defines the type of the QOS parameter set defined by this row. active(1) indicates the Active QOS parameter set, describing the service currently being provided by the Docsis MAC domain to the service flow. admitted(2) indicates the Admitted QOS Parameter Set, describing services reserved by by the Docsis MAC domain for use by the service flow. provisioned (3) describes the QOS Parameter Set defined in the DOCSIS CM Configuration file for the service flow.')
docsQosParamSetRequestPolicyOct = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetRequestPolicyOct.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.6.3')
if mibBuilder.loadTexts: docsQosParamSetRequestPolicyOct.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetRequestPolicyOct.setDescription("Specifies which transmit interval opportunities the CM omits for upstream transmission requests and packet transmissions. This object takes its default value for downstream service flows. Unless otherwise indicated, a bit value of 1 means that a CM must *not* use that opportunity for upstream transmission. Calling bit 0 the least significant bit of the least significant (4th) octet, and increasing bit number with significance, the bit definitions are as defined below: broadcastReqOpp(0): all CMs broadcast request opportunities priorityReqMulticastReq(1): priority request multicast request opportunities reqDataForReq(2): request/data opportunities for requests reqDataForData(3): request/data opportunities for data piggybackReqWithData(4): piggyback requests with data concatenateData(5): concatenate data fragmentData(6): fragment data suppresspayloadheaders(7): suppress payload headers dropPktsExceedUGSize(8): A value of 1 mean that service flow must drop packet that do not fit in the Unsolicited Grant size If the referenced parameter is not present in a QOS Parameter Set, the value of this object is reported as '00000000'H. ")
docsQosParamSetBitMap = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 2, 1, 26), Bits().clone(namedValues=NamedValues(("trafficPriority", 0), ("maxTrafficRate", 1), ("maxTrafficBurst", 2), ("minReservedRate", 3), ("minReservedPkt", 4), ("activeTimeout", 5), ("admittedTimeout", 6), ("maxConcatBurst", 7), ("schedulingType", 8), ("requestPolicy", 9), ("nomPollInterval", 10), ("tolPollJitter", 11), ("unsolicitGrantSize", 12), ("nomGrantInterval", 13), ("tolGrantJitter", 14), ("grantsPerInterval", 15), ("tosOverwrite", 16), ("maxLatency", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosParamSetBitMap.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetBitMap.setDescription("This object indicates the set of QOS Parameter Set parameters actually signaled in the DOCSIS registration or dynamic service request message that created or modified the QOS Parameter Set. A bit is set to 1 when the parameter described by the indicated reference section is present in the original request. Note that when Service Class names are expanded, the registration or dynamic response message may contain parameters as expanded by the CMTS based on a stored service class. These expanded parameters are *not* indicated by a 1 bit in this object. Note that even though some QOS Parameter Set parameters may not be signalled in a message (so that the paramater's bit in this object is 0) the DOCSIS specification calls for default values to be used. These default values are reported as the corresponding object's value in the row. Note that BITS objects are encoded most significant bit first. For example, if bits 1 and 16 are set, the value of this object is the octet string '400080'H. ")
docsQosServiceFlowTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3), )
if mibBuilder.loadTexts: docsQosServiceFlowTable.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowTable.setDescription('This table describes the set of Docsis-QOS Service Flows in a managed device. ')
docsQosServiceFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowEntry.setDescription('Describes a service flow. An entry in the table exists for each Service Flow ID. The ifIndex is an ifType of docsCableMaclayer(127).')
docsQosServiceFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosServiceFlowId.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.3.2')
if mibBuilder.loadTexts: docsQosServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowId.setDescription('An index assigned to a service flow by CMTS.')
docsQosServiceFlowProvisionedParamSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowProvisionedParamSetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowProvisionedParamSetIndex.setDescription('This object is obsolete.')
docsQosServiceFlowAdmittedParamSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowAdmittedParamSetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowAdmittedParamSetIndex.setDescription('This object is obsolete.')
docsQosServiceFlowActiveParamSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowActiveParamSetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowActiveParamSetIndex.setDescription('This object is obsolete.')
docsQosServiceFlowSID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowSID.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.3.3')
if mibBuilder.loadTexts: docsQosServiceFlowSID.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowSID.setDescription('Service Identifier (SID) assigned to an admitted or active service flow. This object reports a value of 0 if a Service Id is not associated with the service flow. Only active or admitted upstream service flows will have a Service Id (SID).')
docsQosServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 7), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowDirection.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.1/2')
if mibBuilder.loadTexts: docsQosServiceFlowDirection.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowDirection.setDescription('The direction of the service flow.')
docsQosServiceFlowPrimary = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPrimary.setReference('SP-RFIv1.1-I07-010829, Section 8.1 ')
if mibBuilder.loadTexts: docsQosServiceFlowPrimary.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowPrimary.setDescription('Object reflects whether service flow is the primary or a secondary service flow. A primary service flow is the default service flow for otherwise unclassified traffic and all MAC messages.')
docsQosServiceFlowActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowActiveTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowActiveTimeout.setDescription('This object is obsolete.')
docsQosServiceFlowAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowAdmittedTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowAdmittedTimeout.setDescription('This object is obsolete.')
docsQosServiceFlowSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 11), SchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowSchedulingType.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowSchedulingType.setDescription('This object is obsolete.')
docsQosServiceFlowRequestPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowRequestPolicy.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowRequestPolicy.setDescription('This object is obsolete.')
docsQosServiceFlowTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTosAndMask.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowTosAndMask.setDescription('This object is obsolete.')
docsQosServiceFlowTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTosOrMask.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceFlowTosOrMask.setDescription('This object is obsolete.')
docsQosServiceFlowStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4), )
if mibBuilder.loadTexts: docsQosServiceFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowStatsTable.setDescription('This table describes statistics associated with the Service Flows in a managed device. ')
docsQosServiceFlowStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"))
if mibBuilder.loadTexts: docsQosServiceFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowStatsEntry.setDescription('Describes a set of service flow statistics. An entry in the table exists for each Service Flow ID. The ifIndex is an ifType of docsCableMaclayer(127).')
docsQosServiceFlowPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowPkts.setDescription("The number of Packet Data PDUs classified to this service flow. This object does not count MAC-specific management messages. CMs not classifying downstream packets may report this object's value as 0. ")
docsQosServiceFlowOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowOctets.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowOctets.setDescription("The number of octets transmitted on the Docsis RF network from the byte after the MAC header HCS to the end of the CRC for all packets counted in the docsQosServiceFlowPkts object for this row. Note that this counts the octets after payload header suppression has been applied. CMs not classifying to a downstream service flow may report this object's value as 0 for that flow. ")
docsQosServiceFlowTimeCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTimeCreated.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowTimeCreated.setDescription('The value of sysUpTime when the service flow was created.')
docsQosServiceFlowTimeActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowTimeActive.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowTimeActive.setDescription('The total time that service flow has been active.')
docsQosServiceFlowPHSUnknowns = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPHSUnknowns.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowPHSUnknowns.setDescription('The number of packets received on the service flow with an unknown payload header suppression index.')
docsQosServiceFlowPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDropPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDropPkts.setDescription('The number of packets dropped due to policing of the service flow, especially to limit the maximum rate of the flow.')
docsQosServiceFlowPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDelayPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowPolicedDelayPkts.setDescription('The number of packet delayed due to policing of the service flow, especially to limit the maximum rate of the flow.')
docsQosUpstreamStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5), )
if mibBuilder.loadTexts: docsQosUpstreamStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQosUpstreamStatsTable.setDescription('This table describes statistics associated with upstream service flows. All counted frames must be received without an FCS error.')
docsQosUpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosSID"))
if mibBuilder.loadTexts: docsQosUpstreamStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosUpstreamStatsEntry.setDescription('Describes a set of upstream service flow statistics. An entry in the table exists for each upstream Service Flow in a managed device. The ifIndex is an ifType of docsCableMaclayer(127).')
docsQosSID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsQosSID.setStatus('current')
if mibBuilder.loadTexts: docsQosSID.setDescription('Identifies a service id for an admitted or active upstream service flow.')
docsQosUpstreamFragments = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamFragments.setStatus('current')
if mibBuilder.loadTexts: docsQosUpstreamFragments.setDescription('The number of fragmentation headers received on an upstream service flow, regardless of whether the fragment was correctly reassembled into a valid packet. ')
docsQosUpstreamFragDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamFragDiscards.setStatus('current')
if mibBuilder.loadTexts: docsQosUpstreamFragDiscards.setDescription('The number of upstream fragments discarded and not assembled into a valid upstream packet.')
docsQosUpstreamConcatBursts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosUpstreamConcatBursts.setStatus('current')
if mibBuilder.loadTexts: docsQosUpstreamConcatBursts.setDescription('The number of concatenation headers received on an upstream service flow.')
docsQosDynamicServiceStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6), )
if mibBuilder.loadTexts: docsQosDynamicServiceStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicServiceStatsTable.setDescription('This table describes statistics associated with the Dynamic Service Flows in a managed device. ')
docsQosDynamicServiceStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosIfDirection"))
if mibBuilder.loadTexts: docsQosDynamicServiceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicServiceStatsEntry.setDescription('Describes a set of dynamic service flow statistics. Two entries exist for each Docsis mac layer interface for the upstream and downstream direction. On the CMTS, the downstream direction row indicates messages transmitted or transactions originated by the CMTS. The upstream direction row indicates messages received or transaction originated by the CM. On the CM, the downstream direction row indicates messages received or transactions originated by the CMTS. The upstream direction row indicates messages transmitted by the CM or transactions originated by the CM. The ifIndex is an ifType of docsCableMaclayer(127).')
docsQosIfDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsQosIfDirection.setStatus('current')
if mibBuilder.loadTexts: docsQosIfDirection.setDescription('The direction of interface.')
docsQosDSAReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSAReqs.setStatus('current')
if mibBuilder.loadTexts: docsQosDSAReqs.setDescription('The number of Dynamic Service Addition Requests, including retries.')
docsQosDSARsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSARsps.setStatus('current')
if mibBuilder.loadTexts: docsQosDSARsps.setDescription('The number of Dynamic Service Addition Responses, including retries.')
docsQosDSAAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSAAcks.setStatus('current')
if mibBuilder.loadTexts: docsQosDSAAcks.setDescription('The number of Dynamic Service Addition Acknowledgements, including retries.')
docsQosDSCReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCReqs.setStatus('current')
if mibBuilder.loadTexts: docsQosDSCReqs.setDescription('The number of Dynamic Service Change Requests, including retries.')
docsQosDSCRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCRsps.setStatus('current')
if mibBuilder.loadTexts: docsQosDSCRsps.setDescription('The number of Dynamic Service Change Responses, including retries.')
docsQosDSCAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSCAcks.setStatus('current')
if mibBuilder.loadTexts: docsQosDSCAcks.setDescription('The number of Dynamic Service Change Acknowledgements, including retries.')
docsQosDSDReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSDReqs.setStatus('current')
if mibBuilder.loadTexts: docsQosDSDReqs.setDescription('The number of Dynamic Service Delete Requests, including retries.')
docsQosDSDRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDSDRsps.setStatus('current')
if mibBuilder.loadTexts: docsQosDSDRsps.setDescription('The number of Dynamic Service Delete Responses, including retries.')
docsQosDynamicAdds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicAdds.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicAdds.setDescription('The number of successful Dynamic Service Addition transactions.')
docsQosDynamicAddFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicAddFails.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicAddFails.setDescription('The number of failed Dynamic Service Addition transactions.')
docsQosDynamicChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicChanges.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicChanges.setDescription('The number of successful Dynamic Service Change transactions.')
docsQosDynamicChangeFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicChangeFails.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicChangeFails.setDescription('The number of failed Dynamic Service Change transactions.')
docsQosDynamicDeletes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicDeletes.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicDeletes.setDescription('The number of successful Dynamic Service Delete transactions.')
docsQosDynamicDeleteFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDynamicDeleteFails.setStatus('current')
if mibBuilder.loadTexts: docsQosDynamicDeleteFails.setDescription('The number of failed Dynamic Service Delete transactions.')
docsQosDCCReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCReqs.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCReqs.setDescription('The number of Dynamic Channel Change Request messages traversing an interface. This count is nonzero only on downstream direction rows. This count should include number of retries.')
docsQosDCCRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRsps.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCRsps.setDescription('The number of Dynamic Channel Change Response messages traversing an interface. This count is nonzero only on upstream direction rows. This count should include number of retries.')
docsQosDCCAcks = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCAcks.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCAcks.setDescription('The number of Dynamic Channel Change Acknowledgement messages traversing an interface. This count is nonzero only on downstream direction rows. This count should include number of retries.')
docsQosDCCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCs.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCs.setDescription('The number of successful Dynamic Channel Change transactions. This count is nonzero only on downstream direction rows.')
docsQosDCCFails = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCFails.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCFails.setDescription('The number of failed Dynamic Channel Change transactions. This count is nonzero only on downstream direction rows.')
docsQosDCCRspDeparts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRspDeparts.setReference('SP-RFIv2.0-I04-037030, Figures 11-59, 11-60, 11-61, 11-62')
if mibBuilder.loadTexts: docsQosDCCRspDeparts.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCRspDeparts.setDescription('The number of Dynamic Channel Change Response (depart) messages traversing an interface. This count is only counted on upstream direction rows.')
docsQosDCCRspArrives = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosDCCRspArrives.setReference('SP-RFIv2.0-I04-037030, Figures 11-59, 11-60, 11-61, 11-62')
if mibBuilder.loadTexts: docsQosDCCRspArrives.setStatus('current')
if mibBuilder.loadTexts: docsQosDCCRspArrives.setDescription('The number of Dynamic Channel Change Response (arrive) messages traversing an interface. This count is only counted on upstream direction rows. This count should include number of retries.')
docsQosServiceFlowLogTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7), )
if mibBuilder.loadTexts: docsQosServiceFlowLogTable.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogTable.setDescription('This table contains a log of the disconnected Service Flows in a managed device.')
docsQosServiceFlowLogEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosServiceFlowLogIndex"))
if mibBuilder.loadTexts: docsQosServiceFlowLogEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogEntry.setDescription('The information regarding a single disconnected service flow.')
docsQosServiceFlowLogIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsQosServiceFlowLogIndex.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogIndex.setDescription('Unique index for a logged service flow.')
docsQosServiceFlowLogIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogIfIndex.setDescription('The ifIndex of ifType docsCableMaclayer(127) on the CMTS where the service flow was present.')
docsQosServiceFlowLogSFID = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogSFID.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogSFID.setDescription('The index assigned to the service flow by the CMTS.')
docsQosServiceFlowLogCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogCmMac.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogCmMac.setDescription('The MAC address for the cable modem associated with the service flow.')
docsQosServiceFlowLogPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogPkts.setDescription('The number of packets counted on this service flow after payload header suppression.')
docsQosServiceFlowLogOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogOctets.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogOctets.setDescription('The number of octets counted on this service flow after payload header suppression.')
docsQosServiceFlowLogTimeDeleted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeDeleted.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeDeleted.setDescription('The value of sysUpTime when the service flow was deleted.')
docsQosServiceFlowLogTimeCreated = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeCreated.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeCreated.setDescription('The value of sysUpTime when the service flow was created.')
docsQosServiceFlowLogTimeActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeActive.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogTimeActive.setDescription('The total time that service flow was active.')
docsQosServiceFlowLogDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 11), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogDirection.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogDirection.setDescription('The value of docsQosServiceFlowDirection for the service flow.')
docsQosServiceFlowLogPrimary = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPrimary.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogPrimary.setDescription('The value of docsQosServiceFlowPrimary for the service flow.')
docsQosServiceFlowLogServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogServiceClassName.setDescription('The value of docsQosParamSetServiceClassName for the provisioned QOS Parameter Set of the service flow.')
docsQosServiceFlowLogPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDropPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDropPkts.setDescription('The final value of docsQosServiceFlowPolicedDropPkts for the service flow.')
docsQosServiceFlowLogPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDelayPkts.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogPolicedDelayPkts.setDescription('The final value of docsQosServiceFlowPolicedDelayPkts for the service flow.')
docsQosServiceFlowLogControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsQosServiceFlowLogControl.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceFlowLogControl.setDescription('Setting this object to the value destroy(6) removes this entry from the table. Reading this object return the value active(1).')
docsQosServiceClassTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8), )
if mibBuilder.loadTexts: docsQosServiceClassTable.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassTable.setDescription('This table describes the set of Docsis-QOS Service Classes in a CMTS. ')
docsQosServiceClassEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosServiceClassName"))
if mibBuilder.loadTexts: docsQosServiceClassEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassEntry.setDescription('A provisioned service class on a CMTS. Each entry defines a template for certain DOCSIS QOS Parameter Set values. When a CM creates or modifies an Admitted QOS Parameter Set for a Service Flow, it may reference a Service Class Name instead of providing explicit QOS Parameter Set values. In this case, the CMTS populates the QOS Parameter Set with the applicable corresponding values from the named Service Class. Subsequent changes to a Service Class row do *not* affect the QOS Parameter Set values of any service flows already admitted. A service class template applies to only a single direction, as indicated in the docsQosServiceClassDirection object. ')
docsQosServiceClassName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: docsQosServiceClassName.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.3.4')
if mibBuilder.loadTexts: docsQosServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassName.setDescription('Service Class Name. DOCSIS specifies that the maximum size is 15 printable ASCII characters with a terminating zero. The terminating zero is not represented in this DisplayString syntax object. ')
docsQosServiceClassParamSetIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassParamSetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosServiceClassParamSetIndex.setDescription('This object is obsolete.')
docsQosServiceClassStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassStatus.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassStatus.setDescription('Used to create or delete rows in this table.')
docsQosServiceClassPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPriority.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPriority.setDescription('Template for docsQosParamSetPriority.')
docsQosServiceClassMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 5), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficRate.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficRate.setDescription('Template for docsQosParamSetMaxTrafficRate.')
docsQosServiceClassMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 6), Unsigned32().clone(1522)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficBurst.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassMaxTrafficBurst.setDescription('Template for docsQosParamSetMaxTrafficBurst.')
docsQosServiceClassMinReservedRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 7), BitRate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinReservedRate.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassMinReservedRate.setDescription('Template for docsQosParamSEtMinReservedRate.')
docsQosServiceClassMinReservedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMinReservedPkt.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassMinReservedPkt.setDescription('Template for docsQosParamSetMinReservedPkt.')
docsQosServiceClassMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxConcatBurst.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassMaxConcatBurst.setDescription('Template for docsQosParamSetMaxConcatBurst.')
docsQosServiceClassNomPollInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassNomPollInterval.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassNomPollInterval.setDescription('Template for docsQosParamSetNomPollInterval.')
docsQosServiceClassTolPollJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTolPollJitter.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassTolPollJitter.setDescription('Template for docsQosParamSetTolPollJitter.')
docsQosServiceClassUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassUnsolicitGrantSize.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassUnsolicitGrantSize.setDescription('Template for docsQosParamSetUnsolicitGrantSize.')
docsQosServiceClassNomGrantInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassNomGrantInterval.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassNomGrantInterval.setDescription('Template for docsQosParamSetNomGrantInterval.')
docsQosServiceClassTolGrantJitter = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTolGrantJitter.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassTolGrantJitter.setDescription('Template for docsQosParamSetTolGrantJitter.')
docsQosServiceClassGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassGrantsPerInterval.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassGrantsPerInterval.setDescription('Template for docsQosParamSetGrantsPerInterval.')
docsQosServiceClassMaxLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassMaxLatency.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.7.1')
if mibBuilder.loadTexts: docsQosServiceClassMaxLatency.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassMaxLatency.setDescription('Template for docsQosParamSetClassMaxLatency.')
docsQosServiceClassActiveTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassActiveTimeout.setDescription('Template for docsQosParamSetActiveTimeout.')
docsQosServiceClassAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassAdmittedTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassAdmittedTimeout.setDescription('Template for docsQosParamSetAdmittedTimeout.')
docsQosServiceClassSchedulingType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 19), SchedulingType().clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassSchedulingType.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassSchedulingType.setDescription('Template for docsQosParamSetSchedulingType.')
docsQosServiceClassRequestPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassRequestPolicy.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassRequestPolicy.setDescription('Template for docsQosParamSetRequestPolicyOct.')
docsQosServiceClassTosAndMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTosAndMask.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassTosAndMask.setDescription('Template for docsQosParamSetTosAndMask.')
docsQosServiceClassTosOrMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassTosOrMask.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassTosOrMask.setDescription('Template for docsQosParamSetTosOrMask.')
docsQosServiceClassDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 8, 1, 23), IfDirection().clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassDirection.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassDirection.setDescription('Specifies whether the service class template applies to upstream or downstream service flows.')
docsQosServiceClassPolicyTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9), )
if mibBuilder.loadTexts: docsQosServiceClassPolicyTable.setReference('SP-RFIv1.1-I07-010829, Appendix E.2.1')
if mibBuilder.loadTexts: docsQosServiceClassPolicyTable.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPolicyTable.setDescription('This table describes the set of Docsis-QOS Service Class Policies. This table is an adjunct to the docsDevFilterPolicy table. Entries in docsDevFilterPolicy table can point to specific rows in this table. This table permits mapping a packet to a service class name of an active service flow so long as a classifier does not exist at a higher priority. ')
docsQosServiceClassPolicyEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosServiceClassPolicyIndex"))
if mibBuilder.loadTexts: docsQosServiceClassPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPolicyEntry.setDescription('A service class name policy entry.')
docsQosServiceClassPolicyIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsQosServiceClassPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPolicyIndex.setDescription('Index value to uniquely identify an entry in this table.')
docsQosServiceClassPolicyName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPolicyName.setReference('SP-RFIv1.1-I07-010829, Appendix E.2.1')
if mibBuilder.loadTexts: docsQosServiceClassPolicyName.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPolicyName.setDescription('Service Class Name to identify the name of the service class flow to which the packet should be directed.')
docsQosServiceClassPolicyRulePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPolicyRulePriority.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.1.3.5')
if mibBuilder.loadTexts: docsQosServiceClassPolicyRulePriority.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPolicyRulePriority.setDescription('Service Class Policy rule priority for the entry.')
docsQosServiceClassPolicyStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQosServiceClassPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassPolicyStatus.setDescription('Used to create or delete rows in this table. This object should not be deleted if it is reference by an entry in docsDevFilterPolicy. The reference should be deleted first.')
docsQosPHSTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10), )
if mibBuilder.loadTexts: docsQosPHSTable.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSTable.setDescription('This table describes set of payload header suppression entries.')
docsQosPHSEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: docsQosPHSEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSEntry.setDescription('A payload header suppression entry. The ifIndex is an ifType of docsCableMaclayer(127). The index docsQosServiceFlowId selects one service flow from the cable MAC layer interface. The docsQosPktClassId index matches an index of the docsQosPktClassTable. ')
docsQosPHSField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSField.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.10.1')
if mibBuilder.loadTexts: docsQosPHSField.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSField.setDescription('Payload header suppression field defines the bytes of the header which must be suppressed/restored by the sending/receiving device. The number of octets in this object should be the same as the value of docsQosPHSSize.')
docsQosPHSMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSMask.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.10.3')
if mibBuilder.loadTexts: docsQosPHSMask.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSMask.setDescription("Payload header suppression mask defines the bit mask which used in combination with the docsQosPHSField defines which bytes in header must be suppressed/restored by the sending or receiving device. Each bit of this bit mask corresponds to a byte in the docsQosPHSField, with the least significant bit corresponding to first byte of the docsQosPHSField. Each bit of the bit mask specifies whether of not the corresponding byte should be suppressed in the packet. A bit value of '1' indicates that the byte should be suppressed by the sending device and restored by the receiving device. A bit value of '0' indicates that the byte should not be suppressed by the sending device or restored by the receiving device. If the bit mask does not contain a bit for each byte in the docsQosPHSField then the bit mask is extended with bit values of '1' to be the necessary length.")
docsQosPHSSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSSize.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.10.4')
if mibBuilder.loadTexts: docsQosPHSSize.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSSize.setDescription('Payload header suppression size specifies the number of bytes in the header to be suppressed and restored. The value of this object must match the number of bytes in the docsQosPHSField.')
docsQosPHSVerify = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSVerify.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.10.5')
if mibBuilder.loadTexts: docsQosPHSVerify.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSVerify.setDescription("Payload header suppression verification value of 'true' the sender must verify docsQosPHSField is the same as what is contained in the packet to be suppressed.")
docsQosPHSClassifierIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSClassifierIndex.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosPHSClassifierIndex.setDescription('This object is obsolete.')
docsQosPHSIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosPHSIndex.setReference('SP-RFIv1.1-I07-010829, Appendix C.2.2.10.2')
if mibBuilder.loadTexts: docsQosPHSIndex.setStatus('current')
if mibBuilder.loadTexts: docsQosPHSIndex.setDescription('Payload header suppression index uniquely references the PHS rule for a given service flow.')
docsQosCmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11), )
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowTable.setStatus('current')
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowTable.setDescription('This table provide for referencing the service flows associated with a particular cable modem. This allows for indexing into other docsQos tables that are indexed by docsQosServiceFlowId and ifIndex.')
docsQosCmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1), ).setIndexNames((0, "DOCS-QOS-MIB", "docsQosCmtsCmMac"), (0, "DOCS-QOS-MIB", "docsQosCmtsServiceFlowId"))
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowEntry.setStatus('current')
if mibBuilder.loadTexts: docsQosCmtsMacToSrvFlowEntry.setDescription('An entry is created by CMTS for each service flow connected to this CMTS.')
docsQosCmtsCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsQosCmtsCmMac.setStatus('current')
if mibBuilder.loadTexts: docsQosCmtsCmMac.setDescription('The MAC address for the referenced CM.')
docsQosCmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQosCmtsServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsQosCmtsServiceFlowId.setDescription('An index assigned to a service flow by CMTS.')
docsQosCmtsIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 7, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQosCmtsIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsQosCmtsIfIndex.setDescription('The ifIndex of ifType docsCableMacLayter(127) on the CMTS that is connected to the Cable Modem.')
docsQosNotification = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 2))
docsQosConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 3))
docsQosGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1))
docsQosCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 2))
docsQosCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 2, 1)).setObjects(("DOCS-QOS-MIB", "docsQosBaseGroup"), ("DOCS-QOS-MIB", "docsQosCmtsGroup"), ("DOCS-QOS-MIB", "docsQosParamSetGroup"), ("DOCS-QOS-MIB", "docsQosSrvClassPolicyGroup"), ("DOCS-QOS-MIB", "docsQosServiceClassGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCompliance = docsQosCompliance.setStatus('current')
if mibBuilder.loadTexts: docsQosCompliance.setDescription('The compliance statement for MCNS Cable Modems and Cable Modem Termination Systems that implement DOCSIS Service Flows.')
docsQosBaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 1)).setObjects(("DOCS-QOS-MIB", "docsQosPktClassDirection"), ("DOCS-QOS-MIB", "docsQosPktClassPriority"), ("DOCS-QOS-MIB", "docsQosPktClassIpTosLow"), ("DOCS-QOS-MIB", "docsQosPktClassIpTosHigh"), ("DOCS-QOS-MIB", "docsQosPktClassIpTosMask"), ("DOCS-QOS-MIB", "docsQosPktClassIpProtocol"), ("DOCS-QOS-MIB", "docsQosPktClassSourcePortStart"), ("DOCS-QOS-MIB", "docsQosPktClassSourcePortEnd"), ("DOCS-QOS-MIB", "docsQosPktClassDestPortStart"), ("DOCS-QOS-MIB", "docsQosPktClassDestPortEnd"), ("DOCS-QOS-MIB", "docsQosPktClassDestMacAddr"), ("DOCS-QOS-MIB", "docsQosPktClassDestMacMask"), ("DOCS-QOS-MIB", "docsQosPktClassSourceMacAddr"), ("DOCS-QOS-MIB", "docsQosPktClassEnetProtocolType"), ("DOCS-QOS-MIB", "docsQosPktClassEnetProtocol"), ("DOCS-QOS-MIB", "docsQosPktClassUserPriLow"), ("DOCS-QOS-MIB", "docsQosPktClassUserPriHigh"), ("DOCS-QOS-MIB", "docsQosPktClassVlanId"), ("DOCS-QOS-MIB", "docsQosPktClassState"), ("DOCS-QOS-MIB", "docsQosPktClassPkts"), ("DOCS-QOS-MIB", "docsQosPktClassBitMap"), ("DOCS-QOS-MIB", "docsQosPktClassInetSourceAddrType"), ("DOCS-QOS-MIB", "docsQosPktClassInetSourceAddr"), ("DOCS-QOS-MIB", "docsQosPktClassInetSourceMaskType"), ("DOCS-QOS-MIB", "docsQosPktClassInetSourceMask"), ("DOCS-QOS-MIB", "docsQosPktClassInetDestAddrType"), ("DOCS-QOS-MIB", "docsQosPktClassInetDestAddr"), ("DOCS-QOS-MIB", "docsQosPktClassInetDestMaskType"), ("DOCS-QOS-MIB", "docsQosPktClassInetDestMask"), ("DOCS-QOS-MIB", "docsQosServiceFlowSID"), ("DOCS-QOS-MIB", "docsQosServiceFlowDirection"), ("DOCS-QOS-MIB", "docsQosServiceFlowPrimary"), ("DOCS-QOS-MIB", "docsQosServiceFlowPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowOctets"), ("DOCS-QOS-MIB", "docsQosServiceFlowTimeCreated"), ("DOCS-QOS-MIB", "docsQosServiceFlowTimeActive"), ("DOCS-QOS-MIB", "docsQosServiceFlowPHSUnknowns"), ("DOCS-QOS-MIB", "docsQosServiceFlowPolicedDropPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowPolicedDelayPkts"), ("DOCS-QOS-MIB", "docsQosDSAReqs"), ("DOCS-QOS-MIB", "docsQosDSARsps"), ("DOCS-QOS-MIB", "docsQosDSAAcks"), ("DOCS-QOS-MIB", "docsQosDSCReqs"), ("DOCS-QOS-MIB", "docsQosDSCRsps"), ("DOCS-QOS-MIB", "docsQosDSCAcks"), ("DOCS-QOS-MIB", "docsQosDSDReqs"), ("DOCS-QOS-MIB", "docsQosDSDRsps"), ("DOCS-QOS-MIB", "docsQosDynamicAdds"), ("DOCS-QOS-MIB", "docsQosDynamicAddFails"), ("DOCS-QOS-MIB", "docsQosDynamicChanges"), ("DOCS-QOS-MIB", "docsQosDynamicChangeFails"), ("DOCS-QOS-MIB", "docsQosDynamicDeletes"), ("DOCS-QOS-MIB", "docsQosDynamicDeleteFails"), ("DOCS-QOS-MIB", "docsQosDCCReqs"), ("DOCS-QOS-MIB", "docsQosDCCRsps"), ("DOCS-QOS-MIB", "docsQosDCCAcks"), ("DOCS-QOS-MIB", "docsQosDCCs"), ("DOCS-QOS-MIB", "docsQosDCCFails"), ("DOCS-QOS-MIB", "docsQosPHSField"), ("DOCS-QOS-MIB", "docsQosPHSMask"), ("DOCS-QOS-MIB", "docsQosPHSSize"), ("DOCS-QOS-MIB", "docsQosPHSVerify"), ("DOCS-QOS-MIB", "docsQosPHSIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosBaseGroup = docsQosBaseGroup.setStatus('current')
if mibBuilder.loadTexts: docsQosBaseGroup.setDescription('Group of objects implemented in both Cable Modems and Cable Modem Termination Systems.')
docsQosParamSetGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 2)).setObjects(("DOCS-QOS-MIB", "docsQosParamSetServiceClassName"), ("DOCS-QOS-MIB", "docsQosParamSetPriority"), ("DOCS-QOS-MIB", "docsQosParamSetMaxTrafficRate"), ("DOCS-QOS-MIB", "docsQosParamSetMaxTrafficBurst"), ("DOCS-QOS-MIB", "docsQosParamSetMinReservedRate"), ("DOCS-QOS-MIB", "docsQosParamSetMinReservedPkt"), ("DOCS-QOS-MIB", "docsQosParamSetActiveTimeout"), ("DOCS-QOS-MIB", "docsQosParamSetAdmittedTimeout"), ("DOCS-QOS-MIB", "docsQosParamSetMaxConcatBurst"), ("DOCS-QOS-MIB", "docsQosParamSetSchedulingType"), ("DOCS-QOS-MIB", "docsQosParamSetNomPollInterval"), ("DOCS-QOS-MIB", "docsQosParamSetTolPollJitter"), ("DOCS-QOS-MIB", "docsQosParamSetUnsolicitGrantSize"), ("DOCS-QOS-MIB", "docsQosParamSetNomGrantInterval"), ("DOCS-QOS-MIB", "docsQosParamSetTolGrantJitter"), ("DOCS-QOS-MIB", "docsQosParamSetGrantsPerInterval"), ("DOCS-QOS-MIB", "docsQosParamSetTosAndMask"), ("DOCS-QOS-MIB", "docsQosParamSetTosOrMask"), ("DOCS-QOS-MIB", "docsQosParamSetMaxLatency"), ("DOCS-QOS-MIB", "docsQosParamSetRequestPolicyOct"), ("DOCS-QOS-MIB", "docsQosParamSetBitMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosParamSetGroup = docsQosParamSetGroup.setStatus('current')
if mibBuilder.loadTexts: docsQosParamSetGroup.setDescription('Group of objects implemented in both Cable Modems and Cable Modem Termination Systems for QOS parameter sets.')
docsQosCmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 3)).setObjects(("DOCS-QOS-MIB", "docsQosUpstreamFragments"), ("DOCS-QOS-MIB", "docsQosUpstreamFragDiscards"), ("DOCS-QOS-MIB", "docsQosUpstreamConcatBursts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogIfIndex"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogSFID"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogCmMac"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogOctets"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogTimeDeleted"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogTimeCreated"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogTimeActive"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogDirection"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPrimary"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogServiceClassName"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPolicedDropPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogPolicedDelayPkts"), ("DOCS-QOS-MIB", "docsQosServiceFlowLogControl"), ("DOCS-QOS-MIB", "docsQosCmtsIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosCmtsGroup = docsQosCmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsQosCmtsGroup.setDescription('Mandatory group of objects implemented only in the CMTS.')
docsQosSrvClassPolicyGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 4)).setObjects(("DOCS-QOS-MIB", "docsQosServiceClassPolicyName"), ("DOCS-QOS-MIB", "docsQosServiceClassPolicyRulePriority"), ("DOCS-QOS-MIB", "docsQosServiceClassPolicyStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosSrvClassPolicyGroup = docsQosSrvClassPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: docsQosSrvClassPolicyGroup.setDescription('Group of objects implemented in both Cable Modems and Cable Modem Termination Systems when supporting policy based service flows.')
docsQosServiceClassGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 5)).setObjects(("DOCS-QOS-MIB", "docsQosServiceClassStatus"), ("DOCS-QOS-MIB", "docsQosServiceClassPriority"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxTrafficRate"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxTrafficBurst"), ("DOCS-QOS-MIB", "docsQosServiceClassMinReservedRate"), ("DOCS-QOS-MIB", "docsQosServiceClassMinReservedPkt"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxConcatBurst"), ("DOCS-QOS-MIB", "docsQosServiceClassNomPollInterval"), ("DOCS-QOS-MIB", "docsQosServiceClassTolPollJitter"), ("DOCS-QOS-MIB", "docsQosServiceClassUnsolicitGrantSize"), ("DOCS-QOS-MIB", "docsQosServiceClassNomGrantInterval"), ("DOCS-QOS-MIB", "docsQosServiceClassTolGrantJitter"), ("DOCS-QOS-MIB", "docsQosServiceClassGrantsPerInterval"), ("DOCS-QOS-MIB", "docsQosServiceClassMaxLatency"), ("DOCS-QOS-MIB", "docsQosServiceClassActiveTimeout"), ("DOCS-QOS-MIB", "docsQosServiceClassAdmittedTimeout"), ("DOCS-QOS-MIB", "docsQosServiceClassSchedulingType"), ("DOCS-QOS-MIB", "docsQosServiceClassRequestPolicy"), ("DOCS-QOS-MIB", "docsQosServiceClassTosAndMask"), ("DOCS-QOS-MIB", "docsQosServiceClassTosOrMask"), ("DOCS-QOS-MIB", "docsQosServiceClassDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosServiceClassGroup = docsQosServiceClassGroup.setStatus('current')
if mibBuilder.loadTexts: docsQosServiceClassGroup.setDescription('The docsQosServiceClassTable objects. If a CMTS implements expansion of Service Class Names in a QOS Parameter Set, this group is mandatory on the CMTS. If the CMTS does not support Service Class Names, this group may be unimplemented in the CMTS. This group is not implemented on the CM. ')
docsQosDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 6)).setObjects(("DOCS-QOS-MIB", "docsQosPktClassIpSourceAddr"), ("DOCS-QOS-MIB", "docsQosPktClassIpSourceMask"), ("DOCS-QOS-MIB", "docsQosPktClassIpDestAddr"), ("DOCS-QOS-MIB", "docsQosPktClassIpDestMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosDeprecatedGroup = docsQosDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: docsQosDeprecatedGroup.setDescription('This is a collection of deprecated DOCS-QOS-MIB objects.')
docsQosObsoleteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 7, 3, 1, 7)).setObjects(("DOCS-QOS-MIB", "docsQosPktClassUserPriApplies"), ("DOCS-QOS-MIB", "docsQosServiceFlowProvisionedParamSetIndex"), ("DOCS-QOS-MIB", "docsQosServiceFlowAdmittedParamSetIndex"), ("DOCS-QOS-MIB", "docsQosServiceFlowActiveParamSetIndex"), ("DOCS-QOS-MIB", "docsQosServiceFlowActiveTimeout"), ("DOCS-QOS-MIB", "docsQosServiceFlowAdmittedTimeout"), ("DOCS-QOS-MIB", "docsQosServiceFlowSchedulingType"), ("DOCS-QOS-MIB", "docsQosServiceFlowRequestPolicy"), ("DOCS-QOS-MIB", "docsQosServiceFlowTosAndMask"), ("DOCS-QOS-MIB", "docsQosServiceFlowTosOrMask"), ("DOCS-QOS-MIB", "docsQosServiceClassParamSetIndex"), ("DOCS-QOS-MIB", "docsQosPHSClassifierIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQosObsoleteGroup = docsQosObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: docsQosObsoleteGroup.setDescription('This is a collection of obsolete DOCS-QOS-MIB objects.')
mibBuilder.exportSymbols("DOCS-QOS-MIB", docsQosParamSetTable=docsQosParamSetTable, docsQosPktClassState=docsQosPktClassState, docsQosDSDReqs=docsQosDSDReqs, docsQosUpstreamConcatBursts=docsQosUpstreamConcatBursts, docsQosServiceClassPolicyName=docsQosServiceClassPolicyName, docsQosParamSetTolPollJitter=docsQosParamSetTolPollJitter, docsQosParamSetType=docsQosParamSetType, docsQosServiceClassGrantsPerInterval=docsQosServiceClassGrantsPerInterval, docsQosParamSetEntry=docsQosParamSetEntry, docsQosPktClassEnetProtocol=docsQosPktClassEnetProtocol, docsQosServiceFlowLogDirection=docsQosServiceFlowLogDirection, docsQosServiceClassMaxLatency=docsQosServiceClassMaxLatency, docsQosDSAAcks=docsQosDSAAcks, docsQosPktClassIpDestMask=docsQosPktClassIpDestMask, docsQosPktClassInetDestAddrType=docsQosPktClassInetDestAddrType, docsQosServiceFlowLogPolicedDropPkts=docsQosServiceFlowLogPolicedDropPkts, docsQosDCCRspArrives=docsQosDCCRspArrives, docsQosServiceClassSchedulingType=docsQosServiceClassSchedulingType, docsQosDSAReqs=docsQosDSAReqs, docsQosParamSetPriority=docsQosParamSetPriority, docsQosParamSetGroup=docsQosParamSetGroup, docsQosDSDRsps=docsQosDSDRsps, docsQosServiceFlowTable=docsQosServiceFlowTable, docsQosPktClassTable=docsQosPktClassTable, docsQosUpstreamFragments=docsQosUpstreamFragments, docsQosParamSetTosOrMask=docsQosParamSetTosOrMask, docsQosPktClassSourcePortEnd=docsQosPktClassSourcePortEnd, docsQosPktClassDestPortEnd=docsQosPktClassDestPortEnd, docsQosIfDirection=docsQosIfDirection, docsQosPHSIndex=docsQosPHSIndex, docsQosParamSetMinReservedPkt=docsQosParamSetMinReservedPkt, docsQosSrvClassPolicyGroup=docsQosSrvClassPolicyGroup, docsQosServiceFlowLogTimeCreated=docsQosServiceFlowLogTimeCreated, docsQosPktClassIpTosMask=docsQosPktClassIpTosMask, docsQosServiceFlowPkts=docsQosServiceFlowPkts, docsQosServiceFlowLogPrimary=docsQosServiceFlowLogPrimary, docsQosPktClassIpProtocol=docsQosPktClassIpProtocol, docsQosServiceFlowActiveParamSetIndex=docsQosServiceFlowActiveParamSetIndex, docsQosServiceClassPolicyIndex=docsQosServiceClassPolicyIndex, docsQosServiceClassMaxConcatBurst=docsQosServiceClassMaxConcatBurst, docsQosServiceFlowPolicedDelayPkts=docsQosServiceFlowPolicedDelayPkts, docsQosServiceClassTolPollJitter=docsQosServiceClassTolPollJitter, docsQosPktClassEnetProtocolType=docsQosPktClassEnetProtocolType, BitRate=BitRate, docsQosMIB=docsQosMIB, docsQosServiceFlowLogTimeDeleted=docsQosServiceFlowLogTimeDeleted, docsQosPHSField=docsQosPHSField, docsQosServiceFlowTimeActive=docsQosServiceFlowTimeActive, docsQosPktClassPriority=docsQosPktClassPriority, docsQosCmtsServiceFlowId=docsQosCmtsServiceFlowId, docsQosServiceFlowDirection=docsQosServiceFlowDirection, docsQosServiceClassMaxTrafficRate=docsQosServiceClassMaxTrafficRate, docsQosPktClassIpTosLow=docsQosPktClassIpTosLow, docsQosDCCRspDeparts=docsQosDCCRspDeparts, docsQosServiceClassUnsolicitGrantSize=docsQosServiceClassUnsolicitGrantSize, docsQosDSCAcks=docsQosDSCAcks, docsQosCmtsMacToSrvFlowEntry=docsQosCmtsMacToSrvFlowEntry, docsQosParamSetMinReservedRate=docsQosParamSetMinReservedRate, docsQosPktClassIpSourceAddr=docsQosPktClassIpSourceAddr, docsQosParamSetUnsolicitGrantSize=docsQosParamSetUnsolicitGrantSize, docsQosPktClassInetSourceAddrType=docsQosPktClassInetSourceAddrType, docsQosServiceClassMaxTrafficBurst=docsQosServiceClassMaxTrafficBurst, docsQosServiceClassPolicyEntry=docsQosServiceClassPolicyEntry, docsQosCmtsIfIndex=docsQosCmtsIfIndex, docsQosServiceFlowPHSUnknowns=docsQosServiceFlowPHSUnknowns, docsQosServiceFlowLogPkts=docsQosServiceFlowLogPkts, docsQosServiceFlowAdmittedTimeout=docsQosServiceFlowAdmittedTimeout, docsQosPHSClassifierIndex=docsQosPHSClassifierIndex, docsQosServiceFlowRequestPolicy=docsQosServiceFlowRequestPolicy, docsQosUpstreamStatsEntry=docsQosUpstreamStatsEntry, docsQosServiceClassGroup=docsQosServiceClassGroup, docsQosServiceClassMinReservedRate=docsQosServiceClassMinReservedRate, docsQosPktClassDestMacMask=docsQosPktClassDestMacMask, docsQosPktClassEntry=docsQosPktClassEntry, docsQosServiceFlowId=docsQosServiceFlowId, docsQosServiceFlowSchedulingType=docsQosServiceFlowSchedulingType, docsQosUpstreamFragDiscards=docsQosUpstreamFragDiscards, docsQosCmtsGroup=docsQosCmtsGroup, docsQosPHSSize=docsQosPHSSize, docsQosServiceFlowLogEntry=docsQosServiceFlowLogEntry, docsQosParamSetRequestPolicyOct=docsQosParamSetRequestPolicyOct, docsQosParamSetNomGrantInterval=docsQosParamSetNomGrantInterval, docsQosPktClassIpSourceMask=docsQosPktClassIpSourceMask, docsQosServiceFlowTosAndMask=docsQosServiceFlowTosAndMask, docsQosPktClassIpTosHigh=docsQosPktClassIpTosHigh, docsQosDSCRsps=docsQosDSCRsps, docsQosServiceClassRequestPolicy=docsQosServiceClassRequestPolicy, docsQosParamSetSchedulingType=docsQosParamSetSchedulingType, docsQosServiceFlowTosOrMask=docsQosServiceFlowTosOrMask, docsQosDCCFails=docsQosDCCFails, docsQosPHSEntry=docsQosPHSEntry, docsQosDynamicAdds=docsQosDynamicAdds, docsQosPktClassBitMap=docsQosPktClassBitMap, docsQosObsoleteGroup=docsQosObsoleteGroup, docsQosParamSetTosAndMask=docsQosParamSetTosAndMask, docsQosServiceClassTosOrMask=docsQosServiceClassTosOrMask, docsQosParamSetMaxConcatBurst=docsQosParamSetMaxConcatBurst, docsQosPktClassInetSourceAddr=docsQosPktClassInetSourceAddr, docsQosDynamicDeleteFails=docsQosDynamicDeleteFails, docsQosCmtsCmMac=docsQosCmtsCmMac, docsQosServiceFlowPolicedDropPkts=docsQosServiceFlowPolicedDropPkts, docsQosDynamicChanges=docsQosDynamicChanges, docsQosPHSMask=docsQosPHSMask, docsQosServiceClassNomGrantInterval=docsQosServiceClassNomGrantInterval, docsQosServiceClassDirection=docsQosServiceClassDirection, docsQosServiceFlowStatsEntry=docsQosServiceFlowStatsEntry, docsQosServiceFlowOctets=docsQosServiceFlowOctets, docsQosDynamicServiceStatsTable=docsQosDynamicServiceStatsTable, docsQosServiceClassName=docsQosServiceClassName, docsQosServiceFlowSID=docsQosServiceFlowSID, docsQosDSCReqs=docsQosDSCReqs, docsQosServiceFlowLogSFID=docsQosServiceFlowLogSFID, docsQosConformance=docsQosConformance, docsQosServiceFlowLogIndex=docsQosServiceFlowLogIndex, docsQosParamSetNomPollInterval=docsQosParamSetNomPollInterval, docsQosDynamicDeletes=docsQosDynamicDeletes, docsQosServiceClassPolicyRulePriority=docsQosServiceClassPolicyRulePriority, docsQosPktClassId=docsQosPktClassId, docsQosDCCReqs=docsQosDCCReqs, docsQosPHSTable=docsQosPHSTable, docsQosPktClassInetDestMask=docsQosPktClassInetDestMask, docsQosCmtsMacToSrvFlowTable=docsQosCmtsMacToSrvFlowTable, docsQosNotification=docsQosNotification, docsQosParamSetTolGrantJitter=docsQosParamSetTolGrantJitter, docsQosParamSetAdmittedTimeout=docsQosParamSetAdmittedTimeout, docsQosDSARsps=docsQosDSARsps, docsQosServiceFlowActiveTimeout=docsQosServiceFlowActiveTimeout, docsQosServiceFlowTimeCreated=docsQosServiceFlowTimeCreated, docsQosParamSetMaxTrafficBurst=docsQosParamSetMaxTrafficBurst, docsQosParamSetActiveTimeout=docsQosParamSetActiveTimeout, docsQosParamSetMaxTrafficRate=docsQosParamSetMaxTrafficRate, docsQosPktClassUserPriLow=docsQosPktClassUserPriLow, docsQosPktClassInetSourceMaskType=docsQosPktClassInetSourceMaskType, docsQosServiceFlowLogTable=docsQosServiceFlowLogTable, PYSNMP_MODULE_ID=docsQosMIB, docsQosParamSetGrantsPerInterval=docsQosParamSetGrantsPerInterval, docsQosDCCRsps=docsQosDCCRsps, docsQosDCCAcks=docsQosDCCAcks, docsQosServiceFlowLogServiceClassName=docsQosServiceFlowLogServiceClassName, docsQosPktClassPkts=docsQosPktClassPkts, docsQosServiceClassEntry=docsQosServiceClassEntry, docsQosUpstreamStatsTable=docsQosUpstreamStatsTable, docsQosPktClassDestMacAddr=docsQosPktClassDestMacAddr, docsQosServiceFlowLogOctets=docsQosServiceFlowLogOctets, docsQosServiceClassTosAndMask=docsQosServiceClassTosAndMask, docsQosServiceClassPolicyTable=docsQosServiceClassPolicyTable, docsQosDeprecatedGroup=docsQosDeprecatedGroup, docsQosCompliance=docsQosCompliance, docsQosPktClassDestPortStart=docsQosPktClassDestPortStart, docsQosServiceFlowLogTimeActive=docsQosServiceFlowLogTimeActive, docsQosPktClassUserPriApplies=docsQosPktClassUserPriApplies, docsQosCompliances=docsQosCompliances, docsQosPktClassDirection=docsQosPktClassDirection, docsQosGroups=docsQosGroups, docsQosPktClassInetSourceMask=docsQosPktClassInetSourceMask, docsQosPktClassIpDestAddr=docsQosPktClassIpDestAddr, docsQosServiceFlowProvisionedParamSetIndex=docsQosServiceFlowProvisionedParamSetIndex, docsQosServiceClassNomPollInterval=docsQosServiceClassNomPollInterval, docsQosDynamicServiceStatsEntry=docsQosDynamicServiceStatsEntry, docsQosParamSetServiceClassName=docsQosParamSetServiceClassName, docsQosServiceFlowAdmittedParamSetIndex=docsQosServiceFlowAdmittedParamSetIndex, docsQosServiceClassPriority=docsQosServiceClassPriority, docsQosDCCs=docsQosDCCs, docsQosServiceClassMinReservedPkt=docsQosServiceClassMinReservedPkt, docsQosPktClassInetDestAddr=docsQosPktClassInetDestAddr, docsQosSID=docsQosSID, docsQosServiceFlowPrimary=docsQosServiceFlowPrimary, docsQosPktClassUserPriHigh=docsQosPktClassUserPriHigh, docsQosServiceFlowEntry=docsQosServiceFlowEntry, docsQosServiceClassTolGrantJitter=docsQosServiceClassTolGrantJitter, docsQosServiceClassPolicyStatus=docsQosServiceClassPolicyStatus, docsQosMIBObjects=docsQosMIBObjects, docsQosParamSetMaxLatency=docsQosParamSetMaxLatency, docsQosServiceFlowLogPolicedDelayPkts=docsQosServiceFlowLogPolicedDelayPkts, docsQosPktClassSourceMacAddr=docsQosPktClassSourceMacAddr, docsQosServiceFlowLogIfIndex=docsQosServiceFlowLogIfIndex, docsQosServiceFlowStatsTable=docsQosServiceFlowStatsTable, docsQosDynamicAddFails=docsQosDynamicAddFails, docsQosBaseGroup=docsQosBaseGroup, docsQosPktClassSourcePortStart=docsQosPktClassSourcePortStart, SchedulingType=SchedulingType, IfDirection=IfDirection, docsQosParamSetBitMap=docsQosParamSetBitMap, docsQosServiceClassActiveTimeout=docsQosServiceClassActiveTimeout, docsQosServiceClassStatus=docsQosServiceClassStatus, docsQosPHSVerify=docsQosPHSVerify, docsQosServiceClassAdmittedTimeout=docsQosServiceClassAdmittedTimeout, docsQosDynamicChangeFails=docsQosDynamicChangeFails, docsQosServiceFlowLogCmMac=docsQosServiceFlowLogCmMac, docsQosServiceFlowLogControl=docsQosServiceFlowLogControl, docsQosServiceClassParamSetIndex=docsQosServiceClassParamSetIndex, docsQosServiceClassTable=docsQosServiceClassTable, docsQosPktClassVlanId=docsQosPktClassVlanId, docsQosPktClassInetDestMaskType=docsQosPktClassInetDestMaskType)
