#
# PySNMP MIB module ALVARION-VIRTUAL-AP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALVARION-VIRTUAL-AP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alvarionMgmtV2, = mibBuilder.importSymbols("ALVARION-SMI", "alvarionMgmtV2")
AlvarionUsersAuthenticationMode, AlvarionSecurity, AlvarionProfileIndexOrZero, AlvarionSSID, AlvarionPriorityQueue = mibBuilder.importSymbols("ALVARION-TC", "AlvarionUsersAuthenticationMode", "AlvarionSecurity", "AlvarionProfileIndexOrZero", "AlvarionSSID", "AlvarionPriorityQueue")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, ModuleIdentity, TimeTicks, iso, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, Counter32, MibIdentifier, IpAddress, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "TimeTicks", "iso", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "Counter32", "MibIdentifier", "IpAddress", "Integer32", "Unsigned32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
alvarionVirtualApMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11))
if mibBuilder.loadTexts: alvarionVirtualApMIB.setLastUpdated('200710310000Z')
if mibBuilder.loadTexts: alvarionVirtualApMIB.setOrganization('Alvarion Ltd.')
if mibBuilder.loadTexts: alvarionVirtualApMIB.setContactInfo('Alvarion Ltd. Postal: 21a HaBarzel St. P.O. Box 13139 Tel-Aviv 69710 Israel Phone: +972 3 645 6262')
if mibBuilder.loadTexts: alvarionVirtualApMIB.setDescription('Alvarion Virtual Access Point MIB.')
alvarionVirtualApMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1))
coVirtualApConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1))
coVirtualAccessPointConfigTable = MibTable((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1), )
if mibBuilder.loadTexts: coVirtualAccessPointConfigTable.setStatus('current')
if mibBuilder.loadTexts: coVirtualAccessPointConfigTable.setDescription('VSC configuration attributes. In tabular form to allow for multiple instances.')
coVirtualAccessPointConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALVARION-VIRTUAL-AP-MIB", "coVirtualApWlanProfileIndex"))
if mibBuilder.loadTexts: coVirtualAccessPointConfigEntry.setStatus('current')
if mibBuilder.loadTexts: coVirtualAccessPointConfigEntry.setDescription('An entry in the coVirtualAccessPointConfigTable. ifIndex - Each 802.11 interface is represented by an ifEntry. Interface tables in this MIB module are indexed by ifIndex. coVirtualWlanProfileIndex - Uniquely access a profile for this particular 802.11 interface.')
coVirtualApWlanProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: coVirtualApWlanProfileIndex.setStatus('current')
if mibBuilder.loadTexts: coVirtualApWlanProfileIndex.setDescription('Specifies the index of the VSC profile.')
coVirtualApSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 2), AlvarionSSID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coVirtualApSSID.setStatus('current')
if mibBuilder.loadTexts: coVirtualApSSID.setDescription('Service Set ID assigned to the VSC. This value must be unique per radio interface.')
coVirtualApBroadcastSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coVirtualApBroadcastSSID.setStatus('current')
if mibBuilder.loadTexts: coVirtualApBroadcastSSID.setDescription("Specifies if the SSID is included in beacon frames. On Intersil hardware, only the first profile is manageable. Reading this attribute shall always return 'false' for the other profiles. Writing into this attribute for the other profiles will return an error.")
coVirtualApMaximumNumberOfUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coVirtualApMaximumNumberOfUsers.setStatus('current')
if mibBuilder.loadTexts: coVirtualApMaximumNumberOfUsers.setDescription('Specifies the maximum number of concurrent users that this profile can accept.')
coVirtualApDefaultVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coVirtualApDefaultVLAN.setStatus('current')
if mibBuilder.loadTexts: coVirtualApDefaultVLAN.setDescription('Specifies the default VLAN to use for this profile when no radius authentication has taken place. The value 0 is used when no VLAN has been assigned to this profile. Writing to this object is only available on satellite devices.')
coVirtualApSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 6), AlvarionSecurity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApSecurity.setStatus('current')
if mibBuilder.loadTexts: coVirtualApSecurity.setDescription('Identifies all supported authentication/encryption algorithms.')
coVirtualApAuthenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 7), AlvarionUsersAuthenticationMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApAuthenMode.setStatus('current')
if mibBuilder.loadTexts: coVirtualApAuthenMode.setDescription('Specifies if user authentication is performed locally or via an AAA server.')
coVirtualApAuthenProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 8), AlvarionProfileIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApAuthenProfileIndex.setStatus('current')
if mibBuilder.loadTexts: coVirtualApAuthenProfileIndex.setDescription("Specifies the AAA server profile to use for user authentication. This parameter only applies when the coVirtualApSecurity is set to 'wpa' or 'ieee802dot1x' or 'ieee802dot1xWithWep' and the coVirtualApAuthenMode set to 'profile' or 'localAndProfile'. When set to Zero, no AAA server profile is selected or on a public satellite device it could represent a pre-configured AAA profile.")
coVirtualApUserAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApUserAccountingEnabled.setStatus('current')
if mibBuilder.loadTexts: coVirtualApUserAccountingEnabled.setDescription('Indicates if accounting information is generated by the device and sent to the AAA server for users connecting to this profile. Accounting information will be generated only if a valid AAA server profile is configured for the coVirtualApAccountingProfileIndex attribute.')
coVirtualApUserAccountingProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 10), AlvarionProfileIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApUserAccountingProfileIndex.setStatus('current')
if mibBuilder.loadTexts: coVirtualApUserAccountingProfileIndex.setDescription('Identifies the AAA server profile to be used for accounting information. The special value Zero indicates that no accounting profile is selected.')
coVirtualApDefaultUserRateLimitationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApDefaultUserRateLimitationEnabled.setStatus('current')
if mibBuilder.loadTexts: coVirtualApDefaultUserRateLimitationEnabled.setDescription('Indicates if the default user rate limitation is enabled.')
coVirtualApDefaultUserMaxTransmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApDefaultUserMaxTransmitRate.setStatus('current')
if mibBuilder.loadTexts: coVirtualApDefaultUserMaxTransmitRate.setDescription('Identifies the default user maximum transmit rate.')
coVirtualApDefaultUserMaxReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApDefaultUserMaxReceiveRate.setStatus('current')
if mibBuilder.loadTexts: coVirtualApDefaultUserMaxReceiveRate.setDescription('Identifies the default user maximum receive rate.')
coVirtualApDefaultUserBandwidthLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 14), AlvarionPriorityQueue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coVirtualApDefaultUserBandwidthLevel.setStatus('current')
if mibBuilder.loadTexts: coVirtualApDefaultUserBandwidthLevel.setDescription('Identifies the default user bandwidth level.')
coVirtualApOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coVirtualApOperState.setStatus('current')
if mibBuilder.loadTexts: coVirtualApOperState.setDescription('Activate/Deactivate the Virtual Service Community in the radio.')
alvarionVirtualApMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 2))
alvarionVirtualApMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 2, 1))
alvarionVirtualApMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 2, 2))
alvarionVirtualApMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 2, 1, 1)).setObjects(("ALVARION-VIRTUAL-AP-MIB", "alvarionVirtualApMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionVirtualApMIBCompliance = alvarionVirtualApMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alvarionVirtualApMIBCompliance.setDescription('The compliance statement for the Virtual Access Point MIB.')
alvarionVirtualApMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12394, 1, 10, 5, 11, 2, 2, 1)).setObjects(("ALVARION-VIRTUAL-AP-MIB", "coVirtualApSSID"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApBroadcastSSID"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApMaximumNumberOfUsers"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApDefaultVLAN"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApSecurity"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApAuthenMode"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApAuthenProfileIndex"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApUserAccountingEnabled"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApUserAccountingProfileIndex"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApDefaultUserRateLimitationEnabled"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApDefaultUserMaxTransmitRate"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApDefaultUserMaxReceiveRate"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApDefaultUserBandwidthLevel"), ("ALVARION-VIRTUAL-AP-MIB", "coVirtualApOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alvarionVirtualApMIBGroup = alvarionVirtualApMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alvarionVirtualApMIBGroup.setDescription('A collection of objects for use with Virtual Access Points.')
mibBuilder.exportSymbols("ALVARION-VIRTUAL-AP-MIB", coVirtualAccessPointConfigEntry=coVirtualAccessPointConfigEntry, alvarionVirtualApMIBConformance=alvarionVirtualApMIBConformance, alvarionVirtualApMIBObjects=alvarionVirtualApMIBObjects, coVirtualApSecurity=coVirtualApSecurity, coVirtualApAuthenProfileIndex=coVirtualApAuthenProfileIndex, coVirtualApDefaultUserRateLimitationEnabled=coVirtualApDefaultUserRateLimitationEnabled, coVirtualApSSID=coVirtualApSSID, coVirtualApBroadcastSSID=coVirtualApBroadcastSSID, coVirtualApMaximumNumberOfUsers=coVirtualApMaximumNumberOfUsers, coVirtualApDefaultUserBandwidthLevel=coVirtualApDefaultUserBandwidthLevel, alvarionVirtualApMIBGroup=alvarionVirtualApMIBGroup, coVirtualApUserAccountingProfileIndex=coVirtualApUserAccountingProfileIndex, alvarionVirtualApMIBCompliance=alvarionVirtualApMIBCompliance, coVirtualApAuthenMode=coVirtualApAuthenMode, coVirtualApDefaultUserMaxTransmitRate=coVirtualApDefaultUserMaxTransmitRate, coVirtualApWlanProfileIndex=coVirtualApWlanProfileIndex, coVirtualAccessPointConfigTable=coVirtualAccessPointConfigTable, coVirtualApConfig=coVirtualApConfig, coVirtualApDefaultVLAN=coVirtualApDefaultVLAN, alvarionVirtualApMIBGroups=alvarionVirtualApMIBGroups, alvarionVirtualApMIB=alvarionVirtualApMIB, alvarionVirtualApMIBCompliances=alvarionVirtualApMIBCompliances, PYSNMP_MODULE_ID=alvarionVirtualApMIB, coVirtualApDefaultUserMaxReceiveRate=coVirtualApDefaultUserMaxReceiveRate, coVirtualApOperState=coVirtualApOperState, coVirtualApUserAccountingEnabled=coVirtualApUserAccountingEnabled)
