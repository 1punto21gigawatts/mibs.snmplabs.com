#
# PySNMP MIB module CPQSTSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSTSYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Counter32, Counter64, Bits, iso, ModuleIdentity, TimeTicks, Unsigned32, ObjectIdentity, MibIdentifier, NotificationType, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Counter32", "Counter64", "Bits", "iso", "ModuleIdentity", "TimeTicks", "Unsigned32", "ObjectIdentity", "MibIdentifier", "NotificationType", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqSsStorageSys = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8))
cpqSsMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 1))
cpqSsDrvBox = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 2))
cpqSsTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 3))
cpqSsRaidSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 4))
cpqSsBoxExtended = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 8, 2, 2))
cpqSsMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsMibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
cpqSsMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsMibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support; no changes to any pre-existing information has occurred.')
cpqSsMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsMibCondition.setDescription('The overall condition (status) of the system represented by this MIB.')
cpqSsDrvBoxTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 1), )
if mibBuilder.loadTexts: cpqSsDrvBoxTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxTable.setDescription('Drive Box Table.')
cpqSsDrvBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), (0, "CPQSTSYS-MIB", "cpqSsBoxBusIndex"))
if mibBuilder.loadTexts: cpqSsDrvBoxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxEntry.setDescription('Drive Box Entry.')
cpqSsBoxCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxCntlrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxCntlrIndex.setDescription('Drive Box Controller Index. The controller index indicates to which adapter card instance this table entry belongs.')
cpqSsBoxBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxBusIndex.setDescription('Drive Box Bus Index. The bus index indicates to which bus instance on an adapter card this table entry belongs.')
cpqSsBoxType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("proLiant", 2), ("proLiant2", 3), ("proLiant2Internal", 4), ("proLiant2DuplexTop", 5), ("proLiant2DuplexBottom", 6), ("proLiant2InternalDuplexTop", 7), ("proLiant2InternalDuplexBottom", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxType.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsBoxType.setDescription('Drive Box Type. This is the type of drive box. The following types are defined: other(1) The agent does not recognize this drive storage system. proLiant(2) This is a ProLiant Storage System. proLiant2(3) This is a ProLiant-2 Storage System. proLiant2Internal(4) This is an internal ProLiant-2 Storage System that is found in some servers. proLiant2DuplexTop(5) This is the top portion of a ProLiant-2 Storage System that has dual SCSI busses which are duplexed. proLiant2DuplexBottom(6) This is the bottom portion of a ProLiant-2 Storage System that has dual SCSI busses which are duplexed. proLiant2InternalDuplexTop(7) This is the top portion of a ProLiant Server into which the internal SCSI busses are duplexed. proLiant2InternalDuplexBottom(8) This is the bottom portion of a ProLiant Server into which the internal SCSI busses are duplexed.')
cpqSsBoxModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxModel.setDescription("Drive Box Model. This is a description of the drive box's model. This can be used for identification purposes.")
cpqSsBoxFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxFWRev.setDescription('Drive Box Firmware Revision. This is the revision level of the drive box. This can be used for identification purposes.')
cpqSsBoxVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxVendor.setDescription("Drive Box Vendor This is the drive box's vendor name. This can be used for identification purposes.")
cpqSsBoxFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("noFan", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxFanStatus.setDescription('Drive Box Fan Status. This is the current status of the fans in the drive box. This value will be one of the following: other(1) Fan monitoring is not supported by this system or it is not supported by the driver. ok(2) All fans are working normally. failed(3) One or more storage system fans have failed. The fan(s) should be replaced immediately to avoid hardware damage. noFan(4) This unit does not support fan monitoring. degraded(5) At least one storage system fan has failed, but there is still sufficient cooling capacity to allow the system to continue. The fan should be replaced.')
cpqSsBoxCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxCondition.setDescription('SCSI Drive Box Condition. This is the overall condition of the drive box. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The storage system is operating normally. No user action is required. degraded(3) The storage system is degraded. You need to check the temperature status or power supply status of this storage system. Additionally, if the side panel for the storage system is removed, the air flow changes could result in improper cooling of the drives and affect the temperature status. failed(4) The storage system has failed.')
cpqSsBoxTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("noTemp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxTempStatus.setDescription('The temperature of the drive system. This value will be one of the following: other(1) Temperature monitoring is not supported by this system or it is not supported by the driver. ok(2) The temperature is within normal operating range. degraded(3) The temperature is outside of normal operating range. failed(4) The temperature could permanently damage the system. The storage system will automatically shutdown if this condition is detected. noTemp(5) This unit does not support temperature monitoring.')
cpqSsBoxSidePanelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sidePanelInPlace", 2), ("sidePanelRemoved", 3), ("noSidePanelStatus", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxSidePanelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxSidePanelStatus.setDescription('Drive Box Side Panel Status. This value will be one of the following: other(1) The agent does not recognize the status. You may need to upgrade your software. sidePanelInPlace(2) The side panel is properly installed on the storage system. sidePanelRemoved(3) The side panel is not properly installed on the storage system. noSidePanelStatus(4) This unit does not support side panel status monitoring.')
cpqSsBoxFltTolPwrSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("noFltTolPower", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxFltTolPwrSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxFltTolPwrSupplyStatus.setDescription('This value specifies the overall status of the fault tolerant power supply sub-system in a drive box. This value will be one of the following: other(1) The power supply status cannot be determined. ok(2) There are no detected power supply failures. degraded(3) One of the power supply units in a fault tolerant power supply has failed. failed(4) No failure conditions can currently be determined. noFltTolPower(5) This unit does not support fault tolerant power supply monitoring.')
cpqSsBoxBackPlaneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("proLiant", 2), ("proLiant2", 3), ("proLiant3", 4), ("proLiant4", 5), ("proLiant5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBackPlaneVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxBackPlaneVersion.setDescription('Drive Box Back Plane Version. This is the version of the drive box back plane. The following types are defined: other(1) The agent does not recognize this drive storage system back plane. proLiant(2) This is a ProLiant Storage System. proLiant2(3) This is a ProLiant-2 Storage System. proLiant3(4) This is a ProLiant-3 Storage System. proLiant4(5) This is a 4th generation Proliant Storage System. proLiant5(6) This is a 5th generation ProLiant Storage System.')
cpqSsBoxTotalBays = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxTotalBays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxTotalBays.setDescription('Drive Box Total Bays. This is the total number of bays in this storage system.')
cpqSsBoxPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxPlacement.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxPlacement.setDescription('Drive Box Placement. The following values are defined: other(1) The agent is unable to determine if this storage system is located internal or external to the system chassis. internal(2) The storage system is located in the system chassis. external(3) The storage system is located outside the system chassis in an expansion box.')
cpqSsBoxDuplexOption = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("duplexTop", 3), ("duplexBottom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxDuplexOption.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxDuplexOption.setDescription('Drive Box Duplex Option. The following values are defined: other(1) The agent is unable to determine if this storage system is duplexed. notDuplexed(2) This storage system is not duplexed. duplexTop(3) This is the top portion of a duplexed storage system. duplexBottom(4) This is the bottom portion of a duplexed storage system.')
cpqSsBoxBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxBoardRevision.setDescription('Drive Box Board Revision. This is the board revision of this storage system backplane.')
cpqSsBoxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxSerialNumber.setDescription("Drive Box Serial Number. This is the drive box's serial number which is normally display on the front panel. This can be used for identification purposes.")
cpqSsBoxCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxCntlrHwLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxCntlrHwLocation.setDescription('A text description of the hardware location of the controller to which this box is attached. A NULL string indicates that the hardware location could not be determined or is irrelevant.')
cpqSsBoxBackplaneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ultra3", 2), ("ultra320", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBackplaneSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxBackplaneSpeed.setDescription('Drive Box Backplane Speed. The following values are defined: other(1) The agent is unable to determine the backplane speed for this storage system. ultra3(2) This storage system is capable of Ultra3 speeds. ultra320(3) This storage system is capable of Ultra320 speeds.')
cpqSsBoxConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("scsiAttached", 2), ("sasAttached", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxConnectionType.setDescription('Drive Box Connection Type. The following values are defined: other(1) The agent is unable to determine the type of connection to this storage system. scsiAttached(2) This storage system is attached to the host via SCSI. sasAttached(3) This storage system is attached to the host via SAS.')
cpqSsBoxHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxHostConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxHostConnector.setDescription('Drive Box Host Connector. This is the host connector to which the drive box is attached. If the host connector cannot be determined, the agent will return a NULL string.')
cpqSsBoxBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxBoxOnConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxBoxOnConnector.setDescription('Drive Box, Box on Connector. The box on connector indicates which box instance this table entry belongs. The instances start at one and increment for each box attached to a connector. If the value cannot be determined or does not apply, -1 is returned.')
cpqSsBoxLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBoxLocationString.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBoxLocationString.setDescription('Drive Box Location String. This string describes the location of the drive box in relation to the controller to which it is attached. If the location string cannot be determined, the agent will return a NULL string.')
cpqSsChassisTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1), )
if mibBuilder.loadTexts: cpqSsChassisTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisTable.setDescription('Storage System Chassis Table.')
cpqSsChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsChassisIndex"))
if mibBuilder.loadTexts: cpqSsChassisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisEntry.setDescription('Storage System Chassis Entry.')
cpqSsChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisIndex.setDescription('Storage System Chassis Index. The chassis index uniquely identifies a storage system chassis.')
cpqSsChassisConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("fibreAttached", 2), ("scsiAttached", 3), ("iScsiAttached", 4), ("sasAttached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisConnectionType.setDescription('Storage System Chassis Connection Type. The following values are defined: other(1) The agent is unable to determine the type of connection to this chassis. fibreAttached(2) This chassis is attached to the server via Fibre Channel. scsiAttached(3) This chassis is attached to the server via SCSI. iScsiAttached(4) This chassis is attached to the server via iSCSI. sasAttached(5) This chassis is attached to the server via SAS.')
cpqSsChassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisSerialNumber.setDescription("Storage System Chassis Serial Number. This is the storage system chassis's serial number which is normally displayed on the front panel. This can be used for identification purposes.")
cpqSsChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisName.setDescription('Storage System Chassis Name. This is a user defined name for this storage system chassis.')
cpqSsChassisSystemBoardSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisSystemBoardSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisSystemBoardSerNum.setDescription("Storage System Chassis System Controller Board Serial Number. This is the system controller board's serial number. This can be used for identification purposes.")
cpqSsChassisSystemBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisSystemBoardRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisSystemBoardRev.setDescription('Storage System Chassis System Controller Board Revision. This is the system controller board revision.')
cpqSsChassisPowerBoardSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPowerBoardSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisPowerBoardSerNum.setDescription("Storage System Chassis Power Backplane Board Serial Number. This is the power backplane board's serial number. This can be used for identification purposes.")
cpqSsChassisPowerBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPowerBoardRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisPowerBoardRev.setDescription('Storage System Chassis Power Backplane Board Revision. This is the power backplane board revision.')
cpqSsChassisScsiBoardSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisScsiBoardSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisScsiBoardSerNum.setDescription("Storage System Chassis SCSI Drive Backplane Board Serial Number. This is the SCSI drive backplane board's serial number. This can be used for identification purposes.")
cpqSsChassisScsiBoardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisScsiBoardRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisScsiBoardRev.setDescription('Storage System Chassis SCSI Drive Backplane Board Revision. This is the SCSI drive backplane board revision.')
cpqSsChassisOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisOverallCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisOverallCondition.setDescription('Storage System Chassis Overall Condition. This is the condition of the storage system chassis and all of its components. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The storage system is operating normally. No user action is required. degraded(3) The storage system chassis is degraded. failed(4) The storage system chassis is failed.')
cpqSsChassisPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPowerSupplyCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisPowerSupplyCondition.setDescription('Storage System Power Supply Condition. This is the aggregate condition of all power supplies in the storage system chassis. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) All power supplies are operating normally. degraded(3) At least one power supply is degraded or failed. failed(4) All power supplies are failed.')
cpqSsChassisFanCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFanCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisFanCondition.setDescription('Storage System Fan Condition. This is the aggregate condition of all fan modules in the storage system chassis. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) All fan modules are operating normally. degraded(3) At least one fan module is degraded. failed(4) At least one fan module is failed.')
cpqSsChassisTemperatureCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisTemperatureCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisTemperatureCondition.setDescription('Storage System Temperature Condition. This is the aggregate condition of all the temperatur sensors in the storage system chassis. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) All temperature sensors are reading within normal limits. degraded(3) At least one temperature sensor is reading degraded. failed(4) At least one temperature sensor is reading failed.')
cpqSsChassisFcaCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaCntlrCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisFcaCntlrCondition.setDescription('Storage System Fibre Channel Array Controller Condition. This is the aggregate condition of all Fibre Channel Array controllers in the storage system chassis. The following values are defined: other(1) The condition cannot be determined or is not supported on this storage system. ok(2) All Fibre Channel Array Controllers are operating normally. degraded(3) At least one Fibre Channel Array Controller is degraded or failed. failed(4) All Fibre Channel Array Controllers are failed.')
cpqSsChassisFcaLogicalDriveCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaLogicalDriveCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisFcaLogicalDriveCondition.setDescription('Storage System Fibre Channel Array Logical Drive Condition. This is the aggregate condition of all Fibre Channel Array Logical Drives in this storage system chassis. The following values are defined: other(1) The condition cannot be determined or is not supported on this storage system. ok(2) All Fibre Channel Array Controllers Logical Drives are operating normally. degraded(3) At least one Fibre Channel Array Controller Logical Drive is degraded. failed(4) At least one Fibre Channel Array Controller Logical Drive is failed.')
cpqSsChassisFcaPhysDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaPhysDrvCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisFcaPhysDrvCondition.setDescription('Storage System Fibre Channel Array Physical Drive Condition. This is the aggregate condition of all Fibre Channel Array Physical Drives in this storage system chassis. The following values are defined: other(1) The condition cannot be determined or is not supported on this storage system. ok(2) All Fibre Channel Array Controllers Physical Drives are operating normally. degraded(3) At least one Fibre Channel Array Controller Physical Drive is degraded. failed(4) At least one Fibre Channel Array Controller Physical Drive is failed.')
cpqSsChassisTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisTime.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisTime.setDescription("Storage System Chassis Time. This is the storage system chassis's time in tenths of seconds. If the chassis time is not supported, the agent will return 0.")
cpqSsChassisModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("ra4x00", 2), ("msa1000", 3), ("smartArrayClusterStorage", 4), ("enterpriseModularArray", 5), ("enterpriseVirtualArray", 6), ("msa500G2", 7), ("msa20", 8), ("msa1500cs", 9), ("msa1510i", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisModel.setDescription('Storage System Chassis Model. The following values are defined: other(1) The agent is unable to determine the model of this chassis. ra4x00(2) Compaq StorageWorks RAID Array 4000/4100. msa1000(3) Compaq StorageWorks Modular Smart Array 1000. smartArrayClusterStorage(4) HP StorageWorks Modular Smart Array 500 (Formerly Smart Array Cluster Storage). enterpriseModularArray(5) Compaq StorageWorks Enterprise/Modular RAID Array. enterpriseVirtualArray(6) Compaq StorageWorks Enterprise Virtual Array. msa500G2(7) HP StorageWorks Modular Smart Array 500 G2. msa20(8) HP StorageWorks Modular Smart Array 20. msa1500cs(9) HP StorageWorks Modular Smart Array 1500 CS. msa1510i(10) HP StorageWorks Modular Smart Array 1510i. Reserved(11) Reserved(12)')
cpqSsChassisBackplaneCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisBackplaneCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisBackplaneCondition.setDescription('Storage System Backplane Condition. This is the aggregate condition of all the backplanes for the storage system chassis. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) All backplanes are operating normally. degraded(3) At least one storage system is degraded. failed(4) At least one storage system is failed.')
cpqSsChassisFcaTapeDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisFcaTapeDrvCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisFcaTapeDrvCondition.setDescription('Storage System Array Tape Drive Condition. This is the aggregate condition of all tape drives in this storage system chassis. The following values are defined: other(1) The condition cannot be determined or is not supported on this storage system. ok(2) All tape drives are operating normally. degraded(3) At least one tape drive is degraded. failed(4) At least one tape drive is failed.')
cpqSsChassisRsoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notConfigured", 3), ("disabled", 4), ("daemonDownDisabled", 5), ("ok", 6), ("daemonDownActive", 7), ("noSecondary", 8), ("daemonDownNoSecondary", 9), ("linkDown", 10), ("daemonDownLinkDown", 11), ("secondaryRunningAuto", 12), ("secondaryRunningUser", 13), ("evTimeoutError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisRsoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisRsoStatus.setDescription('Storage System Chassis Recovery Server Option Status. The following values are defined: other(1) The recovery server option status cannot be determined for this storage system. notSupported(2) The recovery server option is not supported for this storage system. notConfigured(3) The recovery server option is supported, but is not configured on this storage system. disabled(4) The recovery server option is configured as primary, but has been disabled by software. daemonDownDisabled(5) The recovery server option operating system daemon is no longer running. The last status of RSO was disabled(4). ok(6) The recovery server option is configured as primary and everything is working correctly. daemonDownActive(7) The recovery server option operating system daemon is no longer running. The last status of RSO was ok(6). noSecondary(8) The recovery server option is configured as primary, but communication with the standby server has not been established. daemonDownNoSecondary(9) The recovery server option operating system daemon is no longer running. The last status of RSO was noSecondary(8). linkDown(10) The recovery server option is configured as primary, but communication with the standby server has failed. daemonDownLinkDown(11) The recovery server option operating system daemon is no longer running. The last status of RSO was linkDown(10). secondaryRunningAuto(12) The recovery server option is configured and the standby server is running. The secondary server assumed control after communication with the primary server failed. secondaryRunningUser(13) The recovery server option is configured and the standby server is running. A user forced the secondary server to assume control. evTimeoutError(14) The recovery server option environment variable cannot be accessed.')
cpqSsChassisRsoCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisRsoCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisRsoCondition.setDescription('Storage System Chassis Recovery Server Option Condition. This is the condition of the recovery server option. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The recovery server option is operating normally. No user action is required. degraded(3) The recovery server option is degraded. failed(4) The recovery server option is failed.')
cpqSsChassisScsiIoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("io2port", 2), ("io4portUpgradeFirmware", 3), ("io4port", 4), ("io2port320", 5), ("io4port320", 6), ("io1port320", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisScsiIoModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisScsiIoModuleType.setDescription('Storage System Chassis SCSI I/O Module Type. The following values are defined: other(1) The agent does not recognize SCSI I/O module type. You may need to upgrade your software. io2port(2) A 2-Port Ultra3 SCSI I/O Module is installed. io4portUpgradeFirmware(3) A 4-Port Shared Storage Module for Smart Array Cluster Storage is installed, but the current controller firmware does not support it. Upgrade your controller firmware. io4port(4) A 4-Port Shared Storage Module for Smart Array Cluster Storage is installed. io2port320(5) A 2-Port Ultra320 SCSI I/O Module is installed. io4port320(6) A 4-Port Ultra320 SCSI I/O Module is installed. io1port320(7) A 1-Port Ultra320 SCSI I/O Module is installed.')
cpqSsChassisPreferredPathMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notActiveActive", 2), ("automatic", 3), ("manual", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisPreferredPathMode.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisPreferredPathMode.setDescription('Array Controller Preferred Path Mode. This is the storage system active/active preferred path mode. The following values are valid: other (1) Indicates that the agent does not recognize the preferred path mode of the storage system. You may need to upgrade the agent. notActiveActive (2) The storage system is not configured as active/active. automatic (3) The storage system automatically selects the preferred path for each logical drive based on host I/O patterns. manual (4) The preferred path for each logical drive is manually configured by the storage system administrator.')
cpqSsChassisProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsChassisProductId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsChassisProductId.setDescription("Storage System Chassis Product Identifier. This is the storage system chassis's product identifier. This can be used for identification purposes. If the product identifier can not be determined, the agent will return a NULL string.")
cpqSsIoSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2), )
if mibBuilder.loadTexts: cpqSsIoSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsIoSlotTable.setDescription('Storage System I/O Slot Table.')
cpqSsIoSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsIoSlotChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsIoSlotIndex"))
if mibBuilder.loadTexts: cpqSsIoSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsIoSlotEntry.setDescription('Storage System I/O Slot Entry.')
cpqSsIoSlotChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsIoSlotChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsIoSlotChassisIndex.setDescription('Storage System I/O Slot Chassis Index. The chassis index uniquely identifies a storage system chassis.')
cpqSsIoSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsIoSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsIoSlotIndex.setDescription('Storage System I/O Slot Index. This index uniquely identifies a storage system I/O Slot.')
cpqSsIoSlotControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("unknownBoard", 3), ("fibreArray", 4), ("scsiArray", 5), ("noSlot", 6), ("iScsiArray", 7), ("sasArray", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsIoSlotControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsIoSlotControllerType.setDescription('Storage System I/O Slot Controller Type. The following values are defined: other(1) The agent is unable to determine if anything is installed in this storage system I/O slot. notInstalled(2) Nothing is installed in this storage system I/O slot. unknownBoardInstalled(3) An unknown controller is installed in this storage system I/O slot. fibreArray(4) A Fibre Channel Array controller is installed in this storage system I/O slot. scsiArray(5) A SCSI Array controller is installed in this storage system I/O slot. noSlot(6) The slot does not exist on this chassis. iScsiArray(7) An iSCSI Array controller is installed in this storage system I/O slot. sasArray(8) A SAS Array controller is installed in this storage system I/O slot.')
cpqSsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3), )
if mibBuilder.loadTexts: cpqSsPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyTable.setDescription('Storage System Power Supply Table.')
cpqSsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsPowerSupplyChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsPowerSupplyIndex"))
if mibBuilder.loadTexts: cpqSsPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyEntry.setDescription('Storage System Power Supply Entry.')
cpqSsPowerSupplyChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyChassisIndex.setDescription('Storage System Power Supply Chassis Index. The chassis index uniquely identifies a storage system chassis.')
cpqSsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyIndex.setDescription('Storage System Power Supply Bay. This index uniquely identifies a power supply bay.')
cpqSsPowerSupplyBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("powerBay1", 2), ("powerBay2", 3), ("composite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyBay.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyBay.setDescription('Storage System Power Supply Bay. The following values are defined: other(1) The agent does not recognize the bay. You may need to upgrade your software. powerBay1(2) The power supply is installed in the first power supply bay. powerBay2(3) The power supply is installed in the second power supply bay. composite(4) The power supply information is a composite of all power supplies in the storage system.')
cpqSsPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("ok", 3), ("failed", 4), ("degraded", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyStatus.setDescription('Storage System Power Supply Status. The following values are defined: other(1) The agent is unable to determine if this storage system power supply bay is occupied. notInstalled(2) Nothing is installed in this power supply bay. ok(3) A power supply is installed and operating normally. failed(4) A power supply is installed and is no longer operating. Replace the power supply. degraded(5) For composite power supplies, this indicates that at least one power supply has failed or lost power.')
cpqSsPowerSupplyUpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("noUps", 2), ("ok", 3), ("powerFailed", 4), ("batteryLow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyUpsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyUpsStatus.setDescription('Storage System Power Supply Uninterruptible Power Supply (UPS) Status. The following values are defined: other(1) The agent is unable to determine if this power supply is attached to an Uninterruptible Power Supply (UPS). noUps(2) No UPS is attached to the power supply. ok(3) A UPS is attached to the power supply and is operating normally. powerFailed(4) A UPS is attached to the power supply and the AC power has failed. batteryLow(5) A UPS is attached to the power supply, the AC power has failed and the UPS battery is low.')
cpqSsPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyCondition.setDescription('Storage System Power Supply Condition. This is the condition of the storage system chassis and all of its components. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The power supply is operating normally. No user action is required. degraded(3) The power supply is degraded. You need to check the power supply or its attached UPS for problems. failed(4) The power supply has failed.')
cpqSsPowerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplySerialNumber.setDescription("Storage System Power Supply Serial Number. This is the power supply's serial number. This can be used for identification purposes. If the serial number is not supported, the agent will return a NULL string.")
cpqSsPowerSupplyBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyBoardRevision.setDescription('Storage System Power Supply Board Revision. This is the power supply board revision. If the board revision is not supported, the agent will return a NULL string.')
cpqSsPowerSupplyFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsPowerSupplyFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsPowerSupplyFirmwareRevision.setDescription('Storage System Power Supply Firmware Revision. This is the power supply firmware revision. If the firmware revision is not supported, the agent will return a NULL string.')
cpqSsFanModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4), )
if mibBuilder.loadTexts: cpqSsFanModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleTable.setDescription('Storage System Fan Module Table.')
cpqSsFanModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsFanModuleChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsFanModuleIndex"))
if mibBuilder.loadTexts: cpqSsFanModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleEntry.setDescription('Storage System Fan Module Entry.')
cpqSsFanModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleChassisIndex.setDescription('Storage System Fan Module Chassis Index. The chassis index uniquely identifies a storage system chassis.')
cpqSsFanModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleIndex.setDescription('Storage System Fan Module Index. This index uniquely identifies a storage system fan module.')
cpqSsFanModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("ok", 3), ("degraded", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleStatus.setDescription('Storage System Fan Module Status. The following values are defined: other(1) The agent is unable to determine if this storage system fan module is installed. notInstalled(3) The fan module is not installed. ok(2) The fan module is installed and operating normally. degraded(4) The fan module degraded. failed(5) The fan module is failed. Replace the fan module.')
cpqSsFanModuleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleCondition.setDescription('Storage System Fan Module Condition. This is the condition of the storage system fan module. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The fan module is operating normally. No user action is required. degraded(3) The fan module is degraded. You need to check the fan module for problems. failed(4) The fan module has failed. Replace the fan module.')
cpqSsFanModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fanBay", 2), ("composite", 3), ("fanBay2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleLocation.setDescription('Storage System Fan Module Location. The following values are defined: other(1) The agent is unable to determine the location of this storage system fan module. fanBay(2) This fan module is installed in the first fan bay. composite(3) The fan information is a composite of all fans in the storage system. fanBay2(4) This fan module is installed in the second fan bay.')
cpqSsFanModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleSerialNumber.setDescription("Storage System Fan Module Serial Number. This is the fan module's serial number. This can be used for identification purposes.")
cpqSsFanModuleBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFanModuleBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFanModuleBoardRevision.setDescription('Storage System Fan Module Board Revision. This is the fan module board revision.')
cpqSsTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5), )
if mibBuilder.loadTexts: cpqSsTempSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorTable.setDescription('Storage System Temperature Sensor Table.')
cpqSsTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsTempSensorChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsTempSensorIndex"))
if mibBuilder.loadTexts: cpqSsTempSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorEntry.setDescription('Storage System Temperature Sensor Entry.')
cpqSsTempSensorChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorChassisIndex.setDescription('Storage System Temperature Sensor Chassis Index. The chassis index uniquely identifies a storage system chassis.')
cpqSsTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorIndex.setDescription('Storage System Temperature Sensor Index. This index uniquely identifies a temperature sensor.')
cpqSsTempSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorStatus.setDescription('Storage System Temperature Sensor Status. The following values are defined: other(1) The agent is unable to determine if the storage system temperature sensor status. ok(2) The temperature is OK. degraded(3) The temperature is degraded. failed(4) The temperature is failed.')
cpqSsTempSensorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorCondition.setDescription('Storage System Fan Module Condition. This is the condition of the storage system temperature sensor. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The temperature is within normal operating range. No user action is required. degraded(3) The temperature is outside of normal operating range. failed(4) The temperature could permanently damage the system. The storage system will automatically shutdown if this condition is detected.')
cpqSsTempSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fanBay", 2), ("backplane", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorLocation.setDescription('Storage System Fan Module Location. The following values are defined: other(1) The agent is unable to determine the location of this storage system temperature sensor. fanBay(2) This temperature sensor is located on the fan module in the fan bay. backplane(3) This temperature is located on the SCSI drive backplane.')
cpqSsTempSensorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorCurrentValue.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorCurrentValue.setDescription('Storage System Temperature Sensor Current Value. The current value of the temperature sensor in degrees Celsius.')
cpqSsTempSensorLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorLimitValue.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorLimitValue.setDescription('Storage System Temperature Sensor Limit Value. The limit value of the temperature sensor in degrees Celsius.')
cpqSsTempSensorHysteresisValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTempSensorHysteresisValue.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsTempSensorHysteresisValue.setDescription('Storage System Temperature Sensor Hysteresis Value. The hysteresis value of the temperature sensor in degrees Celsius.')
cpqSsBackplaneTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6), )
if mibBuilder.loadTexts: cpqSsBackplaneTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneTable.setDescription('Storage System SCSI Backplane Table.')
cpqSsBackplaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsBackplaneChassisIndex"), (0, "CPQSTSYS-MIB", "cpqSsBackplaneIndex"))
if mibBuilder.loadTexts: cpqSsBackplaneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneEntry.setDescription('Storage System SCSI Backplane Entry.')
cpqSsBackplaneChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneChassisIndex.setDescription('Storage System Backplane Chassis Index. The chassis index uniquely identifies a storage system chassis.')
cpqSsBackplaneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneIndex.setDescription('Storage System Backplane Index. This index uniquely identifies a storage system backplane.')
cpqSsBackplaneFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneFWRev.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneFWRev.setDescription('Storage System Backplane Firmware Revision. This is the revision level of storage system backplane.')
cpqSsBackplaneDriveBays = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneDriveBays.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneDriveBays.setDescription('Storage System Backplane Drive Bays. This is the number of bays on this storage system backplane.')
cpqSsBackplaneDuplexOption = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("duplexTop", 3), ("duplexBottom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneDuplexOption.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneDuplexOption.setDescription('Storage System Backplane Duplex Option. The following values are defined: other (1) The agent is unable to determine if this storage system is duplexed. notDuplexed(2) This storage system is not duplexed. duplexTop(3) This is the top portion of a duplexed storage system. duplexBottom(4) This is the bottom portion of a duplexed storage system.')
cpqSsBackplaneCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneCondition.setDescription('Storage System Backplane Condition. This is the overall condition of the backplane. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The storage system is operating normally. No user action is required. degraded(3) The storage system is degraded. You need to check the temperature status or power supply status of this storage system. failed(4) The storage system has failed.')
cpqSsBackplaneVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneVersion.setDescription('Storage System Backplane Version. This is the version of the drive box back plane.')
cpqSsBackplaneVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneVendor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneVendor.setDescription("Storage System Backplane Vendor This is the storage box's vendor name. This can be used for identification purposes.")
cpqSsBackplaneModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneModel.setDescription("Storage System Backplane Model. This is a description of the storage system's model. This can be used for identification purposes.")
cpqSsBackplaneFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("notInstalled", 2), ("ok", 3), ("degraded", 4), ("failed", 5), ("notSupported", 6), ("degraded-Fan1Failed", 7), ("degraded-Fan2Failed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneFanStatus.setDescription('Storage System Backplane Fan Status. This is the current status of the fans in the storage system. This value will be one of the following: other(1) The agent is unable to determine if this storage system has fan monitoring. notInstalled(2) This unit does not support fan monitoring. ok(3) All fans are working normally. degraded(4) At least one storage system fan has failed, but there is still sufficient cooling capacity to allow the system to continue. The fan should be replaced. failed(5) One or more storage system fans have failed. The fan(s) should be replaced immediately to avoid hardware damage. notSupported(6) The storage system does not support reporting fan status through this backplane. The fan status is reported through the first backplane on this storage system. degraded-Fan1Failed(7) Fan 1 has failed, but there is still sufficient cooling capacity to allow the system to continue. The fan should be replaced. degraded-Fan2Failed(8) Fan 2 has failed, but there is still sufficient cooling capacity to allow the system to continue. The fan should be replaced.')
cpqSsBackplaneTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noTemp", 2), ("ok", 3), ("degraded", 4), ("failed", 5), ("notSupported", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneTempStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneTempStatus.setDescription('Storage System Backplane Fan Status. This value will be one of the following: other(1) The agent is unable to determine if this storage system has temperature monitoring. noTemp(2) This unit does not support temperature monitoring. ok(3) The temperature is within normal operating range. degraded(4) The temperature is outside of normal operating range. failed(5) The temperature could permanently damage the system. notSupported(6) The storage system does not support reporting temperature status through this backplane. The temperature status is reported through the first backplane on this storage system.')
cpqSsBackplaneFtpsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("noFltTolPower", 2), ("ok", 3), ("degraded", 4), ("failed", 5), ("notSupported", 6), ("noFltTolPower-Bay1Missing", 7), ("noFltTolPower-Bay2Missing", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneFtpsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneFtpsStatus.setDescription('Storage System Backplane Fault Tolerant Power Supply Status. This value specifies the overall status of the redundant power supply in a drive box. This value will be one of the following: other(1) The agent is unable to determine if this storage system has redundant power supplies. noFltTolPower(2) This unit does not have a redundant supply. ok(3) There are no detected power supply failures. degraded(4) One of the power supply units has failed. failed(5) All of the power supplies have failed. A status of failed can not currently be determined. notSupported(6) The storage system does not support reporting fault tolerant power supply status through this backplane. The fault tolerant power supply status is reported through the first backplane on this storage system. noFltTolPower-Bay1Missing(7), This unit does not have a redundant supply. The power supply in bay 1 is missing. noFltTolPower-Bay2Missing(8) This unit does not have a redundant supply. The power supply in bay 2 is missing.')
cpqSsBackplaneSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneSerialNumber.setDescription('Storage System Backplane Serial Number. This is the storage system backplane serial number which is normally displayed on the front bezel. This can be used for identification purposes.')
cpqSsBackplanePlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplanePlacement.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplanePlacement.setDescription('Storage System Backplane Placement. The following values are defined: other(1) The agent is unable to determine if this storage system is located internal or external to the system chassis. internal(2) The storage system is located in the system chassis. external(3) The storage system is located outside the system chassis in an expansion box.')
cpqSsBackplaneBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneBoardRevision.setDescription('Storage System Backplane Board Revision. This is the board revision of this storage system backplane.')
cpqSsBackplaneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ultra3", 2), ("ultra320", 3), ("sata", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneSpeed.setDescription('Storage System Backplane Speed. The following values are defined: other(1) The agent is unable to determine the backplane speed for this storage system. ultra3(2) This storage system is capable of Ultra3 speeds. ultra320(3) This storage system is capable of Ultra320 speeds. sata(4) This storage system is capable of SATA speeds.')
cpqSsBackplaneConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("scsiAttached", 2), ("sasAttached", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneConnectionType.setDescription('Backlane Box Connection Type. The following values are defined: other(1) The agent is unable to determine the type of connection to this backplane. scsiAttached(2) This backplane is attached to the host via SCSI. sasAttached(3) This backplane is attached to the host via SAS.')
cpqSsBackplaneConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneConnector.setDescription('Backplane Connector. This is the connector to which the backplane is attached. If the backplane connector cannot be determined, the agent will return a NULL string.')
cpqSsBackplaneOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneOnConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneOnConnector.setDescription('Backplane on Connector. The backplane on connector indicates to which backplane instance this table entry belongs. The instances start at one and increment for each backplane attached to a connector.')
cpqSsBackplaneLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsBackplaneLocationString.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsBackplaneLocationString.setDescription('Backplane Location String. This string describes the location of the backplane in relation to the controller to which it is attached. If the location string cannot be determined, the agent will return a NULL string.')
cpqSsFibreAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7), )
if mibBuilder.loadTexts: cpqSsFibreAttachmentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentTable.setDescription('Storage System Fibre Attachment Table.')
cpqSsFibreAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsFibreAttachmentIndex"))
if mibBuilder.loadTexts: cpqSsFibreAttachmentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentEntry.setDescription('Storage System Fibre Attachment Entry.')
cpqSsFibreAttachmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentIndex.setDescription('Storage System Fibre Attachment Index. The index uniquely identifies a Fibre Attachment association entry.')
cpqSsFibreAttachmentHostControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentHostControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentHostControllerIndex.setDescription('Storage System Fibre Attachment Host Controller Index. The host controller index indicates which host controller is associated with this entry. This is equal to cpqFcaHostCntlrIndex, from the Fibre Channel Host Controller Table.')
cpqSsFibreAttachmentHostControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentHostControllerPort.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentHostControllerPort.setDescription('Storage System Fibre Attachment Host Controller Port. This is the Fibre port number of the host controller. For each host controller, the port number starts at 1 and increments for each port. This is currently set to 1.')
cpqSsFibreAttachmentDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("storageBox", 2), ("tapeController", 3), ("fibreChannelSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentDeviceType.setDescription('Storage System Fibre Attachment Device Type. This is the type of device associated with this entry. The following values are defined: other(1) The agent is unable to determine if the type of this device. storageBox(2) The device is a Fibre attached storage system. tapeController(3) The device is a Fibre attached tape controller. fibreChannelSwitch(4) The device is a Fibre channel switch.')
cpqSsFibreAttachmentDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentDeviceIndex.setDescription('Storage System Fibre Attachment Device Index. The is the index for the Fibre attached device. For a Fibre attached storage system, this is equal to cpqSsChassisIndex from the Storage System Chassis Table. For a Fibre attached tape controller, this is equal to cpqFcTapeCntlrIndex from the Fibre Channel Tape Controller Table. For a Fibre channel switch, this is equal to cpqFcSwitchIndex from the Fibre Channel Switch Table.')
cpqSsFibreAttachmentDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsFibreAttachmentDevicePort.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsFibreAttachmentDevicePort.setDescription('Storage System Fibre Attachment Device Port. This is the Fibre port on a device. For a Fibre attached storage system, this is equal to cpqFcaCntlrBoxIoSlot from the Fibre Channel Array Controller Table. For a Fibre attached tape controller, this is currently set to 1. For a Fibre channel switch, this is currently set to 1.')
cpqSsScsiAttachmentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8), )
if mibBuilder.loadTexts: cpqSsScsiAttachmentTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentTable.setDescription('Storage System SCSI Attachment Table.')
cpqSsScsiAttachmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsScsiAttachmentIndex"))
if mibBuilder.loadTexts: cpqSsScsiAttachmentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentEntry.setDescription('Storage System SCSI Attachment Entry.')
cpqSsScsiAttachmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentIndex.setDescription('Storage System SCSI Attachment Index. The index uniquely identifies a SCSI Attachment association entry.')
cpqSsScsiAttachmentControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerIndex.setDescription('Storage System SCSI Attachment Controller Index. The controller index indicates which internal array controller is associated with this entry. This is equal to cpqDaCntlrIndex, from the Array Controller Table.')
cpqSsScsiAttachmentControllerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerPort.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerPort.setDescription('Storage System SCSI Attachment Controller Port. The controller port indicates which SCSI port of an internal controller is associated with this entry.')
cpqSsScsiAttachmentControllerTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerTarget.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerTarget.setDescription('Storage System SCSI Attachment Controller Target. The controller target indicates which SCSI target is associated with this entry.')
cpqSsScsiAttachmentControllerLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerLun.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentControllerLun.setDescription('Storage System SCSI Attachment Controller Lun. The controller Lun indicates which SCSI Lun is associated with this entry.')
cpqSsScsiAttachmentChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentChassisIndex.setDescription('Storage System SCSI Attachment Chassis Index. The is the index for the SCSI attached storage system. This is equal to cpqSsChassisIndex from the Storage System Chassis Table.')
cpqSsScsiAttachmentChassisIoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentChassisIoSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentChassisIoSlot.setDescription('Storage System SCSI Attachment Chassis I/O Slot. This is the I/O slot in the SCSI attached storage system. This is equal to cpqFcaCntlrBoxIoSlot from the Fibre Channel Array Controller Table.')
cpqSsScsiAttachmentPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("offline", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentPathStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentPathStatus.setDescription('Storage System SCSI Attachment Path Status. This is the status of this path to the chassis. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The path is operating normally. offline(3) The path is offline.')
cpqSsScsiAttachmentPathCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsScsiAttachmentPathCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsScsiAttachmentPathCondition.setDescription('Storage System SCSI Attachment Path Condition. This is the condition of this path to the chassis.')
cpqSsDrvBoxPathTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 2, 3), )
if mibBuilder.loadTexts: cpqSsDrvBoxPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathTable.setDescription('Drive Box Access Path Table.')
cpqSsDrvBoxPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsDrvBoxPathCntlrIndex"), (0, "CPQSTSYS-MIB", "cpqSsDrvBoxPathBoxIndex"), (0, "CPQSTSYS-MIB", "cpqSsDrvBoxPathIndex"))
if mibBuilder.loadTexts: cpqSsDrvBoxPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathEntry.setDescription('Drive Box Access Path Entry.')
cpqSsDrvBoxPathCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathCntlrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathCntlrIndex.setDescription('Drive Box Access Path Controller Index. The controller index indicates to which adapter card instance this table entry belongs.')
cpqSsDrvBoxPathBoxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathBoxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathBoxIndex.setDescription('Drive Box Access Path Box Index. The box index indicates to which box instance on an adapter card this table entry belongs. The value of this index is the same as cpqSsDrvBoxBusIndex used under the drive box table.')
cpqSsDrvBoxPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathIndex.setDescription('Drive Box Access Path Index. This path index keeps track of multiple instances of access paths from a controller to a storage box. This number, along with the cpqSsDrvBoxPathCntlrIndex and cpqSsDrvBoxPathDrvIndex uniquely identify a specific storage box access path')
cpqSsDrvBoxPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("linkDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathStatus.setDescription('Drive Box Access Path Status. This shows the status of the drive box access path. The following values are valid: Other (1) Indicates that the instrument agent can not determine the status of this access path. OK (2) Indicates the access path is functioning properly. Link Down (3) Indicates that the controller can no longer access the drive box through this path.')
cpqSsDrvBoxPathCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("alternate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathCurrentRole.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathCurrentRole.setDescription('Drive Box Access Path Current Role. This shows the current role of drive box acess path. The following values are valid: Other (1) Indicates that the instrument agent does not recognize the role of this access path. Active (2) Indicates that this path is currently the default active I/O path to access the drive box from the controller. Alternate (3) Indicates that this path is currently the alternate I/O path to access the physical drive from the controller.')
cpqSsDrvBoxPathHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathHostConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathHostConnector.setDescription('Drive Box Access Path Host Connector. This is the host connector to which the access path is ultimately attached. If the host connector cannot be determined, the agent will return a NULL string.')
cpqSsDrvBoxPathBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathBoxOnConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathBoxOnConnector.setDescription('Drive Box Access Path Box on Connector. The box on connector indicates to which box instance this access path belongs.')
cpqSsDrvBoxPathLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsDrvBoxPathLocationString.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsDrvBoxPathLocationString.setDescription('Drive Box Access Path Location String. This string describes drive box access path in relation to the controller to which it is attached. If the location string cannot be determined, the agent will return a NULL string.')
cpqSsTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapPkts.setDescription('The total number of trap packets issued by the enterprise since the instrument agent was loaded.')
cpqSsTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 8, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapLogMaxSize.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapLogMaxSize.setDescription('The maximum number of entries that will currently be kept in the trap log. If the maximum size has been reached and a new trap occurs the oldest trap will be removed.')
cpqSsTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 3, 3), )
if mibBuilder.loadTexts: cpqSsTrapLogTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapLogTable.setDescription('An ordered list of trap log entries (conceptually a queue). The trap log entries will be kept in the order in which they were generated with the most recent trap at index 1 and the oldest trap entry at index trapLogMaxSize. If the maximum number size has been reached and a new trap occurs the oldest trap will be removed when the new trap is added so the trapMaxLogSize is not exceeded.')
cpqSsTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsTrapLogIndex"))
if mibBuilder.loadTexts: cpqSsTrapLogEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapLogEntry.setDescription('A description of a trap event.')
cpqSsTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapLogIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapLogIndex.setDescription("The value of this object uniquely identifies this trapLogEntry at this time. The most recent trap will have an index of 1 and the oldest trap will have an index of trapLogMaxSize. Because of the queue-like nature of the trapLog this particular trap event's index will change as new traps are issued.")
cpqSsTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8001, 8002, 8003, 8004, 8005, 8006))).clone(namedValues=NamedValues(("cpqSsFanStatusChange", 1), ("cpqSs2FanStatusChange", 8001), ("cpqSsTempFailed", 8002), ("cpqSsTempDegraded", 8003), ("cpqSsTempOk", 8004), ("cpqSsSidePanelInPlace", 8005), ("cpqSsSidePanelRemoved", 8006)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapType.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapType.setDescription('The type of the trap event that this entry describes. This number refers to an entry in a list of traps enumerating the possible traps the agent may issue.')
cpqSsTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsTrapTime.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSsTrapTime.setDescription('The time of the trap event that this entry describes. The time is given in year (first octet), month, day of month, hour, minute, second (last octet) order. Each octet gives the value in BCD.')
cpqSsRaidSystemTable = MibTable((1, 3, 6, 1, 4, 1, 232, 8, 4, 1), )
if mibBuilder.loadTexts: cpqSsRaidSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemTable.setDescription('RAID Storage System Table.')
cpqSsRaidSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1), ).setIndexNames((0, "CPQSTSYS-MIB", "cpqSsRaidSystemIndex"))
if mibBuilder.loadTexts: cpqSsRaidSystemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemEntry.setDescription('RAID Storage System Entry.')
cpqSsRaidSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemIndex.setDescription('RAID Storage System Index. The RAID Storage System index indicates to which storage system instance this table entry belongs.')
cpqSsRaidSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemName.setDescription("RAID Storage System Name. This is a description of the RAID Storage System's name. This can be used for identification purposes.")
cpqSsRaidSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("agentNotRunning", 2), ("good", 3), ("warning", 4), ("communicationLoss", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemStatus.setDescription('RAID Storage System Status. This is the current status of the RAID Storage System. This value will be one of the following: other(1) Indicates that the agent does not recognize the state of the RAID Storage System. You may need to upgrade the agent. agentNotRunning(2) Indicates that the Storage Work agent is not running. You need to restart the Storage Work agent. good(3) Indicates that the system is operating properly. warning(4) At least one component of the system failed. communicationLoss(5) The RAID Storage System has a cable or communication problem. Please check all cable connects to the host server.')
cpqSsRaidSystemCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemCondition.setDescription('RAID Storage System Condition. This is the overall condition of the storage system. The following values are defined: other(1) The agent does not recognize the status. You may need to upgrade your software. ok(2) The storage system is operating normally. No user action is required. degraded(3) The storage system is degraded. At least one component of the storage system failed. failed(4) The storage system has failed.')
cpqSsRaidSystemCntlr1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemCntlr1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemCntlr1SerialNumber.setDescription("RAID Storage System Controller 1 Serial Number. This is the controller number 1's serial number which is normally display on the front panel. This can be used for identification purposes.")
cpqSsRaidSystemCntlr2SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 8, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSsRaidSystemCntlr2SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSsRaidSystemCntlr2SerialNumber.setDescription("RAID Storage System Controller 2 Serial Number. This is the controller number 2's serial number which is normally display on the front panel. This can be used for identification purposes.")
cpqSsFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 8) + (0,1)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
if mibBuilder.loadTexts: cpqSsFanStatusChange.setDescription('Storage System fan status change. The agent has detected a change in the Fan Status of a storage system. The variable cpqSsBoxFanStatus indicates the current fan status.')
cpqSs2FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8001)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
if mibBuilder.loadTexts: cpqSs2FanStatusChange.setDescription('Storage System fan status change. The agent has detected a change in the Fan Status of a storage system. The variable cpqSsBoxFanStatus indicates the current fan status.')
cpqSsTempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8002)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSsTempFailed.setDescription('Storage System temperature failure. The agent has detected that a temperature status has been set to failed. The storage system will be shutdown.')
cpqSsTempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8003)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSsTempDegraded.setDescription("Storage System temperature degraded. The agent has detected a temperature status that has been set to degraded. The storage system's temperature is outside of the normal operating range.")
cpqSsTempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8004)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSsTempOk.setDescription("Storage System temperature ok. The temperature status has been set to OK. The storage system's temperature has returned to normal operating range. It may be reactivated by the administrator.")
cpqSsSidePanelInPlace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8005)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
if mibBuilder.loadTexts: cpqSsSidePanelInPlace.setDescription("Storage System side panel is in place. The side panel status has been set to in place. The storage system's side panel has returned to a properly installed state.")
cpqSsSidePanelRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8006)).setObjects(("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
if mibBuilder.loadTexts: cpqSsSidePanelRemoved.setDescription("Storage System side panel is removed. The side panel status has been set to removed. The storage system's side panel is not in a properly installed state. This situation may result in improper cooling of the drives in the storage system due to air flow changes caused by the missing side panel.")
cpqSsPwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8007))
if mibBuilder.loadTexts: cpqSsPwrSupplyDegraded.setDescription('A storage system power supply status has been set to degraded.')
cpqSs3FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
if mibBuilder.loadTexts: cpqSs3FanStatusChange.setDescription('Storage System fan status change. The agent has detected a change in the Fan Status of a storage system. The variable cpqSsBoxFanStatus indicates the current fan status. User Action: If the fan status is degraded or failed, replace any failed fans.')
cpqSs3TempFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSs3TempFailed.setDescription('Storage System temperature failure. The agent has detected that a temperature status has been set to failed. The storage system will be shutdown. User Action: Shutdown the storage system as soon as possible. Insure that the storage system environment is being cooled properly and that no components are overheated.')
cpqSs3TempDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSs3TempDegraded.setDescription("Storage System temperature degraded. The agent has detected a temperature status that has been set to degraded. The storage system's temperature is outside of the normal operating range. User Action: Shutdown the storage system as soon as possible. Insure that the storage system environment is being cooled properly and that no components are overheated.")
cpqSs3TempOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSs3TempOk.setDescription("Storage System temperature ok. The temperature status has been set to OK. The storage system's temperature has returned to normal operating range. It may be reactivated by the administrator. User Action: None.")
cpqSs3SidePanelInPlace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
if mibBuilder.loadTexts: cpqSs3SidePanelInPlace.setDescription("Storage System side panel is in place. The side panel status has been set to in place. The storage system's side panel has returned to a properly installed state. User Action: None.")
cpqSs3SidePanelRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxSidePanelStatus"))
if mibBuilder.loadTexts: cpqSs3SidePanelRemoved.setDescription("Storage System side panel is removed. The side panel status has been set to removed. The storage system's side panel is not in a properly installed state. This situation may result in improper cooling of the drives in the storage system due to air flow changes caused by the missing side panel. User Action: Replace the storage system side panel.")
cpqSs3PwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSs3PwrSupplyDegraded.setDescription('A storage system power supply status has been set to degraded.')
cpqSs4PwrSupplyDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxFltTolPwrSupplyStatus"))
if mibBuilder.loadTexts: cpqSs4PwrSupplyDegraded.setDescription('A storage system power supply status has been set to degraded. User Action: Take action to restore power or replace any failed storage system power supply.')
cpqSsExFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsFanModuleLocation"), ("CPQSTSYS-MIB", "cpqSsFanModuleStatus"))
if mibBuilder.loadTexts: cpqSsExFanStatusChange.setDescription('Storage system fan status change. The agent has detected a change in the Fan Module Status of a storage system. The variable cpqSsFanModuleStatus indicates the current fan status. User Action: If the fan status is degraded or failed, replace any failed fans.')
cpqSsExPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBay"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyStatus"))
if mibBuilder.loadTexts: cpqSsExPowerSupplyStatusChange.setDescription('Storage system power supply status change. The agent has detected a change in the power supply status of a storage system. The variable cpqSsPowerSupplyStatus indicates the current status. User Action: If the power supply status is failed, take action to restore power or replace the failed power supply.')
cpqSsExPowerSupplyUpsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBay"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyUpsStatus"))
if mibBuilder.loadTexts: cpqSsExPowerSupplyUpsStatusChange.setDescription('Storage system power supply UPS status change. The agent has detected a change status of a UPS attached to a storage system power supply. The variable cpqSsPowerSupplyUpsStatus indicates the current status. User Action: If the UPS status is powerFailed(4) or batteryLow(5), take action to restore power to the UPS.')
cpqSsExTempSensorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsTempSensorLocation"), ("CPQSTSYS-MIB", "cpqSsTempSensorStatus"), ("CPQSTSYS-MIB", "cpqSsTempSensorCurrentValue"))
if mibBuilder.loadTexts: cpqSsExTempSensorStatusChange.setDescription('Storage system temperature sensor status change. The agent has detected a change in the status of a storage system temperature sensor. The variable cpqSsTempSensorStatus indicates the current status. User Action: If the temperature status is degraded or failed, shutdown the storage system as soon as possible. Insure that the storage system environment is being cooled properly and that no components are overheated.')
cpqSsEx2FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8020)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsFanModuleLocation"), ("CPQSTSYS-MIB", "cpqSsFanModuleStatus"), ("CPQSTSYS-MIB", "cpqSsFanModuleSerialNumber"), ("CPQSTSYS-MIB", "cpqSsFanModuleBoardRevision"))
if mibBuilder.loadTexts: cpqSsEx2FanStatusChange.setDescription('Storage system fan status change. The agent has detected a change in the fan module status of a storage system. The variable cpqSsFanModuleStatus indicates the current fan status. User Action: If the fan status is degraded or failed, replace any failed fans.')
cpqSsEx2PowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8021)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBay"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyStatus"), ("CPQSTSYS-MIB", "cpqSsPowerSupplySerialNumber"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyBoardRevision"), ("CPQSTSYS-MIB", "cpqSsPowerSupplyFirmwareRevision"))
if mibBuilder.loadTexts: cpqSsEx2PowerSupplyStatusChange.setDescription('Storage system power supply status change. The agent has detected a change in the power supply status of a storage system. The variable cpqSsPowerSupplyStatus indicates the current status. User Action: If the power supply status is failed, take action to restore power or replace the failed power supply.')
cpqSsExBackplaneFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8022)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsBackplaneIndex"), ("CPQSTSYS-MIB", "cpqSsBackplaneVendor"), ("CPQSTSYS-MIB", "cpqSsBackplaneModel"), ("CPQSTSYS-MIB", "cpqSsBackplaneSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBackplaneFanStatus"))
if mibBuilder.loadTexts: cpqSsExBackplaneFanStatusChange.setDescription('Storage system fan status change. The agent has detected a change in the fan status of a storage system. The variable cpqSsBackplaneFanStatus indicates the current fan status. User Action: If the fan status is degraded or failed, replace any failed fans.')
cpqSsExBackplaneTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8023)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsBackplaneIndex"), ("CPQSTSYS-MIB", "cpqSsBackplaneVendor"), ("CPQSTSYS-MIB", "cpqSsBackplaneModel"), ("CPQSTSYS-MIB", "cpqSsBackplaneSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBackplaneTempStatus"))
if mibBuilder.loadTexts: cpqSsExBackplaneTempStatusChange.setDescription('Storage system temperature status change. The agent has detected a change in the status of the temperature in a storage system. The variable cpqSsBackplaneTempStatus indicates the current status. User Action: If the temperature status is degraded or failed, shutdown the storage system as soon as possible. Insure that the storage system environment is being cooled properly and that no components are overheated.')
cpqSsExBackplanePowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8024)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsBackplaneIndex"), ("CPQSTSYS-MIB", "cpqSsBackplaneVendor"), ("CPQSTSYS-MIB", "cpqSsBackplaneModel"), ("CPQSTSYS-MIB", "cpqSsBackplaneSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBackplaneFtpsStatus"))
if mibBuilder.loadTexts: cpqSsExBackplanePowerSupplyStatusChange.setDescription('Storage system power supply status change. The agent has detected a change in the power supply status of a storage system. The variable cpqSsBackplaneFtpsStatus indicates the current status. User Action: If the power supply status is degraded, take action to restore power or replace the failed power supply.')
cpqSsExRecoveryServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8025)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsChassisName"), ("CPQSTSYS-MIB", "cpqSsChassisTime"), ("CPQSTSYS-MIB", "cpqSsChassisRsoStatus"), ("CPQSTSYS-MIB", "cpqSsChassisIndex"))
if mibBuilder.loadTexts: cpqSsExRecoveryServerStatusChange.setDescription('Storage system recovery server option status change. The agent has detected a change in the recovery server option status of a storage system. The variable cpqSsChassisRsoStatus indicates the current status. User Action: If the RSO status is noSecondary(6) or linkDown(7), insure the secondary server is operational and all cables are connected properly. If the RSO status is secondaryRunningAuto(8) or secondaryRunningUser(9), examine the the primary server for failed components.')
cpqSs5FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8026)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFanStatus"))
if mibBuilder.loadTexts: cpqSs5FanStatusChange.setDescription('Storage System fan status change. The agent has detected a change in the Fan Status of a storage system. The variable cpqSsBoxFanStatus indicates the current fan status. User Action: If the fan status is degraded or failed, replace any failed fans.')
cpqSs5TempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8027)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"))
if mibBuilder.loadTexts: cpqSs5TempStatusChange.setDescription('Storage System temperature status change. The agent has detected a change in the temperature status of a storage system. The variable cpqSsBoxTempStatus indicates the current temperature status. User Action: If the temperature status is degraded or failed, shutdown the storage system as soon as possible. Insure that the storage system environment is being cooled properly and that no components are overheated.')
cpqSs5PwrSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8028)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFltTolPwrSupplyStatus"))
if mibBuilder.loadTexts: cpqSs5PwrSupplyStatusChange.setDescription('Storage system power supply status change. The agent has detected a change in the power supply status of a storage system. The variable cpqSsBoxFltTolPwrSupplyStatus indicates the current power supply status. User Action: If the power supply status is degraded, take action to restore power or replace the failed power supply.')
cpqSs6FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8029)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFanStatus"), ("CPQSTSYS-MIB", "cpqSsBoxLocationString"))
if mibBuilder.loadTexts: cpqSs6FanStatusChange.setDescription('Storage System fan status change. The agent has detected a change in the Fan Status of a storage system. The variable cpqSsBoxFanStatus indicates the current fan status. User Action: If the fan status is degraded or failed, replace any failed fans.')
cpqSs6TempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8030)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxTempStatus"), ("CPQSTSYS-MIB", "cpqSsBoxLocationString"))
if mibBuilder.loadTexts: cpqSs6TempStatusChange.setDescription('Storage System temperature status change. The agent has detected a change in the temperature status of a storage system. The variable cpqSsBoxTempStatus indicates the current temperature status. User Action: If the temperature status is degraded or failed, shutdown the storage system as soon as possible. Insure that the storage system environment is being cooled properly and that no components are overheated.')
cpqSs6PwrSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,8031)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrHwLocation"), ("CPQSTSYS-MIB", "cpqSsBoxCntlrIndex"), ("CPQSTSYS-MIB", "cpqSsBoxBusIndex"), ("CPQSTSYS-MIB", "cpqSsBoxVendor"), ("CPQSTSYS-MIB", "cpqSsBoxModel"), ("CPQSTSYS-MIB", "cpqSsBoxSerialNumber"), ("CPQSTSYS-MIB", "cpqSsBoxFltTolPwrSupplyStatus"), ("CPQSTSYS-MIB", "cpqSsBoxLocationString"))
if mibBuilder.loadTexts: cpqSs6PwrSupplyStatusChange.setDescription('Storage system power supply status change. The agent has detected a change in the power supply status of a storage system. The variable cpqSsBoxFltTolPwrSupplyStatus indicates the current power supply status. User Action: If the power supply status is degraded, take action to restore power or replace the failed power supply.')
mibBuilder.exportSymbols("CPQSTSYS-MIB", cpqSsBackplaneVersion=cpqSsBackplaneVersion, cpqSsIoSlotControllerType=cpqSsIoSlotControllerType, cpqSsBoxFltTolPwrSupplyStatus=cpqSsBoxFltTolPwrSupplyStatus, cpqSsExRecoveryServerStatusChange=cpqSsExRecoveryServerStatusChange, cpqSsIoSlotIndex=cpqSsIoSlotIndex, cpqSsChassisPowerBoardRev=cpqSsChassisPowerBoardRev, cpqSsTempSensorLocation=cpqSsTempSensorLocation, cpqSsPowerSupplyCondition=cpqSsPowerSupplyCondition, cpqSsChassisScsiBoardRev=cpqSsChassisScsiBoardRev, cpqSsPowerSupplyChassisIndex=cpqSsPowerSupplyChassisIndex, cpqSsRaidSystemCondition=cpqSsRaidSystemCondition, cpqSsDrvBoxPathBoxOnConnector=cpqSsDrvBoxPathBoxOnConnector, cpqSsBoxSidePanelStatus=cpqSsBoxSidePanelStatus, cpqSsExTempSensorStatusChange=cpqSsExTempSensorStatusChange, cpqSsChassisOverallCondition=cpqSsChassisOverallCondition, cpqSsBoxPlacement=cpqSsBoxPlacement, cpqSsTrapTime=cpqSsTrapTime, cpqSsBackplaneConnectionType=cpqSsBackplaneConnectionType, cpqSs5TempStatusChange=cpqSs5TempStatusChange, cpqSsChassisPowerBoardSerNum=cpqSsChassisPowerBoardSerNum, cpqSsTrapLogTable=cpqSsTrapLogTable, cpqSs4PwrSupplyDegraded=cpqSs4PwrSupplyDegraded, cpqSsBackplaneIndex=cpqSsBackplaneIndex, cpqSs3SidePanelInPlace=cpqSs3SidePanelInPlace, cpqSsFanModuleSerialNumber=cpqSsFanModuleSerialNumber, cpqSsPowerSupplyTable=cpqSsPowerSupplyTable, cpqSsScsiAttachmentPathStatus=cpqSsScsiAttachmentPathStatus, cpqSsTempSensorStatus=cpqSsTempSensorStatus, cpqSsTempSensorEntry=cpqSsTempSensorEntry, cpqSsDrvBoxPathStatus=cpqSsDrvBoxPathStatus, cpqSsBoxBusIndex=cpqSsBoxBusIndex, cpqSsDrvBoxPathLocationString=cpqSsDrvBoxPathLocationString, cpqSsPwrSupplyDegraded=cpqSsPwrSupplyDegraded, cpqSsBackplaneSerialNumber=cpqSsBackplaneSerialNumber, cpqSsFibreAttachmentHostControllerPort=cpqSsFibreAttachmentHostControllerPort, cpqSsChassisProductId=cpqSsChassisProductId, cpqSsBoxType=cpqSsBoxType, cpqSsBoxCondition=cpqSsBoxCondition, cpqSsBackplaneVendor=cpqSsBackplaneVendor, cpqSsBackplaneOnConnector=cpqSsBackplaneOnConnector, cpqSsIoSlotEntry=cpqSsIoSlotEntry, cpqSsBoxCntlrHwLocation=cpqSsBoxCntlrHwLocation, cpqSsDrvBoxEntry=cpqSsDrvBoxEntry, cpqSsFibreAttachmentDevicePort=cpqSsFibreAttachmentDevicePort, cpqSsFanModuleEntry=cpqSsFanModuleEntry, cpqSsDrvBoxPathCurrentRole=cpqSsDrvBoxPathCurrentRole, cpqSsFanModuleCondition=cpqSsFanModuleCondition, cpqSsChassisRsoCondition=cpqSsChassisRsoCondition, cpqSsPowerSupplySerialNumber=cpqSsPowerSupplySerialNumber, cpqSsFanModuleStatus=cpqSsFanModuleStatus, cpqSsBoxModel=cpqSsBoxModel, cpqSsEx2FanStatusChange=cpqSsEx2FanStatusChange, cpqSsBackplaneCondition=cpqSsBackplaneCondition, cpqSsBoxBackplaneSpeed=cpqSsBoxBackplaneSpeed, cpqSsBackplaneConnector=cpqSsBackplaneConnector, cpqSsFibreAttachmentDeviceIndex=cpqSsFibreAttachmentDeviceIndex, cpqSsScsiAttachmentPathCondition=cpqSsScsiAttachmentPathCondition, cpqSsBoxExtended=cpqSsBoxExtended, cpqSsChassisPreferredPathMode=cpqSsChassisPreferredPathMode, cpqSsChassisSystemBoardRev=cpqSsChassisSystemBoardRev, cpqSsTempSensorHysteresisValue=cpqSsTempSensorHysteresisValue, cpqSsFibreAttachmentTable=cpqSsFibreAttachmentTable, cpqSsRaidSystemIndex=cpqSsRaidSystemIndex, cpqSsChassisFcaLogicalDriveCondition=cpqSsChassisFcaLogicalDriveCondition, cpqSsChassisEntry=cpqSsChassisEntry, cpqSsChassisBackplaneCondition=cpqSsChassisBackplaneCondition, cpqSsMibCondition=cpqSsMibCondition, cpqSsBackplaneSpeed=cpqSsBackplaneSpeed, cpqSsDrvBoxPathIndex=cpqSsDrvBoxPathIndex, cpqSsChassisFcaPhysDrvCondition=cpqSsChassisFcaPhysDrvCondition, cpqSsChassisFanCondition=cpqSsChassisFanCondition, cpqSsMibRevMajor=cpqSsMibRevMajor, cpqSsChassisScsiIoModuleType=cpqSsChassisScsiIoModuleType, cpqSsDrvBoxPathTable=cpqSsDrvBoxPathTable, cpqSsChassisIndex=cpqSsChassisIndex, cpqSsChassisFcaTapeDrvCondition=cpqSsChassisFcaTapeDrvCondition, cpqSsBackplaneChassisIndex=cpqSsBackplaneChassisIndex, cpqSsFanModuleLocation=cpqSsFanModuleLocation, cpqSsBackplaneFWRev=cpqSsBackplaneFWRev, cpqSsBoxTempStatus=cpqSsBoxTempStatus, cpqSsPowerSupplyFirmwareRevision=cpqSsPowerSupplyFirmwareRevision, cpqSsBackplanePlacement=cpqSsBackplanePlacement, cpqSsBoxCntlrIndex=cpqSsBoxCntlrIndex, cpqSsTempSensorChassisIndex=cpqSsTempSensorChassisIndex, cpqSsBoxFanStatus=cpqSsBoxFanStatus, cpqSsChassisTable=cpqSsChassisTable, cpqSsExPowerSupplyStatusChange=cpqSsExPowerSupplyStatusChange, cpqSsExPowerSupplyUpsStatusChange=cpqSsExPowerSupplyUpsStatusChange, cpqSsChassisSystemBoardSerNum=cpqSsChassisSystemBoardSerNum, cpqSsChassisRsoStatus=cpqSsChassisRsoStatus, cpqSs5PwrSupplyStatusChange=cpqSs5PwrSupplyStatusChange, cpqSsTrapLogIndex=cpqSsTrapLogIndex, cpqSsBoxBoardRevision=cpqSsBoxBoardRevision, cpqSsStorageSys=cpqSsStorageSys, cpqSsBackplaneModel=cpqSsBackplaneModel, cpqSsBackplaneFanStatus=cpqSsBackplaneFanStatus, cpqSsChassisTime=cpqSsChassisTime, cpqSsRaidSystemStatus=cpqSsRaidSystemStatus, cpqSsExBackplaneTempStatusChange=cpqSsExBackplaneTempStatusChange, cpqSsChassisFcaCntlrCondition=cpqSsChassisFcaCntlrCondition, cpqSsTempSensorLimitValue=cpqSsTempSensorLimitValue, cpqSsExBackplaneFanStatusChange=cpqSsExBackplaneFanStatusChange, cpqSsTempSensorCondition=cpqSsTempSensorCondition, cpqSsFanModuleBoardRevision=cpqSsFanModuleBoardRevision, cpqSsRaidSystemCntlr2SerialNumber=cpqSsRaidSystemCntlr2SerialNumber, cpqSsChassisSerialNumber=cpqSsChassisSerialNumber, cpqSsFanModuleChassisIndex=cpqSsFanModuleChassisIndex, cpqSsBackplaneTempStatus=cpqSsBackplaneTempStatus, cpqSsBoxBackPlaneVersion=cpqSsBoxBackPlaneVersion, cpqSsBackplaneFtpsStatus=cpqSsBackplaneFtpsStatus, cpqSsPowerSupplyUpsStatus=cpqSsPowerSupplyUpsStatus, cpqSsRaidSystemName=cpqSsRaidSystemName, cpqSs3TempDegraded=cpqSs3TempDegraded, cpqSs6PwrSupplyStatusChange=cpqSs6PwrSupplyStatusChange, cpqSs5FanStatusChange=cpqSs5FanStatusChange, cpqSsBackplaneTable=cpqSsBackplaneTable, cpqSsBoxLocationString=cpqSsBoxLocationString, cpqSsBackplaneDriveBays=cpqSsBackplaneDriveBays, cpqSsMibRevMinor=cpqSsMibRevMinor, cpqSs3FanStatusChange=cpqSs3FanStatusChange, cpqSs6FanStatusChange=cpqSs6FanStatusChange, cpqSsBackplaneEntry=cpqSsBackplaneEntry, cpqSsPowerSupplyIndex=cpqSsPowerSupplyIndex, cpqSsScsiAttachmentControllerIndex=cpqSsScsiAttachmentControllerIndex, cpqSsChassisPowerSupplyCondition=cpqSsChassisPowerSupplyCondition, cpqSsDrvBoxPathHostConnector=cpqSsDrvBoxPathHostConnector, cpqSsTrapLogEntry=cpqSsTrapLogEntry, cpqSsTempDegraded=cpqSsTempDegraded, cpqSs3TempOk=cpqSs3TempOk, cpqSsExBackplanePowerSupplyStatusChange=cpqSsExBackplanePowerSupplyStatusChange, cpqSsFibreAttachmentDeviceType=cpqSsFibreAttachmentDeviceType, cpqSsBoxSerialNumber=cpqSsBoxSerialNumber, cpqSsTrap=cpqSsTrap, cpqSsBoxBoxOnConnector=cpqSsBoxBoxOnConnector, cpqSsPowerSupplyBoardRevision=cpqSsPowerSupplyBoardRevision, cpqSsFibreAttachmentIndex=cpqSsFibreAttachmentIndex, cpqSsScsiAttachmentChassisIoSlot=cpqSsScsiAttachmentChassisIoSlot, cpqSsDrvBoxPathCntlrIndex=cpqSsDrvBoxPathCntlrIndex, cpqSsScsiAttachmentEntry=cpqSsScsiAttachmentEntry, cpqSsRaidSystemTable=cpqSsRaidSystemTable, cpqSsScsiAttachmentChassisIndex=cpqSsScsiAttachmentChassisIndex, cpqSsPowerSupplyStatus=cpqSsPowerSupplyStatus, cpqSsFibreAttachmentHostControllerIndex=cpqSsFibreAttachmentHostControllerIndex, cpqSsFanModuleTable=cpqSsFanModuleTable, cpqSsScsiAttachmentControllerTarget=cpqSsScsiAttachmentControllerTarget, cpqSsChassisModel=cpqSsChassisModel, cpqSsBackplaneLocationString=cpqSsBackplaneLocationString, cpqSsDrvBoxPathBoxIndex=cpqSsDrvBoxPathBoxIndex, cpqSsDrvBox=cpqSsDrvBox, cpqSsTempFailed=cpqSsTempFailed, cpqSsScsiAttachmentTable=cpqSsScsiAttachmentTable, cpqSsRaidSystemCntlr1SerialNumber=cpqSsRaidSystemCntlr1SerialNumber, cpqSsChassisTemperatureCondition=cpqSsChassisTemperatureCondition, cpqSs3SidePanelRemoved=cpqSs3SidePanelRemoved, cpqSsDrvBoxTable=cpqSsDrvBoxTable, cpqSsFanModuleIndex=cpqSsFanModuleIndex, cpqSsFibreAttachmentEntry=cpqSsFibreAttachmentEntry, cpqSsDrvBoxPathEntry=cpqSsDrvBoxPathEntry, cpqSsMibRev=cpqSsMibRev, cpqSs3TempFailed=cpqSs3TempFailed, cpqSsBoxTotalBays=cpqSsBoxTotalBays, cpqSsTrapLogMaxSize=cpqSsTrapLogMaxSize, cpqSsBoxDuplexOption=cpqSsBoxDuplexOption, cpqSsIoSlotTable=cpqSsIoSlotTable, cpqSsTrapPkts=cpqSsTrapPkts, cpqSsIoSlotChassisIndex=cpqSsIoSlotChassisIndex, cpqSsBackplaneDuplexOption=cpqSsBackplaneDuplexOption, cpqSsChassisConnectionType=cpqSsChassisConnectionType, cpqSsRaidSystem=cpqSsRaidSystem, cpqSsFanStatusChange=cpqSsFanStatusChange, cpqSsSidePanelRemoved=cpqSsSidePanelRemoved, cpqSs2FanStatusChange=cpqSs2FanStatusChange, cpqSsRaidSystemEntry=cpqSsRaidSystemEntry, cpqSsBoxVendor=cpqSsBoxVendor, cpqSsScsiAttachmentIndex=cpqSsScsiAttachmentIndex, cpqSsTempSensorIndex=cpqSsTempSensorIndex, cpqSsTempOk=cpqSsTempOk, cpqSsBoxConnectionType=cpqSsBoxConnectionType, cpqSsChassisScsiBoardSerNum=cpqSsChassisScsiBoardSerNum, cpqSsBoxFWRev=cpqSsBoxFWRev, cpqSsTrapType=cpqSsTrapType, cpqSs6TempStatusChange=cpqSs6TempStatusChange, cpqSsBoxHostConnector=cpqSsBoxHostConnector, cpqSsChassisName=cpqSsChassisName, cpqSsBackplaneBoardRevision=cpqSsBackplaneBoardRevision, cpqSs3PwrSupplyDegraded=cpqSs3PwrSupplyDegraded, cpqSsScsiAttachmentControllerPort=cpqSsScsiAttachmentControllerPort, cpqSsPowerSupplyEntry=cpqSsPowerSupplyEntry, cpqSsSidePanelInPlace=cpqSsSidePanelInPlace, cpqSsTempSensorCurrentValue=cpqSsTempSensorCurrentValue, cpqSsTempSensorTable=cpqSsTempSensorTable, cpqSsExFanStatusChange=cpqSsExFanStatusChange, cpqSsScsiAttachmentControllerLun=cpqSsScsiAttachmentControllerLun, cpqSsPowerSupplyBay=cpqSsPowerSupplyBay, cpqSsEx2PowerSupplyStatusChange=cpqSsEx2PowerSupplyStatusChange)
