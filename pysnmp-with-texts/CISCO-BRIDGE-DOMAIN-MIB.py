#
# PySNMP MIB module CISCO-BRIDGE-DOMAIN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-BRIDGE-DOMAIN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Counter32, Gauge32, MibIdentifier, iso, Counter64, TimeTicks, ModuleIdentity, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Counter32", "Gauge32", "MibIdentifier", "iso", "Counter64", "TimeTicks", "ModuleIdentity", "Integer32", "NotificationType")
StorageType, RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
ciscoBridgeDomainMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 642))
ciscoBridgeDomainMIB.setRevisions(('2007-12-29 00:00', '2007-12-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoBridgeDomainMIB.setRevisionsDescriptions(('Modified the MIB description with details on similarities and differences between Bridge Domains and 802.1AD Bridges.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoBridgeDomainMIB.setLastUpdated('200712290000Z')
if mibBuilder.loadTexts: ciscoBridgeDomainMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoBridgeDomainMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ethermibs@cisco.com')
if mibBuilder.loadTexts: ciscoBridgeDomainMIB.setDescription("A bridge domain is one of the means by which it is possible to define a broadcast domain on a bridging device. It is an alternative to 802.1D bridge-groups and to 802.1Q VLAN bridging. Bridge domain is the service specification, and specifies the broadcast domain number on which this frame of this particular service instance must be made available on. The physical and virtual interfaces that can comprise a bridge domain are heterogeneous in nature comprising Ethernet service instances, WAN Virtual Circuit for ATM or Frame Relay and VFIs. However, the frame encapsulations for all interface types are essentially Ethernet. Without bridge-domains, VLANs would have to be globally unique per device and one would only be restricted to the theoretical maximum of 4095 VLANs for single tagged traffic. However with the introduction of bridge-domains, one can associate a service instance with a bridge-domain and all service instances in the same bridge-domain form a broadcast domain. Bridge-domain ID determines the broadcast domain and the VLAN id is merely used to match and map traffic. With bridge domain feature configured VLAN IDs would be unique per interface only and not globally. Thus bridge domains make VLAN ids have only local significance per port Differences between Bridge Domains and 802.1AD Bridges: ======================================================= 1. Scope of the VLAN technology which uses 802.1 AD is global to the box. But in case of Bridge domain, the scope of vlan is local to interface 2. Switchport 802.1AD restricts the number of broadcast domain on a box to 4095. However, with Bridge domains, we can have up to 16k broadcast domain. 3. Under a single Bridge domain service instance, there can be flexible service mapping criterion.(i.e match based on outer vlan, outer cos, inner vlan, inner cos and payload ethertype). Whereas in case of switch port 802.1AD/dot1q this is not supported. Similarities between Bridge Domains and 802.1AD Bridges: ======================================================= 1. Both use the same MAC address lookup for forwarding. 2. Both work with protocols like STP, DTP etc. 3. Both of them classify 'ports' in a system into Bridges/Bridge Domains. Ethernet service instance is the instantiation of an Ethernet virtual circuit on a given port on a given router. In other words, an Ethernet service instance is an object that holds information about the layer 2 service that is being offered on a given port of a given router as part of a given Ethernet virtual circuit. Bridge domains feature is currently supported on ethernet service instances only and can be later extented to other interfaces like ATM and Frame Relay. This MIB helps the network management personnel to find out the details of various broadcast domains configured in the network. Definition of terms and acronyms: ATM: Asynchronous Transfer mode BD: Bridge Domain C-mac: Customer MAC EVC: Ethernet Virtual Circuit FR: Frame Relay SH: Split Horizon VFI: Virtual Forwarding Instance VLAN: Virtual Local Area Network WAN: Wide Area Network")
ciscoBdMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 0))
ciscoBdMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 1))
ciscoBdMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 2))
cbdSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 1))
cbdMemberInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2))
class CbdType(TextualConvention, Integer32):
    description = "Defines the different types of bridge domain members: 'other': none of the following 'ether': Ethernet Service Instance 'atmVc': ATM Virtual connection 'frVc': Frame Relay Virtual Connection"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("ether", 2), ("atmVc", 3), ("frVc", 4))

cbdMembersConfigured = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbdMembersConfigured.setStatus('current')
if mibBuilder.loadTexts: cbdMembersConfigured.setDescription('This object indicates the number of bridge domain members configured on this bridge domain.')
cbdMemberInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1), )
if mibBuilder.loadTexts: cbdMemberInfoTable.setStatus('current')
if mibBuilder.loadTexts: cbdMemberInfoTable.setDescription('This table provides the bridge domain member attributes of the members currently configured for each bridge domain.')
cbdMemberInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-BRIDGE-DOMAIN-MIB", "cbdSIIndex"))
if mibBuilder.loadTexts: cbdMemberInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cbdMemberInfoEntry.setDescription('A conceptual row in cbdMemberInfoTable. This is indexed by ifIndex and cbdSIIndex. Each row is created when a bridge domain member is configured under a service instance.')
cbdSIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cbdSIIndex.setStatus('current')
if mibBuilder.loadTexts: cbdSIIndex.setDescription('This object indicates an arbitary index that uniquely identifies the Service Instance to which this bridge domain member belongs to.')
cbdMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 2), CbdType().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMemberType.setStatus('current')
if mibBuilder.loadTexts: cbdMemberType.setDescription('This object identifies the type of the bridge domain member like ATM VC, Frame Relay VC, or Ethernet service.')
cbdMemberOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbdMemberOperState.setStatus('current')
if mibBuilder.loadTexts: cbdMemberOperState.setDescription("This object indicates the operational state of the bridge domain Member. Operational state of the Bridge domain member is same as the operational state of the underlying service instance. Bridge domain members are configured under service instances and multiple service instances can be attached to a single physical interface defining various kinds of services. Bridge domain members have many to one relationship with interface Indexes. When ifOperStatus of the underlying interface is down, the state of cbdMemberOperState should be down. When ifOperStatus of the underlying interface is up, cbdMemberOperState can be either up or down based on the state of underlying service instance. 'unknown': the bridge domain member is an unknown state. 'up': the bridge domain member is fully operational and able to bridge the traffic. This means that both the physical interface and the underlying service instance are administratively up. 'down': the Bridge Domain member is down and not capable of bridging. This state means either the underlying service instance is down or the interface is down.")
cbdMemberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMemberAdminState.setStatus('current')
if mibBuilder.loadTexts: cbdMemberAdminState.setDescription("This object indicates the administrative state of the bridge domain Member. Admin state of the Bridge domain member is same as the admin state of the underlying service instance. Bridge domain members are configured under service instances and multiple service instances can be attached to a single physical interface defining various kinds of services. Bridge Domain members have many to one relationship with interface Indexes. When ifAdminStatus of the unerlying interface is down the state of cbdMemberAdminState should be down. When ifOperStatus of the underlying interface is up cbdMemberAdminState can be either up or down based on the state of underlying service instance. 'unknown': the bridge domain member is in unknown administrative state. 'up': the Bridge Domain member is administratively up. This means that both the physical interface and the underlying service instance are administratively up. 'admindown': the Bridge Domain member is down as it is administratively configured to be down and is not capable of bridging. This means that either the underlying service instance is configured as administratively down or the physical interface is configured as administratively down.")
cbdMemberSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMemberSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: cbdMemberSplitHorizon.setDescription('This object indicates whether split horizon is configured on this bridge domain member.')
cbdMemberSplitHorizonNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMemberSplitHorizonNum.setStatus('current')
if mibBuilder.loadTexts: cbdMemberSplitHorizonNum.setDescription('This object indicates the split horizon number if configured on the bridge domain member. Split horizon is used to avoid sending traffic between interfaces. Frames are not forwarded to the members belonging to the same split horizon group.')
cbdMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: cbdMemberStorageType.setDescription("This object specifies the storage type of this conceptual row. This object can only have a value 'nonVolatile'. Other values are not applicable for this conceptual row and are not supported.")
cbdMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 8), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMemberStatus.setStatus('current')
if mibBuilder.loadTexts: cbdMemberStatus.setDescription('This object enables the SNMP agent to create, modify, and delete rows in the cbdMemberInfoTable.')
cbdMembercMac = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 642, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cbdMembercMac.setStatus('current')
if mibBuilder.loadTexts: cbdMembercMac.setDescription('This object indicates if cmac is configured on this bridge domain member. Cmac denotes if this bridge domain is configured as a customer domain.')
ciscoBdNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 0, 0))
ciscoBdMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 2, 1))
ciscoBdMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 642, 2, 2))
ciscoBdMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 642, 2, 1, 1)).setObjects(("CISCO-BRIDGE-DOMAIN-MIB", "cbdSystemInfoGroup"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBdMIBComplianceRev1 = ciscoBdMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoBdMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-BRIDGE-DOMAIN-MIB.')
cbdSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 642, 2, 2, 1)).setObjects(("CISCO-BRIDGE-DOMAIN-MIB", "cbdMembersConfigured"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbdSystemInfoGroup = cbdSystemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cbdSystemInfoGroup.setDescription('This group contain information about bridge domain.')
cbdMemberInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 642, 2, 2, 2)).setObjects(("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberType"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberOperState"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberAdminState"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberSplitHorizon"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberSplitHorizonNum"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberStorageType"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMemberStatus"), ("CISCO-BRIDGE-DOMAIN-MIB", "cbdMembercMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbdMemberInfoGroup = cbdMemberInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cbdMemberInfoGroup.setDescription('This group contain information related to bridge domain members.')
mibBuilder.exportSymbols("CISCO-BRIDGE-DOMAIN-MIB", CbdType=CbdType, cbdMemberInfoEntry=cbdMemberInfoEntry, cbdMemberStorageType=cbdMemberStorageType, cbdMemberType=cbdMemberType, cbdMembercMac=cbdMembercMac, cbdMemberInfo=cbdMemberInfo, cbdSystemInfo=cbdSystemInfo, cbdMemberOperState=cbdMemberOperState, ciscoBdMIBConformance=ciscoBdMIBConformance, cbdMemberInfoTable=cbdMemberInfoTable, PYSNMP_MODULE_ID=ciscoBridgeDomainMIB, ciscoBdMIBObjects=ciscoBdMIBObjects, ciscoBridgeDomainMIB=ciscoBridgeDomainMIB, ciscoBdMIBComplianceRev1=ciscoBdMIBComplianceRev1, ciscoBdMIBNotifications=ciscoBdMIBNotifications, ciscoBdNotificationPrefix=ciscoBdNotificationPrefix, ciscoBdMIBCompliances=ciscoBdMIBCompliances, cbdMembersConfigured=cbdMembersConfigured, cbdMemberAdminState=cbdMemberAdminState, ciscoBdMIBGroups=ciscoBdMIBGroups, cbdMemberStatus=cbdMemberStatus, cbdSystemInfoGroup=cbdSystemInfoGroup, cbdMemberSplitHorizonNum=cbdMemberSplitHorizonNum, cbdSIIndex=cbdSIIndex, cbdMemberInfoGroup=cbdMemberInfoGroup, cbdMemberSplitHorizon=cbdMemberSplitHorizon)
