#
# PySNMP MIB module BIANCA-BRICK-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-DNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:38:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, ModuleIdentity, Bits, NotificationType, IpAddress, MibIdentifier, TimeTicks, iso, ObjectIdentity, Counter64, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "ModuleIdentity", "Bits", "NotificationType", "IpAddress", "MibIdentifier", "TimeTicks", "iso", "ObjectIdentity", "Counter64", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
biboip = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5))
ipDns = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 5, 20))
ipDnsDhcpAssign = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("self", 2), ("global", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsDhcpAssign.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsDhcpAssign.setDescription('This variable determines the assignment policy, when a BinTec router acts as a DHCP-server and is asked for nameserver addresses. Possible values: none (1), -- Dont send any nameserver -addresses self (2), -- Send own address as the only nameserver global(3) -- Send ns-addresses from global admin table.')
ipDnsIpcpAssign = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("self", 2), ("global", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsIpcpAssign.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsIpcpAssign.setDescription('This variable determines the assignment policy, when a BinTec router is asked for nameservers during IPCP negotiation. Possible values: none (1), -- Dont send any nameserver addresses self (2), -- Send own address as the only nameserver global(3) -- Send ns-addresses from global admin table.')
ipDnsUsePosCache = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsUsePosCache.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsUsePosCache.setDescription('Decides, whether positive caching is performed or not.')
ipDnsUseNegCache = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsUseNegCache.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsUseNegCache.setDescription('Decides, whether negative caching is performed or not.')
ipDnsMaxCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsMaxCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsMaxCacheSize.setDescription('Defines the maximum number of entries in the DNS table. If this limit is reached, the dynamic entries are discarded according to the lru order, if a new entry is to be added.')
ipDnsPositiveTtl = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsPositiveTtl.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsPositiveTtl.setDescription('The time to live used for a positive cache entry, if the responding nameserver does not tell it explicitly (i.e. TTL=0).')
ipDnsNegativeTtl = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsNegativeTtl.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNegativeTtl.setDescription('The time to live used for negative cache entries.')
ipDnsDefaultIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsDefaultIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsDefaultIfIndex.setDescription('The index of the interface (from the pppTable) whose nameserver should be requested by default, if nothing else works. -1 defines no default interface for DNS forwarding.')
ipDnsNumReceives = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumReceives.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumReceives.setDescription('The number of packets received.')
ipDnsNumInvalids = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumInvalids.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumInvalids.setDescription('The number of invalid packets received.')
ipDnsNumRequests = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumRequests.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumRequests.setDescription('The number of questions received. If a packet is received, this variable is incremented by the number of question records contained in the packet.')
ipDnsNumCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumCacheHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumCacheHits.setDescription('The number of times a question could be answered immediately due to a cache entry.')
ipDnsNumForwards = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumForwards.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumForwards.setDescription('The number of questions forwarded to other name servers.')
ipDnsNumOks = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumOks.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumOks.setDescription('The number of requests answered successfully.')
ipDnsNumFails = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsNumFails.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsNumFails.setDescription('The number of requests answered with a SERVFAIL packet.')
ipDnsDynamicGlobals = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsDynamicGlobals.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsDynamicGlobals.setDescription('This object determines, if the global name servers in table admin are being overwritten each time a name server has been negotiated successfully via IPCP or not Possible values: yes (1), -- Overwrite global name servers each time a -- name server has been negotiated successfully -- via IPCP no (2) -- Never overwrite global name servers.')
ipDnsTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16), )
if mibBuilder.loadTexts: ipDnsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsTable.setDescription('Contains both static and temporary entries of DNS records ')
ipDnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1), ).setIndexNames((0, "BIANCA-BRICK-DNS-MIB", "ipDnsEntName"))
if mibBuilder.loadTexts: ipDnsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntry.setDescription('Contains either DNS routing-information or DNS-caching- information, depending on the values of the ip-address and interface-index fields')
ipDnsEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntName.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntName.setDescription('DNS-name')
ipDnsEntIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntIpaddr.setDescription('The ip-address, 0.0.0.0 for a not resolved or wildcard entry')
ipDnsEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntIfIndex.setDescription('The index of the interface (from the pppTable) whose nameserver should be requested for this entry. If this field contains a negative value, the static nameservers are queried.')
ipDnsEntResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("negative", 2), ("positive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntResponse.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntResponse.setDescription('Response for queries matching this entry')
ipDnsEntStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntStatic.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntStatic.setDescription('Determines, whether the entry is static (yes), dynamic(no) (ttl is decremented) or marked for discard (delete)')
ipDnsEntTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntTtl.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntTtl.setDescription('The remaining time-to-live of the entry in seconds. This Field is only used, if the type of the entry is dynamic.')
ipDnsEntLru = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntLru.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntLru.setDescription('This Field is only used, if the type of the entry is dynamic. It is an internal value determining the order, in whch dynamic entries are discarded in case of a full dns table (last-recently-used). Internally, it represents the number of seconds elapsed since 01.01.1970.')
ipDnsEntHash = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDnsEntHash.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntHash.setDescription('The hash value for the name field. This value is re-compted at boot time and may change due to changing hash algorithms.')
ipDnsEntRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 5, 20, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDnsEntRefCount.setStatus('mandatory')
if mibBuilder.loadTexts: ipDnsEntRefCount.setDescription('Counts the number of times the entry has been referenced. For immediate entries it resembles the number of times a question could be answered due to this entry, for entries pointing to another nameserver, the number of times, the associated interface has been tried to pull up.')
mibBuilder.exportSymbols("BIANCA-BRICK-DNS-MIB", ipDnsNegativeTtl=ipDnsNegativeTtl, ipDns=ipDns, ipDnsPositiveTtl=ipDnsPositiveTtl, ipDnsEntName=ipDnsEntName, ipDnsNumOks=ipDnsNumOks, ipDnsUsePosCache=ipDnsUsePosCache, ipDnsEntRefCount=ipDnsEntRefCount, ipDnsIpcpAssign=ipDnsIpcpAssign, ipDnsEntIfIndex=ipDnsEntIfIndex, ipDnsEntResponse=ipDnsEntResponse, ipDnsEntLru=ipDnsEntLru, ipDnsNumFails=ipDnsNumFails, ipDnsNumCacheHits=ipDnsNumCacheHits, ipDnsDefaultIfIndex=ipDnsDefaultIfIndex, ipDnsTable=ipDnsTable, dod=dod, ipDnsNumInvalids=ipDnsNumInvalids, enterprises=enterprises, internet=internet, org=org, bintec=bintec, bibo=bibo, ipDnsEntIpaddr=ipDnsEntIpaddr, private=private, ipDnsNumReceives=ipDnsNumReceives, ipDnsDynamicGlobals=ipDnsDynamicGlobals, ipDnsEntHash=ipDnsEntHash, ipDnsNumForwards=ipDnsNumForwards, ipDnsNumRequests=ipDnsNumRequests, ipDnsEntry=ipDnsEntry, ipDnsEntStatic=ipDnsEntStatic, ipDnsMaxCacheSize=ipDnsMaxCacheSize, biboip=biboip, ipDnsEntTtl=ipDnsEntTtl, ipDnsDhcpAssign=ipDnsDhcpAssign, ipDnsUseNegCache=ipDnsUseNegCache)
