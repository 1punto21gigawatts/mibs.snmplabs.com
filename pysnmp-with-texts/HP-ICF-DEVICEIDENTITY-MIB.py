#
# PySNMP MIB module HP-ICF-DEVICEIDENTITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DEVICEIDENTITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Gauge32, ObjectIdentity, iso, MibIdentifier, Bits, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Counter32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "ObjectIdentity", "iso", "MibIdentifier", "Bits", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Counter32", "NotificationType", "Integer32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hpicfDeviceIdentityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135))
hpicfDeviceIdentityMIB.setRevisions(('2017-01-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfDeviceIdentityMIB.setRevisionsDescriptions(('Added new device identity table HpicfDeviceIdentityEntry. This table is used to identify device using discovery protocol like LLDP. LLDP make use of OUI and device subtype of organization specific TLV to detect device.',))
if mibBuilder.loadTexts: hpicfDeviceIdentityMIB.setLastUpdated('201701030000Z')
if mibBuilder.loadTexts: hpicfDeviceIdentityMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfDeviceIdentityMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfDeviceIdentityMIB.setDescription('Added new device identity table HpicfDeviceIdentityEntry. This table is used to identify device using discovery protocol like LLDP. LLDP make use of OUI and device subtype of organization specific TLV to detect device.')
hpicfDeviceIdentityConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1))
hpicfDeviceIdentityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 2))
hpicfDeviceIdentityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1), )
if mibBuilder.loadTexts: hpicfDeviceIdentityTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityTable.setDescription('The device identity configuration table. This table is used to identify device using discovery protocol like LLDP. LLDP make use of OUI and device subtype of organigation specific TLV to detect device.')
hpicfDeviceIdentityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1, 1), ).setIndexNames((0, "HP-ICF-DEVICEIDENTITY-MIB", "hpicfDeviceIdentityIndex"))
if mibBuilder.loadTexts: hpicfDeviceIdentityEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityEntry.setDescription('The device identity configuration entry.')
hpicfDeviceIdentityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hpicfDeviceIdentityIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityIndex.setDescription('The index value which uniquely identifies a row in the device identity table.')
hpicfDeviceIdentityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDeviceIdentityRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityRowStatus.setDescription('The row status of this device identity entry. Allows creation/deletion of the device identity entry. Row cannot be deleted if the device identity is associated with other subsystem like device profile.')
hpicfDeviceIdentityName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDeviceIdentityName.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityName.setDescription('The name of the device identity. The maximum length supported is 20 characters.')
hpicfDeviceIdentityLldpOui = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDeviceIdentityLldpOui.setReference('IEEE 802.1AB-2005 9.5.1.3')
if mibBuilder.loadTexts: hpicfDeviceIdentityLldpOui.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityLldpOui.setDescription('The Organizationally Unique Identifier (OUI), as defined in IEEE std 802-2001, is a 24 bit (three octets) globally unique assigned number referenced by various standards, of the information received from the remote system. Combination of hpicfLldpDeviceOui and hpicfLldpDeviceSubType used to identify LLDP device. The default OUI 000000 indicates that device-identity will not use LLDP to identify device.')
hpicfDeviceIdentityLldpSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDeviceIdentityLldpSubType.setReference('IEEE 802.1AB-2005 9.5.1.4')
if mibBuilder.loadTexts: hpicfDeviceIdentityLldpSubType.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityLldpSubType.setDescription('The integer value used to identify the subtype of the organizationally defined information received from the remote system. The subtype value is required to identify different instances of organizationally defined information that could not be retrieved without a unique identifier that indicates the particular type of information contained in the information string. The default value (0) of the object indicates that subtype will be ignored in device identification.')
hpicfDeviceIdentityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 2, 1))
hpicfDeviceIdentityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 2, 2))
hpicfiDeviceIdentityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 2, 2, 1)).setObjects(("HP-ICF-DEVICEIDENTITY-MIB", "hpicfDeviceIdentityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfiDeviceIdentityCompliance = hpicfiDeviceIdentityCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfiDeviceIdentityCompliance.setDescription('The compliance statement for device identity using discovery protocol like LLDP.')
hpicfDeviceIdentityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 135, 2, 1, 1)).setObjects(("HP-ICF-DEVICEIDENTITY-MIB", "hpicfDeviceIdentityRowStatus"), ("HP-ICF-DEVICEIDENTITY-MIB", "hpicfDeviceIdentityName"), ("HP-ICF-DEVICEIDENTITY-MIB", "hpicfDeviceIdentityLldpOui"), ("HP-ICF-DEVICEIDENTITY-MIB", "hpicfDeviceIdentityLldpSubType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDeviceIdentityGroup = hpicfDeviceIdentityGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDeviceIdentityGroup.setDescription('The collection of objects which are used to configure the device identity using discovery protocol. LLDP make use of organigation specific TLV.This device identity can be use by other subsystem like device profile. This group is mandatory for agents which implement the LLDP.')
mibBuilder.exportSymbols("HP-ICF-DEVICEIDENTITY-MIB", hpicfDeviceIdentityConformance=hpicfDeviceIdentityConformance, hpicfDeviceIdentityGroups=hpicfDeviceIdentityGroups, hpicfDeviceIdentityRowStatus=hpicfDeviceIdentityRowStatus, hpicfDeviceIdentityCompliances=hpicfDeviceIdentityCompliances, hpicfDeviceIdentityMIB=hpicfDeviceIdentityMIB, hpicfDeviceIdentityLldpSubType=hpicfDeviceIdentityLldpSubType, hpicfiDeviceIdentityCompliance=hpicfiDeviceIdentityCompliance, hpicfDeviceIdentityTable=hpicfDeviceIdentityTable, hpicfDeviceIdentityConfig=hpicfDeviceIdentityConfig, hpicfDeviceIdentityName=hpicfDeviceIdentityName, hpicfDeviceIdentityGroup=hpicfDeviceIdentityGroup, PYSNMP_MODULE_ID=hpicfDeviceIdentityMIB, hpicfDeviceIdentityEntry=hpicfDeviceIdentityEntry, hpicfDeviceIdentityIndex=hpicfDeviceIdentityIndex, hpicfDeviceIdentityLldpOui=hpicfDeviceIdentityLldpOui)
