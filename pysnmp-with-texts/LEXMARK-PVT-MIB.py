#
# PySNMP MIB module LEXMARK-PVT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEXMARK-PVT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Integer32, MibIdentifier, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, ObjectIdentity, Unsigned32, ModuleIdentity, Gauge32, Counter64, iso, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "MibIdentifier", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter64", "iso", "TimeTicks", "IpAddress")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
lexmark = MibIdentifier((1, 3, 6, 1, 4, 1, 641))
adapter = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1))
printer = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 2))
attachment = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 3))
opsys = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 1))
lexlink = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 2))
lexipx = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 3))
lextalk = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 4))
lextcp = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 5))
lexhttp = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 5, 6))
lexdhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 5, 7))
lexhdwr = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 6))
lexmac = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 7))
lextrap = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 8))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 1, 9))
prtgen = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 2, 1))
fax = MibIdentifier((1, 3, 6, 1, 4, 1, 641, 3, 1))
opsysCodeRev = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCodeRev.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCodeRev.setDescription("A textual identification of network adapter's firmware revision level. For example: 7.15.1")
opsysJobTimeout = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsysJobTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: opsysJobTimeout.setDescription('The adapter job timeout period in seconds.')
opsysCurrentJob = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCurrentJob.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCurrentJob.setDescription('A textual description of the currently printing job containing the Source NOS, Source server, Source user, Job number, and Job size, separated by CR LF. A NULL string indicates no active job. For multiport adapters, this reflects job status of printer port 1.')
opsysRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: opsysRAMSize.setDescription("The size of the network adapter's RAM in bytes.")
opsysNVRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysNVRAMSize.setStatus('mandatory')
if mibBuilder.loadTexts: opsysNVRAMSize.setDescription("The size of the network adapter's NVRAM in bytes.")
opsysROMSize = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysROMSize.setStatus('mandatory')
if mibBuilder.loadTexts: opsysROMSize.setDescription("The size of the network adapter's ROM in bytes.")
opsysROMType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysROMType.setStatus('mandatory')
if mibBuilder.loadTexts: opsysROMType.setDescription("A textual description of the network adapter's ROM technology. Currently valid types are: MASK_ROM, OTP, FLASH, UV_EPROM, EEPROM, and OTHER.")
opsysProtocols = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysProtocols.setStatus('mandatory')
if mibBuilder.loadTexts: opsysProtocols.setDescription('A bitmap representing the protocols supported by the network adapter. Bit Value Protocol --- ----- ---------- 0 1 LexLink 1 2 Netware 2 4 AppleTalk 3 8 TCP/IP 4 16 reserved 5 32 reserved 6 64 NDS')
opsysTimeToReset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsysTimeToReset.setStatus('mandatory')
if mibBuilder.loadTexts: opsysTimeToReset.setDescription('The amount of time remaining until the adapter performs a power on reset. A value of -1 indicates no reset is scheduled. Setting to 0 causes the adapter to reset immediately. The only valid set value is 0.')
opsysCardPartNo = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCardPartNo.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCardPartNo.setDescription("A textual representation of the network adapter's part number.")
opsysCardEC = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCardEC.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCardEC.setDescription("A textual representation of the network adapter's EC level.")
opsysCurrentJobTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 1, 12), )
if mibBuilder.loadTexts: opsysCurrentJobTable.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCurrentJobTable.setDescription("A table of current job information for each of the network adapter's printer ports.")
opsysCurrentJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 1, 12, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "opsysCurrentJobEntryIndex"))
if mibBuilder.loadTexts: opsysCurrentJobEntry.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCurrentJobEntry.setDescription('An entry containing job information for one printer port.')
opsysCurrentJobEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCurrentJobEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCurrentJobEntryIndex.setDescription('A unique value used by the adapter to identify job information for one printer port. Each entry corresponds to a value lexhdwrPortTableIndex.')
opsysCurrentJobString = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 1, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysCurrentJobString.setStatus('mandatory')
if mibBuilder.loadTexts: opsysCurrentJobString.setDescription("A textual description of the this printer port's currently printing job containing the Source NOS, Source server, Source user, Job number, and Job size, separated by CR LF. A NULL string indicates no active job.")
opsysDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: opsysDeviceType.setDescription("A two byte code representing the adapter's type.")
opsysAdapterName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysAdapterName.setStatus('mandatory')
if mibBuilder.loadTexts: opsysAdapterName.setDescription("A Unicode representation of the adapter's name.")
opsysAdapterCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsysAdapterCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: opsysAdapterCapabilities.setDescription('A bitmap representing the capabilities of the adapter. Bit Value Frame type --- ---------- -------------------------- 31 0x80000000 NPANT via Netware and IP 30 0x40000000 Receive-only Fax 29 0x20000000 reserved 28 0x10000000 Adapter HTTP 27 0x08000000 Printer HTTP 26 0x04000000 HTTP Configuration Page 25 0x02000000 Copier Option')
lexlinkActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexlinkActivated.setStatus('mandatory')
if mibBuilder.loadTexts: lexlinkActivated.setDescription('The activation status of the LexLink protocol. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lexlinkNickname = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexlinkNickname.setStatus('mandatory')
if mibBuilder.loadTexts: lexlinkNickname.setDescription('The nickname assigned to the adapter for the LexLink protocol. Note that some adapters may not support the maximum length.')
lexipxActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxActivated.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxActivated.setDescription('The activation status of the Netware protocol. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lexipxLoginName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxLoginName.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxLoginName.setDescription("The adapter's Netware login name. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.")
lexipxNetNumber = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxNetNumber.setDescription('The network number of the Netware network to which the adapter is connected.')
lexipxSAPMode = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxSAPMode.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxSAPMode.setDescription("The network adapter's current Netware SAP'ing status.")
lexipxServerMode = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pserver", 1), ("rprinter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxServerMode.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxServerMode.setDescription('The current Netware server mode of the adapter. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lexipxNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxNumPorts.setDescription('The number of Netware printer ports.')
lexipxPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 7), )
if mibBuilder.loadTexts: lexipxPortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPortInfoTable.setDescription('A table of Netware printer port information.')
lexipxPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxPortInfoIndex"))
if mibBuilder.loadTexts: lexipxPortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPortInfoEntry.setDescription('An entry containing Netware printer port information.')
lexipxPortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxPortInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPortInfoIndex.setDescription('A unique value used by the adapter to identify Netware printer ports.')
lexipxPortInfoPollIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxPortInfoPollIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPortInfoPollIntvl.setDescription('The Netware queue polling interval for this printer port.')
lexipxPortInfoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxPortInfoEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPortInfoEnable.setDescription('The Netware queue status of this printer port.')
lexipxPortInfoBannerPage = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("postscript", 2), ("ascii", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxPortInfoBannerPage.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPortInfoBannerPage.setDescription('The Netware queue banner page status for this printer port.')
lexipxNumPrefServers = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxNumPrefServers.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxNumPrefServers.setDescription('The maximum number of preferred Netware servers supported by this network adapter.')
lexipxPrefSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 9), )
if mibBuilder.loadTexts: lexipxPrefSrvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPrefSrvrTable.setDescription("A table of the network adapter's preferred Netware servers.")
lexipxPrefSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 9, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxPrefSrvrIndex"))
if mibBuilder.loadTexts: lexipxPrefSrvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPrefSrvrEntry.setDescription('An entry containing preferred Netware server information.')
lexipxPrefSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxPrefSrvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPrefSrvrIndex.setDescription('A unique value used by the adapter to identify preferred Netware servers.')
lexipxPrefSrvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxPrefSrvrName.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxPrefSrvrName.setDescription('The name of this preferred Netware server. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lexipxConnSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 10), )
if mibBuilder.loadTexts: lexipxConnSrvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrTable.setDescription('A table of connected Netware server information.')
lexipxConnSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxConnSrvrIndex"))
if mibBuilder.loadTexts: lexipxConnSrvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrEntry.setDescription('An entry containing connected Netware server information.')
lexipxConnSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrIndex.setDescription('A unique value used by the adapter to identify connected Netware servers.')
lexipxConnSrvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrName.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrName.setDescription('The name of this connected Netware server.')
lexipxConnSrvrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrNet.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrNet.setDescription('The Netware network number of this connected Netware server.')
lexipxConnSrvrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrNode.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrNode.setDescription('The Netware node address of the connected Netware server.')
lexipxConnSrvrConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrConnNum.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrConnNum.setDescription('The connection number of the connected Netware server (pserver mode only).')
lexipxConnSrvrConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrConnId.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrConnId.setDescription('The connection ID of the connected Netware server (rprinter mode only).')
lexipxConnSrvrPSConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxConnSrvrPSConnID.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxConnSrvrPSConnID.setDescription('The connection ID of the connected Netware pserver (rprinter mode only).')
lexipxFrameType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxFrameType.setDescription('A bitmap of the supported IPX frame types. Bit Value Frame type --- ----- -------------------------- 0 1 Token-Ring 1 2 Token-Ring Source Routed 2 4 Token-Ring SNAP 3 8 Token-Ring SNAP Source Routed 4 16 Ethernet 802.2 5 32 Ethernet 802.3 6 64 Ethernet Type 2 7 128 Ethernet SNAP')
lexipxTrapTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 3, 12), )
if mibBuilder.loadTexts: lexipxTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapTable.setDescription('A table of IPX trap destination configurations.')
lexipxTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexipxTrapIndex"))
if mibBuilder.loadTexts: lexipxTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapEntry.setDescription("An entry containing an IPX trap destination's configuration.")
lexipxTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexipxTrapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapIndex.setDescription('A unique value used by the adapter to identify IPX trap destinations.')
lexipxTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapMask.setDescription('The trap mask for the trap destination. It is implemented as a bitmap specifying a mask of intervention required conditions for which the adapter should send trap messages. Setting a bit to 1 enables the corresponding trap. A value of 511 will cause the adapter to send traps for all intervention required conditions. The bitmap is defined below: Bit Value Condition --- ----- -------------------------- 0 1 Output hopper full 1 2 Load Paper 2 4 Paper Jam 3 8 Toner Low 4 16 Service Required 5 32 Disk Error 6 64 Cover Opened 7 128 Page Complexity Error 8 256 Offline')
lexipxTrapNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapNetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapNetworkAddress.setDescription('The IPX network address of the trap destination. (4 bytes)')
lexipxTrapNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 3, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapNodeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapNodeAddress.setDescription('The IPX node address of the trap destination. (6 bytes)')
lexipxTrapType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiplexed", 1), ("individual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxTrapType.setDescription('The type of SNMP over IPX traps that will be sent by the adapter. Setting this variable to multiplexed(1) configures all intervention required conditions to send an irCondition trap (specific trap number 1) and for the clearing of intervention required conditions to send an irCleared trap (specific trap number 0). Setting this variable to individual(2) causes each intervention required condition to send its corresponding trap (specific traps numbered 2 through 10) and for the clearing of intervention required conditions to cause an irClearedTypeII trap (specific trap number 11). See the Trap Definitions Group for more information. Individual(2) is the default for IPX and is necessary for NMS annotations.')
lexipxGSQ = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexipxGSQ.setStatus('mandatory')
if mibBuilder.loadTexts: lexipxGSQ.setDescription('The General Service Query (GSQ) interval. This is the period in seconds that the adapter waits after a failed GSQ before attempting another as it searches for Netware servers.')
lextalkActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextalkActivated.setStatus('mandatory')
if mibBuilder.loadTexts: lextalkActivated.setDescription('The activation status of the AppleTalk protocol. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lextalkAddress = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lextalkAddress.setDescription('The AppleTalk Address of the network card. This variable is not implemented on the XLe adapters.')
lextalkName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkName.setStatus('mandatory')
if mibBuilder.loadTexts: lextalkName.setDescription('The AppleTalk name of this adapter. This variable is not implemented on the XLe adapters.')
lextalkZone = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkZone.setStatus('mandatory')
if mibBuilder.loadTexts: lextalkZone.setDescription('The AppleTalk zone name of this adapter. This variable is not implemented on the XLe adapters.')
lextalkType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextalkType.setStatus('mandatory')
if mibBuilder.loadTexts: lextalkType.setDescription('The AppleTalk type of this adapter. This variable is not implemented on the XLe adapters.')
lextcpActivated = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextcpActivated.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpActivated.setDescription('The activation status of the TCP/IP Protocol. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lextcpBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextcpBootpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpBootpEnable.setDescription('The status of whether or not BOOTP is attempted to determine the IP parameters. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lextcpAddressServ = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpAddressServ.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpAddressServ.setDescription("The IP address of the DHCP, BOOTP, or RARP server that provided the adapter's IP address.")
lextcpNumNPAPservers = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpNumNPAPservers.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpNumNPAPservers.setDescription('The maximum number of concurrent NPAP over TCP server connections.')
lextcpNPAPserversTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 5, 5), )
if mibBuilder.loadTexts: lextcpNPAPserversTable.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpNPAPserversTable.setDescription('A table of NPAP over TCP server information.')
lextcpNPAPserversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 5, 5, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lextcpNPAPserverIndex"))
if mibBuilder.loadTexts: lextcpNPAPserversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpNPAPserversEntry.setDescription('An entry containing NPAP over TCP server information.')
lextcpNPAPserverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpNPAPserverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpNPAPserverIndex.setDescription('A unique value used by the adapter to identify NPAP over TCP servers.')
lextcpNPAPserverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextcpNPAPserverAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lextcpNPAPserverAddress.setDescription('The IP address of this NPAP over TCP server.')
lexhttpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpEnable.setDescription('The status of whether the adapter will enable the HTTP server. If this variable is changed, the adapter must be reset before the change will take effect. See opsysTimeToReset.')
lexhttpNumLinks = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhttpNumLinks.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpNumLinks.setDescription('The number of configurable HTTP links for the adapter.')
lexhttpBytesRemaining = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhttpBytesRemaining.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpBytesRemaining.setDescription('The number of bytes available to store HTTP link and label information.')
lexhttpResetLinks = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpResetLinks.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpResetLinks.setDescription('A control for restoring default values for HTTP link settings. Setting the variable to reset will cause all of the HTTP link settings to be reset to their default values.')
lexhttpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5), )
if mibBuilder.loadTexts: lexhttpLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpLinkTable.setDescription('A table of HTTP Link settings.')
lexhttpLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexhttpLinkTableIndex"))
if mibBuilder.loadTexts: lexhttpLinkTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpLinkTableEntry.setDescription('An entry containing HTTP link settings.')
lexhttpLinkTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhttpLinkTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpLinkTableIndex.setDescription('A unique value used by the adapter to identify HTTP link settings.')
lexhttpLinkTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("linkOff", 1), ("customOn", 2), ("useDefault", 3), ("defaultOff", 4), ("defaultOn", 5), ("eraseCustom", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpLinkTableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpLinkTableStatus.setDescription('The status of the HTTP link. Get operation: linkOff -- Server will not display the link personalOn -- Server will display the custom link useDefault -- Write-only defaultOff -- Reserved defaultOn -- Server will display the default link eraseCustom -- Write-only Set operation: linkOff -- Puts the link in linkOff status customOn -- Puts the link in customOn status useDefault -- Clears the Label and URL for this link and puts the . link in defaultOn status defaultOff -- Read-only defaultOn -- Read-only eraseCustom -- Clears the Label and URL for this link and puts the . link in linkOff status')
lexhttpLinkTableLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpLinkTableLabel.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpLinkTableLabel.setDescription('The text to be displayed as the label of this HTTP link. It may be set to define a custom link. Note that when read, this always reflects what the server would display. As such, if the status of this link is defaultOn, it will not return your custom label if read even though it has been stored. Setting the status for this link to customOn will activate your custom link label. Remember that setting the status of this link to eraseCustom or useDefault clears this variable.')
lexhttpLinkTableURL = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpLinkTableURL.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpLinkTableURL.setDescription('The URL to be hyperlinked to by the HTTP link. It may be set to define a custom link. Note that when read, this always reflects what the server would use. As such, if the status of this link is defaultOn, it will not return your custom URL if read even though it has been stored. Setting the status for this link to customOn will activate your custom link URL. Remember that setting the status of this link to eraseCustom or useDefault clears this variable.')
lexhttpConfigEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhttpConfigEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lexhttpConfigEnable.setDescription('The status of whether HTTP configuration page is enabled.')
lexdhcpDhcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpDhcpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpDhcpEnable.setDescription('The status of whether DHCP is enabled.')
lexdhcpRarpEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpRarpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpRarpEnable.setDescription('The status of whether RARP is enabled.')
lexdhcpAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("bootp", 3), ("rarp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpAddressSource.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpAddressSource.setDescription('The method by which the current IP parameters were obtained.')
lexdhcpWinsStatus = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unregistered", 1), ("registered", 2), ("pending", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpWinsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpWinsStatus.setDescription("The adapter's WINS server registration status.")
lexdhcpWinsServer = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpWinsServer.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpWinsServer.setDescription('The IP address of the WINS server.')
lexdhcpHostname = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpHostname.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpHostname.setDescription("The adapter's TCP/IP hostname.")
lexdhcpLeaseLength = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpLeaseLength.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpLeaseLength.setDescription("The length of the adapter's DHCP address lease in seconds.")
lexdhcpTimetoExpire = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexdhcpTimetoExpire.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpTimetoExpire.setDescription('The number of seconds until the DHCP address lease expires.')
lexdhcpDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 5, 7, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexdhcpDNSServer.setStatus('mandatory')
if mibBuilder.loadTexts: lexdhcpDNSServer.setDescription('The IP address of the DNS server.')
lexhdwrNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrNumPorts.setDescription('The number of printer ports supported by this network adapter.')
lexhdwrPortTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 6, 2), )
if mibBuilder.loadTexts: lexhdwrPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTable.setDescription("A table of the adapter's printer port hardware settings.")
lexhdwrPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lexhdwrPortTableIndex"))
if mibBuilder.loadTexts: lexhdwrPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableEntry.setDescription('An entry containing printer port hardware settings.')
lexhdwrPortTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrPortTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableIndex.setDescription('A unique value used by the adapter to identify printer ports.')
lexhdwrPortTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("parallel", 2), ("serial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrPortTableType.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableType.setDescription('The type of attachment for this printer port.')
lexhdwrPortTableParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm1.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm1.setDescription('For serial and parallel ports, this is the port timeout in seconds. For internal ports, this parameter is unused.')
lexhdwrPortTableParm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm2.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm2.setDescription('For serial ports, this is the baud rate in bits per second. For parallel ports, this is the port mode and is defined as follows: standard(0), enhanced(1) For internal ports, this parameter is unused.')
lexhdwrPortTableParm3 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm3.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm3.setDescription('For serial ports, this is the parity and is defined as follows: none(0), odd(1), even(2), space(3), mark(4) For parallel and internal ports, this parameter is unused.')
lexhdwrPortTableParm4 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm4.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm4.setDescription('For serial ports, this is the number of data bits. For parallel and internal ports, this parameter is unused.')
lexhdwrPortTableParm5 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm5.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm5.setDescription('For serial ports, this is the number of stop bits and is defined as follows: bitsOne(2), bitsOneAndHalf(3), bitsTwo(4) For parallel and internal ports, this parameter is unused.')
lexhdwrPortTableParm6 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm6.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm6.setDescription('For serial ports, this is the pacing mode and is defined as follows: paceDtr(0), paceXonXff(1) For non XLe parallel ports, this is the parallel protocol and is defined as follows: auto(2), ecp(3), byte(4), nibble(5), compatible(6) For internal ports, and XLe parallel ports this parameter is unused.')
lexhdwrPortTableParm7 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm7.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm7.setDescription('For all ports, this is the configured NPAP mode.')
lexhdwrPortTableParm8 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("npapInactive", 1), ("npapActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexhdwrPortTableParm8.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm8.setDescription('For all ports, this is the NPAP status.')
lexhdwrPortTableParm9 = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("printer", 1), ("fax", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lexhdwrPortTableParm9.setStatus('mandatory')
if mibBuilder.loadTexts: lexhdwrPortTableParm9.setDescription('For serial ports, this is the class of device attached. This variable is unused on the XLe adapters.')
lexmacType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacType.setStatus('mandatory')
if mibBuilder.loadTexts: lexmacType.setDescription('A textual representation of network medium to which the network adapter is attached (e.g. Ethernet).')
lexmacSpeed = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: lexmacSpeed.setDescription('The speed, in bits per second, of the network medium to which the network adapter is attached.')
lexmacConnType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("stp", 3), ("utp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacConnType.setStatus('mandatory')
if mibBuilder.loadTexts: lexmacConnType.setDescription('The connection type by which the network adapter is connected to the network medium.')
lexmacUAA = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacUAA.setStatus('mandatory')
if mibBuilder.loadTexts: lexmacUAA.setDescription("The network adapter's universally administered network address.")
lexmacLAA = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 7, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lexmacLAA.setStatus('mandatory')
if mibBuilder.loadTexts: lexmacLAA.setDescription("The network adapter's locally administered network address. A value of all zeros indicates that the LAA is not in use.")
lextrapDestNum = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextrapDestNum.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapDestNum.setDescription('The maximum number of IP trap destinations supported by this network adapter.')
lextrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 641, 1, 8, 2), )
if mibBuilder.loadTexts: lextrapDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapDestTable.setDescription('A table of IP trap destination configurations.')
lextrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "lextrapDestIndex"))
if mibBuilder.loadTexts: lextrapDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapDestEntry.setDescription('An entry containing an IP trap destination configuration.')
lextrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lextrapDestIndex.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapDestIndex.setDescription('A unique value used by the adapter to identify IP trap destinations.')
lextrapDestIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextrapDestIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapDestIPAddr.setDescription('The IP address of the trap destination.')
lextrapDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextrapDestMask.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapDestMask.setDescription('The trap mask for the trap destination. It is implemented as a bitmap specifying a mask of intervention required conditions for which the adapter should send trap messages. Setting a bit to 1 enables the corresponding trap. A value of 1023 will cause the adapter to send traps for all intervention required conditions. The bitmap is defined below: Bit Value Condition --- ----- -------------------------- 0 1 Output hopper full 1 2 Load Paper 2 4 Paper Jam 3 8 Toner Low 4 16 Service Required 5 32 Disk Error 6 64 Cover Opened 7 128 Page Complexity Error 8 256 Offline 9 512 Printer MIB (RFC 1759)')
lextrapIPTrapType = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multiplexed", 1), ("individual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lextrapIPTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: lextrapIPTrapType.setDescription('The type of SNMP over IP traps that will be sent by the adapter. Setting this variable to multiplexed(1) configures all intervention required conditions to send an irCondition trap (specific trap number 1) and for the clearing of intervention required conditions to send an irCleared trap (specific trap number 0). Setting this variable to individual(2) causes each intervention required condition to send its corresponding trap (specific traps numbered 2 through 10) and for the clearing of intervention required conditions to cause an irClearedTypeII trap (specific trap number 11). See the Trap Definitions Group for more information. Type 1 is the default for IP.')
timeReset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeReset.setStatus('mandatory')
if mibBuilder.loadTexts: timeReset.setDescription("A control for initiating an update of the system time and date using the specified timeSource. Setting the variable to reset will cause the system to update it's time and date using the specified time source. See timeSource.")
timeSource = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ntp", 2), ("netware", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSource.setStatus('mandatory')
if mibBuilder.loadTexts: timeSource.setDescription('The source for setting the system time and date. If this variable is changed, the time must be reset before the change will have an effect. See timeReset.')
timeUTCOffset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-720, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeUTCOffset.setStatus('mandatory')
if mibBuilder.loadTexts: timeUTCOffset.setDescription('The offset in minutes from UTC (formerly GMT) of local time. Use a negative value if West of UTC. Use a positive value if East of UTC.')
timeDSTEnable = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTEnable.setStatus('mandatory')
if mibBuilder.loadTexts: timeDSTEnable.setDescription('The status of whether automatic Daylight Savings Time adjust is enabled. See timeDSTStartDate, timeDSTEndDate, and timeDSTOffset for configuration options.')
timeDSTStartDate = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: timeDSTStartDate.setDescription('A textual representation of the day and time the Daylight Savings Time adjust should start if enabled (see timeDSTEnable). The format of string is as follows: Byte Meaning ---- ------------------------------------------------------------ 0 Which occurence in the month of the day specified in byte 1. Valid values are: F => First Occurence 1 => First Occurence 2 => Second Occurence 3 => Third Occurence 4 => Fourth Occurence 5 => Fifth Occurence L => Last Occurence 1 A 1-digit field indicating the day of week (0=Sun..6=Sat) 2-3 A 2-digit field indicating the month. 4-5 A 2-digit field indicating the hour 6-7 A 2-digit field indicating the minute 8-9 A 2-digit field indicating the second The default setting is F004020000 which corresponds to the first Sunday of April at 2:00:00 am.')
timeDSTEndDate = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTEndDate.setStatus('mandatory')
if mibBuilder.loadTexts: timeDSTEndDate.setDescription('A textual representation of the day and time the Daylight Savings Time adjust should end if enabled (see timeDSTEnable). The format of string is as defined for timeDSTStartDate The default setting is L010020000 which corresponds to the last Sunday of October at 2:00:00 am.')
timeDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeDSTOffset.setStatus('mandatory')
if mibBuilder.loadTexts: timeDSTOffset.setDescription('The offset in minutes that should be applied to local time during Daylight Savings Time.')
timeServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: timeServerAddress.setDescription('If the specified time source is NTP (see timeSource), this is the IP address of the NTP server to use. Otherwise, the value is ignored.')
timeServerName = MibScalar((1, 3, 6, 1, 4, 1, 641, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServerName.setStatus('mandatory')
if mibBuilder.loadTexts: timeServerName.setDescription('If the specified time source is NTP (see timeSource), and the NTP server address is not set (0.0.0.0), this is the DNS domainname of the NTP server. If the specified time source is Netware (see timeSource), the is the name of Netware server. Otherwise, the value is ignored.')
prtgenNumber = MibScalar((1, 3, 6, 1, 4, 1, 641, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenNumber.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenNumber.setDescription('The number of printers, regardless of their current state, available to this adapter.')
prtgenInfoTable = MibTable((1, 3, 6, 1, 4, 1, 641, 2, 1, 2), )
if mibBuilder.loadTexts: prtgenInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenInfoTable.setDescription("A table of the network adapter's attached printer information.")
prtgenInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "prtgenPrinterIndex"))
if mibBuilder.loadTexts: prtgenInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenInfoEntry.setDescription('An entry containing attached printer information.')
prtgenPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenPrinterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenPrinterIndex.setDescription('A unique value used by the network adapter to identify attached printers.')
prtgenPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenPrinterName.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenPrinterName.setDescription('A textual description of the make and model of the attached printer, if known.')
prtgenPeripheralID = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenPeripheralID.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenPeripheralID.setDescription('A textual description of the peripheral ID of the attached printer as defined by the IEEE 1284 standard, if known.')
prtgenCodeRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenCodeRevision.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenCodeRevision.setDescription('A textual representation of the code revision level of the attached printer, if known.')
prtgenResValue = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenResValue.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenResValue.setDescription('This object is currently unused and reserved.')
prtgenSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenSerialNo.setDescription('A textual representation of the serial number of the attached printer, if known.')
prtgenStatusTable = MibTable((1, 3, 6, 1, 4, 1, 641, 2, 1, 3), )
if mibBuilder.loadTexts: prtgenStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusTable.setDescription("A table of the network adapter's attached printer status.")
prtgenStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "prtgenStatPrinterIndex"))
if mibBuilder.loadTexts: prtgenStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusEntry.setDescription('An entry containing attached printer status.')
prtgenStatPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatPrinterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatPrinterIndex.setDescription('A unique value used by the network adapter to identify attached printers.')
prtgenStatusIRC = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusIRC.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusIRC.setDescription("The printer's current intervention required code.")
prtgenStatusOutHopFull = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notFull", 1), ("full", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusOutHopFull.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusOutHopFull.setDescription("The printer's current output hopper status.")
prtgenStatusInputEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notEmpty", 1), ("empty", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusInputEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusInputEmpty.setDescription("The printer's current active input paper tray status.")
prtgenStatusPaperJam = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notJammed", 1), ("jamed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusPaperJam.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusPaperJam.setDescription("The printer's current paper path status.")
prtgenStatusTonerError = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTonerError", 1), ("tonerError", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusTonerError.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusTonerError.setDescription("The printer's current toner supply status.")
prtgenStatusSrvcReqd = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noServiceRequired", 1), ("serviceRequired", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusSrvcReqd.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusSrvcReqd.setDescription("The printer's current service required status.")
prtgenStatusDiskError = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDiskError", 1), ("diskError", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusDiskError.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusDiskError.setDescription("The printer's current disk sub-system status.")
prtgenStatusCoverOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCoverOpen", 1), ("coverOpen", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusCoverOpen.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusCoverOpen.setDescription("The printer's current cover status.")
prtgenStatusPageComplex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noComplexPage", 1), ("complexPage", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusPageComplex.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusPageComplex.setDescription("The printer's current complex page status.")
prtgenStatusLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusLineStatus.setDescription("The printer's current online/offline status.")
prtgenStatusBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notBusy", 1), ("busy", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusBusy.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusBusy.setDescription("The printer's current bust status.")
prtgenStatusWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notWaiting", 1), ("waiting", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusWaiting.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusWaiting.setDescription("The printer's current waiting status.")
prtgenStatusWarming = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notWarming", 1), ("warming", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusWarming.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusWarming.setDescription("The printer's current warming status.")
prtgenStatusPrinting = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPrinting", 1), ("printing", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtgenStatusPrinting.setStatus('mandatory')
if mibBuilder.loadTexts: prtgenStatusPrinting.setDescription("The printer's current printing status.")
faxNumber = MibScalar((1, 3, 6, 1, 4, 1, 641, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxNumber.setStatus('mandatory')
if mibBuilder.loadTexts: faxNumber.setDescription('The number of fax modems attached to the adapter.')
faxTable = MibTable((1, 3, 6, 1, 4, 1, 641, 3, 1, 2), )
if mibBuilder.loadTexts: faxTable.setStatus('mandatory')
if mibBuilder.loadTexts: faxTable.setDescription("A table of the network adapter's attached fax modems configuration data.")
faxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1), ).setIndexNames((0, "LEXMARK-PVT-MIB", "faxIndex"))
if mibBuilder.loadTexts: faxEntry.setStatus('mandatory')
if mibBuilder.loadTexts: faxEntry.setDescription('An entry containing attached fax modem configuration data.')
faxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: faxIndex.setDescription('A unique value used by the adapter to identify fax ports.')
faxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(145, 146, 147, 148, 149))).clone(namedValues=NamedValues(("serial1", 145), ("serial2", 146), ("serial3", 147), ("serial4", 148), ("serial5", 149)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxPort.setStatus('mandatory')
if mibBuilder.loadTexts: faxPort.setDescription("The network adapter's port to which this modem is attached.")
faxAdapterCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxAdapterCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: faxAdapterCapabilities.setDescription('A bitmap representing the fax capabilities of the network adapter. Bit Value Capabilities --- ------ -------------------- 0 1 Fine Resolution 1 2 2D Encoding 2 4 T6 Encoding 3 8 ECM 4 16 Binary File Transfer 5 32 300 x 300 6 64 400 x 400 7 128 200 x 400 8 256 Uncompressed Mode 9 512 255mm Width 10 1024 303mm Width 11 2048 Legal Length 12 4096 Unlimited Length 13 8192 V.17 (14400) 14 16384 V.33 (14400) 15 32768 V.29 and V.27 (9600) 16 65536 V.29 (9600) 17 131072 V.27 (4800) 18 262144 V27 (2400)')
faxModemCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxModemCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: faxModemCapabilities.setDescription('A bitmap representing the fax capabilities of the attached modem. Bit Value Capabilities --- ------ -------------------- 0 1 Fine Resolution 1 2 2D Encoding 2 4 T6 Encoding 3 8 ECM 4 16 Binary File Transfer 5 32 300 x 300 6 64 400 x 400 7 128 200 x 400 8 256 Uncompressed Mode 9 512 255mm Width 10 1024 303mm Width 11 2048 Legal Length 12 4096 Unlimited Length 13 8192 V.17 (14400) 14 16384 V.33 (14400) 15 32768 V.29 and V.27 (9600) 16 65536 V.29 (9600) 17 131072 V.27 (4800) 18 262144 V27 (2400)')
faxSelectedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxSelectedCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: faxSelectedCapabilities.setDescription('A bitmap representing the user selected fax capabilities. Bit Value Capabilities --- ------ -------------------- 0 1 Fine Resolution 1 2 2D Encoding 2 4 T6 Encoding 3 8 ECM 4 16 Binary File Transfer 5 32 300 x 300 6 64 400 x 400 7 128 200 x 400 8 256 Uncompressed Mode 9 512 255mm Width 10 1024 303mm Width 11 2048 Legal Length 12 4096 Unlimited Length 13 8192 V.17 (14400) 14 16384 V.33 (14400) 15 32768 V.29 and V.27 (9600) 16 65536 V.29 (9600) 17 131072 V.27 (4800) 18 262144 V27 (2400)')
faxActiveCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: faxActiveCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: faxActiveCapabilities.setDescription('A bitmap representing the active fax capabilities. This is the logical and of faxAdapterCapabilities, faxModemCapabilities, and faxSelectedCapabilities. Bit Value Capabilities --- ------ -------------------- 0 1 Fine Resolution 1 2 2D Encoding 2 4 T6 Encoding 3 8 ECM 4 16 Binary File Transfer 5 32 300 x 300 6 64 400 x 400 7 128 200 x 400 8 256 Uncompressed Mode 9 512 255mm Width 10 1024 303mm Width 11 2048 Legal Length 12 4096 Unlimited Length 13 8192 V.17 (14400) 14 16384 V.33 (14400) 15 32768 V.29 and V.27 (9600) 16 65536 V.29 (9600) 17 131072 V.27 (4800) 18 262144 V27 (2400)')
faxIDString = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxIDString.setStatus('mandatory')
if mibBuilder.loadTexts: faxIDString.setDescription('The textual identification that is used to identify this fax device. This text is sent to a connected fax device at the start of a call.')
faxInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxInitString.setStatus('mandatory')
if mibBuilder.loadTexts: faxInitString.setDescription('The commands used be the network adapter to initialize an attached modem.')
faxNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxNumberRings.setStatus('mandatory')
if mibBuilder.loadTexts: faxNumberRings.setDescription('The number of rings that the network adapter should wait before answering.')
faxScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scaleToFit", 1), ("cropToFit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxScaling.setStatus('mandatory')
if mibBuilder.loadTexts: faxScaling.setDescription("The mechanism used to resolve size descrepancies between the received fax the printer's available forms.")
faxBinaryEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("taggedBinary", 1), ("ascii85", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxBinaryEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: faxBinaryEncoding.setDescription('The encoding used when sending fax data to the attached printer.')
faxPrinterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(129, 130, 255))).clone(namedValues=NamedValues(("parallel1", 129), ("parallel2", 130), ("firstAvail", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxPrinterPort.setStatus('mandatory')
if mibBuilder.loadTexts: faxPrinterPort.setDescription('The port (printer) to which received faxes should be printed.')
faxInputTray = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxInputTray.setStatus('mandatory')
if mibBuilder.loadTexts: faxInputTray.setDescription('The input tray from which received faxes should be printed. The value 255 indicates printer default.')
faxOutputBin = MibTableColumn((1, 3, 6, 1, 4, 1, 641, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxOutputBin.setStatus('mandatory')
if mibBuilder.loadTexts: faxOutputBin.setDescription('The output bin to which received faxes should be printed. The value 255 indicates printer default.')
irCleared = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,0)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irCleared.setDescription('The condition on the printer has been cleared.')
irCondition = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,1)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irCondition.setDescription('An error condition exists on the printer')
irOutputFull = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,2)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irOutputFull.setDescription('The printers output bin is full.')
irLoadPaper = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,3)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irLoadPaper.setDescription('Load paper on the printer')
irPaperJam = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,4)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irPaperJam.setDescription('Paper jam on the printer.')
irTonerLow = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,5)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irTonerLow.setDescription('Toner low on the printer')
irServiceReq = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,6)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irServiceReq.setDescription('Service required on the printer')
irDiskErr = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,7)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irDiskErr.setDescription('Disk error on the printer')
irCoverOpen = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,8)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irCoverOpen.setDescription('Cover open on the printer')
irPageComplexity = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,9)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irPageComplexity.setDescription('Page complexity error on the printer')
irOffline = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,10)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irOffline.setDescription('The printer is offline')
irClearedTypeII = NotificationType((1, 3, 6, 1, 4, 1, 641, 1) + (0,11)).setObjects(("LEXMARK-PVT-MIB", "prtgenStatusIRC"))
if mibBuilder.loadTexts: irClearedTypeII.setDescription('The condition on the printer has been cleared.')
mibBuilder.exportSymbols("LEXMARK-PVT-MIB", prtgenPrinterName=prtgenPrinterName, lextalkAddress=lextalkAddress, prtgenCodeRevision=prtgenCodeRevision, lexhttpLinkTableURL=lexhttpLinkTableURL, faxScaling=faxScaling, faxActiveCapabilities=faxActiveCapabilities, lextcpBootpEnable=lextcpBootpEnable, fax=fax, attachment=attachment, lextalkName=lextalkName, opsysProtocols=opsysProtocols, prtgenInfoTable=prtgenInfoTable, lexhttpBytesRemaining=lexhttpBytesRemaining, lexipxConnSrvrIndex=lexipxConnSrvrIndex, irCoverOpen=irCoverOpen, lexdhcpHostname=lexdhcpHostname, lexhdwrNumPorts=lexhdwrNumPorts, lexhdwrPortTableParm7=lexhdwrPortTableParm7, lexdhcpWinsServer=lexdhcpWinsServer, prtgenPeripheralID=prtgenPeripheralID, lexipxPrefSrvrName=lexipxPrefSrvrName, opsysCardEC=opsysCardEC, lexhdwrPortTableParm3=lexhdwrPortTableParm3, lexhttpEnable=lexhttpEnable, lexipxPortInfoBannerPage=lexipxPortInfoBannerPage, lexmacConnType=lexmacConnType, lextcpAddressServ=lextcpAddressServ, irPaperJam=irPaperJam, prtgenStatusEntry=prtgenStatusEntry, prtgenPrinterIndex=prtgenPrinterIndex, faxInputTray=faxInputTray, irDiskErr=irDiskErr, lexipxConnSrvrPSConnID=lexipxConnSrvrPSConnID, lexipxPortInfoPollIntvl=lexipxPortInfoPollIntvl, lexipxPrefSrvrIndex=lexipxPrefSrvrIndex, irTonerLow=irTonerLow, prtgenInfoEntry=prtgenInfoEntry, lexhttpLinkTableEntry=lexhttpLinkTableEntry, adapter=adapter, faxTable=faxTable, lexhttpLinkTable=lexhttpLinkTable, lexipxTrapMask=lexipxTrapMask, printer=printer, lexmacUAA=lexmacUAA, prtgenStatusTonerError=prtgenStatusTonerError, timeDSTEnable=timeDSTEnable, lexhdwrPortTableType=lexhdwrPortTableType, lexmacLAA=lexmacLAA, lexipxPortInfoTable=lexipxPortInfoTable, lexhttpResetLinks=lexhttpResetLinks, lexipxNumPrefServers=lexipxNumPrefServers, prtgenStatusInputEmpty=prtgenStatusInputEmpty, opsysRAMSize=opsysRAMSize, lexipxGSQ=lexipxGSQ, timeUTCOffset=timeUTCOffset, lexipxConnSrvrEntry=lexipxConnSrvrEntry, irCleared=irCleared, lexipxNetNumber=lexipxNetNumber, lexhdwrPortTableEntry=lexhdwrPortTableEntry, lextcpNumNPAPservers=lextcpNumNPAPservers, timeDSTOffset=timeDSTOffset, prtgenStatusWarming=prtgenStatusWarming, lexipx=lexipx, lexdhcpLeaseLength=lexdhcpLeaseLength, prtgenResValue=prtgenResValue, lexhdwrPortTable=lexhdwrPortTable, lextcpActivated=lextcpActivated, lextrapDestIndex=lextrapDestIndex, lexdhcpDNSServer=lexdhcpDNSServer, prtgenStatusDiskError=prtgenStatusDiskError, lexipxFrameType=lexipxFrameType, prtgenStatusCoverOpen=prtgenStatusCoverOpen, faxNumberRings=faxNumberRings, prtgenStatusOutHopFull=prtgenStatusOutHopFull, lexipxTrapType=lexipxTrapType, lextrap=lextrap, lexhttpConfigEnable=lexhttpConfigEnable, lexipxTrapIndex=lexipxTrapIndex, faxIndex=faxIndex, irLoadPaper=irLoadPaper, lexdhcp=lexdhcp, irCondition=irCondition, lexhttpLinkTableIndex=lexhttpLinkTableIndex, lextalkType=lextalkType, lextrapDestMask=lextrapDestMask, faxIDString=faxIDString, prtgenStatPrinterIndex=prtgenStatPrinterIndex, lexhdwrPortTableParm6=lexhdwrPortTableParm6, faxSelectedCapabilities=faxSelectedCapabilities, irOffline=irOffline, lextrapDestIPAddr=lextrapDestIPAddr, opsysCardPartNo=opsysCardPartNo, prtgenStatusPageComplex=prtgenStatusPageComplex, lexipxPortInfoEnable=lexipxPortInfoEnable, lexlink=lexlink, lexmacSpeed=lexmacSpeed, irServiceReq=irServiceReq, prtgenStatusSrvcReqd=prtgenStatusSrvcReqd, lexhttp=lexhttp, faxEntry=faxEntry, lexhdwrPortTableParm8=lexhdwrPortTableParm8, opsysCurrentJobEntry=opsysCurrentJobEntry, faxBinaryEncoding=faxBinaryEncoding, lexlinkNickname=lexlinkNickname, opsysCurrentJob=opsysCurrentJob, prtgenStatusIRC=prtgenStatusIRC, lextrapIPTrapType=lextrapIPTrapType, lexipxTrapEntry=lexipxTrapEntry, lexdhcpWinsStatus=lexdhcpWinsStatus, lexipxConnSrvrTable=lexipxConnSrvrTable, opsysROMSize=opsysROMSize, lexhdwrPortTableParm1=lexhdwrPortTableParm1, timeReset=timeReset, lexipxTrapNodeAddress=lexipxTrapNodeAddress, faxAdapterCapabilities=faxAdapterCapabilities, faxPrinterPort=faxPrinterPort, lexdhcpDhcpEnable=lexdhcpDhcpEnable, lexipxPrefSrvrTable=lexipxPrefSrvrTable, prtgenStatusPrinting=prtgenStatusPrinting, lexhdwr=lexhdwr, lexhdwrPortTableParm2=lexhdwrPortTableParm2, timeServerAddress=timeServerAddress, opsysCodeRev=opsysCodeRev, lexipxConnSrvrNet=lexipxConnSrvrNet, lexipxConnSrvrName=lexipxConnSrvrName, lexipxPrefSrvrEntry=lexipxPrefSrvrEntry, lexipxConnSrvrNode=lexipxConnSrvrNode, lexhdwrPortTableParm4=lexhdwrPortTableParm4, time=time, lexipxConnSrvrConnNum=lexipxConnSrvrConnNum, lexipxServerMode=lexipxServerMode, lexmark=lexmark, lexipxActivated=lexipxActivated, faxOutputBin=faxOutputBin, opsysCurrentJobTable=opsysCurrentJobTable, lexipxPortInfoIndex=lexipxPortInfoIndex, lexipxLoginName=lexipxLoginName, lexipxSAPMode=lexipxSAPMode, timeSource=timeSource, lexipxTrapNetworkAddress=lexipxTrapNetworkAddress, prtgenStatusWaiting=prtgenStatusWaiting, faxModemCapabilities=faxModemCapabilities, opsysAdapterCapabilities=opsysAdapterCapabilities, lextalk=lextalk, prtgen=prtgen, irPageComplexity=irPageComplexity, opsysAdapterName=opsysAdapterName, opsysTimeToReset=opsysTimeToReset, lexdhcpAddressSource=lexdhcpAddressSource, lexhttpLinkTableLabel=lexhttpLinkTableLabel, prtgenStatusTable=prtgenStatusTable, lexhttpLinkTableStatus=lexhttpLinkTableStatus, lexhdwrPortTableIndex=lexhdwrPortTableIndex, prtgenNumber=prtgenNumber, irClearedTypeII=irClearedTypeII, prtgenSerialNo=prtgenSerialNo, lextcpNPAPserverAddress=lextcpNPAPserverAddress, lextcpNPAPserversEntry=lextcpNPAPserversEntry, lexmacType=lexmacType, opsysCurrentJobString=opsysCurrentJobString, lextcpNPAPserversTable=lextcpNPAPserversTable, opsysCurrentJobEntryIndex=opsysCurrentJobEntryIndex, lexhttpNumLinks=lexhttpNumLinks, lexdhcpTimetoExpire=lexdhcpTimetoExpire, timeDSTStartDate=timeDSTStartDate, irOutputFull=irOutputFull, timeDSTEndDate=timeDSTEndDate, opsysJobTimeout=opsysJobTimeout, lextalkActivated=lextalkActivated, opsysROMType=opsysROMType, lexhdwrPortTableParm9=lexhdwrPortTableParm9, opsysNVRAMSize=opsysNVRAMSize, lexipxPortInfoEntry=lexipxPortInfoEntry, lexipxNumPorts=lexipxNumPorts, faxNumber=faxNumber, faxPort=faxPort, lexmac=lexmac, lexipxConnSrvrConnId=lexipxConnSrvrConnId, lextalkZone=lextalkZone, prtgenStatusBusy=prtgenStatusBusy, opsysDeviceType=opsysDeviceType, lextcp=lextcp, lextrapDestTable=lextrapDestTable, lextrapDestEntry=lextrapDestEntry, timeServerName=timeServerName, lexdhcpRarpEnable=lexdhcpRarpEnable, opsys=opsys, lexipxTrapTable=lexipxTrapTable, prtgenStatusPaperJam=prtgenStatusPaperJam, lexlinkActivated=lexlinkActivated, prtgenStatusLineStatus=prtgenStatusLineStatus, lextrapDestNum=lextrapDestNum, lexhdwrPortTableParm5=lexhdwrPortTableParm5, lextcpNPAPserverIndex=lextcpNPAPserverIndex, faxInitString=faxInitString)
