#
# PySNMP MIB module Wellfleet-NHRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-NHRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, iso, Counter64, Bits, Unsigned32, NotificationType, ObjectIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "iso", "Counter64", "Bits", "Unsigned32", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfNhrpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfNhrpGroup")
wfNhrpNetTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1), )
if mibBuilder.loadTexts: wfNhrpNetTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNetTable.setDescription('A table containing entries for each combination of a layer 2 network and a layer 3 protocol. Currently, IP over Frame Relay and IP over ATM is supported.')
wfNhrpNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1), ).setIndexNames((0, "Wellfleet-NHRP-MIB", "wfNhrpLayer2Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpLayer3Type"))
if mibBuilder.loadTexts: wfNhrpNetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNetEntry.setDescription('Information about a particular NHRP instance.')
wfNhrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDelete.setDescription('Create/Delete this NHRP instance ')
wfNhrpLayer2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpLayer2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpLayer2Type.setDescription('Type of layer 2 Network.')
wfNhrpLayer3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpLayer3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpLayer3Type.setDescription('Type of layer 3 protocol.')
wfNhrpNHReqPath = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routed", 1), ("defNHS", 2))).clone('routed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHReqPath.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHReqPath.setDescription('Path NHC will attempt first to look-up destination. In case of routed path, if dest. is not found it will search Default NHS list also.')
wfNhrpClientDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpClientDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientDisable.setDescription(' Enable/Disable NHRP client functionality. ')
wfNhrpClientRegInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpClientRegInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientRegInterval.setDescription('Client registration period. Every wfNhrpRegInterval seconds, CREG gate will send registration request to refresh/update NH cache. It should always be less than wfNhrpNHCacheHoldTime')
wfNhrpClientHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpClientHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientHoldTime.setDescription('Time (seconds) for which client info is valid.')
wfNhrpClientReqTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpClientReqTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientReqTimeout.setDescription(' Client request timeout in seconds ')
wfNhrpClientReqRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpClientReqRetry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientReqRetry.setDescription(' Number of times to retry a given client request before returning an error. ')
wfNhrpClientMaxPendRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpClientMaxPendRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientMaxPendRequests.setDescription('Maximum Number of pending requests for client.')
wfNhrpServerDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerDisable.setDescription(' Enable/Disable NHRP server functionality. ')
wfNhrpServerFwdDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerFwdDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerFwdDisable.setDescription(' Enable/Disable NHRP server request forwarding function. ')
wfNhrpServerMaxNhEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerMaxNhEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerMaxNhEntries.setDescription('maximum number of next hop entries to keep. If the NH Resolution Reply message has more entries, last ones will be discarded.')
wfNhrpServerMaxPendRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerMaxPendRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerMaxPendRequests.setDescription('Maximum Number of pending requests for servers.')
wfNhrpServerUseBgp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("notuse", 2))).clone('notuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerUseBgp.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerUseBgp.setDescription('Use BGP to find next hop if destination address is not in cache.')
wfNhrpServerUseDns = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("notuse", 2))).clone('notuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerUseDns.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerUseDns.setDescription('Use DNS to translate addresses and find QoS for next hop resolutions.')
wfNhrpServerDnsProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32550)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerDnsProxyPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerDnsProxyPort.setDescription('DNS proxy port for QOS translation queries')
wfNhrpServerOverrideNbmaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerOverrideNbmaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerOverrideNbmaAddr.setDescription('Override NBMA addresses in client registration messages.')
wfNhrpBogusNbmaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('NOADDRESS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpBogusNbmaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpBogusNbmaAddr.setDescription('Value used to determine if NBMA address in client request is valid.')
wfNhrpNhCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNhCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNhCacheSize.setDescription('Maximum number of next hop entries to be cached')
wfNhrpQosCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpQosCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpQosCacheSize.setDescription('Maximum number of socketpair to filter/flow spec entries to be cached')
wfNhrpAddrXlateCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpAddrXlateCacheSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpAddrXlateCacheSize.setDescription('Maximum number of L3-to-L2 address mapping entries to be cached')
wfNhrpServerLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerLoadBalance.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerLoadBalance.setDescription('Enable/disable round-robin cycling of next hop entries to cause a load-balancing effect.')
wfNhrpServerNegativeCaching = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerNegativeCaching.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerNegativeCaching.setDescription('Enable/disable negative caching of DNS records.')
wfNhrpServerNegativeTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpServerNegativeTTL.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerNegativeTTL.setDescription('Time in seconds for negative caching of DNS records.')
wfNhrpDebugLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDebugLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDebugLevel.setDescription('Minimum level of debug messages to log.')
wfNhrpStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notreset", 1), ("reset", 2))).clone('notreset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpStatReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpStatReset.setDescription('Reset all NHRP client and server stats.')
wfNhrpNhCacheSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNhCacheSequence.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNhCacheSequence.setDescription('Sequence number for Next Hop Cache updates.')
wfNhrpNhCacheNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNhCacheNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNhCacheNumEntries.setDescription('Current number of Next Hop Cache entries.')
wfNhrpQosCacheNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpQosCacheNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpQosCacheNumEntries.setDescription('Current number of entries in QOS Cache.')
wfNhrpAddrXlateCacheNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpAddrXlateCacheNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpAddrXlateCacheNumEntries.setDescription('Current number of entries in Address Translation Cache.')
wfNhrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2), )
if mibBuilder.loadTexts: wfNhrpIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfTable.setDescription(' WF_NHRP_INTERFACE_Table - NHRP This tabulates the interfaces within an nhrp protocol group. All interfaces are indexed according to their Circuit Number. ')
wfNhrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1), ).setIndexNames((0, "Wellfleet-NHRP-MIB", "wfNhrpIfLayer2Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpIfLayer3Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpIfCct"))
if mibBuilder.loadTexts: wfNhrpIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfEntry.setDescription(' Nhrp interface entries. ')
wfNhrpIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfDelete.setDescription(' Creation and deletion flag for this record. When set, it will cause this entry to be deleted from the MIB. ')
wfNhrpIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfDisable.setDescription(' Enable/Disable parameter. A disabled interface will never be selected as the active interface for a circuit. ')
wfNhrpIfVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpIfVCType.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfVCType.setDescription('Type of VC, NHC will setup, if no encaps gate exist for the given VCid, when needed.')
wfNhrpIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 1023))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 1023)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfCct.setDescription('The number of the circuit to which the interface belongs.')
wfNhrpIfLayer2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpIfLayer2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfLayer2Type.setDescription('Type of layer 2 Network for this instance.')
wfNhrpIfLayer3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpIfLayer3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfLayer3Type.setDescription('Type of layer 3 Protocol for this instance.')
wfNhrpIfPktsXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpIfPktsXmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpIfPktsXmt.setDescription(' The number of NHRP packets sent on this interface. ')
wfNhrpDefNhsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3), )
if mibBuilder.loadTexts: wfNhrpDefNhsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsTable.setDescription("A list of default NHS's to contact with request messages.")
wfNhrpDefNhsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1), ).setIndexNames((0, "Wellfleet-NHRP-MIB", "wfNhrpDefNhsLayer2Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpDefNhsLayer3Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpDefNhsIndex"))
if mibBuilder.loadTexts: wfNhrpDefNhsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsEntry.setDescription('Information pertaining to each default NHS which a client may contact. ')
wfNhrpDefNhsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsDelete.setDescription(' Creation and deletion flag for this record. When set, it will cause this entry to be deleted from the MIB. ')
wfNhrpDefNhsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsDisable.setDescription(' Enable/Disable parameter. A disabled NHS will never be selected for sending requests. ')
wfNhrpDefNhsCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 1023))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 1023)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsCct.setDescription(' The identifier of the circuit on which requests are sent to NHS. ')
wfNhrpDefNhsVcid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsVcid1.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsVcid1.setDescription(' The virtual circuit ID on which requests are sent to NHS. Vcid1 = The Dlci number for Frame Relay, the VPI for ATM Range = {0-255}')
wfNhrpDefNhsVcid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsVcid2.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsVcid2.setDescription(' The virtual circuit ID on which requests are sent to NHS. Vcid2 = The VCI for ATM, NULL for Frame Relay. Range = {32-65535}')
wfNhrpDefNhsProtoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsProtoAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsProtoAddr.setDescription('Layer 3 protocol address for this default NHS. Currently only IP addresses are supported.')
wfNhrpDefNhsServingNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsServingNetworkAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsServingNetworkAddr.setDescription('Layer 3 network address of hosts served by this default NHS. Currently only IP type of network addresses are supported.')
wfNhrpDefNhsServingNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsServingNetworkMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsServingNetworkMask.setDescription('Layer 3 network address mask for range of hosts served by this default NHS. Currently only IP net mask is supported.')
wfNhrpDefNhsNbmaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpDefNhsNbmaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsNbmaAddr.setDescription('Layer 2 NBMA address for this default NHS. This will be valid only when SVCs needs to be created')
wfNhrpDefNhsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpDefNhsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsStatus.setDescription('Reachability Status of this NHS . ')
wfNhrpDefNhsLayer2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpDefNhsLayer2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsLayer2Type.setDescription('Type of layer 2 Network associated with this NHS.')
wfNhrpDefNhsLayer3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpDefNhsLayer3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsLayer3Type.setDescription(' Type of layer 3 Protocol associated with this NHS.')
wfNhrpDefNhsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpDefNhsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpDefNhsIndex.setDescription('Index used as priority of the NHS. That is, smallest index is selected first.')
wfNhrpNHCacheTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4), )
if mibBuilder.loadTexts: wfNhrpNHCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheTable.setDescription("A list of default NHS's to contact with request messages.")
wfNhrpNHCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1), ).setIndexNames((0, "Wellfleet-NHRP-MIB", "wfNhrpNHCacheSlot"), (0, "Wellfleet-NHRP-MIB", "wfNhrpNHCacheLayer2Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpNHCacheLayer3Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpNHCacheDestAddr"), (0, "Wellfleet-NHRP-MIB", "wfNhrpNHCacheDestAddrPrefixLen"), (0, "Wellfleet-NHRP-MIB", "wfNhrpNHCachePrefOrder"))
if mibBuilder.loadTexts: wfNhrpNHCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheEntry.setDescription(' NHRP Next Hop Cache Entry. ')
wfNhrpNHCacheSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNHCacheSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheSlot.setDescription('The slot number indexes the object')
wfNhrpNHCacheLayer2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNHCacheLayer2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheLayer2Type.setDescription('Type of layer 2 Network associated with this cache entry.')
wfNhrpNHCacheLayer3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNHCacheLayer3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheLayer3Type.setDescription('Type of layer 3 Protocol associated with this cache entry.')
wfNhrpNHCacheDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNHCacheDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheDestAddr.setDescription('protocol address of the destination')
wfNhrpNHCacheDestAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNHCacheDestAddrPrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheDestAddrPrefixLen.setDescription('destination address prifix length')
wfNhrpNHCachePrefOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpNHCachePrefOrder.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCachePrefOrder.setDescription('preference order for this entry')
wfNhrpNHCacheNhProtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCacheNhProtAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheNhProtAddr.setDescription('protocol address of the next hop')
wfNhrpNHCacheNhNbmaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCacheNhNbmaAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheNhNbmaAddr.setDescription('NBMA address of the next hop')
wfNhrpNHCacheHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 30, 200))).clone(namedValues=NamedValues(("minimum", 10), ("default", 30), ("maximum", 200))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCacheHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheHoldTime.setDescription('Time (seconds) for which client info is valid.')
wfNhrpNHCacheFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCacheFlags.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheFlags.setDescription('entry state flags')
wfNhrpNHCachePrefValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCachePrefValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCachePrefValue.setDescription('next hop preference value')
wfNhrpNHCacheMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCacheMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheMtu.setDescription('Max transmission unit for next hop')
wfNhrpNHCacheDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpNHCacheDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpNHCacheDelete.setDescription('Create/Delete this NHRP NH Cache Entry ')
wfNhrpTest = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5))
wfNhrpTestDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestDelete.setDescription('Create or Delete the Nhrp Test Base Record')
wfNhrpTestLayer2Type = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2))).clone('fr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestLayer2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestLayer2Type.setDescription('Identifies layer 2 protocol for which next hop is desired.')
wfNhrpTestLayer3Type = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1))).clone('ip')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestLayer3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestLayer3Type.setDescription('Identifies layer 3 protocol for which next hop is desired.')
wfNhrpTestSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 2))).clone(namedValues=NamedValues(("minimum", 1), ("maximum", 16), ("default", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestSlot.setDescription('Slot number on which test client initiates next hop requests.')
wfNhrpTestNHRPeriod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 5), Integer32().clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestNHRPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestNHRPeriod.setDescription('Time (msec) between next hop requests.')
wfNhrpTestNHRDestAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestNHRDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestNHRDestAddr.setDescription('Protocol address of destination for which next hop is desired.')
wfNhrpTestNHRDestPrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestNHRDestPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestNHRDestPrefix.setDescription('Prefix length of destination address for which next hop is desired.')
wfNhrpTestNHRReqOpt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestNHRReqOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestNHRReqOpt.setDescription('A bit field identifying next hop request options.')
wfNhrpTestNHRReqQOS = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestNHRReqQOS.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestNHRReqQOS.setDescription('QoS selector value for next hop requests.')
wfNhrpTestLogDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestLogDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestLogDisable.setDescription('Indicates whether reply data is written to log.')
wfNhrpTestRegCmd = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ignore", 1), ("register", 2), ("purge", 3), ("nhreq", 4), ("mpsResReq", 5), ("mpsResRply", 6), ("mpsPurgeReq", 7), ("mpsPurgeRply", 8), ("mpsAddMps", 9), ("mpsDelMps", 10))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegCmd.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegCmd.setDescription('Type of registration request to send (register or purge).')
wfNhrpTestRegNhsAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegNhsAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegNhsAddr.setDescription('Protocol address of NHS to send registration or purge request. If no address is given, the request will be sent to a default NHS.')
wfNhrpTestRegReqOpt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegReqOpt.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegReqOpt.setDescription('A bit field identifying register/purge options.')
wfNhrpTestRegClientHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegClientHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegClientHoldTime.setDescription('A bit field identifying register/purge hold time (seconds).')
wfNhrpTestRegClientPrefVal = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegClientPrefVal.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegClientPrefVal.setDescription('A bit field identifying register/purge preference value.')
wfNhrpTestRegClientMtu = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegClientMtu.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegClientMtu.setDescription('Max transmit unit size (octets) for this client.')
wfNhrpTestRegClientPrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegClientPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegClientPrefix.setDescription('Prefix length of client protocol address to register or purge.')
wfNhrpTestRegClientProto = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegClientProto.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegClientProto.setDescription('registered client protocol address.')
wfNhrpTestRegClientNbma = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestRegClientNbma.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestRegClientNbma.setDescription('registered client NBMA address. In case of MPS res. request this will be SRC_NBMA_ADDR')
wfNhrpTestMpsGH = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestMpsGH.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestMpsGH.setDescription('Gate handle of MPS to be registered')
wfNhrpTestMpsCct = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 5, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNhrpTestMpsCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpTestMpsCct.setDescription('Circuit# of MPS to be registered.')
wfNhrpClientStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6), )
if mibBuilder.loadTexts: wfNhrpClientStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatTable.setDescription('This table contains statistics collected by NHRP clients.')
wfNhrpClientStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1), ).setIndexNames((0, "Wellfleet-NHRP-MIB", "wfNhrpClientStatL2Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpClientStatL3Type"))
if mibBuilder.loadTexts: wfNhrpClientStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatEntry.setDescription('Statistics collected by NHRP clients. ')
wfNhrpClientStatL2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatL2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatL2Type.setDescription('The NHRP client layer 2 type for these statistics.')
wfNhrpClientStatL3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatL3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatL3Type.setDescription('The NHRP client layer 3 type for these statistics.')
wfNhrpClientStatTxResolveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatTxResolveReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatTxResolveReq.setDescription('The number of NHRP Resolution Requests transmitted by this client.')
wfNhrpClientStatRxResolveReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxResolveReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxResolveReplyAck.setDescription('The number of positively acknowledged NHRP Resolution Replies received by this client.')
wfNhrpClientStatRxResolveReplyNak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxResolveReplyNak.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxResolveReplyNak.setDescription('The number of NAKed NHRP Resolution Replies received by this client.')
wfNhrpClientStatTxRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatTxRegisterReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatTxRegisterReq.setDescription('The number of NHRP Registration Requests transmitted by this client.')
wfNhrpClientStatRxRegisterReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxRegisterReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxRegisterReplyAck.setDescription('The number of positively acknowledged NHRP Registration Replies received by this client.')
wfNhrpClientStatRxRegisterReplyNak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxRegisterReplyNak.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxRegisterReplyNak.setDescription('The number of NAKed NHRP Registration Replies received by this client.')
wfNhrpClientStatTxPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatTxPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatTxPurgeReq.setDescription('The number of NHRP Purge Requests transmitted by this client.')
wfNhrpClientStatRxPurgeReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxPurgeReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxPurgeReplyAck.setDescription('The number of positive NHRP Purge Replies received by this client.')
wfNhrpClientStatRxPurgeReplyNak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxPurgeReplyNak.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxPurgeReplyNak.setDescription('The number of NAKed NHRP Purge Replies received by this client.')
wfNhrpClientStatUnsolicitPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatUnsolicitPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatUnsolicitPurgeReq.setDescription("The number of unsolicited purge requests rec'd by this client")
wfNhrpClientStatTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatTxError.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatTxError.setDescription('The number of NHRP Error Indication packets transmitted by this client.')
wfNhrpClientStatRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRxError.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRxError.setDescription('The number of NHRP Error Indication packets received by this client.')
wfNhrpClientStatLocalError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatLocalError.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatLocalError.setDescription('The number of local errors which occured on this client.')
wfNhrpClientStatRetryReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpClientStatRetryReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpClientStatRetryReq.setDescription('The number of retries made for client requests by this client.')
wfNhrpServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7), )
if mibBuilder.loadTexts: wfNhrpServerStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTable.setDescription('Statistics collected by Next Hop Servers.')
wfNhrpServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1), ).setIndexNames((0, "Wellfleet-NHRP-MIB", "wfNhrpServerStatL2Type"), (0, "Wellfleet-NHRP-MIB", "wfNhrpServerStatL3Type"))
if mibBuilder.loadTexts: wfNhrpServerStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatEntry.setDescription('Statistics for a particular NHS. The statistics are broken into received (Rx), transmitted (Tx) and forwarded (Fw)...')
wfNhrpServerStatL2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatL2Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatL2Type.setDescription('The NHRP server layer 2 type for these statistics.')
wfNhrpServerStatL3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatL3Type.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatL3Type.setDescription('The NHRP server layer 3 type for these statistics.')
wfNhrpServerStatRxResolveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatRxResolveReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatRxResolveReq.setDescription('The number of NHRP Resolution Requests received by this server.')
wfNhrpServerStatTxResolveReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxResolveReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxResolveReplyAck.setDescription('The number of positively acknowledged NHRP Resolution Replies transmitted by this server.')
wfNhrpServerStatTxResolveReplyNak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxResolveReplyNak.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxResolveReplyNak.setDescription('The number of NAKed NHRP Resolution Replies transmitted by this server.')
wfNhrpServerStatRxRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatRxRegisterReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatRxRegisterReq.setDescription('The number of NHRP Registration Requests received by this server.')
wfNhrpServerStatTxRegisterReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxRegisterReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxRegisterReplyAck.setDescription('The number of positively acknowledge NHRP Registration Replies transmitted by this server.')
wfNhrpServerStatTxRegisterReplyNak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxRegisterReplyNak.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxRegisterReplyNak.setDescription('The number of NAKed NHRP Registration Replies transmitted by this server.')
wfNhrpServerStatRxPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatRxPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatRxPurgeReq.setDescription('The number of NHRP Purge Requests received by this server.')
wfNhrpServerStatTxPurgeReplyAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxPurgeReplyAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxPurgeReplyAck.setDescription('The number of positive NHRP Purge Replies transmitted by this server.')
wfNhrpServerStatTxPurgeReplyNak = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxPurgeReplyNak.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxPurgeReplyNak.setDescription('The number of NAKed NHRP Purge Replies transmitted by this server.')
wfNhrpServerStatRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatRxError.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatRxError.setDescription("The number of NHRP Error Indication packets received by this server with the error code 'Unrecognized Extension'.")
wfNhrpServerStatTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatTxError.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatTxError.setDescription("The number of NHRP Error Indication packets received by this server with the error code 'Subnetwork ID Mismatch'.")
wfNhrpServerStatFwdResolveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdResolveReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdResolveReq.setDescription('The number of NHRP Resolution Requests forwarded by this server acting as a transit NHS.')
wfNhrpServerStatFwdResolveReply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdResolveReply.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdResolveReply.setDescription('The number of NHRP Resolution Replies forwarded by this server acting as a transit NHS.')
wfNhrpServerStatFwdRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdRegisterReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdRegisterReq.setDescription('The number of NHRP Registration Requests forwarded by this server acting as a transit NHS.')
wfNhrpServerStatFwdRegisterReply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdRegisterReply.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdRegisterReply.setDescription('The number of NHRP Registration Replies forwarded by this server acting as a transit NHS.')
wfNhrpServerStatFwdPurgeReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdPurgeReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdPurgeReq.setDescription('The number of NHRP Purge Requests forwarded by this server acting as a transit NHS.')
wfNhrpServerStatFwdPurgeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdPurgeReply.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdPurgeReply.setDescription('The number of NHRP Purge Replies forwarded by this server acting as a transit NHS.')
wfNhrpServerStatFwdError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatFwdError.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatFwdError.setDescription('The number of NHRP Error Indication packets forwarded by this server acting as a transit NHS.')
wfNhrpServerStatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 23, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNhrpServerStatDropPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfNhrpServerStatDropPkts.setDescription('The number of packets dropped by this NHS.')
mibBuilder.exportSymbols("Wellfleet-NHRP-MIB", wfNhrpIfVCType=wfNhrpIfVCType, wfNhrpServerMaxNhEntries=wfNhrpServerMaxNhEntries, wfNhrpNHCacheNhNbmaAddr=wfNhrpNHCacheNhNbmaAddr, wfNhrpNHCacheDelete=wfNhrpNHCacheDelete, wfNhrpBogusNbmaAddr=wfNhrpBogusNbmaAddr, wfNhrpLayer2Type=wfNhrpLayer2Type, wfNhrpServerStatTxPurgeReplyNak=wfNhrpServerStatTxPurgeReplyNak, wfNhrpDefNhsStatus=wfNhrpDefNhsStatus, wfNhrpDefNhsProtoAddr=wfNhrpDefNhsProtoAddr, wfNhrpNHCacheLayer3Type=wfNhrpNHCacheLayer3Type, wfNhrpServerFwdDisable=wfNhrpServerFwdDisable, wfNhrpAddrXlateCacheSize=wfNhrpAddrXlateCacheSize, wfNhrpClientStatL2Type=wfNhrpClientStatL2Type, wfNhrpClientStatRxRegisterReplyNak=wfNhrpClientStatRxRegisterReplyNak, wfNhrpServerStatRxPurgeReq=wfNhrpServerStatRxPurgeReq, wfNhrpServerStatDropPkts=wfNhrpServerStatDropPkts, wfNhrpClientMaxPendRequests=wfNhrpClientMaxPendRequests, wfNhrpIfEntry=wfNhrpIfEntry, wfNhrpClientStatRxError=wfNhrpClientStatRxError, wfNhrpServerStatL3Type=wfNhrpServerStatL3Type, wfNhrpClientStatTxError=wfNhrpClientStatTxError, wfNhrpNHCacheDestAddr=wfNhrpNHCacheDestAddr, wfNhrpNHCacheMtu=wfNhrpNHCacheMtu, wfNhrpNHCachePrefOrder=wfNhrpNHCachePrefOrder, wfNhrpServerStatFwdPurgeReq=wfNhrpServerStatFwdPurgeReq, wfNhrpClientStatRxPurgeReplyAck=wfNhrpClientStatRxPurgeReplyAck, wfNhrpDefNhsDisable=wfNhrpDefNhsDisable, wfNhrpDefNhsLayer2Type=wfNhrpDefNhsLayer2Type, wfNhrpClientReqTimeout=wfNhrpClientReqTimeout, wfNhrpServerStatFwdResolveReq=wfNhrpServerStatFwdResolveReq, wfNhrpServerMaxPendRequests=wfNhrpServerMaxPendRequests, wfNhrpTestRegClientMtu=wfNhrpTestRegClientMtu, wfNhrpTestRegClientHoldTime=wfNhrpTestRegClientHoldTime, wfNhrpNHCacheHoldTime=wfNhrpNHCacheHoldTime, wfNhrpClientStatRxRegisterReplyAck=wfNhrpClientStatRxRegisterReplyAck, wfNhrpNHCacheNhProtAddr=wfNhrpNHCacheNhProtAddr, wfNhrpDefNhsServingNetworkMask=wfNhrpDefNhsServingNetworkMask, wfNhrpServerStatFwdRegisterReply=wfNhrpServerStatFwdRegisterReply, wfNhrpDefNhsNbmaAddr=wfNhrpDefNhsNbmaAddr, wfNhrpClientRegInterval=wfNhrpClientRegInterval, wfNhrpTest=wfNhrpTest, wfNhrpDefNhsLayer3Type=wfNhrpDefNhsLayer3Type, wfNhrpServerDnsProxyPort=wfNhrpServerDnsProxyPort, wfNhrpTestNHRDestPrefix=wfNhrpTestNHRDestPrefix, wfNhrpNhCacheNumEntries=wfNhrpNhCacheNumEntries, wfNhrpServerStatTxResolveReplyNak=wfNhrpServerStatTxResolveReplyNak, wfNhrpServerStatFwdResolveReply=wfNhrpServerStatFwdResolveReply, wfNhrpTestRegNhsAddr=wfNhrpTestRegNhsAddr, wfNhrpTestNHRPeriod=wfNhrpTestNHRPeriod, wfNhrpNhCacheSize=wfNhrpNhCacheSize, wfNhrpDefNhsCct=wfNhrpDefNhsCct, wfNhrpStatReset=wfNhrpStatReset, wfNhrpClientStatRxResolveReplyNak=wfNhrpClientStatRxResolveReplyNak, wfNhrpQosCacheSize=wfNhrpQosCacheSize, wfNhrpServerStatFwdPurgeReply=wfNhrpServerStatFwdPurgeReply, wfNhrpTestNHRReqOpt=wfNhrpTestNHRReqOpt, wfNhrpClientStatRetryReq=wfNhrpClientStatRetryReq, wfNhrpServerUseDns=wfNhrpServerUseDns, wfNhrpTestRegClientProto=wfNhrpTestRegClientProto, wfNhrpNetEntry=wfNhrpNetEntry, wfNhrpIfPktsXmt=wfNhrpIfPktsXmt, wfNhrpNHCacheDestAddrPrefixLen=wfNhrpNHCacheDestAddrPrefixLen, wfNhrpDelete=wfNhrpDelete, wfNhrpNetTable=wfNhrpNetTable, wfNhrpTestSlot=wfNhrpTestSlot, wfNhrpClientStatL3Type=wfNhrpClientStatL3Type, wfNhrpServerStatTxError=wfNhrpServerStatTxError, wfNhrpTestRegCmd=wfNhrpTestRegCmd, wfNhrpNHCachePrefValue=wfNhrpNHCachePrefValue, wfNhrpServerStatRxResolveReq=wfNhrpServerStatRxResolveReq, wfNhrpServerNegativeCaching=wfNhrpServerNegativeCaching, wfNhrpTestNHRDestAddr=wfNhrpTestNHRDestAddr, wfNhrpTestRegClientPrefVal=wfNhrpTestRegClientPrefVal, wfNhrpIfLayer2Type=wfNhrpIfLayer2Type, wfNhrpClientStatTxResolveReq=wfNhrpClientStatTxResolveReq, wfNhrpServerNegativeTTL=wfNhrpServerNegativeTTL, wfNhrpNHCacheEntry=wfNhrpNHCacheEntry, wfNhrpClientReqRetry=wfNhrpClientReqRetry, wfNhrpClientStatLocalError=wfNhrpClientStatLocalError, wfNhrpQosCacheNumEntries=wfNhrpQosCacheNumEntries, wfNhrpClientStatEntry=wfNhrpClientStatEntry, wfNhrpClientStatTxPurgeReq=wfNhrpClientStatTxPurgeReq, wfNhrpClientHoldTime=wfNhrpClientHoldTime, wfNhrpIfLayer3Type=wfNhrpIfLayer3Type, wfNhrpDefNhsDelete=wfNhrpDefNhsDelete, wfNhrpServerDisable=wfNhrpServerDisable, wfNhrpDefNhsEntry=wfNhrpDefNhsEntry, wfNhrpClientStatRxResolveReplyAck=wfNhrpClientStatRxResolveReplyAck, wfNhrpTestNHRReqQOS=wfNhrpTestNHRReqQOS, wfNhrpServerStatTxResolveReplyAck=wfNhrpServerStatTxResolveReplyAck, wfNhrpClientStatTable=wfNhrpClientStatTable, wfNhrpDefNhsServingNetworkAddr=wfNhrpDefNhsServingNetworkAddr, wfNhrpTestLayer3Type=wfNhrpTestLayer3Type, wfNhrpServerStatTxPurgeReplyAck=wfNhrpServerStatTxPurgeReplyAck, wfNhrpTestMpsGH=wfNhrpTestMpsGH, wfNhrpServerStatRxError=wfNhrpServerStatRxError, wfNhrpClientStatUnsolicitPurgeReq=wfNhrpClientStatUnsolicitPurgeReq, wfNhrpServerStatRxRegisterReq=wfNhrpServerStatRxRegisterReq, wfNhrpDefNhsVcid1=wfNhrpDefNhsVcid1, wfNhrpTestRegClientNbma=wfNhrpTestRegClientNbma, wfNhrpNHCacheSlot=wfNhrpNHCacheSlot, wfNhrpDefNhsTable=wfNhrpDefNhsTable, wfNhrpServerStatTable=wfNhrpServerStatTable, wfNhrpServerStatTxRegisterReplyAck=wfNhrpServerStatTxRegisterReplyAck, wfNhrpServerStatFwdRegisterReq=wfNhrpServerStatFwdRegisterReq, wfNhrpServerLoadBalance=wfNhrpServerLoadBalance, wfNhrpClientStatTxRegisterReq=wfNhrpClientStatTxRegisterReq, wfNhrpServerStatL2Type=wfNhrpServerStatL2Type, wfNhrpTestLayer2Type=wfNhrpTestLayer2Type, wfNhrpClientDisable=wfNhrpClientDisable, wfNhrpServerStatFwdError=wfNhrpServerStatFwdError, wfNhrpServerStatTxRegisterReplyNak=wfNhrpServerStatTxRegisterReplyNak, wfNhrpTestRegClientPrefix=wfNhrpTestRegClientPrefix, wfNhrpLayer3Type=wfNhrpLayer3Type, wfNhrpNHCacheLayer2Type=wfNhrpNHCacheLayer2Type, wfNhrpTestDelete=wfNhrpTestDelete, wfNhrpTestLogDisable=wfNhrpTestLogDisable, wfNhrpServerStatEntry=wfNhrpServerStatEntry, wfNhrpIfDisable=wfNhrpIfDisable, wfNhrpNHCacheTable=wfNhrpNHCacheTable, wfNhrpServerOverrideNbmaAddr=wfNhrpServerOverrideNbmaAddr, wfNhrpAddrXlateCacheNumEntries=wfNhrpAddrXlateCacheNumEntries, wfNhrpIfCct=wfNhrpIfCct, wfNhrpClientStatRxPurgeReplyNak=wfNhrpClientStatRxPurgeReplyNak, wfNhrpIfDelete=wfNhrpIfDelete, wfNhrpNhCacheSequence=wfNhrpNhCacheSequence, wfNhrpDebugLevel=wfNhrpDebugLevel, wfNhrpServerUseBgp=wfNhrpServerUseBgp, wfNhrpDefNhsIndex=wfNhrpDefNhsIndex, wfNhrpTestMpsCct=wfNhrpTestMpsCct, wfNhrpNHReqPath=wfNhrpNHReqPath, wfNhrpIfTable=wfNhrpIfTable, wfNhrpNHCacheFlags=wfNhrpNHCacheFlags, wfNhrpDefNhsVcid2=wfNhrpDefNhsVcid2, wfNhrpTestRegReqOpt=wfNhrpTestRegReqOpt)
