#
# PySNMP MIB module BSUSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSUSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
bsu, = mibBuilder.importSymbols("ANIROOT-MIB", "bsu")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
aniBsuWirelessPort, = mibBuilder.importSymbols("BSUWIRELESSIF-MIB", "aniBsuWirelessPort")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Integer32, TimeTicks, NotificationType, Counter32, ObjectIdentity, Unsigned32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Integer32", "TimeTicks", "NotificationType", "Counter32", "ObjectIdentity", "Unsigned32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Gauge32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
aniBsuStatistics = ModuleIdentity((1, 3, 6, 1, 4, 1, 4325, 3, 3))
if mibBuilder.loadTexts: aniBsuStatistics.setLastUpdated('0105091130Z')
if mibBuilder.loadTexts: aniBsuStatistics.setOrganization('Aperto Networks')
if mibBuilder.loadTexts: aniBsuStatistics.setContactInfo(' Postal: Aperto Networks Inc 1637 S Main Street Milpitas, California 95035 Tel: +1 408 719 9977 ')
if mibBuilder.loadTexts: aniBsuStatistics.setDescription('This group contains Statistical information for the BSU. aniBsuRfStatsTable shows the RF Port level statistics. aniBsuStatsBWGroup shows the bandwidth allocation statistics. aniBsuRfSigQStatsTable shows the Signal Quality Port level statistics. ')
aniBsuStatsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 3, 3, 1))
aniBsuRfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2), )
if mibBuilder.loadTexts: aniBsuRfStatsTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsTable.setDescription('This table provides the statistics information for the BSU Wireless ports. ')
aniBsuRfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuRfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsEntry.setDescription('An entry with objects that provide statistics information for each RF port monitored by the BSU. ')
aniBsuRfStatsInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfStatsInPackets.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsInPackets.setDescription('This object counts total number of packets received through the Wireless port as identified by aniBsuWirelessPort. ')
aniBsuRfStatsOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfStatsOutPackets.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsOutPackets.setDescription('This object counts total number of packets transmitted through the Wireless port as identified by aniBsuWirelessPort. ')
aniBsuRfStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsInOctets.setDescription('The cumulative number of Packet Data Octets received on this Wireless port. ')
aniBsuRfStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsOutOctets.setDescription('The cumulative number of Packet Data Octets transmitted on this Wireless port. ')
aniBsuRfStatsNumSusLinked = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfStatsNumSusLinked.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfStatsNumSusLinked.setDescription('The number of SUs linked to this wireless port. ')
aniBsuStatsBWGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3))
aniBsuStatsBWTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1), )
if mibBuilder.loadTexts: aniBsuStatsBWTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWTable.setDescription('This table shows the bandwidth allocation statistics per wireless port for each service class. ')
aniBsuStatsBWEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"), (0, "BSUSTATS-MIB", "aniBsuStatsBWServiceClass"))
if mibBuilder.loadTexts: aniBsuStatsBWEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWEntry.setDescription('The entries for aniBsuStatsBWTable. ')
aniBsuStatsBWServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("besteffort", 1), ("cir", 2), ("cbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWServiceClass.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWServiceClass.setDescription('The service class name. ')
aniBsuStatsBWUSMaxAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWUSMaxAllocation.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWUSMaxAllocation.setDescription('The maximum upstream bandwidth allocation in bits per second. This value is available on the configuration manager. ')
aniBsuStatsBWUSMaxAllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWUSMaxAllocPercent.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWUSMaxAllocPercent.setDescription('The maximum upstream bandwidth allocation displayed as a percentage. ')
aniBsuStatsBWUSCurrAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWUSCurrAllocation.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWUSCurrAllocation.setDescription('The current upstream bandwidth allocation in bits per second. This value is the accumulation of all the SUs upstream allocated bandwidth for this service class on this wireless port. This object is not applicable in case of best effort service class and is always displayed as 0. ')
aniBsuStatsBWUSSubscrPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWUSSubscrPercent.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWUSSubscrPercent.setDescription("The ratio of aniBsuStatsBWUSCurrAllocPercent and aniBsuStatsBWUSMaxAllocation displayed as a percentage. aniBsuStatsBWUSSubscrPercent = (aniBsuStatsBWUSCurrAllocPercent/aniBsuStatsBWUSMaxAllocation)*100 This object is not applicable in case of best effort service class and a string 'not-applicable' is returned. ")
aniBsuStatsBWDSMaxAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWDSMaxAllocation.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWDSMaxAllocation.setDescription('The maximum downstream bandwidth allocation in bits per second. This value is available on the configuration manager. ')
aniBsuStatsBWDSMaxAllocPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWDSMaxAllocPercent.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWDSMaxAllocPercent.setDescription('The maximum downstream bandwidth allocation displayed as a percentage. ')
aniBsuStatsBWDSCurrAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWDSCurrAllocation.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWDSCurrAllocation.setDescription('The current downstream bandwidth allocation in bits per second. This value is the accumulation of all the SUs downstream allocated bandwidth for this service class on this wireless port. This object is not applicable in case of best effort service class and is always displayed as 0. ')
aniBsuStatsBWDSSubscrPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWDSSubscrPercent.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWDSSubscrPercent.setDescription("The ratio of aniBsuStatsBWDSCurrAllocPercent and aniBsuStatsBWDSMaxAllocation displayed as a percentage. aniBsuStatsBWDSSubscrPercent = (aniBsuStatsBWDSCurrAllocPercent/aniBsuStatsBWDSMaxAllocation)*100 This object is not applicable in case of best effort service class and a string 'not-applicable' is returned. ")
aniBsuStatsBWTotalTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 2), )
if mibBuilder.loadTexts: aniBsuStatsBWTotalTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWTotalTable.setDescription('This table displays the total bandwidth allocation for each wireless port. ')
aniBsuStatsBWTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 2, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuStatsBWTotalEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWTotalEntry.setDescription('The entries for aniBsuStatsBWTotalTable. ')
aniBsuStatsBWTotalUSMaxAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWTotalUSMaxAllocation.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWTotalUSMaxAllocation.setDescription('The total upstream maximum bandwidth allocations for this wireless port. It includes bandwidth information of all the service classes on this particular port. ')
aniBsuStatsBWTotalDSMaxAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuStatsBWTotalDSMaxAllocation.setStatus('current')
if mibBuilder.loadTexts: aniBsuStatsBWTotalDSMaxAllocation.setDescription('The total downstream maximum bandwidth allocations for this wireless port. It includes bandwidth information of all the service classes on this particular port. ')
aniBsuRfSigQStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4), )
if mibBuilder.loadTexts: aniBsuRfSigQStatsTable.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsTable.setDescription('This table provides the signal quality statistics information for the BSU Wireless ports. ')
aniBsuRfSigQStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1), ).setIndexNames((0, "BSUWIRELESSIF-MIB", "aniBsuWirelessPort"))
if mibBuilder.loadTexts: aniBsuRfSigQStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsEntry.setDescription('An entry with objects that provide signal quality statistics information for each RF port monitored by the BSU. ')
aniBsuRfSigQStatsNoFecErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsNoFecErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsNoFecErrorCount.setDescription('The no FEC error count. ')
aniBsuRfSigQStatsCorrFecErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsCorrFecErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsCorrFecErrorCount.setDescription('The correctable FEC error count. ')
aniBsuRfSigQStatsUncorrFecErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsUncorrFecErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsUncorrFecErrorCount.setDescription('The uncorrectable FEC error count. ')
aniBsuRfSigQStatsNoUniqueWordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsNoUniqueWordCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsNoUniqueWordCount.setDescription('The no unique word count. ')
aniBsuRfSigQStatsCollidedBurstCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsCollidedBurstCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsCollidedBurstCount.setDescription('The collided burst count. ')
aniBsuRfSigQStatsNoEnergyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsNoEnergyCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsNoEnergyCount.setDescription('The no energy count. ')
aniBsuRfSigQStatsPayloadLenErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsPayloadLenErrorCount.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsPayloadLenErrorCount.setDescription('The payload length error count. ')
aniBsuRfSigQStatsBurstErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aniBsuRfSigQStatsBurstErrorRate.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsBurstErrorRate.setDescription('The burst error rate. This percentage is calculated using the formula Burst Error Rate = (Bad Bursts/(Good Bursts + Bad Bursts)) x 100 where Good Bursts = aniBsuRfSigQStatsNoFecErrorCount + aniBsuRfSigQStatsCorrFecErrorCount Bad Bursts = aniBsuRfSigQStatsCollidedBurstCount + aniBsuRfSigQStatsNoUniqueWordCount + aniBsuRfSigQStatsUncorrFecErrorCount ')
aniBsuRfSigQStatsResetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 4325, 3, 3, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aniBsuRfSigQStatsResetCounter.setStatus('current')
if mibBuilder.loadTexts: aniBsuRfSigQStatsResetCounter.setDescription('This provids an option to reset all the signal quality statistics counters for a particular wireless port. Setting this object to true(1) resets the counters to 0. Setting the object to false(2) is not allowed. If a Get request is sent, the value false(2) will be returned. ')
mibBuilder.exportSymbols("BSUSTATS-MIB", aniBsuStatsBWTotalUSMaxAllocation=aniBsuStatsBWTotalUSMaxAllocation, aniBsuRfSigQStatsCollidedBurstCount=aniBsuRfSigQStatsCollidedBurstCount, aniBsuRfStatsEntry=aniBsuRfStatsEntry, aniBsuStatsBWEntry=aniBsuStatsBWEntry, aniBsuRfSigQStatsNoUniqueWordCount=aniBsuRfSigQStatsNoUniqueWordCount, aniBsuRfSigQStatsUncorrFecErrorCount=aniBsuRfSigQStatsUncorrFecErrorCount, aniBsuRfStatsTable=aniBsuRfStatsTable, aniBsuStatsBWTable=aniBsuStatsBWTable, aniBsuRfStatsOutPackets=aniBsuRfStatsOutPackets, PYSNMP_MODULE_ID=aniBsuStatistics, aniBsuRfSigQStatsBurstErrorRate=aniBsuRfSigQStatsBurstErrorRate, aniBsuStatsBWServiceClass=aniBsuStatsBWServiceClass, aniBsuStatistics=aniBsuStatistics, aniBsuRfSigQStatsTable=aniBsuRfSigQStatsTable, aniBsuRfSigQStatsNoFecErrorCount=aniBsuRfSigQStatsNoFecErrorCount, aniBsuStatsBWGroup=aniBsuStatsBWGroup, aniBsuStatsBWTotalTable=aniBsuStatsBWTotalTable, aniBsuRfSigQStatsEntry=aniBsuRfSigQStatsEntry, aniBsuRfSigQStatsNoEnergyCount=aniBsuRfSigQStatsNoEnergyCount, aniBsuRfStatsInPackets=aniBsuRfStatsInPackets, aniBsuStatsBWUSCurrAllocation=aniBsuStatsBWUSCurrAllocation, aniBsuStatsBWDSMaxAllocPercent=aniBsuStatsBWDSMaxAllocPercent, aniBsuStatsBWTotalEntry=aniBsuStatsBWTotalEntry, aniBsuStatsBWUSMaxAllocPercent=aniBsuStatsBWUSMaxAllocPercent, aniBsuRfSigQStatsResetCounter=aniBsuRfSigQStatsResetCounter, aniBsuStatsBWDSCurrAllocation=aniBsuStatsBWDSCurrAllocation, aniBsuStatsBWTotalDSMaxAllocation=aniBsuStatsBWTotalDSMaxAllocation, aniBsuRfStatsNumSusLinked=aniBsuRfStatsNumSusLinked, aniBsuRfSigQStatsCorrFecErrorCount=aniBsuRfSigQStatsCorrFecErrorCount, aniBsuStatsBWDSSubscrPercent=aniBsuStatsBWDSSubscrPercent, aniBsuStatsBWDSMaxAllocation=aniBsuStatsBWDSMaxAllocation, aniBsuRfSigQStatsPayloadLenErrorCount=aniBsuRfSigQStatsPayloadLenErrorCount, aniBsuRfStatsOutOctets=aniBsuRfStatsOutOctets, aniBsuStatsBWUSMaxAllocation=aniBsuStatsBWUSMaxAllocation, aniBsuRfStatsInOctets=aniBsuRfStatsInOctets, aniBsuStatsBWUSSubscrPercent=aniBsuStatsBWUSSubscrPercent, aniBsuStatsGrp=aniBsuStatsGrp)
