#
# PySNMP MIB module E1-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E1-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, Gauge32, Unsigned32, ObjectIdentity, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso, IpAddress, Integer32, Counter64, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Gauge32", "Unsigned32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso", "IpAddress", "Integer32", "Counter64", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTT1E1PortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTT1E1PortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25))
class DisplayString(OctetString):
    pass

class PhysicalPortNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(49, 50)

class VirtualPortNumber(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(100, 255)

cdx6500PCTE1PortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2))
cdx6500PPCTE1PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1), )
if mibBuilder.loadTexts: cdx6500PPCTE1PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTE1PortTable.setDescription('This table contains the E1 (Physical) Port Configuration parameters.')
cdx6500PPCTE1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1CfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTE1PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTE1PortEntry.setDescription('A E1 Port Configuration Table Entry. Each entry contains the configuration parameters for a single E1 port.')
cdx6500E1CfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 1), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgPortNumber.setDescription('Port number of the (physical) E1 port.')
cdx6500E1CfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(45))).clone(namedValues=NamedValues(("e1", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgPortType.setDescription('This is a digital port having interface type E1. e1 :This is an E1 port.')
cdx6500E1CfgFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("channelize", 1), ("isdn", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgFormat.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgFormat.setDescription('Specifies the format of the E1 interface. channelize : DS0 definition fixed, predefined by the telco or the user. isdn : DS0 definition defined by the ISDN D channel. nc : Skipped during configuration.')
cdx6500E1CfgLineFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 100))).clone(namedValues=NamedValues(("e1CcsFebe", 1), ("e1CcsCrc", 2), ("e1Ccs", 3), ("e1CasFebe", 4), ("e1CasCrc", 5), ("e1Cas", 6), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgLineFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgLineFramingType.setDescription('Indicates the type of framing used by the DS1 circuit - e1CcsFebe : Common Channel Signaling with CRC & Si = FEBE. e1CcsCrc : Common Channel Signaling with CRC & Si = 1. e1Ccs : Common Channel Signaling with no CRC & Si = 1. e1CasFebe : Channel Associated Signalling with Si = FEBE. e1CasCrc : Channel Associated Signalling with CRC. e1Cas : Channel Associated Signalling. nc : Skipped during configuration.')
cdx6500E1CfgLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 100))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 3), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgLineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgLineCoding.setDescription('Selects the type of suppression used on the E1 link. hdb3 : High Density Bipolar 3. ami : Alternate Mark Inversion. nc : Skipped during configuration.')
cdx6500E1CfgLineImpedence = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("li120", 1), ("li75", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgLineImpedence.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgLineImpedence.setDescription('This parameter indicates the line impedence. li120 :The line impedence is 120 ohms. li75 :The line impedence is 75 ohms. nc : Skipped during configuration.')
cdx6500E1CfgTransmitClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(129, 130, 131, 100))).clone(namedValues=NamedValues(("node", 129), ("rec", 130), ("int", 131), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgTransmitClock.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgTransmitClock.setDescription('This parameter selects the source of the transmit clock. node : Node Timing (timing off another interface). rec : Received Timing. int : Internal Oscillator. nc : Skipped during configuration.')
cdx6500E1CfgThresholdValueLES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueLES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueLES.setDescription('Threshold value of Line Errored Seconds (LESs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueLCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueLCV.setDescription('Threshold value of Line Code Violations (LCVs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValuePCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValuePCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValuePCV.setDescription('Threshold value of Path Code Violations (PCVs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueCSS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueCSS.setDescription('Threshold value of Controlled Slip Seconds (CSSs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueES.setDescription('Threshold value of Errored Seconds (ESs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueBES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueBES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueBES.setDescription('Threshold value of Bursty Errored Seconds (BESs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueSES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueSES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueSES.setDescription('Threshold value of Severely Errored Seconds (SESs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueSEFS.setDescription('Threshold value of Severely Errored Framing Seconds (SEFSs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueUAS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueUAS.setDescription('Threshold value of Unavailable Seconds (UASs) to report alarms on CTP when exceeded.')
cdx6500E1CfgThresholdValueDM = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueDM.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgThresholdValueDM.setDescription('Threshold value of Degraded Minutes (DMs) to report alarms on CTP when exceeded.')
cdx6500E1CfgSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 100))).clone(namedValues=NamedValues(("att4ess", 1), ("att5ess", 2), ("ntDms100", 3), ("ntDms250", 4), ("md110Us", 5), ("md110", 6), ("siemens", 7), ("ntt", 8), ("general", 9), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgSwitchType.setDescription('The ISDN switch type. This specifies the type of equipment to which this span is connected. The possible choices are: att4ess : AT&T 4ESS Switch att5ess : AT&T 5ESS Switch ntDms100 : Northern Telecom DMS-100 Switch ntDms250 : Northern Telecom DMS-250 Switch md110Us : Ericsson MD-110 (North America) md110 : Ericsson MD-110 (International) siemens : Siemens EWSD Switch (U.S.) ntt : Nippon Telephone and Telegraph switch (Japan) general : Any Switch Type that conforms to CCITT standards nc : Skipped during configuration')
cdx6500E1CfgVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 9, 10, 11, 14, 100))).clone(namedValues=NamedValues(("att", 1), ("nt", 2), ("isdn2", 4), ("jate", 5), ("net5", 7), ("oneTr6", 9), ("vn3", 10), ("ccitt", 11), ("ts014", 14), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgVariant.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgVariant.setDescription('Select the ISDN Switch variant. This parameter depends upon the switch type configured. att : AT&T Custom nt : Northern Telecom isdn2 : Bellcore National ISDN-2 jate : JATE-compatible (Japan) net5 : NET-5 standard (Europe) oneTr6 : 1TR6 standard for PRI (Germany) vn3 : VN3 standard (France) ccitt : General CCITT Q.931 conformance ts014 : AUSTEL TS014 standard (Australia) nc : Skipped during configuration')
cdx6500E1CfgUserNetworkSide = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("user", 1), ("network", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgUserNetworkSide.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgUserNetworkSide.setDescription('This parameter specifies whether the T1/E1 port is emulating the network or user side of the ISDN network. user : The T1 or E1 port is emulating the user, ex. the T1 or E1 port is to be connected to an ISDN network. network : The T1 or E1 port is emulating the network, ex. the T1 or E1 port is to be connected to an ISDN PBX. nc : Skipped during configuration')
cdx6500E1CfgCallingIdMsbState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1CfgCallingIdMsbState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1CfgCallingIdMsbState.setDescription('For DMS100/250 switches, this parameter defines if the MSB is set or clear in the Calling ID IE. disabled : The MSB in the calling ID IE is cleared. enabled : The MSB in the calling ID IE is set. nc : Skipped during configuration')
cdx6500E1BchannelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 24, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("oneTo31", 1), ("oneTo30", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1BchannelNumbering.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1BchannelNumbering.setDescription('This parameter specifies the B-Channel numbering scheme used by the ISDN service provider. oneTo31 : B-Channels are numbered 1 to 31. B-Channel 16 is an invalid number in this scheme. oneTo30 : B-Channels are numbered 1 to 30. B-Channel 31 isan invalid number in this scheme. nc : Skipped during configuration.')
cdx6500PPSTE1PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2), )
if mibBuilder.loadTexts: cdx6500PPSTE1PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTE1PortTable.setDescription('This table holds statistics information for E1 ports.')
cdx6500PPSTE1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTE1PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTE1PortEntry.setDescription('Each entry contains statistics information for one E1 port.')
cdx6500E1StatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 1), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatPortNumber.setDescription('Port number of the (physical) E1 port.')
cdx6500E1StatTimeSinceLastResetType = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTimeSinceLastResetType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTimeSinceLastResetType.setDescription('Time since last reset has happened for the port.')
cdx6500E1StatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(45))).clone(namedValues=NamedValues(("e1", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatPortType.setDescription('The configured value of the Port Type. e1 : This is a digital port with interface type E1.')
cdx6500E1StatInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("it120", 1), ("it75", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatInterfaceType.setDescription('This parameter indicates the interface type of this port. it120 : Interface type is 120 ohms. it75 : Interface type is 75 ohms. na : Value not available.')
cdx6500E1StatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatPortState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatPortState.setDescription('The current port state : disabled : The port has been disabled. enabled : The port has been enabled. na : Value not available.')
cdx6500E1StatAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 100))).clone(namedValues=NamedValues(("none", 1), ("rai", 2), ("ais", 3), ("los", 4), ("fas", 5), ("lof", 6), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatAlarmState.setDescription('The alarm state of the port : none : No alarm (normal). rai : Remote Alarm Indication. ais : Alarm Indication Signal. los : Loss of Signal. fas : Frame Alignment Signal (FAS) High Error Rate. lof : Loss of Frame (LOF) Alignment. na : Value not available.')
cdx6500E1BoardHWRevAndPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1BoardHWRevAndPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1BoardHWRevAndPartNumber.setDescription('Hardware Revision and part number of the board.')
cdx6500E1StatDailyHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4), )
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryTable.setDescription('The E1 Daily History Table contains various statistics collected over the previous 24 hours which are broken into 96 completed 15 minute intervals.')
cdx6500E1StatDailyHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatDailyHistoryPortNumber"), (0, "E1-OPT-MIB", "cdx6500E1StatDailyHistoryInterval"))
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryEntry.setDescription('An entry in the E1 Daily History Table.')
cdx6500E1StatDailyHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryInterval.setDescription('This gives the history at 15 minute intervals.Each block represents a 15 minute interval of the day, starting from 00:15 and ending at 24:00.Thus there are 96 such blocks possible.Therefore, 1 represents the history at 00:15 . 2 represents the history at 00:30 . .......... 96 represents the history at 24:00 .')
cdx6500E1StatDailyHistoryLES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryLES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryLES.setDescription('The number of Line Errored Seconds (LESs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryLCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryLCV.setDescription('The number of Line Code Violations (LCVs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryPCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryPCV.setDescription('The number of Path Coding Violations (PCVs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryCSS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryCSS.setDescription('The number of Controlled Slip Seconds (CSSs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryES.setDescription('The number of Errored Seconds (ESs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryBES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryBES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistorySES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistorySES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistorySES.setDescription('The number of Severely Errored Seconds (SESs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistorySEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistorySEFS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistorySEFS.setDescription('The number of Severely Errored Framing Seconds (SEFSs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryUAS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryUAS.setDescription('The number of Unavailable Seconds (UASs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryDM = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryDM.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryDM.setDescription('The number of Degraded Minutes (DMs) encountered by the E1 interface in one of the previous 96, individual 15 minute intervals.')
cdx6500E1StatDailyHistoryPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 4, 1, 12), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDailyHistoryPortNumber.setDescription('The port number of the E1 port.')
cdx6500E1StatABCDStateTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 6), )
if mibBuilder.loadTexts: cdx6500E1StatABCDStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatABCDStateTable.setDescription('The ABCD State Table contains the current TX / RX ABCD state of the Configured DS0 Channels.')
cdx6500E1StatABCDStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 6, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatABCDStatePortNumber"), (0, "E1-OPT-MIB", "cdx6500E1StatABCDStateDS0ChannelNumber"))
if mibBuilder.loadTexts: cdx6500E1StatABCDStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatABCDStateEntry.setDescription('An entry in the ABCD State Table.')
cdx6500E1StatABCDStateDS0ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatABCDStateDS0ChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatABCDStateDS0ChannelNumber.setDescription('Channel number of the configured DS0 channel.')
cdx6500E1StatABCDStateCurrentTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatABCDStateCurrentTxState.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500E1StatABCDStateCurrentTxState.setDescription('Current TX ABCD state of the configured DS0 channels. This object is no longer supported.')
cdx6500E1StatABCDStateCurrentRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatABCDStateCurrentRxState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatABCDStateCurrentRxState.setDescription('Current RX ABCD state of the configured DS0 channels.')
cdx6500E1StatABCDStatePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 6, 1, 4), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatABCDStatePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatABCDStatePortNumber.setDescription('Port number of the E1 port.')
cdx6500E1ISDNStatusTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8), )
if mibBuilder.loadTexts: cdx6500E1ISDNStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1ISDNStatusTable.setDescription('This table holds ISDN statistics information for E1 ports.')
cdx6500E1StatISDNStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatISDNStatusPortNumber"))
if mibBuilder.loadTexts: cdx6500E1StatISDNStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNStatusEntry.setDescription('Each entry contains statistics information for one E1 port.')
cdx6500E1StatISDNStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 1), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNStatusPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNStatusPortNumber.setDescription('The port number of the E1 port.')
cdx6500E1StatNumRxCallsSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatNumRxCallsSinceLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatNumRxCallsSinceLastReset.setDescription('The number of inbound calls that were attempted since the last statistics reset.')
cdx6500E1StatNumRxCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatNumRxCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatNumRxCallsRejected.setDescription('The number of inbound calls that were rejected since the last statistics reset.')
cdx6500E1StatRxLastCallFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 255))).clone(namedValues=NamedValues(("noFailureReported", 193), ("noAvailableVirtualPort", 194), ("securityViolation", 195), ("noResourcesAvailable", 196), ("callRejected", 197), ("invalidPhoneNumber", 198), ("outgoingCallRequestTimeout", 199), ("callCollision", 200), ("virtualPortNotAvailable", 201), ("invalidConfiguration", 202), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatRxLastCallFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatRxLastCallFailureCause.setDescription('The reason the last inbound call was rejected, since the last statistics reset. The posssible values are: noFailureReported : No call failure noAvailableVirtualPort : No Virtual Port available securityViolation : Password/Calling ID security failed noResourcesAvailable : No resources available callRejected : Call failed by Xircom card invalidPhoneNumber : Incorrect phone number outgoingCallRequestTimeout : Outgoing call request timed out callCollision : A call collision occurred virtualPortNotAvailable : Virtual port not available invalidConfiguration : Invalid configuration na : Value not available')
cdx6500E1StatRxLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatRxLastCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatRxLastCalledNumber.setDescription('The phone number of the virtual port of the last ISDN call made into this node.')
cdx6500E1StatRxLastCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatRxLastCallingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatRxLastCallingNumber.setDescription('The phone number of last party to make an ISDN call into this node.')
cdx6500E1StatRxMinCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatRxMinCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatRxMinCallDuration.setDescription('The minimum call duration of all inbound ISDN calls made into this node, since the last statistics reset.')
cdx6500E1StatRxMaxCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatRxMaxCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatRxMaxCallDuration.setDescription('The maximum call duration of all inbound ISDN calls made into this node, since the last statistics reset.')
cdx6500E1StatRxAvgCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatRxAvgCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatRxAvgCallDuration.setDescription('The average call duration of all inbound ISDN calls made into this node, since the last statistics reset.')
cdx6500E1StatNumTxCallsSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatNumTxCallsSinceLastReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatNumTxCallsSinceLastReset.setDescription('The number of outbound calls that were attempted since the last statistics reset.')
cdx6500E1StatNumTxCallsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatNumTxCallsRejected.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatNumTxCallsRejected.setDescription('The number of outbound calls that were rejected since the last statistics reset.')
cdx6500E1StatTxLastCallFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 255))).clone(namedValues=NamedValues(("noFailureReported", 193), ("noAvailableVirtualPort", 194), ("securityViolation", 195), ("noResourcesAvailable", 196), ("callRejected", 197), ("invalidPhoneNumber", 198), ("outgoingCallRequestTimeout", 199), ("callCollision", 200), ("virtualPortNotAvailable", 201), ("invalidConfiguration", 202), ("na", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTxLastCallFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTxLastCallFailureCause.setDescription('The reason the last outbound call was rejected, since the last statistics reset. The posssible values are: noFailureReported : No call failure. noAvailableVirtualPort : No Virtual Port available. securityViolation : Password/Calling ID security failed. noResourcesAvailable : No resources available. callRejected : Call failed by Xircom card. invalidPhoneNumber : Incorrect phone number. outgoingCallRequestTimeout : Outgoing call request timed out. callCollision : A call collision occurred. virtualPortNotAvailable : Virtual port not available. invalidConfiguration : Invalid configuration. na : Value not available.')
cdx6500E1StatTxLastCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTxLastCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTxLastCalledNumber.setDescription('The phone number of the last ISDN call made by a virtual port from this node.')
cdx6500E1StatTxLastCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTxLastCallingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTxLastCallingNumber.setDescription('The phone number of the virtual port that made the last ISDN call from this node.')
cdx6500E1StatTxMinCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTxMinCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTxMinCallDuration.setDescription('The minimum call duration of all outbound ISDN calls made from this node, since the last statistics reset.')
cdx6500E1StatTxMaxCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTxMaxCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTxMaxCallDuration.setDescription('The maximum call duration of all outbound ISDN calls made from this node, since the last statistics reset.')
cdx6500E1StatTxAvgCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatTxAvgCallDuration.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatTxAvgCallDuration.setDescription('The average call duration of all outbound ISDN calls made from this node, since the last statistics reset.')
cdx6500E1StatDchannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatDchannelState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatDchannelState.setDescription('Specifies the status of the D Channel. up : The D Channel is up. down : The D Channel is down. na : Value not available.')
cdx6500E1StatISDNCallSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10), )
if mibBuilder.loadTexts: cdx6500E1StatISDNCallSummaryTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNCallSummaryTable.setDescription('This table holds ISDN call summary information for E1 ports.')
cdx6500E1StatISDNCallSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatISDNPortNumber"), (0, "E1-OPT-MIB", "cdx6500E1StatISDNBChannelNumber"))
if mibBuilder.loadTexts: cdx6500E1StatISDNCallSummaryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNCallSummaryEntry.setDescription('An entry in the ISDN call summary table.')
cdx6500E1StatISDNBChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNBChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNBChannelNumber.setDescription('B-Channel number of the ISDN Channel.')
cdx6500E1StatISDNBChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("idle", 1), ("ringing", 2), ("connected", 3), ("outOfService", 4), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNBChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNBChannelStatus.setDescription('Status of the ISDN B-Channel. The posssible values are: idle : The B-Channel is in the idle state. ringing : The B-Channel is in the ringing state. connected : The B-Channel is in the connected state. outOfService : The B-Channel is out of service. na : Value not available.')
cdx6500E1StatISDNCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("invalid", 3), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNCallDirection.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNCallDirection.setDescription('Direction of the ISDN call on the B-Channel. The posssible values are: inbound : The current call is in the inbound direction. outbound : The current call is in the outbound direction. invalid : There is no call present. na : Value not available.')
cdx6500E1StatISDNCallingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNCallingNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNCallingNumber.setDescription('This is the phone number of the party originating the ISDN call.')
cdx6500E1StatISDNCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNCalledNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNCalledNumber.setDescription('This is the phone number of the party at the destination end of the ISDN call.')
cdx6500E1StatISDNDS0Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("ds056k", 1), ("ds064k", 2), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNDS0Rate.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNDS0Rate.setDescription('DS0 Rate of the ISDN B-Channel. The posssible values are: ds056k : The DS0 Rate is 56K. ds064k : The DS0 Rate is 64K. na : Value not available.')
cdx6500E1StatISDNVirtualPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNVirtualPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNVirtualPortNumber.setDescription('Virtual Port Number of the port using this B-Channel. A value of 0 implies that no virtual port is currently using the B-Channel.')
cdx6500E1StatISDNTimeCallStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNTimeCallStarted.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNTimeCallStarted.setDescription('This is the duration that the current call on this B-Channel has been connected.')
cdx6500E1StatISDNPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 10, 1, 9), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatISDNPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatISDNPortNumber.setDescription('Port number of the E1 port.')
cdx6500E1StatLast24HoursReportTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12), )
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportTable.setDescription('This table holds a report of the cumulative sum of the statistics for the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatLast24HoursReportPortNumber"))
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportEntry.setDescription('Each entry contains statistics information for one E1 port.')
cdx6500E1StatLast24HoursReportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 1), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportPortNumber.setDescription('Port number of the E1 port.')
cdx6500E1StatLast24HoursReportLES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportLES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportLES.setDescription('The number of Line Errored Seconds (LESs) encountered by the E1 interface in the previous 24 hour interval. ')
cdx6500E1StatLast24HoursReportLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportLCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportLCV.setDescription('The number of Line Code Violations (LCVs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportPCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportPCV.setDescription('The number of Path Coding Violations (PCVs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportCSS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportCSS.setDescription('The number of Controlled Slip Seconds (CSSs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportES.setDescription('The number of Errored Seconds (ESs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportBES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportBES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportSES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportSES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportSES.setDescription('The number of Severely Errored Seconds (SESs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportSEFS.setDescription('The number of Severely Errored Framing Seconds (SEFSs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatLast24HoursReportUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 12, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportUAS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatLast24HoursReportUAS.setDescription('The number of Unavailable Seconds (UASs) encountered by the E1 interface in the previous 24 hour interval.')
cdx6500E1StatCurrent15MinutesReportTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14), )
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportTable.setDescription('This table holds a report of the statistics for the current 15 minutes interval.')
cdx6500E1StatCurrent15MinutesReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1), ).setIndexNames((0, "E1-OPT-MIB", "cdx6500E1StatCurrent15MinutesReportPortNumber"))
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportEntry.setDescription('Each entry contains statistics information for one E1 port.')
cdx6500E1StatCurrent15MinutesReportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 1), PhysicalPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportPortNumber.setDescription('Port number of the E1 port.')
cdx6500E1StatCurrent15MinutesReportTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportTimeElapsed.setDescription('The time that has elapsed since the beginning of the current 15 minutes interval.')
cdx6500E1StatCurrent15MinutesReportLES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportLES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportLES.setDescription('The number of Line Errored Seconds (LESs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportLCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportLCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportLCV.setDescription('The number of Line Code Violations (LCVs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportPCV = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportPCV.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportPCV.setDescription('The number of Path Coding Violations (PCVs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportCSS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportCSS.setDescription('The number of Controlled Slip Seconds (CSSs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportES.setDescription('The number of Errored Seconds (ESs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportBES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportBES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportBES.setDescription('The number of Bursty Errored Seconds (BESs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportSES = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportSES.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportSES.setDescription('The number of Severely Errored Seconds (SESs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportSEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportSEFS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportSEFS.setDescription('The number of Severely Errored Framing Seconds (SEFSs) encountered by the E1 interface in the current 15 minute interval.')
cdx6500E1StatCurrent15MinutesReportUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 25, 14, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportUAS.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500E1StatCurrent15MinutesReportUAS.setDescription('The number of Unavailable Seconds (UASs) encountered by the E1 interface in the current 15 minute interval.')
mibBuilder.exportSymbols("E1-OPT-MIB", cdx6500E1StatISDNBChannelNumber=cdx6500E1StatISDNBChannelNumber, cdx6500Statistics=cdx6500Statistics, cdx6500E1CfgThresholdValueLCV=cdx6500E1CfgThresholdValueLCV, cdx6500E1BoardHWRevAndPartNumber=cdx6500E1BoardHWRevAndPartNumber, cdx6500E1CfgCallingIdMsbState=cdx6500E1CfgCallingIdMsbState, cdx6500E1StatISDNStatusPortNumber=cdx6500E1StatISDNStatusPortNumber, cdx6500E1StatLast24HoursReportSEFS=cdx6500E1StatLast24HoursReportSEFS, cdx6500E1StatTxAvgCallDuration=cdx6500E1StatTxAvgCallDuration, cdx6500E1CfgThresholdValueSEFS=cdx6500E1CfgThresholdValueSEFS, cdx6500E1StatTxLastCallingNumber=cdx6500E1StatTxLastCallingNumber, cdx6500E1StatISDNPortNumber=cdx6500E1StatISDNPortNumber, cdx6500E1CfgSwitchType=cdx6500E1CfgSwitchType, cdx6500E1StatNumTxCallsRejected=cdx6500E1StatNumTxCallsRejected, cdx6500E1StatLast24HoursReportLCV=cdx6500E1StatLast24HoursReportLCV, cdx6500E1StatISDNCallSummaryEntry=cdx6500E1StatISDNCallSummaryEntry, cdx6500E1StatCurrent15MinutesReportTable=cdx6500E1StatCurrent15MinutesReportTable, cdx6500E1StatCurrent15MinutesReportLES=cdx6500E1StatCurrent15MinutesReportLES, cdx6500E1StatDailyHistoryInterval=cdx6500E1StatDailyHistoryInterval, DisplayString=DisplayString, cdx6500E1StatLast24HoursReportCSS=cdx6500E1StatLast24HoursReportCSS, cdx6500E1StatCurrent15MinutesReportUAS=cdx6500E1StatCurrent15MinutesReportUAS, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500E1StatLast24HoursReportTable=cdx6500E1StatLast24HoursReportTable, cdx6500E1StatLast24HoursReportSES=cdx6500E1StatLast24HoursReportSES, cdx6500E1CfgPortType=cdx6500E1CfgPortType, cdx6500PPSTE1PortTable=cdx6500PPSTE1PortTable, cdx6500E1StatDailyHistorySES=cdx6500E1StatDailyHistorySES, cdx6500E1StatLast24HoursReportBES=cdx6500E1StatLast24HoursReportBES, cdx6500E1StatLast24HoursReportUAS=cdx6500E1StatLast24HoursReportUAS, cdx6500PPCTE1PortTable=cdx6500PPCTE1PortTable, cdx6500E1StatRxMinCallDuration=cdx6500E1StatRxMinCallDuration, cdx6500E1StatCurrent15MinutesReportES=cdx6500E1StatCurrent15MinutesReportES, cdx6500E1StatNumRxCallsSinceLastReset=cdx6500E1StatNumRxCallsSinceLastReset, cdx6500E1StatDailyHistoryLES=cdx6500E1StatDailyHistoryLES, VirtualPortNumber=VirtualPortNumber, cdx6500E1StatNumRxCallsRejected=cdx6500E1StatNumRxCallsRejected, cdx6500E1StatISDNCallDirection=cdx6500E1StatISDNCallDirection, cdx6500E1CfgThresholdValueLES=cdx6500E1CfgThresholdValueLES, cdx6500E1CfgLineFramingType=cdx6500E1CfgLineFramingType, cdx6500E1StatCurrent15MinutesReportPortNumber=cdx6500E1StatCurrent15MinutesReportPortNumber, cdx6500E1StatTxMinCallDuration=cdx6500E1StatTxMinCallDuration, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500E1StatCurrent15MinutesReportLCV=cdx6500E1StatCurrent15MinutesReportLCV, cdx6500E1StatAlarmState=cdx6500E1StatAlarmState, cdx6500E1CfgVariant=cdx6500E1CfgVariant, cdx6500E1StatLast24HoursReportES=cdx6500E1StatLast24HoursReportES, cdx6500E1StatCurrent15MinutesReportPCV=cdx6500E1StatCurrent15MinutesReportPCV, cdx6500E1StatISDNStatusEntry=cdx6500E1StatISDNStatusEntry, cdx6500E1StatDailyHistoryUAS=cdx6500E1StatDailyHistoryUAS, cdx6500E1StatTxLastCalledNumber=cdx6500E1StatTxLastCalledNumber, cdx6500E1BchannelNumbering=cdx6500E1BchannelNumbering, cdx6500E1StatLast24HoursReportLES=cdx6500E1StatLast24HoursReportLES, cdx6500E1StatISDNDS0Rate=cdx6500E1StatISDNDS0Rate, cdx6500E1StatCurrent15MinutesReportBES=cdx6500E1StatCurrent15MinutesReportBES, cdx6500PPSTE1PortEntry=cdx6500PPSTE1PortEntry, cdx6500E1StatInterfaceType=cdx6500E1StatInterfaceType, cdx6500E1StatDailyHistoryLCV=cdx6500E1StatDailyHistoryLCV, cdx6500E1StatTimeSinceLastResetType=cdx6500E1StatTimeSinceLastResetType, cdx6500E1CfgThresholdValueUAS=cdx6500E1CfgThresholdValueUAS, cdx6500E1StatPortNumber=cdx6500E1StatPortNumber, cdx6500E1StatABCDStatePortNumber=cdx6500E1StatABCDStatePortNumber, cdx6500E1StatDailyHistoryTable=cdx6500E1StatDailyHistoryTable, cdx6500E1CfgThresholdValueCSS=cdx6500E1CfgThresholdValueCSS, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500E1ISDNStatusTable=cdx6500E1ISDNStatusTable, cdx6500E1StatABCDStateEntry=cdx6500E1StatABCDStateEntry, cdx6500E1StatDailyHistorySEFS=cdx6500E1StatDailyHistorySEFS, cdx6500E1CfgPortNumber=cdx6500E1CfgPortNumber, cdx6500E1StatABCDStateTable=cdx6500E1StatABCDStateTable, cdx6500E1StatRxMaxCallDuration=cdx6500E1StatRxMaxCallDuration, cdx6500E1StatCurrent15MinutesReportTimeElapsed=cdx6500E1StatCurrent15MinutesReportTimeElapsed, cdx6500E1CfgLineImpedence=cdx6500E1CfgLineImpedence, codex=codex, cdx6500E1CfgThresholdValueSES=cdx6500E1CfgThresholdValueSES, cdx6500E1StatLast24HoursReportPCV=cdx6500E1StatLast24HoursReportPCV, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500E1StatRxLastCallingNumber=cdx6500E1StatRxLastCallingNumber, cdx6500E1StatRxAvgCallDuration=cdx6500E1StatRxAvgCallDuration, cdx6500E1CfgTransmitClock=cdx6500E1CfgTransmitClock, cdxProductSpecific=cdxProductSpecific, cdx6500E1StatPortType=cdx6500E1StatPortType, cdx6500E1StatDailyHistoryPCV=cdx6500E1StatDailyHistoryPCV, cdx6500E1StatCurrent15MinutesReportEntry=cdx6500E1StatCurrent15MinutesReportEntry, cdx6500E1StatNumTxCallsSinceLastReset=cdx6500E1StatNumTxCallsSinceLastReset, cdx6500PPCTE1PortEntry=cdx6500PPCTE1PortEntry, cdx6500E1StatDailyHistoryES=cdx6500E1StatDailyHistoryES, cdx6500=cdx6500, cdx6500E1StatDailyHistoryBES=cdx6500E1StatDailyHistoryBES, cdx6500E1StatDailyHistoryDM=cdx6500E1StatDailyHistoryDM, cdx6500E1StatISDNTimeCallStarted=cdx6500E1StatISDNTimeCallStarted, cdx6500E1StatRxLastCalledNumber=cdx6500E1StatRxLastCalledNumber, cdx6500Configuration=cdx6500Configuration, cdx6500PSTT1E1PortTable=cdx6500PSTT1E1PortTable, cdx6500E1StatISDNBChannelStatus=cdx6500E1StatISDNBChannelStatus, cdx6500E1CfgThresholdValueDM=cdx6500E1CfgThresholdValueDM, cdx6500E1StatTxMaxCallDuration=cdx6500E1StatTxMaxCallDuration, cdx6500E1CfgThresholdValueBES=cdx6500E1CfgThresholdValueBES, cdx6500E1StatPortState=cdx6500E1StatPortState, cdx6500E1StatDailyHistoryPortNumber=cdx6500E1StatDailyHistoryPortNumber, cdx6500E1CfgThresholdValuePCV=cdx6500E1CfgThresholdValuePCV, cdx6500E1StatISDNCallSummaryTable=cdx6500E1StatISDNCallSummaryTable, cdx6500E1StatTxLastCallFailureCause=cdx6500E1StatTxLastCallFailureCause, cdx6500E1StatCurrent15MinutesReportCSS=cdx6500E1StatCurrent15MinutesReportCSS, cdx6500E1StatLast24HoursReportPortNumber=cdx6500E1StatLast24HoursReportPortNumber, cdx6500E1StatCurrent15MinutesReportSEFS=cdx6500E1StatCurrent15MinutesReportSEFS, cdx6500E1StatABCDStateDS0ChannelNumber=cdx6500E1StatABCDStateDS0ChannelNumber, cdx6500E1StatISDNCallingNumber=cdx6500E1StatISDNCallingNumber, cdx6500E1CfgThresholdValueES=cdx6500E1CfgThresholdValueES, cdx6500PCTT1E1PortTable=cdx6500PCTT1E1PortTable, cdx6500PCTE1PortTable=cdx6500PCTE1PortTable, cdx6500E1StatDailyHistoryEntry=cdx6500E1StatDailyHistoryEntry, cdx6500E1StatCurrent15MinutesReportSES=cdx6500E1StatCurrent15MinutesReportSES, PhysicalPortNumber=PhysicalPortNumber, cdx6500E1CfgFormat=cdx6500E1CfgFormat, cdx6500E1StatABCDStateCurrentTxState=cdx6500E1StatABCDStateCurrentTxState, cdx6500E1StatDailyHistoryCSS=cdx6500E1StatDailyHistoryCSS, cdx6500E1StatISDNCalledNumber=cdx6500E1StatISDNCalledNumber, cdx6500E1StatRxLastCallFailureCause=cdx6500E1StatRxLastCallFailureCause, cdx6500E1StatABCDStateCurrentRxState=cdx6500E1StatABCDStateCurrentRxState, cdx6500E1CfgLineCoding=cdx6500E1CfgLineCoding, cdx6500E1StatISDNVirtualPortNumber=cdx6500E1StatISDNVirtualPortNumber, cdx6500E1CfgUserNetworkSide=cdx6500E1CfgUserNetworkSide, cdx6500E1StatDchannelState=cdx6500E1StatDchannelState, cdx6500E1StatLast24HoursReportEntry=cdx6500E1StatLast24HoursReportEntry)
