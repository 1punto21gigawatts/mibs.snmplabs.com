#
# PySNMP MIB module ALTEON-PRIVATE-MIBS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-PRIVATE-MIBS
# Produced by pysmi-0.3.4 at Wed May  1 11:21:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, Counter64, TimeTicks, MibIdentifier, ModuleIdentity, ObjectIdentity, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, enterprises, Unsigned32, Bits, mgmt, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Counter64", "TimeTicks", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "enterprises", "Unsigned32", "Bits", "mgmt", "Integer32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
alteon = MibIdentifier((1, 3, 6, 1, 4, 1, 1872))
registration = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 1))
private_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2)).setLabel("private-mibs")
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2))
iprouting = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3))
vlans = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4))
serverloadbalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5))
portmirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8))
information = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9))
filtering = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10))
globalSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11))
dynamicSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12))
altswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 13))
operCmds = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14))
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16))
bwm = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17))
agGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1))
agGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3))
slbfailover = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16))
slbUrl = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27))
slbUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1))
slbUrlBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2))
gslbGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1))
gslbDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2))
gslbSites = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3))
gslbLookup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4))
ripStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5))
filterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6))
gslbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7))
gslbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9))
urlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11))
memStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14))
bwmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15))
port_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1)).setLabel("port-info")
slb_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2)).setLabel("slb-info")
ip_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3)).setLabel("ip-info")
vrrp_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4)).setLabel("vrrp-info")
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hwPartNumber.setDescription('The hardware part number of the Alteon Switch.')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: hwRevision.setDescription('The hardware revision. If the revision is not available, a zero length string should be returned.')
hwPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwPowerSupplyStatus.setDescription('The status of the internal power supply.')
hwRedundantPSPresent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("notPresent", 3), ("present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSPresent.setStatus('mandatory')
if mibBuilder.loadTexts: hwRedundantPSPresent.setDescription('Existence of redundant power supply.')
hwRedundantPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hwRedundantPSStatus.setDescription('The status of the redundant power supply.')
hwSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor1Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor1Temp.setDescription('The temperature in degrees Celcius of the sensor number 1.')
hwSensor2Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor2Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor2Temp.setDescription('The temperature in degrees Celcius of the sensor number 2.')
hwSensor3Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor3Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor3Temp.setDescription('The temperature in degrees Celcius of the sensor number 3.')
hwSensor4Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor4Temp.setStatus('mandatory')
if mibBuilder.loadTexts: hwSensor4Temp.setDescription('The temperature in degrees Celcius of the sensor number 4.')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: agSaveConfiguration.setDescription('This is an action object to write current configuration to nonvolatile storage. When issued with the saveActive, the active configuration in flash is saved to backup in flash and then the new configuration is saved to the active configuration in flash. When issued with notSaveActive, the active configuration is NOT saved to the flash and the active configuration is overwritten with the new configuration. ok(1) is returned always when read.')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: agApplyConfiguration.setDescription('This is an action object to apply the changes made to configuration of the switch. By setting the value to apply(2), all the changes made since the last apply are written to the new_config block. other(1) is returned when this object ie read. ')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('mandatory')
if mibBuilder.loadTexts: agApplyPending.setDescription('This object, when read, gives the user information whether an apply action is needed and that the configuration has been chaged by the user actions. The user then can apply the changes by setting proper value to the object agApplyConfiguration described above.')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('mandatory')
if mibBuilder.loadTexts: agReset.setDescription('This is an action object to reboot the agent. other(1) is returned always when read. The following values are writable: coldReset(2)... warmReset(3)...')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('mandatory')
if mibBuilder.loadTexts: agConfigForNxtReset.setDescription('The configuration information to be loaded from at next reset. other(1)...unknown configuration (read-only) The following values are writable: active(2)...active configuration block backup(3)...backup configuration block default(4)..default configuration block')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('mandatory')
if mibBuilder.loadTexts: agImageForNxtReset.setDescription('The software image to be booted from at next reset. other(1)...unknown image (read-only) The following values are writable: image1(2)...image 1 image2(3)...image 2')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agSoftwareVersion.setDescription("The version of the software image that is currently running on the system in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available.")
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('mandatory')
if mibBuilder.loadTexts: agBootVer.setDescription("The version of the boot code in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available.")
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('mandatory')
if mibBuilder.loadTexts: agImage1Ver.setDescription("The version of the software image stored in image 1 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('mandatory')
if mibBuilder.loadTexts: agImage2Ver.setDescription("The version of the software image stored in image 2 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('mandatory')
if mibBuilder.loadTexts: agRtcDate.setDescription("The date on the real time clock in the form of 'mm/dd/yy'. A zero length string is returned if date is not available.")
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('mandatory')
if mibBuilder.loadTexts: agRtcTime.setDescription("The time on the real time clock in the form of 'hh:mm:ss'. A zero length string is returned if date is not available.")
agTftpServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpServerIpAddr.setDescription('The TFTP server IP address.')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpImageFileName.setDescription('The image file name to be downloaded.')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpImage.setDescription('Whether the image file should be loaded in image1 or image2 in flash.')
agTftpDownload = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDownload.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpDownload.setDescription('This is an action object to cause to download software image according to the setup of agTftpServerIpAddr, agTftpImageFileName, agTftpImage when download(2) is issued. other(1) is returned always when read.')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('mandatory')
if mibBuilder.loadTexts: agLastSetErrorReason.setDescription('The error reason of the last SET failure.')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpServer.setDescription('The TFTP server IP address or domain name.')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpCfgFileName.setDescription('The configuration file name.')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpDumpFileName.setDescription('The file name for core dump.')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpAction.setDescription('This is an action object to perform various TFTP Get or Put functions. The TFTP sever is specified in agTftpServer object. img-get(2) - Download switch image from a specified image file (agTftpImageFileName) on the TFTP server to the destinated storage (agTftpImage). cfg-get(3) - Download switch configuration from a specified file (agTftpCfgFileName) on the TFTP server. cfg-put(4) - Upload switch configuration to a specified file (agTftpCfgFileName) on the TFTP server. dump-put(5)- Download switch core dump to a specified file (agTftpDumpFileName) on the TFTP server. other(1) is returned always when read.')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agTftpLastActionStatus.setDescription('The recorded status of the previous TFTP activity.')
agEnabledSwFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSwFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: agEnabledSwFeatures.setDescription('The software features that are enabled on the switch.')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogHost.setDescription('The syslog host IP address, in the new_configuration block.')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogHost.setDescription('The syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgBootp.setDescription('Enable or disable the use of BootP, in the new_configuration block.')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgBootp.setDescription('Enable or disable the use of BootP, as currently configured in the current_configuration block.')
agNewCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSpanningTree.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSpanningTree.setDescription('Turn On or Off Spanning Tree Protocol for the switch, in the new_configuration block.')
agCurCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSpanningTree.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSpanningTree.setDescription('The state of Spanning Tree Protocol for the switch, as currently configured in the current_configuration block.')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setDescription('The maximum number of rows in the trap host table.')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the current_configuration block.')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setDescription('A row in the trap host table in the current_configuration block.')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the new_configuration block.')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setDescription('A row in the trap host table in the new_configuration block.')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the new_configuration block.')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the new_configuration block.')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setDescription('The second syslog host IP address, in the new_configuration block.')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setDescription('The second syslog host IP address, as currently configured in the current_configuration block.')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslogFac.setDescription('The facility of syslog host in the current_configuration block.')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslogFac.setDescription('The facility of syslog host in the new_configuration block.')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setDescription('The facility of syslog2 host in the current_configuration block.')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setDescription('The facility of syslogs host in the new_configuration block.')
agCurCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSmtpHost.setStatus('mandatory')
if mibBuilder.loadTexts: agCurCfgSmtpHost.setDescription('The user defined SMTP host.')
agNewCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSmtpHost.setStatus('mandatory')
if mibBuilder.loadTexts: agNewCfgSmtpHost.setDescription('The user defined SMTP host.')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: agPortTableMaxEnt.setDescription('The maximum number of rows in the port configuration host table.')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgTable.setDescription('The table of port configuration in the current_configuration block.')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setDescription('A row in the port configuration table in the current_configuration block.')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgIndx.setDescription('The index of the row in port configurations table.')
agPortCurCfgPrefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPrefLink.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgPrefLink.setDescription('This is the preferred link.')
agPortCurCfgBackLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBackLink.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgBackLink.setDescription('This is the backup link.')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgState.setDescription('This is the state of the port.')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortCurCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgStp.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgStp.setDescription('This object is used to turn Spanning Tree on or off for the port.')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgPVID.setDescription('The default VLAN ID for the port.')
agPortCurCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for fast Ethernet connection.')
agPortCurCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mbs10", 2), ("mbs100", 3), ("mbs10or100", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setDescription('This object is used to select port speed for fast Ethernet connection.')
agPortCurCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setDescription('This object is used to select port mode for fast Ethernet connection.')
agPortCurCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setDescription('This object is used to select port flow control for fast Ethernet connection.')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgPortName.setDescription('The switch port name.')
agPortCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setDescription('The switch port Bandwidth Management contract number.')
agPortCurCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setStatus('mandatory')
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setDescription('Enable or disable to discard all non-IP traffic on the switch port.')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgTable.setDescription('The table of port configuration in the new_configuration block.')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setDescription('A row in the port configuration table in the new_configuration block.')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgIndx.setDescription('The index of the row in port configurations table.')
agPortNewCfgPrefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPrefLink.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgPrefLink.setDescription('This is the preferred link.')
agPortNewCfgBackLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBackLink.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgBackLink.setDescription('This is the backup link.')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgState.setDescription('This is the state of the port.')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortNewCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgStp.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgStp.setDescription('This object is used to turn Spanning Tree on or off for the port.')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgPVID.setDescription('The default VLAN ID for the port.')
agPortNewCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for fast Ethernet connection.')
agPortNewCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mbs10", 2), ("mbs100", 3), ("mbs10or100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setDescription('This object is used to select port speed for fast Ethernet connection.')
agPortNewCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setDescription('This object is used to select port mode for fast Ethernet connection.')
agPortNewCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setDescription('This object is used to select port flow control for fast Ethernet connection.')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgPortName.setDescription('The switch port name.')
agPortNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setDescription('The switch port Bandwidth Management contract number.')
agPortNewCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setStatus('mandatory')
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setDescription('Enable or disable to discard all non-IP traffic on the switch port.')
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceTableMax.setDescription('The maximum number of rows in the Ip interface table.')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfTable.setDescription('The table of IP interface configuration.')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setDescription('A row in the Ip interface table')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setDescription('The IP address of the interface.')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfMask.setDescription('The subnet mask of the interface.')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgIntfState.setDescription('The state of the interface.')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfTable.setDescription('The table of interface configuration in the New Configuration Block.')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setDescription('A row in the Ip interface table')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setDescription('The IP address of the interface.')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfMask.setDescription('The subnet mask of the interface.')
ipNewCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfState.setDescription('The state of the interface.')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('mandatory')
if mibBuilder.loadTexts: ipGatewayTableMax.setDescription('The maximum number of rows in the IP gateway table.')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwTable.setDescription('The table of gateway configuration in the Current configuration Block.')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwEntry.setDescription('A row in the Ip gateway table')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwAddr.setDescription('The IP address of the default gateway.')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwInterval.setDescription('The interval between ping attempts.')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwState.setDescription('The state of the default gateway.')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwArp.setDescription('The state of ARP only health checks.')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwTable.setDescription('The table of default gateway configuration in the New Configuration Block.')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwEntry.setDescription('A row in the Ip default gateway table')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwAddr.setDescription('The IP address of the default gateway.')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwInterval.setDescription('The interval in seconds between ping attempts.')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwState.setDescription('The state of the default gateway.')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwArp.setDescription('The state of the ARP only health checks.')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setDescription('The table of static routes in the current configuration block.')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setDescription('The IP interface of this route. The IP address of the specified interface shall be use as source IP when performs routing.')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setDescription('The table of static routes in the new configuration block.')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setDescription('The subnet mask of this route.')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setDescription('The IP address of the gateway for this route.')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setDescription('The IP interface of this route. The IP address of the specified interface shall be use as source IP when performs routing.')
ipForward = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9))
ripConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1))
ripCurCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgSupply.setDescription('Enable or disable supplying route updates.')
ripNewCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgSupply.setDescription('Enable or disable supplying route updates.')
ripCurCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgListen.setDescription('Enable or disable listening to route updates.')
ripNewCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgListen.setDescription('Enable or disable listening to route updates.')
ripCurCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgDefListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgDefListen.setDescription('Enable or disable listening to default routes.')
ripNewCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgDefListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgDefListen.setDescription('Enable or disable listening to default routes.')
ripCurCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setDescription('Enable or disable supplying static route updates.')
ripNewCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setDescription('Enable or disable supplying static route updates.')
ripCurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setDescription('Update Period in seconds.')
ripNewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setDescription('Update period in seconds.')
ripCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgState.setDescription('RIP global state.')
ripNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgState.setDescription('Globally turn RIP on or off.')
ripCurCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setDescription('RIP poison reverse.')
ripNewCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setStatus('mandatory')
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setDescription('RIP poison reverse.')
ipFwdCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setDescription('The table of ports and their forwarding states')
ipFwdCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipFwdCurCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setDescription('A row in the ipFwdCurCfgPortTable ')
ipFwdCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setDescription('The port number for which the forwarding state information pertains.')
ipFwdCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setDescription('The forwarding state of the port.')
ipFwdNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3), )
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setDescription('The table of ports and their forwarding states')
ipFwdNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipFwdNewCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setDescription('A row in the ipFwdNewCfgPortTable ')
ipFwdNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setDescription('The port number for which the forwarding state information pertains.')
ipFwdNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setDescription('The forwarding state of the port.')
ipFwdCurCfgLocalSubnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setDescription('The current local IP subnet.')
ipFwdNewCfgLocalSubnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setDescription('The new local IP subnet.')
ipFwdCurCfgLocalMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setDescription('The current local IP subnet mask.')
ipFwdNewCfgLocalMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setDescription('The new local IP subnet mask.')
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgState.setDescription('IP forwarding global state.')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgState.setDescription('IP forwarding global state.')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
ipCurCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwMetric.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurCfgGwMetric.setDescription('The default gateway metric.')
ipNewCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwMetric.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewCfgGwMetric.setDescription('The default gateway metric.')
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: vlanMaxEnt.setDescription('The maximum number of rows in the VLAN configuration table.')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgTable.setDescription('The table of VLAN configuration.')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgVlanId.setDescription('The VLAN identifier.')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgVlanName.setDescription('The VLAN name.')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgState.setDescription('Enable or disable a VLAN')
vlanCurCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgJumbo.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgJumbo.setDescription('Enable or Disable the Jumbo frame support for the VLAN ')
vlanCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setDescription('Default contract number the VLAN ')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgTable.setDescription('The table of VLAN configuration.')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgVlanId.setDescription('The VLAN identifier.')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgVlanName.setDescription('The VLAN name.')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgState.setDescription('Enable or disable a VLAN')
vlanNewCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgJumbo.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgJumbo.setDescription('Enable or Disable the Jumbo frame support for the VLAN ')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgAddPort.setDescription("The port to be added to the specified VLAN. A '0' value is returned when read.")
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setDescription("The port to be removed from the specified VLAN. A '0' value is returned when read.")
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgDelete.setDescription('This is an action object to create or delete a VLAN. other(1) is returned always when read. The following values are writable: delete(2)...to delete a VLAN')
vlanNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setDescription('Default contract number for the VLAN.')
slbRealServerMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerMaxSize.setDescription('The maximum number of entries in SLB RealServerTable.')
slbCurCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2), )
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setDescription('The table of Real Server configuration in the current_config.')
slbCurCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgRealServerIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setDescription('Information about a particular Real Server configuration.')
slbCurCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setDescription('The real server number')
slbCurCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setDescription('IP address of the real server identified by the instance of slbRealServerIndex.')
slbCurCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setDescription('The server weight.')
slbCurCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setDescription('The maximum number of connections that are allowed.')
slbCurCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbCurCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setDescription('The backup server number for this server.')
slbCurCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setDescription('The interval between keep-alive (ping) attempts in number of seconds. Zero means disabling ping attempt.')
slbCurCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setDescription('The number of failed attempts to declare this server DOWN.')
slbCurCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setDescription('The number of successful attempts to declare a server UP.')
slbCurCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerState.setDescription('Enable or disable this server.')
slbCurCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerType.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerType.setDescription('The server type. It participates in global server load balancing when it is configured as remote-server.')
slbCurCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerName.setDescription('The name of the real server.')
slbCurCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setDescription('The URL Pathes selected for URL load balancing for by the real server. The selected URL Pathes are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL Path is selected 0 - The represented URL Path is not selected')
slbCurCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setDescription("The real server that will handle client requests that don't contain an URL cookie if Cookie loadbalance is enabled.")
slbCurCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setDescription("The real server will handle requests that don't match the loadbalance string if it is enabled.")
slbCurCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setDescription('The real server config to enable/disable MAC SA substitution for L4 traffic. If disabled (the default) we will NOT substitute the MAC SA of client-to-server frames. If enabled, we will substitute the MAC SA.')
slbNewCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3), )
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setDescription('The table of Real Server configuration in the new_config.')
slbNewCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgRealServerIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setDescription('Information about a particular Real Server configuration.')
slbNewCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setDescription('The real server number')
slbNewCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setDescription('IP address of the real server identified by the instance of slbRealServerIndex.')
slbNewCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setDescription('The server weight.')
slbNewCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setDescription('The maximum number of connections that are allowed.')
slbNewCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbNewCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setDescription('The backup server number for this server.')
slbNewCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setDescription('The interval between keep-alive (ping) attempts in number of seconds. Zero means disabling ping attempt.')
slbNewCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setDescription('The number of failed attempts to declare this server DOWN.')
slbNewCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setDescription('The number of successful attempts to declare a server UP.')
slbNewCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerState.setDescription('Enable or disable this server.')
slbNewCfgRealServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerType.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerType.setDescription('The server type. It participates in global server load balancing when it is configured as remote-server.')
slbNewCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerName.setDescription('The name of the real server.')
slbNewCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setDescription('The URL Pathes selected for URL load balancing for by the real server. The selected URL Pathes are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL Path is selected 0 - The represented URL Path is not selected')
slbNewCfgRealServerAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be added to the real server. A zero is returned when read.')
slbNewCfgRealServerRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be removed from the real server. A zero is returned when read.')
slbNewCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setDescription("Enable or disable real server to handle client requests that don't contain a cookie if cookie loadbalance is enabled.")
slbNewCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setDescription('Enable or disable exclusionary matching string on real server.')
slbNewCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setDescription('The real server config to enable/disable MAC SA substitution for L4 traffic. If disabled (the default) we will NOT substitute the MAC SA of client-to-server frames. If enabled, we will substitute the MAC SA.')
slbVirtServerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setDescription('The maximum number of entries in SLB VirtServerTable.')
slbCurCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5), )
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setDescription('The table of virtual Servers.')
slbCurCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setDescription('A row in the virtual server table.')
slbCurCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setDescription('Virtual Server Number')
slbCurCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setDescription('IP address of the virtual server.')
slbCurCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setDescription('Enable or disable layer3 only balancing.')
slbCurCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setDescription('Enable or disable the virtual server.')
slbCurCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setDescription('The domain name of the virtual server.')
slbCurCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCname.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerCname.setDescription('The cookie name of the virtual server used for cookie load balance.')
slbCurCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCoffset.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerCoffset.setDescription('The starting byte offset of the cookie value.')
slbCurCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerClength.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerClength.setDescription('The number of bytes to extract from the cookie value.')
slbCurCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUriCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerUriCookie.setDescription('Enable or disable cookie search in URI')
slbCurCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerFtpParsing.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual server.')
slbCurCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUrlHashLen.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerUrlHashLen.setDescription('The number of bytes used to hash onto server, A zero means URL hashing disabled.')
slbCurCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerHttpHdrName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerHttpHdrName.setDescription('The HTTP header name of the virtual server.')
slbCurCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setDescription('The default BW contract of virtual server.')
slbNewCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6), )
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setDescription('The table of virtual Servers.')
slbNewCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setDescription('A row in the virtual server table.')
slbNewCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setDescription('Virtual Server Number')
slbNewCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setDescription('IP address of the virtual server.')
slbNewCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setDescription('Enable or disable layer3 only balancing.')
slbNewCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setDescription('Enable or disable the virtual server.')
slbNewCfgVirtServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setDescription('The domain name of the virtual server.')
slbNewCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCname.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerCname.setDescription('The cookie name of the virtual server used for cookie load balance.')
slbNewCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCoffset.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerCoffset.setDescription('The starting byte offset of the cookie value.')
slbNewCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerClength.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerClength.setDescription('The number of bytes to extract from the cookie value.')
slbNewCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUriCookie.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerUriCookie.setDescription('Enable or disable cookie search in URI')
slbNewCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerFtpParsing.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual server.')
slbNewCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUrlHashLen.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerUrlHashLen.setDescription('The number of bytes used to hash onto server, A zero means URL hashing disabled.')
slbNewCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerHttpHdrName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerHttpHdrName.setDescription('The HTTP header name of the virtual server.')
slbNewCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setDescription('The default BW contract number of the virtual server.')
slbCurCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setDescription('The table of virtual Services.')
slbCurCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgVirtServIndex"), (0, "ALTEON-PRIVATE-MIBS", "slbCurCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setDescription('The layer4 virtual port number of the service.')
slbCurCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setDescription('The real server group number for this service.')
slbCurCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setDescription('The layer4 real port number of the service.')
slbCurCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setDescription('Enable, disable or stateless the UDP balancing for the virtual port.')
slbCurCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setDescription('Enable or disable persistent bindings for the virtual port.')
slbCurCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setDescription('The host name of the virtual service.')
slbCurCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbCurCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setDescription('The BWM contract number for this service.')
slbCurCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setDescription('Enable or disable direct server return feature. To translate only MAC addresses in performing server load balancing when enabled. This allow servers to return directly to client since IP addresses have not been changed.')
slbNewCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgVirtServIndex"), (0, "ALTEON-PRIVATE-MIBS", "slbNewCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setDescription('The layer4 virtual port number of the service.')
slbNewCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setDescription('The real server group number for this service.')
slbNewCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setDescription('The layer4 real port number of the service.')
slbNewCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setDescription('Enable, disable or stateless the UDP balancing for the virtual port.')
slbNewCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setDescription('Enable or disable persistent bindings for the virtual port.')
slbNewCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setDescription('The host name of the virtual service.')
slbNewCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setDescription('The BWM contract number for this service.')
slbNewCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setDescription('Enable or disable direct server return feature. To translate only MAC addresses in performing server load balancing when enabled. This allow servers to return directly to client since IP addresses have not been changed.')
slbNewCfgVirtServiceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbGroupTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: slbGroupTableMaxSize.setDescription('The maximum number of entries in slbCurCfgGroupTable.')
slbCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10), )
if mibBuilder.loadTexts: slbCurCfgGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupTable.setDescription('The table of groups')
slbCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgGroupIndex"))
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setDescription('A row in the slbCurCfgGroupTable ')
slbCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setDescription('The group number for which the information pertains.')
slbCurCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setDescription('The Real servers in the group. The servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented server belongs to the group 0 - The represented server does not belong to the group')
slbCurCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setDescription('The metric used to select next server in group.')
slbCurCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setDescription('The backup real server for this group.')
slbCurCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setDescription('The URL used to verify HTTP content availability for the real servers of this group.')
slbCurCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setDescription('The OSI layer at which servers are health checked.')
slbCurCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupName.setDescription('The name of the real server group.')
slbCurCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setDescription('The server failure syslog threshold of the real server group.')
slbCurCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setDescription('The backup real server group for this group.')
slbNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11), )
if mibBuilder.loadTexts: slbNewCfgGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupTable.setDescription('The table of groups')
slbNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgGroupIndex"))
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setDescription('A row in the slbNewCfgGroupTable ')
slbNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setDescription('The group number for which the information pertains.')
slbNewCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setDescription('The Real servers in the group. The servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented server belongs to the group 0 - The represented server does not belong to the group')
slbNewCfgGroupAddServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setDescription('The real server to be added to the group. When read, 0 is returned.')
slbNewCfgGroupRemoveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setDescription('The real server to be removed from the group. When read, 0 is returned.')
slbNewCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setDescription('The metric used to select next server in group.')
slbNewCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setDescription('The backup real server for this group.')
slbNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setDescription('By setting the value to delete(2), the entire group is deleted.')
slbNewCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setDescription('The URL for health check among the real servers of this group.')
slbNewCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setDescription('The OSI layer at which servers are health checked.')
slbNewCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupName.setDescription('The name of the real server group.')
slbNewCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setDescription('The server failure syslog threshold of the real server group.')
slbNewCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setDescription('The backup real server group for this group.')
slbCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12), )
if mibBuilder.loadTexts: slbCurCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortTable.setDescription('The table of ports and their SLB states')
slbCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgPortIndex"))
if mibBuilder.loadTexts: slbCurCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortEntry.setDescription('A row in the slbPortTable ')
slbCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortIndex.setDescription('The port number for which the SLB information pertains.')
slbCurCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortProxyIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortProxyIpAddr.setDescription('The proxy IP address of the interface.')
slbCurCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4), ("failOver", 5), ("failOver-stanby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setDescription('The SLB state of the port. none(1) - not SLB port client(2) - SLB client port server(3) - SLB server port client-server(4) - SLB client and server port FailOver(5) - SLB fail over port failOver-stanby(6) - SLB fail port operating as standby (a read-only state)')
slbCurCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setDescription('Enable or disable hot standby processing on the switch port.')
slbCurCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setDescription('Enable or disable inter-switch processing on the switch port.')
slbCurCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setDescription('Enable or disable use of proxy IP address on the switch port.')
slbNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13), )
if mibBuilder.loadTexts: slbNewCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortTable.setDescription('The table of ports and their SLB states')
slbNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgPortIndex"))
if mibBuilder.loadTexts: slbNewCfgPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortEntry.setDescription('A row in the slbPortTable ')
slbNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortIndex.setDescription('The port number for which the SLB information pertains.')
slbNewCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortProxyIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortProxyIpAddr.setDescription('The proxy IP address of the interface.')
slbNewCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4), ("failOver", 5), ("failOver-stanby", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setDescription('The SLB state of the port. none(1) - not SLB port client(2) - SLB client port server(3) - SLB server port client-server(4) - SLB client and server port FailOver(5) - SLB fail over port failOver-stanby(6) - SLB fail port operating as standby (a read-only state)')
slbNewCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setDescription('Enable or disable hot standby processing on the switch port.')
slbNewCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setDescription('Enable or disable inter-switch processing on the switch port.')
slbNewCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setDescription('Enable or disable use of proxy IP address on the switch port.')
slbCurCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgImask.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgImask.setDescription('The virtual and real IP address mask - corresponding to the imask command of the slb configuration menu.')
slbNewCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgImask.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgImask.setDescription('The virtual and real IP address mask - corresponding to the imask command of the slb configuration menu.')
slbCurCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMnet.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgMnet.setDescription('The management network - corresponding to the mnet command of the slb configuration menu.')
slbNewCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMnet.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgMnet.setDescription('The management network - corresponding to the mnet command of the slb configuration menu.')
slbCurCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgMmask.setDescription('The management subnet mask - corresponding to the mmask command of the slb configuration menu.')
slbNewCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgMmask.setDescription('The management subnet mask - corresponding to the mmask command of the slb configuration menu.')
slbCurCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setDescription('The RADIUS authentication string. The string is used for generating encrypted authentication string for RADIUS health check.')
slbNewCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setDescription('The RADIUS authentication string. The string is used for generating encrypted authentication string for RADIUS health check.')
slbCurCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDirectMode.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgDirectMode.setDescription('Enable or disable direct access mode. It allows direct access to real servers and any combination of virtual and real servers when set to enabled(1).')
slbNewCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgDirectMode.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgDirectMode.setDescription('Enable or disable direct access mode. It allows direct access to real servers and any combination of virtual and real servers when set to enabled(1).')
slbCurCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPmask.setDescription('The persistent mask - corresponding to the pmask command of the slb configuration menu.')
slbNewCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPmask.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPmask.setDescription('The persistent mask - corresponding to the pmask command of the slb configuration menu.')
slbCurCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGrace.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGrace.setDescription('Enable or disable graceful server failure. It allows to keep the connection to the failure real servers when set to enabled(1).')
slbNewCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGrace.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGrace.setDescription('Enable or disable graceful server failure. It allows to keep the connection to the failure real servers when set to enabled(1).')
slbCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32), )
if mibBuilder.loadTexts: slbCurCfgPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerTable.setDescription('The table of Synch Peer Switch configuration in the current_config.')
slbCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgPeerIndex"))
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setDescription('Information about Synch Peer Switch configuration.')
slbCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setDescription('The index for synch peer switchs.')
slbCurCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setDescription('The IP address of the peer switch.')
slbCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgPeerState.setDescription('Enable or disable the peer switch.')
slbNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33), )
if mibBuilder.loadTexts: slbNewCfgPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerTable.setDescription('The table of Synch Peer Switch configuration in the new_config.')
slbNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgPeerIndex"))
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setDescription('Information about synch peer switch configuration.')
slbNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setDescription('The index number for synch peer switchs.')
slbNewCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setDescription('The IP address of the peer switch.')
slbNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerState.setDescription('Enable or disable the peer switch.')
slbNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbCurCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setDescription('Enable or disable synch filter configuration.')
slbNewCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setDescription('Enable or disable synch filter configuration.')
slbCurCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncPort.setDescription('Enable or disable synch port configuration.')
slbNewCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncPort.setDescription('Enable or disable synch port configuration.')
slbCurCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setDescription('Enable or disable synch VRRP Priorities.')
slbNewCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setDescription('Enable or disable synch VRRP Priorities.')
slbCurCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPip.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgSyncPip.setDescription('Enable or disable synch proxy IP addresses.')
slbNewCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPip.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgSyncPip.setDescription('Enable or disable synch proxy IP addresses.')
slbCurCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setDescription('Enable or disable Virtual Matrix Architecture.')
slbNewCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setDescription('Enable or disable Virtual Matrix Architecture.')
slbCurCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1), )
if mibBuilder.loadTexts: slbCurCfgFailOverTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverTable.setDescription('The table of current switch fail-over configuration.')
slbCurCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgFailOverIndex"))
if mibBuilder.loadTexts: slbCurCfgFailOverTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverTblEntry.setDescription('A row in the current switch fail-over configuration table.')
slbCurCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverIndex.setDescription('The index of current switch fail-over configuration table.')
slbCurCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverPrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverPrimaryIp.setDescription('The IP address of the Primary switch.')
slbCurCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverSecondaryIp.setDescription('The IP address of the Secondary switch.')
slbCurCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSilenceInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverSilenceInterval.setDescription('Number of seconds before a silent peer is assumed down.')
slbCurCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverState.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverState.setDescription('Enable or disable slb switch failover feature.')
slbCurCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverRouteSupply.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgFailOverRouteSupply.setDescription('Enable or disable to supply network routes update when switch is a standby switch.')
slbNewCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2), )
if mibBuilder.loadTexts: slbNewCfgFailOverTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverTable.setDescription('The table of new switch fail-over configuration.')
slbNewCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgFailOverIndex"))
if mibBuilder.loadTexts: slbNewCfgFailOverTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverTblEntry.setDescription('A row in the new switch fail-over configuration table.')
slbNewCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverIndex.setDescription('The index of new switch fail-over configuration table.')
slbNewCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverPrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverPrimaryIp.setDescription('The IP address of the Primary switch.')
slbNewCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverSecondaryIp.setDescription('The IP address of the Secondary switch.')
slbNewCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSilenceInterval.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverSilenceInterval.setDescription('Number of seconds before a silent peer is assumed down.')
slbNewCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverState.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverState.setDescription('Enable or disable slb switch failover feature.')
slbNewCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverRouteSupply.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgFailOverRouteSupply.setDescription('Enable or disable to supply network routes update when switch is a standby switch.')
slbCurCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setDescription('The global state of Server Load Balancing.')
slbNewCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setDescription('The global state of Server Load Balancing.')
slbCurCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlExpTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpTable.setDescription('The table of URL expressions in the current_config.')
slbCurCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlExpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpTableEntry.setDescription('Information about a expression for URL parsing.')
slbCurCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpIndex.setDescription('The URL expressions table index.')
slbCurCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpression.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlExpression.setDescription('The expressions for URL parsing.')
slbNewCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlExpTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpTable.setDescription('The table of URL expressions in the new_config.')
slbNewCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlExpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpTableEntry.setDescription('Information about a expression for URL parsing.')
slbNewCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlExpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpIndex.setDescription('The URL expressions table index.')
slbNewCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpression.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpression.setDescription('The expressions for URL parsing.')
slbNewCfgUrlExpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlExpDelete.setDescription('Action object to delete an URL expression. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
slbCurCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when HTTP non-GETs are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when HTTP non-GETs are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when user cookies are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when user cookies are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when no-cache header are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbNewCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setDescription('This is for controlling if the switch should redirect packet to the origin server when no-cache header are detected. enabled(1) - Allow redirect traffic to the origin server disabled(2)- redirect to a group of servers')
slbCurCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash onto server')
slbNewCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setDescription('Specify the number of bytes in the URI will be used to hash onto server')
slbCurCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the cache server based on HTTP header. enabled(1) - Redirect web traffic based on HTTP header disabled(2)- Redirect web traffic based on URI')
slbNewCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setDescription('This is for controlling if the switch should redirect packet to the cache server based on HTTP header. enabled(1) - Redirect web traffic based on HTTP header disabled(2)- Redirect web traffic based on URI')
slbCurCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setDescription('HTTP header name')
slbNewCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setDescription('HTTP header name')
slbCurCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the current_config.')
slbCurCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbCurCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbCurCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setDescription('The URL path for URL load balancing.')
slbNewCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setDescription('The table of URL path for URL load balancing in the new_config.')
slbCurCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot bind client's request to servers.")
slbNewCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setDescription("Customize error message to send back to client when switch cannot bind client's request to servers.")
slbNewCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setDescription('Information about an URL path for URL load balancing.')
slbNewCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setDescription('The URL path table index.')
slbNewCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setDescription('The URL path for URL load balancing.')
slbNewCfgUrlLbPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setStatus('mandatory')
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setDescription('Action object to delete an URL Path. When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
pmCurCfgMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMonitoringPort.setStatus('mandatory')
if mibBuilder.loadTexts: pmCurCfgMonitoringPort.setDescription('The port number of the monitoring port.')
pmNewCfgMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMonitoringPort.setStatus('mandatory')
if mibBuilder.loadTexts: pmNewCfgMonitoringPort.setDescription('The port number of the monitoring port.')
pmCurCfgMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMirroredPort.setStatus('mandatory')
if mibBuilder.loadTexts: pmCurCfgMirroredPort.setDescription('The port number of the mirrored port.')
pmNewCfgMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMirroredPort.setStatus('mandatory')
if mibBuilder.loadTexts: pmNewCfgMirroredPort.setDescription('The port number of the mirrored port.')
pmCurCfgMonitoredTraffic = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("received", 3), ("transmitted", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMonitoredTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: pmCurCfgMonitoredTraffic.setDescription('The type of traffic to be monitored with respect to the mirrored port.')
pmNewCfgMonitoredTraffic = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("received", 3), ("transmitted", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMonitoredTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: pmNewCfgMonitoredTraffic.setDescription('The type of traffic to be monitored with respect to the mirrored port.')
pmCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: pmCurCfgState.setDescription('The state of Port mirroring.')
pmNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: pmNewCfgState.setDescription('The state of Port mirroring.')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setDescription('The maximum number of entries in trunk group table.')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupCurCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setDescription('Default BW contract of a trunk group.')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setDescription('The port to be added in the trunk group. When read, 0 is returned.')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setDescription('The port to be deleted from the trunk group. when read, 0 is returned.')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setDescription('Setting the value to delete(2) will delete the entire row. When read, other(1) is returned.')
trunkGroupNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setDescription('Default BW contract of a trunk group.')
fltCfgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCfgTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: fltCfgTableMaxSize.setDescription('The maximum number of filtering table entries.')
fltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2), )
if mibBuilder.loadTexts: fltCurCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTable.setDescription('The filtering table in the new configuration block.')
fltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltCurCfgIndx"))
if mibBuilder.loadTexts: fltCurCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTableEntry.setDescription('A row in the filtering table.')
fltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgIndx.setDescription('The filtering table index.')
fltCurCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcIp.setDescription('The source IP address to be filtered.')
fltCurCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setDescription('The source IP sub-net mask for filtering.')
fltCurCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstIp.setDescription('The destination IP address to be filtered.')
fltCurCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setDescription('The destination IP sub-net mask for filtering.')
fltCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgProtocol.setDescription('The protocol to be filtered.')
fltCurCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setDescription("The higher source TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setDescription("The lower source TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setDescription("The lower destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setDescription("The higher destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAction.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAction.setDescription('The action for the filtering rule.')
fltCurCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRedirPort.setDescription('The real server port number used for redirection.')
fltCurCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setDescription('The real server group to be redirected to.')
fltCurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLog.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgLog.setDescription('Enable or disable logging.')
fltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgState.setDescription('The state of this filtering rule.')
fltCurCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNat.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgNat.setDescription('The selection of destination or source for network address translatin.')
fltCurCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgCache.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgCache.setDescription('Enable or disable caching sessions that match filter.')
fltCurCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgInvert.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgInvert.setDescription('Turn the invert logic on or off for the filter entry.')
fltCurCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgClientProxy.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgClientProxy.setDescription('Enable or disable client proxy.')
fltCurCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgTcpAck.setDescription('Enable or disable filtering on matching TCP ACK and RST flag.')
fltCurCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlRedir.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgUrlRedir.setDescription('Enable or disable URL redirection. The URL expressions are defined in slbCurCfgUrlTable.')
fltCurCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgSrcMac.setDescription('The source MAC address to be filtered.')
fltCurCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 23), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgDstMac.setDescription('The Destination MAC address to be filtered.')
fltCurCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setDescription('Enable or disable FTP NAT for active ftp only.')
fltCurCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setDescription('Enable or disable TCP URG packet.')
fltCurCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setDescription('Enable or disable TCP ACK packet.')
fltCurCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setDescription('Enable or disable TCP PSH packet.')
fltCurCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setDescription('Enable or disable TCP RST packet.')
fltCurCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setDescription('Enable or disable TCP SYN packet.')
fltCurCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setDescription('Enable or disable TCP FIN packet.')
fltCurCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setDescription('ICMP type to be filtered.')
fltCurCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("rroute", 2), ("tstamp", 3), ("loose", 4), ("strict", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setDescription('Select an IP option to filter.')
fltCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgBwmContract.setDescription('Filt default BW contract number.')
fltCurCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setDescription('The IP TOS value to be filtered.')
fltCurCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setDescription('The IP TOS mask for filtering.')
fltCurCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setDescription('The new IP TOS value to over-write when filtering fired.')
fltCurCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFwlb.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgFwlb.setDescription('Enable or disable filtering on firewall redirect hash method.')
fltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3), )
if mibBuilder.loadTexts: fltNewCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTable.setDescription('The filtering table in the new configuration block.')
fltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltNewCfgIndx"))
if mibBuilder.loadTexts: fltNewCfgTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTableEntry.setDescription('A row in the filtering table.')
fltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgIndx.setDescription('The filtering table index.')
fltNewCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcIp.setDescription('The source IP address to be filtered.')
fltNewCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setDescription('The source IP sub-net mask for filtering.')
fltNewCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIp.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstIp.setDescription('The destination IP address to be filtered.')
fltNewCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setDescription('The destination IP sub-net mask for filtering.')
fltNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgProtocol.setDescription('The protocol to be filtered.')
fltNewCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setDescription("The higher source TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setDescription("The lower source TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setDescription("The lower destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setDescription("The higher destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAction.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAction.setDescription('The action for the filtering rule.')
fltNewCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirPort.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRedirPort.setDescription('The real server port number used for redirection.')
fltNewCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setDescription('The real server group to be redirected to.')
fltNewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLog.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgLog.setDescription('Enable or disable logging.')
fltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgState.setDescription('The state of this filtering rule.')
fltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
fltNewCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNat.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgNat.setDescription('The selection of destination or source for network address translatin.')
fltNewCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgCache.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgCache.setDescription('Enable or disable caching sessions that match filter.')
fltNewCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgInvert.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgInvert.setDescription('Turn the invert logic on or off for the filter entry.')
fltNewCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgClientProxy.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgClientProxy.setDescription('Enable or disable client proxy.')
fltNewCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgTcpAck.setDescription('Enable or disable filtering on matching TCP ACK and RST flag.')
fltNewCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlRedir.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgUrlRedir.setDescription('Enable or disable URL redirection. The URL expressions are defined in slbNewCfgUrlTable.')
fltNewCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 23), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgSrcMac.setDescription('The source MAC address to be filtered.')
fltNewCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 24), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstMac.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgDstMac.setDescription('The Destination MAC address to be filtered.')
fltNewCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setDescription('Enable or disable FTP NAT for active ftp.')
fltNewCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setDescription('E or disable TCP URG packet.')
fltNewCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setDescription('Enable or disable TCP ACK packet.')
fltNewCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setDescription('Enable or disable TCP PSH packet.')
fltNewCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setDescription('Enable or disable TCP RST packet.')
fltNewCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setDescription('Enable or disable TCP SYN packet.')
fltNewCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setDescription('Enable or disable TCP FIN packet.')
fltNewCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setDescription('ICMP type to be filtered.')
fltNewCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("rroute", 2), ("tstamp", 3), ("loose", 4), ("strict", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setDescription('Select an IP option to filter.')
fltNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgBwmContract.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgBwmContract.setDescription('Filt default BW contract number.')
fltNewCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setDescription('The IP TOS value to be filtered.')
fltNewCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setDescription('The IP TOS mask for filtering.')
fltNewCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setDescription('The new IP TOS value to over-write when filtering fired.')
fltNewCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFwlb.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgFwlb.setDescription('Enable or disable filtering on firewall redirect hash method.')
fltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4), )
if mibBuilder.loadTexts: fltCurCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortTable.setDescription('The filtering port table in the current configuration block.')
fltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltCurCfgPortIndx"))
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setDescription('A row in the filtering port table.')
fltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortIndx.setDescription('The port index.')
fltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortState.setDescription('Enable or disable filtering.')
fltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setStatus('mandatory')
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltCurCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
fltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5), )
if mibBuilder.loadTexts: fltNewCfgPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortTable.setDescription('The filtering port table in the new configuration block.')
fltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltNewCfgPortIndx"))
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setDescription('A row in the filtering port table.')
fltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortIndx.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortIndx.setDescription('The port index.')
fltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortState.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortState.setDescription('Enable or disable filtering.')
fltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltNewCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
fltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setDescription("This is an action object to add filtering rule to a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be added to the port. The range of the valid index is between 1 and fltCurCfgTableMaxSize. When read, the value '0' is returned always.")
fltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setStatus('mandatory')
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setDescription("This is an action object to remove filtering rule from a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be removed from the port. The range of the valid index is between 1 and fltCurCfgTableMaxSize. When read, the value '0' is returned always.")
gslbCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenState.setDescription('Trun on or off Distributed Server Load Balance in the current_configuration block.')
gslbNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenState.setDescription('Trun on or off Distributed Server Load Balance in the new_configuration block.')
gslbCurCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsHandoff.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenDnsHandoff.setDescription('Enable/Disable DNS handoffs in the current_configuration block.')
gslbNewCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsHandoff.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenDnsHandoff.setDescription('Enable/Disable DNS handoffs in the new_configuration block.')
gslbCurCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsTTL.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenDnsTTL.setDescription('Time to live value in minute of DNS resource records in the current_configuration block.')
gslbNewCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsTTL.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenDnsTTL.setDescription('Time to live value in minute of DNS resource records in the new_configuration block.')
gslbCurCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setDescription('Enable/Disable DNS handoffs in the current_configuration block.')
gslbNewCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setDescription('Enable/Disable DNS handoffs in the new_configuration block.')
gslbCurCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateInterval.setDescription('The time interval in minute for updating remote site status in the current_configuration block.')
gslbNewCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateInterval.setDescription('The time interval in minute for updating remote site status in the new_configuration block.')
gslbCurCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsLocalPref.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenDnsLocalPref.setDescription('Enable/Disable DNS responses with only local addresses.')
gslbNewCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsLocalPref.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenDnsLocalPref.setDescription('Enable/Disable DNS responses with only local addresses.')
gslbCurCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setDescription('Minmum number of site connections in the current_configuration block.')
gslbNewCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setDescription('Minmum number of site connections in the new_configuration block.')
gslbCurCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenOne.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenOne.setDescription('Enable/Disable DNS responses with only one address in the current_configuration block.')
gslbNewCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenOne.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenOne.setDescription('Enable/Disable DNS responses with only one address in the new_configuration block.')
gslbCurCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setDescription('Enable/Disable HTTP redirect to real server name in the current_configuration block.')
gslbNewCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setDescription('Enable/Disable HTTP redirect to real server name in the new_configuration block.')
gslbCurCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenGeo.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenGeo.setDescription('Enable/Disable geographic awareness in the current_configuration block.')
gslbNewCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenGeo.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenGeo.setDescription('Enable/Disable geographic awareness in the new_configuration block.')
gslbCurCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookups.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenLookups.setDescription('Enable or disable network preference lookups.')
gslbNewCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookups.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenLookups.setDescription('Enable or disable network preference lookups.')
gslbCurCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupDname.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenLookupDname.setDescription('Domain name for internal lookup table')
gslbNewCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupDname.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenLookupDname.setDescription('Domain name for internal lookup table')
gslbNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5))
gslbCurCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenExternal.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenExternal.setDescription('Enable or disable external lookups.')
gslbNewCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenExternal.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenExternal.setDescription('Enable or disable external lookups.')
gslbCurCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenEip.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenEip.setDescription('External lookup IP address')
gslbNewCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenEip.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenEip.setDescription('External lookup IP address')
gslbCurCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupPort.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenLookupPort.setDescription('External lookup UDP port number')
gslbNewCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupPort.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenLookupPort.setDescription('External lookup UDP port number')
gslbCurCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgGenLookupTimeout.setDescription('External lookup Timeout Interval')
gslbNewCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgGenLookupTimeout.setDescription('External lookup Timeout Interval')
gslbNetworkTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNetworkTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNetworkTableMaxSize.setDescription('The maximum number of GSLB Internet network preference entries.')
gslbCurCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2), )
if mibBuilder.loadTexts: gslbCurCfgNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkTable.setDescription('The table of Internet network preference configuration in the current_config.')
gslbCurCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbCurCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbCurCfgNetworkTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkTableEntry.setDescription('The table about a network preference entry configuration.')
gslbCurCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkIndx.setDescription('The current Internet network preference table index.')
gslbCurCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkSourceIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkSourceIp.setDescription('The Source IP address of the network table.')
gslbCurCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkNetMask.setDescription('The Net mask of the network table.')
gslbCurCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip1.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkVip1.setDescription('The Vip1 of the network table.')
gslbCurCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip2.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgNetworkVip2.setDescription('The Vip2 of the network table.')
gslbNewCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3), )
if mibBuilder.loadTexts: gslbNewCfgNetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkTable.setDescription('The table of Internet network preference configuration in the new_config.')
gslbNewCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbNewCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbNewCfgNetworkTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkTableEntry.setDescription('The table about a network preference entry configuration.')
gslbNewCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgNetworkIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkIndx.setDescription('The new Internet network preference table index.')
gslbNewCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkSourceIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkSourceIp.setDescription('The Source IP address of the network table.')
gslbNewCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkNetMask.setDescription('The Net mask of the network table.')
gslbNewCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip1.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkVip1.setDescription('The Vip1 of the network table.')
gslbNewCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip2.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkVip2.setDescription('The Vip2 of the network table.')
gslbNewCfgNetworkDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkDelete.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgNetworkDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: dnsCurCfgDomainName.setDescription('The DNS doamin name in the current_configuration block.')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNewCfgDomainName.setDescription('The DNS doamin name in the new_configuration block.')
gslbRemSiteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setDescription('The maximum number of GSLB remote sites.')
gslbCurCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2), )
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setDescription('The GSLB remote sites table in the current configuration block.')
gslbCurCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbCurCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setDescription('A row in the GSLB remote sites table.')
gslbCurCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setDescription('The GSLB remote sites table index.')
gslbCurCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setDescription('The primary IP address of the remote site in the current_configuration block.')
gslbCurCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site in the current_configuration block.')
gslbCurCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setDescription('Enable/Disable GSLB for the remote site in the current_configuration block.')
gslbCurCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setDescription('Enable/Disable GSLB for the remote site status update in the current_configuration block.')
gslbNewCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3), )
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setDescription('The GSLB remote sites table in the current configuration block.')
gslbNewCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbNewCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setDescription('A row in the GSLB remote sites table.')
gslbNewCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setDescription('The GSLB remote sites table index.')
gslbNewCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setDescription('The primary IP address of the remote site in the new_configuration block.')
gslbNewCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site in the new_configuration block.')
gslbNewCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setDescription('Enable/Disable GSLB for the remote site in the new_configuration block.')
gslbNewCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setDescription('Enable/Disable GSLB for the remote site status update in the new_configuration block.')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other virtual routers.')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other virtual routers.')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other router interfaces.')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other router interfaces.')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the port state of ports that belongs to the same virtual LAN as the virtual router.')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the port state of ports that belongs to the same virtual LAN as the virtual router.')
vrrpCurCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the Layer 4 port states. This is valid when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the Layer 4 port states. This is valid when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of real servers under the virtual server which is configured as a VRRP virtual router.')
vrrpNewCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of real servers under the virtual server which is configured as a VRRP virtual router.')
vrrpCurCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the HSRP advertisements.')
vrrpNewCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the HSRP advertisements.')
vrrpCurCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setDescription('Enable or disable hotstandby processing.')
vrrpNewCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setDescription('Enable or disable hotstandby processing.')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpCurCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setDescription('The VRRP interface index. This is eqivalent to IfIndex.')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setDescription('Type of authentication being used. none(1) - no authentication simple-text-password(2) - use password specified in vrrpCurCfgIfPasswd for authentication.')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setDescription('The VRRP interface index. This is eqivalent to IfIndex.')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setDescription('Type of authentication being used. none(1) - no authentication simple-text-password(2) - use password specified in vrrpNewCfgIfPasswd for authentication.')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group configuration in current_config.')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpCurCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpCurCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group configuration in new_config.')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpNewCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
ripStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatInPkts.setDescription('The total number of good RIP packets recieved.')
ripStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatOutPkts.setDescription('The total number of RIP packets transmitted.')
ripStatInErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInErrorPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ripStatInErrorPkts.setDescription('The total number of error RIP packets recieved.')
slbStatPortMaintTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: slbStatPortMaintTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintTable.setDescription('The table of SLB port maintenance statistics.')
slbStatPortMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatPortMaintPortIndex"))
if mibBuilder.loadTexts: slbStatPortMaintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintEntry.setDescription('A row in the SLB port maintenance statistcs table.')
slbStatPortMaintPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintPortIndex.setDescription('The port number for which the statistics apply.')
slbStatPortMaintCurBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintCurBindings.setDescription('The current number of bindings on the port.')
slbStatPortMaintBindingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintBindingFails.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintBindingFails.setDescription('The total number of Binding failures on the port. A Binding Failure occurs when a port runs out of binding table entries.')
slbStatPortMaintNonTcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintNonTcpFrames.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintNonTcpFrames.setDescription('The total number of non-TCP/IP frames dropped on the port.')
slbStatPortMaintTcpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintTcpFragments.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintTcpFragments.setDescription('The total number of TCP fragments dropped on the port.')
slbStatPortMaintUdpDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintUdpDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintUdpDatagrams.setDescription('The total number of UDP datagrams dropped on the port.')
slbStatPortMaintIncorrectVIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVIPs.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVIPs.setDescription('The total number of frames with incorrect VIPs that are dropped on the port.')
slbStatPortMaintIncorrectVports = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVports.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVports.setDescription('The total number of frames with incorrect Virtual Port that are dropped on the port.')
slbStatPortMaintRealServerNoAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintRealServerNoAvails.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintRealServerNoAvails.setDescription('The total number of frames that are dropped on the port because no real server is available.')
slbStatPortMaintFilteredDeniedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintFilteredDeniedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortMaintFilteredDeniedFrames.setDescription('The total number of frames that are denied on the port by the filter.')
slbStatMaintBackupServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setDescription('The total number of times that backup servers become active due to failure of primary servers.')
slbStatMaintOverflowServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setDescription('The total number of times that backup servers become active due to primary servers reach overflow situation.')
slbStatPortRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2), )
if mibBuilder.loadTexts: slbStatPortRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerTable.setDescription('The port-server statistics table. This table shows the statistics of real servers that are connectted to switch ports.')
slbStatPortRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatPortRealServerPortIndex"), (0, "ALTEON-PRIVATE-MIBS", "slbStatPortRealServerServerIndex"))
if mibBuilder.loadTexts: slbStatPortRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerEntry.setDescription('A row in the port-server statistics table.')
slbStatPortRealServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerPortIndex.setDescription('The port number that identifies the switch port.')
slbStatPortRealServerServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerServerIndex.setDescription('The real server number that identifies the server.')
slbStatPortRealServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerCurrSessions.setDescription('The current sessions for the real server.')
slbStatPortRealServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerTotalSessions.setDescription('The total number of sessions for the real server.')
slbStatPortRealServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctets.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerHCOctets.setDescription('The total number of octets received and transmitted out of the real server on a particular port.')
slbStatPortRealServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsLow32.setDescription('The lower 32 bit value of the total octets received and transmitted out of the real server on a particular port.')
slbStatPortRealServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsHigh32.setDescription('The higher 32 bit value of the total octets received and transmitted out of the real server on a particular port.')
slbStatRServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5), )
if mibBuilder.loadTexts: slbStatRServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerTable.setDescription('The real server statistics table.')
slbStatRServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatRServerIndex"))
if mibBuilder.loadTexts: slbStatRServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerEntry.setDescription('The statistics of a particular real server.')
slbStatRServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerIndex.setDescription('The real server number that identifies the server.')
slbStatRServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setDescription('The number of sessions that are currently handled by the real server.')
slbStatRServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setDescription('The total number of sessions that are handled by the real server.')
slbStatRServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerFailures.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerFailures.setDescription('The total number of times that the real server is claimed down.')
slbStatRServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setDescription('The highest sessions that have been handled by the real server.')
slbStatRServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctets.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHCOctets.setDescription('The total number of octets received and transmitted out of the real server.')
slbStatRServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the real server.')
slbStatRServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the real server.')
slbStatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6), )
if mibBuilder.loadTexts: slbStatGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupTable.setDescription('The real server group statistics table.')
slbStatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatGroupIndex"))
if mibBuilder.loadTexts: slbStatGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupEntry.setDescription('The statistics of a particular real server group.')
slbStatGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupIndex.setDescription('The real server group number that identifies the group.')
slbStatGroupCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setDescription('The number of sessions that are currently handled by the real server group.')
slbStatGroupTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setDescription('The total number of sessions that are handled by the real server group.')
slbStatGroupHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setDescription('The highest sessions that have been handled by the real server.')
slbStatGroupHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctets.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHCOctets.setDescription('The total number of octets received and transmitted out of the real server group.')
slbStatGroupHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the real server group.')
slbStatGroupHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the real server group.')
slbStatVServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7), )
if mibBuilder.loadTexts: slbStatVServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerTable.setDescription('The virtual server statistics table.')
slbStatVServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatVServerIndex"))
if mibBuilder.loadTexts: slbStatVServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerEntry.setDescription('The statistics of a particular virtual server group.')
slbStatVServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerIndex.setDescription('The virtual server number that identifies the server.')
slbStatVServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setDescription('The number of sessions that are currently handled by the virtual server.')
slbStatVServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setDescription('The total number of sessions that are handled by the virtual server.')
slbStatVServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setDescription('The highest sessions that have been handled by the real server.')
slbStatVServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctets.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHCOctets.setDescription('The total number of octets received and transmitted out of the virtual server.')
slbStatVServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the virtual server.')
slbStatVServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the virtual server.')
slbStatVServerHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setDescription('The current HTTP header hits.')
slbStatVServerHeaderMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setDescription('The current HTTP header misses.')
slbStatVServerHeaderTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setDescription('The total HTTP header sessions.')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('mandatory')
if mibBuilder.loadTexts: arpStatEntries.setDescription('The current number of ARP entries.')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('mandatory')
if mibBuilder.loadTexts: arpStatHighWater.setDescription('The highest number of ARP entries.')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: arpStatMaxEntries.setDescription('The maximum number of ARP entries.')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatEntries.setDescription('The current number of IP routes.')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatHighWater.setDescription('The highest number of IP routes.')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: routeStatMaxEntries.setDescription('The maximum number of IP routes.')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('mandatory')
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setDescription('The number of good DNS requests which are received.')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('mandatory')
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setDescription('The number of bad DNS requests which are received.')
fltStatTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1), )
if mibBuilder.loadTexts: fltStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatTable.setDescription('The filter statistics table.')
fltStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltStatFltIndex"))
if mibBuilder.loadTexts: fltStatTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatTableEntry.setDescription('A row in filter statistics table.')
fltStatFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatFltIndex.setDescription('The number that identifies the filter.')
fltStatFltFirings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltFirings.setStatus('mandatory')
if mibBuilder.loadTexts: fltStatFltFirings.setDescription('The number of instances that the received packet matches the filter rule.')
gslbStatRemRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1), )
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setDescription('The GSLB remote real server statistics table.')
gslbStatRemRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbStatRemRealServerIndex"))
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setDescription('A row in the remote real server statistics table.')
gslbStatRemRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setDescription('The server number that identifies the remote real server.')
gslbStatRemRealServerDnsHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setDescription('The number of DNS hanfoffs by the remote real server.')
gslbStatRemRealServerHttpRedirs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setDescription('The number of HTTP redirections by the remote real server.')
gslbStatMaintInGoodSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setDescription('The number of good remote site updates which are received.')
gslbStatMaintInBadSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setDescription('The number of bad remote site updates which are received.')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatInAdvers.setDescription('The number of good VRRP advertisements which are received.')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatOutAdvers.setDescription('The number of good VRRP advertisements which are transmitted.')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setDescription('The number of bad VRRP advertisements which are received.')
ftpSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1))
ftpSlbStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSlbStatTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ftpSlbStatTotal.setDescription('The total number of ftp control sesssion for SLB received after FTP parsing turn on.')
ftpNatStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNatStatTotal.setStatus('mandatory')
if mibBuilder.loadTexts: ftpNatStatTotal.setDescription('The total number of FTP control session for NAT received after active FTP is turn on.')
urlRedirStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1))
urlStatRedRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRedirs.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedRedirs.setDescription('The number of instances that the received packet matches the specified URL expressions and redirected to specified group of real servers.')
urlStatRedOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setDescription('The number of instances that the received packet is sent to the origin server due to mis-match with the specified URL expressions or detecting of HTTP non-GETs,user cookies, and no-cache as users configuration.')
urlStatRedNonGets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNonGets.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedNonGets.setDescription('The number of instances that the received packet contains none GETs(POST ,HEAD ,PUT..) methods.')
urlStatRedCookie = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedCookie.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedCookie.setDescription("The number of instances that the received packet contains a 'Cookie: ' header.")
urlStatRedNoCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNoCache.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatRedNoCache.setDescription('The number of instances that the received packet contains a no-cache header value.')
urlSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2))
urlStatSlbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1), )
if mibBuilder.loadTexts: urlStatSlbPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathTable.setDescription('The statistics table of instances that URL pathes matched.')
urlStatSlbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setDescription('Information about the number of instances that are load-balanced due to match of a particular URL path.')
urlStatSlbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathIndex.setDescription('The URL path table index.')
urlStatSlbPathHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathHits.setStatus('mandatory')
if mibBuilder.loadTexts: urlStatSlbPathHits.setDescription('The number of instances that are load-balanced due to match of the particular URL path.')
tcpStatCurConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatCurConns.setStatus('mandatory')
if mibBuilder.loadTexts: tcpStatCurConns.setDescription('The total number of outstanding TCP connections have been established.')
tcpStatHalfOpens = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatHalfOpens.setStatus('mandatory')
if mibBuilder.loadTexts: tcpStatHalfOpens.setDescription('The total number of outstanding TCP connections have been half opened. This statistics is valid only when URL parsing has been truned on. It is incremented when the switch respond to TCP SYN packet and decremented upon receiving TCP SYN ACK packet from the requester.')
memStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsAllocs.setDescription('The total number of memory allocations.')
memStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsFrees.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsFrees.setDescription('The total number of memory frees.')
memStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsAllocFails.setDescription('The total number of memory allocations failed.')
memStatsBytesCurr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesCurr.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsBytesCurr.setDescription('The outstanding memory in bytes have been allocated.')
memStatsBytesHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesHiwat.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsBytesHiwat.setDescription('The highest number of bytes have even been allocated.')
memStatsPoolBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsPoolBytes.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsPoolBytes.setDescription('The total bytes in the memory pool.')
memStatsLargest = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsLargest.setStatus('mandatory')
if mibBuilder.loadTexts: memStatsLargest.setDescription('The largest block has been allocated.')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsAllocs.setDescription('The total packets have been allocated.')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsFrees.setDescription('The total packets have been freed.')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsAllocFails.setDescription('The total packet allocations failed.')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsMediums.setDescription('The number of medium size packets have been allocated.')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsJumbos.setDescription('The number of jumbo size packets have been allocated.')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('mandatory')
if mibBuilder.loadTexts: pktStatsSmalls.setDescription('The number of small size packets have been allocated.')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoTable.setDescription('The table of port information.')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoTableEntry.setDescription('A row in the port information table.')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoIndx.setDescription('The port index.')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mbs10", 2), ("mbs100", 3), ("mbs1000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoSpeed.setDescription('The current operational speed of the port.')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoMode.setDescription('The current operational mode of the port.')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoFlowCtrl.setDescription('The current operational flow control of the port.')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('mandatory')
if mibBuilder.loadTexts: portInfoLink.setDescription('The current operational link status of the port.')
slbFailOverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1), )
if mibBuilder.loadTexts: slbFailOverInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoTable.setDescription('The table of switch fail-over run-time status.')
slbFailOverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbFailOverInfoIndex"))
if mibBuilder.loadTexts: slbFailOverInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoEntry.setDescription('A row in the switch fail-over information table.')
slbFailOverInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoIndex.setDescription('The index of switch fail-over information table.')
slbFailOverInfoPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoPrimaryIp.setDescription('IP address of the primary switch.')
slbFailOverInfoPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoPrimaryStatus.setDescription('The current operational status of the primary switch.')
slbFailOverInfoPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryState.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoPrimaryState.setDescription('The current operational state of the primary switch.')
slbFailOverInfoSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryIp.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoSecondaryIp.setDescription('IP address of the secondary switch.')
slbFailOverInfoSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoSecondaryStatus.setDescription('The current operational status of the secondary switch.')
slbFailOverInfoSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryState.setStatus('mandatory')
if mibBuilder.loadTexts: slbFailOverInfoSecondaryState.setDescription('The current operational state of the secondary switch.')
slbRealServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2), )
if mibBuilder.loadTexts: slbRealServerInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoTable.setDescription('The table of real server run-time information.')
slbRealServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbRealServerInfoIndex"))
if mibBuilder.loadTexts: slbRealServerInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoEntry.setDescription('A row in the real server information table.')
slbRealServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoIndex.setDescription('The real server index')
slbRealServerInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setDescription('IP address of the real server.')
slbRealServerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerMacAddr.setDescription('The MAC address of the real server.')
slbRealServerInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setDescription('The switch port that the real server is connected to.')
slbRealServerInfoHealthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("layer3", 2), ("layer4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setDescription('The OSI layer at whitch real server functionality is verified.')
slbRealServerInfoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overflow", 1), ("no-overflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setDescription('The overflow state of the real server.')
slbRealServerInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: slbRealServerInfoState.setDescription('The state of the real server.')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoTable.setDescription('The table of run-time IP routes.')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoEntry.setDescription('A row in the run-time IP route table')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoIndx.setDescription('The index of this route table.')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoDestIp.setDescription('The destination IP address of this route.')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoMask.setDescription('The destination IP mask of this route.')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoGateway.setDescription('The next-hop router address for this route.')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("fixed", 1), ("icmp", 2), ("static", 3), ("snmp", 4), ("addr", 5), ("rip", 6), ("broadcast", 7), ("martian", 8), ("multicast", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoTag.setDescription('The tag-type for this route.')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoType.setDescription('The type of the route.')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouteInfoInterface.setDescription('The interface number for which the destination address is applicable.')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoTable.setDescription('The table of ARP entries.')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoEntry.setDescription('A row in the ARP table')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoDestIp.setDescription('The destination IP address of the ARP entry.')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoMacAddr.setDescription('The MAC address for the ARP entry.')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoVLAN.setDescription('The VLAN identifier for the ARP entry.')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoSrcPort.setDescription("The port number on which this entry's equivalence is effective.")
arpInfoRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoRefPorts.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoRefPorts.setDescription('The rference ports associated with this ARP entry.')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('mandatory')
if mibBuilder.loadTexts: arpInfoFlag.setDescription('The flag associated with this ARP entry.')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setDescription('The table of VRRP virtual router run-time information.')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setDescription('The run-time information about a VRRP virtual router.')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setDescription('The VRRP virtual router index.')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('mandatory')
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setDescription('The VRRP virtual router state.')
dynSLBRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1), )
if mibBuilder.loadTexts: dynSLBRealServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: dynSLBRealServerTable.setDescription('The table of Real Servers.')
dynSLBRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "dynSLBRealServerIpAddr"), (0, "ALTEON-PRIVATE-MIBS", "dynSLBRealServerPortNum"))
if mibBuilder.loadTexts: dynSLBRealServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dynSLBRealServerEntry.setDescription('A row in the Real Server table.')
dynSLBRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dynSLBRealServerIpAddr.setDescription('IP address of the Real Server.')
dynSLBRealServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: dynSLBRealServerPortNum.setDescription('The switch port that the Real Server is connected to.')
dynSLBRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynSLBRealServerWeight.setStatus('mandatory')
if mibBuilder.loadTexts: dynSLBRealServerWeight.setDescription('The Real Server weight. The higher the server weight means the Real Server is allowed to receive more traffic load.')
operSlbPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1), )
if mibBuilder.loadTexts: operSlbPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortTable.setDescription('The table of ports that the Oper commands apply to.')
operSlbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "operSlbPortIndex"))
if mibBuilder.loadTexts: operSlbPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortEntry.setDescription('A row in the operSlbPortTable ')
operSlbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSlbPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortIndex.setDescription('The switch port number.')
operSlbPortClrSessionTab = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSlbPortClrSessionTab.setStatus('mandatory')
if mibBuilder.loadTexts: operSlbPortClrSessionTab.setDescription('This an action object to clear session buinding table for the specified port. ok(1) is returned when read.')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgPort.setDescription('Specify the RADIUS port number.')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgPort.setDescription('Speicfy the RADIUS port number.')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgRetries.setDescription('Number of retries to the RADIUS server.')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgRetries.setDescription('Number of retries to the RADIUS server.')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgState.setDescription('Enable or disbale RADIUS authentication.')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgState.setDescription('Enable or disable RADIUS authentication.')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: radCurCfgAuthenString.setDescription('The RADIUS authentication string.')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('mandatory')
if mibBuilder.loadTexts: radNewCfgAuthenString.setDescription('The RADIUS authentication string.')
bwmGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1))
bwmPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2))
bwmContractConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3))
bwmCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgGenState.setDescription('The state of BWM in the current configuration block.')
bwmNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgGenState.setDescription('The state of BWM in the new configuration block.')
bwmCurCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setDescription('The state of BWM enforce policy in the current configuration block.')
bwmNewCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setDescription('The state of BWM enforce policy in the new configuration block.')
bwmCurCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setDescription('The SMTP user name for BWM in the current configuration block.')
bwmNewCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setDescription('The SMTP user name for BWM in the new configuration block.')
bwmPolicyTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setDescription('The maximum number of rows in the BWM policy configuration table.')
bwmCurCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2), )
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setDescription('The table of BWM traffic policy configuration in the current_configuration block.')
bwmCurCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmCurCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setDescription('A row in the BWM traffic policy configuration table in the current_configuration block.')
bwmCurCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setDescription('The index of the row in BWM traffic policy configurations table.')
bwmCurCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setDescription('This is IP TOS in the profile state of the traffic policy')
bwmCurCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setDescription('This is IP TOS out of profile state of the traffic policy')
bwmCurCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setDescription('The hard speed limit for the traffic policy.')
bwmCurCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setDescription('The soft speed limit for the traffic policy.')
bwmCurCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setDescription('The reservation speed limit for the traffic policy.')
bwmCurCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setDescription('The buffer limit for the traffic policy.')
bwmNewCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3), )
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setDescription('The table of BWM traffi policy configuration in the current_configuration block.')
bwmNewCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmNewCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setDescription('A row in the BWM traffic policy configuration table in the current_configuration block.')
bwmNewCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setDescription('The index of the row in BWM traffic policy configurations table.')
bwmNewCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setDescription('This is IP TOS in the profile state of the traffic policy')
bwmNewCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setDescription('This is IP TOS out of profile state of the traffic policy')
bwmNewCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setDescription('The hard speed limit for the traffic policy.')
bwmNewCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setDescription('The soft speed limit for the traffic policy.')
bwmNewCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setDescription('The reservation speed limit for the traffic policy.')
bwmNewCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setDescription('The buffer limit for the traffic policy.')
bwmContractTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setStatus('mandatory')
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setDescription('The maximum number of rows in the BWM contract configuration table.')
bwmCurCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2), )
if mibBuilder.loadTexts: bwmCurCfgContractTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractTable.setDescription('The table of BWM traffic contract configuration in the current_configuration block.')
bwmCurCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmCurCfgContractIndx"))
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setDescription('A row in the BWM traffic contract configuration table in the current_configuration block.')
bwmCurCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setDescription('The index of the row in BWM traffic contract configurations table.')
bwmCurCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractName.setDescription('The traffic contract name.')
bwmCurCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractState.setDescription('This is the state of the traffic contract.')
bwmCurCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setDescription('This is policy number of the traffic contract')
bwmCurCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setDescription('The precedence value of the traffic contract')
bwmCurCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setDescription('Enable/disable the TOS overwrite of the traffic contract.')
bwmCurCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setStatus('mandatory')
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setDescription('Enable/disable save contract statistics on the TFTP server of the traffic contract.')
bwmNewCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3), )
if mibBuilder.loadTexts: bwmNewCfgContractTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractTable.setDescription('The table of BWM traffic contract configuration in the current_configuration block.')
bwmNewCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmNewCfgContractIndx"))
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setDescription('A row in the BWM traffic contract configuration table in the current_configuration block.')
bwmNewCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setDescription('The index of the row in BWM traffic contract configurations table.')
bwmNewCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractName.setDescription('The traffic contract name.')
bwmNewCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractState.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractState.setDescription('This is the state of the traffic contract.')
bwmNewCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setDescription('This is policy number of the traffic contract')
bwmNewCfgContractDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
bwmNewCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setDescription('The precedence value of the traffic contract')
bwmNewCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setDescription('Enable/disable the TOS overwrite of the traffic contract.')
bwmNewCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setStatus('mandatory')
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setDescription('Enable/disable save contract statistics on the TFTP server of the traffic contract.')
bwmStatTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1), )
if mibBuilder.loadTexts: bwmStatTcTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcTable.setDescription('The table of Bandwidth Management Traffic Contract statistics.')
bwmStatTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatTcContractIndex"))
if mibBuilder.loadTexts: bwmStatTcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcEntry.setDescription('A row in the BWM traffic contract table.')
bwmStatTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcName.setDescription('The name of the traffic contract queue.')
bwmStatTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcOutoct.setDescription('The total number of octets sent out from the traffic contract queue.')
bwmStatTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2), )
if mibBuilder.loadTexts: bwmStatTcrTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrTable.setDescription('The table of Bandwidth Management Traffic Contract Rate statistics.')
bwmStatTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatTcrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrEntry.setDescription('A row in the BWM traffic contract rate table.')
bwmStatTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrName.setDescription('The name of the traffic contract queue.')
bwmStatTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrRate.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrRate.setDescription('The rate of octets sent out from the traffic contract queue.')
bwmStatTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrOutoct.setDescription('The of octets sent out from the traffic contract queue.')
bwmStatTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatSpTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3), )
if mibBuilder.loadTexts: bwmStatSpTcTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcTable.setDescription('The table of Bandwidth Management Switch Port Traffic Contract statistics.')
bwmStatSpTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcPortIndex"), (0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcContractIndex"))
if mibBuilder.loadTexts: bwmStatSpTcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcEntry.setDescription('A row in the BWM SP traffic contract table.')
bwmStatSpTcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcPortIndex.setDescription('The Switch Port number for which the statistics apply.')
bwmStatSpTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatSpTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcName.setDescription('The name of the traffic contract queue.')
bwmStatSpTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcOutoct.setDescription('The total number of octets sent out from the traffic contract queue.')
bwmStatSpTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatSpTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatSpTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
bwmStatSpTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4), )
if mibBuilder.loadTexts: bwmStatSpTcrTable.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrTable.setDescription('The table of Bandwidth Management Switch Port Traffic Contract Rate statistics.')
bwmStatSpTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcrPortIndex"), (0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatSpTcrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrEntry.setDescription('A row in the BWM traffic contract rate table.')
bwmStatSpTcrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrPortIndex.setDescription('The switch port number for which the statistics apply.')
bwmStatSpTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrContractIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrContractIndex.setDescription('The contract queue number for which the statistics apply.')
bwmStatSpTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrName.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrName.setDescription('The name of the traffic contract queue.')
bwmStatSpTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrRate.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrRate.setDescription('The rate of octets sent out from the traffic contract queue.')
bwmStatSpTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrOutoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrOutoct.setDescription('The of octets sent out from the traffic contract queue.')
bwmStatSpTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrOutdisoct.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrOutdisoct.setDescription('The total number of octets dropped from the traffic contract queue.')
bwmStatSpTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrBufferUsed.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrBufferUsed.setDescription('The total number of buffers used by the traffic contract queue.')
bwmStatSpTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: bwmStatSpTcrBufferMax.setDescription('The total number of buffers assigned to the traffic contract queue.')
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", agNewCfgSpanningTree=agNewCfgSpanningTree, slbNewCfgUrlExpression=slbNewCfgUrlExpression, slbCurCfgGroupBackupServer=slbCurCfgGroupBackupServer, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, vlanNewCfgDelete=vlanNewCfgDelete, slbCurCfgRealServerTimeOut=slbCurCfgRealServerTimeOut, slbNewCfgUrlExpTableEntry=slbNewCfgUrlExpTableEntry, bwmStatTcrOutdisoct=bwmStatTcrOutdisoct, vlanCurCfgTable=vlanCurCfgTable, slbNewCfgGroupMetric=slbNewCfgGroupMetric, slbCurCfgPortTable=slbCurCfgPortTable, slbNewCfgRealServerSuccRetry=slbNewCfgRealServerSuccRetry, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, fltNewCfgSrcMac=fltNewCfgSrcMac, gslbNewCfgGenGeo=gslbNewCfgGenGeo, bwmNewCfgPolicyBuffer=bwmNewCfgPolicyBuffer, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, slbCurCfgRealServerMaxConns=slbCurCfgRealServerMaxConns, slbStatGroupHCOctets=slbStatGroupHCOctets, arpStats=arpStats, slbNewCfgVirtServiceBwmContract=slbNewCfgVirtServiceBwmContract, bwmNewCfgContractDelete=bwmNewCfgContractDelete, iprouting=iprouting, gslbNewCfgGenDnsHandoff=gslbNewCfgGenDnsHandoff, gslbCurCfgGenDnsHandoff=gslbCurCfgGenDnsHandoff, slbNewCfgGroupRemoveServer=slbNewCfgGroupRemoveServer, fltCurCfgState=fltCurCfgState, trunkGroupNewCfgBwmContract=trunkGroupNewCfgBwmContract, gslbNewCfgGenHttpRedirect=gslbNewCfgGenHttpRedirect, bwmCurCfgContractTableEntry=bwmCurCfgContractTableEntry, slbCurCfgVirtServiceDirServerRtn=slbCurCfgVirtServiceDirServerRtn, fltNewCfgAclTcpAck=fltNewCfgAclTcpAck, slbNewCfgUrlLbPathTableEntry=slbNewCfgUrlLbPathTableEntry, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, ipNewCfgGwTable=ipNewCfgGwTable, fltNewCfgRangeHighSrcPort=fltNewCfgRangeHighSrcPort, agCurCfgSyslog2Host=agCurCfgSyslog2Host, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, vrrpCurCfgVirtRtrGrpTckVirtRtr=vrrpCurCfgVirtRtrGrpTckVirtRtr, bwmStatSpTcrEntry=bwmStatSpTcrEntry, agCurCfgBootp=agCurCfgBootp, ipNewCfgIntfIndex=ipNewCfgIntfIndex, slbCurCfgRealServerTable=slbCurCfgRealServerTable, slbCurCfgRealServerBackUp=slbCurCfgRealServerBackUp, slbCurCfgVirtServerUriCookie=slbCurCfgVirtServerUriCookie, slbNewCfgPeerTable=slbNewCfgPeerTable, gslbRemSiteTableMaxSize=gslbRemSiteTableMaxSize, pktStatsAllocFails=pktStatsAllocFails, gslbCurCfgRemSiteTableEntry=gslbCurCfgRemSiteTableEntry, slbNewCfgRealServerIpAddr=slbNewCfgRealServerIpAddr, bwmCurCfgPolicyBuffer=bwmCurCfgPolicyBuffer, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, bwm=bwm, agRtcDate=agRtcDate, slbNewCfgVirtServicesEntry=slbNewCfgVirtServicesEntry, routeStats=routeStats, slbCurCfgVirtServiceHttpSlb=slbCurCfgVirtServiceHttpSlb, slbNewCfgMnet=slbNewCfgMnet, urlStatSlbPathTableEntry=urlStatSlbPathTableEntry, vlanNewCfgVlanName=vlanNewCfgVlanName, bwmStatSpTcrOutoct=bwmStatSpTcrOutoct, slbNewCfgUrlLbPathTable=slbNewCfgUrlLbPathTable, agTftpAction=agTftpAction, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, ripNewCfgDefListen=ripNewCfgDefListen, slbStatPortMaintTable=slbStatPortMaintTable, gslbCurCfgNetworkSourceIp=gslbCurCfgNetworkSourceIp, slbCurCfgPmask=slbCurCfgPmask, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, slbNewCfgPortIndex=slbNewCfgPortIndex, bwmStatTcrTable=bwmStatTcrTable, slbCurCfgPortIndex=slbCurCfgPortIndex, fltNewCfgInvert=fltNewCfgInvert, fltCurCfgAclIpTosMask=fltCurCfgAclIpTosMask, slbNewCfgFailOverTable=slbNewCfgFailOverTable, slbNewCfgRealServerIndex=slbNewCfgRealServerIndex, slbNewCfgDirectMode=slbNewCfgDirectMode, slbStatVServerHighestSessions=slbStatVServerHighestSessions, memStatsBytesCurr=memStatsBytesCurr, hwSensor4Temp=hwSensor4Temp, alteon=alteon, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, slbCurCfgVirtServiceUDPBalance=slbCurCfgVirtServiceUDPBalance, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, agPortCurCfgPrefLink=agPortCurCfgPrefLink, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, slbStatVServerEntry=slbStatVServerEntry, slbRealServerInfoSwitchPort=slbRealServerInfoSwitchPort, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, slbCurCfgGroupHealthCheckUrl=slbCurCfgGroupHealthCheckUrl, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, agPortCurCfgBwmContract=agPortCurCfgBwmContract, vlanCurCfgState=vlanCurCfgState, fltNewCfgDstIp=fltNewCfgDstIp, agImage2Ver=agImage2Ver, ipCurCfgGwRetry=ipCurCfgGwRetry, fltNewCfgRangeLowSrcPort=fltNewCfgRangeLowSrcPort, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, vrrpNewCfgGenTckRServerInc=vrrpNewCfgGenTckRServerInc, agSaveConfiguration=agSaveConfiguration, vrrp_info=vrrp_info, gslbNewCfgRemSiteTableEntry=gslbNewCfgRemSiteTableEntry, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, urlStats=urlStats, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, slbCurCfgPeerIndex=slbCurCfgPeerIndex, agSoftwareVersion=agSoftwareVersion, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, slbCurCfgUrlLbPathTable=slbCurCfgUrlLbPathTable, gslbCurCfgNetworkVip1=gslbCurCfgNetworkVip1, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, slbCurCfgFailOverSecondaryIp=slbCurCfgFailOverSecondaryIp, gslbCurCfgGenDnsTTL=gslbCurCfgGenDnsTTL, fltNewCfgProtocol=fltNewCfgProtocol, fltCurCfgAclTcpUrg=fltCurCfgAclTcpUrg, slbStatPortRealServerEntry=slbStatPortRealServerEntry, routeStatMaxEntries=routeStatMaxEntries, arpInfoMacAddr=arpInfoMacAddr, fltCurCfgSrcIp=fltCurCfgSrcIp, agApplyConfiguration=agApplyConfiguration, ripNewCfgUpdatePeriod=ripNewCfgUpdatePeriod, slbCurCfgVirtualServerEntry=slbCurCfgVirtualServerEntry, tcpStats=tcpStats, slbNewCfgVirtServerFtpParsing=slbNewCfgVirtServerFtpParsing, slbVirtServerTableMaxSize=slbVirtServerTableMaxSize, fltCurCfgDstIp=fltCurCfgDstIp, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, arpStatMaxEntries=arpStatMaxEntries, gslbNewCfgGenUsern=gslbNewCfgGenUsern, slbNewCfgVirtServiceRealGroup=slbNewCfgVirtServiceRealGroup, slbNewCfgVirtServiceDirServerRtn=slbNewCfgVirtServiceDirServerRtn, bwmCurCfgContractHistory=bwmCurCfgContractHistory, slbRealServerInfoIndex=slbRealServerInfoIndex, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, agCurCfgSmtpHost=agCurCfgSmtpHost, slbCurCfgPortProxyIpAddr=slbCurCfgPortProxyIpAddr, trunkGroupTableMaxSize=trunkGroupTableMaxSize, fltCurCfgClientProxy=fltCurCfgClientProxy, bwmStatTcBufferMax=bwmStatTcBufferMax, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, vlanCurCfgVlanName=vlanCurCfgVlanName, slbCurCfgRealServerSubmac=slbCurCfgRealServerSubmac, agent=agent, vlanNewCfgPorts=vlanNewCfgPorts, radCurCfgPort=radCurCfgPort, slbStatVServerHCOctetsHigh32=slbStatVServerHCOctetsHigh32, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, dynSLBRealServerIpAddr=dynSLBRealServerIpAddr, agPortCurCfgPortName=agPortCurCfgPortName, agNewCfgLoginBanner=agNewCfgLoginBanner, slbStatGroupHCOctetsHigh32=slbStatGroupHCOctetsHigh32, slbCurCfgVirtServiceHname=slbCurCfgVirtServiceHname, slbStatGroupCurrSessions=slbStatGroupCurrSessions, bwmStatTcEntry=bwmStatTcEntry, slbCurCfgUrlRedirCookieOrigSrv=slbCurCfgUrlRedirCookieOrigSrv, agBootVer=agBootVer, portInfoFlowCtrl=portInfoFlowCtrl, bwmCurCfgContractIndx=bwmCurCfgContractIndx, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, slbNewCfgRadiusAuthenString=slbNewCfgRadiusAuthenString, fltCurCfgAclTcpPsh=fltCurCfgAclTcpPsh, slbCurCfgUrlExpression=slbCurCfgUrlExpression, fltNewCfgAclIpTosMask=fltNewCfgAclIpTosMask, ipFwdCurCfgLocalMask=ipFwdCurCfgLocalMask, portInfoSpeed=portInfoSpeed, gslbCurCfgRemSiteSecondaryIp=gslbCurCfgRemSiteSecondaryIp, slbCurCfgGroupMetric=slbCurCfgGroupMetric, slbCurCfgVirtServerIndex=slbCurCfgVirtServerIndex, bwmNewCfgContractName=bwmNewCfgContractName, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, fltNewCfgSrcIpMask=fltNewCfgSrcIpMask, slbCurCfgUrlRedirNoCacheOrigSrv=slbCurCfgUrlRedirNoCacheOrigSrv, slbCurCfgVirtServerClength=slbCurCfgVirtServerClength, gslbNewCfgGenDnsLocalPref=gslbNewCfgGenDnsLocalPref, vrrpCurCfgIfTable=vrrpCurCfgIfTable, slbCurCfgUrlLbPathTableEntry=slbCurCfgUrlLbPathTableEntry, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, gslbCurCfgRemSitePrimaryIp=gslbCurCfgRemSitePrimaryIp, agCurCfgTrapHostTable=agCurCfgTrapHostTable, slbCurCfgUrlLbPathIndex=slbCurCfgUrlLbPathIndex, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, slbStatRServerIndex=slbStatRServerIndex, ip_info=ip_info, fltCurCfgUrlRedir=fltCurCfgUrlRedir, fltNewCfgClientProxy=fltNewCfgClientProxy, ripStatOutPkts=ripStatOutPkts, fltCurCfgFwlb=fltCurCfgFwlb, agTftpDumpFileName=agTftpDumpFileName, slbRealServerInfoOverflow=slbRealServerInfoOverflow, ripStats=ripStats, vrrpCurCfgVirtRtrSharing=vrrpCurCfgVirtRtrSharing, agTftpImage=agTftpImage, gslbCurCfgGenOne=gslbCurCfgGenOne, fltCurCfgSrcMac=fltCurCfgSrcMac, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, vlanCurCfgPorts=vlanCurCfgPorts, slbNewCfgRealServerRemUrl=slbNewCfgRealServerRemUrl, gslbCurCfgGenState=gslbCurCfgGenState, vrrpCurCfgVirtRtrGrpSharing=vrrpCurCfgVirtRtrGrpSharing, fltNewCfgLog=fltNewCfgLog, agApplyPending=agApplyPending, ipFwdNewCfgPortState=ipFwdNewCfgPortState, tcpStatHalfOpens=tcpStatHalfOpens, vrrpNewCfgIfTable=vrrpNewCfgIfTable, fltCurCfgRangeLowDstPort=fltCurCfgRangeLowDstPort, slbNewCfgSyncPort=slbNewCfgSyncPort, ipRouteInfoTable=ipRouteInfoTable, slbFailOverInfoTable=slbFailOverInfoTable, fltCfgTableMaxSize=fltCfgTableMaxSize, vrrpCurCfgGenHotstandby=vrrpCurCfgGenHotstandby, fltNewCfgBwmContract=fltNewCfgBwmContract, agLastSetErrorReason=agLastSetErrorReason, slbNewCfgGroupBackupGroup=slbNewCfgGroupBackupGroup, gslbCurCfgGenLookupPort=gslbCurCfgGenLookupPort, ipForward=ipForward, gslbCurCfgGenLookups=gslbCurCfgGenLookups, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, fltNewCfgPortAddFiltRule=fltNewCfgPortAddFiltRule, gslbStatRemRealServerHttpRedirs=gslbStatRemRealServerHttpRedirs, operCmds=operCmds, vlanNewCfgBwmContract=vlanNewCfgBwmContract, slbNewCfgGlobalControl=slbNewCfgGlobalControl, bwmNewCfgContractIndx=bwmNewCfgContractIndx, vrrpCurCfgVirtRtrTckL4Port=vrrpCurCfgVirtRtrTckL4Port, slbCurCfgImask=slbCurCfgImask, bwmNewCfgGenEnforcePolicy=bwmNewCfgGenEnforcePolicy, agPortNewCfgPortName=agPortNewCfgPortName, slbCurCfgUrlRedirHeaderName=slbCurCfgUrlRedirHeaderName, fltCurCfgRedirGroup=fltCurCfgRedirGroup, gslbCurCfgGenExternal=gslbCurCfgGenExternal, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, slbNewCfgVirtServerCname=slbNewCfgVirtServerCname, slbNewCfgPmask=slbNewCfgPmask, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, slbStatPortRealServerHCOctetsLow32=slbStatPortRealServerHCOctetsLow32, hardware=hardware, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, slbNewCfgPeerDelete=slbNewCfgPeerDelete, slbCurCfgPortSlbInterSwitch=slbCurCfgPortSlbInterSwitch, fltNewCfgPortFiltBmap=fltNewCfgPortFiltBmap, bwmStatTcrBufferMax=bwmStatTcrBufferMax, pmNewCfgMirroredPort=pmNewCfgMirroredPort, vrrpNewCfgVirtRtrTckL4Port=vrrpNewCfgVirtRtrTckL4Port, bwmCurCfgContractPolicy=bwmCurCfgContractPolicy, agPortCurCfgPVID=agPortCurCfgPVID, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, bwmNewCfgPolicyResv=bwmNewCfgPolicyResv, radNewCfgRetries=radNewCfgRetries)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", slbNewCfgGroupHealthCheckUrl=slbNewCfgGroupHealthCheckUrl, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, slbCurCfgVirtServIndex=slbCurCfgVirtServIndex, gslbNetwork=gslbNetwork, agNewCfgSyslogFac=agNewCfgSyslogFac, slbCurCfgVirtServiceIndex=slbCurCfgVirtServiceIndex, slbNewCfgVirtServiceIndex=slbNewCfgVirtServiceIndex, gslbNetworkTableMaxSize=gslbNetworkTableMaxSize, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, slbNewCfgRealServerCookie=slbNewCfgRealServerCookie, hwRedundantPSPresent=hwRedundantPSPresent, pktStatsFrees=pktStatsFrees, slbNewCfgRealServerState=slbNewCfgRealServerState, stats=stats, slb_info=slb_info, slbCurCfgUrlExpIndex=slbCurCfgUrlExpIndex, urlStatSlbPathIndex=urlStatSlbPathIndex, arpInfoEntry=arpInfoEntry, slbCurCfgGrace=slbCurCfgGrace, ipNewCfgGwEntry=ipNewCfgGwEntry, slbNewCfgRealServerName=slbNewCfgRealServerName, trunkGroupCurCfgBwmContract=trunkGroupCurCfgBwmContract, slbStatVServerCurrSessions=slbStatVServerCurrSessions, radNewCfgAuthenString=radNewCfgAuthenString, bwmStatTcrName=bwmStatTcrName, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, vrrpNewCfgGenTckL4PortInc=vrrpNewCfgGenTckL4PortInc, slbCurCfgVirtServerFtpParsing=slbCurCfgVirtServerFtpParsing, memStatsBytesHiwat=memStatsBytesHiwat, gslbCurCfgGenRemSiteUpdateInterval=gslbCurCfgGenRemSiteUpdateInterval, slbStatPortMaintBindingFails=slbStatPortMaintBindingFails, bwmNewCfgGenSmtpUser=bwmNewCfgGenSmtpUser, gslbNewCfgRemSiteUpdate=gslbNewCfgRemSiteUpdate, bwmNewCfgPolicyTable=bwmNewCfgPolicyTable, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, slbCurCfgUrlLbErrorMsg=slbCurCfgUrlLbErrorMsg, vrrpNewCfgGenTckHsrpInc=vrrpNewCfgGenTckHsrpInc, ripStatInErrorPkts=ripStatInErrorPkts, ipCurCfgIntfTable=ipCurCfgIntfTable, ipFwdCurCfgPortTable=ipFwdCurCfgPortTable, vrrpStatInAdvers=vrrpStatInAdvers, bwmNewCfgGenState=bwmNewCfgGenState, slbNewCfgPeerEntry=slbNewCfgPeerEntry, fltNewCfgPortState=fltNewCfgPortState, gslbNewCfgNetworkNetMask=gslbNewCfgNetworkNetMask, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, ipNewCfgGwAddr=ipNewCfgGwAddr, slbCurCfgPeerIpAddr=slbCurCfgPeerIpAddr, bwmStatTcOutdisoct=bwmStatTcOutdisoct, fltNewCfgAclIpTosNew=fltNewCfgAclIpTosNew, trunkGroupCurCfgTable=trunkGroupCurCfgTable, slbCurCfgGroupRealThreshold=slbCurCfgGroupRealThreshold, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, bwmStatSpTcrBufferUsed=bwmStatSpTcrBufferUsed, fltNewCfgRedirGroup=fltNewCfgRedirGroup, slbfailover=slbfailover, information=information, slbNewCfgRealServerExcludeStr=slbNewCfgRealServerExcludeStr, gslbNewCfgRemSitePrimaryIp=gslbNewCfgRemSitePrimaryIp, slbNewCfgVirtServerClength=slbNewCfgVirtServerClength, slbCurCfgVirtServerState=slbCurCfgVirtServerState, slbCurCfgVirtServerHttpHdrName=slbCurCfgVirtServerHttpHdrName, fltCurCfgPortTableEntry=fltCurCfgPortTableEntry, slbNewCfgVirtServiceDelete=slbNewCfgVirtServiceDelete, serverloadbalance=serverloadbalance, agNewCfgSmtpHost=agNewCfgSmtpHost, trunkGroupNewCfgState=trunkGroupNewCfgState, agPortCurCfgState=agPortCurCfgState, pmCurCfgMonitoredTraffic=pmCurCfgMonitoredTraffic, agNewCfgSyslogHost=agNewCfgSyslogHost, bwmStatSpTcOutoct=bwmStatSpTcOutoct, fltNewCfgDstMac=fltNewCfgDstMac, ipNewCfgGwState=ipNewCfgGwState, slbCurCfgFailOverRouteSupply=slbCurCfgFailOverRouteSupply, slbNewCfgUrlExpIndex=slbNewCfgUrlExpIndex, slbCurCfgSyncPort=slbCurCfgSyncPort, vlanNewCfgVlanId=vlanNewCfgVlanId, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, slbStatVServerTotalSessions=slbStatVServerTotalSessions, bwmStatTcrEntry=bwmStatTcrEntry, dnsNewCfgDomainName=dnsNewCfgDomainName, fltCurCfgAclTcpRst=fltCurCfgAclTcpRst, slbCurCfgRealServerExcludeStr=slbCurCfgRealServerExcludeStr, fltCurCfgBwmContract=fltCurCfgBwmContract, slbNewCfgUrlExpDelete=slbNewCfgUrlExpDelete, bwmStatTcBufferUsed=bwmStatTcBufferUsed, slbNewCfgVirtServerIndex=slbNewCfgVirtServerIndex, fltCurCfgRangeHighSrcPort=fltCurCfgRangeHighSrcPort, slbNewCfgUrlRedirNonGetOrigSrv=slbNewCfgUrlRedirNonGetOrigSrv, vlanNewCfgJumbo=vlanNewCfgJumbo, fltCurCfgAction=fltCurCfgAction, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, fltCurCfgAclTcpAck=fltCurCfgAclTcpAck, gslbCurCfgGenMinco=gslbCurCfgGenMinco, fltStatTable=fltStatTable, memStatsAllocFails=memStatsAllocFails, slbCurCfgRealServerEntry=slbCurCfgRealServerEntry, operSlbPortIndex=operSlbPortIndex, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, urlStatSlbPathTable=urlStatSlbPathTable, urlStatSlbPathHits=urlStatSlbPathHits, agPortCurCfgTable=agPortCurCfgTable, agPortNewCfgStp=agPortNewCfgStp, gslbNewCfgGenExternal=gslbNewCfgGenExternal, agImageForNxtReset=agImageForNxtReset, registration=registration, ipCurCfgIntfVlan=ipCurCfgIntfVlan, dnsStats=dnsStats, slbNewCfgGroupDelete=slbNewCfgGroupDelete, slbCurCfgFailOverState=slbCurCfgFailOverState, agPortNewCfgPVID=agPortNewCfgPVID, slbCurCfgRealServerUrlBmap=slbCurCfgRealServerUrlBmap, slbNewCfgVirtServIndex=slbNewCfgVirtServIndex, fltCurCfgPortTable=fltCurCfgPortTable, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, ftpSlbStats=ftpSlbStats, slbNewCfgVirtServerBwmContract=slbNewCfgVirtServerBwmContract, slbNewCfgGrace=slbNewCfgGrace, vlanCurCfgTableEntry=vlanCurCfgTableEntry, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, gslbStatRemRealServerDnsHandoffs=gslbStatRemRealServerDnsHandoffs, ripNewCfgListen=ripNewCfgListen, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, hwSensor3Temp=hwSensor3Temp, slbNewCfgGroupRealThreshold=slbNewCfgGroupRealThreshold, fltNewCfgPortRemFiltRule=fltNewCfgPortRemFiltRule, slbRealServerInfoTable=slbRealServerInfoTable, bwmStatTcrOutoct=bwmStatTcrOutoct, urlStatRedRedirs=urlStatRedRedirs, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ipFwdNewCfgState=ipFwdNewCfgState, fltCurCfgCache=fltCurCfgCache, slbCurCfgVirtServicesEntry=slbCurCfgVirtServicesEntry, slbNewCfgRealServerFailRetry=slbNewCfgRealServerFailRetry, agCurCfgSyslogHost=agCurCfgSyslogHost, slbCurCfgRealServerPingInterval=slbCurCfgRealServerPingInterval, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, vrrpCurCfgGenTckRServerInc=vrrpCurCfgGenTckRServerInc, vlanNewCfgState=vlanNewCfgState, vrrpNewCfgVirtRtrSharing=vrrpNewCfgVirtRtrSharing, slbStatVServerHeaderMisses=slbStatVServerHeaderMisses, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, bwmNewCfgPolicyTosIn=bwmNewCfgPolicyTosIn, slbCurCfgVirtServerDname=slbCurCfgVirtServerDname, slbNewCfgRealServerTimeOut=slbNewCfgRealServerTimeOut, vrrp=vrrp, slbNewCfgMmask=slbNewCfgMmask, agPortConfig=agPortConfig, trunkGroupCurCfgState=trunkGroupCurCfgState, slbCurCfgSyncVrrp=slbCurCfgSyncVrrp, slbNewCfgImask=slbNewCfgImask, pktStatsMediums=pktStatsMediums, slbStatPortMaintEntry=slbStatPortMaintEntry, agPortCurCfgFastEthAutoNeg=agPortCurCfgFastEthAutoNeg, agPortNewCfgBackLink=agPortNewCfgBackLink, slbStatGroupHighestSessions=slbStatGroupHighestSessions, vlanNewCfgAddPort=vlanNewCfgAddPort, ripConfig=ripConfig, fltNewCfgTableEntry=fltNewCfgTableEntry, slbStatGroupIndex=slbStatGroupIndex, pktStatsJumbos=pktStatsJumbos, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, slbFailOverInfoPrimaryIp=slbFailOverInfoPrimaryIp, slbNewCfgRealServerBackUp=slbNewCfgRealServerBackUp, bwmCurCfgContractTable=bwmCurCfgContractTable, gslbCurCfgGenDnsLocalPref=gslbCurCfgGenDnsLocalPref, bwmNewCfgContractPrec=bwmNewCfgContractPrec, ripCurCfgSupply=ripCurCfgSupply, arpInfoDestIp=arpInfoDestIp, slbNewCfgVirtServerHttpHdrName=slbNewCfgVirtServerHttpHdrName, gslbNewCfgNetworkIndx=gslbNewCfgNetworkIndx, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, agPortNewCfgFastEthAutoNeg=agPortNewCfgFastEthAutoNeg, slbNewCfgGroupAddServer=slbNewCfgGroupAddServer, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, bwmNewCfgPolicyTableEntry=bwmNewCfgPolicyTableEntry, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, slbNewCfgVirtServiceHname=slbNewCfgVirtServiceHname, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, ipFwdNewCfgLocalSubnet=ipFwdNewCfgLocalSubnet, fltNewCfgState=fltNewCfgState, memStats=memStats, ipCurCfgIntfState=ipCurCfgIntfState, ripCurCfgDefListen=ripCurCfgDefListen, slbStatPortMaintCurBindings=slbStatPortMaintCurBindings, agTftpDownload=agTftpDownload, arpInfoTable=arpInfoTable, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, slbCurCfgVirtServerCname=slbCurCfgVirtServerCname, slbNewCfgGroupHealthCheckLayer=slbNewCfgGroupHealthCheckLayer, ripNewCfgStaticSupply=ripNewCfgStaticSupply, trunkGroupNewCfgTable=trunkGroupNewCfgTable, vrrpStatOutAdvers=vrrpStatOutAdvers, slbRealServerMacAddr=slbRealServerMacAddr, ipRouteInfoType=ipRouteInfoType, ipNewCfgGwMetric=ipNewCfgGwMetric, fltNewCfgAclIcmp=fltNewCfgAclIcmp, pmCurCfgMonitoringPort=pmCurCfgMonitoringPort, slbStatRServerTotalSessions=slbStatRServerTotalSessions, ipNewCfgIntfMask=ipNewCfgIntfMask, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, slbCurCfgRealServerIndex=slbCurCfgRealServerIndex, slbFailOverInfoSecondaryStatus=slbFailOverInfoSecondaryStatus, slbNewCfgPortTable=slbNewCfgPortTable, ipFwdNewCfgLocalMask=ipFwdNewCfgLocalMask, slbStatGroupTable=slbStatGroupTable, slbNewCfgVirtMatrixArch=slbNewCfgVirtMatrixArch, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, bwmCurCfgContractState=bwmCurCfgContractState, trunkgroup=trunkgroup, gslbStats=gslbStats, slbCurCfgUrlRedirHeader=slbCurCfgUrlRedirHeader, slbNewCfgVirtServiceRealPort=slbNewCfgVirtServiceRealPort, slbCurCfgVirtServiceRealPort=slbCurCfgVirtServiceRealPort, slbStatVServerHCOctetsLow32=slbStatVServerHCOctetsLow32, ipCurCfgGwState=ipCurCfgGwState, fltCurCfgRedirPort=fltCurCfgRedirPort, vlanMaxEnt=vlanMaxEnt, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, slbNewCfgGroupBackupServer=slbNewCfgGroupBackupServer, fltCurCfgFtpNatActive=fltCurCfgFtpNatActive, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, slbStatPortRealServerPortIndex=slbStatPortRealServerPortIndex, slbNewCfgRealServerType=slbNewCfgRealServerType, ripCurCfgPoisonReverse=ripCurCfgPoisonReverse, agPortCurCfgFastEthFctl=agPortCurCfgFastEthFctl, ipCurCfgGwTable=ipCurCfgGwTable, slbStatRServerTable=slbStatRServerTable, slbCurCfgRealServerSuccRetry=slbCurCfgRealServerSuccRetry, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, slbFailOverInfoSecondaryState=slbFailOverInfoSecondaryState, ripNewCfgState=ripNewCfgState, gslbNewCfgNetworkSourceIp=gslbNewCfgNetworkSourceIp, agImage1Ver=agImage1Ver, gslbCurCfgRemSiteUpdate=gslbCurCfgRemSiteUpdate, slbCurCfgGroupName=slbCurCfgGroupName, radCurCfgState=radCurCfgState, slbStatPortMaintPortIndex=slbStatPortMaintPortIndex, slbNewCfgRealServerDelete=slbNewCfgRealServerDelete, fltCurCfgRangeHighDstPort=fltCurCfgRangeHighDstPort, arpInfoVLAN=arpInfoVLAN, slbCurCfgDirectMode=slbCurCfgDirectMode, slbCurCfgPortSlbHotStandby=slbCurCfgPortSlbHotStandby, ipRouteInfoGateway=ipRouteInfoGateway, slbCurCfgVirtServiceBwmContract=slbCurCfgVirtServiceBwmContract, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, fltCurCfgPortIndx=fltCurCfgPortIndx, slbCurCfgGroupHealthCheckLayer=slbCurCfgGroupHealthCheckLayer, bwmNewCfgContractHistory=bwmNewCfgContractHistory, vrrpNewCfgVirtRtrGrpTckL4Port=vrrpNewCfgVirtRtrGrpTckL4Port, slbNewCfgUrlExpTable=slbNewCfgUrlExpTable, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", slbRealServerInfoState=slbRealServerInfoState, operSlbPortEntry=operSlbPortEntry, slbCurCfgRealServerWeight=slbCurCfgRealServerWeight, agTftpImageFileName=agTftpImageFileName, agPortCurCfgIndx=agPortCurCfgIndx, fltCurCfgLog=fltCurCfgLog, agCurCfgSyslogFac=agCurCfgSyslogFac, slbNewCfgPortProxyIpAddr=slbNewCfgPortProxyIpAddr, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, slbCurCfgUrlRedirUriHashLength=slbCurCfgUrlRedirUriHashLength, slbCurCfgUrlExpTable=slbCurCfgUrlExpTable, bwmCurCfgContractUseTos=bwmCurCfgContractUseTos, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, arpStatHighWater=arpStatHighWater, ipFwdNewCfgPortIndex=ipFwdNewCfgPortIndex, dynSLBRealServerTable=dynSLBRealServerTable, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, slbNewCfgVirtServerState=slbNewCfgVirtServerState, bwmNewCfgPolicyHard=bwmNewCfgPolicyHard, slbCurCfgVirtServicesTable=slbCurCfgVirtServicesTable, fltCurCfgAclIpTosNew=fltCurCfgAclIpTosNew, ipFwdCurCfgPortEntry=ipFwdCurCfgPortEntry, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, fltNewCfgRedirPort=fltNewCfgRedirPort, gslbLookup=gslbLookup, bwmStatSpTcrName=bwmStatSpTcrName, ipNewCfgIntfBroadcast=ipNewCfgIntfBroadcast, slbCurCfgVirtServerTable=slbCurCfgVirtServerTable, gslbMaintStats=gslbMaintStats, slbCurCfgMnet=slbCurCfgMnet, bwmStatTcContractIndex=bwmStatTcContractIndex, bwmStatSpTcrContractIndex=bwmStatSpTcrContractIndex, bwmCurCfgGenState=bwmCurCfgGenState, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, bwmNewCfgContractPolicy=bwmNewCfgContractPolicy, ipNewCfgIntfTable=ipNewCfgIntfTable, bwmStatTcTable=bwmStatTcTable, fltNewCfgRangeLowDstPort=fltNewCfgRangeLowDstPort, portInfoIndx=portInfoIndx, slbCurCfgVirtServerCoffset=slbCurCfgVirtServerCoffset, gslbCurCfgRemSiteIndx=gslbCurCfgRemSiteIndx, slbCurCfgRealServerType=slbCurCfgRealServerType, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, fltCurCfgTableEntry=fltCurCfgTableEntry, bwmStatSpTcrRate=bwmStatSpTcrRate, fltNewCfgAclTcpRst=fltNewCfgAclTcpRst, altswitchTraps=altswitchTraps, slbStatRServerHCOctetsHigh32=slbStatRServerHCOctetsHigh32, slbCurCfgUrlRedirNonGetOrigSrv=slbCurCfgUrlRedirNonGetOrigSrv, vrrpCurCfgVirtRtrTckHsrp=vrrpCurCfgVirtRtrTckHsrp, slbStatVServerIndex=slbStatVServerIndex, gslbCurCfgGenGeo=gslbCurCfgGenGeo, agPortNewCfgVlanTag=agPortNewCfgVlanTag, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, agPortNewCfgIndx=agPortNewCfgIndx, slbStatPortMaintRealServerNoAvails=slbStatPortMaintRealServerNoAvails, routeStatEntries=routeStatEntries, bwmStatTcrRate=bwmStatTcrRate, fltCurCfgIndx=fltCurCfgIndx, agPortTableMaxEnt=agPortTableMaxEnt, urlSlbStats=urlSlbStats, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, gslbCurCfgRemSiteTable=gslbCurCfgRemSiteTable, slbStatRServerHCOctets=slbStatRServerHCOctets, slbCurCfgPortSlbState=slbCurCfgPortSlbState, arpInfoRefPorts=arpInfoRefPorts, bwmNewCfgContractTable=bwmNewCfgContractTable, slbCurCfgPortEntry=slbCurCfgPortEntry, slbNewCfgFailOverRouteSupply=slbNewCfgFailOverRouteSupply, slbStatPortRealServerTotalSessions=slbStatPortRealServerTotalSessions, slbNewCfgPeerIndex=slbNewCfgPeerIndex, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, slbCurCfgVirtServerIpAddress=slbCurCfgVirtServerIpAddress, slbNewCfgGroupTable=slbNewCfgGroupTable, fltNewCfgAclIpOption=fltNewCfgAclIpOption, slbNewCfgVirtServerDname=slbNewCfgVirtServerDname, ipRouteInfoDestIp=ipRouteInfoDestIp, ripCurCfgState=ripCurCfgState, vrrpNewCfgVirtRtrGrpSharing=vrrpNewCfgVirtRtrGrpSharing, slbNewCfgGroupEntry=slbNewCfgGroupEntry, fltNewCfgUrlRedir=fltNewCfgUrlRedir, slbNewCfgPortSlbPipState=slbNewCfgPortSlbPipState, agPortNewCfgPrefLink=agPortNewCfgPrefLink, slbStatPortMaintFilteredDeniedFrames=slbStatPortMaintFilteredDeniedFrames, gslbStatRemRealServerIndex=gslbStatRemRealServerIndex, bwmStatSpTcrBufferMax=bwmStatSpTcrBufferMax, ipNewCfgGwDelete=ipNewCfgGwDelete, slbNewCfgPortSlbState=slbNewCfgPortSlbState, bwmCurCfgPolicyResv=bwmCurCfgPolicyResv, agCurCfgLoginBanner=agCurCfgLoginBanner, agRtcTime=agRtcTime, agTftpLastActionStatus=agTftpLastActionStatus, vrrpNewCfgVirtRtrGrpTckRServer=vrrpNewCfgVirtRtrGrpTckRServer, ipCurCfgGwArp=ipCurCfgGwArp, vrrpNewCfgVirtRtrTckRServer=vrrpNewCfgVirtRtrTckRServer, hwSensor2Temp=hwSensor2Temp, bwmStatSpTcBufferMax=bwmStatSpTcBufferMax, slbNewCfgVirtServicesTable=slbNewCfgVirtServicesTable, fltCurCfgRangeLowSrcPort=fltCurCfgRangeLowSrcPort, bwmNewCfgContractUseTos=bwmNewCfgContractUseTos, bwmGeneralConfig=bwmGeneralConfig, fltNewCfgAclTcpSyn=fltNewCfgAclTcpSyn, agEnabledSwFeatures=agEnabledSwFeatures, vrrpNewCfgGenState=vrrpNewCfgGenState, pmCurCfgState=pmCurCfgState, bwmStatTcOutoct=bwmStatTcOutoct, fltCurCfgDstIpMask=fltCurCfgDstIpMask, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, slbNewCfgVirtServerTable=slbNewCfgVirtServerTable, ipCurCfgIntfMask=ipCurCfgIntfMask, slbStats=slbStats, fltNewCfgPortIndx=fltNewCfgPortIndx, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, ipRouteInfoEntry=ipRouteInfoEntry, slbFailOverInfoEntry=slbFailOverInfoEntry, vrrpCurCfgGenTckHsrpInc=vrrpCurCfgGenTckHsrpInc, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, slbNewCfgGroupRealServers=slbNewCfgGroupRealServers, slbCurCfgRadiusAuthenString=slbCurCfgRadiusAuthenString, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ripCurCfgListen=ripCurCfgListen, slbNewCfgUrlRedirNoCacheOrigSrv=slbNewCfgUrlRedirNoCacheOrigSrv, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, fltCurCfgTcpAck=fltCurCfgTcpAck, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, fltNewCfgDstIpMask=fltNewCfgDstIpMask, slbNewCfgPortSlbInterSwitch=slbNewCfgPortSlbInterSwitch, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, slbCurCfgFailOverTable=slbCurCfgFailOverTable, fltNewCfgRangeHighDstPort=fltNewCfgRangeHighDstPort, vlanNewCfgRemovePort=vlanNewCfgRemovePort, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, vrrpNewCfgVirtRtrGrpTckVirtRtr=vrrpNewCfgVirtRtrGrpTckVirtRtr, slbNewCfgVirtServerUriCookie=slbNewCfgVirtServerUriCookie, dynamicSLB=dynamicSLB, slbCurCfgFailOverIndex=slbCurCfgFailOverIndex, vrrpStats=vrrpStats, agTftpCfgFileName=agTftpCfgFileName, agPortNewCfgTable=agPortNewCfgTable, agPortNewCfgBwmContract=agPortNewCfgBwmContract, slbCurCfgUrlExpTableEntry=slbCurCfgUrlExpTableEntry, vlanCurCfgBwmContract=vlanCurCfgBwmContract, pmNewCfgMonitoringPort=pmNewCfgMonitoringPort, slbStatPortRealServerHCOctetsHigh32=slbStatPortRealServerHCOctetsHigh32, vlanNewCfgTableEntry=vlanNewCfgTableEntry, gslbCurCfgNetworkNetMask=gslbCurCfgNetworkNetMask, slbCurCfgVirtMatrixArch=slbCurCfgVirtMatrixArch, radius=radius, urlRedirStats=urlRedirStats, vrrpNewCfgVirtRtrGrpTckHsrp=vrrpNewCfgVirtRtrGrpTckHsrp, bwmStatSpTcBufferUsed=bwmStatSpTcBufferUsed, pmNewCfgMonitoredTraffic=pmNewCfgMonitoredTraffic, agPortCurCfgRmon=agPortCurCfgRmon, bwmCurCfgPolicyIndx=bwmCurCfgPolicyIndx, slbCurCfgPeerState=slbCurCfgPeerState, agNewCfgTrapHostTable=agNewCfgTrapHostTable, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, slbStatVServerHeaderTotalSessions=slbStatVServerHeaderTotalSessions, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, fltNewCfgAclTcpUrg=fltNewCfgAclTcpUrg, bwmContractConfig=bwmContractConfig, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, fltCurCfgNat=fltCurCfgNat, bwmCurCfgPolicyTosOut=bwmCurCfgPolicyTosOut, agNewCfgBootp=agNewCfgBootp, slbCurCfgRealServerState=slbCurCfgRealServerState, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, slbFailOverInfoPrimaryStatus=slbFailOverInfoPrimaryStatus, portInfoLink=portInfoLink, bwmStatSpTcrOutdisoct=bwmStatSpTcrOutdisoct, bwmCurCfgGenEnforcePolicy=bwmCurCfgGenEnforcePolicy, slbNewCfgUrlRedirHeaderName=slbNewCfgUrlRedirHeaderName, radNewCfgTimeout=radNewCfgTimeout, slbNewCfgPeerIpAddr=slbNewCfgPeerIpAddr, slbStatRServerFailures=slbStatRServerFailures, urlStatRedNonGets=urlStatRedNonGets, portInfoMode=portInfoMode, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, agGeneralConfig=agGeneralConfig, slbCurCfgGroupIndex=slbCurCfgGroupIndex, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, arpStatEntries=arpStatEntries, urlStatRedNoCache=urlStatRedNoCache, slbUrl=slbUrl, agPortCurCfgVlanTag=agPortCurCfgVlanTag, bwmStatSpTcrTable=bwmStatSpTcrTable, slbNewCfgUrlRedirCookieOrigSrv=slbNewCfgUrlRedirCookieOrigSrv, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, pmNewCfgState=pmNewCfgState, slbStatPortMaintIncorrectVIPs=slbStatPortMaintIncorrectVIPs, vrrpNewCfgGenHotstandby=vrrpNewCfgGenHotstandby, radCurCfgTimeout=radCurCfgTimeout, slbCurCfgFailOverTblEntry=slbCurCfgFailOverTblEntry, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, slbNewCfgUrlLbErrorMsg=slbNewCfgUrlLbErrorMsg, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, fltNewCfgPortTable=fltNewCfgPortTable, slbFailOverInfoPrimaryState=slbFailOverInfoPrimaryState, slbNewCfgFailOverPrimaryIp=slbNewCfgFailOverPrimaryIp, fltStatTableEntry=fltStatTableEntry, radNewCfgState=radNewCfgState, slbNewCfgGroupIndex=slbNewCfgGroupIndex, slbStatMaintOverflowServActs=slbStatMaintOverflowServActs, ipCurCfgIntfEntry=ipCurCfgIntfEntry, bwmCurCfgPolicyTableEntry=bwmCurCfgPolicyTableEntry, routeStatHighWater=routeStatHighWater, bwmCurCfgGenSmtpUser=bwmCurCfgGenSmtpUser, slbNewCfgVirtServiceUDPBalance=slbNewCfgVirtServiceUDPBalance, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, fltNewCfgIndx=fltNewCfgIndx, radCurCfgRetries=radCurCfgRetries, ipNewCfgIntfAddr=ipNewCfgIntfAddr, port_info=port_info, gslbNewCfgNetworkTable=gslbNewCfgNetworkTable, slbFailOverInfoIndex=slbFailOverInfoIndex, slbCurCfgPeerEntry=slbCurCfgPeerEntry, slbCurCfgPeerTable=slbCurCfgPeerTable, ipNewCfgGwInterval=ipNewCfgGwInterval, pktStatsAllocs=pktStatsAllocs, slbStatPortRealServerServerIndex=slbStatPortRealServerServerIndex, memStatsPoolBytes=memStatsPoolBytes, fltCurCfgDstMac=fltCurCfgDstMac, bwmStatSpTcrPortIndex=bwmStatSpTcrPortIndex, filtering=filtering, vlans=vlans, ripCurCfgStaticSupply=ripCurCfgStaticSupply, bwmNewCfgContractState=bwmNewCfgContractState, bwmStatSpTcTable=bwmStatSpTcTable, agReset=agReset, ftpSlbStatTotal=ftpSlbStatTotal, ipRouteInfoInterface=ipRouteInfoInterface, slbCurCfgGroupTable=slbCurCfgGroupTable, hwPowerSupplyStatus=hwPowerSupplyStatus, ipFwdCurCfgLocalSubnet=ipFwdCurCfgLocalSubnet, gslbNewCfgRemSiteState=gslbNewCfgRemSiteState, bwmStatSpTcPortIndex=bwmStatSpTcPortIndex, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, slbStatRServerHighestSessions=slbStatRServerHighestSessions, gslbNewCfgGenLookups=gslbNewCfgGenLookups, dnsCurCfgDomainName=dnsCurCfgDomainName, slbStatGroupHCOctetsLow32=slbStatGroupHCOctetsLow32, tcpStatCurConns=tcpStatCurConns, ipCurCfgGwEntry=ipCurCfgGwEntry, hwRevision=hwRevision, agNewCfgHttpServerPort=agNewCfgHttpServerPort, slbCurCfgRealServerIpAddr=slbCurCfgRealServerIpAddr, gslbNewCfgGenState=gslbNewCfgGenState, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, vrrpNewCfgVirtRtrTckHsrp=vrrpNewCfgVirtRtrTckHsrp, slbStatPortRealServerTable=slbStatPortRealServerTable, hwRedundantPSStatus=hwRedundantPSStatus)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", memStatsFrees=memStatsFrees, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, slbNewCfgSyncFilt=slbNewCfgSyncFilt, ripCurCfgUpdatePeriod=ripCurCfgUpdatePeriod, globalSLB=globalSLB, agTftpServer=agTftpServer, agPortNewCfgRmon=agPortNewCfgRmon, portInfoTableEntry=portInfoTableEntry, gslbCurCfgRemSiteState=gslbCurCfgRemSiteState, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, agPortNewCfgFastEthFctl=agPortNewCfgFastEthFctl, fltCurCfgAclIpOption=fltCurCfgAclIpOption, memStatsLargest=memStatsLargest, gslbNewCfgGenLookupPort=gslbNewCfgGenLookupPort, radCurCfgAuthenString=radCurCfgAuthenString, agPortCurCfgStp=agPortCurCfgStp, gslbSites=gslbSites, ipFwdCurCfgPortIndex=ipFwdCurCfgPortIndex, fltNewCfgTable=fltNewCfgTable, slbNewCfgFailOverIndex=slbNewCfgFailOverIndex, ipNewCfgIntfVlan=ipNewCfgIntfVlan, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, dynSLBRealServerEntry=dynSLBRealServerEntry, gslbStatMaintInGoodSiteUpdates=gslbStatMaintInGoodSiteUpdates, urlStatRedOrigSrvs=urlStatRedOrigSrvs, gslbCurCfgNetworkIndx=gslbCurCfgNetworkIndx, slbRealServerInfoEntry=slbRealServerInfoEntry, gslbCurCfgGenEip=gslbCurCfgGenEip, slbStatVServerHCOctets=slbStatVServerHCOctets, gslbCurCfgGenHttpRedirect=gslbCurCfgGenHttpRedirect, fltNewCfgPortTableEntry=fltNewCfgPortTableEntry, slbStatPortMaintNonTcpFrames=slbStatPortMaintNonTcpFrames, bwmPolicyTableMaxEnt=bwmPolicyTableMaxEnt, agNewCfgSyslog2Host=agNewCfgSyslog2Host, slbCurCfgGroupBackupGroup=slbCurCfgGroupBackupGroup, vrrpCurCfgVirtRtrGrpTckRServer=vrrpCurCfgVirtRtrGrpTckRServer, fltStatFltFirings=fltStatFltFirings, ftpNatStatTotal=ftpNatStatTotal, ipRouteInfoIndx=ipRouteInfoIndx, bwmContractTableMaxEnt=bwmContractTableMaxEnt, agPortNewCfgFastEthMode=agPortNewCfgFastEthMode, slbStatPortMaintUdpDatagrams=slbStatPortMaintUdpDatagrams, slbNewCfgVirtServerUrlHashLen=slbNewCfgVirtServerUrlHashLen, slbCurCfgVirtServiceVirtPort=slbCurCfgVirtServiceVirtPort, gslbNewCfgRemSiteIndx=gslbNewCfgRemSiteIndx, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, bwmStatTcName=bwmStatTcName, agPortCurCfgBackLink=agPortCurCfgBackLink, switch=switch, agPortCurCfgDiscardNonIPs=agPortCurCfgDiscardNonIPs, agGeneral=agGeneral, agPortNewCfgDiscardNonIPs=agPortNewCfgDiscardNonIPs, slbStatPortRealServerHCOctets=slbStatPortRealServerHCOctets, slbCurCfgSyncPip=slbCurCfgSyncPip, slbNewCfgRealServerAddUrl=slbNewCfgRealServerAddUrl, ipFwdNewCfgPortEntry=ipFwdNewCfgPortEntry, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, agPortNewCfgFastEthSpeed=agPortNewCfgFastEthSpeed, fltNewCfgDelete=fltNewCfgDelete, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, gslbCurCfgGenLookupTimeout=gslbCurCfgGenLookupTimeout, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, slbStatGroupTotalSessions=slbStatGroupTotalSessions, slbNewCfgVirtServerLayer3Only=slbNewCfgVirtServerLayer3Only, bwmPolicyConfig=bwmPolicyConfig, fltCurCfgInvert=fltCurCfgInvert, ipRouteInfoMask=ipRouteInfoMask, gslbStatRemRealServerTable=gslbStatRemRealServerTable, bwmStatSpTcName=bwmStatSpTcName, ipInterfaceTableMax=ipInterfaceTableMax, bwmCurCfgPolicyTosIn=bwmCurCfgPolicyTosIn, slbStatPortMaintIncorrectVports=slbStatPortMaintIncorrectVports, slbCurCfgMmask=slbCurCfgMmask, slbStatRServerCurrSessions=slbStatRServerCurrSessions, fltCurCfgAclIcmp=fltCurCfgAclIcmp, slbNewCfgVirtServerIpAddress=slbNewCfgVirtServerIpAddress, slbNewCfgVirtServerCoffset=slbNewCfgVirtServerCoffset, fltCurCfgAclTcpSyn=fltCurCfgAclTcpSyn, slbNewCfgRealServerUrlBmap=slbNewCfgRealServerUrlBmap, slbNewCfgVirtServicePBind=slbNewCfgVirtServicePBind, slbCurCfgGroupRealServers=slbCurCfgGroupRealServers, gslbStatMaintInBadSiteUpdates=gslbStatMaintInBadSiteUpdates, ipCurCfgIntfAddr=ipCurCfgIntfAddr, fltCurCfgProtocol=fltCurCfgProtocol, ipNewCfgGwRetry=ipNewCfgGwRetry, gslbDNS=gslbDNS, ipCurCfgGwIndex=ipCurCfgGwIndex, gslbNewCfgNetworkTableEntry=gslbNewCfgNetworkTableEntry, ripNewCfgPoisonReverse=ripNewCfgPoisonReverse, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, arpInfoSrcPort=arpInfoSrcPort, gslbNewCfgNetworkVip2=gslbNewCfgNetworkVip2, fltCurCfgPortState=fltCurCfgPortState, slbCurCfgSyncFilt=slbCurCfgSyncFilt, hwPartNumber=hwPartNumber, fltNewCfgAction=fltNewCfgAction, private_mibs=private_mibs, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, ftpStats=ftpStats, dynSLBRealServerWeight=dynSLBRealServerWeight, vrrpCurCfgVirtRtrGrpTckHsrp=vrrpCurCfgVirtRtrGrpTckHsrp, gslbNewCfgGenOne=gslbNewCfgGenOne, slbRealServerInfoHealthLayer=slbRealServerInfoHealthLayer, slbNewCfgPortEntry=slbNewCfgPortEntry, ipRouteInfoTag=ipRouteInfoTag, slbNewCfgRealServerWeight=slbNewCfgRealServerWeight, ipCurCfgGwInterval=ipCurCfgGwInterval, slbStatPortMaintTcpFragments=slbStatPortMaintTcpFragments, slbNewCfgUrlRedirUriHashLength=slbNewCfgUrlRedirUriHashLength, gslbCurCfgGenUsern=gslbCurCfgGenUsern, gslbCurCfgNetworkTable=gslbCurCfgNetworkTable, slbNewCfgRealServerEntry=slbNewCfgRealServerEntry, agPortCurCfgFastEthMode=agPortCurCfgFastEthMode, memStatsAllocs=memStatsAllocs, bwmStatSpTcContractIndex=bwmStatSpTcContractIndex, slbCurCfgFailOverSilenceInterval=slbCurCfgFailOverSilenceInterval, gslbNewCfgGenEip=gslbNewCfgGenEip, portmirroring=portmirroring, ipNewCfgIntfState=ipNewCfgIntfState, slbCurCfgUrlLbPathString=slbCurCfgUrlLbPathString, fltCurCfgAclTcpFin=fltCurCfgAclTcpFin, operSlbPortClrSessionTab=operSlbPortClrSessionTab, hwSensor1Temp=hwSensor1Temp, slbNewCfgSyncVrrp=slbNewCfgSyncVrrp, fltNewCfgNat=fltNewCfgNat, slbCurCfgFailOverPrimaryIp=slbCurCfgFailOverPrimaryIp, fltCurCfgSrcIpMask=fltCurCfgSrcIpMask, ipGatewayTableMax=ipGatewayTableMax, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, slbStatVServerHeaderHits=slbStatVServerHeaderHits, fltNewCfgFwlb=fltNewCfgFwlb, slbCurCfgVirtServerLayer3Only=slbCurCfgVirtServerLayer3Only, fltNewCfgSrcIp=fltNewCfgSrcIp, slbNewCfgRealServerPingInterval=slbNewCfgRealServerPingInterval, vrrpCurCfgVirtRtrGrpTckL4Port=vrrpCurCfgVirtRtrGrpTckL4Port, agPortCurCfgTableEntry=agPortCurCfgTableEntry, slbNewCfgFailOverSilenceInterval=slbNewCfgFailOverSilenceInterval, vrrpCurCfgGenState=vrrpCurCfgGenState, pktStats=pktStats, agCurCfgHttpServerPort=agCurCfgHttpServerPort, gslbCurCfgNetworkVip2=gslbCurCfgNetworkVip2, slbNewCfgFailOverSecondaryIp=slbNewCfgFailOverSecondaryIp, ripNewCfgSupply=ripNewCfgSupply, gslbNewCfgGenLookupTimeout=gslbNewCfgGenLookupTimeout, bwmCurCfgPolicyHard=bwmCurCfgPolicyHard, bwmStatTcrBufferUsed=bwmStatTcrBufferUsed, bwmCurCfgContractName=bwmCurCfgContractName, ipFwdCurCfgPortState=ipFwdCurCfgPortState, gslbGeneral=gslbGeneral, gslbNewCfgGenMinco=gslbNewCfgGenMinco, vrrpCurCfgGenTckL4PortInc=vrrpCurCfgGenTckL4PortInc, bwmStatSpTcOutdisoct=bwmStatSpTcOutdisoct, slbRealServerInfoIpAddr=slbRealServerInfoIpAddr, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, slbCurCfgVirtServerBwmContract=slbCurCfgVirtServerBwmContract, fltNewCfgFtpNatActive=fltNewCfgFtpNatActive, slbNewCfgSyncPip=slbNewCfgSyncPip, bwmCurCfgContractPrec=bwmCurCfgContractPrec, slbNewCfgGroupName=slbNewCfgGroupName, fltNewCfgAclTcpPsh=fltNewCfgAclTcpPsh, ipNewCfgIntfDelete=ipNewCfgIntfDelete, slbStatVServerTable=slbStatVServerTable, slbCurCfgGlobalControl=slbCurCfgGlobalControl, slbStatRServerEntry=slbStatRServerEntry, gslbNewCfgRemSiteSecondaryIp=gslbNewCfgRemSiteSecondaryIp, slbNewCfgFailOverState=slbNewCfgFailOverState, pktStatsSmalls=pktStatsSmalls, dynSLBRealServerPortNum=dynSLBRealServerPortNum, bwmNewCfgPolicyIndx=bwmNewCfgPolicyIndx, slbStatMaintBackupServActs=slbStatMaintBackupServActs, bwmStatTcrContractIndex=bwmStatTcrContractIndex, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, slbCurCfgRealServerCookie=slbCurCfgRealServerCookie, agPortNewCfgState=agPortNewCfgState, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, slbNewCfgRealServerMaxConns=slbNewCfgRealServerMaxConns, bwmNewCfgPolicyTosOut=bwmNewCfgPolicyTosOut, bwmNewCfgContractTableEntry=bwmNewCfgContractTableEntry, slbNewCfgVirtServiceHttpSlb=slbNewCfgVirtServiceHttpSlb, gslbNewCfgRemSiteTable=gslbNewCfgRemSiteTable, slbGroupTableMaxSize=slbGroupTableMaxSize, slbStatGroupEntry=slbStatGroupEntry, vrrpGeneral=vrrpGeneral, fltNewCfgAclTcpFin=fltNewCfgAclTcpFin, fltStatFltIndex=fltStatFltIndex, slbNewCfgRealServerSubmac=slbNewCfgRealServerSubmac, urlStatRedCookie=urlStatRedCookie, gslbStatRemRealServerEntry=gslbStatRemRealServerEntry, portInfoTable=portInfoTable, ipNewCfgIntfEntry=ipNewCfgIntfEntry, vlanNewCfgTable=vlanNewCfgTable, fltCurCfgPortFiltBmap=fltCurCfgPortFiltBmap, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, agTftpServerIpAddr=agTftpServerIpAddr, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, bwmStats=bwmStats, slbUrlRedir=slbUrlRedir, gslbCurCfgNetworkTableEntry=gslbCurCfgNetworkTableEntry, fltNewCfgTcpAck=fltNewCfgTcpAck, ripStatInPkts=ripStatInPkts, filterStats=filterStats, slbNewCfgUrlLbPathIndex=slbNewCfgUrlLbPathIndex, slbCurCfgVirtServerUrlHashLen=slbCurCfgVirtServerUrlHashLen, ipFwdNewCfgPortTable=ipFwdNewCfgPortTable, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, fltCurCfgAclIpTos=fltCurCfgAclIpTos, gslbNewCfgGenLookupDname=gslbNewCfgGenLookupDname, slbNewCfgRealServerTable=slbNewCfgRealServerTable, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, fltNewCfgCache=fltNewCfgCache, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, bwmNewCfgPolicySoft=bwmNewCfgPolicySoft, radNewCfgPort=radNewCfgPort, slbCurCfgRealServerFailRetry=slbCurCfgRealServerFailRetry, slbNewCfgPortSlbHotStandby=slbNewCfgPortSlbHotStandby, slbStatPortRealServerCurrSessions=slbStatPortRealServerCurrSessions, slbNewCfgPeerState=slbNewCfgPeerState, gslbNewCfgNetworkDelete=gslbNewCfgNetworkDelete, slbNewCfgUrlLbPathDelete=slbNewCfgUrlLbPathDelete, agPortCurCfgFastEthSpeed=agPortCurCfgFastEthSpeed, slbStatRServerHCOctetsLow32=slbStatRServerHCOctetsLow32, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, ipCurCfgGwAddr=ipCurCfgGwAddr, agCurCfgSpanningTree=agCurCfgSpanningTree, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, vrrpCurCfgVirtRtrTckRServer=vrrpCurCfgVirtRtrTckRServer, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, gslbNewCfgGenDnsTTL=gslbNewCfgGenDnsTTL, vlanCurCfgJumbo=vlanCurCfgJumbo, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, gslbNewCfgNetworkVip1=gslbNewCfgNetworkVip1, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, slbCurCfgPortSlbPipState=slbCurCfgPortSlbPipState, agConfigForNxtReset=agConfigForNxtReset, slbNewCfgFailOverTblEntry=slbNewCfgFailOverTblEntry, gslbNewCfgGenRemSiteUpdateInterval=gslbNewCfgGenRemSiteUpdateInterval, slbNewCfgUrlLbPathString=slbNewCfgUrlLbPathString, fltCurCfgTable=fltCurCfgTable, pmCurCfgMirroredPort=pmCurCfgMirroredPort, slbFailOverInfoSecondaryIp=slbFailOverInfoSecondaryIp, ipFwdCurCfgState=ipFwdCurCfgState, slbNewCfgUrlRedirHeader=slbNewCfgUrlRedirHeader, slbNewCfgVirtServerDelete=slbNewCfgVirtServerDelete, gslbCurCfgGenLookupDname=gslbCurCfgGenLookupDname, slbCurCfgVirtServiceRealGroup=slbCurCfgVirtServiceRealGroup, arpInfoFlag=arpInfoFlag, slbNewCfgVirtServiceVirtPort=slbNewCfgVirtServiceVirtPort, slbCurCfgVirtServicePBind=slbCurCfgVirtServicePBind, operSlbPortTable=operSlbPortTable, bwmCurCfgPolicySoft=bwmCurCfgPolicySoft, slbUrlBalance=slbUrlBalance, slbCurCfgGroupEntry=slbCurCfgGroupEntry)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", slbCurCfgRealServerName=slbCurCfgRealServerName, ipCurCfgGwMetric=ipCurCfgGwMetric, bwmCurCfgPolicyTable=bwmCurCfgPolicyTable, bwmStatSpTcEntry=bwmStatSpTcEntry, fltNewCfgAclIpTos=fltNewCfgAclIpTos, ipNewCfgGwArp=ipNewCfgGwArp, agPortNewCfgTableEntry=agPortNewCfgTableEntry, slbRealServerMaxSize=slbRealServerMaxSize, ipNewCfgGwIndex=ipNewCfgGwIndex, vlanCurCfgVlanId=vlanCurCfgVlanId, slbNewCfgVirtualServerEntry=slbNewCfgVirtualServerEntry)
