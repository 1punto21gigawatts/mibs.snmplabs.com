#
# PySNMP MIB module RAID-Adapter-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAID-Adapter-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:51:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, Integer32, Unsigned32, ObjectIdentity, IpAddress, NotificationType, Counter64, enterprises, ModuleIdentity, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Integer32", "Unsigned32", "ObjectIdentity", "IpAddress", "NotificationType", "Counter64", "enterprises", "ModuleIdentity", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lsi = MibIdentifier((1, 3, 6, 1, 4, 1, 3582))
megaRaid = MibIdentifier((1, 3, 6, 1, 4, 1, 3582, 1))
megaRaidMib = MibIdentifier((1, 3, 6, 1, 4, 1, 3582, 1, 1))
adapterTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1), )
if mibBuilder.loadTexts: adapterTable.setStatus('optional')
if mibBuilder.loadTexts: adapterTable.setDescription('A List of Adapter Entries containing Information/Properties about the Adapters in the System.')
adapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "adpAdapterNumber"))
if mibBuilder.loadTexts: adapterEntry.setStatus('optional')
if mibBuilder.loadTexts: adapterEntry.setDescription('An entry in the Adapter Table. Each Entry corresponds to one Adapter in the System.')
adpAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: adpAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter Object. This Entry in the Table, contains Information about the Adapter Number specified by this variable.')
numLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLogicalDrives.setStatus('optional')
if mibBuilder.loadTexts: numLogicalDrives.setDescription('Number of Logical Drives Configured on this Adapter.')
firmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('optional')
if mibBuilder.loadTexts: firmwareVersion.setDescription('The Firmware Version of the Firmware running on this Adapter.')
biosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosVersion.setStatus('optional')
if mibBuilder.loadTexts: biosVersion.setDescription('The Bios Version of the BIOS Present in the Flash ROM on this Adapter.')
dramSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dramSizeInMB.setStatus('optional')
if mibBuilder.loadTexts: dramSizeInMB.setDescription('Amount of DRAM in Mega Bytes present on this Adapter.')
rebuildRateInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebuildRateInPercent.setStatus('optional')
if mibBuilder.loadTexts: rebuildRateInPercent.setDescription('Rebuild Rate for this Adapter. This determines the Priority of Rebuild/Check-Consistency/Reconstruct Operations versus the Read-Write Operations.')
flushInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 10))).clone(namedValues=NamedValues(("twoSec", 2), ("fourSec", 4), ("sixSec", 6), ("eightSec", 8), ("tenSec", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flushInterval.setStatus('optional')
if mibBuilder.loadTexts: flushInterval.setDescription('Internal Cache Flush Interval for Logical Drives in WriteBack Mode.')
maxConcurrentCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxConcurrentCmds.setStatus('optional')
if mibBuilder.loadTexts: maxConcurrentCmds.setDescription('Maximum Concurrent Commands Supported by the Adapter.')
spinupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spinupDelay.setStatus('optional')
if mibBuilder.loadTexts: spinupDelay.setDescription('This is the Spinup Delay for Spinning Up Physical Drives at Firmware Initialization Time. The Physical Drives are divided into Groups, each containing the number of drives indicated by the spinupCount variable. spinupDelay variable is the amount of delay used before the drives in the next group are issued a SPINUP Command.')
spinupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spinupCount.setStatus('optional')
if mibBuilder.loadTexts: spinupCount.setDescription('This is the Spinup Count for Spinning up Physical Drives at Firmware Initialization Time. The Physical Drives are divided into Groups, each containing the number of drives indicated by this variable. All the drives in a group are issued SPINUP Command without any delay. Next group is given SPINUP Commands after a delay indicated by the spinupDelay variable.')
adpIOReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpIOReadsPerSec.setStatus('optional')
if mibBuilder.loadTexts: adpIOReadsPerSec.setDescription('Number of IO Reads/sec statistics for this adapter.')
adpIOWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpIOWritesPerSec.setStatus('optional')
if mibBuilder.loadTexts: adpIOWritesPerSec.setDescription('Number of IO Writes/sec statistics for this adapter.')
adpReadKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpReadKBsPerSec.setStatus('optional')
if mibBuilder.loadTexts: adpReadKBsPerSec.setDescription('Amount of Data Transferred in KBs/sec due to READ Transfers.')
adpWriteKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpWriteKBsPerSec.setStatus('optional')
if mibBuilder.loadTexts: adpWriteKBsPerSec.setDescription('Amount of Data Transferred in KBs/sec due to WRITE Transfers.')
adpReadFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpReadFailuresPerSec.setStatus('optional')
if mibBuilder.loadTexts: adpReadFailuresPerSec.setDescription('Number of Read-Failures/sec statistics for this adapter.')
adpWriteFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpWriteFailuresPerSec.setStatus('optional')
if mibBuilder.loadTexts: adpWriteFailuresPerSec.setDescription('Number of Write-Failures/sec statistics for this adapter.')
scanChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scanOver", 1), ("startScan", 2), ("scanInProg", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanChannels.setStatus('optional')
if mibBuilder.loadTexts: scanChannels.setDescription('Use this Variable to Discover the Non-Disk Devices attached to the Adapter. Set this Variable to startscan (an integer value of 2) to start the Channel Scanning.')
adpBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpBasePort.setStatus('optional')
if mibBuilder.loadTexts: adpBasePort.setDescription('Maximum Concurrent Commands Supported by the Adapter.')
numSCSIChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSCSIChannels.setStatus('optional')
if mibBuilder.loadTexts: numSCSIChannels.setDescription('Maximum number of SCSI Channels Supported by the Adapter.')
numFCLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numFCLoops.setStatus('optional')
if mibBuilder.loadTexts: numFCLoops.setDescription('Number of Fibre channel loops Supported by the Adapter.')
subSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subSystemID.setStatus('optional')
if mibBuilder.loadTexts: subSystemID.setDescription('The PCI sub system ID of this controller')
subSystemVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subSystemVendorID.setStatus('optional')
if mibBuilder.loadTexts: subSystemVendorID.setDescription('The PCI sub system vendor ID of this controller')
productName = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('optional')
if mibBuilder.loadTexts: productName.setDescription('The enriched formation of the controller retrieved from the firmware')
adpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 20))).clone(namedValues=NamedValues(("fiveMB", 1), ("tenMB", 2), ("twentyMB", 3), ("fortyMB", 4), ("eightyMB", 5), ("oneHundredSixtyMB", 6), ("threeHundredTwentyMB", 7), ("unAvailable", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpSpeed.setStatus('optional')
if mibBuilder.loadTexts: adpSpeed.setDescription('Maximum transfer speed of the adapter.')
logicaldriveTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2), )
if mibBuilder.loadTexts: logicaldriveTable.setStatus('optional')
if mibBuilder.loadTexts: logicaldriveTable.setDescription('A List of Logical Drive Entries containing Information/Properties about the Logical Drives Configured in the System.')
logicaldriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "ldAdapterNumber"), (0, "RAID-Adapter-MIB", "logicalDriveNumber"))
if mibBuilder.loadTexts: logicaldriveEntry.setStatus('optional')
if mibBuilder.loadTexts: logicaldriveEntry.setDescription('An Entry in the Logical Drive Table.')
ldAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: ldAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter/LogicalDrive object.')
logicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDriveNumber.setStatus('optional')
if mibBuilder.loadTexts: logicalDriveNumber.setDescription('Logical Drive Number for this Logical Drive Entry.')
status = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 0), ("degraded", 1), ("optimal", 2), ("initialize", 3), ("checkConsistency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: status.setStatus('optional')
if mibBuilder.loadTexts: status.setDescription('The Status of this Logical Drive.')
sizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sizeInMB.setStatus('optional')
if mibBuilder.loadTexts: sizeInMB.setDescription('The Configured Size of this Logical Drive.')
raidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5))).clone(namedValues=NamedValues(("rAID0", 0), ("rAID1", 1), ("rAID3", 3), ("rAID5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidLevel.setStatus('optional')
if mibBuilder.loadTexts: raidLevel.setDescription('Configured Raid Level for this Logical Drive.')
stripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("oneKB", 1), ("twoKB", 2), ("fourKB", 4), ("eightKB", 8), ("sixteenKB", 16), ("thirtyTwoKB", 32), ("sixtyFourKB", 64), ("oneTwentyEightKB", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stripeSize.setStatus('optional')
if mibBuilder.loadTexts: stripeSize.setDescription('Configured Stripe Size for this Logical Drive.')
readPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("readAhead", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readPolicy.setStatus('optional')
if mibBuilder.loadTexts: readPolicy.setDescription('Configured Read Policy for this Logical Drive.')
writePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("writeThru", 0), ("writeBack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writePolicy.setStatus('optional')
if mibBuilder.loadTexts: writePolicy.setDescription('Configured Write Policy for this Logical Drive.')
cachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cachedIO", 0), ("directIO", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cachePolicy.setStatus('optional')
if mibBuilder.loadTexts: cachePolicy.setDescription('Configured Cache Policy for this Logical Drive.')
enquiryString = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: enquiryString.setStatus('optional')
if mibBuilder.loadTexts: enquiryString.setDescription('SCSI Inquiry String for this Logical Drive.')
numberOfSpans = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfSpans.setStatus('optional')
if mibBuilder.loadTexts: numberOfSpans.setDescription('Number of Arrays across which this Logical Drive is Spanning.')
numberOfStripes = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfStripes.setStatus('optional')
if mibBuilder.loadTexts: numberOfStripes.setDescription('Configured Number of Stripes for this Logical Drive.')
checkConsistencyOrInitializeProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkConsistencyOrInitializeProgress.setStatus('optional')
if mibBuilder.loadTexts: checkConsistencyOrInitializeProgress.setDescription('Check Consistency or Initialize Progress for this Logical Drive if the Logical Drive Status is checkconsistencyinprogress or initializeinprogress.')
ldIOReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldIOReadsPerSec.setStatus('optional')
if mibBuilder.loadTexts: ldIOReadsPerSec.setDescription('Number of IO Reads/sec Statistics for this Logical Drive.')
ldIOWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldIOWritesPerSec.setStatus('optional')
if mibBuilder.loadTexts: ldIOWritesPerSec.setDescription('Number of IO Writes/sec Statistics for this Logical Drive.')
ldReadKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldReadKBsPerSec.setStatus('optional')
if mibBuilder.loadTexts: ldReadKBsPerSec.setDescription('Amount of Data Transferred in KBs/sec due to READ Transfers.')
ldWriteKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldWriteKBsPerSec.setStatus('optional')
if mibBuilder.loadTexts: ldWriteKBsPerSec.setDescription('Amount of Data Transferred in KBs/sec due to WRITE Transfers.')
ldReadFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldReadFailuresPerSec.setStatus('optional')
if mibBuilder.loadTexts: ldReadFailuresPerSec.setDescription('Number of Read-Failures/sec Statistics for this Logical Drive.')
ldWriteFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldWriteFailuresPerSec.setStatus('optional')
if mibBuilder.loadTexts: ldWriteFailuresPerSec.setDescription('Number of Write-Failures/sec Statistics for this Logical Drive.')
physicaldriveTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3), )
if mibBuilder.loadTexts: physicaldriveTable.setStatus('optional')
if mibBuilder.loadTexts: physicaldriveTable.setDescription('A List of Physical Device Entries containing Information about the Physical Devices in the System.')
physicaldriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "physAdapterNumber"), (0, "RAID-Adapter-MIB", "physChannel"), (0, "RAID-Adapter-MIB", "targetID"), (0, "RAID-Adapter-MIB", "lunNumber"))
if mibBuilder.loadTexts: physicaldriveEntry.setStatus('optional')
if mibBuilder.loadTexts: physicaldriveEntry.setDescription('An Entry in the Physical Drive Table.')
physAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: physAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter/Physical-Drive Instance.')
physChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physChannel.setStatus('optional')
if mibBuilder.loadTexts: physChannel.setDescription('Channel Number at Which this Physical Drive is Present.')
targetID = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetID.setStatus('optional')
if mibBuilder.loadTexts: targetID.setDescription('SCSI Target ID at Which This Physical Drive is Present.')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 20))).clone(namedValues=NamedValues(("ready", 1), ("online", 3), ("failed", 4), ("rebuild", 5), ("hotSpare", 6), ("nonDisk", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: state.setStatus('optional')
if mibBuilder.loadTexts: state.setDescription('Current State of this Physical Drive.')
arrayPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayPosition.setStatus('optional')
if mibBuilder.loadTexts: arrayPosition.setDescription('Array is a group of Physical Drives used to Configure Logical Drives. This String Variable has values of the type Ai-j. Example: A1-2 implies that this drive is 2nd member of Array-1.')
sizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sizeMB.setStatus('optional')
if mibBuilder.loadTexts: sizeMB.setDescription('Actual Size of this Physical Drive.')
deviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("disk", 0), ("tape", 1), ("printer", 2), ("processor", 3), ("wORM", 4), ("cDROM", 5), ("scanner", 6), ("optical", 7), ("changer", 8), ("communication", 9), ("asynchronousLow", 10), ("asynchronousHigh", 11), ("reservedLow", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('optional')
if mibBuilder.loadTexts: deviceType.setDescription('Device Type of this Physical Drive.')
inquiryString = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: inquiryString.setStatus('optional')
if mibBuilder.loadTexts: inquiryString.setDescription('SCSI Inquiry String for this Device.')
scsiLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sCSI1", 1), ("sCSI2", 2), ("sCSI3", 3), ("sCSI4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLevel.setStatus('optional')
if mibBuilder.loadTexts: scsiLevel.setDescription('ANSI SCSI Level Conformance of this Device.')
maximumQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumQueueDepth.setStatus('optional')
if mibBuilder.loadTexts: maximumQueueDepth.setDescription('The maximum queue depth of this Device.')
rebuildProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rebuildProgress.setStatus('optional')
if mibBuilder.loadTexts: rebuildProgress.setDescription('Rebuild Progress for this Physical Drive if the Physical Drive State is Rebuild.')
mediumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediumErrors.setStatus('optional')
if mibBuilder.loadTexts: mediumErrors.setDescription('Medium Errors Occurred on this Drive Since it was Configured.')
physSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physSlotStatus.setStatus('optional')
if mibBuilder.loadTexts: physSlotStatus.setDescription('Indicates the status of interest on the drive slot')
physSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physSlotNumber.setStatus('optional')
if mibBuilder.loadTexts: physSlotNumber.setDescription('SCSI Target Slot Number at Which This Physical Drive is Present.')
otherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherErrors.setStatus('optional')
if mibBuilder.loadTexts: otherErrors.setDescription('Other Errors Occurred on this Drive Since it was Configured.')
physTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 20))).clone(namedValues=NamedValues(("wide", 0), ("narrow", 1), ("notSupported", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physTermination.setStatus('optional')
if mibBuilder.loadTexts: physTermination.setDescription('Negotiation Information of the physical drive. This field is applicable only to drives.')
physSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 20))).clone(namedValues=NamedValues(("maximum", 0), ("asynchronous", 1), ("fiveMB", 2), ("tenMB", 3), ("twentyMB", 4), ("fortyMB", 5), ("eightyMB", 6), ("oneHundredSixtyMB", 7), ("threeHundredTwentyMB", 8), ("notSupported", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physSpeed.setStatus('optional')
if mibBuilder.loadTexts: physSpeed.setDescription('Transfer speed of the physical drive. This field is applicable only to drives.')
lunNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunNumber.setStatus('optional')
if mibBuilder.loadTexts: lunNumber.setDescription('SCSI LUN ID of this Physical Device')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4), )
if mibBuilder.loadTexts: channelTable.setStatus('optional')
if mibBuilder.loadTexts: channelTable.setDescription('A List of Channel Entries containing Information/Properties about the Channels on the Adapter.')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "chanAdapterNumber"), (0, "RAID-Adapter-MIB", "channel"))
if mibBuilder.loadTexts: channelEntry.setStatus('optional')
if mibBuilder.loadTexts: channelEntry.setDescription('An Entry in the channel table.')
chanAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: chanAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter/Channel Instance.')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channel.setStatus('optional')
if mibBuilder.loadTexts: channel.setDescription('Channel Number for this Channel.')
terminations = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("higher8Bits", 1), ("wideTerminations", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminations.setStatus('optional')
if mibBuilder.loadTexts: terminations.setDescription('Current Terminations Effective on this Channel')
channelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quiet", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus.setStatus('optional')
if mibBuilder.loadTexts: channelStatus.setDescription('Current Activity Status (QUIET/ACTIVE) for this Channel.')
channelType = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sCSI", 0), ("rAID", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelType.setStatus('mandatory')
if mibBuilder.loadTexts: channelType.setDescription('Type of the channel(RAID/SCSI).')
fcDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5), )
if mibBuilder.loadTexts: fcDeviceTable.setStatus('optional')
if mibBuilder.loadTexts: fcDeviceTable.setDescription('A List of Entries containing Information about the FC Devices in the System.')
fcDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "fcPhysAdapterNumber"), (0, "RAID-Adapter-MIB", "fcPhysChannel"), (0, "RAID-Adapter-MIB", "fcTargetId"))
if mibBuilder.loadTexts: fcDeviceEntry.setStatus('optional')
if mibBuilder.loadTexts: fcDeviceEntry.setDescription('An Entry in the FC Device Table.')
fcPhysAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPhysAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: fcPhysAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter/Physical-Drive Instance.')
fcPhysChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPhysChannel.setStatus('optional')
if mibBuilder.loadTexts: fcPhysChannel.setDescription('The Channel Number for this Instance of Adapter/Physical-Drive ')
fcTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetId.setStatus('optional')
if mibBuilder.loadTexts: fcTargetId.setDescription('The Target Number for this Instance of Adapter/Physical-Drive')
fcLoopID_0 = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inLoop0", 1), ("inLoop1", 2), ("notInTheLoop", 255)))).setLabel("fcLoopID-0").setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopID_0.setStatus('optional')
if mibBuilder.loadTexts: fcLoopID_0.setDescription('Loop ID of this FC Drive.')
fcLoopID_1 = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inLoop0", 1), ("inLoop1", 2), ("notInTheLoop", 255)))).setLabel("fcLoopID-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopID_1.setStatus('optional')
if mibBuilder.loadTexts: fcLoopID_1.setDescription('Loop ID of this FC Drive.')
fcWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWwn.setStatus('optional')
if mibBuilder.loadTexts: fcWwn.setDescription('WWN is the World Wide Name of this FC device')
fcState = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 20))).clone(namedValues=NamedValues(("ready", 1), ("online", 3), ("failed", 4), ("rebuild", 5), ("hotspare", 6), ("nonDisk", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcState.setStatus('optional')
if mibBuilder.loadTexts: fcState.setDescription('Current State of this Physical Drive.')
fcArrayPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcArrayPosition.setStatus('optional')
if mibBuilder.loadTexts: fcArrayPosition.setDescription('Array is a group of Physical Drives used to Configure Logical Drives. This String Variable has values of the type Ai-j. Example: A1-2 implies that this drive is 2nd member of Array-1.')
fcSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSizeMB.setStatus('optional')
if mibBuilder.loadTexts: fcSizeMB.setDescription('Actual Size of this Physical Drive.')
fcInquiryString = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInquiryString.setStatus('optional')
if mibBuilder.loadTexts: fcInquiryString.setDescription('SCSI Inquiry String for this Device.')
fcScsiLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sCSI1", 1), ("sCSI2", 2), ("sCSI3", 3), ("sCSI4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcScsiLevel.setStatus('optional')
if mibBuilder.loadTexts: fcScsiLevel.setDescription('ANSI SCSI Level Conformance of this Device.')
fcRebuildProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRebuildProgress.setStatus('optional')
if mibBuilder.loadTexts: fcRebuildProgress.setDescription('Rebuild Progress for this Physical Drive if the Physical Drive State is Rebuild.')
fcMediumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcMediumErrors.setStatus('optional')
if mibBuilder.loadTexts: fcMediumErrors.setDescription('Medium Errors Occurred on this Drive Since it was Configured.')
fcOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOtherErrors.setStatus('optional')
if mibBuilder.loadTexts: fcOtherErrors.setDescription('Other Errors Occurred on this Drive Since it was Configured.')
fcChannelTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6), )
if mibBuilder.loadTexts: fcChannelTable.setStatus('optional')
if mibBuilder.loadTexts: fcChannelTable.setDescription('A List of FC Channel Entries containing Information about the FC Channels on the Adapter.')
fcChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "fcChanAdapterNumber"), (0, "RAID-Adapter-MIB", "fcChannel"))
if mibBuilder.loadTexts: fcChannelEntry.setStatus('optional')
if mibBuilder.loadTexts: fcChannelEntry.setDescription('An Entry in the FC channel table.')
fcChanAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcChanAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: fcChanAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter/fc-Channel Instance.')
fcChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcChannel.setStatus('optional')
if mibBuilder.loadTexts: fcChannel.setDescription('The Channel Number for this Instance ')
fcLoopNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopNumber.setStatus('optional')
if mibBuilder.loadTexts: fcLoopNumber.setDescription('Loop Index for this fcChannel.')
fcLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quiet", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopStatus.setStatus('optional')
if mibBuilder.loadTexts: fcLoopStatus.setDescription('Current Activity Status (QUIET/ACTIVE) for this fcChannel.')
fcNumberofDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNumberofDevices.setStatus('optional')
if mibBuilder.loadTexts: fcNumberofDevices.setDescription('The number of FC devices in this fcChannel')
fcProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProcessorType.setStatus('optional')
if mibBuilder.loadTexts: fcProcessorType.setDescription('The processor type on this fcChannel')
ioReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioReadsPerSec.setStatus('optional')
if mibBuilder.loadTexts: ioReadsPerSec.setDescription('The Total IO-Reads/Sec Statistics on all Adapters.')
ioWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioWritesPerSec.setStatus('optional')
if mibBuilder.loadTexts: ioWritesPerSec.setDescription('The Total IO-Writes/Sec Statistics on all Adapters.')
readKBsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readKBsPerSec.setStatus('optional')
if mibBuilder.loadTexts: readKBsPerSec.setDescription('The Total Read KBs Per Second Statistics on all Adapters.')
writeKBsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeKBsPerSec.setStatus('optional')
if mibBuilder.loadTexts: writeKBsPerSec.setDescription('The Total Write KBs Per Second Statistics on all Adapters.')
readFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readFailuresPerSec.setStatus('optional')
if mibBuilder.loadTexts: readFailuresPerSec.setDescription('The Total Read Failures Per Second Statistics on all Adapters.')
writeFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeFailuresPerSec.setStatus('optional')
if mibBuilder.loadTexts: writeFailuresPerSec.setDescription('The Total Write Failures Per Second Statistics on all Adapters.')
enclConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15), )
if mibBuilder.loadTexts: enclConfigurationTable.setStatus('optional')
if mibBuilder.loadTexts: enclConfigurationTable.setDescription('A List of Enclosure Configuration Entries containing Information about the SAF-TE Enclosures in the System.')
enclConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumber"))
if mibBuilder.loadTexts: enclConfigurationEntry.setStatus('optional')
if mibBuilder.loadTexts: enclConfigurationEntry.setDescription('An Entry in the Enclosure Configuration Table.')
enclAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: enclAdapterNumber.setDescription('The Adapter Number for this Instance of Adapter/Enclosure Instance.')
enclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('optional')
if mibBuilder.loadTexts: enclNumber.setDescription('Indicates the enclosure number for this Enclosure. The numbering is w.r.t adapter and not w.r.t Channel')
enclChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannel.setStatus('optional')
if mibBuilder.loadTexts: enclChannel.setDescription('Channel Number at Which this Enclosure is Present.')
enclNumDeviceSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumDeviceSlots.setStatus('optional')
if mibBuilder.loadTexts: enclNumDeviceSlots.setDescription('Total number of device slots on the channel for this Enclosure')
enclNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumFans.setStatus('optional')
if mibBuilder.loadTexts: enclNumFans.setDescription('Total number SEP manageable of fans for this Enclosure')
enclNumTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumTempSensors.setStatus('optional')
if mibBuilder.loadTexts: enclNumTempSensors.setDescription('Number of SEP manageable Temperature Sensors for this Enclosure')
enclNumPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumPowerSupplies.setStatus('optional')
if mibBuilder.loadTexts: enclNumPowerSupplies.setDescription('Maximum number of SEP manageable Power Supplies for this Enclosure')
enclDoorLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 0), ("unlocked", 1), ("locked", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDoorLockStatus.setStatus('optional')
if mibBuilder.loadTexts: enclDoorLockStatus.setDescription('Indicates whether this enclosure has door lock installed/locked/unlocked')
enclAudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAudibleAlarm", 0), ("audibleAlarm", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclAudibleAlarm.setStatus('optional')
if mibBuilder.loadTexts: enclAudibleAlarm.setDescription('Indicates the availability of Audible Alarm with this Enclosure')
enclAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclAlarmStatus.setStatus('optional')
if mibBuilder.loadTexts: enclAlarmStatus.setDescription('Indicates whether this Enclosure speaker is ON or OFF')
enclTemperatureScale = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahrenheit", 0), ("celsius", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTemperatureScale.setStatus('optional')
if mibBuilder.loadTexts: enclTemperatureScale.setDescription('Indicates whether this Enclosure reports temperature in Celsius or Fahrenheit')
enclTotalPowerOnMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTotalPowerOnMins.setStatus('optional')
if mibBuilder.loadTexts: enclTotalPowerOnMins.setDescription('This indicates the total time in minutes that the RAID device has been powered ON. It is cumulative over the life of the device')
enclTotalPowerOnCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTotalPowerOnCycles.setStatus('optional')
if mibBuilder.loadTexts: enclTotalPowerOnCycles.setDescription('This indicates the count of number of times that the RAID device has been powered ON. It is cumulative over the life of the device')
enclFanTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16), )
if mibBuilder.loadTexts: enclFanTable.setStatus('optional')
if mibBuilder.loadTexts: enclFanTable.setDescription('A List of SAF-TE Enclosure Fan Entries')
enclFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumberFan"), (0, "RAID-Adapter-MIB", "enclFanIndex"))
if mibBuilder.loadTexts: enclFanEntry.setStatus('optional')
if mibBuilder.loadTexts: enclFanEntry.setDescription('An Entry in the Enclosure Fan Table.')
enclNumberFan = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberFan.setStatus('optional')
if mibBuilder.loadTexts: enclNumberFan.setDescription('Enclosure Number at Which this Enclosure with the Fan is Present.')
enclFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFanIndex.setStatus('optional')
if mibBuilder.loadTexts: enclFanIndex.setDescription('The instance of the fan in the enclosure for the adapter/channel')
enclFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 128))).clone(namedValues=NamedValues(("operational", 0), ("malfunction", 1), ("notInstalled", 2), ("unknown", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFanStatus.setStatus('optional')
if mibBuilder.loadTexts: enclFanStatus.setDescription('The Status of this fan')
enclPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17), )
if mibBuilder.loadTexts: enclPowerSupplyTable.setStatus('optional')
if mibBuilder.loadTexts: enclPowerSupplyTable.setDescription('A List of SAF-TE Enclosure Power Supply Entries')
enclPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumberPower"), (0, "RAID-Adapter-MIB", "enclPowerSupplyIndex"))
if mibBuilder.loadTexts: enclPowerSupplyEntry.setStatus('optional')
if mibBuilder.loadTexts: enclPowerSupplyEntry.setDescription('An Entry in the Enclosure Power Supply Table.')
enclNumberPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberPower.setStatus('optional')
if mibBuilder.loadTexts: enclNumberPower.setDescription('enclosure number at Which this Enclosure with the Power Supply is Present.')
enclPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSupplyIndex.setStatus('optional')
if mibBuilder.loadTexts: enclPowerSupplyIndex.setDescription('The instance of the PowerSupply in the enclosure for the adapter/channel')
enclPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 128))).clone(namedValues=NamedValues(("operationalON", 0), ("operationalOFF", 1), ("malfunctionON", 2), ("malfunctionOFF", 3), ("notPresent", 4), ("present", 5), ("unknown", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSupplyStatus.setStatus('optional')
if mibBuilder.loadTexts: enclPowerSupplyStatus.setDescription('The Status of this PowerSupply')
enclTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18), )
if mibBuilder.loadTexts: enclTempSensorsTable.setStatus('optional')
if mibBuilder.loadTexts: enclTempSensorsTable.setDescription('A List of SAF-TE Enclosure Temperature Sensor Entries')
enclTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumberTemp"), (0, "RAID-Adapter-MIB", "enclTempSensorIndex"))
if mibBuilder.loadTexts: enclTempSensorsEntry.setStatus('optional')
if mibBuilder.loadTexts: enclTempSensorsEntry.setDescription('An Entry in the Enclosure Temperature Sensor Table.')
enclNumberTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberTemp.setStatus('optional')
if mibBuilder.loadTexts: enclNumberTemp.setDescription('enclosure number at Which this Enclosure with the temperature sensor is Present.')
enclTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorIndex.setStatus('optional')
if mibBuilder.loadTexts: enclTempSensorIndex.setDescription('The instance of the temperature sensor indices in the enclosure for the adapter/channel')
enclTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 245))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTemperature.setStatus('optional')
if mibBuilder.loadTexts: enclTemperature.setDescription('Indicates the temperature reported by the sensor in degree Fahrenheit')
raidTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200))
rtAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAdapterNumber.setStatus('optional')
if mibBuilder.loadTexts: rtAdapterNumber.setDescription('Adapter Number for which Trap is generated.')
rtLogicalDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtLogicalDriveNumber.setStatus('optional')
if mibBuilder.loadTexts: rtLogicalDriveNumber.setDescription('Logical Drive Number for which Trap is generated.')
rtChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtChannelNumber.setStatus('optional')
if mibBuilder.loadTexts: rtChannelNumber.setDescription('Channel Number on the Adapter for which Trap is Generated.')
rtTargetID = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtTargetID.setStatus('optional')
if mibBuilder.loadTexts: rtTargetID.setDescription('Device ID of the Physical Drive for which Trap is Generated.')
rtOldDriveState = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOldDriveState.setStatus('optional')
if mibBuilder.loadTexts: rtOldDriveState.setDescription('Old State of Logical/Physical Drive, when a State Change Trap is Generated.')
rtNewDriveState = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1006), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNewDriveState.setStatus('optional')
if mibBuilder.loadTexts: rtNewDriveState.setDescription('New State of Logical/Physical Drive, when a State Change Trap is Generated.')
rtSenseKey = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtSenseKey.setStatus('optional')
if mibBuilder.loadTexts: rtSenseKey.setDescription('Check Condition Sense-Key reported by Physical Drive for which Trap is Generated.')
rtASC = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASC.setStatus('optional')
if mibBuilder.loadTexts: rtASC.setDescription('Check Condition Additional Sense Code (ASC) reported by Physical Drive for which Trap is Generated.')
rtASCQ = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASCQ.setStatus('optional')
if mibBuilder.loadTexts: rtASCQ.setDescription('Check Condition Additional Sense Code Qualifier (ASCQ) reported by Physical Drive for which Trap is Generated.')
rtDriveVendor = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1010), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDriveVendor.setStatus('optional')
if mibBuilder.loadTexts: rtDriveVendor.setDescription('Vendor Identification String from the SCSI Inquiry Data for the Drive.')
rtEnclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1011), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclNumber.setStatus('optional')
if mibBuilder.loadTexts: rtEnclNumber.setDescription('Enclosure Number reported by the RAID Controller.')
rtEnclTempSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1012), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclTempSensorIndex.setStatus('optional')
if mibBuilder.loadTexts: rtEnclTempSensorIndex.setDescription('Enclosure Temperature Sensor Number reported by the SEP device')
rtEnclTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1013), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclTemperature.setStatus('optional')
if mibBuilder.loadTexts: rtEnclTemperature.setDescription('Enclosure Temperature in Fahrenheit reported by the SEP device')
rtEnclFanIndex = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1014), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclFanIndex.setStatus('optional')
if mibBuilder.loadTexts: rtEnclFanIndex.setDescription('Enclosure Fan Number reported by the SEP device')
rtEnclPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1015), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclPowerSupplyIndex.setStatus('optional')
if mibBuilder.loadTexts: rtEnclPowerSupplyIndex.setDescription('Enclosure Power Supply Number reported by the SEP device')
rtWWN = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1016), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtWWN.setStatus('optional')
if mibBuilder.loadTexts: rtWWN.setDescription('The World Wide Name of the FC device whose loop ID or State changes')
rtOldLoopID = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1017), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOldLoopID.setStatus('optional')
if mibBuilder.loadTexts: rtOldLoopID.setDescription('Index of the loop before its state changed')
rtNewLoopID = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1018), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNewLoopID.setStatus('optional')
if mibBuilder.loadTexts: rtNewLoopID.setDescription('Index of the loop after its state changed')
rtConfigUpdated = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9001)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtConfigUpdated.setDescription('Adapter-%d: A New Configuration has been written.')
rtPhysicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9002)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateChange.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtLogicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9003)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateChange.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9004)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeStarted.setDescription('Adapter-%d, Logical Drive-%d: Initialization Started.')
rtInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9005)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeCompleted.setDescription('Adapter-%d, Logical Drive-%d: Initialization Completed Successfully.')
rtInitializeAborted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9006)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeAborted.setDescription('Adapter-%d, Logical Drive-%d: Initialization Aborted by User.')
rtInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9007)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtInitializeFailed.setDescription('Adapter-%d, Logical Drive-%d: Initialization Failed.')
rtCheckConsistencyStarted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9008)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyStarted.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Started.')
rtCheckConsistencyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9009)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyCompleted.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Completed. No Inconsistencies Found.')
rtCheckConsistencyAborted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9010)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyAborted.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Aborted by User.')
rtConsistencyCorrected = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9011)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtConsistencyCorrected.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Operation Completed. Inconsistencies have been Cured.')
rtCheckConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9012)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtCheckConsistencyFailed.setDescription('Adapter-%d, Logical Drive-%d: Check Consistency Failed.')
rtReconstructionStarted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9013)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtReconstructionStarted.setDescription('Adapter-%d, Logical Drive-%d: Reconstruction Started.')
rtReconstructionCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9014)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtReconstructionCompleted.setDescription('Adapter-%d, Logical Drive-%d: Reconstruction Completed Successfully.')
rtReconstructionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9015)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
if mibBuilder.loadTexts: rtReconstructionFailed.setDescription('Adapter-%d, Logical Drive-%d: Reconstruction Failed.')
rtPredictiveFailuresExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9016)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtDriveVendor"), ("RAID-Adapter-MIB", "rtSenseKey"), ("RAID-Adapter-MIB", "rtASC"), ("RAID-Adapter-MIB", "rtASCQ"))
if mibBuilder.loadTexts: rtPredictiveFailuresExceeded.setDescription('Adapter-%d, Channel-%d, Target-%d: Reported Predictive Failure. Drive Identification String = %s Sense Key = 0x%x, ASC = 0x%x, ASCQ = 0x%x.')
rtPredictiveFailuresFalse = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9017)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtDriveVendor"), ("RAID-Adapter-MIB", "rtSenseKey"), ("RAID-Adapter-MIB", "rtASC"), ("RAID-Adapter-MIB", "rtASCQ"))
if mibBuilder.loadTexts: rtPredictiveFailuresFalse.setDescription('Adapter-%d, Channel-%d, Target-%d: Reported Failure Prediction Threshold Exceeded [FALSE]. Drive Identification String = %s Sense Key = 0x%x, ASC = 0x%x, ASCQ = 0x%x.')
rtCheckConditionStatus = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9018)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtSenseKey"), ("RAID-Adapter-MIB", "rtASC"), ("RAID-Adapter-MIB", "rtASCQ"))
if mibBuilder.loadTexts: rtCheckConditionStatus.setDescription('Adapter-%d, Channel-%d, Target-%d: Command Completed with Sense-Key-0x%x ASC-0x%x ASCQ-0x%x.')
rtNewDriveInserted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9019)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"))
if mibBuilder.loadTexts: rtNewDriveInserted.setDescription('Adapter-%d, Channel-%d, Target-%d: New Device Inserted.')
rtBatteryMissing = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9020)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtBatteryMissing.setDescription('Adapter-%d: Battery Module is missing.')
rtBatteryVolatageLow = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9021)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtBatteryVolatageLow.setDescription('Adapter-%d: Battery Module Voltage is Low.')
rtBatteryTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9022)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
if mibBuilder.loadTexts: rtBatteryTemperatureHigh.setDescription('Adapter-%d: Battery Module Temperature Exceeded Danger Threshold.')
rtPhysicalDriveStateReady = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9023)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateReady.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtPhysicalDriveStateOnline = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9024)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateOnline.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtPhysicalDriveStateFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9025)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateFailed.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtPhysicalDriveStateRebuild = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9026)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateRebuild.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtPhysicalDriveStateHotspare = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9027)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtPhysicalDriveStateHotspare.setDescription('Adapter-%d, Channel-%d, Target-%d: Drive State Changed from %s to %s.')
rtLogicalDriveStateOffline = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9028)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateOffline.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtLogicalDriveStateDegraded = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9029)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateDegraded.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtLogicalDriveStateOptimal = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9030)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateOptimal.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtLogicalDriveStateInitialize = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9031)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateInitialize.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtLogicalDriveStateChkConsist = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9032)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtLogicalDriveStateChkConsist.setDescription('Adapter-%d, Logical Drive-%d: State Changed from %s to %s.')
rtEnclTemperatureOutofRange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9033)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclTempSensorIndex"), ("RAID-Adapter-MIB", "rtEnclTemperature"))
if mibBuilder.loadTexts: rtEnclTemperatureOutofRange.setDescription('Adapter-%d, Channel-%d, Enclosure-%d, Temperature Sensor -%d: Temperature %d is out of Range')
rtEnclTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9034)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclTempSensorIndex"), ("RAID-Adapter-MIB", "rtEnclTemperature"))
if mibBuilder.loadTexts: rtEnclTemperatureNormal.setDescription('Adapter-%d, Channel-%d, Enclosure-%d, Temperature Sensor -%d: Temperature %d is Normal')
rtEnclFanMalfunction = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9035)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclFanIndex"))
if mibBuilder.loadTexts: rtEnclFanMalfunction.setDescription('Adapter-%d, Channel-%d, Enclosure-%d, Fan-%d: Fan is Malfunctioning')
rtEnclFanOk = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9036)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclFanIndex"))
if mibBuilder.loadTexts: rtEnclFanOk.setDescription('Adapter-%d, Channel-%d, Enclosure-%d, Fan-%d: Fan is operating properly')
rtEnclPowerSupplyMalfunction = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9037)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclPowerSupplyIndex"))
if mibBuilder.loadTexts: rtEnclPowerSupplyMalfunction.setDescription('Adapter-%d, Channel-%d, Enclosure-%d, Power Supply-%d: Power Supply is Malfunctioning')
rtEnclPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9038)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclPowerSupplyIndex"))
if mibBuilder.loadTexts: rtEnclPowerSupplyOk.setDescription('Adapter-%d, Channel-%d, Enclosure-%d, Power Supply-%d: Power Supply is operating properly')
rtFCLooplStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9040)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtOldLoopID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
if mibBuilder.loadTexts: rtFCLooplStateChange.setDescription('Adapter-%d, LoopId-%d: Loop State Changed from %s to %s.')
mibBuilder.exportSymbols("RAID-Adapter-MIB", channelType=channelType, fcState=fcState, spinupCount=spinupCount, productName=productName, fcWwn=fcWwn, fcOtherErrors=fcOtherErrors, ioWritesPerSec=ioWritesPerSec, rtInitializeAborted=rtInitializeAborted, adpIOReadsPerSec=adpIOReadsPerSec, rtEnclPowerSupplyMalfunction=rtEnclPowerSupplyMalfunction, physSlotStatus=physSlotStatus, fcLoopStatus=fcLoopStatus, enclFanEntry=enclFanEntry, enclNumberTemp=enclNumberTemp, fcChannelEntry=fcChannelEntry, channelEntry=channelEntry, fcMediumErrors=fcMediumErrors, rtLogicalDriveStateChange=rtLogicalDriveStateChange, fcTargetId=fcTargetId, enclNumTempSensors=enclNumTempSensors, rtLogicalDriveNumber=rtLogicalDriveNumber, adapterEntry=adapterEntry, rtEnclTemperature=rtEnclTemperature, adpWriteFailuresPerSec=adpWriteFailuresPerSec, terminations=terminations, enclConfigurationEntry=enclConfigurationEntry, rtPhysicalDriveStateHotspare=rtPhysicalDriveStateHotspare, deviceType=deviceType, numFCLoops=numFCLoops, enclNumber=enclNumber, rtWWN=rtWWN, spinupDelay=spinupDelay, numberOfSpans=numberOfSpans, rtDriveVendor=rtDriveVendor, enclNumberPower=enclNumberPower, rtLogicalDriveStateOptimal=rtLogicalDriveStateOptimal, rtNewDriveInserted=rtNewDriveInserted, enclNumFans=enclNumFans, rtBatteryVolatageLow=rtBatteryVolatageLow, rtPhysicalDriveStateRebuild=rtPhysicalDriveStateRebuild, readFailuresPerSec=readFailuresPerSec, logicalDriveNumber=logicalDriveNumber, rtPhysicalDriveStateFailed=rtPhysicalDriveStateFailed, fcChanAdapterNumber=fcChanAdapterNumber, fcNumberofDevices=fcNumberofDevices, scsiLevel=scsiLevel, status=status, raidTraps=raidTraps, biosVersion=biosVersion, adpWriteKBsPerSec=adpWriteKBsPerSec, enclPowerSupplyStatus=enclPowerSupplyStatus, subSystemVendorID=subSystemVendorID, enclNumberFan=enclNumberFan, rtCheckConsistencyCompleted=rtCheckConsistencyCompleted, enclTotalPowerOnMins=enclTotalPowerOnMins, rtEnclTemperatureOutofRange=rtEnclTemperatureOutofRange, fcScsiLevel=fcScsiLevel, numLogicalDrives=numLogicalDrives, logicaldriveTable=logicaldriveTable, fcRebuildProgress=fcRebuildProgress, rtTargetID=rtTargetID, rtInitializeFailed=rtInitializeFailed, rtReconstructionCompleted=rtReconstructionCompleted, physSpeed=physSpeed, rtConsistencyCorrected=rtConsistencyCorrected, rtAdapterNumber=rtAdapterNumber, firmwareVersion=firmwareVersion, rtLogicalDriveStateOffline=rtLogicalDriveStateOffline, rtBatteryTemperatureHigh=rtBatteryTemperatureHigh, rtPhysicalDriveStateReady=rtPhysicalDriveStateReady, channelTable=channelTable, rtReconstructionFailed=rtReconstructionFailed, lsi=lsi, ldAdapterNumber=ldAdapterNumber, enclConfigurationTable=enclConfigurationTable, raidLevel=raidLevel, channelStatus=channelStatus, ldIOReadsPerSec=ldIOReadsPerSec, readPolicy=readPolicy, stripeSize=stripeSize, enclFanTable=enclFanTable, enclTemperature=enclTemperature, rtPhysicalDriveStateChange=rtPhysicalDriveStateChange, rtEnclPowerSupplyOk=rtEnclPowerSupplyOk, checkConsistencyOrInitializeProgress=checkConsistencyOrInitializeProgress, adpIOWritesPerSec=adpIOWritesPerSec, adpSpeed=adpSpeed, enclNumDeviceSlots=enclNumDeviceSlots, rtPhysicalDriveStateOnline=rtPhysicalDriveStateOnline, rtOldLoopID=rtOldLoopID, adpReadFailuresPerSec=adpReadFailuresPerSec, rtReconstructionStarted=rtReconstructionStarted, adpBasePort=adpBasePort, rtLogicalDriveStateChkConsist=rtLogicalDriveStateChkConsist, sizeInMB=sizeInMB, physicaldriveTable=physicaldriveTable, rtOldDriveState=rtOldDriveState, rebuildProgress=rebuildProgress, fcSizeMB=fcSizeMB, rtEnclFanMalfunction=rtEnclFanMalfunction, enclChannel=enclChannel, fcPhysAdapterNumber=fcPhysAdapterNumber, rtNewLoopID=rtNewLoopID, fcChannel=fcChannel, adpReadKBsPerSec=adpReadKBsPerSec, fcInquiryString=fcInquiryString, enclTotalPowerOnCycles=enclTotalPowerOnCycles, rtEnclTemperatureNormal=rtEnclTemperatureNormal, maxConcurrentCmds=maxConcurrentCmds, fcChannelTable=fcChannelTable, physTermination=physTermination, ldWriteKBsPerSec=ldWriteKBsPerSec, rtConfigUpdated=rtConfigUpdated, mediumErrors=mediumErrors, writePolicy=writePolicy, rtNewDriveState=rtNewDriveState, physSlotNumber=physSlotNumber, rtASC=rtASC, rtSenseKey=rtSenseKey, chanAdapterNumber=chanAdapterNumber, dramSizeInMB=dramSizeInMB, enclNumPowerSupplies=enclNumPowerSupplies, rtASCQ=rtASCQ, rtLogicalDriveStateDegraded=rtLogicalDriveStateDegraded, enclPowerSupplyTable=enclPowerSupplyTable, subSystemID=subSystemID, maximumQueueDepth=maximumQueueDepth, physChannel=physChannel, adapterTable=adapterTable, enclPowerSupplyIndex=enclPowerSupplyIndex, rtEnclFanOk=rtEnclFanOk, ldIOWritesPerSec=ldIOWritesPerSec, rtBatteryMissing=rtBatteryMissing, writeKBsPerSec=writeKBsPerSec, enclTempSensorsTable=enclTempSensorsTable, rtInitializeCompleted=rtInitializeCompleted, rtLogicalDriveStateInitialize=rtLogicalDriveStateInitialize, enclPowerSupplyEntry=enclPowerSupplyEntry, fcLoopNumber=fcLoopNumber, megaRaidMib=megaRaidMib, logicaldriveEntry=logicaldriveEntry, otherErrors=otherErrors, ldReadKBsPerSec=ldReadKBsPerSec, rtPredictiveFailuresExceeded=rtPredictiveFailuresExceeded, arrayPosition=arrayPosition, ldWriteFailuresPerSec=ldWriteFailuresPerSec, rtCheckConsistencyAborted=rtCheckConsistencyAborted, targetID=targetID, fcArrayPosition=fcArrayPosition, enclDoorLockStatus=enclDoorLockStatus, enclFanIndex=enclFanIndex, numberOfStripes=numberOfStripes, fcProcessorType=fcProcessorType, sizeMB=sizeMB, inquiryString=inquiryString, readKBsPerSec=readKBsPerSec, rtChannelNumber=rtChannelNumber, enquiryString=enquiryString, enclAlarmStatus=enclAlarmStatus, enclAdapterNumber=enclAdapterNumber, rtCheckConditionStatus=rtCheckConditionStatus, cachePolicy=cachePolicy, rebuildRateInPercent=rebuildRateInPercent, flushInterval=flushInterval, adpAdapterNumber=adpAdapterNumber, fcDeviceEntry=fcDeviceEntry, rtEnclTempSensorIndex=rtEnclTempSensorIndex, scanChannels=scanChannels, physAdapterNumber=physAdapterNumber, writeFailuresPerSec=writeFailuresPerSec, megaRaid=megaRaid, state=state, fcLoopID_0=fcLoopID_0, rtInitializeStarted=rtInitializeStarted, lunNumber=lunNumber, enclTempSensorIndex=enclTempSensorIndex, enclTempSensorsEntry=enclTempSensorsEntry, fcPhysChannel=fcPhysChannel, physicaldriveEntry=physicaldriveEntry, ioReadsPerSec=ioReadsPerSec, enclTemperatureScale=enclTemperatureScale, fcDeviceTable=fcDeviceTable, rtCheckConsistencyFailed=rtCheckConsistencyFailed, rtFCLooplStateChange=rtFCLooplStateChange, channel=channel, fcLoopID_1=fcLoopID_1, rtEnclFanIndex=rtEnclFanIndex, rtPredictiveFailuresFalse=rtPredictiveFailuresFalse, enclFanStatus=enclFanStatus, ldReadFailuresPerSec=ldReadFailuresPerSec, rtEnclNumber=rtEnclNumber, rtCheckConsistencyStarted=rtCheckConsistencyStarted, enclAudibleAlarm=enclAudibleAlarm, rtEnclPowerSupplyIndex=rtEnclPowerSupplyIndex, numSCSIChannels=numSCSIChannels)
