#
# PySNMP MIB module RADLAN-OSPFV3-LSDB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-OSPFV3-LSDB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:47:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
InetAddressIPv6, InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
AreaID, RouterID = mibBuilder.importSymbols("OSPF-MIB", "AreaID", "RouterID")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
RlOspfProcessID, = mibBuilder.importSymbols("RADLAN-OSPF-MIB", "RlOspfProcessID")
rlOspfv3, = mibBuilder.importSymbols("RADLAN-OSPFV3-MIB", "rlOspfv3")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Counter64, iso, Bits, ObjectIdentity, Gauge32, Counter32, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, TimeTicks, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter64", "iso", "Bits", "ObjectIdentity", "Gauge32", "Counter32", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "TimeTicks", "MibIdentifier", "Unsigned32")
TimeStamp, DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
rlOspfv3Lsdb = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 222))
rlOspfv3Lsdb.setRevisions(('2011-05-04 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlOspfv3Lsdb.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlOspfv3Lsdb.setLastUpdated('201105041700Z')
if mibBuilder.loadTexts: rlOspfv3Lsdb.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlOspfv3Lsdb.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlOspfv3Lsdb.setDescription('The private MIB module definition for OSPF LSA Database MIB.')
rlOspfv3RouterLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 1), )
if mibBuilder.loadTexts: rlOspfv3RouterLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaTable.setDescription('Router Link State Advertisement.')
rlOspfv3RouterLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 1, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3RouterLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3RouterLsaAreaId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3RouterLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3RouterLsaRouterId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3RouterLsaIdx"))
if mibBuilder.loadTexts: rlOspfv3RouterLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaEntry.setDescription('A single entry from Router LSA.')
rlOspfv3RouterLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3RouterLsaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaAreaId.setReference('OSPFv3 Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3RouterLsaAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
rlOspfv3RouterLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3RouterLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3RouterLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3RouterLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3RouterLsaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaIdx.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaIdx.setDescription('The index is a unsigned 32-bit integer. It is used as sequence number of entry in the LSA and relevant only for Router or Network LSA which can contain unlimited number of entries.')
rlOspfv3RouterLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaCount.setDescription('Number of entries containg is the LSA.')
rlOspfv3RouterLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3RouterLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3RouterLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3RouterLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3RouterLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3RouterLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3RouterLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3RouterLsaBitW = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitW.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitW.setDescription('When set, the router is a wild-card multicast receiver. When running MOSPF, these routers receive all multicast datagrams, regardless of destination.')
rlOspfv3RouterLsaBitV = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitV.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitV.setDescription('When set, the router is an endpoint of one or more fully adjacent virtual links having the described area as Transit area (V is for virtual link endpoint).')
rlOspfv3RouterLsaBitE = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitE.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitE.setDescription('When set, the router is an AS boundary router (E is for external).')
rlOspfv3RouterLsaBitB = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitB.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaBitB.setDescription('When set, the router is an area border router (B is for border).')
rlOspfv3RouterLsaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaOptions.setDescription('The optional capabilities supported by the router. Through this mechanism routers of differing capabilities can be mixed within an OSPF routing domain.')
rlOspfv3RouterLsaType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pointToPoint", 1), ("transitNetwork", 2), ("stubNetwork", 3), ("virtualLink", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaType.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaType.setDescription('A quick description of the router link.')
rlOspfv3RouterLsaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaMetric.setDescription('The cost of using this router link.')
rlOspfv3RouterLsaInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaInterfaceID.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaInterfaceID.setDescription('The Interface ID assigned to the interface being described.')
rlOspfv3RouterLsaNeighborInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaNeighborInterfaceID.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaNeighborInterfaceID.setDescription("The Interface ID the neighbor router (or the attached link's Designated Router, for Type 2 interfaces) has been advertising in hello packets sent on the attached link.")
rlOspfv3RouterLsaNeighborRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 1, 1, 20), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3RouterLsaNeighborRouterID.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3RouterLsaNeighborRouterID.setDescription("The Router ID the neighbor router (or the attached link's Designated Router, for Type 2 interfaces).")
rlOspfv3NetworkLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 2), )
if mibBuilder.loadTexts: rlOspfv3NetworkLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaTable.setDescription('Network Link State Advertisement.')
rlOspfv3NetworkLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 2, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3NetworkLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3NetworkLsaAreaId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3NetworkLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3NetworkLsaRouterId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3NetworkLsaIdx"))
if mibBuilder.loadTexts: rlOspfv3NetworkLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaEntry.setDescription('A single entry from Network LSA.')
rlOspfv3NetworkLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3NetworkLsaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAreaId.setReference('OSPFv3 Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
rlOspfv3NetworkLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3NetworkLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3NetworkLsaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaIdx.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaIdx.setDescription('The index is a unsigned 32-bit integer. It is used as sequence number of entry in the LSA and relevant only for Router or Network LSA which can contain unlimited number of entries.')
rlOspfv3NetworkLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaCount.setDescription('Number of entries containg is the LSA.')
rlOspfv3NetworkLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3NetworkLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3NetworkLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3NetworkLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3NetworkLsaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaOptions.setDescription('The optional capabilities supported by the router. Through this mechanism routers of differing capabilities can be mixed within an OSPF routing domain.')
rlOspfv3NetworkLsaAttRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 2, 1, 12), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAttRouter.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3NetworkLsaAttRouter.setDescription('The Router IDs of each of the routers attached to the link.')
rlOspfv3InterAreaPrefixLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 3), )
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaTable.setDescription('Inter Area Prefix Link State Advertisement.')
rlOspfv3InterAreaPrefixLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 3, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaPrefixLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaPrefixLsaAreaId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaPrefixLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaPrefixLsaRouterId"))
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaEntry.setDescription('A single entry from Network LSA.')
rlOspfv3InterAreaPrefixLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3InterAreaPrefixLsaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAreaId.setReference('OSPFv3 Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
rlOspfv3InterAreaPrefixLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3InterAreaPrefixLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3InterAreaPrefixLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3InterAreaPrefixLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3InterAreaPrefixLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3InterAreaPrefixLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3InterAreaPrefixLsaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaMetric.setDescription('The cost of this route. Expressed in the same units as the interface costs in the router-LSAs.')
rlOspfv3InterAreaPrefixLsaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaPrefixLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaPrefixLength.setDescription('IPv6 address prefix length.')
rlOspfv3InterAreaPrefixLsaPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaPrefixOptions.setDescription('IPv6 address prefix options.')
rlOspfv3InterAreaPrefixLsaAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 3, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAddressPrefix.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaPrefixLsaAddressPrefix.setDescription('IPv6 address prefix - bit strings of length 128.')
rlOspfv3InterAreaRouterLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 4), )
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaTable.setDescription('Inter Area Router Link State Advertisement.')
rlOspfv3InterAreaRouterLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 4, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaRouterLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaRouterLsaAreaId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaRouterLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3InterAreaRouterLsaRouterId"))
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaEntry.setDescription('A single entry from Network LSA.')
rlOspfv3InterAreaRouterLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3InterAreaRouterLsaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaAreaId.setReference('OSPFv3 Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
rlOspfv3InterAreaRouterLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3InterAreaRouterLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3InterAreaRouterLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3InterAreaRouterLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3InterAreaRouterLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3InterAreaRouterLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3InterAreaRouterLsaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaOptions.setDescription('The optional capabilities supported by the router. Through this mechanism routers of differing capabilities can be mixed within an OSPF routing domain.')
rlOspfv3InterAreaRouterLsaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaMetric.setDescription('The cost of this route. Expressed in the same units as the interface costs in the router-LSAs.')
rlOspfv3InterAreaRouterLsaDestinationRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 4, 1, 11), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaDestinationRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3InterAreaRouterLsaDestinationRouterId.setDescription('The Router ID of the router being described by the LSA.')
rlOspfv3AsExternalLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 5), )
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaTable.setDescription('AS External Link State Advertisement.')
rlOspfv3AsExternalLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 5, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3AsExternalLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3AsExternalLsaAreaId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3AsExternalLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3AsExternalLsaRouterId"))
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaEntry.setDescription('A single entry from Router LSA.')
rlOspfv3AsExternalLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3AsExternalLsaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAreaId.setReference('OSPFv3 Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
rlOspfv3AsExternalLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3AsExternalLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3AsExternalLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3AsExternalLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3AsExternalLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3AsExternalLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3AsExternalLsaBitE = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaBitE.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaBitE.setDescription('The type of external metric. If bit E is set, the metric specified is a Type 2 external metric.')
rlOspfv3AsExternalLsaBitF = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaBitF.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaBitF.setDescription('If set, a Forwarding Address has been included in the LSA.')
rlOspfv3AsExternalLsaBitT = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaBitT.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaBitT.setDescription('If set, an External Route Tag has been included in the LSA.')
rlOspfv3AsExternalLsaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaMetric.setDescription('The cost of this route. Interpretation depends on the external type indication (bit E above).')
rlOspfv3AsExternalLsaReferencedLsType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaReferencedLsType.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaReferencedLsType.setDescription('If non-zero, an LSA with this LS type is to be associated with this LSA (see Referenced Link State ID below).')
rlOspfv3AsExternalLsaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaPrefixLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaPrefixLength.setDescription('IPv6 address prefix length.')
rlOspfv3AsExternalLsaPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaPrefixOptions.setDescription('IPv6 address prefix options.')
rlOspfv3AsExternalLsaAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAddressPrefix.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaAddressPrefix.setDescription('IPv6 address prefix - bit strings of length 128.')
rlOspfv3AsExternalLsaForwardingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaForwardingAddress.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaForwardingAddress.setDescription('A fully qualified IPv6 address (128 bits). Included in the LSA if and only if bit F has been set.')
rlOspfv3AsExternalLsaExternalRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaExternalRouteTag.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaExternalRouteTag.setDescription('A 32-bit field which may be used to communicate additional information between AS boundary routers.')
rlOspfv3AsExternalLsaReferencedLinkStateId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaReferencedLinkStateId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3AsExternalLsaReferencedLinkStateId.setDescription('Included if and only if Reference LS Type is non-zero.')
rlOspfv3LinkLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 6), )
if mibBuilder.loadTexts: rlOspfv3LinkLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaTable.setDescription('Link (Type 8) Link State Advertisement.')
rlOspfv3LinkLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 6, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3LinkLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3LinkLsaIfIndex"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3LinkLsaIfInstId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3LinkLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3LinkLsaRouterId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3LinkLsaIdx"))
if mibBuilder.loadTexts: rlOspfv3LinkLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaEntry.setDescription('A single entry from Network LSA.')
rlOspfv3LinkLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3LinkLsaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: rlOspfv3LinkLsaIfIndex.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3LinkLsaIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaIfIndex.setDescription('The identifier of the link from which the LSA was received.')
rlOspfv3LinkLsaIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: rlOspfv3LinkLsaIfInstId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaIfInstId.setDescription('OSPFv3 protocol instance ID specified in the OSPF header of the packet in which this LSA was received.')
rlOspfv3LinkLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3LinkLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3LinkLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 5), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3LinkLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3LinkLsaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaIdx.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaIdx.setDescription('The index is a unsigned 32-bit integer. It is used as sequence number of entry in the LSA and relevant only for Router or Network LSA which can contain unlimited number of entries.')
rlOspfv3LinkLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaCount.setDescription('Number of entries containg is the LSA.')
rlOspfv3LinkLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3LinkLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3LinkLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3LinkLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3LinkLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3LinkLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3LinkLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3LinkLsaRtrPri = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaRtrPri.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaRtrPri.setDescription('The Router Priority of the interface attaching the originating router to the link.')
rlOspfv3LinkLsaOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaOptions.setDescription('The optional capabilities supported by the router. Through this mechanism routers of differing capabilities can be mixed within an OSPF routing domain.')
rlOspfv3LinkLsaLinkLocalInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaLinkLocalInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaLinkLocalInterfaceAddress.setDescription("Link Local Interface Address. The originating router's link-local interface address on the link.")
rlOspfv3LinkLsaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaPrefixLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaPrefixLength.setDescription('IPv6 address prefix length.')
rlOspfv3LinkLsaPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaPrefixOptions.setDescription('IPv6 address prefix options.')
rlOspfv3LinkLsaAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 6, 1, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3LinkLsaAddressPrefix.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3LinkLsaAddressPrefix.setDescription('IPv6 address prefix - bit strings of length 128.')
rlOspfv3IntraAreaPrefixLsaTable = MibTable((1, 3, 6, 1, 4, 1, 89, 222, 7), )
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaTable.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaTable.setDescription('Intra Area Prefix Link State Advertisement.')
rlOspfv3IntraAreaPrefixLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 222, 7, 1), ).setIndexNames((0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3IntraAreaPrefixLsaProcessId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3IntraAreaPrefixLsaAreaId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3IntraAreaPrefixLsaLsid"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3IntraAreaPrefixLsaRouterId"), (0, "RADLAN-OSPFV3-LSDB-MIB", "rlOspfv3IntraAreaPrefixLsaIdx"))
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaEntry.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaEntry.setDescription('A single entry from Network LSA.')
rlOspfv3IntraAreaPrefixLsaProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 1), RlOspfProcessID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaProcessId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaProcessId.setDescription('A 32-bit integer uniquely identifying an OSPFv3 process.')
rlOspfv3IntraAreaPrefixLsaAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 2), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAreaId.setReference('OSPFv3 Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAreaId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
rlOspfv3IntraAreaPrefixLsaLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaLsid.setReference('OSPFv3 Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaLsid.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
rlOspfv3IntraAreaPrefixLsaRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaRouterId.setReference('OSPFv3 Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaRouterId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
rlOspfv3IntraAreaPrefixLsaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaIdx.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaIdx.setDescription('The index is a unsigned 32-bit integer. It is used as sequence number of entry in the LSA and relevant only for Router or Network LSA which can contain unlimited number of entries.')
rlOspfv3IntraAreaPrefixLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaCount.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaCount.setDescription('Number of entries containg is the LSA.')
rlOspfv3IntraAreaPrefixLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaSequence.setReference('OSPFv3 Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaSequence.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
rlOspfv3IntraAreaPrefixLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAge.setReference('OSPFv3 Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAge.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAge.setDescription('This field is the age of the link state advertisement in seconds.')
rlOspfv3IntraAreaPrefixLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaChecksum.setReference('OSPFv3 Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
rlOspfv3IntraAreaPrefixLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaLength.setDescription('The lenth in bytes of the LSA. This includes the 20 byte LSA header.')
rlOspfv3IntraAreaPrefixLsaNumPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaNumPrefixes.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaNumPrefixes.setDescription('Number of IPv6 address prefixes contained in the LSA.')
rlOspfv3IntraAreaPrefixLsaReferenceLsType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaReferenceLsType.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaReferenceLsType.setDescription('Referenced LS Type: If the Referenced LS type is 1, the prefixes are associated with a router-LSA. If Referenced LS type is 2, the prefixes are associated with a network-LSA.')
rlOspfv3IntraAreaPrefixLsaReferenceLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaReferenceLsId.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaReferenceLsId.setDescription("Referenced Link State ID: If the prefixes are associated with a router-LSA, the Referenced Link State ID should be 0. If the prefixes are associated with a network-LSA, the Referenced Link State ID should be the Interface ID of the link's Designated Router.")
rlOspfv3IntraAreaPrefixLsaReferenceAdvRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaReferenceAdvRouter.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaReferenceAdvRouter.setDescription("Referenced Advertising Router: If the prefixes are associated with a router-LSA, the Referenced Advertising Router should be the originating router's Router ID. If the prefixes are associated with a network-LSA, Referenced Advertising Router should be the Designated Router's Router ID.")
rlOspfv3IntraAreaPrefixLsaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaMetric.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaMetric.setDescription('The cost of this route. Expressed in the same units as the interface costs in the router-LSAs.')
rlOspfv3IntraAreaPrefixLsaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaPrefixLength.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaPrefixLength.setDescription('IPv6 address prefix length.')
rlOspfv3IntraAreaPrefixLsaPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaPrefixOptions.setDescription('IPv6 address prefix options.')
rlOspfv3IntraAreaPrefixLsaAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 222, 7, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAddressPrefix.setStatus('current')
if mibBuilder.loadTexts: rlOspfv3IntraAreaPrefixLsaAddressPrefix.setDescription('IPv6 address prefix - bit strings of length 128.')
mibBuilder.exportSymbols("RADLAN-OSPFV3-LSDB-MIB", rlOspfv3InterAreaRouterLsaEntry=rlOspfv3InterAreaRouterLsaEntry, rlOspfv3AsExternalLsaEntry=rlOspfv3AsExternalLsaEntry, rlOspfv3AsExternalLsaMetric=rlOspfv3AsExternalLsaMetric, rlOspfv3LinkLsaEntry=rlOspfv3LinkLsaEntry, rlOspfv3LinkLsaIdx=rlOspfv3LinkLsaIdx, rlOspfv3RouterLsaNeighborRouterID=rlOspfv3RouterLsaNeighborRouterID, rlOspfv3NetworkLsaEntry=rlOspfv3NetworkLsaEntry, rlOspfv3LinkLsaAddressPrefix=rlOspfv3LinkLsaAddressPrefix, rlOspfv3AsExternalLsaReferencedLinkStateId=rlOspfv3AsExternalLsaReferencedLinkStateId, rlOspfv3InterAreaRouterLsaSequence=rlOspfv3InterAreaRouterLsaSequence, rlOspfv3IntraAreaPrefixLsaNumPrefixes=rlOspfv3IntraAreaPrefixLsaNumPrefixes, rlOspfv3AsExternalLsaBitE=rlOspfv3AsExternalLsaBitE, rlOspfv3InterAreaRouterLsaRouterId=rlOspfv3InterAreaRouterLsaRouterId, rlOspfv3InterAreaPrefixLsaRouterId=rlOspfv3InterAreaPrefixLsaRouterId, rlOspfv3LinkLsaProcessId=rlOspfv3LinkLsaProcessId, rlOspfv3AsExternalLsaAreaId=rlOspfv3AsExternalLsaAreaId, rlOspfv3IntraAreaPrefixLsaAge=rlOspfv3IntraAreaPrefixLsaAge, rlOspfv3RouterLsaProcessId=rlOspfv3RouterLsaProcessId, rlOspfv3InterAreaPrefixLsaTable=rlOspfv3InterAreaPrefixLsaTable, rlOspfv3InterAreaPrefixLsaSequence=rlOspfv3InterAreaPrefixLsaSequence, rlOspfv3AsExternalLsaRouterId=rlOspfv3AsExternalLsaRouterId, rlOspfv3LinkLsaCount=rlOspfv3LinkLsaCount, rlOspfv3LinkLsaPrefixLength=rlOspfv3LinkLsaPrefixLength, rlOspfv3RouterLsaOptions=rlOspfv3RouterLsaOptions, rlOspfv3InterAreaPrefixLsaAreaId=rlOspfv3InterAreaPrefixLsaAreaId, rlOspfv3NetworkLsaRouterId=rlOspfv3NetworkLsaRouterId, rlOspfv3InterAreaPrefixLsaMetric=rlOspfv3InterAreaPrefixLsaMetric, rlOspfv3RouterLsaCount=rlOspfv3RouterLsaCount, rlOspfv3AsExternalLsaSequence=rlOspfv3AsExternalLsaSequence, rlOspfv3InterAreaRouterLsaMetric=rlOspfv3InterAreaRouterLsaMetric, rlOspfv3LinkLsaSequence=rlOspfv3LinkLsaSequence, rlOspfv3NetworkLsaAreaId=rlOspfv3NetworkLsaAreaId, rlOspfv3InterAreaPrefixLsaPrefixOptions=rlOspfv3InterAreaPrefixLsaPrefixOptions, rlOspfv3InterAreaPrefixLsaLsid=rlOspfv3InterAreaPrefixLsaLsid, rlOspfv3RouterLsaTable=rlOspfv3RouterLsaTable, rlOspfv3RouterLsaBitE=rlOspfv3RouterLsaBitE, rlOspfv3LinkLsaOptions=rlOspfv3LinkLsaOptions, rlOspfv3InterAreaRouterLsaTable=rlOspfv3InterAreaRouterLsaTable, rlOspfv3NetworkLsaSequence=rlOspfv3NetworkLsaSequence, rlOspfv3IntraAreaPrefixLsaIdx=rlOspfv3IntraAreaPrefixLsaIdx, rlOspfv3InterAreaPrefixLsaPrefixLength=rlOspfv3InterAreaPrefixLsaPrefixLength, rlOspfv3RouterLsaBitW=rlOspfv3RouterLsaBitW, rlOspfv3InterAreaPrefixLsaProcessId=rlOspfv3InterAreaPrefixLsaProcessId, rlOspfv3IntraAreaPrefixLsaCount=rlOspfv3IntraAreaPrefixLsaCount, rlOspfv3IntraAreaPrefixLsaSequence=rlOspfv3IntraAreaPrefixLsaSequence, rlOspfv3NetworkLsaIdx=rlOspfv3NetworkLsaIdx, rlOspfv3InterAreaRouterLsaAge=rlOspfv3InterAreaRouterLsaAge, rlOspfv3InterAreaPrefixLsaLength=rlOspfv3InterAreaPrefixLsaLength, rlOspfv3NetworkLsaAttRouter=rlOspfv3NetworkLsaAttRouter, rlOspfv3IntraAreaPrefixLsaMetric=rlOspfv3IntraAreaPrefixLsaMetric, rlOspfv3AsExternalLsaProcessId=rlOspfv3AsExternalLsaProcessId, rlOspfv3LinkLsaLsid=rlOspfv3LinkLsaLsid, rlOspfv3NetworkLsaChecksum=rlOspfv3NetworkLsaChecksum, rlOspfv3AsExternalLsaChecksum=rlOspfv3AsExternalLsaChecksum, rlOspfv3InterAreaPrefixLsaEntry=rlOspfv3InterAreaPrefixLsaEntry, rlOspfv3RouterLsaChecksum=rlOspfv3RouterLsaChecksum, rlOspfv3RouterLsaLsid=rlOspfv3RouterLsaLsid, rlOspfv3InterAreaRouterLsaAreaId=rlOspfv3InterAreaRouterLsaAreaId, rlOspfv3AsExternalLsaPrefixLength=rlOspfv3AsExternalLsaPrefixLength, rlOspfv3IntraAreaPrefixLsaAddressPrefix=rlOspfv3IntraAreaPrefixLsaAddressPrefix, rlOspfv3LinkLsaChecksum=rlOspfv3LinkLsaChecksum, rlOspfv3IntraAreaPrefixLsaRouterId=rlOspfv3IntraAreaPrefixLsaRouterId, rlOspfv3RouterLsaIdx=rlOspfv3RouterLsaIdx, rlOspfv3RouterLsaType=rlOspfv3RouterLsaType, rlOspfv3LinkLsaRouterId=rlOspfv3LinkLsaRouterId, rlOspfv3InterAreaRouterLsaLsid=rlOspfv3InterAreaRouterLsaLsid, rlOspfv3InterAreaRouterLsaProcessId=rlOspfv3InterAreaRouterLsaProcessId, rlOspfv3RouterLsaBitV=rlOspfv3RouterLsaBitV, rlOspfv3IntraAreaPrefixLsaPrefixOptions=rlOspfv3IntraAreaPrefixLsaPrefixOptions, rlOspfv3IntraAreaPrefixLsaReferenceLsType=rlOspfv3IntraAreaPrefixLsaReferenceLsType, rlOspfv3InterAreaRouterLsaChecksum=rlOspfv3InterAreaRouterLsaChecksum, rlOspfv3RouterLsaEntry=rlOspfv3RouterLsaEntry, rlOspfv3RouterLsaAreaId=rlOspfv3RouterLsaAreaId, rlOspfv3AsExternalLsaForwardingAddress=rlOspfv3AsExternalLsaForwardingAddress, rlOspfv3LinkLsaLinkLocalInterfaceAddress=rlOspfv3LinkLsaLinkLocalInterfaceAddress, rlOspfv3IntraAreaPrefixLsaTable=rlOspfv3IntraAreaPrefixLsaTable, rlOspfv3IntraAreaPrefixLsaLength=rlOspfv3IntraAreaPrefixLsaLength, rlOspfv3LinkLsaAge=rlOspfv3LinkLsaAge, rlOspfv3RouterLsaNeighborInterfaceID=rlOspfv3RouterLsaNeighborInterfaceID, rlOspfv3LinkLsaIfIndex=rlOspfv3LinkLsaIfIndex, PYSNMP_MODULE_ID=rlOspfv3Lsdb, rlOspfv3InterAreaRouterLsaOptions=rlOspfv3InterAreaRouterLsaOptions, rlOspfv3NetworkLsaLength=rlOspfv3NetworkLsaLength, rlOspfv3InterAreaPrefixLsaAge=rlOspfv3InterAreaPrefixLsaAge, rlOspfv3IntraAreaPrefixLsaProcessId=rlOspfv3IntraAreaPrefixLsaProcessId, rlOspfv3Lsdb=rlOspfv3Lsdb, rlOspfv3InterAreaPrefixLsaAddressPrefix=rlOspfv3InterAreaPrefixLsaAddressPrefix, rlOspfv3AsExternalLsaBitT=rlOspfv3AsExternalLsaBitT, rlOspfv3IntraAreaPrefixLsaChecksum=rlOspfv3IntraAreaPrefixLsaChecksum, rlOspfv3AsExternalLsaLength=rlOspfv3AsExternalLsaLength, rlOspfv3IntraAreaPrefixLsaLsid=rlOspfv3IntraAreaPrefixLsaLsid, rlOspfv3NetworkLsaProcessId=rlOspfv3NetworkLsaProcessId, rlOspfv3InterAreaRouterLsaDestinationRouterId=rlOspfv3InterAreaRouterLsaDestinationRouterId, rlOspfv3IntraAreaPrefixLsaPrefixLength=rlOspfv3IntraAreaPrefixLsaPrefixLength, rlOspfv3InterAreaPrefixLsaChecksum=rlOspfv3InterAreaPrefixLsaChecksum, rlOspfv3RouterLsaBitB=rlOspfv3RouterLsaBitB, rlOspfv3IntraAreaPrefixLsaEntry=rlOspfv3IntraAreaPrefixLsaEntry, rlOspfv3AsExternalLsaExternalRouteTag=rlOspfv3AsExternalLsaExternalRouteTag, rlOspfv3LinkLsaRtrPri=rlOspfv3LinkLsaRtrPri, rlOspfv3NetworkLsaTable=rlOspfv3NetworkLsaTable, rlOspfv3InterAreaRouterLsaLength=rlOspfv3InterAreaRouterLsaLength, rlOspfv3NetworkLsaCount=rlOspfv3NetworkLsaCount, rlOspfv3LinkLsaTable=rlOspfv3LinkLsaTable, rlOspfv3AsExternalLsaTable=rlOspfv3AsExternalLsaTable, rlOspfv3LinkLsaLength=rlOspfv3LinkLsaLength, rlOspfv3IntraAreaPrefixLsaReferenceLsId=rlOspfv3IntraAreaPrefixLsaReferenceLsId, rlOspfv3NetworkLsaAge=rlOspfv3NetworkLsaAge, rlOspfv3LinkLsaIfInstId=rlOspfv3LinkLsaIfInstId, rlOspfv3RouterLsaInterfaceID=rlOspfv3RouterLsaInterfaceID, rlOspfv3AsExternalLsaBitF=rlOspfv3AsExternalLsaBitF, rlOspfv3RouterLsaAge=rlOspfv3RouterLsaAge, rlOspfv3AsExternalLsaAge=rlOspfv3AsExternalLsaAge, rlOspfv3RouterLsaLength=rlOspfv3RouterLsaLength, rlOspfv3RouterLsaMetric=rlOspfv3RouterLsaMetric, rlOspfv3AsExternalLsaLsid=rlOspfv3AsExternalLsaLsid, rlOspfv3AsExternalLsaAddressPrefix=rlOspfv3AsExternalLsaAddressPrefix, rlOspfv3NetworkLsaOptions=rlOspfv3NetworkLsaOptions, rlOspfv3RouterLsaRouterId=rlOspfv3RouterLsaRouterId, rlOspfv3RouterLsaSequence=rlOspfv3RouterLsaSequence, rlOspfv3LinkLsaPrefixOptions=rlOspfv3LinkLsaPrefixOptions, rlOspfv3IntraAreaPrefixLsaAreaId=rlOspfv3IntraAreaPrefixLsaAreaId, rlOspfv3AsExternalLsaPrefixOptions=rlOspfv3AsExternalLsaPrefixOptions, rlOspfv3IntraAreaPrefixLsaReferenceAdvRouter=rlOspfv3IntraAreaPrefixLsaReferenceAdvRouter, rlOspfv3AsExternalLsaReferencedLsType=rlOspfv3AsExternalLsaReferencedLsType, rlOspfv3NetworkLsaLsid=rlOspfv3NetworkLsaLsid)
