#
# PySNMP MIB module HP-ICF-PIM6 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-PIM6
# Produced by pysmi-0.3.4 at Wed May  1 13:35:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
IANAipRouteProtocol, IANAipMRouteProtocol = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol", "IANAipMRouteProtocol")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
pimRPSetComponent, = mibBuilder.importSymbols("PIM-MIB", "pimRPSetComponent")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, ObjectIdentity, iso, Gauge32, ModuleIdentity, IpAddress, Counter64, NotificationType, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "ObjectIdentity", "iso", "Gauge32", "ModuleIdentity", "IpAddress", "Counter64", "NotificationType", "Counter32", "Unsigned32")
RowStatus, TruthValue, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention")
hpicfPim6MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122))
hpicfPim6MIB.setRevisions(('2017-10-10 00:00', '2017-07-03 00:00', '2012-04-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfPim6MIB.setRevisionsDescriptions(('Extended PIMv6 Trap, State refresh max range.', 'Added PIMv6 SM specific objects.', 'Extended hpicfPim6IfTable to provide more detail on PIM enabled interfaces.',))
if mibBuilder.loadTexts: hpicfPim6MIB.setLastUpdated('201710100000Z')
if mibBuilder.loadTexts: hpicfPim6MIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfPim6MIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfPim6MIB.setDescription('This MIB module contains HP proprietary extensions to the standard PIM MIB (RFC 5060).')
hpicfPim6Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1))
hpicfPim6Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 0))
hpicfPim6 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1))
hpicfPim6Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2))
hpicfPim6Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1))
hpicfPim6Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2))
hpicfPim6AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6AdminStatus.setDescription('The operational status of the PIMv6 routing protocol on this router. Default is disabled.')
hpicfPim6StateRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6StateRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StateRefreshInterval.setDescription('The interval between successive State Refresh messages originated by this router. Default is 60 seconds. The maximum value allowed in PIMv6 for State Refresh interval will be 100.')
hpicfPim6TrapControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 3), Bits().clone(namedValues=NamedValues(("neighborLoss", 0), ("hardMrtFull", 1), ("softMrtFull", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6TrapControl.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6TrapControl.setDescription("Indicates whether the PIMv6-enabled router will generate SNMP traps for PIMv6 events. The set bit means 'enabled'. - neighborLoss(0) This bit controls whether the notification trap is allowed to be sent when the neighbor timer expires and the router has no other neighbors on the same interface with a lower IP address than itself. - hardMrtFull(1) This bit controls whether the notification trap is allowed to be sent when the MRT table is full and the error has been originated by hardware. - softMrtFull(2) This bit controls whether the notification trap is allowed to be sent when the MRT table is full and the error has been originated by software.")
hpicfPim6IfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4), )
if mibBuilder.loadTexts: hpicfPim6IfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfTable.setDescription('HP extensions to the pimInterfaceTable.')
hpicfPim6IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1), ).setIndexNames((0, "HP-ICF-PIM6", "hpicfPim6IfIndex"))
if mibBuilder.loadTexts: hpicfPim6IfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfEntry.setDescription('HP extensions for an entry in the pimInterfaceTable.')
hpicfPim6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfPim6IfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfIndex.setDescription('The ifindex value of this PIMv6 interface.')
hpicfPim6IfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfAddressType.setDescription('The address type of this PIMv6 interface.')
hpicfPim6IfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfAddress.setReference('RFC 4601 sections 4.1.6, 4.3.1-4.3.4, and 4.5.1')
if mibBuilder.loadTexts: hpicfPim6IfAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfAddress.setDescription('The primary IP address of this router on this PIMv6 interface. The InetAddressType is given by the pimInterfaceAddressType object.')
hpicfPim6IfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2))).clone('dense')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfMode.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfMode.setDescription('The configured mode of this PIMv6 interface.')
hpicfPim6IfTrigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfTrigHelloInterval.setReference('RFC 4601 section 4.11')
if mibBuilder.loadTexts: hpicfPim6IfTrigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfTrigHelloInterval.setDescription("The maximum time before this router sends a triggered PIMv6 Hello message on this interface. This object corresponds to the 'Trigered_Hello_Delay' timer value defined in the PIM-SM specification. A value of zero has no special meaning and indicates that triggered PIMv6 Hello messages should always be sent immediately.")
hpicfPim6IfHelloHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(105)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfHelloHoldtime.setReference('RFC 4601 sections 4.3.2 and 4.9.2')
if mibBuilder.loadTexts: hpicfPim6IfHelloHoldtime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfHelloHoldtime.setDescription("The value set in the Holdtime field of PIMv6 Hello messages transmitted on this interface. A value of 65535 represents an 'infinite' holdtime. Implementations are recommended to use a holdtime that is 3.5 times the value of hpicfPim6InterfaceHelloInterval,or 65535 if hpicfPim6InterfaceHelloInterval is set to zero.")
hpicfPim6IfLanPruneDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfLanPruneDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfLanPruneDelay.setDescription('Turns the LAN Prune Delay options ON and OFF, on this interface. Default is true.')
hpicfPim6IfPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(250, 2000)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfPropagationDelay.setDescription('The expected propagation delay between PIMv6 routers on this network or link.This router inserts this value into the Propagation_Delay messages sent on this interface. Implementations SHOULD enforce a lower bound on the permitted values for this object to allow for scheduling and processing delays within local router.')
hpicfPim6IfOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500, 6000)).clone(2500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfOverrideInterval.setReference('RFC 4601 section 4.3.3')
if mibBuilder.loadTexts: hpicfPim6IfOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfOverrideInterval.setDescription(' The value this router inserts into the Override_Interval field of the LAN Prune Delay option in the PIMv6 Hello messages it sends on this interface. When overriding a prune, PIMv6 routers pick a random timer up to the value of this object. The more PIMv6 routers that are active on a network,the more likely it is that the prune will be overridden after a small proportion of this time has elapsed. The more PIMv6 routers are active on this network, the larger this object should be to obtain an optimal spread of prune override latencies.')
hpicfPim6IfGenerationID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfGenerationID.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfGenerationID.setDescription('Turns the Generation ID option ON and OFF, on this interface. Default is false.')
hpicfPim6IfJoinPruneHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(210)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfJoinPruneHoldtime.setReference('RFC 4601 sections 4.5.3 and 4.9.5')
if mibBuilder.loadTexts: hpicfPim6IfJoinPruneHoldtime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfJoinPruneHoldtime.setDescription("The value inserted into the Holdtime field of a PIMv6 Join/Prune message sent on this interface. A value of 65535 represents an 'infinite' holdtime. Implementations are recommended to use a holdtime that is 3.5 times the value of hpicfPim6JoinPruneInterval, or 65535 if hpicfpiPim6JoinPruneInterval is set to zero. PIMv6-DM implementations are recommended to use the value of hpicfPim6IfPruneLimitInterval.")
hpicfPim6IfGraftRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfGraftRetryInterval.setReference('RFC 3973 section 4.8')
if mibBuilder.loadTexts: hpicfPim6IfGraftRetryInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfGraftRetryInterval.setDescription("The minimum interval that must transpire between two successive Grafts sent by a router. This object corresponds to the 'Graft_Retry_Period' timer value defined in the PIMv6-DM specification. This object is used only by PIMv6-DM.")
hpicfPim6IfMaxGraftRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfMaxGraftRetries.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfMaxGraftRetries.setDescription('The maximum number of times this router will re-send a Graft on this interface. Default is 2.')
hpicfPim6IfSRTTLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfSRTTLThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfSRTTLThreshold.setDescription('The Time To Live in a PIMv6-DM State Refresh message at which it is not forwarded on this interface. Default is 0.')
hpicfPim6IfLanDelayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfLanDelayEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfLanDelayEnabled.setDescription('Evaluates to TRUE if all routers on this interface are using the LAN Prune Delay Option.')
hpicfPim6IfSRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfSRCapable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfSRCapable.setDescription('Evaluates to TRUE if all routers on this interface are using the State Refresh Capable Option.')
hpicfPim6IfNBRTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 8000)).clone(180)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfNBRTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfNBRTimeout.setDescription('Time interval after which the router will consider a neighbor to not be present, if no PIM Hello messages arrived on the interface. Default is 180 seconds.')
hpicfPim6IfNBRCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfNBRCount.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfNBRCount.setDescription('PIMv6 Neighbor Count.')
hpicfPim6IfNegotiatedPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfNegotiatedPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfNegotiatedPropagationDelay.setDescription('Negotiated PIMv6 LAN/Propagation Delay (ms).')
hpicfPim6IfNegotiatedOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfNegotiatedOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfNegotiatedOverrideInterval.setDescription('Negotiated PIMv6 Override Interval (ms).')
hpicfPim6IfAssertHoldInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfAssertHoldInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfAssertHoldInterval.setDescription('PIMv6 Assert Hold Interval (s).')
hpicfPim6IfNumRoutersNotUsingLanDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfNumRoutersNotUsingLanDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfNumRoutersNotUsingLanDelay.setDescription('Number of routers on network not using LAN Delay.')
hpicfPim6IfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfHelloInterval.setDescription("The frequency at which PIMv6 Hello messages are transmitted on this interface. This object corresponds to the 'Hello_Period' timer value defined in the PIM-SM specification. A value of zero represents an 'infinite' interval, and indicates that periodic PIM Hello messages should not be sent on this interface.")
hpicfPim6IfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfStatus.setDescription('The status of this entry. Creating the entry enables PIMv6 on the interface; destroying the entry disables PIMv6 on the interface. This status object can be set to active(1) without setting any other columnar objects in this entry. All writeable objects in this entry can be modified when the status of this entry is active(1).')
hpicfPim6IfDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 25), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfDRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfDRPriority.setDescription('The Designated Router Priority inserted into the DR priority option on this interface. Default is 1.')
hpicfPim6IfDRType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 26), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6IfDRType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfDRType.setDescription('The address type of Designated Router on this PIM interface.')
hpicfPim6IfDR = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 4, 1, 27), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IfDR.setReference('RFC 4601 section 4.3')
if mibBuilder.loadTexts: hpicfPim6IfDR.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IfDR.setDescription('The primary IP address of the Designated Router on this PIM interface. The InetAddressType is given by the hpicfPim6InterfaceAddressType object.')
hpicfPim6RemoveConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6RemoveConfig.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RemoveConfig.setDescription('PIMv6 is halted. This objects clears all existing PIMv6 configuration, intializes the pim config to the default state. SnmpGet on this will always return false. An SnmpSet of false has no effect.')
hpicfPim6NumStaticRpfEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NumStaticRpfEntries.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NumStaticRpfEntries.setDescription('Total number of Static RPF entries.')
hpicfPim6Version = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6Version.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6Version.setDescription('Currently running PIM Version.')
hpicfPim6StarGEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6StarGEntries.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StarGEntries.setDescription('Total number of entries in the (*,G) table')
hpicfPim6SGEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6SGEntries.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6SGEntries.setDescription('Total number of entries in the (S,G) table.')
hpicfPim6TotalNeighborCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6TotalNeighborCount.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6TotalNeighborCount.setDescription('PIMv6 Neighbor Count.')
hpicfPim6JoinPruneInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6JoinPruneInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6JoinPruneInterval.setDescription('The default interval at which periodic PIMv6-SM Join/Prune messages are to be sent.')
hpicfPim6StaticRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12), )
if mibBuilder.loadTexts: hpicfPim6StaticRPSetTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetTable.setDescription('The (conceptual) table containing statically configured Rendezvous Points (RPs) for IPv6 multicast group mappings. This information is being used in the PIMv6 Sparse mode only.')
hpicfPim6StaticRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1), ).setIndexNames((0, "PIM-MIB", "pimRPSetComponent"), (0, "HP-ICF-PIM6", "hpicfPim6StaticRPSetGrpAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6StaticRPSetGroupAddress"), (0, "HP-ICF-PIM6", "hpicfPim6StaticRPSetGrpMskType"), (0, "HP-ICF-PIM6", "hpicfPim6StaticRPSetGroupMask"), (0, "HP-ICF-PIM6", "hpicfPim6StaticRPSetAddressType"), (0, "HP-ICF-PIM6", "hpicfPim6StaticRPSetAddress"))
if mibBuilder.loadTexts: hpicfPim6StaticRPSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetEntry.setDescription('An entry (row) in the hpicfPim6StaticRPSetTable. NOTE: the pimRPSetComponent is an index that uniquely identifies the component. Each protocol instance connected to a separate domain should have a different index value.')
hpicfPim6StaticRPSetGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGrpAddrType.setDescription('The address type of this RP-set Group address.')
hpicfPim6StaticRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGroupAddress.setDescription('The IPv6 multicast group address which, when combined with hpicfPim6StaticRPSetGroupMask, gives the group prefix for which this entry contains information about the statically configured RP.')
hpicfPim6StaticRPSetGrpMskType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGrpMskType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGrpMskType.setDescription('The address type of this RP-set Group mask.')
hpicfPim6StaticRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGroupMask.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGroupMask.setDescription('The multicast group address mask which, when combined with hpicfPim6StaticRPSetGroupAddress, gives the group prefix for which this entry contains information about the statically configured RP.')
hpicfPim6StaticRPSetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 5), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6StaticRPSetAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetAddressType.setDescription('The address type of this RP-set Address.')
hpicfPim6StaticRPSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6StaticRPSetAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetAddress.setDescription('The IPv6 address of statically configured RP for the given IPv6 multicast group(s).')
hpicfPim6StaticRPSetOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6StaticRPSetOverride.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetOverride.setDescription('If true, indicates that the router should ignore the information learned by a BSR if there is a conflict between the information this static entry contains and the information that is learned by the BSR. Default is false.')
hpicfPim6StaticRPSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 12, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6StaticRPSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
hpicfPim6CandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13), )
if mibBuilder.loadTexts: hpicfPim6CandidateRPTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPTable.setDescription('The (conceptual) table listing the IPv6 multicast groups for which the local router is to advertise itself as a Candidate-RP when the value of hpicfPim6ComponentCRPHoldTime is non-zero. If this table is empty, then the local router will advertise itself as a Candidate-RP for all groups (providing the value of hpicfPim6ComponentCRPHoldTime is non- zero).')
hpicfPim6CandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1), ).setIndexNames((0, "HP-ICF-PIM6", "hpicfPim6CandidateRPGrpAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6CandidateRPGroupAddress"), (0, "HP-ICF-PIM6", "hpicfPim6CandidateRPGrpMskType"), (0, "HP-ICF-PIM6", "hpicfPim6CandidateRPGroupMask"))
if mibBuilder.loadTexts: hpicfPim6CandidateRPEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPEntry.setDescription('An entry (conceptual row) in the hpicfPim6CandidateRPTable.')
hpicfPim6CandidateRPGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6CandidateRPGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPGrpAddrType.setDescription('The IP address type of hpicfPim6CandidateRPGroupAddress.')
hpicfPim6CandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6CandidateRPGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPGroupAddress.setDescription('The IPv6 multicast group address which, when combined with hpicfPim6CandidateRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
hpicfPim6CandidateRPGrpMskType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6CandidateRPGrpMskType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPGrpMskType.setDescription('The IP address type of hpicfPim6CandidateRPGroupMask.')
hpicfPim6CandidateRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6CandidateRPGroupMask.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPGroupMask.setDescription('The multicast group address mask which, when combined with hpicfPim6CandidateRPGroupMask, identifies a group prefix for which the local router will advertise itself as a Candidate-RP.')
hpicfPim6CandidateRPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6CandidateRPAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPAddressType.setDescription('The IP address type of hpicfPim6CandidateRPAddress.')
hpicfPim6CandidateRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6CandidateRPAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPAddress.setDescription('The (unicast) address of the interface which will be advertised as a Candidate-RP.')
hpicfPim6CandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 13, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6CandidateRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPRowStatus.setDescription('The status of this row, by which new entries may be created, or old entries deleted from this table.')
hpicfPim6ComponentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14), )
if mibBuilder.loadTexts: hpicfPim6ComponentTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentTable.setDescription('The (conceptual) table containing objects specific to a PIMv6 domain. One row exists for each domain to which the router is connected. A PIMv6-SM domain is defined as an area of the network over which Bootstrap messages are forwarded. Typically, a PIMv6-SM router will be a member of exactly one domain. This table also supports, however, routers which may form a border between two PIMv6-SM domains and do not forward Bootstrap messages between them.')
hpicfPim6ComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1), ).setIndexNames((0, "HP-ICF-PIM6", "hpicfPim6ComponentIndex"))
if mibBuilder.loadTexts: hpicfPim6ComponentEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentEntry.setDescription('An entry (conceptual row) in the hpicfPim6ComponentTable.')
hpicfPim6ComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hpicfPim6ComponentIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentIndex.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value. Routers that only support membership in a single PIMv6-SM domain should use a hpicfPim6ComponentIndex value of 1.')
hpicfPim6ComponentBSRAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRAddrType.setDescription('The IP address type of the bootstrap router (BSR) for the local PIMv6 region.')
hpicfPim6ComponentBSRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRAddress.setDescription('The IPv6 address of the bootstrap router (BSR) for the local PIMv6 region.')
hpicfPim6ComponentBSRExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRExpiryTime.setDescription('The minimum time remaining before the bootstrap router in the local domain will be declared down. For candidate BSRs, this is the time until the component sends an RP-Set message. For other routers, this is the time until it may accept an RP-Set message from a lower candidate BSR.')
hpicfPim6ComponentCRPHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCRPHoldTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCRPHoldTime.setDescription('The holdtime of the component when it is a candidate RP in the local domain. The value of 0 is used to indicate that the local system is not a Candidate-RP.')
hpicfPim6ComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentStatus.setDescription('The status of this entry. Creating the entry creates another protocol instance; destroying the entry disables a protocol instance.')
hpicfPim6ComponentCBSRAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRAdmStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRAdmStatus.setDescription('This objects specifies whether or not the router configured to be a Candidate BSR for the local PIMv6 region. Default is disabled.')
hpicfPim6ComponentCBSRAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRAddrType.setDescription('The IPv6 address type of the Candidate BSR router will advertise for the local PIMv6 region.')
hpicfPim6ComponentCBSRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRAddress.setDescription('The IPv6 address the Candidate BSR router will advertise for the local PIMv6 region.')
hpicfPim6ComponentCBSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRPriority.setDescription('The priority for Candidate BSR router. In BSR election process the candidate BSR with the highest (numerically bigger) priority becomes the BSR. If the priority values are the same, the router with the larger IPv6 address is the BSR. Default is 0.')
hpicfPim6ComponentCBSRHashMskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(126)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRHashMskLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRHashMskLen.setDescription('Specifies the length (in bits) of a multicast group address to use when mapping a group to one of the candidate RPs from the RP-Set whose group-prefix includes the group. Default is 126.')
hpicfPim6ComponentCBSRMsgInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRMsgInt.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCBSRMsgInt.setDescription('If this router is the elected BSR, then this is the interval for sending (multicast out) periodic Bootstrap (RP-Set) messages on all PIMv6 SM interfaces. Default is 60 seconds.')
hpicfPim6ComponentCRPPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfPim6ComponentCRPPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCRPPriority.setDescription('The priority for the Candidate RP for the local PIMv6 domain. Determines which Candidate RPs get selected by the BSR to be in the RP Set. The smaller value means the higher priority (a value of zero is the highest possible priority). Default is 192.')
hpicfPim6ComponentCRPAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentCRPAdvInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCRPAdvInterval.setDescription('The interval at which the Candidate RP transmits (unicast to the elected BSR) advertise messages in the local PIMv6 domain.')
hpicfPim6ComponentBSRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRPriority.setDescription('The priority of the Bootstrap Router (BSR) elected for the local PIMv6 region.')
hpicfPim6ComponentBSRHashMskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRHashMskLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRHashMskLen.setDescription('The hash mask length of the elected Bootstrap Router (BSR).')
hpicfPim6ComponentBSRUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRUpTime.setDescription('Length of time that the elected Bootstrap Router (BSR) has been up.')
hpicfPim6ComponentBSRNextMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 18), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentBSRNextMessage.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentBSRNextMessage.setDescription('Time in which the next bootstrap message is due from the elected Bootstrap Router (BSR).')
hpicfPim6ComponentCRPAdvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 14, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6ComponentCRPAdvTimer.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentCRPAdvTimer.setDescription('Next scheduled Candidate RP Advertisement.')
hpicfPim6SPTThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 15), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6SPTThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6SPTThreshold.setDescription('Specifies a threshold for switching to the Shortest Path Tree (SPT) on this router. If the object has the special value of -1, the Shared Tree rooted to the Rendezvous Point (RP) will be used indefinitely on the router. Default is -1.')
hpicfPim6NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16), )
if mibBuilder.loadTexts: hpicfPim6NeighborTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborTable.setDescription("The (conceptual) table listing the router's PIMv6 neighbors.")
hpicfPim6NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1), ).setIndexNames((0, "HP-ICF-PIM6", "hpicfPim6NeighborIfIndex"), (0, "HP-ICF-PIM6", "hpicfPim6NeighborAddressType"), (0, "HP-ICF-PIM6", "hpicfPim6NeighborAddress"))
if mibBuilder.loadTexts: hpicfPim6NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborEntry.setDescription('An entry (conceptual row) in the hpicfPim6NeighborTable.')
hpicfPim6NeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfPim6NeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborIfIndex.setDescription('The value of ifIndex for the interface used to reach this PIMv6 neighbor.')
hpicfPim6NeighborAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6NeighborAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborAddressType.setDescription('The address type of this PIM neighbor.')
hpicfPim6NeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6NeighborAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborAddress.setDescription('The primary IP address of this PIM neighbor. The InetAddressType is given by the hpicfPim6NeighborAddressType object.')
hpicfPim6NeighborGenIDPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborGenIDPresent.setReference('RFC 4601 section 4.3.1')
if mibBuilder.loadTexts: hpicfPim6NeighborGenIDPresent.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborGenIDPresent.setDescription('Evaluates to TRUE if this neighbor is using the Generation ID option.')
hpicfPim6NeighborGenIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborGenIDValue.setReference('RFC 4601 section 4.3.1')
if mibBuilder.loadTexts: hpicfPim6NeighborGenIDValue.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborGenIDValue.setDescription('The value of the Generation ID from the last PIM Hello message received from this neighbor. This object is always zero if hpicfPim6NeighborGenIDPresent is FALSE.')
hpicfPim6NeighborUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborUpTime.setDescription('The time since this PIMv6 neighbor (last) became a neighbor of the local router.')
hpicfPim6NeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborExpiryTime.setDescription('The minimum time remaining before this PIMv6 neighbor will time out. The value zero indicates that this PIMv6 neighbor will never time out.')
hpicfPim6NeighborDRPrioPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborDRPrioPresent.setReference('RFC 4601 section 4.3.2')
if mibBuilder.loadTexts: hpicfPim6NeighborDRPrioPresent.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborDRPrioPresent.setDescription('Evaluates to TRUE if this neighbor is using the DR Priority option.')
hpicfPim6NeighborDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborDRPriority.setReference('RFC 4601 section 4.3.2')
if mibBuilder.loadTexts: hpicfPim6NeighborDRPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborDRPriority.setDescription('The value of the Designated Router Priority from the last PIM Hello message received from this neighbor. This object is always zero if hpicfPim6NeighborDRPrioPresent is FALSE.')
hpicfPim6NeighborLanPruneDlyPres = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 16, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6NeighborLanPruneDlyPres.setReference('RFC 4601 section 4.3.3')
if mibBuilder.loadTexts: hpicfPim6NeighborLanPruneDlyPres.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborLanPruneDlyPres.setDescription('Evaluates to TRUE if this neighbor is using the LAN Prune Delay option.')
hpicfPim6RPSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17), )
if mibBuilder.loadTexts: hpicfPim6RPSetTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetTable.setDescription('The (conceptual) table listing PIM information for candidate Rendezvous Points (RPs) for IP multicast groups. When the local router is the BSR, this information is obtained from received Candidate-RP-Advertisements. When the local router is not the BSR, this information is obtained from received RP-Set messages.')
hpicfPim6RPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1), ).setIndexNames((0, "PIM-MIB", "pimRPSetComponent"), (0, "HP-ICF-PIM6", "hpicfPim6RPSetGroupAddressType"), (0, "HP-ICF-PIM6", "hpicfPim6RPSetGroupAddress"), (0, "HP-ICF-PIM6", "hpicfPim6RPSetGroupMaskType"), (0, "HP-ICF-PIM6", "hpicfPim6RPSetGroupMask"), (0, "HP-ICF-PIM6", "hpicfPim6RPSetAddressType"), (0, "HP-ICF-PIM6", "hpicfPim6RPSetAddress"))
if mibBuilder.loadTexts: hpicfPim6RPSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetEntry.setDescription('An entry (conceptual row) in the hpicfPim6RPSetTable.')
hpicfPim6RPSetGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6RPSetGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetGroupAddressType.setDescription('The address type of this RP-set Group address.')
hpicfPim6RPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6RPSetGroupAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetGroupAddress.setDescription('The IP multicast group address which, when combined with hpicfPim6RPSetGroupMask, gives the group prefix for which this entry contains information about the Candidate-RP.')
hpicfPim6RPSetGroupMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 3), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6RPSetGroupMaskType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetGroupMaskType.setDescription('The address type of this RP-set Mask address.')
hpicfPim6RPSetGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6RPSetGroupMask.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetGroupMask.setDescription('The multicast group address mask which, when combined with hpicfPim6RPSetGroupAddress, gives the group prefix for which this entry contains information about the Candidate-RP.')
hpicfPim6RPSetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 5), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6RPSetAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetAddressType.setDescription('The address type of this RP-set address.')
hpicfPim6RPSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6RPSetAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetAddress.setDescription('The IP address of the Candidate-RP.')
hpicfPim6RPSetHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6RPSetHoldTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetHoldTime.setDescription('The holdtime of a Candidate-RP. If the local router is not the BSR, this value is 0.')
hpicfPim6RPSetExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 17, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6RPSetExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetExpiryTime.setDescription('The minimum time remaining before the Candidate-RP will be declared down. If the local router is not the BSR, this value is 0.')
hpicfPim6IpMcastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfPim6IpMcastEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMcastEnabled.setDescription('The enabled status of IPv6 Multicast routing on this router.')
hpicfPim6IpMcastRouteEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMcastRouteEntryCount.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMcastRouteEntryCount.setDescription('The number of rows in the ipMRouteTable. This can be used to monitor the multicast routing table size.')
hpicfPim6IpMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20), )
if mibBuilder.loadTexts: hpicfPim6IpMRouteTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteTable.setDescription('The (conceptual) table containing multicast routing information for IPv6 datagrams sent by particular sources to the IPv6 multicast groups known to this router.')
hpicfPim6IpMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1), ).setIndexNames((0, "HP-ICF-PIM6", "hpicfPim6IpMRouteGrpAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteGroup"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteGrpPrefixLen"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteSrcAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteSource"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteSrcPrefixLen"))
if mibBuilder.loadTexts: hpicfPim6IpMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteEntry.setDescription('An entry (conceptual row) containing the multicast routing information for IPv6 datagrams from a particular source and addressed to a particular IPv6 multicast group address. OIDs are limited to 128 sub-identifiers, but this limit is not enforced by the syntax of this entry. In practice, this does not present a problem, because IP address types allowed by conformance statements do not exceed this limit.')
hpicfPim6IpMRouteGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6IpMRouteGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteGrpAddrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteGroup. Legal values correspond to the subset of address families for which multicast forwarding is supported.')
hpicfPim6IpMRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6IpMRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteGroup.setDescription('The IP multicast group address which, when combined with the corresponding value specified in hpicfPim6IpMRouteGroupPrefixLength, identifies the groups for which this entry contains multicast routing information. This address object is only significant up to hpicfPim6IpMRouteGroupPrefixLength bits. The remaining address bits are set to zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry. For addresses of type ipv4z or ipv6z, the appended zone index is significant even though it lies beyond the prefix length. The use of these address types indicate that this forwarding state applies only within the given zone. Zone index zero is not valid in this table.')
hpicfPim6IpMRouteGrpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfPim6IpMRouteGrpPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteGrpPrefixLen.setDescription("The length in bits of the mask which, when combined with the corresponding value of hpicfPim6IpMRouteGroup, identifies the groups for which this entry contains multicast routing information. The InetAddressType is given by hpicfPim6IpMRouteGroupAddressType. For values 'ipv4' and 'ipv4z', this object must be in the range 4..32. For values 'ipv6' and 'ipv6z', this object must be in the range 8..128.")
hpicfPim6IpMRouteSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6IpMRouteSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteSrcAddrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteSource. A value of unknown(0) indicates a non-source-specific entry, corresponding to all sources in the group. Otherwise, the value MUST be the same as the value of hpicfPim6IpMRouteGroupType.')
hpicfPim6IpMRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6IpMRouteSource.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteSource.setDescription('The network address which, when combined with the corresponding value of hpicfPim6IpMRouteSourcePrefixLength, identifies the sources for which this entry contains multicast routing information. This address object is only significant up to hpicfPim6IpMRouteSourcePrefixLength bits. The remaining address bits are set to zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry. For addresses of type ipv4z or ipv6z, the appended zone index is significant even though it lies beyond the prefix length. The use of these address types indicate that this source address applies only within the given zone. Zone index zero is not valid in this table.')
hpicfPim6IpMRouteSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfPim6IpMRouteSrcPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteSrcPrefixLen.setDescription("The length in bits of the mask which, when combined with the corresponding value of hpicfPim6IpMRouteSource, identifies the sources for which this entry contains multicast routing information. The InetAddressType is given by hpicfPim6IpMRouteSourceAddressType. For the value 'unknown', this object must be zero. For values 'ipv4' and 'ipv4z', this object must be in the range 4..32. For values 'ipv6' and 'ipv6z', this object must be in the range 8..128.")
hpicfPim6IpMRouteUpstrNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteUpstrNbrType.setReference('RFC 5015')
if mibBuilder.loadTexts: hpicfPim6IpMRouteUpstrNbrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteUpstrNbrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteUpstreamNbr. An address type of unknown(0) indicates that the upstream neighbor is unknown, for example in BIDIR-PIM.')
hpicfPim6IpMRouteUpstrNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteUpstrNbr.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteUpstrNbr.setDescription('The address of the upstream neighbor (for example, RPF neighbor) from which IP datagrams from these sources to this multicast address are received.')
hpicfPim6IpMRouteInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 9), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteInIfIndex.setReference('RFC 5015')
if mibBuilder.loadTexts: hpicfPim6IpMRouteInIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteInIfIndex.setDescription('The value of ifIndex for the interface on which IP datagrams sent by these sources to this multicast address are received. A value of 0 indicates that datagrams are not subject to an incoming interface check, but may be accepted on multiple interfaces (for example, in BIDIR-PIM).')
hpicfPim6IpMRouteTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteTimeStamp.setDescription('The value of sysUpTime at which the multicast routing information represented by this entry was learned by the router. If this information was present at the most recent re- initialization of the local management subsystem, then this object contains a zero value.')
hpicfPim6IpMRouteExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteExpiryTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out. The value 0 indicates that the entry is not subject to aging. If hpicfPim6IpMRouteNHopState is pruned(1),this object represents the remaining time until the prune expires. If this timer expires, state reverts to forwarding(2). Otherwise, this object represents the time until this entry is removed from the table.')
hpicfPim6IpMRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 12), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteProtocol.setDescription('The multicast routing protocol via which this multicast forwarding entry was learned.')
hpicfPim6IpMRouteRtProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 13), IANAipRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtProtocol.setDescription('The routing mechanism via which the route used to find the upstream or parent interface for this multicast forwarding entry was learned.')
hpicfPim6IpMRouteRtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtAddrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteRtAddress.')
hpicfPim6IpMRouteRtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 15), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtAddress.setDescription('The address portion of the route used to find the upstream or parent interface for this multicast forwarding entry. This address object is only significant up to hpicfPim6IpMRouteRtPrefixLength bits. The remaining address bits are set to zero. For addresses of type ipv4z or ipv6z, the appended zone index is significant even though it lies beyond the prefix length. The use of these address types indicate that this forwarding state applies only within the given zone. Zone index zero is not valid in this table.')
hpicfPim6IpMRouteRtPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 16), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtPrefixLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtPrefixLen.setDescription("The length in bits of the mask associated with the route used to find the upstream or parent interface for this multicast forwarding entry. The InetAddressType is given by hpicfPim6IpMRouteRtAddressType. For values 'ipv4' and 'ipv4z', this object must be in the range 4..32. For values 'ipv6' and 'ipv6z', this object must be in the range 8..128.")
hpicfPim6IpMRouteRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteRtType.setDescription('The reason the given route was placed in the (logical) multicast Routing Information Base (RIB). A value of unicast means that the route would normally be placed only in the unicast RIB, but was placed in the multicast RIB due (instead or in addition) to local configuration, such as when running PIM over RIP. A value of multicast means that the route was explicitly added to the multicast RIB by the routing protocol, such as the Distance Vector Multicast Routing Protocol (DVMRP) or Multiprotocol BGP.')
hpicfPim6IpMRouteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteOctets.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteOctets.setDescription('The number of octets contained in IP datagrams that were received from these sources and addressed to this multicast group address, and which were forwarded by this router. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteTimeStamp.')
hpicfPim6IpMRoutePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRoutePkts.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRoutePkts.setDescription('The number of packets routed using this multicast route entry. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteTimeStamp.')
hpicfPim6IpMRouteTtlDropOct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteTtlDropOct.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteTtlDropOct.setDescription('The number of octets contained in IP datagrams that this router has received from these sources and addressed to this multicast group address, which were dropped because the TTL (IPv4) or Hop Limit (IPv6) was decremented to zero, or to a value less than hpicfPim6IpMcastInterfaceTtl for all next hops. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteTimeStamp.')
hpicfPim6IpMRouteTtlDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteTtlDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteTtlDropPkts.setDescription('The number of packets that this router has received from these sources and addressed to this multicast group address, which were dropped because the TTL (IPv4) or Hop Limit (IPv6) was decremented to zero, or to a value less than hpicfPim6IpMcastInterfaceTtl for all next hops. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteTimeStamp.')
hpicfPim6IpMRouteDiffInIfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteDiffInIfOct.setReference('RFC 4601 and RFC 5015')
if mibBuilder.loadTexts: hpicfPim6IpMRouteDiffInIfOct.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteDiffInIfOct.setDescription("The number of octets contained in IP datagrams that this router has received from these sources and addressed to this multicast group address, which were dropped because they were received on an unexpected interface. For RPF checking protocols (such as PIM-SM), these packets arrived on interfaces other than hpicfPim6IpMRouteInIfIndex, and were dropped because of this failed RPF check. (RPF paths are 'Reverse Path Forwarding' paths; the unicast routes to the expected origin of multicast data flows). Other protocols may drop packets on an incoming interface check for different reasons (for example, BIDIR-PIM performs a DF check on receipt of packets). All packets dropped as a result of an incoming interface check are counted here. If this counter increases rapidly, this indicates a problem. A significant quantity of multicast data is arriving at this router on unexpected interfaces, and is not being forwarded. For guidance, if the rate of increase of this counter exceeds 1% of the rate of increase of hpicfPim6IpMRouteOctets, then there are multicast routing problems that require investigation. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteTimeStamp.")
hpicfPim6IpMRouteDiffInIfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteDiffInIfPkts.setReference('RFC 4601 and RFC 5015')
if mibBuilder.loadTexts: hpicfPim6IpMRouteDiffInIfPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteDiffInIfPkts.setDescription("The number of packets which this router has received from these sources and addressed to this multicast group address, which were dropped because they were received on an unexpected interface. For RPF checking protocols (such as PIM-SM), these packets arrived on interfaces other than hpicfPim6IpMRouteInIfIndex, and were dropped because of this failed RPF check. (RPF paths are 'Reverse Path Forwarding' path; the unicast routes to the expected origin of multicast data flows). Other protocols may drop packets on an incoming interface check for different reasons (for example, BIDIR-PIM performs a DF check on receipt of packets). All packets dropped as a result of an incoming interface check are counted here. If this counter increases rapidly, this indicates a problem. A significant quantity of multicast data is arriving at this router on unexpected interfaces, and is not being forwarded. For guidance, if the rate of increase of this counter exceeds 1% of the rate of increase of hpicfPim6IpMRoutePkts,then there are multicast routing problems that require investigation. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteTimeStamp.")
hpicfPim6IpMRouteBps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 20, 1, 24), Counter64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteBps.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteBps.setDescription('Bits per second forwarded by this router using this multicast routing entry. This value is a sample; it is the number of bits forwarded during the last whole 1 second sampling period. The value during the current 1 second sampling period is not made available until the period is completed. The quantity being sampled is the same as that measured by hpicfPim6IpMRouteOctets. The units and the sampling method are different.')
hpicfPim6IpMRouteNHopTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21), )
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopTable.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopTable.setDescription('The (conceptual) table containing information on the next-hops on outgoing interfaces for routing IP multicast datagrams. Each entry is one of a list of next-hops on outgoing interfaces for particular sources sending to a particular multicast group address.')
hpicfPim6IpMRouteNHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1), ).setIndexNames((0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopGrpAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopGroup"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopGrpPLen"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopSrcAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopSource"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopSrcPLen"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopIfIndex"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopAddrType"), (0, "HP-ICF-PIM6", "hpicfPim6IpMRouteNHopAddress"))
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopEntry.setDescription('An entry (conceptual row) in the list of next-hops on outgoing interfaces to which IP multicast datagrams from particular sources to an IP multicast group address are routed. OIDs are limited to 128 sub-identifiers, but this limit is not enforced by the syntax of this entry. In practice, this does not present a problem, because IP address types allowed by conformance statements do not exceed this limit.')
hpicfPim6IpMRouteNHopGrpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopGrpAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopGrpAddrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteNHopGroup. Legal values correspond to the subset of address families for which multicast forwarding is supported.')
hpicfPim6IpMRouteNHopGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopGroup.setDescription('The IP multicast group address which, when combined with the corresponding value specified in hpicfPim6IpMRouteNHopGrpPLen, identifies the groups for which this entry contains multicast forwarding information. This address object is only significant up to hpicfPim6IpMRouteNHopGrpPLen bits. The remaining address bits are set to zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry. For addresses of type ipv4z or ipv6z, the appended zone index is significant even though it lies beyond the prefix length. The use of these address types indicate that this forwarding state applies only within the given zone. Zone index zero is not valid in this table.')
hpicfPim6IpMRouteNHopGrpPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopGrpPLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopGrpPLen.setDescription("The length in bits of the mask which, when combined with the corresponding value of hpicfPim6IpMRouteGroup, identifies the groups for which this entry contains multicast routing information. The InetAddressType is given by hpicfPim6IpMRouteNHopGrpAddrType. For values 'ipv4' and 'ipv4z', this object must be in the range 4..32. For values 'ipv6' and 'ipv6z', this object must be in the range 8..128.")
hpicfPim6IpMRouteNHopSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopSrcAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopSrcAddrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteNHopSource. A value of unknown(0) indicates a non-source-specific entry, corresponding to all sources in the group. Otherwise, the value MUST be the same as the value of hpicfPim6IpMRouteNHopGroupType.')
hpicfPim6IpMRouteNHopSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopSource.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopSource.setDescription('The network address which, when combined with the corresponding value of the mask specified in hpicfPim6IpMRouteNHopSrcPLen, identifies the sources for which this entry specifies a next-hop on an outgoing interface. This address object is only significant up to hpicfPim6IpMRouteNHopSrcPLen bits. The remaining address bits are set to zero. This is especially important for this index field, which is part of the index of this entry. Any non-zero bits would signify an entirely different entry. For addresses of type ipv4z or ipv6z, the appended zone index is significant even though it lies beyond the prefix length. The use of these address types indicate that this source address applies only within the given zone. Zone index zero is not valid in this table.')
hpicfPim6IpMRouteNHopSrcPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopSrcPLen.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopSrcPLen.setDescription("The length in bits of the mask which, when combined with the corresponding value specified in hpicfPim6IpMRouteNHopSource, identifies the sources for which this entry specifies a next-hop on an outgoing interface. The InetAddressType is given by hpicfPim6IpMRouteNHopSrcAddrType. For the value 'unknown', this object must be zero. For values 'ipv4' and 'ipv4z', this object must be in the range 4..32. For values 'ipv6' and 'ipv6z', this object must be in the range 8..128.")
hpicfPim6IpMRouteNHopIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 7), InterfaceIndex())
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopIfIndex.setDescription('The ifIndex value of the interface for the outgoing interface for this next-hop.')
hpicfPim6IpMRouteNHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 8), InetAddressType())
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopAddrType.setDescription('A value indicating the address family of the address contained in hpicfPim6IpMRouteNHopAddress.')
hpicfPim6IpMRouteNHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 9), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopAddress.setDescription('The address of the next-hop specific to this entry. For most interfaces, this is identical to hpicfPim6IpMRouteNHopGroup. Non-Broadcast Multi-Access (NBMA) interfaces, however, may have multiple next-hop addresses out a single outgoing interface.')
hpicfPim6IpMRouteNHopState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pruned", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopState.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopState.setDescription("An indication of whether the outgoing interface and next- hop represented by this entry is currently being used to forward IP datagrams. The value 'forwarding' indicates it is currently being used; the value 'pruned' indicates it is not.")
hpicfPim6IpMRouteNHopTStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopTStamp.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopTStamp.setDescription('The value of sysUpTime at which the multicast routing information represented by this entry was learned by the router. If this information was present at the most recent re- initialization of the local management subsystem, then this object contains a zero value.')
hpicfPim6IpMRouteNHopExpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopExpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopExpTime.setDescription('The minimum amount of time remaining before this entry will be aged out. If hpicfPim6IpMRouteNHopState is pruned(1), the remaining time until the prune expires and the state reverts to forwarding(2). Otherwise, the remaining time until this entry is removed from the table. The time remaining may be copied from hpicfPim6IpMRouteExpiryTime if the protocol in use for this entry does not specify next-hop timers. The value 0 indicates that the entry is not subject to aging.')
hpicfPim6IpMRouteNHopClsMHops = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopClsMHops.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopClsMHops.setDescription('The minimum number of hops between this router and any member of this IP multicast group reached via this next-hop on this outgoing interface. Any IP multicast datagrams for the group that have a TTL (IPv4) or Hop Count (IPv6) less than this number of hops will not be forwarded to this next-hop. A value of 0 means all multicast datagrams are forwarded out the interface. A value of 256 means that no multicast datagrams are forwarded out the interface. This is an optimization applied by multicast routing protocols that explicitly track hop counts to downstream listeners. Multicast protocols that are not aware of hop counts to downstream listeners set this object to 0.')
hpicfPim6IpMRouteNHopProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 14), IANAipMRouteProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopProtocol.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopProtocol.setDescription('The routing mechanism via which this next-hop was learned.')
hpicfPim6IpMRouteNHopOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopOctets.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopOctets.setDescription('The number of octets of multicast packets that have been forwarded using this route. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteNHopTStamp.')
hpicfPim6IpMRouteNHopPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 1, 21, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6IpMRouteNHopPkts.setDescription('The number of packets which have been forwarded using this route. Discontinuities in this monotonically increasing value occur at re-initialization of the management system. Discontinuities can also occur as a result of routes being removed and replaced, which can be detected by observing the value of hpicfPim6IpMRouteNHopTStamp.')
hpicfPim6NeighborLoss = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 0, 1))
if mibBuilder.loadTexts: hpicfPim6NeighborLoss.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborLoss.setDescription('This notification trap signifies the loss of an adjacency with a neighbor. This trap will be generated when the neighbor timer expires, and the router has no other neighbors on the same interface with a lower IP address than itself.')
hpicfPim6HardMRTFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 0, 2))
if mibBuilder.loadTexts: hpicfPim6HardMRTFull.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6HardMRTFull.setDescription('This notification signifies that the MRT table is full and the error has been originated by hardware. This trap will be generated whenever a multicast flow or MRT entry cannot be added.')
hpicfPim6SoftMRTFull = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 1, 0, 3))
if mibBuilder.loadTexts: hpicfPim6SoftMRTFull.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6SoftMRTFull.setDescription('This notification signifies that the MRT table is full and the error has been originated by software. This trap will be generated whenever a multicast flow or MRT entry cannot be added.')
hpicfPim6DenseMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 1)).setObjects(("HP-ICF-PIM6", "hpicfPim6BaseGroup"), ("HP-ICF-PIM6", "hpicfPim6DenseIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6DenseMIBCompliance = hpicfPim6DenseMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfPim6DenseMIBCompliance.setDescription('The compliance statement for HP routers running PIMv6 Dense Mode and implementing the HP-ICF-PIM6 MIB.')
hpicfPim6UcastRoutingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 2)).setObjects(("HP-ICF-PIM6", "hpicfPim6StaticRpfExtensionsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6UcastRoutingCompliance = hpicfPim6UcastRoutingCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6UcastRoutingCompliance.setDescription('The compliance statement for HP routers running PIMv6 and related Unicast routing info.')
hpicfPim6GlobalCountersCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 3)).setObjects(("HP-ICF-PIM6", "hpicfPim6GlobalCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6GlobalCountersCompliance = hpicfPim6GlobalCountersCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6GlobalCountersCompliance.setDescription('The compliance statement for HP routers running PIMv6 and related global statistics data.')
hpicfPim6InterfaceInfoCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 4)).setObjects(("HP-ICF-PIM6", "hpicfPim6InterfaceExtensionsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6InterfaceInfoCompliance = hpicfPim6InterfaceInfoCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6InterfaceInfoCompliance.setDescription('The compliance statement for HP routers running PIMv6 and related interface and neighbor info.')
hpicfPim6NotificationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 5)).setObjects(("HP-ICF-PIM6", "hpicfPim6NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6NotificationCompliance = hpicfPim6NotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NotificationCompliance.setDescription('The collection of notifications used for signalling important PIMv6 events.')
hpicfPim6SparseModeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 6)).setObjects(("HP-ICF-PIM6", "hpicfPim6CommonGroup"), ("HP-ICF-PIM6", "hpicfPim6StaticRPSetGroup"), ("HP-ICF-PIM6", "hpicfPim6SparseIfGroup"), ("HP-ICF-PIM6", "hpicfPim6CandidateRPGroup"), ("HP-ICF-PIM6", "hpicfPim6ComponentGroup"), ("HP-ICF-PIM6", "hpicfPim6NeighborGroup"), ("HP-ICF-PIM6", "hpicfPim6RPSetGroup"), ("HP-ICF-PIM6", "hpicfPim6MRouteGroup"), ("HP-ICF-PIM6", "hpicfPim6MRouteNHopGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6SparseModeMIBCompliance = hpicfPim6SparseModeMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6SparseModeMIBCompliance.setDescription('The compliance statement for HP routers running PIMv6 Sparse Mode and implementing the HP-ICF-PIM6 MIB.')
hpicfPim6DenseModeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 2, 7)).setObjects(("HP-ICF-PIM6", "hpicfPim6CommonGroup"), ("HP-ICF-PIM6", "hpicfPim6DenseIfGroup"), ("HP-ICF-PIM6", "hpicfPim6MRouteGroup"), ("HP-ICF-PIM6", "hpicfPim6MRouteNHopGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6DenseModeMIBCompliance = hpicfPim6DenseModeMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6DenseModeMIBCompliance.setDescription('The compliance statement for HP routers running PIMv6 Dense Mode and implementing the HP-ICF-PIM6 MIB.')
hpicfPim6BaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 1)).setObjects(("HP-ICF-PIM6", "hpicfPim6AdminStatus"), ("HP-ICF-PIM6", "hpicfPim6StateRefreshInterval"), ("HP-ICF-PIM6", "hpicfPim6TrapControl"), ("HP-ICF-PIM6", "hpicfPim6JoinPruneInterval"), ("HP-ICF-PIM6", "hpicfPim6RemoveConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6BaseGroup = hpicfPim6BaseGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfPim6BaseGroup.setDescription('A collection of objects to support basic PIM v6 configuration information on HP routers.')
hpicfPim6DenseIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 2)).setObjects(("HP-ICF-PIM6", "hpicfPim6IfAddressType"), ("HP-ICF-PIM6", "hpicfPim6IfAddress"), ("HP-ICF-PIM6", "hpicfPim6IfMode"), ("HP-ICF-PIM6", "hpicfPim6IfStatus"), ("HP-ICF-PIM6", "hpicfPim6IfTrigHelloInterval"), ("HP-ICF-PIM6", "hpicfPim6IfHelloInterval"), ("HP-ICF-PIM6", "hpicfPim6IfHelloHoldtime"), ("HP-ICF-PIM6", "hpicfPim6IfLanPruneDelay"), ("HP-ICF-PIM6", "hpicfPim6IfPropagationDelay"), ("HP-ICF-PIM6", "hpicfPim6IfOverrideInterval"), ("HP-ICF-PIM6", "hpicfPim6IfGenerationID"), ("HP-ICF-PIM6", "hpicfPim6IfJoinPruneHoldtime"), ("HP-ICF-PIM6", "hpicfPim6IfGraftRetryInterval"), ("HP-ICF-PIM6", "hpicfPim6IfMaxGraftRetries"), ("HP-ICF-PIM6", "hpicfPim6IfSRTTLThreshold"), ("HP-ICF-PIM6", "hpicfPim6IfLanDelayEnabled"), ("HP-ICF-PIM6", "hpicfPim6IfSRCapable"), ("HP-ICF-PIM6", "hpicfPim6IfNBRTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6DenseIfGroup = hpicfPim6DenseIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6DenseIfGroup.setDescription('A collection of objects that extends objects defined in pimInterfaceTable and used to support management of interfaces operating in PIMv6 Dense Mode.')
hpicfPim6InterfaceExtensionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 3)).setObjects(("HP-ICF-PIM6", "hpicfPim6Version"), ("HP-ICF-PIM6", "hpicfPim6IfNBRCount"), ("HP-ICF-PIM6", "hpicfPim6IfNegotiatedPropagationDelay"), ("HP-ICF-PIM6", "hpicfPim6IfNegotiatedOverrideInterval"), ("HP-ICF-PIM6", "hpicfPim6IfAssertHoldInterval"), ("HP-ICF-PIM6", "hpicfPim6IfNumRoutersNotUsingLanDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6InterfaceExtensionsGroup = hpicfPim6InterfaceExtensionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6InterfaceExtensionsGroup.setDescription('A collection of objects that extends objects defined in pimInterfaceTable.')
hpicfPim6StaticRpfExtensionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 4)).setObjects(("HP-ICF-PIM6", "hpicfPim6NumStaticRpfEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6StaticRpfExtensionsGroup = hpicfPim6StaticRpfExtensionsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRpfExtensionsGroup.setDescription('A collection of objects that extend hpicfPim6StaticRpfTable.')
hpicfPim6GlobalCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 5)).setObjects(("HP-ICF-PIM6", "hpicfPim6StarGEntries"), ("HP-ICF-PIM6", "hpicfPim6SGEntries"), ("HP-ICF-PIM6", "hpicfPim6TotalNeighborCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6GlobalCounterGroup = hpicfPim6GlobalCounterGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6GlobalCounterGroup.setDescription('A collection of global PIMv6 counter objects.')
hpicfPim6NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 6)).setObjects(("HP-ICF-PIM6", "hpicfPim6NeighborLoss"), ("HP-ICF-PIM6", "hpicfPim6HardMRTFull"), ("HP-ICF-PIM6", "hpicfPim6SoftMRTFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6NotificationGroup = hpicfPim6NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NotificationGroup.setDescription('A collection of notifications used for signaling important PIMv6 events.')
hpicfPim6StaticRPSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 7)).setObjects(("HP-ICF-PIM6", "hpicfPim6StaticRPSetOverride"), ("HP-ICF-PIM6", "hpicfPim6StaticRPSetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6StaticRPSetGroup = hpicfPim6StaticRPSetGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6StaticRPSetGroup.setDescription('A collection of objects that represents hpicfPim6StaticRPSetTable')
hpicfPim6CandidateRPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 8)).setObjects(("HP-ICF-PIM6", "hpicfPim6CandidateRPAddressType"), ("HP-ICF-PIM6", "hpicfPim6CandidateRPAddress"), ("HP-ICF-PIM6", "hpicfPim6CandidateRPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6CandidateRPGroup = hpicfPim6CandidateRPGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CandidateRPGroup.setDescription('A collection of objects that represents hpicfPim6CandidateRPTable')
hpicfPim6ComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 9)).setObjects(("HP-ICF-PIM6", "hpicfPim6ComponentBSRAddrType"), ("HP-ICF-PIM6", "hpicfPim6ComponentBSRAddress"), ("HP-ICF-PIM6", "hpicfPim6ComponentBSRExpiryTime"), ("HP-ICF-PIM6", "hpicfPim6ComponentCRPHoldTime"), ("HP-ICF-PIM6", "hpicfPim6ComponentStatus"), ("HP-ICF-PIM6", "hpicfPim6ComponentCBSRAdmStatus"), ("HP-ICF-PIM6", "hpicfPim6ComponentCBSRAddrType"), ("HP-ICF-PIM6", "hpicfPim6ComponentCBSRAddress"), ("HP-ICF-PIM6", "hpicfPim6ComponentCBSRPriority"), ("HP-ICF-PIM6", "hpicfPim6ComponentCBSRHashMskLen"), ("HP-ICF-PIM6", "hpicfPim6ComponentCBSRMsgInt"), ("HP-ICF-PIM6", "hpicfPim6ComponentCRPPriority"), ("HP-ICF-PIM6", "hpicfPim6ComponentCRPAdvInterval"), ("HP-ICF-PIM6", "hpicfPim6ComponentBSRPriority"), ("HP-ICF-PIM6", "hpicfPim6ComponentBSRHashMskLen"), ("HP-ICF-PIM6", "hpicfPim6ComponentBSRUpTime"), ("HP-ICF-PIM6", "hpicfPim6ComponentBSRNextMessage"), ("HP-ICF-PIM6", "hpicfPim6ComponentCRPAdvTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6ComponentGroup = hpicfPim6ComponentGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6ComponentGroup.setDescription('A collection of objects that represents hpicfPim6ComponentTable')
hpicfPim6CommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 10)).setObjects(("HP-ICF-PIM6", "hpicfPim6AdminStatus"), ("HP-ICF-PIM6", "hpicfPim6StateRefreshInterval"), ("HP-ICF-PIM6", "hpicfPim6TrapControl"), ("HP-ICF-PIM6", "hpicfPim6JoinPruneInterval"), ("HP-ICF-PIM6", "hpicfPim6RemoveConfig"), ("HP-ICF-PIM6", "hpicfPim6SPTThreshold"), ("HP-ICF-PIM6", "hpicfPim6IpMcastEnabled"), ("HP-ICF-PIM6", "hpicfPim6IpMcastRouteEntryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6CommonGroup = hpicfPim6CommonGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6CommonGroup.setDescription('A collection of objects to support basic PIM v6 configuration information on HP routers.')
hpicfPim6SparseIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 11)).setObjects(("HP-ICF-PIM6", "hpicfPim6IfAddressType"), ("HP-ICF-PIM6", "hpicfPim6IfAddress"), ("HP-ICF-PIM6", "hpicfPim6IfTrigHelloInterval"), ("HP-ICF-PIM6", "hpicfPim6IfHelloHoldtime"), ("HP-ICF-PIM6", "hpicfPim6IfLanPruneDelay"), ("HP-ICF-PIM6", "hpicfPim6IfPropagationDelay"), ("HP-ICF-PIM6", "hpicfPim6IfOverrideInterval"), ("HP-ICF-PIM6", "hpicfPim6IfGenerationID"), ("HP-ICF-PIM6", "hpicfPim6IfJoinPruneHoldtime"), ("HP-ICF-PIM6", "hpicfPim6IfLanDelayEnabled"), ("HP-ICF-PIM6", "hpicfPim6IfDRPriority"), ("HP-ICF-PIM6", "hpicfPim6IfNBRTimeout"), ("HP-ICF-PIM6", "hpicfPim6IfDRType"), ("HP-ICF-PIM6", "hpicfPim6IfDR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6SparseIfGroup = hpicfPim6SparseIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6SparseIfGroup.setDescription('A collection of objects that extends objects defined in pimInterfaceTable and used to support management of interfaces operating in PIMv6 Sparse Mode.')
hpicfPim6NeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 12)).setObjects(("HP-ICF-PIM6", "hpicfPim6NeighborGenIDPresent"), ("HP-ICF-PIM6", "hpicfPim6NeighborGenIDValue"), ("HP-ICF-PIM6", "hpicfPim6NeighborUpTime"), ("HP-ICF-PIM6", "hpicfPim6NeighborExpiryTime"), ("HP-ICF-PIM6", "hpicfPim6NeighborDRPrioPresent"), ("HP-ICF-PIM6", "hpicfPim6NeighborDRPriority"), ("HP-ICF-PIM6", "hpicfPim6NeighborLanPruneDlyPres"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6NeighborGroup = hpicfPim6NeighborGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6NeighborGroup.setDescription('A collection of objects that represents hpicfPim6NeighborTable')
hpicfPim6RPSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 13)).setObjects(("HP-ICF-PIM6", "hpicfPim6RPSetHoldTime"), ("HP-ICF-PIM6", "hpicfPim6RPSetExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6RPSetGroup = hpicfPim6RPSetGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6RPSetGroup.setDescription('A collection of objects that represents hpicfPim6RPSetTable')
hpicfPim6MRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 14)).setObjects(("HP-ICF-PIM6", "hpicfPim6IpMRouteUpstrNbrType"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteUpstrNbr"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteInIfIndex"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteTimeStamp"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteExpiryTime"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteProtocol"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteRtProtocol"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteRtAddrType"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteRtAddress"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteRtPrefixLen"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteRtType"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteOctets"), ("HP-ICF-PIM6", "hpicfPim6IpMRoutePkts"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteTtlDropOct"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteTtlDropPkts"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteDiffInIfOct"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteDiffInIfPkts"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteBps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6MRouteGroup = hpicfPim6MRouteGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6MRouteGroup.setDescription('A collection of objects that represents hpicfPim6IpMRouteTable')
hpicfPim6MRouteNHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 122, 2, 1, 15)).setObjects(("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopState"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopTStamp"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopExpTime"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopClsMHops"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopProtocol"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopOctets"), ("HP-ICF-PIM6", "hpicfPim6IpMRouteNHopPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfPim6MRouteNHopGroup = hpicfPim6MRouteNHopGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfPim6MRouteNHopGroup.setDescription('A collection of objects that represents hpicfPim6IpMRouteNHopTable')
mibBuilder.exportSymbols("HP-ICF-PIM6", hpicfPim6IpMRouteRtAddrType=hpicfPim6IpMRouteRtAddrType, hpicfPim6IfTrigHelloInterval=hpicfPim6IfTrigHelloInterval, hpicfPim6DenseMIBCompliance=hpicfPim6DenseMIBCompliance, hpicfPim6IfGenerationID=hpicfPim6IfGenerationID, hpicfPim6RPSetAddress=hpicfPim6RPSetAddress, hpicfPim6ComponentCBSRMsgInt=hpicfPim6ComponentCBSRMsgInt, hpicfPim6StateRefreshInterval=hpicfPim6StateRefreshInterval, hpicfPim6ComponentCRPPriority=hpicfPim6ComponentCRPPriority, hpicfPim6IpMRoutePkts=hpicfPim6IpMRoutePkts, hpicfPim6Conformance=hpicfPim6Conformance, hpicfPim6IfLanDelayEnabled=hpicfPim6IfLanDelayEnabled, hpicfPim6RemoveConfig=hpicfPim6RemoveConfig, hpicfPim6IfEntry=hpicfPim6IfEntry, hpicfPim6MRouteNHopGroup=hpicfPim6MRouteNHopGroup, hpicfPim6JoinPruneInterval=hpicfPim6JoinPruneInterval, hpicfPim6ComponentIndex=hpicfPim6ComponentIndex, hpicfPim6IpMRouteRtType=hpicfPim6IpMRouteRtType, hpicfPim6IfSRTTLThreshold=hpicfPim6IfSRTTLThreshold, hpicfPim6IpMRouteDiffInIfOct=hpicfPim6IpMRouteDiffInIfOct, hpicfPim6StaticRPSetEntry=hpicfPim6StaticRPSetEntry, hpicfPim6=hpicfPim6, hpicfPim6ComponentBSRNextMessage=hpicfPim6ComponentBSRNextMessage, hpicfPim6IpMRouteEntry=hpicfPim6IpMRouteEntry, hpicfPim6IpMRouteBps=hpicfPim6IpMRouteBps, hpicfPim6SparseIfGroup=hpicfPim6SparseIfGroup, hpicfPim6IpMcastEnabled=hpicfPim6IpMcastEnabled, hpicfPim6NeighborTable=hpicfPim6NeighborTable, hpicfPim6StaticRPSetTable=hpicfPim6StaticRPSetTable, hpicfPim6CandidateRPGroupAddress=hpicfPim6CandidateRPGroupAddress, hpicfPim6IfHelloHoldtime=hpicfPim6IfHelloHoldtime, hpicfPim6NeighborExpiryTime=hpicfPim6NeighborExpiryTime, hpicfPim6GlobalCountersCompliance=hpicfPim6GlobalCountersCompliance, hpicfPim6NeighborIfIndex=hpicfPim6NeighborIfIndex, hpicfPim6TotalNeighborCount=hpicfPim6TotalNeighborCount, hpicfPim6ComponentBSRAddress=hpicfPim6ComponentBSRAddress, hpicfPim6IpMRouteTable=hpicfPim6IpMRouteTable, hpicfPim6IpMcastRouteEntryCount=hpicfPim6IpMcastRouteEntryCount, hpicfPim6IfLanPruneDelay=hpicfPim6IfLanPruneDelay, hpicfPim6MRouteGroup=hpicfPim6MRouteGroup, hpicfPim6IpMRouteNHopTable=hpicfPim6IpMRouteNHopTable, hpicfPim6StaticRPSetGroupMask=hpicfPim6StaticRPSetGroupMask, hpicfPim6AdminStatus=hpicfPim6AdminStatus, hpicfPim6NeighborAddress=hpicfPim6NeighborAddress, hpicfPim6StaticRPSetGroupAddress=hpicfPim6StaticRPSetGroupAddress, hpicfPim6IfIndex=hpicfPim6IfIndex, hpicfPim6IpMRouteNHopGrpPLen=hpicfPim6IpMRouteNHopGrpPLen, hpicfPim6IfNegotiatedOverrideInterval=hpicfPim6IfNegotiatedOverrideInterval, hpicfPim6IpMRouteExpiryTime=hpicfPim6IpMRouteExpiryTime, hpicfPim6IfJoinPruneHoldtime=hpicfPim6IfJoinPruneHoldtime, hpicfPim6ComponentCBSRAddress=hpicfPim6ComponentCBSRAddress, hpicfPim6ComponentBSRHashMskLen=hpicfPim6ComponentBSRHashMskLen, hpicfPim6RPSetTable=hpicfPim6RPSetTable, hpicfPim6IfDRType=hpicfPim6IfDRType, hpicfPim6Traps=hpicfPim6Traps, hpicfPim6ComponentTable=hpicfPim6ComponentTable, hpicfPim6IpMRouteGrpPrefixLen=hpicfPim6IpMRouteGrpPrefixLen, hpicfPim6IpMRouteNHopSource=hpicfPim6IpMRouteNHopSource, hpicfPim6NotificationGroup=hpicfPim6NotificationGroup, hpicfPim6Objects=hpicfPim6Objects, hpicfPim6IfStatus=hpicfPim6IfStatus, hpicfPim6IpMRouteOctets=hpicfPim6IpMRouteOctets, hpicfPim6ComponentCBSRHashMskLen=hpicfPim6ComponentCBSRHashMskLen, PYSNMP_MODULE_ID=hpicfPim6MIB, hpicfPim6IpMRouteRtProtocol=hpicfPim6IpMRouteRtProtocol, hpicfPim6StaticRPSetGrpMskType=hpicfPim6StaticRPSetGrpMskType, hpicfPim6ComponentCBSRAdmStatus=hpicfPim6ComponentCBSRAdmStatus, hpicfPim6SoftMRTFull=hpicfPim6SoftMRTFull, hpicfPim6ComponentCRPHoldTime=hpicfPim6ComponentCRPHoldTime, hpicfPim6IpMRouteUpstrNbrType=hpicfPim6IpMRouteUpstrNbrType, hpicfPim6BaseGroup=hpicfPim6BaseGroup, hpicfPim6ComponentEntry=hpicfPim6ComponentEntry, hpicfPim6NeighborDRPriority=hpicfPim6NeighborDRPriority, hpicfPim6StaticRPSetAddressType=hpicfPim6StaticRPSetAddressType, hpicfPim6IpMRouteProtocol=hpicfPim6IpMRouteProtocol, hpicfPim6IpMRouteNHopIfIndex=hpicfPim6IpMRouteNHopIfIndex, hpicfPim6InterfaceExtensionsGroup=hpicfPim6InterfaceExtensionsGroup, hpicfPim6CandidateRPTable=hpicfPim6CandidateRPTable, hpicfPim6StaticRPSetOverride=hpicfPim6StaticRPSetOverride, hpicfPim6IpMRouteNHopGrpAddrType=hpicfPim6IpMRouteNHopGrpAddrType, hpicfPim6SPTThreshold=hpicfPim6SPTThreshold, hpicfPim6IpMRouteUpstrNbr=hpicfPim6IpMRouteUpstrNbr, hpicfPim6StaticRPSetGroup=hpicfPim6StaticRPSetGroup, hpicfPim6IfNBRTimeout=hpicfPim6IfNBRTimeout, hpicfPim6IpMRouteNHopSrcAddrType=hpicfPim6IpMRouteNHopSrcAddrType, hpicfPim6SparseModeMIBCompliance=hpicfPim6SparseModeMIBCompliance, hpicfPim6IfOverrideInterval=hpicfPim6IfOverrideInterval, hpicfPim6RPSetAddressType=hpicfPim6RPSetAddressType, hpicfPim6IpMRouteTtlDropOct=hpicfPim6IpMRouteTtlDropOct, hpicfPim6RPSetGroupAddress=hpicfPim6RPSetGroupAddress, hpicfPim6CommonGroup=hpicfPim6CommonGroup, hpicfPim6CandidateRPGrpAddrType=hpicfPim6CandidateRPGrpAddrType, hpicfPim6RPSetGroup=hpicfPim6RPSetGroup, hpicfPim6ComponentCRPAdvTimer=hpicfPim6ComponentCRPAdvTimer, hpicfPim6ComponentCRPAdvInterval=hpicfPim6ComponentCRPAdvInterval, hpicfPim6ComponentCBSRAddrType=hpicfPim6ComponentCBSRAddrType, hpicfPim6MIB=hpicfPim6MIB, hpicfPim6Compliances=hpicfPim6Compliances, hpicfPim6ComponentStatus=hpicfPim6ComponentStatus, hpicfPim6NotificationCompliance=hpicfPim6NotificationCompliance, hpicfPim6StaticRPSetGrpAddrType=hpicfPim6StaticRPSetGrpAddrType, hpicfPim6IfAssertHoldInterval=hpicfPim6IfAssertHoldInterval, hpicfPim6HardMRTFull=hpicfPim6HardMRTFull, hpicfPim6DenseIfGroup=hpicfPim6DenseIfGroup, hpicfPim6StarGEntries=hpicfPim6StarGEntries, hpicfPim6IpMRouteGroup=hpicfPim6IpMRouteGroup, hpicfPim6IfHelloInterval=hpicfPim6IfHelloInterval, hpicfPim6IfPropagationDelay=hpicfPim6IfPropagationDelay, hpicfPim6ComponentCBSRPriority=hpicfPim6ComponentCBSRPriority, hpicfPim6IpMRouteRtAddress=hpicfPim6IpMRouteRtAddress, hpicfPim6IfNumRoutersNotUsingLanDelay=hpicfPim6IfNumRoutersNotUsingLanDelay, hpicfPim6IpMRouteRtPrefixLen=hpicfPim6IpMRouteRtPrefixLen, hpicfPim6IpMRouteSrcPrefixLen=hpicfPim6IpMRouteSrcPrefixLen, hpicfPim6RPSetGroupAddressType=hpicfPim6RPSetGroupAddressType, hpicfPim6IpMRouteNHopEntry=hpicfPim6IpMRouteNHopEntry, hpicfPim6RPSetGroupMask=hpicfPim6RPSetGroupMask, hpicfPim6NeighborLanPruneDlyPres=hpicfPim6NeighborLanPruneDlyPres, hpicfPim6RPSetEntry=hpicfPim6RPSetEntry, hpicfPim6IpMRouteNHopTStamp=hpicfPim6IpMRouteNHopTStamp, hpicfPim6IpMRouteSrcAddrType=hpicfPim6IpMRouteSrcAddrType, hpicfPim6IpMRouteInIfIndex=hpicfPim6IpMRouteInIfIndex, hpicfPim6NeighborUpTime=hpicfPim6NeighborUpTime, hpicfPim6NeighborGenIDPresent=hpicfPim6NeighborGenIDPresent, hpicfPim6CandidateRPEntry=hpicfPim6CandidateRPEntry, hpicfPim6TrapControl=hpicfPim6TrapControl, hpicfPim6IpMRouteNHopClsMHops=hpicfPim6IpMRouteNHopClsMHops, hpicfPim6IfTable=hpicfPim6IfTable, hpicfPim6ComponentBSRExpiryTime=hpicfPim6ComponentBSRExpiryTime, hpicfPim6NeighborAddressType=hpicfPim6NeighborAddressType, hpicfPim6UcastRoutingCompliance=hpicfPim6UcastRoutingCompliance, hpicfPim6NeighborEntry=hpicfPim6NeighborEntry, hpicfPim6StaticRPSetAddress=hpicfPim6StaticRPSetAddress, hpicfPim6StaticRPSetRowStatus=hpicfPim6StaticRPSetRowStatus, hpicfPim6IpMRouteNHopGroup=hpicfPim6IpMRouteNHopGroup, hpicfPim6IfNBRCount=hpicfPim6IfNBRCount, hpicfPim6DenseModeMIBCompliance=hpicfPim6DenseModeMIBCompliance, hpicfPim6NeighborGenIDValue=hpicfPim6NeighborGenIDValue, hpicfPim6NeighborDRPrioPresent=hpicfPim6NeighborDRPrioPresent, hpicfPim6ComponentBSRPriority=hpicfPim6ComponentBSRPriority, hpicfPim6CandidateRPGrpMskType=hpicfPim6CandidateRPGrpMskType, hpicfPim6Version=hpicfPim6Version, hpicfPim6RPSetExpiryTime=hpicfPim6RPSetExpiryTime, hpicfPim6NeighborLoss=hpicfPim6NeighborLoss, hpicfPim6CandidateRPGroupMask=hpicfPim6CandidateRPGroupMask, hpicfPim6IpMRouteNHopPkts=hpicfPim6IpMRouteNHopPkts, hpicfPim6CandidateRPAddressType=hpicfPim6CandidateRPAddressType, hpicfPim6RPSetGroupMaskType=hpicfPim6RPSetGroupMaskType, hpicfPim6IfDRPriority=hpicfPim6IfDRPriority, hpicfPim6IpMRouteGrpAddrType=hpicfPim6IpMRouteGrpAddrType, hpicfPim6CandidateRPAddress=hpicfPim6CandidateRPAddress, hpicfPim6IfDR=hpicfPim6IfDR, hpicfPim6IpMRouteNHopAddrType=hpicfPim6IpMRouteNHopAddrType, hpicfPim6StaticRpfExtensionsGroup=hpicfPim6StaticRpfExtensionsGroup, hpicfPim6IfAddressType=hpicfPim6IfAddressType, hpicfPim6IpMRouteDiffInIfPkts=hpicfPim6IpMRouteDiffInIfPkts, hpicfPim6IfAddress=hpicfPim6IfAddress, hpicfPim6RPSetHoldTime=hpicfPim6RPSetHoldTime, hpicfPim6IfGraftRetryInterval=hpicfPim6IfGraftRetryInterval, hpicfPim6IpMRouteNHopOctets=hpicfPim6IpMRouteNHopOctets, hpicfPim6CandidateRPRowStatus=hpicfPim6CandidateRPRowStatus, hpicfPim6ComponentBSRUpTime=hpicfPim6ComponentBSRUpTime, hpicfPim6IpMRouteNHopExpTime=hpicfPim6IpMRouteNHopExpTime, hpicfPim6Groups=hpicfPim6Groups, hpicfPim6IpMRouteTimeStamp=hpicfPim6IpMRouteTimeStamp, hpicfPim6GlobalCounterGroup=hpicfPim6GlobalCounterGroup, hpicfPim6IpMRouteNHopSrcPLen=hpicfPim6IpMRouteNHopSrcPLen, hpicfPim6IpMRouteNHopProtocol=hpicfPim6IpMRouteNHopProtocol, hpicfPim6NumStaticRpfEntries=hpicfPim6NumStaticRpfEntries, hpicfPim6NeighborGroup=hpicfPim6NeighborGroup, hpicfPim6IfNegotiatedPropagationDelay=hpicfPim6IfNegotiatedPropagationDelay, hpicfPim6SGEntries=hpicfPim6SGEntries, hpicfPim6IfMode=hpicfPim6IfMode, hpicfPim6InterfaceInfoCompliance=hpicfPim6InterfaceInfoCompliance, hpicfPim6IpMRouteNHopAddress=hpicfPim6IpMRouteNHopAddress, hpicfPim6IpMRouteTtlDropPkts=hpicfPim6IpMRouteTtlDropPkts, hpicfPim6IfMaxGraftRetries=hpicfPim6IfMaxGraftRetries, hpicfPim6CandidateRPGroup=hpicfPim6CandidateRPGroup, hpicfPim6IpMRouteSource=hpicfPim6IpMRouteSource, hpicfPim6ComponentGroup=hpicfPim6ComponentGroup, hpicfPim6IpMRouteNHopState=hpicfPim6IpMRouteNHopState, hpicfPim6ComponentBSRAddrType=hpicfPim6ComponentBSRAddrType, hpicfPim6IfSRCapable=hpicfPim6IfSRCapable)
