#
# PySNMP MIB module HPN-ICF-DOT11-CFG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOT11-CFG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
HpnicfDot11RadioType, HpnicfDot11CirMode, HpnicfDot11SecIEStatusType, HpnicfDot11RadioType2, HpnicfDot11TunnelSecSchemType, HpnicfDot11PreambleType, HpnicfDot11AuthenType, hpnicfDot11APElementIndex, HpnicfDot11RadioElementIndex, HpnicfDot11SSIDStringType, HpnicfDot11TxPwrLevelScopeType, HpnicfDot11ChannelScopeType, HpnicfDot11ServicePolicyIDType, HpnicfDot11ObjectIDType, HpnicfDot11RadioScopeType, hpnicfDot11, HpnicfDot11SSIDEncryptModeType, HpnicfDot11TruthValueCM, HpnicfDot11WorkMode = mibBuilder.importSymbols("HPN-ICF-DOT11-REF-MIB", "HpnicfDot11RadioType", "HpnicfDot11CirMode", "HpnicfDot11SecIEStatusType", "HpnicfDot11RadioType2", "HpnicfDot11TunnelSecSchemType", "HpnicfDot11PreambleType", "HpnicfDot11AuthenType", "hpnicfDot11APElementIndex", "HpnicfDot11RadioElementIndex", "HpnicfDot11SSIDStringType", "HpnicfDot11TxPwrLevelScopeType", "HpnicfDot11ChannelScopeType", "HpnicfDot11ServicePolicyIDType", "HpnicfDot11ObjectIDType", "HpnicfDot11RadioScopeType", "hpnicfDot11", "HpnicfDot11SSIDEncryptModeType", "HpnicfDot11TruthValueCM", "HpnicfDot11WorkMode")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, TimeTicks, Gauge32, iso, Unsigned32, Counter64, ObjectIdentity, ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "TimeTicks", "Gauge32", "iso", "Unsigned32", "Counter64", "ObjectIdentity", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32")
TruthValue, TextualConvention, DateAndTime, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DateAndTime", "RowStatus", "DisplayString", "MacAddress")
hpnicfDot11CFG = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4))
hpnicfDot11CFG.setRevisions(('2010-09-25 18:00', '2010-09-02 18:00', '2009-07-29 18:00', '2009-05-07 20:00', '2009-03-20 15:30', '2008-11-07 15:30', '2008-07-09 18:00', '2008-02-25 18:00', '2007-12-21 18:00', '2007-10-09 16:55', '2007-06-19 18:00', '2007-04-27 20:00', '2007-02-01 20:00', '2006-05-10 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfDot11CFG.setRevisionsDescriptions(('Modified to remove some issue.', 'Modified to add new node.', 'Modified to add new nodes and new table.', 'Modified to add new nodes and new table.', 'Modified to add new value for appointed node.', 'Modified to add new nodes and new table.', 'Modified to add new groups.', 'Modified to add new nodes.', 'Modified to add new nodes.', 'changed for new requirements', 'Modified to add new table.', 'Modified to fix some issue.', 'Modified to support fat AP.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfDot11CFG.setLastUpdated('201009251800Z')
if mibBuilder.loadTexts: hpnicfDot11CFG.setOrganization('')
if mibBuilder.loadTexts: hpnicfDot11CFG.setContactInfo('')
if mibBuilder.loadTexts: hpnicfDot11CFG.setDescription('This MIB provides information about WLAN configuration. GLOSSARY IEEE 802.11 Standard to encourage interoperability among wireless networking equipment. Access point (AP) Transmitter/receiver (transceiver) device that commonly connects and transports data between a wireless network and a wired network. Access control (AC) To control and manage multi-APs, it will bridge wireless and wired network. Fat AP Applied in the home, SOHO and so on, and it could work independently without help from AC. Fit AP Applied in the enterprise environment, it will work under the control and management from AC. Control And Provisioning of Wireless Access Points Protocol The short name of protocol is CAPWAP. AC will control and manage AP by CAPWAP tunnel protocol defined by IETF. Also, a data tunnel will be set up between AC and AP. BSS IEEE 802.11 Basic Service Set (Radio Cell). The BSS of an AP comprises of the stations directly associating with the AP. Radio The chip set to receive and send wireless signal. Association The service used to establish access point or station mapping and enable station invocation of the distribution system services. (Wireless clients attempt to connect to access points.) Basic Rate A data rate that is mandatory for client devices to support in order for them to achieve successful association. MSDU MAC Service Data Unit, it is frame format defined by 802.11. TU It is 1,024 microseconds (ms), which is about 1 millisecond. AKM The authentication and key management method defined by 802.11i, and which includes 802.1x and pre-shared key.')
hpnicfDot11GlobeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1))
hpnicfDot11PolicyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2))
hpnicfDot11APConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3))
hpnicfDot11RadioIntfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4))
hpnicfDot11DataRateConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5))
hpnicfDot11InterfaceConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6))
hpnicfDot11ACBackupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 7))
hpnicfDot11RadioElementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8))
hpnicfDot11CfgNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9))
hpnicfDot11GlobalCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11GlobalCountryCode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11GlobalCountryCode.setDescription('Represents the country code for wireless network.')
hpnicfDot11StaKeepALiveTimerIntvl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 2), Unsigned32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11StaKeepALiveTimerIntvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaKeepALiveTimerIntvl.setDescription('Represents the interval of the keep alive requests sent between AP and STA. Default value 0 : The keep alive function is disabled.')
hpnicfDot11StaIdleTimerIntvl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 3), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11StaIdleTimerIntvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaIdleTimerIntvl.setDescription('Represents the interval for which the link between AP and STA ( power-save or awake ) can be idle.')
hpnicfDot11BroadcastProbeReply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11BroadcastProbeReply.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BroadcastProbeReply.setDescription("Represents enable the AP to reply broadcast probe or not. 'true' : The AP to reply broadcast probe is enabled. 'false': The AP to reply broadcast probe is disabled")
hpnicfDot11APScanMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APScanMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APScanMode.setDescription('Represents the scanning mode for AP. The following values are supported: active - AP will actively do scan. passive - AP will passively do scan.')
hpnicfDot11ACCtrlTunnelSecSupport = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 6), HpnicfDot11TunnelSecSchemType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11ACCtrlTunnelSecSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACCtrlTunnelSecSupport.setDescription('Represents what security schemes are supported for CAPWAP Control tunnel.')
hpnicfDot11ACDataTunnelSecSupport = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 7), HpnicfDot11TunnelSecSchemType().clone('cleartxt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11ACDataTunnelSecSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACDataTunnelSecSupport.setDescription('Represents what security schemes are supported for CAPWAP data tunnel. The cleartxt is the default scheme.')
hpnicfDot11ACAutoAPSupport = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11ACAutoAPSupport.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACAutoAPSupport.setDescription("Represents enable the auto AP functionality or not. 'true' : The auto AP functionality is enabled. 'false': The auto AP functionality is disabled")
hpnicfDot11AutoAPName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11AutoAPName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AutoAPName.setDescription('Represents the name of auto AP that needs to be made persistent. When read the value from the node, NULL value be returned.')
hpnicfDot11PersistentName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11PersistentName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PersistentName.setDescription('Represents the new name of auto AP after being made persistent. When read the value from the node, NULL value be returned.')
hpnicfDot11IntfTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 11), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11IntfTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11IntfTrapThreshold.setDescription('Represents threshold of interference trap. If signal strength of the device exceeds this threshold, corresponding trap will be sent.')
hpnicfDot11MonitorInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 15), ))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11MonitorInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MonitorInterval.setDescription('Represents the monitoring interval. Default value 0 : The monitoring functionality is changed to real-time mode.')
hpnicfDot11SampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 300), ))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SampleInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SampleInterval.setDescription('Represents the sampling interval. Default value 0 : The sampling functionality is disabled.')
hpnicfDot11ChnlSwitChkInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8, 180)).clone(8)).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11ChnlSwitChkInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ChnlSwitChkInterval.setDescription('Represents the checking interval of channel switch.')
hpnicfDot11APUserUplimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APUserUplimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserUplimit.setDescription('Represents the upper limit of user which has access to this AP.')
hpnicfDot11APL2IsolateEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APL2IsolateEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APL2IsolateEnable.setDescription("Represents enable the layer2 isolation or not. 'true' : The layer2 isolation functionality is enabled. 'false': The layer2 isolation functionality is disabled.")
hpnicfDot11APBSSIDSupportNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APBSSIDSupportNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APBSSIDSupportNum.setDescription('Represents the max number of BSSID supported by Current AP.')
hpnicfDot11APLastUpdateStatTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APLastUpdateStatTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLastUpdateStatTime.setDescription('Represents date and time update statistic information lately.')
hpnicfDot11APDoSProtectEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APDoSProtectEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDoSProtectEnable.setDescription("Represents enable the DOS protection or not. 'true' : The DOS protection functionality is enabled. 'false': The DOS protection functionality is disabled.")
hpnicfDot11MaxAPPerIf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11MaxAPPerIf.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MaxAPPerIf.setDescription('Represents max AP number that can be connected to AC interface.')
hpnicfDot11SampleTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11SampleTimeStamp.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SampleTimeStamp.setDescription('Represents the start time of current sample period.')
hpnicfDot11UplinkTrackId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11UplinkTrackId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11UplinkTrackId.setDescription('Represents the track id of AP. Default value 0 : The uplink track function for AP is disabled.')
hpnicfDot11RtCollectSwitch = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 23), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RtCollectSwitch.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RtCollectSwitch.setDescription('This object is used to turn on/off real-time statistics collection between AC and AP. If the value is true, hpnicfDot11RtCollectIntvl will take effect. Otherwise, hpnicfDot11RglCollectIntvl will take effect.')
hpnicfDot11RglCollectIntvl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 24), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RglCollectIntvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RglCollectIntvl.setDescription('This object represents interval to regularly collect statistics from AC to AP.')
hpnicfDot11RtCollectIntvl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 25), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RtCollectIntvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RtCollectIntvl.setDescription('This object represents interval to collect real-time statistics from AC to AP.')
hpnicfDot11AllAPCpuUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11AllAPCpuUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllAPCpuUsageThreshold.setDescription('The CPU usage threshold for all AP.')
hpnicfDot11AllAPMemUsageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11AllAPMemUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllAPMemUsageThreshold.setDescription('The memory usage threshold for all AP.')
hpnicfDot11AdjIntfTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 28), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11AdjIntfTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AdjIntfTrapThreshold.setDescription('Represents threshold of adjacent interference trap. If signal strength of the device exceeds this threshold, corresponding trap will be sent.')
hpnicfDot11AllAPMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11AllAPMonitorMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AllAPMonitorMode.setDescription('Represents what work mode for All AP. The following values are supported: normal, - AP will supply WLAN service. monitor - AP will be a monitor to find attack. hybrid - AP will supply WLAN service and Device detection is enabled.')
hpnicfDot11GlobalApFmwUpdState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11GlobalApFmwUpdState.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11GlobalApFmwUpdState.setDescription('Represents the status of version auto-update for an AP. The following values are supported: enable - AP version will be updated automatically. disable - AP version will not be updated automatically.')
hpnicfDot11ACNasIDCM = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 1, 31), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11ACNasIDCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ACNasIDCM.setDescription('Represents the NAS-ID of current AC.')
hpnicfDot11RadioPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1), )
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyTable.setDescription('The table defines the parameters for radio policy, as per radio policy of CLI. One radio policy could be assigned to the different radios (AP).')
hpnicfDot11RadioPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1), ).setIndexNames((1, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioPolicyName"))
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyEntry.setDescription('Each entry contains information of each radio policy.')
hpnicfDot11RadioPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyName.setDescription('Represents the name of radio policy.')
hpnicfDot11BeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 2), Integer32().clone(100)).setUnits('TU').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11BeaconInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BeaconInterval.setDescription('Represents the interval for Beacon management frame.')
hpnicfDot11DtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11DtimInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DtimInterval.setDescription('Represents the number of beacon intervals that shall elapse between transmission of Beacons frames containing a Traffic Indication Map (TIM) element whose DTIM Count field is 0. This value is transmitted in the Delivery TIM (DTIM) Period field of Beacon frames.')
hpnicfDot11RtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 4), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RtsThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RtsThreshold.setDescription('Represents the current minimum size, in octets, of the MAC protocol data unit (MPDU), below which a Request to send/Clear to send (RTS/CTS) handshake shall not be performed.')
hpnicfDot11FragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 5), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11FragThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11FragThreshold.setDescription('Represents the current maximum size, in octets, of the MPDU that may be delivered to the PHY. A MSDU shall be broken into fragments if its size exceeds the value of this attribute after adding MAC headers and trailers.')
hpnicfDot11ShortRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 6), Integer32().clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11ShortRetryThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ShortRetryThreshold.setDescription('Represents the maximum number of transmission attempts of a frame, the length of which is less than or equal to hpnicfDot11RTSThreshold, which shall be made before a failure condition is indicated.')
hpnicfDot11LongRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 7), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11LongRetryThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11LongRetryThreshold.setDescription('Represents the maximum number of transmission attempts of a frame, the length of which is longer than hpnicfDot11RTSThreshold, that shall be made before a failure condition is indicated.')
hpnicfDot11MaxRxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 8), Unsigned32().clone(2000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11MaxRxLifetime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MaxRxLifetime.setDescription('Represents the elapsed time. After the time specified by hpnicfDot11MaxRxLifetime, the further attempts to reassemble the MSDU shall be terminated.')
hpnicfDot11RdoPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RdoPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RdoPolicyRowStatus.setDescription('The status of this table entry.')
hpnicfDot11RdoClientMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RdoClientMaxCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RdoClientMaxCount.setDescription('Represent the maximum number of stations supported by this radio policy.')
hpnicfDot11BeaconIntervalMs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 1, 1, 11), Integer32()).setUnits('ms').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11BeaconIntervalMs.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BeaconIntervalMs.setDescription('Represents the interval for Beacon management frame.')
hpnicfDot11ServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2), )
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyTable.setDescription('The table defines the parameters for ESS, as per service policy of CLI. One service policy could be assigned to the different radios (AP).')
hpnicfDot11ServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ServicePolicyID"))
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyEntry.setDescription('Each entry contains information of each service policy.')
hpnicfDot11ServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 1), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyID.setDescription('Represents the ID of each service policy.')
hpnicfDot11SSIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 2), HpnicfDot11SSIDStringType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SSIDName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSIDName.setDescription('Represents the ESS. As per CLI, the value of service policy name will be SSID.')
hpnicfDot11SSIDHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SSIDHidden.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSIDHidden.setDescription('This attribute controls whether the SSID will be advertised in the beacon frame. If it is true, then SSID will not be advertised in the beacon frame.')
hpnicfDot11AuthenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 4), HpnicfDot11AuthenType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11AuthenMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AuthenMode.setDescription('Represents the Authentication mode defined by 802.11.')
hpnicfDot11SSIDEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 5), HpnicfDot11SSIDEncryptModeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SSIDEncryptionMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSIDEncryptionMode.setDescription('Represents the encryption mode for this ESS.')
hpnicfDot11WlanInfBindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 6), OctetString().clone('WLAN-ESS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanInfBindingType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanInfBindingType.setDescription('Represents the service policy will bind to what kind of data forwarding interface.')
hpnicfDot11WlanInfBindingID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanInfBindingID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanInfBindingID.setDescription('Represents the interface ID of the interface that ESS will bind to. If the value is set to -1, the binding will be removed.')
hpnicfDot11SrvPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyRowStatus.setDescription('The status of this table entry.')
hpnicfDot11ClientMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11ClientMaxCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ClientMaxCount.setDescription('Represent the maximum number of stations supported by this service policy.')
hpnicfDot11SPInCirMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 10), HpnicfDot11CirMode().clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPInCirMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPInCirMode.setDescription(' CIR(committed information rate) mode of inbound direction. This object is useful only when the corresponding CIR is nonzero. If value of this object is changed, corresponding CIR will be reset.')
hpnicfDot11SPInCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 11), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPInCirValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPInCirValue.setDescription('Represents the CIR of inbound direction of this service policy. If the value is 0, it means that no flow control is applied to the service policy, and the corresponding CIR mode is meaningless.')
hpnicfDot11SPOutCirMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 12), HpnicfDot11CirMode().clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPOutCirMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPOutCirMode.setDescription(' CIR(committed information rate) mode of outbound direction. This object is useful only when the corresponding CIR is nonzero. If value of this object is changed, corresponding CIR will be reset.')
hpnicfDot11SPOutCirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 13), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPOutCirValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPOutCirValue.setDescription('Represents the CIR of outbound direction of this service policy. If the value is 0, it means that no flow control is applied to the service policy, and the corresponding CIR mode is meaningless.')
hpnicfDot11WlanInfPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 14), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanInfPVID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanInfPVID.setDescription('Represents the VLAN ID of SSID.')
hpnicfDot11SPInCirStaticValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 15), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPInCirStaticValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPInCirStaticValue.setDescription('Represents the CIR of inbound direction for static CIR mode.')
hpnicfDot11SPOutCirStaticValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 16), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPOutCirStaticValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPOutCirStaticValue.setDescription('Represents the CIR of outbound direction for static CIR mode.')
hpnicfDot11SPIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPIsolate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPIsolate.setDescription('If it is true, then stations connected with the service policy are isolated.')
hpnicfDot11WlanexAuthServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanexAuthServerIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanexAuthServerIP.setDescription('Represents the IP address of the Wlanex Authentication server')
hpnicfDot11SPBeaconMeasEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPBeaconMeasEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPBeaconMeasEnable.setDescription('If it is true, then beacon-measurement is enabled.')
hpnicfDot11SPBeaconMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passive", 1), ("active", 2), ("beaconTable", 3))).clone('beaconTable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPBeaconMeasType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPBeaconMeasType.setDescription('Represents what the work mode for BeaconMeasurement type. The following values are supported: passive, - BeaconMeasurement will use the passive type. active - BeaconMeasurement will use the active type. beaconTable - BeaconMeasurement will use the beacon table type.')
hpnicfDot11SPBeaconMeasInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200)).clone(60)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPBeaconMeasInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPBeaconMeasInterval.setDescription('Represents the beacon-measurement interval.')
hpnicfDot11AuthenModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("opensystem", 0), ("sharedkey", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11AuthenModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11AuthenModeCM.setDescription('Represents the Authentication mode defined by 802.11.')
hpnicfDot11SecIEStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("wpa", 1), ("wpa2", 2), ("wlanex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SecIEStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecIEStatusCM.setDescription('To enable the security Information element in the beacon and probe response frames sent by AP.')
hpnicfDot11SecurityCiphersCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("wep40", 1), ("wep104", 2), ("tkip", 3), ("aesccmp", 4), ("wpisms4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SecurityCiphersCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecurityCiphersCM.setDescription('The WLAN system support the following cipher type for data frame encryption. none wep40 wep104 tkip aesccmp wpi-SMS4 When the value of node equals to zero, it means no configuration or undo operation.')
hpnicfDot11SrvPolicyStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyStatusCM.setDescription('The status of the Service Policy.')
hpnicfDot11SSIDHiddenCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 26), HpnicfDot11TruthValueCM().clone('dot11false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SSIDHiddenCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSIDHiddenCM.setDescription('This attribute controls whether the SSID will be advertised in beacon frames. If it is dot11true, the SSID will not be advertised in beacon frames.')
hpnicfDot11SPIsolateCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 2, 1, 27), HpnicfDot11TruthValueCM().clone('dot11false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SPIsolateCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPIsolateCM.setDescription('If it is dot11true, the clients connected with the service policy are isolated to each other.')
hpnicfDot11ServicePolicyExtTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3), )
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyExtTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyExtTable.setDescription('The table defines the parameters for ESS, as per service policy of CLI. When the value of hpnicfDot11SSIDEncryptionMode equals to cipher(2), more configuration for a ESS will be put into the table.')
hpnicfDot11ServicePolicyExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ServicePolicyExtID"))
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyExtEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyExtEntry.setDescription('Each entry contains information of each service policy under cipher(2) mode.')
hpnicfDot11ServicePolicyExtID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 1), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyExtID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServicePolicyExtID.setDescription('Represents the ID of each service policy.')
hpnicfDot11SecIEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 2), HpnicfDot11SecIEStatusType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SecIEStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecIEStatus.setDescription('To enable the security Information element in the beacon and probe response frames sent by AP.')
hpnicfDot11SecurityCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SecurityCiphers.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecurityCiphers.setDescription('The WLAN system support the following cipher type for data frame encryption. wep40(2) tkip(4) aesccmp(16) wep104(32) wpisms4(64) wep128(128) For each service policy, it could support multiple cipher types at the same time. So the value of object could combine multiple value of cipher type above. When the value of node equals to zero, it means no configuration or undo operation.')
hpnicfDot11CipherKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 4), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11CipherKeyIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CipherKeyIndex.setDescription('Represents the key index of cipher key for packet. When hpnicfDot11SecurityCiphers value is wep40 or wep104, the configuration will take effective.')
hpnicfDot11CipherKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11CipherKey.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CipherKey.setDescription('Represents the cipher key for packet. When hpnicfDot11SecurityCiphers value is wep40 or wep104, the configuration will take effective.')
hpnicfDot11SrvPolicyExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyExtRowStatus.setDescription('The status of this table entry.')
hpnicfDot11CipherKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("char", 1), ("hex", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11CipherKeyType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CipherKeyType.setDescription('Represents the cipher key type of hpnicfDot11CipherKey.')
hpnicfDot11RadioPolicyExtTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4), )
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyExtTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyExtTable.setDescription("The table defines the radio policy of each radio. It can't be modified if the radio policy is a default radio policy.")
hpnicfDot11RadioPolicyExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RPAPSerialID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RPRadioID"))
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyExtEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioPolicyExtEntry.setDescription('Each entry contains information of each radio policy.')
hpnicfDot11RPAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11RPAPSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPAPSerialID.setDescription('This object represents the Serial ID of AP.')
hpnicfDot11RPRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 2), HpnicfDot11RadioScopeType())
if mibBuilder.loadTexts: hpnicfDot11RPRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPRadioID.setDescription('This object represents each radio.')
hpnicfDot11RPBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 3), Integer32().clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPBeaconInterval.setDescription('This object represents the interval for Beacon management frame.')
hpnicfDot11RPDtimInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 4), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPDtimInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPDtimInterval.setDescription('This object represents the number of beacon intervals that shall elapse between transmissions of Beacons frames containing a Traffic Indication Map (TIM) element whose DTIM count field is 0. This value is transmitted in the Delivery TIM (DTIM) Period field of Beacon frames.')
hpnicfDot11RPRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 5), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPRtsThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPRtsThreshold.setDescription('This object represents the current minimum size, in octets, of the MAC protocol data unit (MPDU), below which a Request to send/Clear to send (RTS/CTS) handshake shall not be performed.')
hpnicfDot11RPFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 6), Integer32().clone(2346)).setUnits('byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPFragThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPFragThreshold.setDescription('This object represents the current maximum size, in octets, of the MPDU that may be delivered to the PHY. A MSDU shall be broken into fragments if its size exceeds the value of this attribute after adding MAC headers and trailers.')
hpnicfDot11RPShortRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 7), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPShortRetryThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPShortRetryThreshold.setDescription('This object represents the maximum number of transmission attempts of a frame, the length of which is less than or equal to hpnicfDot11RTSThreshold, that shall be made before a failure condition is indicated.')
hpnicfDot11RPLongRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPLongRetryThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPLongRetryThreshold.setDescription('This object represents the maximum number of transmission attempts of a frame, the length of which is longer than hpnicfDot11RTSThreshold, and that shall be made before a failure condition is indicated.')
hpnicfDot11RPClientMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPClientMaxCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPClientMaxCount.setDescription('This object represents the maximum number of stations supported by this radio policy.')
hpnicfDot11RPBeaconIntervalCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 4, 1, 10), Integer32().clone(100)).setUnits('timeunit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RPBeaconIntervalCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RPBeaconIntervalCM.setDescription('This object represents beacon interval.')
hpnicfDot11SrvPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5), )
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityTable.setDescription('This table defines the WLAN security status for ESS, BSS and WLAN-Ethernet interface which binding the crypto service-template. Otherwise, when binding the clear service-template, hpnicfPortSecurityTables should be used to configure port security.')
hpnicfDot11SrvPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SecurityServicePolicyID"))
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityEntry.setDescription('There is a row in this table for service policy.')
hpnicfDot11SecurityServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1, 1), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11SecurityServicePolicyID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecurityServicePolicyID.setDescription('Represents the ID of each service policy.')
hpnicfDot11SrvPortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noRestrictions", 1), ("userLoginSecureExt", 2), ("psk", 3), ("macAddressAndPsk", 4), ("userLoginSecureExtOrPsk", 5), ("ext", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityMode.setDescription("Determines the security modes of the WLAN port. noRestrictions The default value, no any security mode is set. userLoginSecureExt Access to the port is denied until the port client is authorized (by 802.1X). psk Access to the port is denied until the port client is authorized (by 802.1X key negotiation). macAddressAndPsk The MAC address is first authenticated and only if this succeeds does the psk then attempt user authentication. userLoginSecureExtOrPsk This selects both the userLoginSecureExt and psk modes together such that either is allowed to authorized access. Which mode works for client depends on the client's choice. ext Access to the port is denied until the port client is authenticated (by ext).")
hpnicfDot11SrvSecurityKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLoginTxKeyTypeNone", 1), ("userLoginTxKeyTypeDot11Key", 2), ("userLoginTxKeyTypeRsaRC4Key", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SrvSecurityKeyType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvSecurityKeyType.setDescription('This indicates the key type in the 802.1X EAPOL_Key packet. userLoginTxKeyTypeNone - This means the key type is not set yet. userLoginTxKeyTypeDot11Key - This selects the 802.11 key type. userLoginTxKeyTypeRsaRC4Key - This selects the RC4 key for RSA RC4 session encryption.')
hpnicfDot11SrvSecurityPskKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pskKeyModeNone", 1), ("pskKeyModePassPhrase", 2), ("pskKeyModeRawKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SrvSecurityPskKeyMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvSecurityPskKeyMode.setDescription("This is the password input mode. When input as pskKeyModePassPhrase, hpnicfDot11SrvSecurityPskKeyString must be 8 to 63 characters; when input as pskKeyModeRawKey, hpnicfDot11SrvSecurityPskKeyString must be 64 characters and each character must be '0'-'9', 'a'-'f' and 'A'-'F'.")
hpnicfDot11SrvSecurityPskKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SrvSecurityPskKeyString.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvSecurityPskKeyString.setDescription('This is the password string used for psk authentication.')
hpnicfDot11SrvPortSecurityModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("psk", 1), ("radius", 2), ("wlanex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPortSecurityModeCM.setDescription('Determines the security modes of the WLAN port. none - The default value, no any security mode is set. psk - Access to the port is denied until the port client is authorized (by 802.1X key negotiation). radius - Access to the port is denied until the port client is authorized (by 802.1X). wlanex - Access to the port is denied until the port client is authenticated by wlan cert.')
hpnicfDot11SrvPolicyExtendTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 6), )
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyExtendTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyExtendTable.setDescription('The table defines the parameters of each service policy.')
hpnicfDot11SrvPolicyExtendEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ServicePolicyID"))
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyExtendEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvPolicyExtendEntry.setDescription('Each entry contains information of each service policy.')
hpnicfDot11SPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SPEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SPEnable.setDescription('Represents whether the service policy is enabled.')
hpnicfDot11APTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1), )
if mibBuilder.loadTexts: hpnicfDot11APTemplateTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemplateTable.setDescription('By AP template CLI, administrator will configure the parameters of AP by convenience. Before AP boot up and connect to AC by CAPWAP tunnel, administrator will create AP template for each AP. When AP connect to AC, AC will assign configuration to AP by hpnicfDot11APSerialID information in AP template.')
hpnicfDot11APTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11APTemplateName"))
if mibBuilder.loadTexts: hpnicfDot11APTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemplateEntry.setDescription('Each entry contains configuration information for each AP.')
hpnicfDot11APTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11APTemplateName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemplateName.setDescription('Represents the name of AP template.')
hpnicfDot11APSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSerialID.setDescription('Represents AP serial id.')
hpnicfDot11TemplateAPModelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11TemplateAPModelAlias.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11TemplateAPModelAlias.setDescription('Represents the alias of AP model name.')
hpnicfDot11Description = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11Description.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11Description.setDescription('This attribute will give more information about AP. Administrator could suggest the location, owner or other information for each AP. If the value is set to NULL, the description will be removed.')
hpnicfDot11APWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APWorkMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APWorkMode.setDescription('Represents what work mode for AP. The following values are supported: normal - AP will supply WLAN service. monitor - AP will be a monitor to find attack. hybrid - AP will supply WLAN service and Device detection is enabled.')
hpnicfDot11APTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemplateRowStatus.setDescription('The status of this table entry.')
hpnicfDot11APName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APName.setDescription('Represents the AP name.')
hpnicfDot11StatisInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 8), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11StatisInterv.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StatisInterv.setDescription('Represents the interval of radio statistic.')
hpnicfDot11APBroadcastProbeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APBroadcastProbeReply.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APBroadcastProbeReply.setDescription("Represents enable the AP to reply broadcast probe or not. 'true' : The AP to reply broadcast probe is enabled. 'false': The AP to reply broadcast probe is disabled")
hpnicfDot11StaIdleTimerInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 10), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11StaIdleTimerInterv.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaIdleTimerInterv.setDescription('Represents the interval for which the link between AP and STA ( power-save or awake ) can be idle.')
hpnicfDot11StaKeepAliveTimerInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 11), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11StaKeepAliveTimerInterv.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StaKeepAliveTimerInterv.setDescription('Represents the interval of the keep alive requests sent between AP and STA.')
hpnicfDot11APCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 12), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCir.setDescription('Represents the committed information rate between AP and AC.')
hpnicfDot11APCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 13), Integer32()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APCbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCbs.setDescription('Represents the committed burst size between AP and AC.')
hpnicfDot11APPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APPriorityLevel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APPriorityLevel.setDescription('This object represents the connection priority for the AP. If the connection priority is 7, the AC is considered as the primary AC for the AP.')
hpnicfDot11APElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11APElementID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APElementID.setDescription('This object represents the AP element ID.')
hpnicfDot11APDevDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APDevDetectEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APDevDetectEnable.setDescription("Represents whether device detection is enabled or not. 'true' : Device detection is enabled. 'false': Device detection is disabled. If device detection is enabled, the AP will provide both device detection and WLAN data services. By default, the AP only provides WLAN data services. When an AP works in monitor mode, that is, the value of object hpnicfDot11APWorkMode is monitor, device detection can not be enabled with object hpnicfDot11APDevDetectEnable.")
hpnicfDot11APGetIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpAlloc", 1), ("static", 2))).clone('dhcpAlloc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APGetIPMethod.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APGetIPMethod.setDescription('This object represents the method how AP gets IP address.')
hpnicfDot11StatisIntervMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("realtime", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11StatisIntervMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StatisIntervMode.setDescription('This object represents the mode of statics interval. normal - statics interval value between 10s to 120s realtime - statics interval value between 2s to 5s')
hpnicfDot11ApTrapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 19), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11ApTrapEnabled.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApTrapEnabled.setDescription("Represents whether the trap status is enabled or not. 'true' : Enable the trap status; 'false' : Disable the trap status.")
hpnicfDot11ApFmwUpdState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("inherit", 3))).clone('inherit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11ApFmwUpdState.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApFmwUpdState.setDescription('Represents the status of version auto-update for an AP. The following values are supported: enable - AP version will be updated automatically. disable - AP version will not be updated automatically. inherit - The status will inherit value from apgroup-view or system-view.')
hpnicfDot11StatisIntervModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11StatisIntervModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11StatisIntervModeCM.setDescription('This object represents the mode of statistic interval. off - statistic interval value between 10s to 120s on - statistic interval value between 2s to 5s')
hpnicfDot11ApNasIDCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 1, 1, 22), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11ApNasIDCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ApNasIDCM.setDescription('Represents the NAS-ID of current service policy for each specific radio of AP.')
hpnicfDot11RadioToConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2), )
if mibBuilder.loadTexts: hpnicfDot11RadioToConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioToConfigTable.setDescription('Before AP connects to AC, administrator will configure radio parameter to each radio.')
hpnicfDot11RadioToConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11APTemplateNameCfg"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11CfgRadioID"))
if mibBuilder.loadTexts: hpnicfDot11RadioToConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioToConfigEntry.setDescription('Each entry contains configuration information for each radio.')
hpnicfDot11APTemplateNameCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11APTemplateNameCfg.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APTemplateNameCfg.setDescription('Represents the name of AP template.')
hpnicfDot11CfgRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 2), HpnicfDot11RadioScopeType())
if mibBuilder.loadTexts: hpnicfDot11CfgRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRadioID.setDescription('Represents each radio.')
hpnicfDot11CfgRadioPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgRadioPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRadioPolicyName.setDescription('Represents the name of radio policy.')
hpnicfDot11CfgRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 4), HpnicfDot11RadioType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgRadioType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRadioType.setDescription('Represents the radio will work with which 802.11 radio type.')
hpnicfDot11CfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 5), HpnicfDot11ChannelScopeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgChannel.setDescription('Represents the channel allocation of radio.')
hpnicfDot11CfgMaxTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 6), HpnicfDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgMaxTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgMaxTxPowerLevel.setDescription('Represents the maximal transmit power scope for AP.')
hpnicfDot11PreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 7), HpnicfDot11PreambleType().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11PreambleLen.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PreambleLen.setDescription('Represents whether use long or short preamble for 802.11 MAC frame. When hpnicfDot11CfgRadioType is either dot11b or dot11g, then value for hpnicfDot11PreambleLen will be valid. Otherwise, the value for it will be invalid.')
hpnicfDot11CfgRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgRadioStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRadioStatus.setDescription('Represents the radio admin status whether is enabled or disabled.')
hpnicfDot11CfgRdElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CfgRdElementID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRdElementID.setDescription('Represents the element ID of this radio. It comprises two parts. The highest 24 bits are AP element ID and the lowest 8 bits are radio ID.')
hpnicfDot11CfgWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 10), HpnicfDot11WorkMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgWorkMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgWorkMode.setDescription('Represents work mode of the radio.')
hpnicfDot11CfgPwrAttValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgPwrAttValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgPwrAttValue.setDescription('Represents the value of power attenuation.')
hpnicfDot11RadioTxArithmetic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quality", 1), ("bandwidth", 2))).clone('quality')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioTxArithmetic.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioTxArithmetic.setDescription('Represents the transmission arithmetic of the radio. The following values are supported: quality - Consider the quality first during the transmission. bandwidth - Consider the bandwidth first during the transmission.')
hpnicfDot11CfgChannelLockStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgChannelLockStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgChannelLockStat.setDescription('Represents locked status of channel on the radio.')
hpnicfDot11CfgPowerLockStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2))).clone('unlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgPowerLockStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgPowerLockStat.setDescription('Represents locked status of power on the radio.')
hpnicfDot11CfgLBRdGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgLBRdGroupId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgLBRdGroupId.setDescription('Represents the load balance group ID allocated for the radio.')
hpnicfDot11CfgRRMSDRdGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgRRMSDRdGroupId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRRMSDRdGroupId.setDescription('Represents the RRM self-decisive group ID allocated for the radio.')
hpnicfDot11CfgRadioType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 17), HpnicfDot11RadioType2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgRadioType2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgRadioType2.setDescription('Represents the radio will work with which 802.11 radio type.')
hpnicfDot11CfgIDSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgIDSEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgIDSEnable.setDescription('Represents whether intrusion detection is enabled for this radio.')
hpnicfDot11CfgSaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgSaEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgSaEnable.setDescription('Represents whether spectrum analysis is enabled.')
hpnicfDot11CfgSaCltRtFFTData = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgSaCltRtFFTData.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgSaCltRtFFTData.setDescription('Represents whether to collect real-time FFT data for this radio.')
hpnicfDot11CfgSaBand = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot11g", 1), ("dot11aLower", 2), ("dot11aMiddle", 3), ("dot11aUpper", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11CfgSaBand.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgSaBand.setDescription('Represents which band of channels will be monitored when collection real-time FFT data is enabled for this radio. Detection of interference devices and air quality will also be affected. Each band responds to the following channels. dot11g (Channels 1-14) dot11aLower (channels 36-64) dot11aMiddle (channels 100-140) dot11aUpper (channels 149-165).')
hpnicfDot11APServiceSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 3), )
if mibBuilder.loadTexts: hpnicfDot11APServiceSetTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceSetTable.setDescription('For each radio, it could configure multiple service policies. The table describes the relationship between radio and service policies.')
hpnicfDot11APServiceSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11APTemplateNameCfg"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11CfgRadioID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11CfgServicePolicyID"))
if mibBuilder.loadTexts: hpnicfDot11APServiceSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceSetEntry.setDescription('Each entry contains service policy information for each specific radio of AP.')
hpnicfDot11CfgServicePolicyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 3, 1, 1), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11CfgServicePolicyID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgServicePolicyID.setDescription('Represents the ID of each service policy used by the AP.')
hpnicfDot11SrvSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SrvSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SrvSetRowStatus.setDescription('The status of this table entry.')
hpnicfDot11ServiceSetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11ServiceSetVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ServiceSetVlanId.setDescription('Represents the Vlan ID of BSS which is generated when service policy is binded with the Radio.')
hpnicfDot11APSTVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 11), )
if mibBuilder.loadTexts: hpnicfDot11APSTVlanTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSTVlanTable.setDescription('For each service policy, it could be bind to several VLANs. The table describes the relationship between VLAN and service policies.')
hpnicfDot11APSTVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 11, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SIDAPSerialID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11CfgRadioID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11CfgServicePolicyID"))
if mibBuilder.loadTexts: hpnicfDot11APSTVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSTVlanEntry.setDescription('Each entry contains VLAN and service policy information for each specific radio of AP.')
hpnicfDot11CfgSTVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11CfgSTVLANID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgSTVLANID.setDescription('Represents the VLAN that current Service Policy have bind to.')
hpnicfDot11CfgSTNASPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CfgSTNASPortID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgSTNASPortID.setDescription('Represents the NAS Port ID of current Service Policy for each specific radio of AP.')
hpnicfDot11CfgServiceSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11CfgServiceSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgServiceSetRowStatus.setDescription('The status of this table entry.')
hpnicfDot11CfgSTNASID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11CfgSTNASID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgSTNASID.setDescription('Represents the NAS ID of current Service Policy for each specific radio of AP.')
hpnicfDot11APSysInfoSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 4), )
if mibBuilder.loadTexts: hpnicfDot11APSysInfoSetTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysInfoSetTable.setDescription('The table of the system information for each AP.')
hpnicfDot11APSysInfoSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 4, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SIDAPSerialID"))
if mibBuilder.loadTexts: hpnicfDot11APSysInfoSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysInfoSetEntry.setDescription('The system information configuration for each AP.')
hpnicfDot11APSysNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APSysNetID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSysNetID.setDescription('Represents the system Net ID for AP.')
hpnicfDot11APCpuUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APCpuUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APCpuUsageThreshold.setDescription('The CPU usage threshold for AP.')
hpnicfDot11APMemUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('onepercent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APMemUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APMemUsageThreshold.setDescription('The memory usage threshold for AP.')
hpnicfDot11APLimitTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 5), )
if mibBuilder.loadTexts: hpnicfDot11APLimitTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLimitTable.setDescription('For each connected APs, administrator could configure a series of limits. This table describes the limit information for AP(s).')
hpnicfDot11APLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 5, 1), ).setIndexNames((0, "HPN-ICF-DOT11-REF-MIB", "hpnicfDot11APElementIndex"))
if mibBuilder.loadTexts: hpnicfDot11APLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APLimitEntry.setDescription('Each entry contains the limit information for each AP.')
hpnicfDot11APSsidNumLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APSsidNumLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSsidNumLimit.setDescription('Represents the upper limit of service template binded with this AP. All radios of AP share this limit. Default value 0 : There is no upper limit of service template binded with this AP.')
hpnicfDot11APUserCntLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APUserCntLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserCntLimit.setDescription('Represents the upper limit of user which has access to this AP. All BSSs binded with AP share this limit. Default value 0 : There is no upper limit of user which has access to this AP.')
hpnicfDot11APUserThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APUserThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APUserThreshold.setDescription('Represents the threshold of user which has access to this AP. All BSSs binded with AP share this limit. If the user counter is overflow, the trap will be sent. Default value 0 : There is no threshold of user which has access to this AP.')
hpnicfDot11APIfSetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 6), )
if mibBuilder.loadTexts: hpnicfDot11APIfSetTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfSetTable.setDescription('The table of the interface information for each AP.')
hpnicfDot11APIfSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 6, 1), ).setIndexNames((0, "HPN-ICF-DOT11-REF-MIB", "hpnicfDot11APElementIndex"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11APSetIfIndex"))
if mibBuilder.loadTexts: hpnicfDot11APIfSetEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfSetEntry.setDescription('The interface information configuration for each AP.')
hpnicfDot11APSetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11APSetIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSetIfIndex.setDescription('Represents the index for a interface.')
hpnicfDot11APIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11APIfAlias.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APIfAlias.setDescription("This object is an 'alias' name for the interface as specified by a network manager for AP.")
hpnicfDot11APServiceVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 7), )
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanTable.setDescription('For all the radios on the AP, it could configure multiple service policies. The table describes the relationship between AP and service policies.')
hpnicfDot11APServiceVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 7, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11APServiceVlanSerialID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11APServiceVlanSPID"))
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanEntry.setDescription('Each entry contains service policy information for each AP.')
hpnicfDot11APServiceVlanSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 7, 1, 1), OctetString())
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanSerialID.setDescription('This object represents AP serial id.')
hpnicfDot11APServiceVlanSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 7, 1, 2), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanSPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanSPID.setDescription('This object represents the ID of each service policy used by the AP.')
hpnicfDot11APServiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanId.setDescription('This object represents the VLAN ID of BSS which is generated when the service policy is bound to the radio.')
hpnicfDot11APServiceVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APServiceVlanRowStatus.setDescription('This object represents the status of this table entry.')
hpnicfDot11RadioConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8), )
if mibBuilder.loadTexts: hpnicfDot11RadioConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioConfigTable.setDescription('Before AP connects to AC, administrator will configure radio parameter to each radio.')
hpnicfDot11RadioConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RCAPSerialID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RCRadioID"))
if mibBuilder.loadTexts: hpnicfDot11RadioConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioConfigEntry.setDescription('Each entry contains configuration information for each radio.')
hpnicfDot11RCAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: hpnicfDot11RCAPSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCAPSerialID.setDescription('This object represents the Serial ID of AP.')
hpnicfDot11RCRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 2), HpnicfDot11RadioScopeType())
if mibBuilder.loadTexts: hpnicfDot11RCRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioID.setDescription('This object represents each radio.')
hpnicfDot11RCRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 3), HpnicfDot11RadioType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCRadioType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioType.setDescription('This object represents the radio will work with which 802.11 radio type.')
hpnicfDot11RCChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 4), HpnicfDot11ChannelScopeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCChannel.setDescription('This object represents the channel allocation of radio.')
hpnicfDot11RCPreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 5), HpnicfDot11PreambleType().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCPreambleLen.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCPreambleLen.setDescription('This object represents whether use long or short preamble for 802.11 MAC frame. When hpnicfDot11CfgRadioType is either dot11b or dot11g, then value for hpnicfDot11PreambleLen will be valid. Otherwise, the value for it will be invalid.')
hpnicfDot11RCPwrAttValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCPwrAttValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCPwrAttValue.setDescription('This object represents the value of power attenuation.')
hpnicfDot11RCApPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 7), HpnicfDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCApPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCApPowerLevel.setDescription('Represents the maximal transmit power scope for AP.')
hpnicfDot11RCDynamicChlState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCDynamicChlState.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCDynamicChlState.setDescription('Enable/Disable dynamic channel selection.')
hpnicfDot11RCDynamicPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCDynamicPowerState.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCDynamicPowerState.setDescription('Enable/Disable dynamic power selection for the band.')
hpnicfDot11RCRadioStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCRadioStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioStatus.setDescription('Represents the radio admin status whether is enabled or disabled.')
hpnicfDot11RCRadioRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCRadioRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioRate.setDescription('Set data transmit rates for the radio, in the format of 1,2,5.5... For 802.11n radios, the format can be MCS X. The data transmit rates between AP and STA must fall into the configured rates. (Note: For 802.11n radios, the first value will be treated as a mandatory rate, and the second value will be treated as a supported rate. If you configure more than two rates, the configuration cannot take effect. If you configure only one rate, it is considered as the mandatory rate by default.)')
hpnicfDot11RCPwrAdjustStepLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RCPwrAdjustStepLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCPwrAdjustStepLength.setDescription('Power adjustment step-length in dBm.')
hpnicfDot11RCRadioType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 13), HpnicfDot11RadioType2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCRadioType2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioType2.setDescription('This object represents the radio will work with which 802.11 radio type.')
hpnicfDot11RCPreambleLenCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("short", 1))).clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCPreambleLenCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCPreambleLenCM.setDescription('This object represents whether use long or short preamble for 802.11 MAC frame. When hpnicfDot11CfgRadioType is either dot11b or dot11g, then value for hpnicfDot11PreambleLenCM will be valid. Otherwise, the value for it will be invalid.')
hpnicfDot11RCDynamicChlStateCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCDynamicChlStateCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCDynamicChlStateCM.setDescription('Enable/Disable dynamic channel selection.')
hpnicfDot11RCRadioStatusCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCRadioStatusCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioStatusCM.setDescription('Represents the radio admin status whether is enabled or disabled.')
hpnicfDot11RCRadioRateCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCRadioRateCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCRadioRateCM.setDescription('Set data transmit rates for the radio, in the format of 1,2,5.5... For 802.11n radios, the format of each value can be MCS X. The data transmit rates between AP and client should be one of the configured rates. (Note: For 802.11n radios, the first value is mandatory rate, and the second value is supported rate. If more than two rate values are configured, the configuration will not take effect. If only one rate value is configured, the mandatory rate will be set to the default value.)')
hpnicfDot11RCDynamicPowerStateCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 8, 1, 18), HpnicfDot11TruthValueCM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RCDynamicPowerStateCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RCDynamicPowerStateCM.setDescription('Enable/disable dynamic power selection for the band.')
hpnicfDot11RadioSSIDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9), )
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDCfgTable.setDescription('For each radio, it could configure multiple service policies. The table describes the relationship between radio and service policies.')
hpnicfDot11RadioSSIDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioSSIDSerialID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioSSIDRadioID"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioSSIDWLANID"))
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDCfgEntry.setDescription('Each entry contains SSID configuration information for each radio.')
hpnicfDot11RadioSSIDSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1, 1), HpnicfDot11ObjectIDType())
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDSerialID.setDescription('This object represents the serial ID of AP.')
hpnicfDot11RadioSSIDRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1, 2), HpnicfDot11RadioScopeType())
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDRadioID.setDescription('This object represents each radio.')
hpnicfDot11RadioSSIDWLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDWLANID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDWLANID.setDescription('This object represents the WLAN ID of the BSSID.')
hpnicfDot11RadioSSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1, 4), HpnicfDot11ServicePolicyIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDIndex.setDescription('This object represents the ID of each service policy used by the radio.')
hpnicfDot11RadioBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11RadioBSSID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioBSSID.setDescription('As MAC address format, it is used to identify BSS.')
hpnicfDot11RadioSSIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 9, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioSSIDRowStatus.setDescription('RowStatus.')
hpnicfDot11APSerialIDTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10), )
if mibBuilder.loadTexts: hpnicfDot11APSerialIDTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSerialIDTable.setDescription('The table will provide the general information about APs.')
hpnicfDot11APSerialIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SIDAPSerialID"))
if mibBuilder.loadTexts: hpnicfDot11APSerialIDEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11APSerialIDEntry.setDescription('Each entry contains the general information of an AP.')
hpnicfDot11SIDAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 1), OctetString())
if mibBuilder.loadTexts: hpnicfDot11SIDAPSerialID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPSerialID.setDescription('Represents AP serial id.')
hpnicfDot11SIDAPWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPWorkMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPWorkMode.setDescription('Represents what work mode for AP. The following values are supported: normal - AP will supply WLAN service. monitor - AP will be a monitor to find attack. hybrid - AP will supply WLAN service and Device detection is enabled.')
hpnicfDot11SIDAPGetIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpAlloc", 1), ("static", 2))).clone('dhcpAlloc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPGetIPMethod.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPGetIPMethod.setDescription('This object represents the method how AP gets IP address.')
hpnicfDot11SIDAPTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPTemplateName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPTemplateName.setDescription('Represents the name of AP template.')
hpnicfDot11SIDModelAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDModelAlias.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDModelAlias.setDescription('Represents the alias of AP model name.')
hpnicfDot11SIDAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPDescription.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPDescription.setDescription('This attribute will give more information about AP. Administrator could suggest the location, owner or other information for each AP. If the value is set to NULL, the description will be removed.')
hpnicfDot11SIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDRowStatus.setDescription('The status of this table entry.')
hpnicfDot11SIDAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPName.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPName.setDescription('Represents the AP name.')
hpnicfDot11SIDStatisInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 9), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDStatisInterv.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDStatisInterv.setDescription('Represents the interval of radio statistic.')
hpnicfDot11SIDAPBroadcastProbeReply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPBroadcastProbeReply.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPBroadcastProbeReply.setDescription("Represents enable the AP to reply broadcast probe or not. 'true' : The AP to reply broadcast probe is enabled. 'false': The AP to reply broadcast probe is disabled")
hpnicfDot11SIDAPStaIdleTimerInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 11), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPStaIdleTimerInterv.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPStaIdleTimerInterv.setDescription('Represents the interval for which the link between AP and STA ( power-save or awake ) can be idle.')
hpnicfDot11SIDStaKeepAliveTimerInterv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 12), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDStaKeepAliveTimerInterv.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDStaKeepAliveTimerInterv.setDescription('Represents the interval of the keep alive requests sent between AP and STA.')
hpnicfDot11SIDAPCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 13), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPCir.setDescription('Represents the committed information rate between AP and AC.')
hpnicfDot11SIDAPCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 14), Integer32()).setUnits('Bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPCbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPCbs.setDescription('Represents the committed burst size between AP and AC.')
hpnicfDot11SIDAPPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPPriorityLevel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPPriorityLevel.setDescription('This object represents the connection priority for the AP. If the connection priority is 7, the AC is considered as the primary AC for the AP.')
hpnicfDot11SIDAPElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11SIDAPElementID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPElementID.setDescription('This object represents the AP element ID.')
hpnicfDot11SIDAPDevDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPDevDetectEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPDevDetectEnable.setDescription("Represents whether device detection is enabled or not. 'true' : Device detection is enabled. 'false': Device detection is disabled. If device detection is enabled, the AP will provide both device detection and WLAN data services. By default, the AP only provides WLAN data services. When an AP works in monitor mode, that is, the value of object hpnicfDot11APWorkMode is monitor, device detection can not be enabled with object hpnicfDot11SIDAPDevDetectEnable.")
hpnicfDot11SIDAPStatisIntervMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("realtime", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPStatisIntervMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPStatisIntervMode.setDescription('This object represents the mode of statics interval. normal - statics interval value between 10s to 120s realtime - statics interval value between 2s to 5s')
hpnicfDot11SIDAPWorkModeCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("monitor", 1), ("semimonitor", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11SIDAPWorkModeCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SIDAPWorkModeCM.setDescription('Represents what work mode for AP. The following values are supported: normal - AP will supply WLAN service. monitor - AP will be a monitor to find attack. SemiMonitor - AP will supply WLAN service and Device detection is enabled.')
hpnicfDot11RadioIntfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1), )
if mibBuilder.loadTexts: hpnicfDot11RadioIntfConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfConfigTable.setDescription('The table defines the parameters for radio in AP, as per radio.')
hpnicfDot11RadioIntfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioIfIdx"))
if mibBuilder.loadTexts: hpnicfDot11RadioIntfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfConfigEntry.setDescription('Each entry contains information of each radio in AP.')
hpnicfDot11RadioIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11RadioIfIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIfIdx.setDescription('Represents the Radio IfIndex of radio in AP.')
hpnicfDot11RadioCfgBeaconIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 2), Integer32().clone(100)).setUnits('TU').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgBeaconIntvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgBeaconIntvl.setDescription('Represents the interval for Beacon management frame.')
hpnicfDot11RadioCfgDtimIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgDtimIntvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgDtimIntvl.setDescription('Represents the number of beacon intervals that shall elapse between transmission of Beacons frames containing a Traffic Indication Map (TIM) element whose DTIM Count field is 0. This value is transmitted in the Delivery TIM (DTIM) Period field of Beacon frames.')
hpnicfDot11RadioCfgRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 4), Integer32().clone(2346)).setUnits('Byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgRtsThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgRtsThreshold.setDescription('Represents the current minimum size,in octets,of the MAC protocol data unit (MPDU), below which a Request to send/Clear to send (RTS/CTS) handshake shall not be performed.')
hpnicfDot11RadioCfgFragThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 5), Integer32().clone(2346)).setUnits('Byte').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgFragThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgFragThreshold.setDescription('Represents the current maximum size, in octets, of the MPDU that may be delivered to the PHY. A MSDU shall be broken into fragments if its size exceeds the value of this attribute after adding MAC headers and trailers.')
hpnicfDot11RadioCfgShtRetryThld = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 6), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgShtRetryThld.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgShtRetryThld.setDescription('Represents the maximum number of transmission attempts of a frame, the length of which is less than or equal to hpnicfDot11RadioRTSThreshold, that shall be made before a failure condition is indicated.')
hpnicfDot11RadioCfglongRtrThld = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 7), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfglongRtrThld.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfglongRtrThld.setDescription('Represents the maximum number of transmission attempts of a frame, the length of which is longer than hpnicfDot11RadioRTSThreshold, that shall be made before a failure condition is indicated.')
hpnicfDot11RadioCfgMaxRxLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 8), Unsigned32().clone(2000)).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgMaxRxLifetime.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgMaxRxLifetime.setDescription('Represents the elapsed time. After the time specified by hpnicfDot11RadioCfgMaxRxLifetime, the further attempts to reassemble the MSDU shall be terminated.')
hpnicfDot11RadioCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 9), HpnicfDot11RadioType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgType.setDescription('Represents the radio will work with which 802.11 radio type.')
hpnicfDot11RadioCfgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 10), HpnicfDot11ChannelScopeType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgChannel.setDescription('Represents the channel allocation of radio.')
hpnicfDot11RadioCfgMaxTxPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 11), HpnicfDot11TxPwrLevelScopeType()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgMaxTxPwrLvl.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgMaxTxPwrLvl.setDescription('Represents the maximal transmit power scope for AP.')
hpnicfDot11RadioCfgPreambleLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 12), HpnicfDot11PreambleType().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgPreambleLen.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgPreambleLen.setDescription('Represents whether use long or short preamble for 802.11 MAC frame.')
hpnicfDot11RadioCfgWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 13), HpnicfDot11WorkMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgWorkMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgWorkMode.setDescription('Represents work mode of the radio.')
hpnicfDot11RadioCfgOnly11gEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgOnly11gEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgOnly11gEnable.setDescription("Represents whether enable only 802.11g radio mode or not. 'true' : Only 802.11g radio mode is enabled. 'false': Only 802.11g radio mode is disabled.")
hpnicfDot11RadioCfgType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 15), HpnicfDot11RadioType2()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgType2.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgType2.setDescription('Represents the radio will work with which 802.11 radio type.')
hpnicfDot11RadioCfgRssithresholdCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 1, 1, 16), Integer32().clone(1)).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioCfgRssithresholdCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioCfgRssithresholdCM.setDescription('Represents the minimum value of the RSSI. The clients with RSSI below this value will be refused to associate.')
hpnicfDot11RadioIntfBindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 2), )
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindTable.setDescription('The table defines the binding information for each radio in AP. ')
hpnicfDot11RadioIntfBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioIfIdx"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioIntfBindSvcPlcyID"))
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindEntry.setDescription('Each entry contains the radio interface binding information in AP.')
hpnicfDot11RadioIntfBindSvcPlcyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 2, 1, 1), HpnicfDot11ServicePolicyIDType())
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindSvcPlcyID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindSvcPlcyID.setDescription('Represents the ID of each service policy.')
hpnicfDot11RadioIntfBindIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindIfIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindIfIdx.setDescription('Represents the Ifindex of interface which is binded to the radio.')
hpnicfDot11RadioIntfBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioIntfBindRowStatus.setDescription('The status of this table entry.')
hpnicfDot11DataRateConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1), )
if mibBuilder.loadTexts: hpnicfDot11DataRateConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DataRateConfigTable.setDescription('Table will provide data rate configuration for a specific radio type.')
hpnicfDot11DataRateConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioTypeID"))
if mibBuilder.loadTexts: hpnicfDot11DataRateConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DataRateConfigEntry.setDescription('Each entry of the table will provide data rate configuration for a specific radio type.')
hpnicfDot11RadioTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1, 1, 1), HpnicfDot11RadioType())
if mibBuilder.loadTexts: hpnicfDot11RadioTypeID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioTypeID.setDescription('Represents the radio type.')
hpnicfDot11SupportedRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SupportedRateSet.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SupportedRateSet.setDescription('Represents the supported rate set of a particular radio type.')
hpnicfDot11MandatoryRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11MandatoryRateSet.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11MandatoryRateSet.setDescription('Represents the mandatory rate set of a particular radio type.')
hpnicfDot11DisabledRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11DisabledRateSet.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11DisabledRateSet.setDescription('Represents the disabled rate set of a particular radio type.')
hpnicfDot11SmartRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SmartRateSet.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SmartRateSet.setDescription('Represents the rate set of a particular radio type.')
hpnicfDot11WlanEssIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 1), )
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfTable.setDescription('This table is used to configure WLAN ESS interface.')
hpnicfDot11WlanEssIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11WlanEssIfNumber"))
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfEntry.setDescription('Each entry contains the WLAN ESS interface configuration.')
hpnicfDot11WlanEssIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfNumber.setDescription('This node represents the WLAN ESS interface number.')
hpnicfDot11WlanEssIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEssIfIndex.setDescription('This node represents the ifIndex of WLAN-ESS interface.')
hpnicfDot11WlanEssRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanEssRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEssRowStatus.setDescription('This node represents the WLAN ESS interface row status.')
hpnicfDot11WlanBssIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 2), )
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfTable.setDescription('This table is used to configure WLAN BSS interface.')
hpnicfDot11WlanBssIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11WlanBssIfNumber"))
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfEntry.setDescription('Each entry contains the WLAN BSS interface configuration.')
hpnicfDot11WlanBssIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfNumber.setDescription('This node represents the WLAN BSS interface number.')
hpnicfDot11WlanBssIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanBssIfIndex.setDescription('This node represents the ifIndex of WLAN-BSS interface.')
hpnicfDot11WlanBssRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanBssRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanBssRowStatus.setDescription('This node represents the WLAN BSS interface row status.')
hpnicfDot11WLANEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 3), )
if mibBuilder.loadTexts: hpnicfDot11WLANEthernetIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WLANEthernetIfTable.setDescription('This table is used to configure WLAN Ethernet interface.')
hpnicfDot11WLANEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11WlanEthernetIfNumber"))
if mibBuilder.loadTexts: hpnicfDot11WLANEthernetIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WLANEthernetIfEntry.setDescription('Each entry contains the WLAN Ethernet interface configuration.')
hpnicfDot11WlanEthernetIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11WlanEthernetIfNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEthernetIfNumber.setDescription('This node represents the WLAN Ethernet interface number.')
hpnicfDot11WLANEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11WLANEthernetIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WLANEthernetIfIndex.setDescription('This node represents the ifIndex of WLAN-Ethernet interface.')
hpnicfDot11WlanEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanEthernetRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanEthernetRowStatus.setDescription('This node represents the Wlan Ethernet interface row status.')
hpnicfDot11PortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 4), )
if mibBuilder.loadTexts: hpnicfDot11PortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PortSecurityTable.setDescription('This table defines the WLAN security status for ESS, BSS, mesh and WLAN-Ethernet interface which binding the crypto service-template. Otherwise, when binding the clear service-template, hpnicfPortSecurityTables should be used to configure port security.')
hpnicfDot11PortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfDot11PortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PortSecurityEntry.setDescription('There is a row in this table for each ESS, BSS and WLAN-Ethernet interface.It is indexed using the object ifIndex in RFC1213-MIB.')
hpnicfDot11PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noRestrictions", 1), ("userLoginSecureExt", 2), ("psk", 3), ("macAddressAndPsk", 4), ("userLoginSecureExtOrPsk", 5), ("ext", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11PortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PortSecurityMode.setDescription("Determines the security modes of the WLAN port. noRestrictions - The default value,no any security mode is set. userLoginSecureExt - Access to the port is denied until the port client is authorized (by 802.1X). psk - Access to the port is denied until the port client is authorized (by 802.1X key negotiation). macAddressAndPsk - The MAC address is first authenticated and only if this succeeds does the psk then attempt user authentication. userLoginSecureExtOrPsk - This selects both the userLoginSecureExt and psk modes together such that either is allowed to authorized access. Which mode works for client depends on the client's choice. ext - Access to the port is denied until the port client is authenticated (by ext). ")
hpnicfDot11SecurityUserLoginTxKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLoginTxKeyTypeNone", 1), ("userLoginTxKeyTypeDot11Key", 2), ("userLoginTxKeyTypeRsaRC4Key", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SecurityUserLoginTxKeyType.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecurityUserLoginTxKeyType.setDescription('This indicates the key type in the 802.1X EAPOL_Key packet. userLoginTxKeyTypeNone - This means the key type is not set yet. userLoginTxKeyTypeDot11Key - This selects the 802.11 key type. userLoginTxKeyTypeRsaRC4Key - This selects the RC4 key for RSA RC4 session encryption.')
hpnicfDot11SecurityPskKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pskKeyModeNone", 1), ("pskKeyModePassPhrase", 2), ("pskKeyModeRawKey", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SecurityPskKeyMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecurityPskKeyMode.setDescription("This is the password input mode. When input as pskKeyModePassPhrase, hpnicfDot11SecurePskKeyString must be 8 to 63 characters; when input as pskKeyModeRawKey, hpnicfDot11SecurePskKeyString must be 64 characters and each character must be '0'-'9', 'a'-'f' and 'A'-'F'.")
hpnicfDot11SecurityPskKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11SecurityPskKeyString.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SecurityPskKeyString.setDescription('This is the password string used for psk authentication.')
hpnicfDot11WlanMeshIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 5), )
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfTable.setDescription('This table is used to configure WLAN mesh interface.')
hpnicfDot11WlanMeshIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 5, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11WlanMeshIfNumber"))
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfEntry.setDescription('Each entry contains the WLAN mesh interface configuration.')
hpnicfDot11WlanMeshIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfNumber.setDescription('This node represents the WLAN mesh interface number.')
hpnicfDot11WlanMeshIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanMeshIfIndex.setDescription('This node represents the index of WLAN mesh interface.')
hpnicfDot11WlanMeshRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 6, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11WlanMeshRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WlanMeshRowStatus.setDescription('This node represents the WLAN mesh interface row status.')
hpnicfDot11BackupACAdrssIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 7, 1), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11BackupACAdrssIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BackupACAdrssIP.setDescription('This object represents the backup AC IP address. If the backup AC IP address is not configured, the object value is 0.0.0.0.')
hpnicfDot11BackupACAdrssIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 7, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11BackupACAdrssIPv6.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11BackupACAdrssIPv6.setDescription('This object represents the backup AC IPv6 address. If the backup AC IPv6 address is not configured, the object value is 0::0.')
hpnicfDot11nRadioCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1), )
if mibBuilder.loadTexts: hpnicfDot11nRadioCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfgTable.setDescription('This table is used to configure dot11n on the radio.')
hpnicfDot11nRadioCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11nRadioCfgIndex"))
if mibBuilder.loadTexts: hpnicfDot11nRadioCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfgEntry.setDescription('This entry contains the dot11n configuration on the radio.')
hpnicfDot11nRadioCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 1), HpnicfDot11RadioElementIndex())
if mibBuilder.loadTexts: hpnicfDot11nRadioCfgIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfgIndex.setDescription('Represents index of the radio.')
hpnicfDot11nAMpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nAMpduEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nAMpduEnable.setDescription('Enable the function of A-MPDU.')
hpnicfDot11nAMsduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nAMsduEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nAMsduEnable.setDescription('Enable the function of A-MSDU.')
hpnicfDot11nClientDot11nOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nClientDot11nOnly.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nClientDot11nOnly.setDescription('If radio type is 802.11an or 802.11gn, only permit clients of 11n mode. If radio type is 802.11ac, permit clients of 11n and 11ac mode.')
hpnicfDot11nChanelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode20", 1), ("mode40", 2), ("mode80", 3))).clone('mode40')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nChanelBand.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nChanelBand.setDescription('Specify the bandwidth mode.')
hpnicfDot11nShortGiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nShortGiEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nShortGiEnable.setDescription('The function of Short GI.')
hpnicfDot11nClientDot11acOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nClientDot11acOnly.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nClientDot11acOnly.setDescription('Only permit clients of 11ac mode.')
hpnicfDot11RadioWDSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2), )
if mibBuilder.loadTexts: hpnicfDot11RadioWDSTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioWDSTable.setDescription('This table is used to configure WDS on the radio.')
hpnicfDot11RadioWDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11RadioWDSIndex"))
if mibBuilder.loadTexts: hpnicfDot11RadioWDSEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioWDSEntry.setDescription('Each entry contains the WDS configuration on the radio.')
hpnicfDot11RadioWDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2, 1, 1), HpnicfDot11RadioElementIndex())
if mibBuilder.loadTexts: hpnicfDot11RadioWDSIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioWDSIndex.setDescription('Represents the element index of radio.')
hpnicfDot11RadioWDSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nowds", 1), ("wds", 2))).clone('nowds')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioWDSMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioWDSMode.setDescription('Represents enable the WDS mode or not. nowds: The WDS mode is disabled. wds : The WDS mode is enabled')
hpnicfDot11RadioWDSNetWorkID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11RadioWDSNetWorkID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11RadioWDSNetWorkID.setDescription('Represents the mesh ID of WDS.')
hpnicfDot11WDSSecPskKeyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pskKeyModeNone", 1), ("pskKeyModePassPhrase", 2), ("pskKeyModeRawKey", 3))).clone('pskKeyModeNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11WDSSecPskKeyMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WDSSecPskKeyMode.setDescription('Represents the PSK mode of WDS.')
hpnicfDot11WDSSecPskKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11WDSSecPskKeyString.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11WDSSecPskKeyString.setDescription('Represents the PSK value of WDS.')
hpnicfDot11nRadioCfg2Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3), )
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2Table.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2Table.setDescription('This table is used to configure dot11n on the radio.')
hpnicfDot11nRadioCfg2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11nRadioCfg2APIDIndex"), (0, "HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11nRadioCfg2RadioIDIndex"))
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2Entry.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2Entry.setDescription('This entry contains the dot11n configuration on the radio.')
hpnicfDot11nRadioCfg2APIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 1), HpnicfDot11ObjectIDType())
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2APIDIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2APIDIndex.setDescription('Represents index of the AP.')
hpnicfDot11nRadioCfg2RadioIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 2), HpnicfDot11RadioScopeType())
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2RadioIDIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2RadioIDIndex.setDescription('Represents index of the radio.')
hpnicfDot11nRadioCfg2AMpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2AMpduEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2AMpduEnable.setDescription('Enable the function of A-MPDU.')
hpnicfDot11nRadioCfg2AMsduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2AMsduEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2AMsduEnable.setDescription('Enable the function of A-MSDU.')
hpnicfDot11nRadioCfg2ClientDot11nOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ClientDot11nOnly.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ClientDot11nOnly.setDescription('If radio type is 802.11an or 802.11gn, only permit clients of 11n mode. If radio type is 802.11ac, permit clients of 11n and 11ac mode.')
hpnicfDot11nRadioCfg2ChannelBand = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode20", 1), ("mode40", 2), ("mode80", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ChannelBand.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ChannelBand.setDescription('Specify the bandwidth mode.')
hpnicfDot11nRadioCfg2ShortGiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ShortGiEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ShortGiEnable.setDescription('Enable the function of Short GI.')
hpnicfDot11nRadioCfg2AMpduEnableCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2AMpduEnableCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2AMpduEnableCM.setDescription('Enable the function of A-MPDU.')
hpnicfDot11nRadioCfg2ChannelBandCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode40", 1), ("mode20", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ChannelBandCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ChannelBandCM.setDescription('Specify the bandwidth mode.')
hpnicfDot11nRadioCfg2ShortGiEnableCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ShortGiEnableCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ShortGiEnableCM.setDescription('Enable the function of Short GI.')
hpnicfDot11nRadioCfg2ClientDot11acOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ClientDot11acOnly.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ClientDot11acOnly.setDescription('Only permit clients of 11ac mode.')
hpnicfDot11nRadioCfg2ClientDot11nOnlyCM = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 8, 3, 1, 12), HpnicfDot11TruthValueCM().clone('dot11false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ClientDot11nOnlyCM.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11nRadioCfg2ClientDot11nOnlyCM.setDescription('If radio type is 802.11an or 802.11gn, permit only clients of 11n mode. If radio type is 802.11ac, permit clients of both 11n and 11ac mode.')
hpnicfDot11CfgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 0))
hpnicfDot11CfgCipherChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 0, 1)).setObjects(("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SSIDName"), ("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SecurityCiphers"))
if mibBuilder.loadTexts: hpnicfDot11CfgCipherChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgCipherChange.setDescription('This notification is sent when cipher type of corresponding service template is changed.')
hpnicfDot11CfgPSKChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 0, 2)).setObjects(("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11SSIDName"))
if mibBuilder.loadTexts: hpnicfDot11CfgPSKChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CfgPSKChange.setDescription('This notification is sent when pre-shared key of corresponding service template is changed.')
hpnicfDot11SSIDWepIDConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 0, 3)).setObjects(("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11PreConflictTemplateNum"), ("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11CurrConflictTemplateNum"), ("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ConflictCipherIdx"), ("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ConfigureAPID"), ("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ConfigureRadioID"), ("HPN-ICF-DOT11-CFG-MIB", "hpnicfDot11ConfigureAPMacAddress"))
if mibBuilder.loadTexts: hpnicfDot11SSIDWepIDConflictTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11SSIDWepIDConflictTrap.setDescription('This notification will be sent when the same wep ID is configured on two service policies.')
hpnicfDot11CfgTrapVarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1))
hpnicfDot11PreConflictTemplateNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11PreConflictTemplateNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11PreConflictTemplateNum.setDescription('Represents previous service policy ID when radio bind service policy and current service policy conflict with previous service policy in cipher configuration.')
hpnicfDot11CurrConflictTemplateNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11CurrConflictTemplateNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11CurrConflictTemplateNum.setDescription('Represents current service policy ID when radio bind service policy and current service policy conflict with previous service policy in cipher configuration.')
hpnicfDot11ConflictCipherIdx = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ConflictCipherIdx.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ConflictCipherIdx.setDescription('Represents wep ID that conflicted with.')
hpnicfDot11ConfigureAPID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1, 4), HpnicfDot11ObjectIDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ConfigureAPID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ConfigureAPID.setDescription('Represents which AP is configured.')
hpnicfDot11ConfigureRadioID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1, 5), HpnicfDot11RadioScopeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ConfigureRadioID.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ConfigureRadioID.setDescription('Represents which radio in AP is configured.')
hpnicfDot11ConfigureAPMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 4, 9, 1, 6), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfDot11ConfigureAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfDot11ConfigureAPMacAddress.setDescription('Represents MAC Address of AP.')
mibBuilder.exportSymbols("HPN-ICF-DOT11-CFG-MIB", hpnicfDot11APScanMode=hpnicfDot11APScanMode, hpnicfDot11APLastUpdateStatTime=hpnicfDot11APLastUpdateStatTime, hpnicfDot11SIDAPTemplateName=hpnicfDot11SIDAPTemplateName, hpnicfDot11ACBackupGroup=hpnicfDot11ACBackupGroup, hpnicfDot11StaKeepALiveTimerIntvl=hpnicfDot11StaKeepALiveTimerIntvl, hpnicfDot11AllAPMonitorMode=hpnicfDot11AllAPMonitorMode, hpnicfDot11SPOutCirMode=hpnicfDot11SPOutCirMode, hpnicfDot11DataRateConfigEntry=hpnicfDot11DataRateConfigEntry, hpnicfDot11CfgSaBand=hpnicfDot11CfgSaBand, hpnicfDot11SrvSecurityKeyType=hpnicfDot11SrvSecurityKeyType, hpnicfDot11APSerialIDTable=hpnicfDot11APSerialIDTable, hpnicfDot11CfgServicePolicyID=hpnicfDot11CfgServicePolicyID, hpnicfDot11MonitorInterval=hpnicfDot11MonitorInterval, hpnicfDot11WlanEssIfNumber=hpnicfDot11WlanEssIfNumber, hpnicfDot11RPLongRetryThreshold=hpnicfDot11RPLongRetryThreshold, hpnicfDot11APSysInfoSetTable=hpnicfDot11APSysInfoSetTable, hpnicfDot11APTemplateRowStatus=hpnicfDot11APTemplateRowStatus, hpnicfDot11PersistentName=hpnicfDot11PersistentName, hpnicfDot11APServiceSetTable=hpnicfDot11APServiceSetTable, hpnicfDot11SPOutCirValue=hpnicfDot11SPOutCirValue, hpnicfDot11CfgSTVLANID=hpnicfDot11CfgSTVLANID, hpnicfDot11RadioWDSEntry=hpnicfDot11RadioWDSEntry, hpnicfDot11CfgSaEnable=hpnicfDot11CfgSaEnable, hpnicfDot11SPInCirStaticValue=hpnicfDot11SPInCirStaticValue, hpnicfDot11SecurityCiphers=hpnicfDot11SecurityCiphers, hpnicfDot11APPriorityLevel=hpnicfDot11APPriorityLevel, hpnicfDot11WlanBssIfTable=hpnicfDot11WlanBssIfTable, hpnicfDot11RCRadioRate=hpnicfDot11RCRadioRate, hpnicfDot11WlanBssIfIndex=hpnicfDot11WlanBssIfIndex, hpnicfDot11nRadioCfg2RadioIDIndex=hpnicfDot11nRadioCfg2RadioIDIndex, hpnicfDot11CfgLBRdGroupId=hpnicfDot11CfgLBRdGroupId, hpnicfDot11WlanMeshRowStatus=hpnicfDot11WlanMeshRowStatus, hpnicfDot11RPFragThreshold=hpnicfDot11RPFragThreshold, hpnicfDot11ApTrapEnabled=hpnicfDot11ApTrapEnabled, hpnicfDot11APServiceVlanSerialID=hpnicfDot11APServiceVlanSerialID, hpnicfDot11RadioIntfBindIfIdx=hpnicfDot11RadioIntfBindIfIdx, hpnicfDot11SrvPortSecurityMode=hpnicfDot11SrvPortSecurityMode, hpnicfDot11SSIDEncryptionMode=hpnicfDot11SSIDEncryptionMode, hpnicfDot11nRadioCfg2ChannelBand=hpnicfDot11nRadioCfg2ChannelBand, hpnicfDot11RPRtsThreshold=hpnicfDot11RPRtsThreshold, hpnicfDot11RadioCfgType2=hpnicfDot11RadioCfgType2, hpnicfDot11SrvPolicyExtendTable=hpnicfDot11SrvPolicyExtendTable, hpnicfDot11RCPwrAdjustStepLength=hpnicfDot11RCPwrAdjustStepLength, hpnicfDot11WlanEssIfEntry=hpnicfDot11WlanEssIfEntry, hpnicfDot11RadioIntfBindTable=hpnicfDot11RadioIntfBindTable, hpnicfDot11IntfTrapThreshold=hpnicfDot11IntfTrapThreshold, hpnicfDot11ServicePolicyExtID=hpnicfDot11ServicePolicyExtID, hpnicfDot11RadioPolicyName=hpnicfDot11RadioPolicyName, hpnicfDot11APBroadcastProbeReply=hpnicfDot11APBroadcastProbeReply, hpnicfDot11RadioCfgRtsThreshold=hpnicfDot11RadioCfgRtsThreshold, hpnicfDot11SrvPolicyStatusCM=hpnicfDot11SrvPolicyStatusCM, hpnicfDot11nRadioCfg2Entry=hpnicfDot11nRadioCfg2Entry, hpnicfDot11APServiceVlanTable=hpnicfDot11APServiceVlanTable, hpnicfDot11SrvSecurityPskKeyMode=hpnicfDot11SrvSecurityPskKeyMode, hpnicfDot11APIfSetTable=hpnicfDot11APIfSetTable, hpnicfDot11WlanInfPVID=hpnicfDot11WlanInfPVID, hpnicfDot11CfgRdElementID=hpnicfDot11CfgRdElementID, hpnicfDot11RadioWDSIndex=hpnicfDot11RadioWDSIndex, hpnicfDot11RCPwrAttValue=hpnicfDot11RCPwrAttValue, hpnicfDot11RCRadioID=hpnicfDot11RCRadioID, hpnicfDot11RCApPowerLevel=hpnicfDot11RCApPowerLevel, hpnicfDot11WlanMeshIfTable=hpnicfDot11WlanMeshIfTable, hpnicfDot11CfgMaxTxPowerLevel=hpnicfDot11CfgMaxTxPowerLevel, hpnicfDot11SrvSetRowStatus=hpnicfDot11SrvSetRowStatus, hpnicfDot11nRadioCfg2APIDIndex=hpnicfDot11nRadioCfg2APIDIndex, hpnicfDot11CipherKeyIndex=hpnicfDot11CipherKeyIndex, hpnicfDot11CfgTrapVarObjects=hpnicfDot11CfgTrapVarObjects, hpnicfDot11nChanelBand=hpnicfDot11nChanelBand, hpnicfDot11StaIdleTimerInterv=hpnicfDot11StaIdleTimerInterv, hpnicfDot11WLANEthernetIfTable=hpnicfDot11WLANEthernetIfTable, hpnicfDot11ConflictCipherIdx=hpnicfDot11ConflictCipherIdx, hpnicfDot11SampleTimeStamp=hpnicfDot11SampleTimeStamp, hpnicfDot11SrvPolicyExtRowStatus=hpnicfDot11SrvPolicyExtRowStatus, hpnicfDot11APIfSetEntry=hpnicfDot11APIfSetEntry, hpnicfDot11MaxAPPerIf=hpnicfDot11MaxAPPerIf, hpnicfDot11ACCtrlTunnelSecSupport=hpnicfDot11ACCtrlTunnelSecSupport, hpnicfDot11MandatoryRateSet=hpnicfDot11MandatoryRateSet, hpnicfDot11PreConflictTemplateNum=hpnicfDot11PreConflictTemplateNum, hpnicfDot11SIDAPPriorityLevel=hpnicfDot11SIDAPPriorityLevel, hpnicfDot11BackupACAdrssIP=hpnicfDot11BackupACAdrssIP, hpnicfDot11CfgRadioStatus=hpnicfDot11CfgRadioStatus, hpnicfDot11RPBeaconInterval=hpnicfDot11RPBeaconInterval, hpnicfDot11nClientDot11acOnly=hpnicfDot11nClientDot11acOnly, hpnicfDot11BeaconIntervalMs=hpnicfDot11BeaconIntervalMs, hpnicfDot11APServiceVlanEntry=hpnicfDot11APServiceVlanEntry, hpnicfDot11StaKeepAliveTimerInterv=hpnicfDot11StaKeepAliveTimerInterv, hpnicfDot11nRadioCfg2AMsduEnable=hpnicfDot11nRadioCfg2AMsduEnable, hpnicfDot11DisabledRateSet=hpnicfDot11DisabledRateSet, hpnicfDot11StatisIntervMode=hpnicfDot11StatisIntervMode, hpnicfDot11ConfigureAPMacAddress=hpnicfDot11ConfigureAPMacAddress, hpnicfDot11nShortGiEnable=hpnicfDot11nShortGiEnable, hpnicfDot11RdoClientMaxCount=hpnicfDot11RdoClientMaxCount, hpnicfDot11WlanEssIfIndex=hpnicfDot11WlanEssIfIndex, hpnicfDot11RadioSSIDSerialID=hpnicfDot11RadioSSIDSerialID, hpnicfDot11SecurityPskKeyString=hpnicfDot11SecurityPskKeyString, hpnicfDot11RCChannel=hpnicfDot11RCChannel, hpnicfDot11CfgCipherChange=hpnicfDot11CfgCipherChange, hpnicfDot11nRadioCfg2ClientDot11nOnly=hpnicfDot11nRadioCfg2ClientDot11nOnly, hpnicfDot11APMemUsageThreshold=hpnicfDot11APMemUsageThreshold, hpnicfDot11UplinkTrackId=hpnicfDot11UplinkTrackId, hpnicfDot11APConfigGroup=hpnicfDot11APConfigGroup, hpnicfDot11WLANEthernetIfIndex=hpnicfDot11WLANEthernetIfIndex, hpnicfDot11GlobalApFmwUpdState=hpnicfDot11GlobalApFmwUpdState, hpnicfDot11CfgChannelLockStat=hpnicfDot11CfgChannelLockStat, hpnicfDot11APL2IsolateEnable=hpnicfDot11APL2IsolateEnable, hpnicfDot11APUserThreshold=hpnicfDot11APUserThreshold, hpnicfDot11SIDAPBroadcastProbeReply=hpnicfDot11SIDAPBroadcastProbeReply, hpnicfDot11RCAPSerialID=hpnicfDot11RCAPSerialID, hpnicfDot11ServicePolicyEntry=hpnicfDot11ServicePolicyEntry, hpnicfDot11SIDStatisInterv=hpnicfDot11SIDStatisInterv, hpnicfDot11APServiceVlanRowStatus=hpnicfDot11APServiceVlanRowStatus, hpnicfDot11APSTVlanEntry=hpnicfDot11APSTVlanEntry, hpnicfDot11nRadioCfgTable=hpnicfDot11nRadioCfgTable, hpnicfDot11WlanexAuthServerIP=hpnicfDot11WlanexAuthServerIP, hpnicfDot11RadioCfgShtRetryThld=hpnicfDot11RadioCfgShtRetryThld, hpnicfDot11APUserCntLimit=hpnicfDot11APUserCntLimit, hpnicfDot11SSIDHidden=hpnicfDot11SSIDHidden, hpnicfDot11SrvPolicyExtendEntry=hpnicfDot11SrvPolicyExtendEntry, hpnicfDot11AuthenModeCM=hpnicfDot11AuthenModeCM, hpnicfDot11SmartRateSet=hpnicfDot11SmartRateSet, hpnicfDot11nClientDot11nOnly=hpnicfDot11nClientDot11nOnly, hpnicfDot11RadioTxArithmetic=hpnicfDot11RadioTxArithmetic, hpnicfDot11RadioPolicyExtEntry=hpnicfDot11RadioPolicyExtEntry, hpnicfDot11nRadioCfg2ClientDot11nOnlyCM=hpnicfDot11nRadioCfg2ClientDot11nOnlyCM, hpnicfDot11ApNasIDCM=hpnicfDot11ApNasIDCM, hpnicfDot11APTemplateName=hpnicfDot11APTemplateName, hpnicfDot11SIDRowStatus=hpnicfDot11SIDRowStatus, hpnicfDot11APLimitTable=hpnicfDot11APLimitTable, hpnicfDot11SPEnable=hpnicfDot11SPEnable, hpnicfDot11APCbs=hpnicfDot11APCbs, hpnicfDot11WlanEssIfTable=hpnicfDot11WlanEssIfTable, hpnicfDot11SIDAPElementID=hpnicfDot11SIDAPElementID, hpnicfDot11RadioSSIDWLANID=hpnicfDot11RadioSSIDWLANID, hpnicfDot11SecurityCiphersCM=hpnicfDot11SecurityCiphersCM, hpnicfDot11RadioCfgFragThreshold=hpnicfDot11RadioCfgFragThreshold, hpnicfDot11WlanInfBindingID=hpnicfDot11WlanInfBindingID, hpnicfDot11FragThreshold=hpnicfDot11FragThreshold, hpnicfDot11SIDStaKeepAliveTimerInterv=hpnicfDot11SIDStaKeepAliveTimerInterv, hpnicfDot11RadioTypeID=hpnicfDot11RadioTypeID, hpnicfDot11WlanMeshIfNumber=hpnicfDot11WlanMeshIfNumber, hpnicfDot11SPInCirMode=hpnicfDot11SPInCirMode, hpnicfDot11AuthenMode=hpnicfDot11AuthenMode, hpnicfDot11RadioCfglongRtrThld=hpnicfDot11RadioCfglongRtrThld, hpnicfDot11SPInCirValue=hpnicfDot11SPInCirValue, hpnicfDot11CfgRadioID=hpnicfDot11CfgRadioID, hpnicfDot11AllAPMemUsageThreshold=hpnicfDot11AllAPMemUsageThreshold, hpnicfDot11RadioBSSID=hpnicfDot11RadioBSSID, hpnicfDot11CfgSTNASID=hpnicfDot11CfgSTNASID, hpnicfDot11SIDModelAlias=hpnicfDot11SIDModelAlias, hpnicfDot11APSerialIDEntry=hpnicfDot11APSerialIDEntry, hpnicfDot11RPBeaconIntervalCM=hpnicfDot11RPBeaconIntervalCM, hpnicfDot11SIDAPCbs=hpnicfDot11SIDAPCbs, hpnicfDot11nRadioCfgEntry=hpnicfDot11nRadioCfgEntry, hpnicfDot11ChnlSwitChkInterval=hpnicfDot11ChnlSwitChkInterval, hpnicfDot11APTemplateNameCfg=hpnicfDot11APTemplateNameCfg, hpnicfDot11ServicePolicyID=hpnicfDot11ServicePolicyID, hpnicfDot11RPAPSerialID=hpnicfDot11RPAPSerialID, hpnicfDot11APUserUplimit=hpnicfDot11APUserUplimit, hpnicfDot11WlanEthernetRowStatus=hpnicfDot11WlanEthernetRowStatus, hpnicfDot11CfgPwrAttValue=hpnicfDot11CfgPwrAttValue, hpnicfDot11nRadioCfg2ClientDot11acOnly=hpnicfDot11nRadioCfg2ClientDot11acOnly, hpnicfDot11RCRadioType2=hpnicfDot11RCRadioType2, hpnicfDot11PolicyConfigGroup=hpnicfDot11PolicyConfigGroup, hpnicfDot11APSsidNumLimit=hpnicfDot11APSsidNumLimit, hpnicfDot11nAMsduEnable=hpnicfDot11nAMsduEnable, hpnicfDot11SecurityUserLoginTxKeyType=hpnicfDot11SecurityUserLoginTxKeyType, hpnicfDot11SIDAPSerialID=hpnicfDot11SIDAPSerialID, hpnicfDot11RadioCfgMaxTxPwrLvl=hpnicfDot11RadioCfgMaxTxPwrLvl, hpnicfDot11SIDAPStaIdleTimerInterv=hpnicfDot11SIDAPStaIdleTimerInterv, hpnicfDot11APDoSProtectEnable=hpnicfDot11APDoSProtectEnable, hpnicfDot11RadioIntfConfigTable=hpnicfDot11RadioIntfConfigTable, hpnicfDot11ConfigureAPID=hpnicfDot11ConfigureAPID, hpnicfDot11APTemplateEntry=hpnicfDot11APTemplateEntry, hpnicfDot11RadioIfIdx=hpnicfDot11RadioIfIdx, hpnicfDot11CipherKey=hpnicfDot11CipherKey, hpnicfDot11BeaconInterval=hpnicfDot11BeaconInterval, hpnicfDot11RadioConfigTable=hpnicfDot11RadioConfigTable, hpnicfDot11RPRadioID=hpnicfDot11RPRadioID, hpnicfDot11PortSecurityTable=hpnicfDot11PortSecurityTable, hpnicfDot11APWorkMode=hpnicfDot11APWorkMode, hpnicfDot11RadioCfgType=hpnicfDot11RadioCfgType, hpnicfDot11APSerialID=hpnicfDot11APSerialID, hpnicfDot11AutoAPName=hpnicfDot11AutoAPName, hpnicfDot11SecIEStatus=hpnicfDot11SecIEStatus, hpnicfDot11ServicePolicyExtEntry=hpnicfDot11ServicePolicyExtEntry, hpnicfDot11RadioSSIDRadioID=hpnicfDot11RadioSSIDRadioID, hpnicfDot11WlanMeshIfEntry=hpnicfDot11WlanMeshIfEntry, hpnicfDot11PortSecurityMode=hpnicfDot11PortSecurityMode, hpnicfDot11SrvSecurityPskKeyString=hpnicfDot11SrvSecurityPskKeyString, hpnicfDot11RadioIntfConfigGroup=hpnicfDot11RadioIntfConfigGroup, hpnicfDot11ServicePolicyExtTable=hpnicfDot11ServicePolicyExtTable, hpnicfDot11CfgPowerLockStat=hpnicfDot11CfgPowerLockStat, hpnicfDot11RtCollectSwitch=hpnicfDot11RtCollectSwitch, hpnicfDot11APDevDetectEnable=hpnicfDot11APDevDetectEnable, hpnicfDot11APSetIfIndex=hpnicfDot11APSetIfIndex, hpnicfDot11CfgSaCltRtFFTData=hpnicfDot11CfgSaCltRtFFTData, hpnicfDot11CfgChannel=hpnicfDot11CfgChannel, hpnicfDot11AllAPCpuUsageThreshold=hpnicfDot11AllAPCpuUsageThreshold, hpnicfDot11APCir=hpnicfDot11APCir, hpnicfDot11RadioCfgWorkMode=hpnicfDot11RadioCfgWorkMode, hpnicfDot11APCpuUsageThreshold=hpnicfDot11APCpuUsageThreshold, hpnicfDot11RCPreambleLenCM=hpnicfDot11RCPreambleLenCM, hpnicfDot11nAMpduEnable=hpnicfDot11nAMpduEnable, hpnicfDot11DataRateConfigTable=hpnicfDot11DataRateConfigTable, hpnicfDot11SrvPolicyRowStatus=hpnicfDot11SrvPolicyRowStatus, hpnicfDot11RCRadioStatus=hpnicfDot11RCRadioStatus, hpnicfDot11RCPreambleLen=hpnicfDot11RCPreambleLen, hpnicfDot11nRadioCfg2ShortGiEnable=hpnicfDot11nRadioCfg2ShortGiEnable, hpnicfDot11CfgPSKChange=hpnicfDot11CfgPSKChange, hpnicfDot11SecurityPskKeyMode=hpnicfDot11SecurityPskKeyMode, hpnicfDot11SSIDWepIDConflictTrap=hpnicfDot11SSIDWepIDConflictTrap, hpnicfDot11ConfigureRadioID=hpnicfDot11ConfigureRadioID, hpnicfDot11APServiceVlanId=hpnicfDot11APServiceVlanId, hpnicfDot11CfgSTNASPortID=hpnicfDot11CfgSTNASPortID, hpnicfDot11RadioCfgMaxRxLifetime=hpnicfDot11RadioCfgMaxRxLifetime, hpnicfDot11RadioToConfigTable=hpnicfDot11RadioToConfigTable, hpnicfDot11RCRadioStatusCM=hpnicfDot11RCRadioStatusCM, hpnicfDot11PortSecurityEntry=hpnicfDot11PortSecurityEntry, hpnicfDot11LongRetryThreshold=hpnicfDot11LongRetryThreshold, hpnicfDot11RadioConfigEntry=hpnicfDot11RadioConfigEntry, hpnicfDot11CipherKeyType=hpnicfDot11CipherKeyType, hpnicfDot11SPOutCirStaticValue=hpnicfDot11SPOutCirStaticValue, hpnicfDot11SSIDName=hpnicfDot11SSIDName, hpnicfDot11ServicePolicyTable=hpnicfDot11ServicePolicyTable, hpnicfDot11StatisInterv=hpnicfDot11StatisInterv, hpnicfDot11RadioCfgOnly11gEnable=hpnicfDot11RadioCfgOnly11gEnable, hpnicfDot11SPIsolateCM=hpnicfDot11SPIsolateCM, hpnicfDot11SIDAPStatisIntervMode=hpnicfDot11SIDAPStatisIntervMode, hpnicfDot11Description=hpnicfDot11Description, hpnicfDot11RCDynamicPowerState=hpnicfDot11RCDynamicPowerState, hpnicfDot11WlanInfBindingType=hpnicfDot11WlanInfBindingType, hpnicfDot11RadioElementConfigGroup=hpnicfDot11RadioElementConfigGroup, hpnicfDot11RCDynamicPowerStateCM=hpnicfDot11RCDynamicPowerStateCM, hpnicfDot11SIDAPWorkMode=hpnicfDot11SIDAPWorkMode, hpnicfDot11SPBeaconMeasEnable=hpnicfDot11SPBeaconMeasEnable, hpnicfDot11CfgNotifyGroup=hpnicfDot11CfgNotifyGroup, hpnicfDot11WlanMeshIfIndex=hpnicfDot11WlanMeshIfIndex, hpnicfDot11nRadioCfg2AMpduEnableCM=hpnicfDot11nRadioCfg2AMpduEnableCM, hpnicfDot11GlobeConfigGroup=hpnicfDot11GlobeConfigGroup, hpnicfDot11SrvPortSecurityModeCM=hpnicfDot11SrvPortSecurityModeCM, hpnicfDot11CfgRRMSDRdGroupId=hpnicfDot11CfgRRMSDRdGroupId, hpnicfDot11APSysNetID=hpnicfDot11APSysNetID, hpnicfDot11RadioSSIDCfgEntry=hpnicfDot11RadioSSIDCfgEntry, hpnicfDot11RadioCfgDtimIntvl=hpnicfDot11RadioCfgDtimIntvl, hpnicfDot11ApFmwUpdState=hpnicfDot11ApFmwUpdState, hpnicfDot11WDSSecPskKeyMode=hpnicfDot11WDSSecPskKeyMode, hpnicfDot11APTemplateTable=hpnicfDot11APTemplateTable, hpnicfDot11RCDynamicChlState=hpnicfDot11RCDynamicChlState, hpnicfDot11CfgServiceSetRowStatus=hpnicfDot11CfgServiceSetRowStatus, hpnicfDot11PreambleLen=hpnicfDot11PreambleLen, hpnicfDot11RtCollectIntvl=hpnicfDot11RtCollectIntvl, hpnicfDot11RglCollectIntvl=hpnicfDot11RglCollectIntvl, hpnicfDot11SupportedRateSet=hpnicfDot11SupportedRateSet, hpnicfDot11RadioIntfBindEntry=hpnicfDot11RadioIntfBindEntry)
mibBuilder.exportSymbols("HPN-ICF-DOT11-CFG-MIB", hpnicfDot11DtimInterval=hpnicfDot11DtimInterval, hpnicfDot11WlanBssIfNumber=hpnicfDot11WlanBssIfNumber, hpnicfDot11BackupACAdrssIPv6=hpnicfDot11BackupACAdrssIPv6, hpnicfDot11ServiceSetVlanId=hpnicfDot11ServiceSetVlanId, hpnicfDot11CfgRadioPolicyName=hpnicfDot11CfgRadioPolicyName, hpnicfDot11AdjIntfTrapThreshold=hpnicfDot11AdjIntfTrapThreshold, hpnicfDot11SPIsolate=hpnicfDot11SPIsolate, hpnicfDot11RadioCfgChannel=hpnicfDot11RadioCfgChannel, hpnicfDot11RadioWDSNetWorkID=hpnicfDot11RadioWDSNetWorkID, hpnicfDot11APGetIPMethod=hpnicfDot11APGetIPMethod, hpnicfDot11DataRateConfigGroup=hpnicfDot11DataRateConfigGroup, hpnicfDot11SIDAPDevDetectEnable=hpnicfDot11SIDAPDevDetectEnable, hpnicfDot11WlanEssRowStatus=hpnicfDot11WlanEssRowStatus, hpnicfDot11RadioWDSTable=hpnicfDot11RadioWDSTable, hpnicfDot11RadioCfgBeaconIntvl=hpnicfDot11RadioCfgBeaconIntvl, hpnicfDot11RPDtimInterval=hpnicfDot11RPDtimInterval, hpnicfDot11SIDAPName=hpnicfDot11SIDAPName, hpnicfDot11RtsThreshold=hpnicfDot11RtsThreshold, hpnicfDot11SIDAPWorkModeCM=hpnicfDot11SIDAPWorkModeCM, hpnicfDot11RdoPolicyRowStatus=hpnicfDot11RdoPolicyRowStatus, hpnicfDot11WLANEthernetIfEntry=hpnicfDot11WLANEthernetIfEntry, hpnicfDot11WlanEthernetIfNumber=hpnicfDot11WlanEthernetIfNumber, hpnicfDot11nRadioCfg2AMpduEnable=hpnicfDot11nRadioCfg2AMpduEnable, hpnicfDot11RCDynamicChlStateCM=hpnicfDot11RCDynamicChlStateCM, hpnicfDot11RadioCfgRssithresholdCM=hpnicfDot11RadioCfgRssithresholdCM, hpnicfDot11APSysInfoSetEntry=hpnicfDot11APSysInfoSetEntry, hpnicfDot11nRadioCfg2ShortGiEnableCM=hpnicfDot11nRadioCfg2ShortGiEnableCM, hpnicfDot11RadioCfgPreambleLen=hpnicfDot11RadioCfgPreambleLen, hpnicfDot11SPBeaconMeasType=hpnicfDot11SPBeaconMeasType, hpnicfDot11ShortRetryThreshold=hpnicfDot11ShortRetryThreshold, hpnicfDot11CFG=hpnicfDot11CFG, hpnicfDot11WlanBssIfEntry=hpnicfDot11WlanBssIfEntry, hpnicfDot11StatisIntervModeCM=hpnicfDot11StatisIntervModeCM, hpnicfDot11APElementID=hpnicfDot11APElementID, hpnicfDot11RadioIntfConfigEntry=hpnicfDot11RadioIntfConfigEntry, hpnicfDot11APName=hpnicfDot11APName, hpnicfDot11SPBeaconMeasInterval=hpnicfDot11SPBeaconMeasInterval, hpnicfDot11CfgNotifications=hpnicfDot11CfgNotifications, hpnicfDot11RCRadioRateCM=hpnicfDot11RCRadioRateCM, hpnicfDot11ACNasIDCM=hpnicfDot11ACNasIDCM, hpnicfDot11nRadioCfgIndex=hpnicfDot11nRadioCfgIndex, hpnicfDot11RadioSSIDRowStatus=hpnicfDot11RadioSSIDRowStatus, hpnicfDot11BroadcastProbeReply=hpnicfDot11BroadcastProbeReply, hpnicfDot11GlobalCountryCode=hpnicfDot11GlobalCountryCode, hpnicfDot11WDSSecPskKeyString=hpnicfDot11WDSSecPskKeyString, PYSNMP_MODULE_ID=hpnicfDot11CFG, hpnicfDot11SSIDHiddenCM=hpnicfDot11SSIDHiddenCM, hpnicfDot11ClientMaxCount=hpnicfDot11ClientMaxCount, hpnicfDot11SecurityServicePolicyID=hpnicfDot11SecurityServicePolicyID, hpnicfDot11RadioToConfigEntry=hpnicfDot11RadioToConfigEntry, hpnicfDot11RadioPolicyTable=hpnicfDot11RadioPolicyTable, hpnicfDot11APIfAlias=hpnicfDot11APIfAlias, hpnicfDot11RadioIntfBindRowStatus=hpnicfDot11RadioIntfBindRowStatus, hpnicfDot11RPClientMaxCount=hpnicfDot11RPClientMaxCount, hpnicfDot11RadioPolicyExtTable=hpnicfDot11RadioPolicyExtTable, hpnicfDot11SIDAPGetIPMethod=hpnicfDot11SIDAPGetIPMethod, hpnicfDot11SIDAPCir=hpnicfDot11SIDAPCir, hpnicfDot11APServiceSetEntry=hpnicfDot11APServiceSetEntry, hpnicfDot11nRadioCfg2Table=hpnicfDot11nRadioCfg2Table, hpnicfDot11CfgWorkMode=hpnicfDot11CfgWorkMode, hpnicfDot11SrvPortSecurityTable=hpnicfDot11SrvPortSecurityTable, hpnicfDot11CfgRadioType=hpnicfDot11CfgRadioType, hpnicfDot11RadioSSIDCfgTable=hpnicfDot11RadioSSIDCfgTable, hpnicfDot11ACAutoAPSupport=hpnicfDot11ACAutoAPSupport, hpnicfDot11APSTVlanTable=hpnicfDot11APSTVlanTable, hpnicfDot11ACDataTunnelSecSupport=hpnicfDot11ACDataTunnelSecSupport, hpnicfDot11RadioIntfBindSvcPlcyID=hpnicfDot11RadioIntfBindSvcPlcyID, hpnicfDot11WlanBssRowStatus=hpnicfDot11WlanBssRowStatus, hpnicfDot11SrvPortSecurityEntry=hpnicfDot11SrvPortSecurityEntry, hpnicfDot11CurrConflictTemplateNum=hpnicfDot11CurrConflictTemplateNum, hpnicfDot11CfgRadioType2=hpnicfDot11CfgRadioType2, hpnicfDot11RadioPolicyEntry=hpnicfDot11RadioPolicyEntry, hpnicfDot11SIDAPDescription=hpnicfDot11SIDAPDescription, hpnicfDot11nRadioCfg2ChannelBandCM=hpnicfDot11nRadioCfg2ChannelBandCM, hpnicfDot11InterfaceConfigGroup=hpnicfDot11InterfaceConfigGroup, hpnicfDot11CfgIDSEnable=hpnicfDot11CfgIDSEnable, hpnicfDot11RPShortRetryThreshold=hpnicfDot11RPShortRetryThreshold, hpnicfDot11RCRadioType=hpnicfDot11RCRadioType, hpnicfDot11TemplateAPModelAlias=hpnicfDot11TemplateAPModelAlias, hpnicfDot11APServiceVlanSPID=hpnicfDot11APServiceVlanSPID, hpnicfDot11SampleInterval=hpnicfDot11SampleInterval, hpnicfDot11MaxRxLifetime=hpnicfDot11MaxRxLifetime, hpnicfDot11APLimitEntry=hpnicfDot11APLimitEntry, hpnicfDot11APBSSIDSupportNum=hpnicfDot11APBSSIDSupportNum, hpnicfDot11RadioSSIDIndex=hpnicfDot11RadioSSIDIndex, hpnicfDot11SecIEStatusCM=hpnicfDot11SecIEStatusCM, hpnicfDot11StaIdleTimerIntvl=hpnicfDot11StaIdleTimerIntvl, hpnicfDot11RadioWDSMode=hpnicfDot11RadioWDSMode)
