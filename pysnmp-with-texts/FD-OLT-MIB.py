#
# PySNMP MIB module FD-OLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FD-OLT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
DeviceOperation, OperSwitch, DataDirection, DeviceStatus, epon = mibBuilder.importSymbols("EPON-EOC-MIB", "DeviceOperation", "OperSwitch", "DataDirection", "DeviceStatus", "epon")
ponCardSlotId, = mibBuilder.importSymbols("FD-SYSTEM-MIB", "ponCardSlotId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, IpAddress, Integer32, Counter64, ObjectIdentity, iso, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "IpAddress", "Integer32", "Counter64", "ObjectIdentity", "iso", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "TimeTicks", "Counter32")
MacAddress, TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
fdOlt = ModuleIdentity((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3))
if mibBuilder.loadTexts: fdOlt.setLastUpdated('201005271056Z')
if mibBuilder.loadTexts: fdOlt.setOrganization('epon eoc factory.')
if mibBuilder.loadTexts: fdOlt.setContactInfo(' ')
if mibBuilder.loadTexts: fdOlt.setDescription('OLT mib module')
oltBaseManageTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1), )
if mibBuilder.loadTexts: oltBaseManageTable.setStatus('current')
if mibBuilder.loadTexts: oltBaseManageTable.setDescription('OLT base management information table')
oltBaseManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltBaseManageEntry.setStatus('current')
if mibBuilder.loadTexts: oltBaseManageEntry.setDescription('Each entry in this table contain the info for one OLT ( that is also called one PON port)')
oltId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: oltId.setStatus('current')
if mibBuilder.loadTexts: oltId.setDescription('Administratorly assigned identifier value')
oltMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltMacAddr.setStatus('current')
if mibBuilder.loadTexts: oltMacAddr.setDescription('OLT MAC address')
oltWorkState = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 3), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltWorkState.setStatus('current')
if mibBuilder.loadTexts: oltWorkState.setDescription('work status of the OLT')
oltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltEnable.setStatus('current')
if mibBuilder.loadTexts: oltEnable.setDescription('This object is used to enable or disable the OLT. When enabled, the olt will pass user traffic; When disabled,the olt will turning off the EPON port and blocking all traffic in both directions')
maxPermitLLIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxPermitLLIDNumber.setStatus('current')
if mibBuilder.loadTexts: maxPermitLLIDNumber.setDescription('LLID number that the olt allow to register, this value can only be changed when the olt is disabled.')
registeredLLIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: registeredLLIDNumber.setStatus('current')
if mibBuilder.loadTexts: registeredLLIDNumber.setDescription('LLID number that registered now on this OLT')
accessedOnuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessedOnuNumber.setStatus('current')
if mibBuilder.loadTexts: accessedOnuNumber.setDescription("The accessed physical ONU number, 'physical' is opposite to 'dummy', a 'Logical Link' is also called a dummy ONU to the OLT ")
linkIdExhaust = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIdExhaust.setStatus('current')
if mibBuilder.loadTexts: linkIdExhaust.setDescription('Indicate if there is available linkId which can be allocated to new registered Logical Link')
onuIdExhaust = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuIdExhaust.setStatus('current')
if mibBuilder.loadTexts: onuIdExhaust.setDescription('Refer to linkIdExhaust desc')
linkIdOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkIdOverWrite.setStatus('current')
if mibBuilder.loadTexts: linkIdOverWrite.setDescription("Description. This object is used to config linkId overwrite operation. LinkId is system resource managed by PON card firmware and used to identify each Logical Link. When a new Link register, a LinkId will be assigned. When the registered Link off-line or de-register,the assigned LinkId will still be reserved. Such a policy will lead a result that is the allowed linkId resource exhaust. When this occurred, the device manager can have two choices, delete the off-line linkId entry manually or permit the device firmware itself to overwrite the oldest assigned linkId by seting the value of this object to 'yes'. Generally, the choice will be made based on if the user care the off-line Links' configurations and status. If don't care, set this value to 'yes' will be a better choice. ")
onuIdOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuIdOverWrite.setStatus('current')
if mibBuilder.loadTexts: onuIdOverWrite.setDescription("Refer to 'linkIdOverWrite' description")
oltOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 20), DeviceOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltOperate.setStatus('current')
if mibBuilder.loadTexts: oltOperate.setDescription('This object define a collection of operate actions which can be apply on olt device')
oltUpgradeStat = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7, 8, 10))).clone(namedValues=NamedValues(("booting", 1), ("normalRun", 2), ("upgrading", 6), ("upgradeOk", 7), ("upgradeErr", 8), ("upgradeOnu", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltUpgradeStat.setStatus('current')
if mibBuilder.loadTexts: oltUpgradeStat.setDescription('Description.')
onuMgmtDefType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onuMgmtTk", 1), ("onuMgmtCtc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuMgmtDefType.setStatus('current')
if mibBuilder.loadTexts: onuMgmtDefType.setDescription('Description.')
oltAdvancedManage = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4))
oltChipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: oltChipInfoTable.setStatus('current')
if mibBuilder.loadTexts: oltChipInfoTable.setDescription('Description. reserved, may or may not support')
oltChipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltChipInfoEntry.setStatus('current')
if mibBuilder.loadTexts: oltChipInfoEntry.setDescription('Each entry in this table contain an olt info')
oltChipProCode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipProCode.setStatus('current')
if mibBuilder.loadTexts: oltChipProCode.setDescription('Description. olt chip product code')
oltChipVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipVer.setStatus('current')
if mibBuilder.loadTexts: oltChipVer.setDescription('Description.olt chip version')
oltChipFirmVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipFirmVer.setStatus('current')
if mibBuilder.loadTexts: oltChipFirmVer.setDescription('Description.olt chip frimware version')
oltChipBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipBootVer.setStatus('current')
if mibBuilder.loadTexts: oltChipBootVer.setDescription('olt chip boot firmware version')
oltChipPersVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipPersVer.setStatus('current')
if mibBuilder.loadTexts: oltChipPersVer.setDescription("olt chip's personality file version")
oltChipApp0Ver = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipApp0Ver.setStatus('current')
if mibBuilder.loadTexts: oltChipApp0Ver.setDescription('olt chip application file version')
oltChipApp1Ver = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipApp1Ver.setStatus('current')
if mibBuilder.loadTexts: oltChipApp1Ver.setDescription('olt chip application file version')
oltChipDiagVer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oltChipDiagVer.setStatus('current')
if mibBuilder.loadTexts: oltChipDiagVer.setDescription('olt chip diagnostic file version')
oltOamRateTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: oltOamRateTable.setStatus('current')
if mibBuilder.loadTexts: oltOamRateTable.setDescription('olt oam rate configurations')
oltOamRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltOamRateEntry.setStatus('current')
if mibBuilder.loadTexts: oltOamRateEntry.setDescription('Each entry in this table contain configurations for each OLT')
minOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('sec/PDU').setMaxAccess("readwrite")
if mibBuilder.loadTexts: minOamRate.setStatus('current')
if mibBuilder.loadTexts: minOamRate.setDescription('Description. Reserved, EMS may not be support')
maxOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('PDUs/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxOamRate.setStatus('current')
if mibBuilder.loadTexts: maxOamRate.setDescription('Description. Reserved, EMS may not be support')
oamRspTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamRspTimeout.setStatus('current')
if mibBuilder.loadTexts: oamRspTimeout.setDescription('Description. Reserved, EMS may not be support')
discoveryParaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3), )
if mibBuilder.loadTexts: discoveryParaTable.setStatus('current')
if mibBuilder.loadTexts: discoveryParaTable.setDescription('Description. Reserved. ONU discovery process parameters. These parameters are associated with the transmit distance')
discoveryParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: discoveryParaEntry.setStatus('current')
if mibBuilder.loadTexts: discoveryParaEntry.setDescription('Each entry in this table contain configurations for each OLT')
discoverPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(1000)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverPeriod.setStatus('current')
if mibBuilder.loadTexts: discoverPeriod.setDescription('Discovery process parameters')
discoverWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(84, 131070)).clone(16319)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverWindow.setStatus('current')
if mibBuilder.loadTexts: discoverWindow.setDescription('Discovery process parameters')
discoverTimeoutVal = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('100ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverTimeoutVal.setStatus('current')
if mibBuilder.loadTexts: discoverTimeoutVal.setDescription('Discovery process parameters')
oltAdvancedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4), )
if mibBuilder.loadTexts: oltAdvancedConfigTable.setStatus('current')
if mibBuilder.loadTexts: oltAdvancedConfigTable.setDescription('This table contain the information which is not normally used but may be usefull in some special circumstance ')
oltAdvancedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltAdvancedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oltAdvancedConfigEntry.setDescription('Each entry in this table contain the information for one OLT ')
oltAddiVlanEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltAddiVlanEthType.setStatus('current')
if mibBuilder.loadTexts: oltAddiVlanEthType.setDescription('Additional Ethernet type to identify vlan frames. 0 1 2 3 --------------------------------------------- vlan EthType| tag upstream | tag downstream | --------------------------------------------- 2byte 1byte 1byte vlan EthType: default 0x8100 tag upstream: 1->use this type to tag upstream, 0->untag tag downstream: 1->use this type to tag downstream, 0->untag')
onuUltraLongDistanceTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuUltraLongDistanceTrans.setStatus('current')
if mibBuilder.loadTexts: onuUltraLongDistanceTrans.setDescription('Description.Reserved. This object is used for enable the ultra-long distance transmission of PON. Normally, this object should not be changed, the disable allowwed transmit distance is 20KM for PON standard. But,if some user want it transmit more longer than standard for some special case, he can set this value to true. When change this configuration, several parameters should be changed internally. Detail operations will not be descripted here. ')
oltBroadCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 3), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltBroadCastRateCtl.setStatus('current')
if mibBuilder.loadTexts: oltBroadCastRateCtl.setDescription('Description.')
oltMultiCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltMultiCastRateCtl.setStatus('current')
if mibBuilder.loadTexts: oltMultiCastRateCtl.setDescription('Description.')
oltUnkUcCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 5), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltUnkUcCastRateCtl.setStatus('current')
if mibBuilder.loadTexts: oltUnkUcCastRateCtl.setDescription('Description.')
oltBroadCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltBroadCastRate.setStatus('current')
if mibBuilder.loadTexts: oltBroadCastRate.setDescription('Description.')
oltBridgeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5), )
if mibBuilder.loadTexts: oltBridgeConfigTable.setStatus('current')
if mibBuilder.loadTexts: oltBridgeConfigTable.setDescription(' ')
oltBridgeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: oltBridgeConfigEntry.setStatus('current')
if mibBuilder.loadTexts: oltBridgeConfigEntry.setDescription(' ')
dynMacAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2419200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynMacAgeTime.setStatus('current')
if mibBuilder.loadTexts: dynMacAgeTime.setDescription("OLT Mac leared entry age limit, the value unit is '1s'. Set this value to 0 will disable mac age feature")
downStreamResetAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downStreamResetAgeTimer.setStatus('current')
if mibBuilder.loadTexts: downStreamResetAgeTimer.setDescription("Generally, only when olt receive learned mac from upstream (from PON port) will reset the age timer. This object give us an option to let olt reset age timer when received learned mac from downstream (from OLT's SNI port).")
bridgedVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgedVlanNumber.setStatus('current')
if mibBuilder.loadTexts: bridgedVlanNumber.setDescription('briged vlan number')
macOverWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macOverWrite.setStatus('current')
if mibBuilder.loadTexts: macOverWrite.setDescription('when enable, the new coming MAC will overwrite the oldest learned MAC when the per-link learning buf is full; when disable, the frame with new mac will be dropped when the learning buf is full.')
discardUnknownMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 5), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discardUnknownMac.setStatus('current')
if mibBuilder.loadTexts: discardUnknownMac.setDescription('Discard unknown MAC, set to enable will cause the OLT to drop downstream frames with unknown (not learned) DAs')
forwardTagOnSimpleBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 5, 1, 6), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardTagOnSimpleBridge.setStatus('current')
if mibBuilder.loadTexts: forwardTagOnSimpleBridge.setDescription("Set the object to 'allow' will permit the OLT to forward tagged frames on simple bridge links. Set to 'disallow' will not permit the OLT to forward tagged frames on simple bridges.")
dba = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6))
linkLevelSizeTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1), )
if mibBuilder.loadTexts: linkLevelSizeTable.setStatus('current')
if mibBuilder.loadTexts: linkLevelSizeTable.setDescription('This table contains the configurations that the logical links which can register on each priority level')
linkLevelSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: linkLevelSizeEntry.setStatus('current')
if mibBuilder.loadTexts: linkLevelSizeEntry.setDescription('Each entry indicate an onu')
level0Links = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: level0Links.setStatus('current')
if mibBuilder.loadTexts: level0Links.setDescription("Priority level 0 link numbers that the olt will allow to register. Priority level 0 is 'min bw=max bw and the delay is sensitive' this object can only be changed when the olt is diable")
level1Links = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: level1Links.setStatus('current')
if mibBuilder.loadTexts: level1Links.setDescription("Priority level 1 link numbers that the olt will allow to register. Priority level 1 is 'min bw!=0' this object can only be changed when the olt is diable")
level2Links = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: level2Links.setStatus('current')
if mibBuilder.loadTexts: level2Links.setDescription("Priority level 2 link numbers that the olt will allow to register. Priority level 2 is 'min bw=0' this object can only be changed when the olt is diable")
nonDbaLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nonDbaLinks.setStatus('current')
if mibBuilder.loadTexts: nonDbaLinks.setDescription('TDM level link numbers that the olt will allow to register. this object can only be changed when the olt is diable ')
dbaDropDownWeightTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2), )
if mibBuilder.loadTexts: dbaDropDownWeightTable.setStatus('current')
if mibBuilder.loadTexts: dbaDropDownWeightTable.setDescription('DBA drop down weight configuration table')
dbaDropDownWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: dbaDropDownWeightEntry.setStatus('current')
if mibBuilder.loadTexts: dbaDropDownWeightEntry.setDescription('DBA drop down weight configuration entry')
l0DropDownWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l0DropDownWeight.setStatus('current')
if mibBuilder.loadTexts: l0DropDownWeight.setDescription('level 0 drop down weight')
l1DropDownWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l1DropDownWeight.setStatus('current')
if mibBuilder.loadTexts: l1DropDownWeight.setDescription('level 1 drop down weight')
l2DropDownWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2DropDownWeight.setStatus('current')
if mibBuilder.loadTexts: l2DropDownWeight.setDescription('level 2 drop down weight')
dbaPollRateTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3), )
if mibBuilder.loadTexts: dbaPollRateTable.setStatus('current')
if mibBuilder.loadTexts: dbaPollRateTable.setDescription('DBA polling rate table')
dbaPollRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: dbaPollRateEntry.setStatus('current')
if mibBuilder.loadTexts: dbaPollRateEntry.setDescription('DBA polling rate entry')
l0PollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l0PollingRate.setStatus('current')
if mibBuilder.loadTexts: l0PollingRate.setDescription('level 0 links polling rate')
l1PollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l1PollingRate.setStatus('current')
if mibBuilder.loadTexts: l1PollingRate.setDescription('level 1 links polling rate')
l2PollingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PollingRate.setStatus('current')
if mibBuilder.loadTexts: l2PollingRate.setDescription('level 2 links polling rate')
aggreBandWidthTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7), )
if mibBuilder.loadTexts: aggreBandWidthTable.setStatus('current')
if mibBuilder.loadTexts: aggreBandWidthTable.setDescription('Aggregate bandwidth configuration table')
aggreBandWidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "directionId"))
if mibBuilder.loadTexts: aggreBandWidthEntry.setStatus('current')
if mibBuilder.loadTexts: aggreBandWidthEntry.setDescription('Aggregate bandwidth configuration entry')
directionId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1, 1), DataDirection())
if mibBuilder.loadTexts: directionId.setStatus('current')
if mibBuilder.loadTexts: directionId.setDescription('Administrativly assigned identification for the purpose to distinguish different data direction')
aggreBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggreBandWidth.setStatus('current')
if mibBuilder.loadTexts: aggreBandWidth.setDescription('Aggregate bandwidth')
aggreMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggreMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: aggreMaxBurstSize.setDescription('Aggregate max burst size')
oltAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8), )
if mibBuilder.loadTexts: oltAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: oltAclRuleTable.setDescription('OLT acl rule configuration table')
oltAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "oltPortId"))
if mibBuilder.loadTexts: oltAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: oltAclRuleEntry.setDescription('OLT configuration rule entry')
oltPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oltPonPort", 1), ("oltSniPort", 2))))
if mibBuilder.loadTexts: oltPortId.setStatus('current')
if mibBuilder.loadTexts: oltPortId.setDescription('Administrativly assigned port ID, used as entry index')
oltAclRuleData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 8, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oltAclRuleData.setStatus('current')
if mibBuilder.loadTexts: oltAclRuleData.setDescription(' Description: This variable is used to contain the OLT ACL data. Data format: GET: 2 2 1 1 1 1 ------------------------------------------------------------------ |data length|rule numbers|direction|priority|action|clause numbers| ------------------------------------------------------------------- |<------repeat rule number times---------- 1 6 1 -------------------------------- | field | value | operator | -------------------------------- |<-repeat clause number times->| ------------------------------>| SET/DELETE: 2 1 1 1 1 --------------------------------------------------------- |data length|command type|priority|reserved|clause numbers| --------------------------------------------------------- 1 6 1 -------------------------------- | field | value | operator | -------------------------------- |<-repeat clause number times->| para comment: command type: 1->set, 2->delete ')
priCopyMapTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 9), )
if mibBuilder.loadTexts: priCopyMapTable.setStatus('current')
if mibBuilder.loadTexts: priCopyMapTable.setDescription('Priority copy value map configuration table')
priCopyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 9, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: priCopyMapEntry.setStatus('current')
if mibBuilder.loadTexts: priCopyMapEntry.setDescription('Priority copy value map configuration entry')
priCopyMapData = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 9, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priCopyMapData.setStatus('current')
if mibBuilder.loadTexts: priCopyMapData.setDescription(' 1 1 1 .. 1 .. ----------------------------------------------------------------------------------------- |A/B Precedence|Default COS| N | COS | M | COS | ----------------------------------------------------------------------------------------- |<-repeat N times->| |<-repeat M times->|')
oltIgmpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10))
igmpProxyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1), )
if mibBuilder.loadTexts: igmpProxyConfigTable.setStatus('current')
if mibBuilder.loadTexts: igmpProxyConfigTable.setDescription(' ')
igmpProxyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: igmpProxyConfigEntry.setReference('add all other needed igmp proxy parameters in this table')
if mibBuilder.loadTexts: igmpProxyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: igmpProxyConfigEntry.setDescription(' ')
maxIgmpGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxIgmpGroups.setStatus('current')
if mibBuilder.loadTexts: maxIgmpGroups.setDescription(' ')
robustCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: robustCount.setStatus('current')
if mibBuilder.loadTexts: robustCount.setDescription(' ')
queryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryInterval.setStatus('current')
if mibBuilder.loadTexts: queryInterval.setDescription(' ')
queryRspTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryRspTimeout.setStatus('current')
if mibBuilder.loadTexts: queryRspTimeout.setDescription(' ')
queryMaxResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queryMaxResTime.setStatus('current')
if mibBuilder.loadTexts: queryMaxResTime.setDescription(' ')
startQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startQueryCount.setStatus('current')
if mibBuilder.loadTexts: startQueryCount.setDescription(' ')
startupQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(12, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startupQueryInterval.setStatus('current')
if mibBuilder.loadTexts: startupQueryInterval.setDescription('startup query intrval')
lastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: lastMemberQueryCount.setDescription('last Member Query Count,range 0--16')
lastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: lastMemberQueryInterval.setDescription('last Member Query Interval')
lastMemberQueryResTime = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lastMemberQueryResTime.setStatus('current')
if mibBuilder.loadTexts: lastMemberQueryResTime.setDescription('last Membe rQuery Response Time')
upstreamRetransCount = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upstreamRetransCount.setStatus('current')
if mibBuilder.loadTexts: upstreamRetransCount.setDescription('upstream Retransmit Count')
upstreamRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upstreamRetransInterval.setStatus('current')
if mibBuilder.loadTexts: upstreamRetransInterval.setDescription('Upstream Retransmit Interval,range 1--65535')
igmpQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQueues.setStatus('current')
if mibBuilder.loadTexts: igmpQueues.setDescription(' ')
igmpSlaMinGuaranteedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaMinGuaranteedBW.setStatus('current')
if mibBuilder.loadTexts: igmpSlaMinGuaranteedBW.setDescription(' ')
igmpSlaMaxAllowedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaMaxAllowedBW.setStatus('current')
if mibBuilder.loadTexts: igmpSlaMaxAllowedBW.setDescription(' ')
igmpSlaDelaySensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sensitive", 1), ("tolerant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaDelaySensitive.setStatus('current')
if mibBuilder.loadTexts: igmpSlaDelaySensitive.setDescription(' ')
igmpSlaMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSlaMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: igmpSlaMaxBurstSize.setDescription(' ')
igmpProxyOper = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("restorePara", 2), ("refreshGroups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProxyOper.setStatus('current')
if mibBuilder.loadTexts: igmpProxyOper.setDescription('Restore all the configurable values to factory default')
igmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2), )
if mibBuilder.loadTexts: igmpGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpGroupTable.setDescription(' ')
igmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "igmpGroupIndex"))
if mibBuilder.loadTexts: igmpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igmpGroupEntry.setDescription(' ')
igmpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: igmpGroupIndex.setStatus('current')
if mibBuilder.loadTexts: igmpGroupIndex.setDescription('Administratorly assigned entry index value')
igmpGroupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupVlan.setStatus('current')
if mibBuilder.loadTexts: igmpGroupVlan.setDescription(' ')
igmpGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupIpAddr.setStatus('current')
if mibBuilder.loadTexts: igmpGroupIpAddr.setDescription(' ')
accessUserIdentifer = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11))
accessUserIdentiferConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1), )
if mibBuilder.loadTexts: accessUserIdentiferConfigTable.setStatus('current')
if mibBuilder.loadTexts: accessUserIdentiferConfigTable.setDescription('Description. PPPOE+ feature management objects')
accessUserIdentiferConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"))
if mibBuilder.loadTexts: accessUserIdentiferConfigEntry.setStatus('current')
if mibBuilder.loadTexts: accessUserIdentiferConfigEntry.setDescription('Description. The PPPOE+ feature act on each OLT (PON port)')
pppoePlusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1, 1, 1), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePlusEnable.setStatus('current')
if mibBuilder.loadTexts: pppoePlusEnable.setDescription('Description. Enable/Disable pppoe+ feature, when enabled PON card firmware will sniff each pppoe require frames sent from user divice and then add cared info (normal info will be onu ID,onu port, vlan ID) to the protocol specified frame field. This feature is usefull when exact user identify is needed. Disable OLT is essential before set this feature.')
dhcpOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 11, 1, 1, 2), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82.setDescription('Description.')
llid = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12))
llidConfigTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1), )
if mibBuilder.loadTexts: llidConfigTable.setStatus('current')
if mibBuilder.loadTexts: llidConfigTable.setDescription(' ')
llidConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: llidConfigEntry.setStatus('current')
if mibBuilder.loadTexts: llidConfigEntry.setDescription(' ')
linkId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: linkId.setStatus('current')
if mibBuilder.loadTexts: linkId.setDescription("this object is defined to identify 'Logical Links' registered on OLT, it is a numbered value begin from 1 to max permit Link numbers. it is used within a OLT range. this object is different from the followwed 'llidAssigned' object,the latter is the LLID value allocated by OLT itself. the 'linkId' is allocated by PON card software.")
llidAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llidAssigned.setStatus('current')
if mibBuilder.loadTexts: llidAssigned.setDescription('LLID value allocated by OLT')
associatedOnuId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: associatedOnuId.setStatus('current')
if mibBuilder.loadTexts: associatedOnuId.setDescription('Associated ONU ID. the ONU ID that this Logical Link register from')
llidMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: llidMac.setStatus('current')
if mibBuilder.loadTexts: llidMac.setDescription("Logical Link's MAC Address")
linkOnLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 5), DeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkOnLineStatus.setStatus('current')
if mibBuilder.loadTexts: linkOnLineStatus.setDescription('Description.')
keyChangeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: keyChangeTimer.setStatus('current')
if mibBuilder.loadTexts: keyChangeTimer.setDescription("encryption used key change timer, set to non-zero value will enable down stream encryption, set to zero will disable this feature. the value unit is 'second'.")
llidBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("simpleBridged", 1), ("dedicatedSingleVlan", 2), ("dedicatedDoubleVlan", 3), ("sharedVlan", 4), ("transparentVlan", 5), ("translatedVlan", 6), ("linkCrossConnect", 7), ("prioritiedVlan", 8), ("priorityCopySingleVlan", 9), ("priorityCopyDoubleVlan", 10), ("priorityCopySharedVlan", 11), ("prioritySharedVlan", 12), ("prioritySimpleBridged", 13), ("transparentPrioritySharedVlan", 14), ("transparentSharedVlanWithBroadcast", 15), ("doubleTaggedSharedVlan", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llidBridgeType.setStatus('current')
if mibBuilder.loadTexts: llidBridgeType.setDescription(' ')
llidMacEntryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llidMacEntryLimit.setStatus('current')
if mibBuilder.loadTexts: llidMacEntryLimit.setDescription(' ')
crossConnectLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crossConnectLinkId.setStatus('current')
if mibBuilder.loadTexts: crossConnectLinkId.setDescription('the link ID of the link which Cross Connect with this link if it is in Cross Connect Bridge Mode.')
llidOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("block", 2), ("reRegist", 3), ("breakCrossLink", 4), ("restoreConfig", 5), ("deleteLinkEntry", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: llidOperation.setStatus('current')
if mibBuilder.loadTexts: llidOperation.setDescription(' ')
llidAdvancedManage = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2))
linkOamRateTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1), )
if mibBuilder.loadTexts: linkOamRateTable.setStatus('current')
if mibBuilder.loadTexts: linkOamRateTable.setDescription('Description. Reserved, generally, the Link OAM rate is used for debugging ')
linkOamRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: linkOamRateEntry.setStatus('current')
if mibBuilder.loadTexts: linkOamRateEntry.setDescription('Description.')
maxLinkOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLinkOamRate.setStatus('current')
if mibBuilder.loadTexts: maxLinkOamRate.setDescription('Description.')
minLinkOamRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: minLinkOamRate.setStatus('current')
if mibBuilder.loadTexts: minLinkOamRate.setDescription('Description.')
sla = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3))
llidSlaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1), )
if mibBuilder.loadTexts: llidSlaTable.setStatus('current')
if mibBuilder.loadTexts: llidSlaTable.setDescription(' ')
llidSlaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "directionId"))
if mibBuilder.loadTexts: llidSlaEntry.setStatus('current')
if mibBuilder.loadTexts: llidSlaEntry.setDescription(' ')
minGuaranteedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: minGuaranteedBW.setStatus('current')
if mibBuilder.loadTexts: minGuaranteedBW.setDescription('Minimum guaranted bandwidth')
maxAllowedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxAllowedBW.setStatus('current')
if mibBuilder.loadTexts: maxAllowedBW.setDescription('Max allowed bandwidth')
delaySensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tolerant", 1), ("sensitive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: delaySensitive.setStatus('current')
if mibBuilder.loadTexts: delaySensitive.setDescription('transmit delay sensitive or tolerant')
maxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxBurstSize.setStatus('current')
if mibBuilder.loadTexts: maxBurstSize.setDescription('Maximum burst size')
slaEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 1, 1, 5), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaEnable.setStatus('current')
if mibBuilder.loadTexts: slaEnable.setDescription('Sla enable disable')
slaWeightTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2), )
if mibBuilder.loadTexts: slaWeightTable.setStatus('current')
if mibBuilder.loadTexts: slaWeightTable.setDescription(' ')
slaWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "directionId"))
if mibBuilder.loadTexts: slaWeightEntry.setStatus('current')
if mibBuilder.loadTexts: slaWeightEntry.setDescription(' ')
dbaTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbaTokens.setStatus('current')
if mibBuilder.loadTexts: dbaTokens.setDescription(' ')
schedulerMinTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulerMinTokens.setStatus('current')
if mibBuilder.loadTexts: schedulerMinTokens.setDescription(' ')
schedulerMaxTokens = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulerMaxTokens.setStatus('current')
if mibBuilder.loadTexts: schedulerMaxTokens.setDescription(' ')
forceReport = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceReport.setStatus('current')
if mibBuilder.loadTexts: forceReport.setDescription(' ')
multicastSlaTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3), )
if mibBuilder.loadTexts: multicastSlaTable.setStatus('current')
if mibBuilder.loadTexts: multicastSlaTable.setDescription(' ')
multicastSlaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: multicastSlaEntry.setStatus('current')
if mibBuilder.loadTexts: multicastSlaEntry.setDescription(' ')
multiMinGuanBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiMinGuanBW.setStatus('current')
if mibBuilder.loadTexts: multiMinGuanBW.setDescription(' ')
multiMaxAllowedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiMaxAllowedBW.setStatus('current')
if mibBuilder.loadTexts: multiMaxAllowedBW.setDescription(' ')
multiDelaySensitive = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sensitive", 1), ("tolerant", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiDelaySensitive.setStatus('current')
if mibBuilder.loadTexts: multiDelaySensitive.setDescription(' ')
multiMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: multiMaxBurstSize.setDescription(' ')
llidVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4))
llidVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1), )
if mibBuilder.loadTexts: llidVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: llidVlanCfgTable.setDescription(' ')
llidVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "llidVlanTag"))
if mibBuilder.loadTexts: llidVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: llidVlanCfgEntry.setDescription(' ')
llidVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: llidVlanTag.setStatus('current')
if mibBuilder.loadTexts: llidVlanTag.setDescription('Vlan and translated vlan tags. Data formats: ------------------------------ vlan tag | translated vlan id | ------------------------------ 2B 2B translated vlan tag must be set to 0 if the link is not in vlan translate mode')
llidVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: llidVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: llidVlanRowStatus.setDescription('Create or delete a vlan tag for a given LinkId')
vlanLlidTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2), )
if mibBuilder.loadTexts: vlanLlidTable.setStatus('current')
if mibBuilder.loadTexts: vlanLlidTable.setDescription(' ')
vlanLlidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "vlanId"))
if mibBuilder.loadTexts: vlanLlidEntry.setStatus('current')
if mibBuilder.loadTexts: vlanLlidEntry.setDescription(' ')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanId.setStatus('current')
if mibBuilder.loadTexts: vlanId.setDescription(' ')
linkIDsInVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIDsInVlan.setStatus('current')
if mibBuilder.loadTexts: linkIDsInVlan.setDescription('This object is a linkId container, which contain all the linkIds value which belong to this vlan. Data formats: ------------------------------------------------ link number|linkId0|linkId1|.....|linkIdn|...... ------------------------------------------------ 2B 1B 1B 1B')
priVlanTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3), )
if mibBuilder.loadTexts: priVlanTable.setStatus('current')
if mibBuilder.loadTexts: priVlanTable.setDescription('Description. Reserved')
priVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: priVlanEntry.setStatus('current')
if mibBuilder.loadTexts: priVlanEntry.setDescription('Description.')
netVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netVlanId.setStatus('current')
if mibBuilder.loadTexts: netVlanId.setDescription('Description.')
upstreamCos = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upstreamCos.setStatus('current')
if mibBuilder.loadTexts: upstreamCos.setDescription('Description.')
priSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cos", 1), ("tos", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: priSelector.setStatus('current')
if mibBuilder.loadTexts: priSelector.setDescription('Description.')
minPriValue = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: minPriValue.setStatus('current')
if mibBuilder.loadTexts: minPriValue.setDescription('Description.')
maxPriValue = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: maxPriValue.setStatus('current')
if mibBuilder.loadTexts: maxPriValue.setDescription('Description.')
transNonTosFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: transNonTosFrame.setStatus('current')
if mibBuilder.loadTexts: transNonTosFrame.setDescription('Description.')
priVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: priVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: priVlanRowStatus.setDescription('Description.')
blockedLinkTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5), )
if mibBuilder.loadTexts: blockedLinkTable.setStatus('current')
if mibBuilder.loadTexts: blockedLinkTable.setDescription(' ')
blockedLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: blockedLinkEntry.setStatus('current')
if mibBuilder.loadTexts: blockedLinkEntry.setDescription(' ')
blockedLinkMac = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: blockedLinkMac.setStatus('current')
if mibBuilder.loadTexts: blockedLinkMac.setDescription(' ')
blockedMacOper = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("unblock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: blockedMacOper.setStatus('current')
if mibBuilder.loadTexts: blockedMacOper.setDescription(' ')
macAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6))
dynamicMac = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1))
dynMacOperTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 1), )
if mibBuilder.loadTexts: dynMacOperTable.setStatus('current')
if mibBuilder.loadTexts: dynMacOperTable.setDescription(' ')
dynMacOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"))
if mibBuilder.loadTexts: dynMacOperEntry.setStatus('current')
if mibBuilder.loadTexts: dynMacOperEntry.setDescription(' ')
dynMacOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("clear", 2), ("refresh", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynMacOperation.setStatus('current')
if mibBuilder.loadTexts: dynMacOperation.setDescription(' ')
dynMacTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2), )
if mibBuilder.loadTexts: dynMacTable.setStatus('current')
if mibBuilder.loadTexts: dynMacTable.setDescription(' ')
dynMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "dynMacIndex"))
if mibBuilder.loadTexts: dynMacEntry.setStatus('current')
if mibBuilder.loadTexts: dynMacEntry.setDescription(' ')
dynMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: dynMacIndex.setStatus('current')
if mibBuilder.loadTexts: dynMacIndex.setDescription(' ')
dynMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynMacAddr.setStatus('current')
if mibBuilder.loadTexts: dynMacAddr.setDescription(' ')
staticMac = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2))
staticMacTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1), )
if mibBuilder.loadTexts: staticMacTable.setStatus('current')
if mibBuilder.loadTexts: staticMacTable.setDescription(' ')
staticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"), (0, "FD-OLT-MIB", "oltId"), (0, "FD-OLT-MIB", "linkId"), (0, "FD-OLT-MIB", "staticMacIndex"))
if mibBuilder.loadTexts: staticMacEntry.setStatus('current')
if mibBuilder.loadTexts: staticMacEntry.setDescription(' ')
staticMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: staticMacIndex.setStatus('current')
if mibBuilder.loadTexts: staticMacIndex.setDescription('Description.')
staticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMacAddr.setStatus('current')
if mibBuilder.loadTexts: staticMacAddr.setDescription(' ')
staticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 12, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: staticMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: staticMacRowStatus.setDescription(' ')
onuP2pTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13), )
if mibBuilder.loadTexts: onuP2pTable.setStatus('current')
if mibBuilder.loadTexts: onuP2pTable.setDescription('Description.')
onuP2pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13, 1), ).setIndexNames((0, "FD-SYSTEM-MIB", "ponCardSlotId"))
if mibBuilder.loadTexts: onuP2pEntry.setStatus('current')
if mibBuilder.loadTexts: onuP2pEntry.setDescription('Description.')
onuP2pEnDis = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuP2pEnDis.setStatus('current')
if mibBuilder.loadTexts: onuP2pEnDis.setDescription('0:disable 1:enable')
onuP2pPonEnDis = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 65536, 65537))).clone(namedValues=NamedValues(("disdis", 0), ("disen", 1), ("endis", 65536), ("enen", 65537)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuP2pPonEnDis.setStatus('current')
if mibBuilder.loadTexts: onuP2pPonEnDis.setDescription('Description.')
fdOltConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20))
fdOltGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1))
oltBaseManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 1)).setObjects(("FD-OLT-MIB", "oltMacAddr"), ("FD-OLT-MIB", "oltWorkState"), ("FD-OLT-MIB", "oltEnable"), ("FD-OLT-MIB", "maxPermitLLIDNumber"), ("FD-OLT-MIB", "registeredLLIDNumber"), ("FD-OLT-MIB", "accessedOnuNumber"), ("FD-OLT-MIB", "oltUpgradeStat"), ("FD-OLT-MIB", "onuMgmtDefType"), ("FD-OLT-MIB", "oltOperate"), ("FD-OLT-MIB", "linkIdExhaust"), ("FD-OLT-MIB", "onuIdExhaust"), ("FD-OLT-MIB", "linkIdOverWrite"), ("FD-OLT-MIB", "onuIdOverWrite"), ("FD-OLT-MIB", "dynMacAgeTime"), ("FD-OLT-MIB", "downStreamResetAgeTimer"), ("FD-OLT-MIB", "bridgedVlanNumber"), ("FD-OLT-MIB", "macOverWrite"), ("FD-OLT-MIB", "discardUnknownMac"), ("FD-OLT-MIB", "forwardTagOnSimpleBridge"), ("FD-OLT-MIB", "level0Links"), ("FD-OLT-MIB", "level1Links"), ("FD-OLT-MIB", "level2Links"), ("FD-OLT-MIB", "nonDbaLinks"), ("FD-OLT-MIB", "l0DropDownWeight"), ("FD-OLT-MIB", "l1DropDownWeight"), ("FD-OLT-MIB", "l2DropDownWeight"), ("FD-OLT-MIB", "l0PollingRate"), ("FD-OLT-MIB", "l1PollingRate"), ("FD-OLT-MIB", "l2PollingRate"), ("FD-OLT-MIB", "aggreBandWidth"), ("FD-OLT-MIB", "aggreMaxBurstSize"), ("FD-OLT-MIB", "oltAclRuleData"), ("FD-OLT-MIB", "priCopyMapData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltBaseManageGroup = oltBaseManageGroup.setStatus('current')
if mibBuilder.loadTexts: oltBaseManageGroup.setDescription('A collection of objects providing the basic OLT management.')
oltAdvanceManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 2)).setObjects(("FD-OLT-MIB", "oltChipProCode"), ("FD-OLT-MIB", "oltChipVer"), ("FD-OLT-MIB", "oltChipFirmVer"), ("FD-OLT-MIB", "oltChipBootVer"), ("FD-OLT-MIB", "oltChipPersVer"), ("FD-OLT-MIB", "oltChipApp0Ver"), ("FD-OLT-MIB", "oltChipApp1Ver"), ("FD-OLT-MIB", "oltChipDiagVer"), ("FD-OLT-MIB", "minOamRate"), ("FD-OLT-MIB", "maxOamRate"), ("FD-OLT-MIB", "oamRspTimeout"), ("FD-OLT-MIB", "discoverPeriod"), ("FD-OLT-MIB", "discoverWindow"), ("FD-OLT-MIB", "discoverTimeoutVal"), ("FD-OLT-MIB", "oltAddiVlanEthType"), ("FD-OLT-MIB", "onuUltraLongDistanceTrans"), ("FD-OLT-MIB", "oltBroadCastRateCtl"), ("FD-OLT-MIB", "oltMultiCastRateCtl"), ("FD-OLT-MIB", "oltUnkUcCastRateCtl"), ("FD-OLT-MIB", "oltBroadCastRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltAdvanceManageGroup = oltAdvanceManageGroup.setStatus('current')
if mibBuilder.loadTexts: oltAdvanceManageGroup.setDescription('A collection of objects providing advanced OLT management feature')
oltIgmpProxyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 3)).setObjects(("FD-OLT-MIB", "maxIgmpGroups"), ("FD-OLT-MIB", "robustCount"), ("FD-OLT-MIB", "queryInterval"), ("FD-OLT-MIB", "queryRspTimeout"), ("FD-OLT-MIB", "queryMaxResTime"), ("FD-OLT-MIB", "startQueryCount"), ("FD-OLT-MIB", "startupQueryInterval"), ("FD-OLT-MIB", "lastMemberQueryCount"), ("FD-OLT-MIB", "lastMemberQueryInterval"), ("FD-OLT-MIB", "lastMemberQueryResTime"), ("FD-OLT-MIB", "upstreamRetransCount"), ("FD-OLT-MIB", "upstreamRetransInterval"), ("FD-OLT-MIB", "igmpQueues"), ("FD-OLT-MIB", "igmpSlaMinGuaranteedBW"), ("FD-OLT-MIB", "igmpSlaMaxAllowedBW"), ("FD-OLT-MIB", "igmpSlaDelaySensitive"), ("FD-OLT-MIB", "igmpSlaMaxBurstSize"), ("FD-OLT-MIB", "igmpProxyOper"), ("FD-OLT-MIB", "igmpGroupVlan"), ("FD-OLT-MIB", "igmpGroupIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltIgmpProxyGroup = oltIgmpProxyGroup.setStatus('current')
if mibBuilder.loadTexts: oltIgmpProxyGroup.setDescription('A collection of objects providing OLT IGMP proxy feature management')
oltPPPoEPlusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 4)).setObjects(("FD-OLT-MIB", "pppoePlusEnable"), ("FD-OLT-MIB", "dhcpOption82"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltPPPoEPlusGroup = oltPPPoEPlusGroup.setStatus('current')
if mibBuilder.loadTexts: oltPPPoEPlusGroup.setDescription('A collection of objects providing pppoe+ feature management')
oltLlidBaseManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 5)).setObjects(("FD-OLT-MIB", "llidAssigned"), ("FD-OLT-MIB", "associatedOnuId"), ("FD-OLT-MIB", "llidMac"), ("FD-OLT-MIB", "linkOnLineStatus"), ("FD-OLT-MIB", "keyChangeTimer"), ("FD-OLT-MIB", "llidBridgeType"), ("FD-OLT-MIB", "llidMacEntryLimit"), ("FD-OLT-MIB", "crossConnectLinkId"), ("FD-OLT-MIB", "llidOperation"), ("FD-OLT-MIB", "minGuaranteedBW"), ("FD-OLT-MIB", "maxAllowedBW"), ("FD-OLT-MIB", "delaySensitive"), ("FD-OLT-MIB", "maxBurstSize"), ("FD-OLT-MIB", "slaEnable"), ("FD-OLT-MIB", "dbaTokens"), ("FD-OLT-MIB", "schedulerMinTokens"), ("FD-OLT-MIB", "schedulerMaxTokens"), ("FD-OLT-MIB", "forceReport"), ("FD-OLT-MIB", "llidVlanRowStatus"), ("FD-OLT-MIB", "linkIDsInVlan"), ("FD-OLT-MIB", "netVlanId"), ("FD-OLT-MIB", "upstreamCos"), ("FD-OLT-MIB", "priSelector"), ("FD-OLT-MIB", "minPriValue"), ("FD-OLT-MIB", "maxPriValue"), ("FD-OLT-MIB", "transNonTosFrame"), ("FD-OLT-MIB", "priVlanRowStatus"), ("FD-OLT-MIB", "blockedLinkMac"), ("FD-OLT-MIB", "blockedMacOper"), ("FD-OLT-MIB", "dynMacOperation"), ("FD-OLT-MIB", "dynMacAddr"), ("FD-OLT-MIB", "staticMacAddr"), ("FD-OLT-MIB", "staticMacRowStatus"), ("FD-OLT-MIB", "multiMinGuanBW"), ("FD-OLT-MIB", "multiMaxAllowedBW"), ("FD-OLT-MIB", "multiDelaySensitive"), ("FD-OLT-MIB", "multiMaxBurstSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltLlidBaseManageGroup = oltLlidBaseManageGroup.setStatus('current')
if mibBuilder.loadTexts: oltLlidBaseManageGroup.setDescription('A collection of objects providing basic LLID (Logical Link) features management')
oltLlidAdvanceManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 6)).setObjects(("FD-OLT-MIB", "maxLinkOamRate"), ("FD-OLT-MIB", "minLinkOamRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oltLlidAdvanceManageGroup = oltLlidAdvanceManageGroup.setStatus('current')
if mibBuilder.loadTexts: oltLlidAdvanceManageGroup.setDescription('A collection of objects providing advanced LLID (Logical Link) features management')
onuP2pManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 1, 7)).setObjects(("FD-OLT-MIB", "onuP2pEnDis"), ("FD-OLT-MIB", "onuP2pPonEnDis"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    onuP2pManageGroup = onuP2pManageGroup.setStatus('current')
if mibBuilder.loadTexts: onuP2pManageGroup.setDescription('Description.')
fdOltCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 2))
fdOltCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 34592, 1, 3, 3, 20, 2, 1)).setObjects(("FD-OLT-MIB", "oltBaseManageGroup"), ("FD-OLT-MIB", "oltIgmpProxyGroup"), ("FD-OLT-MIB", "oltPPPoEPlusGroup"), ("FD-OLT-MIB", "oltLlidBaseManageGroup"), ("FD-OLT-MIB", "onuP2pManageGroup"), ("FD-OLT-MIB", "oltAdvanceManageGroup"), ("FD-OLT-MIB", "oltLlidAdvanceManageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fdOltCompliance = fdOltCompliance.setStatus('current')
if mibBuilder.loadTexts: fdOltCompliance.setDescription('The compliance statement for fd epon device which implement FD-OLT-MIB')
mibBuilder.exportSymbols("FD-OLT-MIB", igmpProxyConfigTable=igmpProxyConfigTable, oltBaseManageGroup=oltBaseManageGroup, oltUnkUcCastRateCtl=oltUnkUcCastRateCtl, dhcpOption82=dhcpOption82, upstreamRetransCount=upstreamRetransCount, forwardTagOnSimpleBridge=forwardTagOnSimpleBridge, slaWeightEntry=slaWeightEntry, bridgedVlanNumber=bridgedVlanNumber, multiMaxAllowedBW=multiMaxAllowedBW, aggreBandWidthEntry=aggreBandWidthEntry, onuIdOverWrite=onuIdOverWrite, igmpSlaDelaySensitive=igmpSlaDelaySensitive, l1DropDownWeight=l1DropDownWeight, onuP2pManageGroup=onuP2pManageGroup, multicastSlaEntry=multicastSlaEntry, oltBridgeConfigEntry=oltBridgeConfigEntry, aggreBandWidthTable=aggreBandWidthTable, igmpGroupIpAddr=igmpGroupIpAddr, staticMacTable=staticMacTable, oltBroadCastRateCtl=oltBroadCastRateCtl, lastMemberQueryResTime=lastMemberQueryResTime, linkOnLineStatus=linkOnLineStatus, keyChangeTimer=keyChangeTimer, priVlanEntry=priVlanEntry, igmpQueues=igmpQueues, oltOamRateTable=oltOamRateTable, oltBridgeConfigTable=oltBridgeConfigTable, blockedLinkMac=blockedLinkMac, transNonTosFrame=transNonTosFrame, dynMacEntry=dynMacEntry, oltAdvancedManage=oltAdvancedManage, schedulerMaxTokens=schedulerMaxTokens, dbaPollRateEntry=dbaPollRateEntry, oltLlidAdvanceManageGroup=oltLlidAdvanceManageGroup, oltOamRateEntry=oltOamRateEntry, dynamicMac=dynamicMac, oltAdvanceManageGroup=oltAdvanceManageGroup, accessUserIdentifer=accessUserIdentifer, priCopyMapTable=priCopyMapTable, onuP2pTable=onuP2pTable, llidVlanCfgTable=llidVlanCfgTable, oltBroadCastRate=oltBroadCastRate, lastMemberQueryInterval=lastMemberQueryInterval, maxLinkOamRate=maxLinkOamRate, macOverWrite=macOverWrite, maxPriValue=maxPriValue, fdOltGroups=fdOltGroups, discoverPeriod=discoverPeriod, linkIdExhaust=linkIdExhaust, fdOltCompliance=fdOltCompliance, onuP2pEnDis=onuP2pEnDis, fdOltConformance=fdOltConformance, minPriValue=minPriValue, netVlanId=netVlanId, llid=llid, llidVlan=llidVlan, dynMacTable=dynMacTable, upstreamRetransInterval=upstreamRetransInterval, llidAssigned=llidAssigned, dynMacAddr=dynMacAddr, priCopyMapData=priCopyMapData, dbaPollRateTable=dbaPollRateTable, priSelector=priSelector, dynMacOperTable=dynMacOperTable, dbaTokens=dbaTokens, aggreBandWidth=aggreBandWidth, llidConfigTable=llidConfigTable, l2PollingRate=l2PollingRate, priCopyMapEntry=priCopyMapEntry, dynMacOperEntry=dynMacOperEntry, oltAdvancedConfigTable=oltAdvancedConfigTable, maxPermitLLIDNumber=maxPermitLLIDNumber, l1PollingRate=l1PollingRate, oltChipVer=oltChipVer, llidAdvancedManage=llidAdvancedManage, staticMacEntry=staticMacEntry, accessUserIdentiferConfigEntry=accessUserIdentiferConfigEntry, onuUltraLongDistanceTrans=onuUltraLongDistanceTrans, slaEnable=slaEnable, oltChipInfoEntry=oltChipInfoEntry, oltMacAddr=oltMacAddr, oltChipApp1Ver=oltChipApp1Ver, blockedLinkEntry=blockedLinkEntry, dbaDropDownWeightEntry=dbaDropDownWeightEntry, macAddr=macAddr, discoveryParaTable=discoveryParaTable, slaWeightTable=slaWeightTable, staticMacIndex=staticMacIndex, startQueryCount=startQueryCount, blockedMacOper=blockedMacOper, blockedLinkTable=blockedLinkTable, crossConnectLinkId=crossConnectLinkId, vlanLlidEntry=vlanLlidEntry, queryRspTimeout=queryRspTimeout, dba=dba, oltAclRuleData=oltAclRuleData, fdOltCompliances=fdOltCompliances, igmpSlaMaxAllowedBW=igmpSlaMaxAllowedBW, multiDelaySensitive=multiDelaySensitive, oltChipBootVer=oltChipBootVer, dynMacAgeTime=dynMacAgeTime, oltChipProCode=oltChipProCode, llidSlaTable=llidSlaTable, pppoePlusEnable=pppoePlusEnable, llidVlanRowStatus=llidVlanRowStatus, oamRspTimeout=oamRspTimeout, queryMaxResTime=queryMaxResTime, oltAclRuleEntry=oltAclRuleEntry, vlanId=vlanId, oltChipInfoTable=oltChipInfoTable, maxIgmpGroups=maxIgmpGroups, delaySensitive=delaySensitive, oltAclRuleTable=oltAclRuleTable, onuIdExhaust=onuIdExhaust, oltChipFirmVer=oltChipFirmVer, igmpGroupTable=igmpGroupTable, priVlanRowStatus=priVlanRowStatus, oltBaseManageTable=oltBaseManageTable, nonDbaLinks=nonDbaLinks, accessUserIdentiferConfigTable=accessUserIdentiferConfigTable, multiMinGuanBW=multiMinGuanBW, dbaDropDownWeightTable=dbaDropDownWeightTable, llidVlanCfgEntry=llidVlanCfgEntry, igmpSlaMaxBurstSize=igmpSlaMaxBurstSize, l0PollingRate=l0PollingRate, linkId=linkId, oltPPPoEPlusGroup=oltPPPoEPlusGroup, llidMacEntryLimit=llidMacEntryLimit, startupQueryInterval=startupQueryInterval, onuMgmtDefType=onuMgmtDefType, oltChipDiagVer=oltChipDiagVer, linkLevelSizeTable=linkLevelSizeTable, multiMaxBurstSize=multiMaxBurstSize, PYSNMP_MODULE_ID=fdOlt, oltId=oltId, oltUpgradeStat=oltUpgradeStat, igmpGroupIndex=igmpGroupIndex, maxBurstSize=maxBurstSize, associatedOnuId=associatedOnuId, upstreamCos=upstreamCos, dynMacOperation=dynMacOperation, maxAllowedBW=maxAllowedBW, minOamRate=minOamRate, oltMultiCastRateCtl=oltMultiCastRateCtl, oltEnable=oltEnable, oltAdvancedConfigEntry=oltAdvancedConfigEntry, dynMacIndex=dynMacIndex, igmpGroupEntry=igmpGroupEntry, minLinkOamRate=minLinkOamRate, discoveryParaEntry=discoveryParaEntry, igmpProxyConfigEntry=igmpProxyConfigEntry, level0Links=level0Links, oltChipPersVer=oltChipPersVer, oltChipApp0Ver=oltChipApp0Ver, l2DropDownWeight=l2DropDownWeight, igmpSlaMinGuaranteedBW=igmpSlaMinGuaranteedBW, multicastSlaTable=multicastSlaTable, oltLlidBaseManageGroup=oltLlidBaseManageGroup, accessedOnuNumber=accessedOnuNumber, staticMacAddr=staticMacAddr, linkOamRateEntry=linkOamRateEntry, fdOlt=fdOlt, onuP2pEntry=onuP2pEntry, sla=sla, llidVlanTag=llidVlanTag, oltBaseManageEntry=oltBaseManageEntry, registeredLLIDNumber=registeredLLIDNumber, oltIgmpProxy=oltIgmpProxy, maxOamRate=maxOamRate, priVlanTable=priVlanTable, robustCount=robustCount, schedulerMinTokens=schedulerMinTokens, oltOperate=oltOperate, igmpProxyOper=igmpProxyOper, oltWorkState=oltWorkState, oltPortId=oltPortId, lastMemberQueryCount=lastMemberQueryCount, queryInterval=queryInterval, llidBridgeType=llidBridgeType, discardUnknownMac=discardUnknownMac, vlanLlidTable=vlanLlidTable, onuP2pPonEnDis=onuP2pPonEnDis, directionId=directionId, staticMacRowStatus=staticMacRowStatus, linkLevelSizeEntry=linkLevelSizeEntry, igmpGroupVlan=igmpGroupVlan, linkIdOverWrite=linkIdOverWrite, linkIDsInVlan=linkIDsInVlan, l0DropDownWeight=l0DropDownWeight, aggreMaxBurstSize=aggreMaxBurstSize, level2Links=level2Links, downStreamResetAgeTimer=downStreamResetAgeTimer, oltIgmpProxyGroup=oltIgmpProxyGroup, level1Links=level1Links, linkOamRateTable=linkOamRateTable, llidConfigEntry=llidConfigEntry, llidOperation=llidOperation, oltAddiVlanEthType=oltAddiVlanEthType, discoverWindow=discoverWindow, minGuaranteedBW=minGuaranteedBW, forceReport=forceReport, staticMac=staticMac, llidSlaEntry=llidSlaEntry, llidMac=llidMac, discoverTimeoutVal=discoverTimeoutVal)
