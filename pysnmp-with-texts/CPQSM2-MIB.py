#
# PySNMP MIB module CPQSM2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSM2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cpqHoTrapFlags, compaq = mibBuilder.importSymbols("CPQHOST-MIB", "cpqHoTrapFlags", "compaq")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, Counter32, Gauge32, ModuleIdentity, NotificationType, Unsigned32, IpAddress, MibIdentifier, iso, Bits, TimeTicks, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Gauge32", "ModuleIdentity", "NotificationType", "Unsigned32", "IpAddress", "MibIdentifier", "iso", "Bits", "TimeTicks", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqSm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9))
cpqSm2MibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 1))
cpqSm2Component = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2))
cpqSm2Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 3))
cpqSm2Interface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 1))
cpqSm2Cntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 2))
cpqSm2EventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 3))
cpqSm2AsyncComm = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 4))
cpqSm2Nic = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 5))
cpqSm2OsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4))
cpqSm2Products = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4))
cpaSm2ProdEisaRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 2))
cpqSm2ProdPCIRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 3))
cpqSm2ProdRILOE = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 4))
cpqSm2ProdiLo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 5))
cpqSm2ProdRILOEII = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 9, 4, 6))
cpqSm2MibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2MibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2MibRevMajor.setDescription('The Major Revision level of the MIB. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information. Correct interpretation of data may require a MIB document with the same major revision level.')
cpqSm2MibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2MibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2MibRevMinor.setDescription('The Minor Revision level of the MIB. A change in the minor revision level may represent some minor additional support, no changes to any pre-existing information has occurred.')
cpqSm2MibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2MibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2MibCondition.setDescription('Remote Insight/ Integrated Lights-Out condition. This represents the overall condition of the Remote Insight/ Integrated Lights-Out.')
cpqSm2OsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2OsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2OsCommonPollFreq.setDescription("The Insight Agent's polling frequency. The frequency, in seconds, at which the Insight Agent requests information from the device driver. A frequency of zero (0) indicates that the Insight Agent retrieves the information upon request of a management station, it does not poll the device driver at a specific interval. If the poll frequency is zero (0) all attempts to write to this object will fail. If the poll frequency is non-zero, setting this value will change the polling frequency of the Insight Agent. Setting the poll frequency to zero (0) will always fail. An agent may choose to fail any request to change the poll frequency to a value that would severely impact system performance.")
cpqSm2OsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqSm2OsCommonModuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModuleTable.setDescription('A table of software modules that provide an interface to the device this MIB describes.')
cpqSm2OsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2OsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqSm2OsCommonModuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModuleEntry.setDescription('A description of a software module that provides an interface to the device this MIB describes.')
cpqSm2OsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModuleIndex.setDescription('A unique index for this module description.')
cpqSm2OsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleName.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModuleName.setDescription('The module name.')
cpqSm2OsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleVersion.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModuleVersion.setDescription('The module version in XX.YY format. Where XX is the major version number and YY is the minor version number. This field will be null (size 0) string if the agent cannot provide the module version.')
cpqSm2OsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModuleDate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModuleDate.setDescription('The module date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqSm2OsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2OsCommonModulePurpose.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2OsCommonModulePurpose.setDescription('The purpose of the module described in this entry.')
cpqSm2CntlrRomDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrRomDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrRomDate.setDescription('Remote Insight/ Integrated Lights-Out ROM Date. The firmware date format is mm/dd/yyyy format.')
cpqSm2CntlrRomRevision = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrRomRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrRomRevision.setDescription('Remote Insight/ Integrated Lights-Out ROM Revision. The revision of the firmware on the Remote Insight/ Integrated Lights-Out.')
cpqSm2CntlrVideoStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrVideoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrVideoStatus.setDescription('Remote Insight/ Integrated Lights-Out Video Hardware Status. The following values are defined: other(1) The Insight Agent is unable to determine the status of the Remote Insight/ Integrated Lights-Out video. enabled(2) The Remote Insight/ Integrated Lights-Out video is enabled. disabled(3) The Remote Insight/ Integrated Lights-Out video is disabled.')
cpqSm2CntlrBatteryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("noBattery", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrBatteryEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrBatteryEnabled.setDescription('Remote Insight Battery Enabled. The following values are defined: other(1) The Insight Agent is unable to determine the status of the Remote Insight battery. enabled(2) The Remote Insight battery is present and is enabled. disabled(3) The Remote Insight battery is present and is disabled. noBattery(4) This Remote Insight model does not use a battery.')
cpqSm2CntlrBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("batteryOk", 2), ("batteryFailed", 3), ("batteryDisconnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBatteryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrBatteryStatus.setDescription('Remote Insight Battery Status. The following values are defined: other(1) The Insight Agent is unable to determine if the battery needs replacement. batteryOk(2) The Remote Insight battery is OK. batteryFailed(3) The Remote Insight battery needs replacement. batteryDisconnected(4) The Remote Insight battery is disconnected.')
cpqSm2CntlrBatteryPercentCharged = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBatteryPercentCharged.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrBatteryPercentCharged.setDescription('Remote Insight Battery Percent Charged. The Remote Insight battery recharge level.')
cpqSm2CntlrAlertStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrAlertStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrAlertStatus.setDescription('Remote Insight/ Integrated Lights-Out Alerting Status. The following values are defined: other(1) The Insight Agent is unable to determine the status of Remote Insight alerting. enabled(2) Remote Insight/ Integrated Lights-Out alerting is enabled. disabled(3) Remote Insight/ Integrated Lights-Out alerting is disabled.')
cpqSm2CntlrPendingAlerts = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noAlertsPending", 2), ("alertsPending", 3), ("clearPendingAlerts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrPendingAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrPendingAlerts.setDescription('Pending Remote Insight/ Integrated Lights-Out alerts. The following values are defined: other(1) The Insight Agent is unable to determine the state of Remote Insight pending alerts. noAlertsPending(2) No Remote Insight/ Integrated Lights-Out alerts are pending. All alerts have been delivered. alertsPending(3) Remote Insight/ Integrated Lights-Out alerts are pending. There are alerts remaining to be sent. clearPendingAlerts(4) This value is set to clear any Remote Insight/ Integrated Lights-Out alerts that have not been sent.')
cpqSm2CntlrSelfTestErrors = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrSelfTestErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrSelfTestErrors.setDescription('Remote Insight/ Integrated Lights-Out Self Test Errors. This is a collection of post error flags. Each bit has the following meaning when it is on (1): Bit 17-31: RESERVED: Always 0. Bit 16: I2C error. Bit 15: EEPROM error. Bit 14: SRAM error. Bit 13: CPLD error. Bit 12: Mouse interface error. Bit 11: NIC Error Bit 10: PCMCIA Error Bit 9: Video Error Bit 8: NVRAM write / read / verify error. Bit 7: NVRAM interface error. Bit 6: Battery interface error. Bit 5: Keyboard interface error. Bit 4: Serial port UART error. Bit 3: Modem UART error. Bit 2: Modem firmware error. Bit 1: Memory test error. Bit 0: Busmaster I/O read error. NOTE: bit 31 is the most significant bit, bit 0 is the least significant. A value of 0 means no errors have occurred.')
cpqSm2CntlrAgentLocation = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hostOsAgent", 1), ("firmwareAgent", 2), ("remoteInsightPciFirmwareAgent", 3), ("enclosureFirmwareAgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrAgentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrAgentLocation.setDescription('Remote Insight/ Integrated Lights-Out Agent Location. The following values are defined: hostOsAgent(1) The Remote Insight/ Integrated Lights-Out MIB information is provided by the host OS agents. firmwareAgent(2) The Remote Insight/ Integrated Lights-Out MIB information is provided by the EISA Remote Insight/ Integrated Lights-Out firmware. remoteInsightPciFirmwareAgent(3) The Remote Insight/ Integrated Lights-Out MIB information is provided by the PCI Remote Insight/ Integrated Lights-Out firmware. enclosureFirmwareAgent(4) The Remote Insight/ Integrated Lights-Out MIB information is provided by a rack enclosure firmware agent.')
cpqSm2CntlrLastDataUpdate = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrLastDataUpdate.setStatus('deprecated')
if mibBuilder.loadTexts: cpqSm2CntlrLastDataUpdate.setDescription('The date and time that the Remote Insight/ Integrated Lights-Out offline data was last updated. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the date and time. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqSm2CntlrDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noData", 2), ("onlineData", 3), ("offlineData", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrDataStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrDataStatus.setDescription('Remote Insight/ Integrated Lights-Out Host OS Data Status. The following values are defined: other(1) The Insight Agent is unable to determine the status of the host OS data. noData(2) There is no data available for the host system OS. onlineData(3) Data is available from the host OS Insight Agent. offlineData(4) A backup copy of data is available from the Remote Insight/ Integrated Lights-Out firmware agent.')
cpqSm2CntlrColdReboot = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2), ("doColdReboot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrColdReboot.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrColdReboot.setDescription('Remote Insight/ Integrated Lights-Out Server Cold Reboot The following values are defined: notAvailable(1) Cold reboot of the system is not available. available(2) Cold reboot of the system is available. doColdReboot(3) This value is set to cause a cold reboot of the system.')
cpqSm2CntlrBadLoginAttemptsThresh = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBadLoginAttemptsThresh.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrBadLoginAttemptsThresh.setDescription('Maximum Unauthorized Login Attempts Threshold. This is the threshold for consecutive unsuccessful login attempts. When this threshold is exceeded, a trap is sent.')
cpqSm2CntlrBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrBoardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrBoardSerialNumber.setDescription('Remote Insight/ Integrated Lights-Out Serial Number. The Serial Number of this Remote Insight/ Integrated Lights-Out.')
cpqSm2CntlrRemoteSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrRemoteSessionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrRemoteSessionStatus.setDescription('Remote Insight/ Integrated Lights-Out Session Status. The following values are defined: other(1) The Insight Agent is unable to determine the status of a Remote Insight session. active(2) A Remote Insight/ Integrated Lights-Out session is active. inactive(3) There is no active Remote Insight/ Integrated Lights-Out session.')
cpqSm2CntlrInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("notResponding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrInterfaceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrInterfaceStatus.setDescription('Remote Insight/ Integrated Lights-Out Interface Status. The following values are defined: other(1) The Insight Agent is unable to determine the status of the Remote Insight/ Integrated Lights-Out interface. ok(2) The Remote Insight/ Integrated Lights-Out firmware is responding to commands. notResponding(3) The Remote Insight/ Integrated Lights-Out firmware is not responding to commands.')
cpqSm2CntlrSystemId = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrSystemId.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrSystemId.setDescription('Remote Insight/ Integrated Lights-Out System ID. A number used to identify this system in Remote Insight/ Integrated Lights-Out pager alerts.')
cpqSm2CntlrKeyboardCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrKeyboardCableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrKeyboardCableStatus.setDescription('Remote Insight Keyboard Cable Status. The following values are defined: other(1) The Insight Agent is unable to determine if the keyboard cable is connected to the Remote Insight. connected(2) The keyboard cable is connected to the Remote Insight. disconnected(3) The keyboard cable is not connected to the Remote Insight.')
cpqSm2ServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2ServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2ServerIpAddress.setDescription('The IP address for this servers connection to the Remote Insight/ Integrated Lights-Out. This address is used to communicate remotely to the host server via the Remote Insight/ Integrated Lights-Out.')
cpqSm2CntlrModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("eisaRemoteInsightBoard", 2), ("pciRemoteInsightBoard", 3), ("pciLightsOutRemoteInsightBoard", 4), ("pciIntegratedLightsOutRemoteInsight", 5), ("pciLightsOutRemoteInsightBoardII", 6), ("pciIntegratedLightsOutRemoteInsight2", 7), ("pciLightsOut100series", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrModel.setDescription('Remote Insight/ Integrated Lights-Out Model. The following values are defined: other(1) The Insight Agent is unable to determine the model of the Remote Insight/ Integrated Lights-Out. eisaRemoteInsightBoard(2) This is the EISA Remote Insight. pciRemoteInsightBoard(3) This is the PCI Remote Insight. pciLightsOutRemoteInsightBoard(4) This is the Remote Insight Lights-Out Edition. pciIntegratedLightsOutRemoteInsight(5) This is Integrated Remote Insight Lights-Out Edition. pciLightsOutRemoteInsightBoardII(6) This is the Remote Insight Lights-Out Edition version II. pciIntegratedLightsOutRemoteInsight2(7) This is the Integrated Lights-Out 2 Edition. pciLightsOut100series(8) This is the Lights-Out 100 Edition for 100 Series of ProLiant servers.')
cpqSm2CntlrSelfTestErrorMask = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrSelfTestErrorMask.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrSelfTestErrorMask.setDescription('Remote Insight/ Integrated Lights-Out Self Test Error Mask. Each bit in this mask corresponds to a bit in the MIB variable cpqSm2CntlrSelfTestErrors. If the mask bit is a 1, then the corresponding bit in cpqSm2CntlrSelfTestErrors is relevant to the particular version of the Remote Insight/ Integrated Lights-Out. This variable is necessary since the different versions of the Remote Insight/ Integrated Lights-Out hardware have different subsets of tests that are performed.')
cpqSm2CntlrMouseCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("disconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrMouseCableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrMouseCableStatus.setDescription('Remote Insight Mouse Cable Status. The following values are defined: other(1) The Insight Agent is unable to determine if the mouse cable is connected to the Remote Insight. connected(2) The mouse cable is connected to the Remote Insight. disconnected(3) The mouse cable is not connected to the Remote Insight.')
cpqSm2CntlrVirtualPowerCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("connected", 2), ("disconnected", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrVirtualPowerCableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrVirtualPowerCableStatus.setDescription('Remote Insight Virtual Power Cable Status. The following values are defined: other(1) The Insight Agent is unable to determine if the virtual power cable is connected to the Remote Insight. connected(2) The virtual power cable is connected to the Remote Insight. disconnected(3) The virtual power cable is not connected to the Remote Insight. notApplicable(4) Not Applicable.')
cpqSm2CntlrExternalPowerCableStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("externallyConnected", 2), ("disconnected", 3), ("internallyConnected", 4), ("externallyAndInternallyConnected", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrExternalPowerCableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrExternalPowerCableStatus.setDescription('Remote Insight External Power Cable Status. The following values are defined: other(1) The Insight Agent is unable to determine if the External or Internal power cable connections to the Remote Insight. externallyConnected(2) Just External power cable is connected to the Remote Insight. disconnected(3) Both External and Internal power cables are disconnected from the Remote Insight. internallyConnected(4) Just Internal power cable is connected to the Remote Insight. externallyAndInternallyConnected(5) Both External and Internal power cables are connected to the Remote Insight. notApplicable(6) Not Applicable.')
cpqSm2CntlrHostGUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrHostGUID.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrHostGUID.setDescription("The globally unique identifier of this server. This variable can by used by management stations to correlate the Remote Insight/ Integrated Lights-Out controller to the server containing the controller. This variable is identical to the variable 'cpqHoGUID' which is returned from the CPQHOST.MIB.")
cpqSm2CntlriLOSecurityOverrideSwitchState = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("set", 2), ("notSet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlriLOSecurityOverrideSwitchState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlriLOSecurityOverrideSwitchState.setDescription('Integrated Lights-Out Security Override Switch State. The following values are defined: notSupported(1) The iLO Security Override Switch state is not supported on this model of Integrated Lights-Out. set(2) The iLO Security Override Switch is set, which implies security is disabled. notSet(3) The iLO Security Override Switch is not set, which implies normal secure operation.')
cpqSm2CntlrHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrHardwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrHardwareVer.setDescription('Hardware Version of Remote Insight/ Integrated Lights-Out.')
cpqSm2CntlrAction = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2CntlrAction.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrAction.setDescription('Remote Insight/ Integrated Lights-Out Action Flags. This is a collection of flags used to indicate the various options available. ResetSupportBit: If bit-0 is set to 1, the option is available. If bit-0 is set to 0, the option is NOT available. iLOAlerts If bit-1 is set to 1, iLO alerts are enabled. If bit-2 is set to 1, iLO alerts are disabled. These two bits should never have the same value. HostAlerts If bit-3 is set to 1, Host alerts are enabled. If bit-4 is set to 1, Host alerts are disabled. These two bits should never have the same value. Bit-31 is used to execute the set operation. NOTE: bit 31 is the most significant bit, bit 0 is the least significant. Status This is a collection of flags. Each bit has the following meaning when it is on (1): Bit 0: Reset Supported Bit 1: iLO Alerts Enabled Bit 2: iLO Alerts Disabled Bit 3: Host Alerts Enabled Bit 4: Host Alerts Disabled Bit 5-30: RESERVED Bit 31: Execute Set ')
cpqSm2CntlrLicenseActive = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("iloAdvanced", 2), ("iloLight", 3), ("iloSelect", 4), ("iloStandard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrLicenseActive.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrLicenseActive.setDescription('Remote Insight License State. The following values are defined: none(1) The Insight Agent is unable to determine the active license or no license is installed. iloAdvanced(2) iLO Advanced license is installed. iloLight(3) iLO Light license is installed. iloSelect(4) iLO Select license is installed. iloStandard(5) iLO 2 Standard for HP BladeSystem license is installed.')
cpqSm2CntlrLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CntlrLicenseKey.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CntlrLicenseKey.setDescription('iLO Active ASCII License key string. On implicitly licensed systems like blades, a license will be indicated as installed, although the key value may be blank')
cpqSm2EventTotalEntries = MibScalar((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSm2EventTotalEntries.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventTotalEntries.setDescription('The number of entries in the Remote Insight/ Integrated Lights-Out event log. Setting the number of entries to 0 clears the Remote Insight/ Integrated Lights-Out event log. Setting the number of entries to something other than 0 will always fail.')
cpqSm2EventLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2), )
if mibBuilder.loadTexts: cpqSm2EventLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventLogTable.setDescription('A table of event log descriptions.')
cpqSm2EventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2EventLogIndex"))
if mibBuilder.loadTexts: cpqSm2EventLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventLogEntry.setDescription('An event log description.')
cpqSm2EventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventLogIndex.setDescription('An index that uniquely specifies this entry.')
cpqSm2EventLogNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventLogNumber.setDescription('A number assigned by the Remote Insight/ Integrated Lights-Out firmware.')
cpqSm2EventLogDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogDate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventLogDate.setDescription('The time and date for this event log entry. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the time and date. The hour, minute, and second field will be set to zero (0) if they are not relevant. The year field is set with the most significant octet first.')
cpqSm2EventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2EventLogMessage.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2EventLogMessage.setDescription('The message text for this event log entry.')
cpqSm2CommSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1), )
if mibBuilder.loadTexts: cpqSm2CommSettingsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommSettingsTable.setDescription('The list of communication settings for the Remote Insight.')
cpqSm2CommSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2CommPort"))
if mibBuilder.loadTexts: cpqSm2CommSettingsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommSettingsEntry.setDescription("A defined port's communication settings for the Remote Insight.")
cpqSm2CommPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("auxiliary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPort.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPort.setDescription('Remote Insight Communications Port. The following values are defined: internal(1) This is the Remote Insight internal modem port. auxiliary(2) This is the Remote Insight auxiliary port.')
cpqSm2CommType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("modem", 3), ("nulModemCable", 4), ("xonXoff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommType.setDescription('Remote Insight Communications Type. The following values are defined: other(1) The Insight Agent is unable to determine the communications type. none(2) There is nothing configured on this port. modem(3) A modem is configured on this port. nulModem(4) A Null Modem cable is configured on this port. This type of connection is only supported on the Remote Insight auxiliary port. xonXoff(5) An XON/XOFF 3-wire interface is configured on this port. This type of connection is only supported on the Remote Insight auxiliary port.')
cpqSm2CommBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommBaudRate.setDescription('The baud rate to be used over this communication medium by the Remote Insight.')
cpqSm2CommParity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("odd", 3), ("even", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommParity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommParity.setDescription('Remote Insight Communications Parity. The following values are defined: other(1) The Insight Agent is unable to determine the parity setting. none(2) This port is set for no parity. odd(3) This port is set for odd parity. even(4) This port is set for even parity.')
cpqSm2CommDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sevenBits", 2), ("eightBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommDataBits.setDescription('Remote Insight Communications Data Bits. The following values are defined: other(1) The Insight Agent is unable to determine the data bits setting. sevenBit(2) This port is set for seven data bits. eight(3) This port is set for eight data bits.')
cpqSm2CommStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("oneBit", 2), ("twoBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommStopBits.setDescription('Remote Insight Communications Stop Bits. The following values are defined: other(1) The Insight Agent is unable to determine the stop bits setting. oneBit(2) This port is set for one stop data bit. twoBits(3) This port is set for two stop bits.')
cpqSm2CommModemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommModemReset.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommModemReset.setDescription('The string that is sent to reset the modem.')
cpqSm2CommModemInit = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommModemInit.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommModemInit.setDescription('The string that is sent to initialize the modem.')
cpqSm2CommModemDialPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommModemDialPrefix.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommModemDialPrefix.setDescription('The string that is prepended to phone numbers before dialing.')
cpqSm2CommPortInit = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPortInit.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPortInit.setDescription('The string that is sent to the auxiliary port before the modem is reset.')
cpqSm2CommDialin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommDialin.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommDialin.setDescription('Comm Dial-in. The following values are defined: other(1) The Insight Agent is unable to determine the status of dialin. enabled(2) Dialing in to this modem is enabled. disabled(3) Dialing in to this modem is disabled.')
cpqSm2CommDialbackRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("required", 2), ("notRequired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommDialbackRequired.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommDialbackRequired.setDescription('Remote Insight Dialback Required. The following values are defined: other(1) The Insight Agent is unable to determine the dialback required setting. required(2) Dialback is required for all users. notRequired(3) Dialback is not required. It is optional on a per user basis.')
cpqSm2CommNonPppConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommNonPppConnections.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommNonPppConnections.setDescription('Non-PPP connections. The following values are defined: other(1) The Insight Agent is unable to determine the status of the non-PPP connections variable. enabled(2) Non-PPP connections are allowed on this port. disabled(3) Non-PPP connections are not allowed on this port. Only PPP sessions are accepted.')
cpqSm2CommSnmpTrapDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommSnmpTrapDelivery.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommSnmpTrapDelivery.setDescription('SNMP Trap Delivery. The following values are defined: other(1) The Insight Agent is unable to determine the status of SNMP Trap delivery. enabled(2) SNMP trap delivery is enabled. The Remote Insight firmware will use this port to deliver SNMP traps. disabled(3) SNMP Trap delivery is disabled. The Remote Insight firmware will not use this port to deliver SNMP traps.')
cpqSm2CommPageDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPageDelivery.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPageDelivery.setDescription('Page Delivery. The following values are defined: other(1) The Insight Agent is unable to determine the status of page delivery. enabled(2) Page delivery is enabled. The Remote Insight firmware will use this port to deliver pages. disabled(3) Page delivery is disabled. The Remote Insight firmware will not use this port to deliver pages.')
cpqSm2CommPagerBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPagerBaudRate.setDescription('The baud rate to be used for pager communications over this medium by the Remote Insight.')
cpqSm2CommPagerParity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("odd", 3), ("even", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerParity.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPagerParity.setDescription('Remote Insight Communications Pager Parity. The following values are defined: other(1) The Insight Agent is unable to determine the pager parity setting. none(2) This port is set for no parity when paging. odd(3) This port is set for odd parity when paging. even(4) This port is set for even parity when paging.')
cpqSm2CommPagerDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("sevenBits", 2), ("eightBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPagerDataBits.setDescription('Remote Insight Communications Pager Data Bits. The following values are defined: other(1) The Insight Agent is unable to determine the data bits setting. sevenBit(2) This port is set for seven data bits when paging. eight(3) This port is set for eight data bits when paging.')
cpqSm2CommPagerStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("oneBit", 2), ("twoBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPagerStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPagerStopBits.setDescription('Remote Insight Communications Pager Stop Bits. The following values are defined: other(1) The Insight Agent is unable to determine the stop bits setting. oneBit(2) This port is set for one stop data bit when paging. twoBits(3) This port is set for two stop bits when paging.')
cpqSm2CommPcmciaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 4, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2CommPcmciaModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2CommPcmciaModel.setDescription('Remote Insight Network PCMCIA Card Model. This is a NULL terminated ASCII string. If the agent cannot determine the model name, it should return a NULL string.')
cpqSm2NicConfigTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1), )
if mibBuilder.loadTexts: cpqSm2NicConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicConfigTable.setDescription('The list of network interface configuration settings for the Remote Insight/ Integrated Lights-Out.')
cpqSm2NicConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicLocation"))
if mibBuilder.loadTexts: cpqSm2NicConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicConfigEntry.setDescription("A defined nic's configuration settings for the Remote Insight/ Integrated Lights-Out.")
cpqSm2NicLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("embedded", 2), ("pcmcia", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicLocation.setDescription('Location of the Network Interface Controller associated with the Remote Insight/ Integrated Lights-Out. The following values are defined: other(1) The Insight Agent is unable to determine type of network interface controller. embedded(2) This is an embedded network interface controller. pcmcia(3) This is a PCMCIA network interface controller.')
cpqSm2NicModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicModel.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicModel.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Model. This is a NULL terminated ASCII string. If the agent cannot determine the model name, it should return a NULL string.')
cpqSm2NicType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ethernet", 2), ("tokenRing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicType.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicType.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Type. The following values are defined: other(1) The Insight Agent is unable to determine type of network interface controller. ethernet(2) This is an ethernet network interface controller. tokenRing(3) This is a token ring network interface controller.')
cpqSm2NicMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicMacAddress.setDescription("The MAC Address of the Network Interface Controller associated with the Remote Insight/ Integrated Lights-Out. This is a 6 octet address in the 'canonical' order defined by IEEE 802.1a, i.e., as if it were transmitted least significant bit first, even though 802.5 (in contrast to other 802.x protocols) requires MAC addresses to be transmitted most significant bit first. 16-bit addresses, if needed, are represented by setting their upper 4 octets to all 0's, i.e., AAFF would be represented as 00000000AAFF.")
cpqSm2NicIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicIpAddress.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller IP Address. The IP address for the network interface controller associated with the Remote Insight/ Integrated Lights-Out. All octets should be set to 0xff if there is not an IP address associated with the NIC. The order will be in network byte order (i.e. MSB first.)')
cpqSm2NicIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicIpSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicIpSubnetMask.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Subnet Mask.')
cpqSm2NicEnabledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicEnabledStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicEnabledStatus.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Enabled Status The following values are defined: other(1) The Insight Agent is unable to determine type of network interface controller enabled status enabled(2) This network interface controller is enabled. disabled(3) This network interface controller is disabled.')
cpqSm2NicDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("halfDuplex", 2), ("fullDuplex", 3), ("notSupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicDuplexState.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicDuplexState.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Enabled Status. The following values are defined: other(1) The Insight Agent is unable to determine type of network interface controller duplex state. halfDuplex(2) This network interface controller is half duplex. fullDuplex(3) This network interface controller is full duplex. notSupported(4) This network interface controller is does not support duplex state.')
cpqSm2NicSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicSpeed.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Speed. The speed of the network interface controller in megabits per second.')
cpqSm2NicDhcpUse = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicDhcpUse.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicDhcpUse.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller DHCP Usage The following values are defined: other(1) The Insight Agent is unable to determine if DHCP is supported for this network interface controller. enabled(2) DHCP usage is enabled for this network interface controller. disabled(3) DHCP usage is disabled for this network interface controller.')
cpqSm2NicCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicCondition.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicCondition.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller condition. This represents the overall condition of the Remote Insight/ Integrated Lights-Out Network Interface Controller (NIC).')
cpqSm2NicMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicMtu.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicMtu.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Maximum Transfer Unit. The maximum packet size (in bytes) of the network interface controller.')
cpqSm2NicGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicGatewayIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicGatewayIpAddress.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Default Gateway IP Address. The Default Gateway IP address for the network interface controller associated with the Remote Insight/ Integrated Lights-Out. If cpqSm2NicDhcpUse is enabled(2), this is the DHCP supplied gateway. If cpqSm2NicDhcpUse is disabled(3), this is the static gateway. The order will be in network byte order (i.e. MSB first.)')
cpqSm2NicRibFullQualDnsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRibFullQualDnsName.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRibFullQualDnsName.setDescription('Remote Insight/ Integrated Lights-Out Fully Qualified DNS Name. The Fully Qualified DNS Name assigned to this Remote Insight/ Integrated Lights-Out. This is composed of the DNS name and the Domain name associated with the Remote Insight/ Integrated Lights-Out.')
cpqSm2NicStatsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2), )
if mibBuilder.loadTexts: cpqSm2NicStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicStatsTable.setDescription('The list of network interface configuration settings for the Remote Insight/ Integrated Lights-Out.')
cpqSm2NicStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1), ).setIndexNames((0, "CPQSM2-MIB", "cpqSm2NicStatsLocation"))
if mibBuilder.loadTexts: cpqSm2NicStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicStatsEntry.setDescription("A defined nic's configuration settings for the Remote Insight/ Integrated Lights-Out.")
cpqSm2NicStatsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("embedded", 2), ("pcmcia", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicStatsLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicStatsLocation.setDescription('Location of the Network Interface Controller associated with the Remote Insight/ Integrated Lights-Out. The following values are defined: other(1) The Insight Agent is unable to determine type of network interface controller. embedded(2) This is an embedded network interface controller. pcmcia(3) This is a PCMCIA network interface controller.')
cpqSm2NicXmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitBytes.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Bytes Transmitted.')
cpqSm2NicXmitTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitTotalPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Total Transmit Packets.')
cpqSm2NicXmitUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitUnicastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitUnicastPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Unicast Transmit Packets.')
cpqSm2NicXmitNonUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitNonUniPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitNonUniPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Non-Unicast Transmit Packets.')
cpqSm2NicXmitDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitDiscardPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitDiscardPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Total Transmit Discarded Packets.')
cpqSm2NicXmitErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitErrorPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitErrorPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Total Error Transmit Packets.')
cpqSm2NicXmitQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicXmitQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicXmitQueueLength.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Number of Outstanding Packets in Transmit Queue.')
cpqSm2NicRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvBytes.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Bytes Received.')
cpqSm2NicRecvTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvTotalPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvTotalPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Total Receive Packets.')
cpqSm2NicRecvUnicastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvUnicastPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvUnicastPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Unicast Receive Packets.')
cpqSm2NicRecvNonUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvNonUniPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvNonUniPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Non-Unicast Receive Packets.')
cpqSm2NicRecvDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvDiscardPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvDiscardPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Total Receive Discarded Packets.')
cpqSm2NicRecvErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvErrorPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvErrorPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Total Receive Error Packets.')
cpqSm2NicRecvUnknownPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 9, 2, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSm2NicRecvUnknownPackets.setStatus('mandatory')
if mibBuilder.loadTexts: cpqSm2NicRecvUnknownPackets.setDescription('Remote Insight/ Integrated Lights-Out Network Interface Controller Number of Unknown Protocol Packets.')
cpqSm2ServerReset = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2ServerReset.setDescription('Server Reset Detected. The Remote Insight/ Integrated Lights-Out firmware has detected a server reset.')
cpqSm2ServerPowerOutage = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2ServerPowerOutage.setDescription('Server Power Outage. The Remote Insight/ Integrated Lights-Out firmware has detected server power failure.')
cpqSm2UnauthorizedLoginAttempts = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrBadLoginAttemptsThresh"))
if mibBuilder.loadTexts: cpqSm2UnauthorizedLoginAttempts.setDescription('Remote Insight/ Integrated Lights-Out Unauthorized Login Attempts. The Remote Insight/ Integrated Lights-Out firmware has detected unauthorized login attempts.')
cpqSm2BatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2BatteryFailed.setDescription('Remote Insight Battery Failed. The Remote Insight battery has failed and needs to be replaced.')
cpqSm2SelfTestError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSM2-MIB", "cpqSm2CntlrSelfTestErrors"))
if mibBuilder.loadTexts: cpqSm2SelfTestError.setDescription('Remote Insight/ Integrated Lights-Out Self Test Error. The Remote Insight/ Integrated Lights-Out firmware has detected a Remote Insight self test error.')
cpqSm2InterfaceError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2InterfaceError.setDescription('Remote Insight/ Integrated Lights-Out Interface Error. The host OS has detected an error in the Remote Insight/ Integrated Lights-Out interface. The firmware is not responding.')
cpqSm2BatteryDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2BatteryDisconnected.setDescription('Remote Insight Battery Disconnected. The Remote Insight battery cable has been disconnected.')
cpqSm2KeyboardCableDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2KeyboardCableDisconnected.setDescription('Keyboard Cable Disconnected. The Remote Insight keyboard cable has been disconnected.')
cpqSm2MouseCableDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2MouseCableDisconnected.setDescription('Mouse Cable Disconnected. The Remote Insight mouse cable has been disconnected.')
cpqSm2ExternalPowerCableDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2ExternalPowerCableDisconnected.setDescription('External Power Cable Disconnected. The Remote Insight external power cable has been disconnected.')
cpqSm2LogsFull = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2LogsFull.setDescription('Logs Full. The Remote Insight/ Integrated Lights-Out firmware has detected the logs are full.')
cpqSm2SecurityOverrideEngaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2SecurityOverrideEngaged.setDescription('Security Override Engaged. The Remote Insight/ Integrated Lights-Out firmware has detected the security override jumper has been toggled to the engaged position.')
cpqSm2SecurityOverrideDisengaged = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
if mibBuilder.loadTexts: cpqSm2SecurityOverrideDisengaged.setDescription('Security Override Disengaged. The Remote Insight/ Integrated Lights-Out firmware has detected the security override jumper has been toggled to the disengaged position.')
cpqSm2ServerFatalError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,9014)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: cpqSm2ServerFatalError.setDescription('Server Fatal Error Detected. The Remote Insight/ Integrated Lights-Out firmware has detected a server fatal error.')
mibBuilder.exportSymbols("CPQSM2-MIB", cpqSm2OsCommonModuleDate=cpqSm2OsCommonModuleDate, cpqSm2OsCommonModuleEntry=cpqSm2OsCommonModuleEntry, cpqSm2NicXmitErrorPackets=cpqSm2NicXmitErrorPackets, cpqSm2OsCommonModuleName=cpqSm2OsCommonModuleName, cpqSm2CntlrRomRevision=cpqSm2CntlrRomRevision, cpqSm2NicRecvDiscardPackets=cpqSm2NicRecvDiscardPackets, cpqSm2CntlrModel=cpqSm2CntlrModel, cpqSm2CntlrAction=cpqSm2CntlrAction, cpqSm2NicConfigEntry=cpqSm2NicConfigEntry, cpqSm2EventTotalEntries=cpqSm2EventTotalEntries, cpqSm2CommStopBits=cpqSm2CommStopBits, cpqSm2CntlrExternalPowerCableStatus=cpqSm2CntlrExternalPowerCableStatus, cpqSm2CommPcmciaModel=cpqSm2CommPcmciaModel, cpqSm2ProdRILOE=cpqSm2ProdRILOE, cpqSm2NicRecvBytes=cpqSm2NicRecvBytes, cpqSm2NicXmitUnicastPackets=cpqSm2NicXmitUnicastPackets, cpqSm2CntlrSelfTestErrorMask=cpqSm2CntlrSelfTestErrorMask, cpqSm2EventLog=cpqSm2EventLog, cpqSm2ProdRILOEII=cpqSm2ProdRILOEII, cpqSm2CntlrMouseCableStatus=cpqSm2CntlrMouseCableStatus, cpqSm2SelfTestError=cpqSm2SelfTestError, cpqSm2NicIpAddress=cpqSm2NicIpAddress, cpqSm2InterfaceError=cpqSm2InterfaceError, cpqSm2OsCommon=cpqSm2OsCommon, cpqSm2NicIpSubnetMask=cpqSm2NicIpSubnetMask, cpqSm2CntlrBatteryStatus=cpqSm2CntlrBatteryStatus, cpqSm2CntlrLastDataUpdate=cpqSm2CntlrLastDataUpdate, cpqSm2CntlriLOSecurityOverrideSwitchState=cpqSm2CntlriLOSecurityOverrideSwitchState, cpqSm2CntlrKeyboardCableStatus=cpqSm2CntlrKeyboardCableStatus, cpqSm2CommPageDelivery=cpqSm2CommPageDelivery, cpqSm2CntlrSelfTestErrors=cpqSm2CntlrSelfTestErrors, cpqSm2NicDhcpUse=cpqSm2NicDhcpUse, cpqSm2Products=cpqSm2Products, cpqSm2OsCommonModulePurpose=cpqSm2OsCommonModulePurpose, cpqSm2CntlrVideoStatus=cpqSm2CntlrVideoStatus, cpqSm2KeyboardCableDisconnected=cpqSm2KeyboardCableDisconnected, cpqSm2ExternalPowerCableDisconnected=cpqSm2ExternalPowerCableDisconnected, cpqSm2NicStatsLocation=cpqSm2NicStatsLocation, cpqSm2CommSettingsTable=cpqSm2CommSettingsTable, cpqSm2CommPort=cpqSm2CommPort, cpqSm2AsyncComm=cpqSm2AsyncComm, cpqSm2NicXmitDiscardPackets=cpqSm2NicXmitDiscardPackets, cpqSm2CntlrRomDate=cpqSm2CntlrRomDate, cpqSm2MibRevMinor=cpqSm2MibRevMinor, cpqSm2CommBaudRate=cpqSm2CommBaudRate, cpqSm2NicStatsTable=cpqSm2NicStatsTable, cpqSm2LogsFull=cpqSm2LogsFull, cpqSm2CntlrDataStatus=cpqSm2CntlrDataStatus, cpqSm2CntlrAgentLocation=cpqSm2CntlrAgentLocation, cpqSm2EventLogMessage=cpqSm2EventLogMessage, cpqSm2CntlrHostGUID=cpqSm2CntlrHostGUID, cpqSm2MibRevMajor=cpqSm2MibRevMajor, cpqSm2CommDataBits=cpqSm2CommDataBits, cpqSm2ProdiLo=cpqSm2ProdiLo, cpqSm2NicDuplexState=cpqSm2NicDuplexState, cpqSm2NicXmitNonUniPackets=cpqSm2NicXmitNonUniPackets, cpqSm2OsCommonModuleTable=cpqSm2OsCommonModuleTable, cpqSm2CommSettingsEntry=cpqSm2CommSettingsEntry, cpqSm2CntlrHardwareVer=cpqSm2CntlrHardwareVer, cpqSm2CommModemInit=cpqSm2CommModemInit, cpqSm2CommNonPppConnections=cpqSm2CommNonPppConnections, cpqSm2NicMacAddress=cpqSm2NicMacAddress, cpqSm2NicModel=cpqSm2NicModel, cpqSm2NicSpeed=cpqSm2NicSpeed, cpqSm2MibCondition=cpqSm2MibCondition, cpqSm2Component=cpqSm2Component, cpqSm2CntlrColdReboot=cpqSm2CntlrColdReboot, cpqSm2ServerIpAddress=cpqSm2ServerIpAddress, cpqSm2Interface=cpqSm2Interface, cpqSm2CntlrSystemId=cpqSm2CntlrSystemId, cpqSm2NicXmitBytes=cpqSm2NicXmitBytes, cpqSm2CommType=cpqSm2CommType, cpqSm2ServerReset=cpqSm2ServerReset, cpqSm2NicRecvUnknownPackets=cpqSm2NicRecvUnknownPackets, cpqSm2CommDialbackRequired=cpqSm2CommDialbackRequired, cpqSm2OsCommonModuleVersion=cpqSm2OsCommonModuleVersion, cpaSm2ProdEisaRemote=cpaSm2ProdEisaRemote, cpqSm2NicEnabledStatus=cpqSm2NicEnabledStatus, cpqSm2OsCommonModuleIndex=cpqSm2OsCommonModuleIndex, cpqSm2CntlrLicenseKey=cpqSm2CntlrLicenseKey, cpqSm2NicConfigTable=cpqSm2NicConfigTable, cpqSm2Trap=cpqSm2Trap, cpqSm2MouseCableDisconnected=cpqSm2MouseCableDisconnected, cpqSm2NicStatsEntry=cpqSm2NicStatsEntry, cpqSm2NicRibFullQualDnsName=cpqSm2NicRibFullQualDnsName, cpqSm2CntlrAlertStatus=cpqSm2CntlrAlertStatus, cpqSm2MibRev=cpqSm2MibRev, cpqSm2CntlrBatteryPercentCharged=cpqSm2CntlrBatteryPercentCharged, cpqSm2CntlrBoardSerialNumber=cpqSm2CntlrBoardSerialNumber, cpqSm2EventLogNumber=cpqSm2EventLogNumber, cpqSm2ServerPowerOutage=cpqSm2ServerPowerOutage, cpqSm2NicGatewayIpAddress=cpqSm2NicGatewayIpAddress, cpqSm2Nic=cpqSm2Nic, cpqSm2CommModemReset=cpqSm2CommModemReset, cpqSm2NicLocation=cpqSm2NicLocation, cpqSm2NicRecvTotalPackets=cpqSm2NicRecvTotalPackets, cpqSm2CntlrLicenseActive=cpqSm2CntlrLicenseActive, cpqSm2BatteryDisconnected=cpqSm2BatteryDisconnected, cpqSm2CntlrVirtualPowerCableStatus=cpqSm2CntlrVirtualPowerCableStatus, cpqSm2CntlrBatteryEnabled=cpqSm2CntlrBatteryEnabled, cpqSm2CntlrBadLoginAttemptsThresh=cpqSm2CntlrBadLoginAttemptsThresh, cpqSm2EventLogDate=cpqSm2EventLogDate, cpqSm2UnauthorizedLoginAttempts=cpqSm2UnauthorizedLoginAttempts, cpqSm2ProdPCIRemote=cpqSm2ProdPCIRemote, cpqSm2Cntlr=cpqSm2Cntlr, cpqSm2EventLogEntry=cpqSm2EventLogEntry, cpqSm2SecurityOverrideDisengaged=cpqSm2SecurityOverrideDisengaged, cpqSm2NicType=cpqSm2NicType, cpqSm2BatteryFailed=cpqSm2BatteryFailed, cpqSm2CntlrInterfaceStatus=cpqSm2CntlrInterfaceStatus, cpqSm2NicRecvErrorPackets=cpqSm2NicRecvErrorPackets, cpqSm2SecurityOverrideEngaged=cpqSm2SecurityOverrideEngaged, cpqSm2NicMtu=cpqSm2NicMtu, cpqSm2NicCondition=cpqSm2NicCondition, cpqSm2CommModemDialPrefix=cpqSm2CommModemDialPrefix, cpqSm2OsCommonPollFreq=cpqSm2OsCommonPollFreq, cpqSm2CommPagerDataBits=cpqSm2CommPagerDataBits, cpqSm2CommPortInit=cpqSm2CommPortInit, cpqSm2=cpqSm2, cpqSm2CommPagerParity=cpqSm2CommPagerParity, cpqSm2CommParity=cpqSm2CommParity, cpqSm2NicRecvNonUniPackets=cpqSm2NicRecvNonUniPackets, cpqSm2CommSnmpTrapDelivery=cpqSm2CommSnmpTrapDelivery, cpqSm2CntlrRemoteSessionStatus=cpqSm2CntlrRemoteSessionStatus, cpqSm2NicXmitQueueLength=cpqSm2NicXmitQueueLength, cpqSm2CntlrPendingAlerts=cpqSm2CntlrPendingAlerts, cpqSm2CommPagerStopBits=cpqSm2CommPagerStopBits, cpqSm2NicRecvUnicastPackets=cpqSm2NicRecvUnicastPackets, cpqSm2NicXmitTotalPackets=cpqSm2NicXmitTotalPackets, cpqSm2CommPagerBaudRate=cpqSm2CommPagerBaudRate, cpqSm2EventLogTable=cpqSm2EventLogTable, cpqSm2CommDialin=cpqSm2CommDialin, cpqSm2ServerFatalError=cpqSm2ServerFatalError, cpqSm2EventLogIndex=cpqSm2EventLogIndex)
