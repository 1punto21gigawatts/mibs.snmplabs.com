#
# PySNMP MIB module CERENT-MSDWDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CERENT-MSDWDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:48:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
cerentRequirements, cerentGeneric, cerentModules = mibBuilder.importSymbols("CERENT-GLOBAL-REGISTRY", "cerentRequirements", "cerentGeneric", "cerentModules")
CerentPeriod, = mibBuilder.importSymbols("CERENT-TC", "CerentPeriod")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Gauge32, ObjectIdentity, Integer32, IpAddress, Counter32, iso, TimeTicks, ModuleIdentity, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "ObjectIdentity", "Integer32", "IpAddress", "Counter32", "iso", "TimeTicks", "ModuleIdentity", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
cerentMsDwdmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3607, 1, 10, 80))
cerentMsDwdmMIB.setRevisions(('1903-02-15 00:00', '1902-11-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cerentMsDwdmMIB.setRevisionsDescriptions(('Added DWDM Network Tables, 8B10B tables.', 'The initial revision of this MIB.',))
if mibBuilder.loadTexts: cerentMsDwdmMIB.setLastUpdated('0302150000Z')
if mibBuilder.loadTexts: cerentMsDwdmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cerentMsDwdmMIB.setContactInfo('support@Cisco.com Postal: Cisco Systems 1450 N. McDowell Blvd. Petaluma, CA 94954 Tel: +1-877-323-7368')
if mibBuilder.loadTexts: cerentMsDwdmMIB.setDescription('This MIB module defines the managed objects for physical layer related interface configurations and objects for the protocol specific error counters for DWDM optical switches. This MIB contains four groups. The first group, cerentMsDwdmIfGroup, handles the physical layer related interface configurations. The second group, cerentMsDwdmOtnGroup, provides objects for configuring OTN (G.709) related thresholds and for collecting OTN (G.709) related performance statistics for the current and previous 15 min and 24 hour intervals. The third group, cerentMsDwdmFECGroup provides objects for monitoring FEC (Fault Error Correction) statistics for the current and previous 15 min and 24 hour intervals. It also contains objects for configuring FEC error thresholds. The fourth group,cerentMsDwdm8B10BGroup contains 8B10B counters, for the current and previous 15 min and 24 hour intervals for interfaces like Fiber Channel/Gig E.')
class ProtocolType(TextualConvention, Integer32):
    description = 'An integer value that identifies the protocol used across an interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("tenGigEth", 4), ("fibreChOrOneGigEth", 5), ("unframed", 7), ("sonet", 8), ("sdh", 9), ("sysplexIscCompatibility", 10), ("sysplexIscPeer", 11), ("sysplexTimerEtr", 12), ("sysplexTimerClo", 13), ("fastEthernet", 14), ("fddi", 15), ("eightGfc", 16), ("oc768", 17), ("otn", 18))

class IntervalType(TextualConvention, Integer32):
    description = 'This value indicates the time period over which performance monitoring data has been collected. Valid values are - fifteenMin (1) : values for the 15 min interval. oneDay (2) : values for the 1 Day interval. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("fifteenMin", 1), ("oneDay", 2))

class LocationAndIntervalType(TextualConvention, Integer32):
    description = 'This value indicates the time period and the location for which the performace monitoring data has been collected. Valid values are - nearEnd15Min (1) : nearEnd values for the 15 min interval. nearEndOneDay (2) : nearEnd values for the 1 Day interval. farEnd15Min (3) : farEnd values for the 15 min interval. farEndOneDay (4) : farEnd values for the 1 day interval. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nearEnd15Min", 1), ("nearEndOneDay", 2), ("farEnd15Min", 3), ("farEndOneDay", 4))

class MonitorType(TextualConvention, Integer32):
    description = 'This value indicates the type of performance statistics being monitored. Valid values are - path(1) : Performance statistics for path parameters. section(2) : Performance statistics for section parameters. tcm1(3) : Performance statistics for tandem connection monitoring 1. tcm2(4) : Performance statistics for tandem connection monitoring 2. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("path", 1), ("section", 2), ("tcm1", 3), ("tcm2", 4))

class RingDirection(TextualConvention, Integer32):
    description = 'This value indicates the type of directionality in the ring. The directionality is meaning the facing side of the port that is connected to fiber. Valid values are - westEast(1) : the port is facing to west side, continuing to east side eastWest(2) : the port is facing to east side, continuing to west side '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("westEast", 1), ("eastWest", 2))

class SideIdentifier(TextualConvention, Integer32):
    description = 'This value indicates the side in the ring/mesh node e.g. the facing side associated to on optical interface within an up to 8 deg mesh node. Valid values are - unknownSide(0) sideA(1) sideB(2) sideC(3) sideD(4) sideE(5) sideF(6) sideG(7) sideH(8) sideI(9) sideJ(10) sideK(11) sideL(12) sideM(13) sideN(14) sideO(15) sideP(16) sideQ(17) sideR(18) sideS(19) sideT(20) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("unknownSide", 0), ("sideA", 1), ("sideB", 2), ("sideC", 3), ("sideD", 4), ("sideE", 5), ("sideF", 6), ("sideG", 7), ("sideH", 8), ("sideI", 9), ("sideJ", 10), ("sideK", 11), ("sideL", 12), ("sideM", 13), ("sideN", 14), ("sideO", 15), ("sideP", 16), ("sideQ", 17), ("sideR", 18), ("sideS", 19), ("sideT", 20))

class OpticalPortRule(TextualConvention, Integer32):
    description = 'This value indicates the rule that assumes the optical port. Valid values are - inputLine(1) : this is an input LINE port outputLine(2) : this is an output LINE port inputCom(3) : this is an input COM port outputCom(4) : this is an output COM port inputOsc(5) : this is an input OSC port outputOsc(6) : this is an output OSC port inputDc(7) : this is an input DCU port outputDc(8) : this is an output DCU port inputExpress(9) : this is an input EXPress port outputExpress(10) : this is an output EXPress port add(11) : this is an band/wavelength ADD port drop(12) : this is an band/wavelength DROP port inputPassThru(13) : this is an input Pass Thru port inputWorking(14) : the working port that receive the signal in an optical protection unit outputWorking(15) : the working port that send the signal in an optical protection unit inputProtected(16) : the protected port that receive the signal in an optical protection unit outputProtected(17) : the protected port that send the signal in an optical protection unit inputRaman(18) : this is an input RAMAN port outputRaman(19) : this is an output RAMAN port com(20) : this is an COM port ead(21) : this is an Express/Add/Drop port ad(22) : this is an Add/Drop port '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("inputLine", 1), ("outputLine", 2), ("inputCom", 3), ("outputCom", 4), ("inputOsc", 5), ("outputOsc", 6), ("inputDc", 7), ("outputDc", 8), ("inputExpress", 9), ("outputExpress", 10), ("add", 11), ("drop", 12), ("inputPassThru", 13), ("inputWorking", 14), ("outputWorking", 15), ("inputProtected", 16), ("outputProtected", 17), ("inputRaman", 18), ("outputRaman", 19), ("com", 20), ("ead", 21), ("ad", 22))

class LaserStatus(TextualConvention, Integer32):
    description = 'This value indicates the working status of the laser. Valid values are - on(1) : laser is working off(2) : laser is switched off apr(3) : laser is working in automatic power reduction none(4) : laser is not present '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("on", 1), ("off", 2), ("apr", 3), ("none", 4))

class OpticalAmplifierMode(TextualConvention, Integer32):
    description = 'This value indicates the amplifier working mode Valid values are - gain(1) : gain control mode power(2) : power control mode none(3) : not an amplifier port fixed-gain(4) : fixed gain control mode '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("gain", 1), ("power", 2), ("none", 3), ("fixed-gain", 4))

class OpticalBand(TextualConvention, Integer32):
    description = 'This value indicates the the wavelength group (band) The following wave lengths group are supported: bn1530d33To1532d68 : are the wavelengths from 1530.33 nm to 1532.68 nm. bn1534d25To1536d61 : are the wavelengths from 1534.25 nm to 1536.61 nm. bn1538d19To1540d56 : are the wavelengths from 1538.19 nm to 1540.56 nm. bn1542d14To1544d53 : are the wavelengths from 1542.14 nm to 1544.53 nm. bn1546d12To1548d51 : are the wavelengths from 1546.12 nm to 1548.51 nm. bn1550d12To1552d52 : are the wavelengths from 1550.12 nm to 1552.52 nm. bn1554d13To1556d55 : are the wavelengths from 1554.13 nm to 1556.55 nm. bn1558d17To1560d61 : are the wavelengths from 1558.17 nm to 1560.61 nm. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 5, 25, 45, 65, 85, 105, 125, 145))
    namedValues = NamedValues(("unknown", 1), ("bn1530d33To1532d68", 5), ("bn1534d25To1536d61", 25), ("bn1538d19To1540d56", 45), ("bn1542d14To1544d53", 65), ("bn1546d12To1548d51", 85), ("bn1550d12To1552d52", 105), ("bn1554d13To1556d55", 125), ("bn1558d17To1560d61", 145))

class OpticalWavelength(TextualConvention, Integer32):
    description = 'This object allows the management client to configure the wavelength mode of operation to the applicable interfaces. The following wave lengths are supported: wv1529d55 is 1529.55 nm wv1529d94 is 1529.94 nm wv1530d33 is 1530.33 nm wv1530d72 is 1530.72 nm wv1531d12 is 1531.12 nm wv1531d51 is 1531.51 nm wv1531d90 is 1531.90 nm wv1532d29 is 1532.29 nm wv1532d68 is 1532.68 nm wv1533d07 is 1533.07 nm wv1533d47 is 1533.47 nm wv1533d86 is 1533.86 nm wv1534d25 is 1534.25 nm wv1534d64 is 1534.64 nm wv1535d04 is 1535.04 nm wv1535d43 is 1535.43 nm wv1535d82 is 1535.82 nm wv1536d22 is 1536.22 nm wv1536d61 is 1536.61 nm wv1537d00 is 1537.00 nm wv1537d40 is 1537.40 nm wv1537d79 is 1537.79 nm wv1538d19 is 1538.19 nm wv1538d58 is 1538.58 nm wv1538d98 is 1538.98 nm wv1539d37 is 1539.37 nm wv1539d77 is 1539.77 nm wv1540d16 is 1540.16 nm wv1540d56 is 1540.56 nm wv1540d95 is 1540.95 nm wv1541d35 is 1541.35 nm wv1541d75 is 1541.75 nm wv1542d14 is 1542.14 nm wv1542d54 is 1542.54 nm wv1542d94 is 1542.94 nm wv1543d33 is 1543.33 nm wv1543d73 is 1543.73 nm wv1544d13 is 1544.13 nm wv1544d53 is 1544.53 nm wv1544d92 is 1544.92 nm wv1545d32 is 1545.32 nm wv1545d72 is 1545.72 nm wv1546d12 is 1546.12 nm wv1546d52 is 1546.52 nm wv1546d92 is 1546.92 nm wv1547d32 is 1547.32 nm wv1547d72 is 1547.72 nm wv1548d11 is 1548.11 nm wv1548d51 is 1548.51 nm wv1548d91 is 1548.91 nm wv1549d32 is 1549.32 nm wv1549d72 is 1549.72 nm wv1550d12 is 1550.12 nm wv1550d52 is 1550.52 nm wv1550d92 is 1550.92 nm wv1551d32 is 1551.32 nm wv1551d72 is 1551.72 nm wv1552d12 is 1552.12 nm wv1552d52 is 1552.52 nm wv1552d93 is 1552.93 nm wv1553d33 is 1553.33 nm wv1553d73 is 1553.73 nm wv1554d13 is 1554.13 nm wv1554d54 is 1554.54 nm wv1554d94 is 1554.94 nm wv1555d34 is 1555.34 nm wv1555d75 is 1555.75 nm wv1556d15 is 1556.15 nm wv1556d55 is 1556.55 nm wv1556d96 is 1556.96 nm wv1557d36 is 1557.36 nm wv1557d77 is 1557.77 nm wv1558d17 is 1558.17 nm wv1558d58 is 1558.58 nm wv1558d98 is 1558.98 nm wv1559d39 is 1559.39 nm wv1559d79 is 1559.79 nm wv1560d20 is 1560.20 nm wv1560d61 is 1560.61 nm wv1561d01 is 1561.01 nm wv1561d42 is 1561.42 nm wv1561d83 is 1561.83 nm -- L Band wv1570d83 is 1570.83 nm wv1571d24 is 1571.24 nm wv1571d65 is 1571.65 nm wv1572d06 is 1572.06 nm wv1572d48 is 1572.48 nm wv1572d89 is 1572.89 nm wv1573d30 is 1573.30 nm wv1573d71 is 1573.71 nm wv1574d13 is 1574.13 nm wv1574d54 is 1574.54 nm wv1574d95 is 1574.95 nm wv1575d37 is 1575.37 nm wv1575d78 is 1575.78 nm wv1576d20 is 1576.20 nm wv1576d61 is 1576.61 nm wv1577d03 is 1577.03 nm wv1577d44 is 1577.44 nm wv1577d86 is 1577.86 nm wv1578d27 is 1578.27 nm wv1578d69 is 1578.69 nm wv1579d10 is 1579.10 nm wv1579d52 is 1579.52 nm wv1579d93 is 1579.93 nm wv1580d35 is 1580.35 nm wv1580d77 is 1580.77 nm wv1581d18 is 1581.18 nm wv1581d60 is 1581.60 nm wv1582d02 is 1582.02 nm wv1582d44 is 1582.44 nm wv1582d85 is 1582.85 nm wv1583d27 is 1583.27 nm wv1583d69 is 1583.69 nm wv1584d11 is 1584.11 nm wv1584d53 is 1584.53 nm wv1584d95 is 1584.95 nm wv1585d36 is 1585.36 nm wv1585d78 is 1585.78 nm wv1586d20 is 1586.20 nm wv1586d62 is 1586.62 nm wv1587d04 is 1587.04 nm wv1587d46 is 1587.46 nm wv1587d88 is 1587.88 nm wv1588d30 is 1588.30 nm wv1588d73 is 1588.73 nm wv1589d15 is 1589.15 nm wv1589d57 is 1589.57 nm wv1589d99 is 1589.99 nm wv1590d41 is 1590.41 nm wv1590d83 is 1590.83 nm wv1591d26 is 1591.26 nm wv1591d68 is 1591.68 nm wv1592d10 is 1592.10 nm wv1592d52 is 1592.52 nm wv1592d95 is 1592.95 nm wv1593d37 is 1593.37 nm wv1593d79 is 1593.79 nm wv1594d22 is 1594.22 nm wv1594d64 is 1594.64 nm wv1595d06 is 1595.06 nm wv1595d49 is 1595.49 nm wv1595d91 is 1595.91 nm wv1596d34 is 1596.34 nm wv1596d76 is 1596.76 nm wv1597d19 is 1597.19 nm wv1597d62 is 1597.62 nm wv1598d04 is 1598.04 nm wv1598d47 is 1598.47 nm wv1598d89 is 1598.89 nm wv1599d32 is 1599.32 nm wv1599d75 is 1599.75 nm wv1600d17 is 1600.17 nm wv1600d60 is 1600.60 nm wv1601d03 is 1601.03 nm wv1601d46 is 1601.46 nm wv1601d88 is 1601.88 nm wv1602d31 is 1602.31 nm wv1602d74 is 1602.74 nm wv1603d17 is 1603.17 nm wv1603d60 is 1603.60 nm wv1604d03 is 1604.03 nm '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 7, 10, 12, 15, 17, 20, 22, 23, 24, 25, 27, 30, 32, 35, 37, 40, 42, 43, 44, 45, 47, 50, 52, 55, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 100, 102, 103, 104, 105, 107, 110, 112, 115, 117, 120, 122, 123, 124, 125, 127, 130, 132, 135, 137, 140, 142, 143, 144, 145, 147, 150, 152, 155, 157, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 500, 505, 510, 515, 520, 530, 540))
    namedValues = NamedValues(("unknown", 1), ("wv1529d55", 3), ("wv1529d94", 4), ("wv1530d33", 5), ("wv1530d72", 7), ("wv1531d12", 10), ("wv1531d51", 12), ("wv1531d90", 15), ("wv1532d29", 17), ("wv1532d68", 20), ("wv1533d07", 22), ("wv1533d47", 23), ("wv1533d86", 24), ("wv1534d25", 25), ("wv1534d64", 27), ("wv1535d04", 30), ("wv1535d43", 32), ("wv1535d82", 35), ("wv1536d22", 37), ("wv1536d61", 40), ("wv1537d00", 42), ("wv1537d40", 43), ("wv1537d79", 44), ("wv1538d19", 45), ("wv1538d58", 47), ("wv1538d98", 50), ("wv1539d37", 52), ("wv1539d77", 55), ("wv1540d16", 57), ("wv1540d56", 60), ("wv1540d95", 62), ("wv1541d35", 63), ("wv1541d75", 64), ("wv1542d14", 65), ("wv1470", 66), ("wv1542d54", 67), ("wv1510", 68), ("wv1590", 69), ("wv1542d94", 70), ("wv850", 71), ("wv1543d33", 72), ("wv1310", 73), ("wv1550", 74), ("wv1543d73", 75), ("wv1490", 76), ("wv1544d13", 77), ("wv1530", 78), ("wv1570", 79), ("wv1544d53", 80), ("wv1610", 81), ("wv1544d92", 82), ("wv1545d32", 83), ("wv1545d72", 84), ("wv1546d12", 85), ("wv1546d52", 87), ("wv1546d92", 90), ("wv1547d32", 92), ("wv1547d72", 95), ("wv1548d11", 97), ("wv1548d51", 100), ("wv1548d91", 102), ("wv1549d32", 103), ("wv1549d72", 104), ("wv1550d12", 105), ("wv1550d52", 107), ("wv1550d92", 110), ("wv1551d32", 112), ("wv1551d72", 115), ("wv1552d12", 117), ("wv1552d52", 120), ("wv1552d93", 122), ("wv1553d33", 123), ("wv1553d73", 124), ("wv1554d13", 125), ("wv1554d54", 127), ("wv1554d94", 130), ("wv1555d34", 132), ("wv1555d75", 135), ("wv1556d15", 137), ("wv1556d55", 140), ("wv1556d96", 142), ("wv1557d36", 143), ("wv1557d77", 144), ("wv1558d17", 145), ("wv1558d58", 147), ("wv1558d98", 150), ("wv1559d39", 152), ("wv1559d79", 155), ("wv1560d20", 157), ("wv1560d61", 160), ("wv1561d01", 162), ("wv1561d42", 164), ("wv1561d83", 166), ("wv1570d83", 168), ("wv1571d24", 170), ("wv1571d65", 172), ("wv1572d06", 174), ("wv1572d48", 176), ("wv1572d89", 178), ("wv1573d30", 180), ("wv1573d71", 182), ("wv1574d13", 184), ("wv1574d54", 186), ("wv1574d95", 188), ("wv1575d37", 190), ("wv1575d78", 192), ("wv1576d20", 194), ("wv1576d61", 196), ("wv1577d03", 198), ("wv1577d44", 200), ("wv1577d86", 205), ("wv1578d27", 210), ("wv1578d69", 215), ("wv1579d10", 220), ("wv1579d52", 225), ("wv1579d93", 230), ("wv1580d35", 235), ("wv1580d77", 240), ("wv1581d18", 245), ("wv1581d60", 250), ("wv1582d02", 255), ("wv1582d44", 260), ("wv1582d85", 265), ("wv1583d27", 270), ("wv1583d69", 275), ("wv1584d11", 280), ("wv1584d53", 285), ("wv1584d95", 290), ("wv1585d36", 295), ("wv1585d78", 300), ("wv1586d20", 305), ("wv1586d62", 310), ("wv1587d04", 315), ("wv1587d46", 320), ("wv1587d88", 325), ("wv1588d30", 330), ("wv1588d73", 335), ("wv1589d15", 340), ("wv1589d57", 345), ("wv1589d99", 350), ("wv1590d41", 355), ("wv1590d83", 360), ("wv1591d26", 365), ("wv1591d68", 370), ("wv1592d10", 375), ("wv1592d52", 380), ("wv1592d95", 385), ("wv1593d37", 390), ("wv1593d79", 395), ("wv1594d22", 400), ("wv1594d64", 405), ("wv1595d06", 410), ("wv1595d49", 415), ("wv1595d91", 420), ("wv1596d34", 425), ("wv1596d76", 430), ("wv1597d19", 435), ("wv1597d62", 440), ("wv1598d04", 445), ("wv1598d47", 450), ("wv1598d89", 455), ("wv1599d32", 460), ("wv1599d75", 465), ("wv1600d17", 470), ("wv1600d60", 475), ("wv1601d03", 480), ("wv1601d46", 485), ("wv1601d88", 490), ("wv1602d31", 500), ("wv1602d74", 505), ("wv1603d17", 510), ("wv1603d60", 515), ("wv1604d03", 520), ("firsttunablewv", 530), ("wv1528d77", 540))

class OpticalPowerInDbm(TextualConvention, Integer32):
    description = "An integer value that gives the optical power level in 1/10ths of dBm. Example: The value -300 represents a power level of -30.0 dBm. The distinguished value of '-1000' indicates that the object has not yet been initialized. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-400, 250), ValueRangeConstraint(-1000, -1000), )
class OpticalAttenInDb(TextualConvention, Integer32):
    description = 'An integer value that gives the attenuation level in 1/10ths of dB. Example: The value 80 represents an attenuation level of 8.0 dB. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 400)

class TDCUCompensation(TextualConvention, Integer32):
    description = 'Enumeration of the possible fine TDCU compensation values 0 ps/nm -45 ps/nm -90 ps/nm -135 ps/nm -180 ps/nm -225 ps/nm -270 ps/nm -315 ps/nm -360 ps/nm -405 ps/nm -450 ps/nm -495 ps/nm -540 ps/nm -585 ps/nm -630 ps/nm -675 ps/nm Enumeration of the possible coarse TDCU compensation values 0 ps/nm -110 ps/nm -220 ps/nm -330 ps/nm -440 ps/nm -550 ps/nm -660 ps/nm -770 ps/nm -880 ps/nm -990 ps/nm -1100 ps/nm -1210 ps/nm -1320 ps/nm -1430 ps/nm -1540 ps/nm -1650 ps/nm '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("psnmNotApplicable", -1), ("psnm0", 0), ("psnmFineMinus45", 1), ("psnmFineMinus90", 2), ("psnmFineMinus135", 3), ("psnmFineMinus180", 4), ("psnmFineMinus225", 5), ("psnmFineMinus270", 6), ("psnmFineMinus315", 7), ("psnmFineMinus360", 8), ("psnmFineMinus405", 9), ("psnmFineMinus450", 10), ("psnmFineMinus495", 11), ("psnmFineMinus540", 12), ("psnmFineMinus585", 13), ("psnmFineMinus630", 14), ("psnmFineMinus675", 15), ("psnmCoarseMinus110", 16), ("psnmCoarseMinus220", 17), ("psnmCoarseMinus330", 18), ("psnmCoarseMinus440", 19), ("psnmCoarseMinus550", 20), ("psnmCoarseMinus660", 21), ("psnmCoarseMinus770", 22), ("psnmCoarseMinus880", 23), ("psnmCoarseMinus990", 24), ("psnmCoarseMinus1100", 25), ("psnmCoarseMinus1210", 26), ("psnmCoarseMinus1320", 27), ("psnmCoarseMinus1430", 28), ("psnmCoarseMinus1540", 29), ("psnmCoarseMinus1650", 30))

cerentMsDwdmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40))
cerentMsDwdmIf = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1))
cerentMsDwdmOtn = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2))
cerentMsDwdmFEC = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3))
cerentMsDwdm8B10B = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4))
cMsDwdmIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1), )
if mibBuilder.loadTexts: cMsDwdmIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigTable.setDescription('This table allows physical layer related interface configurations on an interface.')
cMsDwdmIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigEntry.setDescription('A collection of objects for configuration on an interface.')
cMsDwdmIfConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 1), ProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigProtocol.setDescription('This object is used to specify the protocol of the data carried over the interface. This object applies to linecards which support a variety of protocols and allow dynamic configuration of the specific protocol to be monitored on the interface. The ifType value for such interfaces remains fixed.')
cMsDwdmIfConfigDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 50, 55, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390))).clone(namedValues=NamedValues(("passThru", 10), ("stm1", 20), ("stm4", 30), ("stm16", 40), ("stm64", 50), ("stm256", 55), ("gigE", 60), ("tenGigE", 70), ("fc", 80), ("oneGfcFicon", 90), ("twoGfcFiconIsc3", 100), ("escon", 110), ("dv6000", 120), ("sdiD1Video", 130), ("hdtv", 140), ("oc3", 150), ("oc12", 160), ("oc48", 170), ("oc192", 180), ("fourGfcFicon", 190), ("tenGfc", 200), ("isc1", 210), ("isc3", 220), ("oneGigIsc3", 230), ("twoGigIsc3", 240), ("etrClo", 250), ("infiniBand", 280), ("fe", 290), ("e1t1", 300), ("e3t3", 310), ("oc3Ge", 320), ("eightGfc", 330), ("oc768", 340), ("otu1", 350), ("otu2", 360), ("otu3", 370), ("otu4", 380), ("oneHundredGe", 390)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigDataRate.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigDataRate.setDescription('This object allows the management client to set the data rate across the interface. passThru denotes 2R, Reamplification and reshaping. stm1 denotes 3R, Reamp, reshaping and reclocking. stm4 denotes 3R, Reamp, reshaping and reclocking. stm16 denotes 3R, Reamp, reshaping and reclocking. stm64 denotes 3R, Reamp, reshaping and reclocking. gigE denotes 3R, Reamp, reshaping and reclocking. tenGigE denotes 3R, Reamp, reshaping and reclocking. fc denotes 3R, Reamp, reshaping and reclocking. oneGfcFicon denotes 3R, Reamp, reshaping and reclocking. twoGfcFiconIsc3 denotes 3R, Reamp, reshaping and reclocking. escon denotes 2R, Reamp and reshaping. dv6000 denotes 2R, Reamp and reshaping. sdiD1Video denotes 2R, Reamp and reshaping. hdtv denotes 2R, Reamp and reshaping. oc3 denotes 3R, Reamp, reshaping and reclocking. oc12 denotes 3R, Reamp, reshaping and reclocking. oc48 denotes 3R, Reamp, reshaping and reclocking. oc192 denotes 3R, Reamp, reshaping and reclocking. infiniBand denotes 3R, Reamp, reshaping and reclocking. fe denotes 3R, Reamp, reshaping and reclocking. e3t3 denotes 3R, Reamp, reshaping and reclocking. oc3Ge denotes 3R, Reamp, reshaping and reclocking. ')
cMsDwdmIfConfigLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("diagnosticLoop", 2), ("lineLoop", 3), ("otherLoop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigLoopback.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigLoopback.setDescription("This object allows the management client to configure loopback for the client side or trunk side interfaces. 'noLoop' - No Loopback present. 'diagnosticLoop' - This is an internal loopback, where the data stream is looped from the transmit to receive section. It is used for hardware debug, bring-up and diagnostics. 'lineLoop' - In this mode, the receive data stream is looped back to the transmit side. 'otherLoop' - This indicates loopbacks not defined here. The default value of this object will be 'noLoop'.")
cMsDwdmIfConfigWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 4), OpticalWavelength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigWavelength.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigWavelength.setDescription('This object allows the management client to configure the wavelength mode of operation to the applicable interfaces. ')
cMsDwdmIfConfigOtnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigOtnStatus.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigOtnStatus.setDescription("This object allows the management client to enable the OTN (G.709) on an applicable interface,by writing a value of 'true' to this object. To bypass the monitoring hardware, a value of 'false' is written to this object. This object is not applicable to client side interfaces.")
cMsDwdmIfConfigFECStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigFECStatus.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigFECStatus.setDescription("This object allows the management client to enable gathering FEC ( Forward Error Correction ) counters on an applicable interface, by writing a value of 'true' to this object.To disable FEC, a value of 'false' must be written to this object. This object is not applicable to client side interfaces. This object is being replaced by cMsDwdmIfConfigFECMode and is going to become obsolete in the future releases.")
cMsDwdmIfOpticsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfOpticsValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfOpticsValidIntervals.setDescription('This object gives the number of contiguous 15 minute intervals for which valid Optical Monitor PM data is available for the particular interface. The value of this object will be n (where n is the maximum number of 15 minute intervals supported at this interface), unless the measurement was (re-)started within the last (nx15) minutes, in which case the value will be the number of 15 minute intervals for which the agent has some data.')
cMsDwdmIfOTNValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfOTNValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfOTNValidIntervals.setDescription('This object gives the number of contiguous 15 minute intervals for which valid OTN performance monitoring data is available for the particular interface. The value of this object will be n (where n is the maximum number of 15 minute intervals supported at this interface), unless the measurement was (re-)started within the last (nx15) minutes, in which case the value will be the number of 15 minute intervals for which the agent has some data. This object reports a value 0, if OTN is turned off.')
cMsDwdmIfFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfFECValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfFECValidIntervals.setDescription('This object gives the number of contiguous 15 minute intervals for which valid FEC PM data is available for the particular interface. The value of this object will be n (where n is the maximum number of 15 minute intervals supported at this interface), unless the measurement was (re-)started within the last (nx15) minutes, in which case the value will be the number of 15 minute intervals for which the agent has some data. This object reports a value 0, if FEC is turned off.')
cMsDwdmIfConfigFECMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("enableStandard", 2), ("enableEnhanced", 3), ("enableEnhancedI4", 4), ("enableEnhancedI7", 5), ("enableEnhanced20", 6), ("enableHG7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfConfigFECMode.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfConfigFECMode.setDescription("This object allows the management client to enable gathering FEC ( Forward Error Correction ) counters on an applicable interface, by writing a value of 'enableStandard' or 'enableEnhanced' to this object. To disable FEC, a value of 'disable' must be written to this object. This object is not applicable to client side interfaces.")
cMsDwdmIfTransportTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2), )
if mibBuilder.loadTexts: cMsDwdmIfTransportTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportTable.setDescription('This table defines optical transport layer related interface configurations on an interface.')
cMsDwdmIfTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfTransportEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportEntry.setDescription('A collection of objects for configuration on an optical transport interface.')
cMsDwdmIfTransportRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 1), RingDirection())
if mibBuilder.loadTexts: cMsDwdmIfTransportRingDirection.setStatus('obsolete')
if mibBuilder.loadTexts: cMsDwdmIfTransportRingDirection.setDescription('This object is used to specify the ring directionality of the port. The ring directionality gives the configuration of the facing side: facing sides can be east going to west and west going to east.')
cMsDwdmIfTransportPortRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 2), OpticalPortRule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportPortRule.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportPortRule.setDescription('This object is used to specify the type of the optical port. A transport optical port can assume one of the following values: input(1) input-express(2) output(3) output-express(4).')
cMsDwdmIfTransportPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 3), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportPower.setDescription("This object is used to specify the optical power read at the photodiode of the port. The distinguished value of '-1000' indicates that the power cannot be read due to unavaible HW resource.")
cMsDwdmIfTransportReferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 4), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportReferencePower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportReferencePower.setDescription("This object is used to specify the optical transport reference power. This is the value of power the network element will expect on the photodiode. In case the user wants to refine this value the 'cMsDwdmIfTransportCalibratedPower' can be used to add an offset to the network element setup value.")
cMsDwdmIfTransportCalibratedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 5), OpticalPowerInDbm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportCalibratedPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportCalibratedPower.setDescription("This object is used to specify the optical transport calibration power. This is the power offset that user contribute in case the 'reference' value setup by network element would be modified. ")
cMsDwdmIfTransportInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 6), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportInsertionLoss.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportInsertionLoss.setDescription('This object is used to specify the value of Insertion Loss of the optical port. ')
cMsDwdmIfTransportLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 7), LaserStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportLaserStatus.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportLaserStatus.setDescription('This object is used to specify the status of the laser. ')
cMsDwdmIfTransportAmplifierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 8), OpticalAmplifierMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportAmplifierMode.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportAmplifierMode.setDescription('This object is used to specify the working amplifier mode. ')
cMsDwdmIfTransportGain = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 9), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportGain.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportGain.setDescription('This object is used to specify the value of the gain of an amplifier ')
cMsDwdmIfTransportReferenceTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 10), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportReferenceTilt.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportReferenceTilt.setDescription('This object is used to specify the amplifier tilt value calculated by the network element.')
cMsDwdmIfTransportCalibratedTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 11), OpticalAttenInDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportCalibratedTilt.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportCalibratedTilt.setDescription("This object is used to specify the amplifier tilt offset added as offset by user in order to tune the network element calculated ('reference') value ")
cMsDwdmIfTransportDCULoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 12), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportDCULoss.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportDCULoss.setDescription('This object is used to specify the value of Insertion Loss measured for the Dispersion Compensation Unit ')
cMsDwdmIfTransportOSRI = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportOSRI.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportOSRI.setDescription('This value indicates the status of the Optical Safety Remote Interlock Valid values are - enable(1) : the OSRI is enable disable(2) : the OSRI is disable none(3) : the OSRI functionality is not present ')
cMsDwdmIfTransportExpectedGain = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 14), OpticalAttenInDb()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfTransportExpectedGain.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportExpectedGain.setDescription('This object is used to specify the value of the expected gain of an amplifier ')
cMsDwdmIfTransportSideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 15), SideIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportSideIdentifier.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportSideIdentifier.setDescription('This object is used to specify the facing side of the optical port. ')
cMsDwdmIfTransportTDCUCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 18), TDCUCompensation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportTDCUCompensation.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportTDCUCompensation.setDescription('This object is used to specify the TDCU Compensation value of the optical port belong to a TDCU card. ')
cMsDwdmIfTransportAddPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 16), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportAddPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportAddPower.setDescription("This object is used to specify the ADD optical power read at the photodiode of the port. The distinguished value of '-1000' indicates that the power cannot be read due to unavaible HW resource.")
cMsDwdmIfTransportOSCPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 2, 1, 17), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfTransportOSCPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportOSCPower.setDescription("This object is used to specify the OSC optical power read at the photodiode of the port. The distinguished value of '-1000' indicates that the power cannot be read due to unavaible HW resource.")
cMsDwdmIfMultiplexSectionTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3), )
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionTable.setDescription('This table defines optical multiplex section (band) layer related interface configurations on an interface.')
cMsDwdmIfMultiplexSectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionEntry.setDescription('A collection of objects for configuration on an optical multiplex section (band) interface.')
cMsDwdmIfMultiplexSectionRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 1), RingDirection())
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionRingDirection.setStatus('obsolete')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionRingDirection.setDescription('This object is used to specify the ring directionality of the port. The ring directionality gives the configuration of the facing side: facing sides can be east going to west and west going to east.')
cMsDwdmIfMultiplexSectionPortRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 2), OpticalPortRule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionPortRule.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionPortRule.setDescription('This object is used to specify the type of the optical port. A Multiplex Section optical port can assume one of the following values: add(5) drop(6).')
cMsDwdmIfMultiplexSectionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 3), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionPower.setDescription("This object is used to specify the optical power read at the photodiode of the port. The distinguished value of '-1000' indicates that the power cannot be read due to unavaible HW resource.")
cMsDwdmIfMultiplexSectionReferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 4), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionReferencePower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionReferencePower.setDescription("This object is used to specify the optical Multiplex Section reference power. This is the value of power the network element will expect on the photodiode. In case the user wants to refine this value the 'cMsDwdmIfMultiplexSectionCalibratedPower' can be used to add an offset to the network element setup value.")
cMsDwdmIfMultiplexSectionCalibratedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 5), OpticalPowerInDbm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionCalibratedPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionCalibratedPower.setDescription("This object is used to specify the optical MultiplexSection calibration power. This is the power offset that user contribute in case the 'reference' value setup by network element would be modified. ")
cMsDwdmIfMultiplexSectionInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 6), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionInsertionLoss.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionInsertionLoss.setDescription('This object is used to specify the value of Insertion Loss of the optical port. ')
cMsDwdmIfMultiplexSectionActualBand = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 7), OpticalBand()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionActualBand.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionActualBand.setDescription('This object is used to specify the value of Wavelength group which is tuned the optical port. ')
cMsDwdmIfMultiplexSectionExpectedBand = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 8), OpticalBand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionExpectedBand.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionExpectedBand.setDescription('This object is used to specify the value of Wavelength group that the user expects the optical port will assume. ')
cMsDwdmIfMultiplexSectionSideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 3, 1, 9), SideIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionSideIdentifier.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionSideIdentifier.setDescription('This object is used to specify the facing side of the optical port. ')
cMsDwdmIfChannelTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4), )
if mibBuilder.loadTexts: cMsDwdmIfChannelTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelTable.setDescription('This table defines optical channel layer related interface configurations on an interface.')
cMsDwdmIfChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cMsDwdmIfChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelEntry.setDescription('A collection of objects for configuration on an optical channel interface.')
cMsDwdmIfChannelRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 1), RingDirection())
if mibBuilder.loadTexts: cMsDwdmIfChannelRingDirection.setStatus('obsolete')
if mibBuilder.loadTexts: cMsDwdmIfChannelRingDirection.setDescription('This object is used to specify the ring directionality of the port. The ring directionality gives the configuration of the facing side: facing sides can be east going to west and west going to east.')
cMsDwdmIfChannelPortRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 2), OpticalPortRule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelPortRule.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelPortRule.setDescription('This object is used to specify the type of the optical port. A Multiplex Section optical port can assume one of the following values: add(5) drop(6).')
cMsDwdmIfChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 3), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelPower.setDescription("This object is used to specify the optical power read at the photodiode of the port. The distinguished value of '-1000' indicates that the power cannot be read due to unavaible HW resource.")
cMsDwdmIfChannelReferencePower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 4), OpticalPowerInDbm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelReferencePower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelReferencePower.setDescription("This object is used to specify the optical Multiplex Section reference power. This is the value of power the network element will expect on the photodiode. In case the user wants to refine this value the 'cMsDwdmIfChannelCalibratedPower' can be used to add an offset to the network element setup value.")
cMsDwdmIfChannelCalibratedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 5), OpticalPowerInDbm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfChannelCalibratedPower.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelCalibratedPower.setDescription("This object is used to specify the optical Channel calibration power. This is the power offset that user contribute in case the 'reference' value setup by network element would be modified. ")
cMsDwdmIfChannelInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 6), OpticalAttenInDb()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelInsertionLoss.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelInsertionLoss.setDescription('This object is used to specify the value of Insertion Loss of the optical port. ')
cMsDwdmIfChannelActualWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 7), OpticalWavelength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelActualWavelength.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelActualWavelength.setDescription('This object is used to specify the value of Wavelength that is tuned the optical port. ')
cMsDwdmIfChannelExpectedWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 8), OpticalWavelength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmIfChannelExpectedWavelength.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelExpectedWavelength.setDescription('This object is used to specify the value of Wavelength that the user expects the optical port will assume. ')
cMsDwdmIfChannelSideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 1, 4, 1, 9), SideIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmIfChannelSideIdentifier.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelSideIdentifier.setDescription('This object is used to specify the facing side of the optical port. ')
cMsDwdmOtnThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1), )
if mibBuilder.loadTexts: cMsDwdmOtnThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThresholdsTable.setDescription('This table provides objects for configuring OTN ( G.709 ) thresholds on trunk side interfaces.')
cMsDwdmOtnThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshMonType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshIntervalType"))
if mibBuilder.loadTexts: cMsDwdmOtnThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThresholdsEntry.setDescription('An entry in the cMsDwdmOtnThresholdsTable.')
cMsDwdmOtnThreshMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 1), MonitorType())
if mibBuilder.loadTexts: cMsDwdmOtnThreshMonType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshMonType.setDescription('This object is an index to the cMsDwdmOtnThresholdsTable. It is used to specify the type of monitoring threshold being set on an interface for OTN ( G.709 ) statistics.')
cMsDwdmOtnThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 2), LocationAndIntervalType())
if mibBuilder.loadTexts: cMsDwdmOtnThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshIntervalType.setDescription('This object is an index to the cMsDwdmOtnThresholdsTable. It specifies the interval type and monitoring location for the performance statistics.')
cMsDwdmOtnThreshFC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshFC.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshFC.setDescription('This object is used to set the threshold for the number of failure counts on applicable trunk side interfaces.')
cMsDwdmOtnThreshES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshES.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshES.setDescription('This object is used to set the threshold for the number of Errored Seconds on applicable trunk side interfaces.')
cMsDwdmOtnThreshSES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshSES.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshSES.setDescription('This object is used to set the threshold for the number of Severely Errored Seconds on applicable trunk side interfaces.')
cMsDwdmOtnThreshUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshUAS.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshUAS.setDescription('This object is used to set the threshold for the number of Unavailable Seconds on applicable trunk side interfaces.')
cMsDwdmOtnThreshBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmOtnThreshBBE.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnThreshBBE.setDescription('This object is used to set the threshold for the number of Bit Block Errors on applicable trunk side interfaces.')
cMsDwdmOtnCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2), )
if mibBuilder.loadTexts: cMsDwdmOtnCurrentTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentTable.setDescription('This table contains the cumulative OTN (G.709) PM stats for the trunk side interfaces. ')
cMsDwdmOtnCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentMonType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnCurIntervalType"))
if mibBuilder.loadTexts: cMsDwdmOtnCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentEntry.setDescription('An entry in the cMsDwdmOtnCurrentTable.')
cMsDwdmOtnCurrentMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 1), MonitorType())
if mibBuilder.loadTexts: cMsDwdmOtnCurrentMonType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentMonType.setDescription('This object is an index to the cMsDwdmOtnCurrentTable. It is used to otain G.709 statistics for path, section and tcm ( tandem connection).')
cMsDwdmOtnCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 2), LocationAndIntervalType())
if mibBuilder.loadTexts: cMsDwdmOtnCurIntervalType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurIntervalType.setDescription('This object is an index to the cMsDwdmOtnCurrentTable. It specifies the interval type (farEnd/ nearEnd and 15 min/ 1 Day )for the table objects.')
cMsDwdmOtnCurrentFC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentFC.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentFC.setDescription('The counter associated with the number of failure counts encountered on this interface in the current interval.')
cMsDwdmOtnCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentES.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentES.setDescription('The counter associated with the number of Errored Seconds encountered on this interface in the current interval.')
cMsDwdmOtnCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentSES.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentSES.setDescription('The counter associated with the number of Severely Errored Seconds encountered on this interface in the current interval.')
cMsDwdmOtnCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentUAS.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentUAS.setDescription('The counter associated with the number of Unavailable Seconds encountered on this interface in the current interval.')
cMsDwdmOtnCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentBBE.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentBBE.setDescription('The counter associated with the number of Background Block Errors encountered on this interface in the current interval.')
cMsDwdmOtnCurrentESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentESR.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentESR.setDescription('The counter associated with the Errored Seconds Ratio on this interface in the current interval.')
cMsDwdmOtnCurrentSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentSESR.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentSESR.setDescription('The counter associated with the Severely Errored Seconds ratio on this interface in the current interval.')
cMsDwdmOtnCurrentBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnCurrentBBER.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnCurrentBBER.setDescription('The counter associated with the Background Block Errors ratio on this interface in the current interval.')
cMsDwdmOtnIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3), )
if mibBuilder.loadTexts: cMsDwdmOtnIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalTable.setDescription('This table contains the cumulative OTN (G.709) PM stats for the trunk side interfaces. ')
cMsDwdmOtnIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalMonType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalNum"))
if mibBuilder.loadTexts: cMsDwdmOtnIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalEntry.setDescription('An entry in the cMsDwdmOtnIntervalTable.')
cMsDwdmOtnIntervalMonType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 1), MonitorType())
if mibBuilder.loadTexts: cMsDwdmOtnIntervalMonType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalMonType.setDescription('This object is an index to the cMsDwdmOtnIntervalTable. It is used to otain G.709 statistics for path, section and tcm ( tandem connection).')
cMsDwdmOtnIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 2), LocationAndIntervalType())
if mibBuilder.loadTexts: cMsDwdmOtnIntervalType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalType.setDescription('This object is an index to the cMsDwdmOtnIntervalTable. It specifies the interval type (farEnd/ nearEnd and 15 min/ 1 Day )for the table objects.')
cMsDwdmOtnIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cMsDwdmOtnIntervalNum.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalNum.setDescription('This object is an index to the cMsDwdmOtnIntervalTable. This object gives the number of the interval. It is a number between 1 and 96, which identifies the interval for which the set of OTN performance values is available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cMsDwdmOtnIntervalFC = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalFC.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalFC.setDescription('The counter associated with the number of failure counts encountered on this interface in a particular interval.')
cMsDwdmOtnIntervalES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalES.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalES.setDescription('The counter associated with the number of Errored Seconds encountered on this interface in a particular interval.')
cMsDwdmOtnIntervalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalSES.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalSES.setDescription('The counter associated with the number of Severely Errored Seconds encountered on this interface in a particular interval.')
cMsDwdmOtnIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalUAS.setDescription('The counter associated with the number of Unavailable Seconds encountered on this interface in a particular interval.')
cMsDwdmOtnIntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalBBE.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalBBE.setDescription('The counter associated with the number of Background Block Errors encountered on this interface in a particular interval.')
cMsDwdmOtnIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalESR.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalESR.setDescription('The counter associated with the Errored Seconds Ratio on this interface in a particular interval.')
cMsDwdmOtnIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalSESR.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalSESR.setDescription('The counter associated with the Severely Errored Seconds ratio on this interface in a particular interval.')
cMsDwdmOtnIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalBBER.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalBBER.setDescription('The counter associated with the Background Block Errors ratio on this interface in a particular interval.')
cMsDwdmOtnIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 2, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmOtnIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmOtnIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
cMsDwdmFECThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1), )
if mibBuilder.loadTexts: cMsDwdmFECThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThresholdsTable.setDescription('This table contains the configurable thresholds for FEC ( Forward Error Correction ) statistics.')
cMsDwdmFECThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECThreshIntervalType"))
if mibBuilder.loadTexts: cMsDwdmFECThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThresholdsEntry.setDescription('An entry in the cMsDwdmFECThresholdsTable.')
cMsDwdmFECThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 1), CerentPeriod())
if mibBuilder.loadTexts: cMsDwdmFECThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThreshIntervalType.setDescription('This object is an index to the cMsDwdmFECThreshTable. It gives the type of the interval for which the thresholds are being set. ')
cMsDwdmFECThreshBitErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshBitErrCor.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThreshBitErrCor.setDescription('This object sets the threshold value of the number of Bit Errors Corrected on an applicable trunk side interface.')
cMsDwdmFECThreshByteErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshByteErrCor.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThreshByteErrCor.setDescription('This object sets the threshold value of the number of Byte Errors Corrected on an applicable trunk side interface.')
cMsDwdmFECThreshZeroErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshZeroErrDet.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThreshZeroErrDet.setDescription('This object sets the threshold value of the number of zero bit errors detected on an applicable trunk side interface.')
cMsDwdmFECThreshOneErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshOneErrDet.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThreshOneErrDet.setDescription('This object sets the threshold value of the number of one bit errors detected on an applicable trunk side interface.')
cMsDwdmFECThreshUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMsDwdmFECThreshUncorWords.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECThreshUncorWords.setDescription('This object sets the threshold value of the number of Uncorrectable Words on an applicable trunk side interface.')
cMsDwdmFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2), )
if mibBuilder.loadTexts: cMsDwdmFECCurrentTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentTable.setDescription('This table contains the cumulative PM statistics for FEC ( Forward Error Correction ) on an applicable interface.')
cMsDwdmFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECCurIntervalType"))
if mibBuilder.loadTexts: cMsDwdmFECCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentEntry.setDescription('An entry in the cMsDwdmFECCurrentTable.')
cMsDwdmFECCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 1), CerentPeriod())
if mibBuilder.loadTexts: cMsDwdmFECCurIntervalType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurIntervalType.setDescription('This object is an index to the cMsDwdmFECCurrentTable. It gives the type of interval for which the FEC values have been collected.')
cMsDwdmFECCurrentBitErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentBitErrCor.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentBitErrCor.setDescription('The counter associated with the number of Bit Errors Corrected on this interface in the current interval.')
cMsDwdmFECCurrentByteErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentByteErrCor.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentByteErrCor.setDescription('The counter associated with the number of Byte Errors Corrected on this interface in the current interval.')
cMsDwdmFECCurrentZeroErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentZeroErrDet.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentZeroErrDet.setDescription('The counter associated with the number of zero bit errors detected on this interface in the current interval.')
cMsDwdmFECCurrentOneErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentOneErrDet.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentOneErrDet.setDescription('The counter associated with the number of one bit errors detected on this interface in the current interval.')
cMsDwdmFECCurrentUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECCurrentUncorWords.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECCurrentUncorWords.setDescription('The counter associated with the number of Uncorrectable Words encountered on this interface in the current interval.')
cMsDwdmFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3), )
if mibBuilder.loadTexts: cMsDwdmFECIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalTable.setDescription('This table contains the cumulative PM statistics for FEC ( Forward Error Correction ) on an applicable interface.')
cMsDwdmFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalType"), (0, "CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalNum"))
if mibBuilder.loadTexts: cMsDwdmFECIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalEntry.setDescription('An entry in the cMsDwdmFECIntervalTable.')
cMsDwdmFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 1), CerentPeriod())
if mibBuilder.loadTexts: cMsDwdmFECIntervalType.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalType.setDescription('This object is an index to the cMsDwdmFECIntervalTable. It gives the type of interval for which the FEC values have been collected.')
cMsDwdmFECIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cMsDwdmFECIntervalNum.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalNum.setDescription('This object is an index to the cMsDwdmFECIntervalTable. It is a number between 1 and 96, which identifies the interval for which the set of FEC PM values is available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cMsDwdmFECIntervalBitErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalBitErrCor.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalBitErrCor.setDescription('The counter associated with the number of Bit Errors Corrected on this interface in a particular interval.')
cMsDwdmFECIntervalByteErrCor = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalByteErrCor.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalByteErrCor.setDescription('The counter associated with the number of Byte Errors Corrected on this interface in a particular interval.')
cMsDwdmFECIntervalZeroErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalZeroErrDet.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalZeroErrDet.setDescription('The counter associated with the number of zero bit errors detected on this interface in a particular interval.')
cMsDwdmFECIntervalOneErrDet = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalOneErrDet.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalOneErrDet.setDescription('The counter associated with the number of one bit errors detected on this interface in a particular interval.')
cMsDwdmFECIntervalUncorWords = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalUncorWords.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalUncorWords.setDescription('The counter associated with the number of Uncorrectable Words encountered on this interface in a particular interval.')
cMsDwdmFECIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 3, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMsDwdmFECIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmFECIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
c8B10BThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1), )
if mibBuilder.loadTexts: c8B10BThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: c8B10BThresholdsTable.setDescription('This table contains the configurable thresholds for the 8B10B stats.')
c8B10BThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "c8B10BThreshIntervalType"))
if mibBuilder.loadTexts: c8B10BThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: c8B10BThresholdsEntry.setDescription('An entry in the c8B10BThresholds Table.')
c8B10BThreshIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 1), IntervalType())
if mibBuilder.loadTexts: c8B10BThreshIntervalType.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshIntervalType.setDescription('This object is an index to the c8B10BThresholdsTable. It gives the type of interval.')
c8B10BThreshInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshInvalidPkts.setDescription('This object represents the lower word value of the threshold associated with the number of 8B10B invalid packets. The object c8B10BThreshIPOverflow contains the higher 32 bit value of this number. ')
c8B10BThreshIPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshIPOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshIPOverflow.setDescription('This object represents the higher word value of the threshold associated with the number of 8B10B invalid packets. The object c8B10BThreshInvalidPkts contains the lower 32 bits of this number. If the threshold is greater than 4,294,967,295, the higher word value will be stored in this object.')
c8B10BThreshHCInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshHCInvalidPkts.setDescription('This object is used to obtain the value of threshold configured for the number of 8B10B Invalid Packets. This a High capacity ( 64 bits ) counter.')
c8B10BThreshValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshValidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshValidPkts.setDescription('This object represents the lower word value of the threshold associated with the number of 8B10B valid packets. The object c8B10BThreshVPOverflow contains the higher 32 bit value of this number. ')
c8B10BThreshVPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshVPOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshVPOverflow.setDescription('This object represents the higher word value of the threshold associated with the number of 8B10B valid packets. The object c8B10BThreshValidPkts contains the lower 32 bits of this number. If the threshold is greater than 4,294,967,295, the higher word value will be stored in this object.')
c8B10BThreshHCValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCValidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshHCValidPkts.setDescription('This object is used to obtain the value of threshold configured for the number of 8B10B Valid Packets. This a High capacity ( 64 bits ) counter.')
c8B10BThreshIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshIdleSets.setDescription('This object represents the lower word value of the threshold associated with the number of 8B10B idle sets. The object c8B10BThreshISOverflow contains the higher 32 bit value of this number. ')
c8B10BThreshISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshISOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshISOverflow.setDescription('This object represents the higher word value of the threshold associated with the number of 8B10B idle sets. The object c8B10BThreshIdleSets contains the lower 32 bits of this number. If the threshold is greater than 4,294,967,295, the higher word value will be stored in this object.')
c8B10BThreshHCIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshHCIdleSets.setDescription('This object is used to obtain the value of threshold configured for the number of 8B10B idle sets. This a High capacity ( 64 bits ) counter.')
c8B10BThreshNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshNonIdleSets.setDescription('This object represents the lower word value of the threshold associated with the number of 8B10B non idle sets. The object c8B10BThreshNISOverflow contains the higher 32 bit value of this number. ')
c8B10BThreshNISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshNISOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshNISOverflow.setDescription('This object represents the higher word value of the threshold associated with the number of 8B10B non idle sets. The object c8B10BThreshNonIdleSets contains the lower 32 bits of this number. If the threshold is greater than 4,294,967,295, the higher word value will be stored in this object.')
c8B10BThreshHCNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshHCNonIdleSets.setDescription('This object is used to obtain the value of threshold configured for the number of 8B10B non idle sets. This a High capacity ( 64 bits ) counter.')
c8B10BThreshDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshDataSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshDataSets.setDescription('This object represents the lower word value of the threshold associated with the number of 8B10B data code groups. The object c8B10BThreshDSOverflow contains the higher 32 bit value of this number. ')
c8B10BThreshDSOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshDSOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshDSOverflow.setDescription('This object represents the higher word value of the threshold associated with the number of 8B10B data code groups. The object c8B10BThreshDataSets contains the lower 32 bits of this number. If the threshold is greater than 4,294,967,295, the higher word value will be stored in this object.')
c8B10BThreshHCDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCDataSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshHCDataSets.setDescription('This object is used to obtain the value of threshold configured for the number of 8B10B data code groups. This a High capacity ( 64 bits ) counter.')
c8B10BThreshCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshCodeViols.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshCodeViols.setDescription('This object represents the lower word value of the threshold associated with the number of 8B10B coding violations encountered. The object c8B10BThreshCVOverflow contains the higher 32 bit value of this number.')
c8B10BThreshCVOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c8B10BThreshCVOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshCVOverflow.setDescription('This object represents the higher word value of threshold associated with the number of 8B10B code violations encountered. The object c8B10BThreshCodeViols contains the lower 32 bits of this number. If the threshold is greater than 4,294,967,295, the higher word value will be stored in this object.')
c8B10BThreshHCCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BThreshHCCodeViols.setStatus('current')
if mibBuilder.loadTexts: c8B10BThreshHCCodeViols.setDescription('This object is used to obtain the value of threshold configured for the number of 8B10B Coding Violations on this interface. This a High capacity ( 64 bits ) counter.')
c8B10BCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2), )
if mibBuilder.loadTexts: c8B10BCurrentTable.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentTable.setDescription('This table contains the cumulative PM statistics for the Fiber Channel/ Gigabit Ethernet (8B10B) on the applicable interfaces.')
c8B10BCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "c8B10BCurIntervalType"))
if mibBuilder.loadTexts: c8B10BCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentEntry.setDescription('An entry in the c8B10BCurrentTable.')
c8B10BCurIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 1), IntervalType())
if mibBuilder.loadTexts: c8B10BCurIntervalType.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurIntervalType.setDescription('This object is an index to the c8B10BCurrentTable. It gives the type of interval for which 8B10B data has been collected.')
c8B10BCurrentCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentCodeViols.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentCodeViols.setDescription('This object gives the value of the number of 8B10B Coding Violations encountered on an interface for the current interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BCurrentCVOverflow. SNMP v2c or v3 managers can directly use c8B10BCurrentHCCodeViols, which is a 64 bit counter.')
c8B10BCurrentCVOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentCVOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentCVOverflow.setDescription('This object gives the higher word value the number of 8B10B Coding Violations encountered on an interface for the current interval. If the value of c8B10BCurrentCodeViols is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BCurrentHCCodeViols, which is a 64 bit counter.')
c8B10BCurrentHCCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCCodeViols.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentHCCodeViols.setDescription('The counter associated with the number of 8B10B coding violations encountered on this interface in the current interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BCurrentValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentValidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentValidPkts.setDescription('This object gives the value of the number of 8B10B Valid Packets encountered on an interface for the current interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BCurrentVPOverflow. SNMP v2c or v3 managers can directly use c8B10BCurrentHCValidPkts, which is a 64 bit counter.')
c8B10BCurrentVPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentVPOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentVPOverflow.setDescription('This object gives the higher word value the number of 8B10B valid packets encountered on an interface for the current interval. If the value of c8B10BCurrentValidPkts is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BCurrentHCValidPkts, which is a 64 bit counter.')
c8B10BCurrentHCValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCValidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentHCValidPkts.setDescription('The counter associated with the number of 8B10B valid packets on this interface in the current interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BCurrentInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentInvalidPkts.setDescription('This object gives the value of the number of 8B10B invalid packets encountered on an interface for the current interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BCurrentIPOverflow. SNMP v2c or v3 managers can directly use c8B10BCurrentHCInvalidPkts, which is a 64 bit counter.')
c8B10BCurrentIPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentIPOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentIPOverflow.setDescription('This object gives the higher word value the number of 8B10B invalid packets encountered on an interface for the current interval. If the value of c8B10BCurrentInvalidPkts is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BCurrentHCInvalidPkts, which is a 64 bit counter.')
c8B10BCurrentHCInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentHCInvalidPkts.setDescription('The counter associated with the number of 8B10B invalid packets encountered on this interface in the current interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BCurrentIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentIdleSets.setDescription('This object gives the value of the number of 8B10B Idle sets encountered on an interface for the current interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BCurrentISOverflow. SNMP v2c or v3 managers can directly use c8B10BCurrentHCIdleSets, which is a 64 bit counter.')
c8B10BCurrentISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentISOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentISOverflow.setDescription('This object gives the higher word value the number of 8B10B idle sets encountered on an interface for the current interval. If the value of c8B10BCurrentIdleSets is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BCurrentHCIdleSets, which is a 64 bit counter.')
c8B10BCurrentHCIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentHCIdleSets.setDescription('The counter associated with the number of 8B10B idle sets encountered on this interface in the current interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BCurrentNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentNonIdleSets.setDescription('This object gives the value of the number of 8B10B non idle sets encountered on an interface for the current interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BCurrentNISOverflow. SNMP v2c or v3 managers can directly use c8B10BCurrentHCNonIdleSets, which is a 64 bit counter.')
c8B10BCurrentNISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentNISOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentNISOverflow.setDescription('This object gives the higher word value the number of 8B10B non idle sets encountered on an interface for the current interval. If the value of c8B10BCurrentNonIdleSets is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BCurrentHCNonIdleSets, which is a 64 bit counter.')
c8B10BCurrentHCNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentHCNonIdleSets.setDescription('The counter associated with the number of 8B10B non-idle sets encountered on this interface in the current interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BCurrentDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentDataSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentDataSets.setDescription('This object gives the value of the number of 8B10B data code groups encountered on an interface for the current interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BCurrentDSOverflow. SNMP v2c or v3 managers can directly use c8B10BCurrentHCDataSets, which is a 64 bit counter.')
c8B10BCurrentDSOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentDSOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentDSOverflow.setDescription('This object gives the higher word value the number of 8B10B data code groups encountered on an interface for the current interval. If the value of c8B10BCurrentDataSets is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BCurrentHCDataSets, which is a 64 bit counter.')
c8B10BCurrentHCDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BCurrentHCDataSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BCurrentHCDataSets.setDescription('The counter associated with the number of 8B10B data code groups encountered on this interface in the current interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3), )
if mibBuilder.loadTexts: c8B10BIntervalTable.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalTable.setDescription('This table contains the cumulative PM statistics for the Fiber Channel/ Gigabit Ethernet (8B10B) on the applicable interfaces.')
c8B10BIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CERENT-MSDWDM-MIB", "c8B10BIntervalType"), (0, "CERENT-MSDWDM-MIB", "c8B10BIntervalNum"))
if mibBuilder.loadTexts: c8B10BIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalEntry.setDescription('An entry in the c8B10BIntervalTable.')
c8B10BIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 1), IntervalType())
if mibBuilder.loadTexts: c8B10BIntervalType.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalType.setDescription('This object is an index to the c8B10BIntervalTable. It gives the type of interval for which 8B10B data has been collected.')
c8B10BIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: c8B10BIntervalNum.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalNum.setDescription('This object gives the number of the interval. It is a number between 1 and 96, which identifies the interval for which the set of 8B10B performance values is available. The interval identified by 1 is the most recent 15 minute or 24 hour interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
c8B10BIntervalCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalCodeViols.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalCodeViols.setDescription('This object gives the value of the number of 8B10B Coding Violations encountered on an interface for a particular interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BIntervalCVOverflow. SNMP v2c or v3 managers can directly use c8B10BIntervalHCCodeViols, which is a 64 bit counter.')
c8B10BIntervalCVOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalCVOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalCVOverflow.setDescription('This object gives the higher word value the number of 8B10B Coding Violations encountered on an interface for a particular interval. If the value of c8B10BIntervalCodeViols is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BIntervalHCCodeViols, which is a 64 bit counter.')
c8B10BIntervalHCCodeViols = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCCodeViols.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalHCCodeViols.setDescription('The counter associated with the number of 8B10B coding violations encountered on this interface in a particular interval. This is a High Capacity ( 64 bit ) counter. ')
c8B10BIntervalValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalValidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalValidPkts.setDescription('This object gives the value of the number of 8B10B Valid Packets encountered on an interface for a particular interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BIntervalVPOverflow. SNMP v2c or v3 managers can directly use c8B10BIntervalHCValidPkts, which is a 64 bit counter. ')
c8B10BIntervalVPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalVPOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalVPOverflow.setDescription('This object gives the higher word value the number of 8B10B valid packets encountered on an interface for a particular interval. If the value of c8B10BIntervalValidPkts is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BIntervalHCValidPkts, which is a 64 bit counter.')
c8B10BIntervalHCValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCValidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalHCValidPkts.setDescription('The counter associated with the number of 8B10B valid packets on this interface in a particular interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BIntervalInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalInvalidPkts.setDescription('This object gives the value of the number of 8B10B invalid packets encountered on an interface for a particular interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BIntervalIPOverflow. SNMP v2c or v3 managers can directly use c8B10BIntervalHCInvalidPkts, which is a 64 bit counter.')
c8B10BIntervalIPOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalIPOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalIPOverflow.setDescription('This object gives the higher word value the number of 8B10B invalid packets encountered on an interface for a particular interval. If the value of c8B10BIntervalInvalidPkts is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BIntervalHCInvalidPkts, which is a 64 bit counter.')
c8B10BIntervalHCInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalHCInvalidPkts.setDescription('The counter associated with the number of 8B10B invalid packets encountered on this interface in a particular interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BIntervalIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalIdleSets.setDescription('This object gives the value of the number of 8B10B Idle sets encountered on an interface for a particular interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BIntervalISOverflow. SNMP v2c or v3 managers can directly use c8B10BIntervalHCIdleSets, which is a 64 bit counter.')
c8B10BIntervalISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalISOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalISOverflow.setDescription('This object gives the higher word value the number of 8B10B idle sets encountered on an interface for a particular interval. If the value of c8B10BIntervalIdleSets is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BIntervalHCIdleSets, which is a 64 bit counter.')
c8B10BIntervalHCIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalHCIdleSets.setDescription('The counter associated with the number of 8B10B idle sets encountered on this interface in a particular interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BIntervalNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalNonIdleSets.setDescription('This object gives the value of the number of 8B10B non idle sets encountered on an interface for a particular interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BIntervalNISOverflow. SNMP v2c or v3 managers can directly use c8B10BIntervalHCNonIdleSets, which is a 64 bit counter.')
c8B10BIntervalNISOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalNISOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalNISOverflow.setDescription('This object gives the higher word value the number of 8B10B non idle sets encountered on an interface for a particular interval. If the value of c8B10BIntervalNonIdleSets is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BIntervalHCNonIdleSets, which is a 64 bit counter.')
c8B10BIntervalHCNonIdleSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCNonIdleSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalHCNonIdleSets.setDescription('The counter associated with the number of 8B10B non-idle sets encountered on this interface in a particular interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BIntervalDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalDataSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalDataSets.setDescription('This object gives the value of the number of 8B10B data code groups encountered on an interface for a particular interval. This object only shows the lower word value of the counter.The high word value is given by c8B10BIntervalDSOverflow. SNMP v2c or v3 managers can directly use c8B10BIntervalHCDataSets, which is a 64 bit counter.')
c8B10BIntervalDSOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalDSOverflow.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalDSOverflow.setDescription('This object gives the higher word value the number of 8B10B data code groups encountered on an interface for a particular interval. If the value of c8B10BIntervalDataSets is greater than 4,294,967,295, the higher word value will be stored in this object. SNMP v2c or v3 managers can directly use c8B10BIntervalHCDataSets, which is a 64 bit counter.')
c8B10BIntervalHCDataSets = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalHCDataSets.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalHCDataSets.setDescription('The counter associated with the number of 8B10B data code groups encountered on this interface in a particular interval. This is a High Capacity ( 64 bit ) counter.')
c8B10BIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3607, 2, 40, 4, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c8B10BIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: c8B10BIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
cerentMsDwdmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 30))
cerentMsDwdmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 30, 1))
cerentMsDwdmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2))
cerentMsDwdmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3607, 5, 30, 1, 1)).setObjects(("CERENT-MSDWDM-MIB", "cerentMsDwdmIfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmMIBCompliance = cerentMsDwdmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cerentMsDwdmMIBCompliance.setDescription('The compliance statement for platforms that monitor the operating status and FEC/OTN with respect to error counters, for the physical layer.')
cerentMsDwdmIfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 1)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigProtocol"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigDataRate"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigLoopback"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigWavelength"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigOtnStatus"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigFECStatus"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfOpticsValidIntervals"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfOTNValidIntervals"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfFECValidIntervals"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfConfigFECMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmIfConfigGroup = cerentMsDwdmIfConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cerentMsDwdmIfConfigGroup.setDescription('The collection of objects to allow configurations and give information related to the physical layer characteristics of an interface.')
cerentMsDwdmOtnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 2)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshFC"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshSES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshUAS"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnThreshBBE"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentFC"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentSES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentUAS"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentBBE"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentSESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnCurrentBBER"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalFC"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalSES"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalUAS"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalBBE"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalSESR"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalBBER"), ("CERENT-MSDWDM-MIB", "cMsDwdmOtnIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmOtnGroup = cerentMsDwdmOtnGroup.setStatus('current')
if mibBuilder.loadTexts: cerentMsDwdmOtnGroup.setDescription('The objects used for monitoring the OTN error counters.')
cerentMsDwdmFECGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 3)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshBitErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshByteErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshZeroErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshOneErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECThreshUncorWords"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentBitErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentByteErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentZeroErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentOneErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECCurrentUncorWords"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalBitErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalByteErrCor"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalZeroErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalOneErrDet"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalUncorWords"), ("CERENT-MSDWDM-MIB", "cMsDwdmFECIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerentMsDwdmFECGroup = cerentMsDwdmFECGroup.setStatus('current')
if mibBuilder.loadTexts: cerentMsDwdmFECGroup.setDescription('The objects used for monitoring the FEC error counters.')
cMsDwdmIfTransportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 5)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportPortRule"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportReferencePower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportCalibratedPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportInsertionLoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportLaserStatus"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportAmplifierMode"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportGain"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportReferenceTilt"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportCalibratedTilt"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportDCULoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportExpectedGain"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportOSRI"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfTransportSideIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMsDwdmIfTransportGroup = cMsDwdmIfTransportGroup.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfTransportGroup.setDescription('The collection of objects to allow configurations and give information related to the optical transportp hysical layer characteristics of an interface.')
cMsDwdmIfMultiplexSectionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 6)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionPortRule"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionReferencePower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionCalibratedPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionInsertionLoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionActualBand"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionExpectedBand"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfMultiplexSectionSideIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMsDwdmIfMultiplexSectionTableGroup = cMsDwdmIfMultiplexSectionTableGroup.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfMultiplexSectionTableGroup.setDescription('The collection of objects to allow configurations and give information related to the optical multiplex section physical layer characteristics of an interface.')
cMsDwdmIfChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 7)).setObjects(("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelPortRule"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelReferencePower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelCalibratedPower"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelInsertionLoss"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelActualWavelength"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelExpectedWavelength"), ("CERENT-MSDWDM-MIB", "cMsDwdmIfChannelSideIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cMsDwdmIfChannelGroup = cMsDwdmIfChannelGroup.setStatus('current')
if mibBuilder.loadTexts: cMsDwdmIfChannelGroup.setDescription('The collection of objects to allow configurations and give information related to the optical channel physical layer characteristics of an interface.')
cerent8B10BThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 8)).setObjects(("CERENT-MSDWDM-MIB", "c8B10BThreshInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BThreshIPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshVPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshNISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshDSOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshCVOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BThreshHCCodeViols"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerent8B10BThreshGroup = cerent8B10BThreshGroup.setStatus('current')
if mibBuilder.loadTexts: cerent8B10BThreshGroup.setDescription('The collection of objects used to set the thresholds on 8B10B counters.')
cerent8B10BStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3607, 5, 30, 2, 9)).setObjects(("CERENT-MSDWDM-MIB", "c8B10BCurrentCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentCVOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentVPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentIPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentNISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentDSOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BCurrentHCDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCCodeViols"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCValidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCInvalidPkts"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCNonIdleSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalHCDataSets"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalCVOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalVPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalIPOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalNISOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalDSOverflow"), ("CERENT-MSDWDM-MIB", "c8B10BIntervalValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerent8B10BStatsGroup = cerent8B10BStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cerent8B10BStatsGroup.setDescription('The collection of objects used to monitor the 8B10B error counters.')
mibBuilder.exportSymbols("CERENT-MSDWDM-MIB", c8B10BCurrentHCInvalidPkts=c8B10BCurrentHCInvalidPkts, c8B10BIntervalCVOverflow=c8B10BIntervalCVOverflow, cMsDwdmFECCurrentZeroErrDet=cMsDwdmFECCurrentZeroErrDet, c8B10BCurrentIPOverflow=c8B10BCurrentIPOverflow, c8B10BThreshHCDataSets=c8B10BThreshHCDataSets, cMsDwdmIfFECValidIntervals=cMsDwdmIfFECValidIntervals, cMsDwdmOtnIntervalFC=cMsDwdmOtnIntervalFC, c8B10BThreshNISOverflow=c8B10BThreshNISOverflow, c8B10BCurrentHCNonIdleSets=c8B10BCurrentHCNonIdleSets, LaserStatus=LaserStatus, c8B10BThreshInvalidPkts=c8B10BThreshInvalidPkts, c8B10BIntervalIdleSets=c8B10BIntervalIdleSets, cMsDwdmOtnIntervalESR=cMsDwdmOtnIntervalESR, cMsDwdmOtnIntervalNum=cMsDwdmOtnIntervalNum, c8B10BThreshVPOverflow=c8B10BThreshVPOverflow, cerentMsDwdmOtnGroup=cerentMsDwdmOtnGroup, cerentMsDwdmIfConfigGroup=cerentMsDwdmIfConfigGroup, c8B10BThreshIPOverflow=c8B10BThreshIPOverflow, c8B10BCurrentDSOverflow=c8B10BCurrentDSOverflow, cMsDwdmFECCurrentByteErrCor=cMsDwdmFECCurrentByteErrCor, cMsDwdmFECIntervalNum=cMsDwdmFECIntervalNum, cMsDwdmFECThreshOneErrDet=cMsDwdmFECThreshOneErrDet, c8B10BCurrentHCCodeViols=c8B10BCurrentHCCodeViols, cMsDwdmIfConfigFECStatus=cMsDwdmIfConfigFECStatus, cMsDwdmIfChannelSideIdentifier=cMsDwdmIfChannelSideIdentifier, cMsDwdmOtnCurrentSES=cMsDwdmOtnCurrentSES, cMsDwdmFECCurrentEntry=cMsDwdmFECCurrentEntry, c8B10BCurrentValidPkts=c8B10BCurrentValidPkts, c8B10BThreshIdleSets=c8B10BThreshIdleSets, cMsDwdmIfConfigTable=cMsDwdmIfConfigTable, cMsDwdmOtnThreshBBE=cMsDwdmOtnThreshBBE, c8B10BIntervalCodeViols=c8B10BIntervalCodeViols, c8B10BIntervalValidData=c8B10BIntervalValidData, cMsDwdmIfChannelEntry=cMsDwdmIfChannelEntry, cMsDwdmOtnThreshES=cMsDwdmOtnThreshES, cMsDwdmFECCurrentUncorWords=cMsDwdmFECCurrentUncorWords, cMsDwdmFECIntervalBitErrCor=cMsDwdmFECIntervalBitErrCor, IntervalType=IntervalType, cMsDwdmOtnThresholdsTable=cMsDwdmOtnThresholdsTable, cerentMsDwdmMIBGroups=cerentMsDwdmMIBGroups, cMsDwdmIfTransportEntry=cMsDwdmIfTransportEntry, c8B10BIntervalValidPkts=c8B10BIntervalValidPkts, cMsDwdmIfConfigOtnStatus=cMsDwdmIfConfigOtnStatus, c8B10BIntervalNISOverflow=c8B10BIntervalNISOverflow, OpticalAttenInDb=OpticalAttenInDb, cMsDwdmOtnCurIntervalType=cMsDwdmOtnCurIntervalType, cMsDwdmIfMultiplexSectionPower=cMsDwdmIfMultiplexSectionPower, c8B10BIntervalDSOverflow=c8B10BIntervalDSOverflow, cMsDwdmIfMultiplexSectionPortRule=cMsDwdmIfMultiplexSectionPortRule, cMsDwdmIfChannelRingDirection=cMsDwdmIfChannelRingDirection, OpticalWavelength=OpticalWavelength, cerent8B10BThreshGroup=cerent8B10BThreshGroup, cMsDwdmIfMultiplexSectionTable=cMsDwdmIfMultiplexSectionTable, RingDirection=RingDirection, c8B10BThreshISOverflow=c8B10BThreshISOverflow, cMsDwdmFECThreshIntervalType=cMsDwdmFECThreshIntervalType, cMsDwdmIfTransportGroup=cMsDwdmIfTransportGroup, c8B10BCurrentISOverflow=c8B10BCurrentISOverflow, LocationAndIntervalType=LocationAndIntervalType, cMsDwdmOtnIntervalBBE=cMsDwdmOtnIntervalBBE, cMsDwdmIfConfigFECMode=cMsDwdmIfConfigFECMode, c8B10BIntervalHCInvalidPkts=c8B10BIntervalHCInvalidPkts, c8B10BIntervalHCValidPkts=c8B10BIntervalHCValidPkts, cMsDwdmFECCurrentOneErrDet=cMsDwdmFECCurrentOneErrDet, cMsDwdmIfTransportReferencePower=cMsDwdmIfTransportReferencePower, c8B10BCurrentInvalidPkts=c8B10BCurrentInvalidPkts, cMsDwdmOtnCurrentFC=cMsDwdmOtnCurrentFC, cMsDwdmIfTransportExpectedGain=cMsDwdmIfTransportExpectedGain, PYSNMP_MODULE_ID=cerentMsDwdmMIB, cMsDwdmIfChannelGroup=cMsDwdmIfChannelGroup, cMsDwdmIfMultiplexSectionInsertionLoss=cMsDwdmIfMultiplexSectionInsertionLoss, cMsDwdmFECThreshUncorWords=cMsDwdmFECThreshUncorWords, cerentMsDwdmMIBConformance=cerentMsDwdmMIBConformance, c8B10BIntervalVPOverflow=c8B10BIntervalVPOverflow, OpticalPowerInDbm=OpticalPowerInDbm, cMsDwdmFECCurIntervalType=cMsDwdmFECCurIntervalType, c8B10BCurrentDataSets=c8B10BCurrentDataSets, c8B10BCurrentIdleSets=c8B10BCurrentIdleSets, c8B10BThreshDSOverflow=c8B10BThreshDSOverflow, cerentMsDwdmFEC=cerentMsDwdmFEC, c8B10BThreshHCValidPkts=c8B10BThreshHCValidPkts, cMsDwdmIfChannelInsertionLoss=cMsDwdmIfChannelInsertionLoss, c8B10BThreshDataSets=c8B10BThreshDataSets, c8B10BThreshHCCodeViols=c8B10BThreshHCCodeViols, TDCUCompensation=TDCUCompensation, cMsDwdmIfChannelActualWavelength=cMsDwdmIfChannelActualWavelength, cMsDwdmFECThreshByteErrCor=cMsDwdmFECThreshByteErrCor, cMsDwdmIfChannelPortRule=cMsDwdmIfChannelPortRule, c8B10BIntervalType=c8B10BIntervalType, cerentMsDwdmOtn=cerentMsDwdmOtn, c8B10BThreshCodeViols=c8B10BThreshCodeViols, c8B10BIntervalInvalidPkts=c8B10BIntervalInvalidPkts, c8B10BIntervalNum=c8B10BIntervalNum, cMsDwdmFECIntervalByteErrCor=cMsDwdmFECIntervalByteErrCor, c8B10BCurrentHCValidPkts=c8B10BCurrentHCValidPkts, cMsDwdmIfTransportCalibratedTilt=cMsDwdmIfTransportCalibratedTilt, cMsDwdmIfTransportRingDirection=cMsDwdmIfTransportRingDirection, cMsDwdmIfTransportReferenceTilt=cMsDwdmIfTransportReferenceTilt, cMsDwdmOtnCurrentBBE=cMsDwdmOtnCurrentBBE, c8B10BThreshValidPkts=c8B10BThreshValidPkts, c8B10BThreshIntervalType=c8B10BThreshIntervalType, cMsDwdmFECIntervalValidData=cMsDwdmFECIntervalValidData, cMsDwdmOtnCurrentTable=cMsDwdmOtnCurrentTable, c8B10BIntervalIPOverflow=c8B10BIntervalIPOverflow, cMsDwdmFECThresholdsTable=cMsDwdmFECThresholdsTable, cerentMsDwdmMIB=cerentMsDwdmMIB, cerentMsDwdmMIBCompliances=cerentMsDwdmMIBCompliances, cMsDwdmOtnThreshIntervalType=cMsDwdmOtnThreshIntervalType, cMsDwdmIfChannelReferencePower=cMsDwdmIfChannelReferencePower, cerentMsDwdmIf=cerentMsDwdmIf, cMsDwdmIfMultiplexSectionExpectedBand=cMsDwdmIfMultiplexSectionExpectedBand, cMsDwdmIfChannelPower=cMsDwdmIfChannelPower, cMsDwdmIfTransportTDCUCompensation=cMsDwdmIfTransportTDCUCompensation, cMsDwdmIfMultiplexSectionCalibratedPower=cMsDwdmIfMultiplexSectionCalibratedPower, c8B10BCurrentNISOverflow=c8B10BCurrentNISOverflow, cMsDwdmIfTransportDCULoss=cMsDwdmIfTransportDCULoss, cMsDwdmOtnIntervalEntry=cMsDwdmOtnIntervalEntry, cMsDwdmIfOpticsValidIntervals=cMsDwdmIfOpticsValidIntervals, OpticalBand=OpticalBand, cMsDwdmFECIntervalTable=cMsDwdmFECIntervalTable, c8B10BCurrentVPOverflow=c8B10BCurrentVPOverflow, cerentMsDwdm8B10B=cerentMsDwdm8B10B, cMsDwdmIfMultiplexSectionTableGroup=cMsDwdmIfMultiplexSectionTableGroup, cMsDwdmFECIntervalEntry=cMsDwdmFECIntervalEntry, cerent8B10BStatsGroup=cerent8B10BStatsGroup, cMsDwdmIfMultiplexSectionSideIdentifier=cMsDwdmIfMultiplexSectionSideIdentifier, c8B10BCurrentCodeViols=c8B10BCurrentCodeViols, cMsDwdmFECThreshZeroErrDet=cMsDwdmFECThreshZeroErrDet, cMsDwdmFECThreshBitErrCor=cMsDwdmFECThreshBitErrCor, cMsDwdmOtnCurrentBBER=cMsDwdmOtnCurrentBBER, c8B10BThreshCVOverflow=c8B10BThreshCVOverflow, cMsDwdmIfTransportInsertionLoss=cMsDwdmIfTransportInsertionLoss, cMsDwdmIfTransportCalibratedPower=cMsDwdmIfTransportCalibratedPower, cMsDwdmFECThresholdsEntry=cMsDwdmFECThresholdsEntry, cMsDwdmIfTransportLaserStatus=cMsDwdmIfTransportLaserStatus, cMsDwdmIfTransportOSCPower=cMsDwdmIfTransportOSCPower, c8B10BThreshHCNonIdleSets=c8B10BThreshHCNonIdleSets, cMsDwdmOtnCurrentEntry=cMsDwdmOtnCurrentEntry, c8B10BCurrentHCIdleSets=c8B10BCurrentHCIdleSets, ProtocolType=ProtocolType, cMsDwdmIfConfigDataRate=cMsDwdmIfConfigDataRate, cMsDwdmOtnCurrentMonType=cMsDwdmOtnCurrentMonType, c8B10BCurrentTable=c8B10BCurrentTable, c8B10BCurrentNonIdleSets=c8B10BCurrentNonIdleSets, cMsDwdmFECIntervalOneErrDet=cMsDwdmFECIntervalOneErrDet, c8B10BThresholdsTable=c8B10BThresholdsTable, c8B10BCurrentHCDataSets=c8B10BCurrentHCDataSets, c8B10BIntervalEntry=c8B10BIntervalEntry, cMsDwdmOtnThreshUAS=cMsDwdmOtnThreshUAS, c8B10BThreshHCIdleSets=c8B10BThreshHCIdleSets, cMsDwdmOtnCurrentES=cMsDwdmOtnCurrentES, OpticalAmplifierMode=OpticalAmplifierMode, cMsDwdmIfConfigEntry=cMsDwdmIfConfigEntry, cMsDwdmOtnIntervalValidData=cMsDwdmOtnIntervalValidData, cMsDwdmOtnIntervalTable=cMsDwdmOtnIntervalTable, c8B10BCurIntervalType=c8B10BCurIntervalType, c8B10BIntervalNonIdleSets=c8B10BIntervalNonIdleSets, c8B10BIntervalHCDataSets=c8B10BIntervalHCDataSets, c8B10BIntervalDataSets=c8B10BIntervalDataSets, c8B10BIntervalTable=c8B10BIntervalTable, cMsDwdmOtnThreshSES=cMsDwdmOtnThreshSES, cMsDwdmIfConfigLoopback=cMsDwdmIfConfigLoopback, cMsDwdmOtnCurrentUAS=cMsDwdmOtnCurrentUAS, c8B10BThreshNonIdleSets=c8B10BThreshNonIdleSets, cMsDwdmOtnCurrentSESR=cMsDwdmOtnCurrentSESR, OpticalPortRule=OpticalPortRule, MonitorType=MonitorType, cMsDwdmOtnThreshFC=cMsDwdmOtnThreshFC, cMsDwdmIfOTNValidIntervals=cMsDwdmIfOTNValidIntervals, cMsDwdmOtnIntervalMonType=cMsDwdmOtnIntervalMonType, cMsDwdmIfMultiplexSectionReferencePower=cMsDwdmIfMultiplexSectionReferencePower, cMsDwdmIfTransportPortRule=cMsDwdmIfTransportPortRule, cMsDwdmOtnIntervalUAS=cMsDwdmOtnIntervalUAS, cerentMsDwdmFECGroup=cerentMsDwdmFECGroup, SideIdentifier=SideIdentifier, cMsDwdmIfTransportPower=cMsDwdmIfTransportPower, cMsDwdmIfTransportSideIdentifier=cMsDwdmIfTransportSideIdentifier, cMsDwdmIfConfigWavelength=cMsDwdmIfConfigWavelength, cMsDwdmIfChannelCalibratedPower=cMsDwdmIfChannelCalibratedPower, cMsDwdmOtnIntervalES=cMsDwdmOtnIntervalES, c8B10BThresholdsEntry=c8B10BThresholdsEntry, c8B10BCurrentCVOverflow=c8B10BCurrentCVOverflow, c8B10BIntervalISOverflow=c8B10BIntervalISOverflow, c8B10BThreshHCInvalidPkts=c8B10BThreshHCInvalidPkts, cMsDwdmIfMultiplexSectionActualBand=cMsDwdmIfMultiplexSectionActualBand, cMsDwdmFECIntervalType=cMsDwdmFECIntervalType, cMsDwdmIfTransportTable=cMsDwdmIfTransportTable, c8B10BIntervalHCCodeViols=c8B10BIntervalHCCodeViols, c8B10BIntervalHCNonIdleSets=c8B10BIntervalHCNonIdleSets, cMsDwdmOtnIntervalSES=cMsDwdmOtnIntervalSES, cMsDwdmOtnThresholdsEntry=cMsDwdmOtnThresholdsEntry, c8B10BIntervalHCIdleSets=c8B10BIntervalHCIdleSets, cMsDwdmIfChannelExpectedWavelength=cMsDwdmIfChannelExpectedWavelength, cMsDwdmOtnIntervalType=cMsDwdmOtnIntervalType, cerentMsDwdmMIBObjects=cerentMsDwdmMIBObjects, c8B10BCurrentEntry=c8B10BCurrentEntry, cMsDwdmFECCurrentTable=cMsDwdmFECCurrentTable, cMsDwdmFECCurrentBitErrCor=cMsDwdmFECCurrentBitErrCor, cMsDwdmOtnCurrentESR=cMsDwdmOtnCurrentESR, cMsDwdmOtnIntervalSESR=cMsDwdmOtnIntervalSESR, cMsDwdmIfTransportAddPower=cMsDwdmIfTransportAddPower, cMsDwdmIfTransportOSRI=cMsDwdmIfTransportOSRI, cMsDwdmFECIntervalZeroErrDet=cMsDwdmFECIntervalZeroErrDet, cMsDwdmIfTransportGain=cMsDwdmIfTransportGain, cMsDwdmOtnThreshMonType=cMsDwdmOtnThreshMonType, cMsDwdmOtnIntervalBBER=cMsDwdmOtnIntervalBBER, cMsDwdmIfMultiplexSectionRingDirection=cMsDwdmIfMultiplexSectionRingDirection, cMsDwdmIfConfigProtocol=cMsDwdmIfConfigProtocol, cMsDwdmFECIntervalUncorWords=cMsDwdmFECIntervalUncorWords, cMsDwdmIfTransportAmplifierMode=cMsDwdmIfTransportAmplifierMode, cerentMsDwdmMIBCompliance=cerentMsDwdmMIBCompliance, cMsDwdmIfChannelTable=cMsDwdmIfChannelTable, cMsDwdmIfMultiplexSectionEntry=cMsDwdmIfMultiplexSectionEntry)
