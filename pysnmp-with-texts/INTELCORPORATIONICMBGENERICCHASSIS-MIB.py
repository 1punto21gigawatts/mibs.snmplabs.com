#
# PySNMP MIB module INTELCORPORATIONICMBGENERICCHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONICMBGENERICCHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, iso, TimeTicks, Bits, NotificationType, ObjectIdentity, enterprises, NotificationType, Gauge32, Counter64, ModuleIdentity, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "iso", "TimeTicks", "Bits", "NotificationType", "ObjectIdentity", "enterprises", "NotificationType", "Gauge32", "Counter64", "ModuleIdentity", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
platforms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
icmbChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this system.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this system.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this system.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this system.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date when this component was installed.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tIcmbState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12), )
if mibBuilder.loadTexts: tIcmbState.setStatus('mandatory')
if mibBuilder.loadTexts: tIcmbState.setDescription('Access to information on basic chassis features.')
eIcmbState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eIcmbState.setStatus('mandatory')
if mibBuilder.loadTexts: eIcmbState.setDescription('')
a12ChassisAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vAvailable", 0), ("vShuttingDown", 1), ("vUnavailable", 2), ("vInitializing", 3), ("vUnknown", 4), ("vNonaccessible", 5), ("vGoingNonaccessible", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12ChassisAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: a12ChassisAvailable.setDescription('This attribute indicates whether the chassis is currently visible on the ICMB.')
a12IcmbId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 2), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12IcmbId.setStatus('mandatory')
if mibBuilder.loadTexts: a12IcmbId.setDescription("This is the bus ID of the chassis' ICMB bridge.")
a12SdrDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SdrDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a12SdrDeviceId.setDescription('This is the IMB address of the device providing access to the chassis Sensor Data Repository. A value of 0xff indicates there is no such device known.')
a12SelDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SelDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a12SelDeviceId.setDescription('This is the IMB address of the device providing access to thechassis System Event Log.A value of 0xff indicates there is no such device known.')
a12SmDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12SmDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a12SmDeviceId.setDescription('This is the IMB address of the device providing access to thechassis System Management software.A value of 0xff indicates there is no such device known.')
a12SdrReadState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12SdrReadState.setStatus('mandatory')
if mibBuilder.loadTexts: a12SdrReadState.setDescription('This attribute indicates whether the chassis SDR is used topopulate the sensor tables')
a12EventPollingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 7), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12EventPollingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventPollingPeriod.setDescription('This is the period in seconds between polls for new chassisevent . A value of 0 disables polling.')
a12EventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventCount.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventCount.setDescription('This is the number of chassis events generated.')
a12ManageChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12ManageChassis.setStatus('mandatory')
if mibBuilder.loadTexts: a12ManageChassis.setDescription('This indicates whether events should be generated for this chassis')
a12SetAvailablityState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 10), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12SetAvailablityState.setStatus('mandatory')
if mibBuilder.loadTexts: a12SetAvailablityState.setDescription('Sets chassis availability state. Writing zero to this attribute instructs the chassis to become unavailable. Writing non-zero instructs the chassis to become available.')
a12UniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 11), DmiOctetstring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12UniqueId.setStatus('mandatory')
if mibBuilder.loadTexts: a12UniqueId.setDescription('')
a12PreviousAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vAvailable", 0), ("vShuttingDown", 1), ("vUnavailable", 2), ("vInitializing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a12PreviousAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a12PreviousAvailabilityStatus.setDescription('')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, and availabili y status, and administrative state indicators for specific Device Group instance .')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a31OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a31OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a31OperationalStateInstanceIndex.setDescription('The Index into the Operational State table.')
a31DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a31DeviceGroupIndex.setDescription('The group ID of the group referencing this instance.')
a31OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31OperationalStatus.setDescription('The operational status of the Device Group instance.')
a31UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a31UsageState.setDescription('The usage state of the Device Group instance.')
a31AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31AvailabilityStatus.setDescription('The availability status of the Device Group instance.')
a31AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a31AdministrativeState.setDescription('The administrative state of the Device Group instance.')
a31FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31FatalErrorCount.setDescription('The accumulated Fatal or Non-recoverable error count for this Device Group instance.')
a31MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31MajorErrorCount.setDescription('The accumulated Major or Critical error count for this Device Group instance.')
a31WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a31WarningErrorCount.setDescription('The accumulated Warning or Non-Critical error count for this Device Group instance.')
a31CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a31CurrentErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a31CurrentErrorStatus.setDescription("This attribute presents the current error status for this Device Group instance. The most critical error status in effect should be presented. I.e. if a part of the Device Group instance is 'Critical', while other status is 'Non-critical' then the status'Critical' should be reported.")
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tFieldReplaceableUnit.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware component which is designed to be separately removable for replacement or repair. For the purposes of this definition, a motherboard and a fixed hard disk are FRUs, whereas a fixed hard disk platter or a chip fixed in place on the motherboard are not FRUs since they are not designed to be separately removable. Each instance within the FRU table should contain the device group and instance data for the associated hardware component.')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a93FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eFieldReplaceableUnit.setDescription('')
a93FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93FruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a93FruIndex.setDescription('The index into the Field Replaceable Unit table.')
a93DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a93DeviceGroupIndex.setDescription('The group ID of the group referencing this Field Replaceable Unitinstance.')
a93Description = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93Description.setStatus('mandatory')
if mibBuilder.loadTexts: a93Description.setDescription('A clear description of this Field Replaceable Unit.')
a93Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a93Manufacturer.setDescription('The name of the company manufacturing or providing this Field Replaceable Unit.')
a93Model = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93Model.setStatus('mandatory')
if mibBuilder.loadTexts: a93Model.setDescription("The manufacturer's model number for this Field Replaceable Unit.")
a93PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a93PartNumber.setDescription('A part number by which a replacement part can be ordered for this Field Replaceable Unit.')
a93FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a93FruSerialNumber.setDescription("The manufacturer's serial number for this Field Replaceable Unit.")
a93RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93RevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a93RevisionLevel.setDescription('The revision level of this Field Replaceable Unit.')
a93WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93WarrantyStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: a93WarrantyStartDate.setDescription('The start date of the service warranty for this Field Replaceabl Unit.')
a93WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93WarrantyDuration.setStatus('mandatory')
if mibBuilder.loadTexts: a93WarrantyDuration.setDescription('The total duration of this Field Replaceable Unit warranty in months.')
a93SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93SupportPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a93SupportPhoneNumber.setDescription('The phone number(s) for support for this Field Replaceable Unit.')
a93FruInternetUniformResourceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 93, 1, 12), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a93FruInternetUniformResourceLocator.setStatus('mandatory')
if mibBuilder.loadTexts: a93FruInternetUniformResourceLocator.setDescription('The Internet Uniform Resource Locator string that can be used through a World Wide Web browser to obtain further information about this FRU')
tEventGenerationForPhysicalContainer = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116), )
if mibBuilder.loadTexts: tEventGenerationForPhysicalContainer.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForPhysicalContainer.setDescription('')
eEventGenerationForPhysicalContainer = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForPhysicalContainer.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForPhysicalContainer.setDescription('')
a116EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 256))).clone(namedValues=NamedValues(("vSecuritySettingsChange", 1), ("vPowerSupplyStatusChange", 2), ("vCoolingDeviceStatusChange", 3), ("vPhysicalDeviceStatusChange", 4), ("vLogicalDeviceStatusChange", 5), ("vContainerSecurityBreach", 6), ("vConfigurationError", 7), ("vContainerSecurityStatusOk", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventType.setDescription('The type of event that has occurred.')
a116EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical1", 8), ("vCritical", 16), ("vNon-recoverable1", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventSeverity.setDescription('The severity of this event.')
a116IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a116IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a116IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a116IsEventState_based.setDescription('The value of this attribute determines whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Otherwise the Event is not state-based.')
a116EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventStateKey.setDescription("A unique, single integer key into the Event State group if this is a state-based Event. If this is not a state-based Event then this attribute's value is not defined.")
a116AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a116AssociatedGroup.setDescription('The class name of the group that is associated with the events defined in this Event Generation group.')
a116EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a116EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a116EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a116EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
tPhysicalContainerGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127), )
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalContainerGlobalTable.setDescription('This group of attributes describes the fields in a row of the Physical Container Global Table. This table lists all of the containers (e.g. chassis, sub-chassis, etc.) included within the component whose structure is being described.')
ePhysicalContainerGlobalTable = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a127ContainerIndex"))
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalContainerGlobalTable.setDescription('')
a127ContainerOrChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDesktop", 3), ("vLowProfileDesktop", 4), ("vPizzaBox", 5), ("vMiniTower", 6), ("vTower", 7), ("vPortable", 8), ("vLaptop", 9), ("vNotebook", 10), ("vHandHeld", 11), ("vDockingStation", 12), ("vAllInOne", 13), ("vSubNotebook", 14), ("vSpace-saving", 15), ("vLunchBox", 16), ("vMainSystemChassis", 17), ("vExpansionChassis", 18), ("vSubchassis", 19), ("vBusExpansionChassis", 20), ("vPeripheralChassis", 21), ("vRaidChassis", 22), ("vRackMountChassis", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127ContainerOrChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: a127ContainerOrChassisType.setDescription('The type of container or chassis.')
a127AssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 2), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a127AssetTag.setStatus('mandatory')
if mibBuilder.loadTexts: a127AssetTag.setDescription('The Container asset tag string.This asset tag string is writeabl by the system administrator.')
a127ChassisLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127ChassisLockPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a127ChassisLockPresent.setDescription('If true, a chassis lock is present on the Container.')
a127BootupState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127BootupState.setStatus('mandatory')
if mibBuilder.loadTexts: a127BootupState.setDescription('The current state of this system when it booted.')
a127PowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127PowerState.setStatus('mandatory')
if mibBuilder.loadTexts: a127PowerState.setDescription('The current state of the power supply for this system.')
a127ThermalState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vWarning", 4), ("vCritical", 5), ("vNon-recoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127ThermalState.setStatus('mandatory')
if mibBuilder.loadTexts: a127ThermalState.setDescription('The current thermal state of this Container.')
a127FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a127FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a127OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a127OperationalGroupIndex.setDescription('The index into the Operational State table for this device if applicable.')
a127ContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127ContainerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a127ContainerIndex.setDescription('A unique index for the Physical Container in Physical Container Global Table.')
a127ContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 10), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a127ContainerName.setStatus('mandatory')
if mibBuilder.loadTexts: a127ContainerName.setDescription('This is any 64-octet long name that the user or system administr tor wishes to give this specific physical container.')
a127ContainerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 11), DmiDisplaystring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a127ContainerLocation.setStatus('mandatory')
if mibBuilder.loadTexts: a127ContainerLocation.setDescription('This attribute is a string name for the location of the containe . This attribute is Read-Write and may be set to any appropriate value by the user. The string may be 128 octets long.')
a127ContainerSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 127, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNoSecurityBreachDetected", 3), ("vContainerSecurityBreachAttempted", 4), ("vContainerSecurityBreached", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a127ContainerSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a127ContainerSecurityStatus.setDescription('This attribute describes whether the Container is physically secure or not. This includes the state of the door lock, or the boot devices or the keyboard or mouse.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1001), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1001, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a1001MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1001, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibName.setDescription('The MIB name that defines this MIF')
a1001MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibOid.setDescription('The MIB Object Identifier that corresponds to this MIF')
a1001DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1001, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1001DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a1001DisableTrap.setDescription('This attribute can be changed to disable sending oftraps from this component')
tSystemControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004), )
if mibBuilder.loadTexts: tSystemControl.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemControl.setDescription('Status and control of global system control features.')
eSystemControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1004Selfid"))
if mibBuilder.loadTexts: eSystemControl.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemControl.setDescription('')
a1004Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a1004Selfid.setDescription('A unique number that identifies this row.')
a1004ResetSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDoNotReset", 0), ("vInitiateReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ResetSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ResetSystem.setDescription('Writing to the attribute initiates an immediate system hard reset. The value for this attribute is either Do Not Reset or Initiate Reset.')
a1004TimedResetIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004TimedResetIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: a1004TimedResetIncrement.setDescription('This attribute contains the increments in which a timed reset can be set, in microseconds.')
a1004TimedResetResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004TimedResetResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a1004TimedResetResolution.setDescription('This attribute contains the resolution to which a Timed Reset can be set, in microseconds. For example, a resolution of 1 second and an increment of 10 seconds would indicate that a 10 second delay interval setting produces a 9 to 10 second delay. ')
a1004TimeUntilSystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 5), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004TimeUntilSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: a1004TimeUntilSystemReset.setDescription('This attribute contains the interval for timed resets, in units of the Timed Reset Increment attribute. Writing a non-zero value, and setting the Timed Reset Enable on, initiates a timed reset countdown. ')
a1004SystemPowerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vUnknown", 0), ("vUnsupported", 1), ("vOnAndOff", 2), ("vOffOnly", 3), ("vOnOnly", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004SystemPowerCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: a1004SystemPowerCapabilities.setDescription('This attribute describes the system power control capabilities. It can have one of the following values: Unknown, On And Off, Off Only, or On Only.')
a1004SystemPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004SystemPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a1004SystemPowerStatus.setDescription('This attribute provides access to the status and control of system power. Its value is either On or Off.')
a1004EventLoggingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 0), ("vUnsupported", 1), ("vActive", 2), ("vInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004EventLoggingCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a1004EventLoggingCapability.setDescription('This attribute describes the Event Logging Capabilities. The attribute value can be : Unknown, Unsupported, Active, or Inactive. If the Event logging capability is Active, the BIOS logs the system errors to the FLASH. The LSC reads this FLASH log and takes appropriate actions. If this feature is Inactive, the LSC will read the values from the system registers directly. The Event logging capability can be set to Active or Inactive using the System Configuration Utility (SCU).')
a1004WatchdogTimerIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004WatchdogTimerIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: a1004WatchdogTimerIncrement.setDescription('This attribute contains the increments in which a watchdog update interval can be set. This value is maintained internally by instrumentati n code in microseconds. In LSC Local Console, this value is shown in Seconds.')
a1004WatchdogTimerResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1004WatchdogTimerResolution.setStatus('mandatory')
if mibBuilder.loadTexts: a1004WatchdogTimerResolution.setDescription('Resolution to which a watchdog update interval can be set. For example, a watchdog timer resolution of R microsecond and an watchdog timer increment of I microseconds would indicate that a watchdog update interva setting of N will produce a (N*I)-R to (N*I) microseconds delay. In LSC Local Console, this value is shown in Seconds.')
a1004WatchdogUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 11), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004WatchdogUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: a1004WatchdogUpdateInterval.setDescription("This attribute specifies the Interval for watchdog resets, in minutes. If the system software does not update the watchdog timer within this interval, a hard reset will occur. Selecting a non-zero value for this attribute and setting the Use System Watchdog Feature attribute to 'On' starts the watchdog reset timer countdown. ")
a1004UseSystemWatchdogFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004UseSystemWatchdogFeature.setStatus('mandatory')
if mibBuilder.loadTexts: a1004UseSystemWatchdogFeature.setDescription('If this value is On, then the Watchdog feature is enabled and the Watchdog Update Interval value is valid. If enabled this feature automatically resets the server if the LSC software does not reset the watchdog timer within the specified Watchdog Update Interval. NOTE : This is a hard reset that will immediately reset the system without taking NetWare down. This might result in some files being corrupted.')
a1004ResetSystemAfterDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ResetSystemAfterDelay.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ResetSystemAfterDelay.setDescription('This attribute controls whether or not the timed reset function is enabled. If the value is On, then the system will reset when the Timed Reset Interval expires.')
a1004SavePersistentData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004SavePersistentData.setStatus('mandatory')
if mibBuilder.loadTexts: a1004SavePersistentData.setDescription('When this attribute value is set to ON all the persistent data like thresholds are stored into the persistent data Table. ')
a1004RestoreFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOff", 0), ("vOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004RestoreFactoryDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: a1004RestoreFactoryDefaults.setDescription('When this attribute value is set to ON all the Factory default thresholds are restored. ')
a1004ShutdownOs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDoNotShutdown", 0), ("vShutdownOs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOs.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ShutdownOs.setDescription('Writing to this attribute initiates an immediate OS shutdown. The value of this attribute is either Do Not Shutdown or Shutdown OS.')
a1004ShutdownOsAndPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDoNotShutdownAndPowerOff", 0), ("vShutdownAndPowerOff", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOsAndPowerOff.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ShutdownOsAndPowerOff.setDescription('Writing to this attribute initiates an immediate OS shutdown and Power Off of the system. The value of this attribute is either Do Not Shutdown and Power Off or Shutdown OS and Power Off.')
a1004ShutdownOsAndHardwareReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDoNotShutdownAndHardwareReset", 0), ("vShutdownAndHardwareReset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004ShutdownOsAndHardwareReset.setStatus('mandatory')
if mibBuilder.loadTexts: a1004ShutdownOsAndHardwareReset.setDescription('Writing to this attribute initiates an immediate OS shutdown. The value of this attribute is either Do Not Shutdown and Hardware Reset or Shutdown OS and Hardware Reset.')
a1004IssueAHardwareNmi = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1004, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDoNotIssueAnNmi", 0), ("vIssueAnNmi", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1004IssueAHardwareNmi.setStatus('mandatory')
if mibBuilder.loadTexts: a1004IssueAHardwareNmi.setDescription('Writing to this attribute causes a hardware NMI (Non Maskabale Interrup). It will have one of the two values. Issue an NMI, or Do Not Issue an NMI ')
tSystemEventLog = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006), )
if mibBuilder.loadTexts: tSystemEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemEventLog.setDescription('This group provides raw access to System Event Log (SEL) recordsThis data is intended for use by a Service & Support person')
eSystemEventLog = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1006Selfid"))
if mibBuilder.loadTexts: eSystemEventLog.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemEventLog.setDescription('')
a1006Selfid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006Selfid.setStatus('mandatory')
if mibBuilder.loadTexts: a1006Selfid.setDescription('A unique number that identifies this row.')
a1006Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006, 1, 2), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006Timestamp.setStatus('mandatory')
if mibBuilder.loadTexts: a1006Timestamp.setDescription('The time and date when this record was written.')
a1006RecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordType.setStatus('mandatory')
if mibBuilder.loadTexts: a1006RecordType.setDescription('Type of this record.')
a1006RecordLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordLength.setStatus('mandatory')
if mibBuilder.loadTexts: a1006RecordLength.setDescription('Length of this record.')
a1006RecordData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1006, 1, 5), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1006RecordData.setStatus('mandatory')
if mibBuilder.loadTexts: a1006RecordData.setDescription('Binary Data associated with this record')
tEventGenerationForIcmbState = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007), )
if mibBuilder.loadTexts: tEventGenerationForIcmbState.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForIcmbState.setDescription('')
eEventGenerationForIcmbState = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForIcmbState.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForIcmbState.setDescription('')
a1007EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vChassisAvailabilityChange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a1007EventType.setDescription('The type of event that has occurred.')
a1007EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a1007EventSeverity.setDescription('The severity of this event.')
a1007IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a1007IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a1007IsEventState_based.setDescription('The value of this attribute determines whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Otherwise the Event is not state-based.')
a1007EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a1007EventStateKey.setDescription("A unique, single integer key into the Event State group if this is a state-based Event. If this is not a state-based Event then this attribute's value is not defined.")
a1007AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a1007AssociatedGroup.setDescription('The class name of the group that is associated with the events defined in this Event Generation group.')
a1007EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a1007EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a1007EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1007EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a1007EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
tEifControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2000), )
if mibBuilder.loadTexts: tEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: tEifControl.setDescription('Special control group for use with EIF')
eEifControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2000, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: eEifControl.setDescription('')
a2000Status = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2000, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther1", 1), ("vUnknown1", 2), ("vCreatedOnly", 3), ("vConstructedOnly", 4), ("vFullyOperational", 5), ("vIdle1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000Status.setStatus('mandatory')
if mibBuilder.loadTexts: a2000Status.setDescription('Current status of this component as set by EIF')
a2000DimContext = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2000, 1, 2), DmiOctetstring()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000DimContext.setStatus('mandatory')
if mibBuilder.loadTexts: a2000DimContext.setDescription("Opaque data used by DIM objects to obtain their context informat on from some invocating source. It is assumed that the DIMs will be able to usefully parse the information in this attribute, as the 'mainline' DMI code in the CI makes no attempt to understand it.")
a2000PersistentDataWriteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2000, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2000PersistentDataWriteDelay.setStatus('mandatory')
if mibBuilder.loadTexts: a2000PersistentDataWriteDelay.setDescription('Defines the timeout from an attribute set operation until the presistent write operation is invoked. If another set operation takes place during this period, the timeout timer is reset back to this value, so a persistent write operation will only take place after the specified period has elasped with no set operations. Timeout is specified in 1/10 second quantity. If set to zero, no persistent write operation will occur.')
a2000EifInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2000, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2000EifInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: a2000EifInterfaceName.setDescription('EIF Interface Name used to distinguish the component type this MIF file represents.')
tEifExtensionList = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2001), )
if mibBuilder.loadTexts: tEifExtensionList.setStatus('mandatory')
if mibBuilder.loadTexts: tEifExtensionList.setDescription('A specific extension library specification')
eEifExtensionList = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2001, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2001Index"))
if mibBuilder.loadTexts: eEifExtensionList.setStatus('mandatory')
if mibBuilder.loadTexts: eEifExtensionList.setDescription('')
a2001Index = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2001, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2001Index.setStatus('mandatory')
if mibBuilder.loadTexts: a2001Index.setDescription('row index')
a2001Filename = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2001Filename.setStatus('mandatory')
if mibBuilder.loadTexts: a2001Filename.setDescription('name of extension library')
tEventGenerationForEifControl = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002), )
if mibBuilder.loadTexts: tEventGenerationForEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: tEventGenerationForEifControl.setDescription('')
eEventGenerationForEifControl = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1), ).setIndexNames((0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002AssociatedGroup"))
if mibBuilder.loadTexts: eEventGenerationForEifControl.setStatus('mandatory')
if mibBuilder.loadTexts: eEventGenerationForEifControl.setDescription('')
a2002EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vNoDimContextsCreated", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventType.setDescription('The type of event that has occurred.')
a2002EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventSeverity.setDescription('The severity of this event.')
a2002IsEventState_based = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setLabel("a2002IsEventState-based").setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002IsEventState_based.setStatus('mandatory')
if mibBuilder.loadTexts: a2002IsEventState_based.setDescription('The value of this attribute determines whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Otherwise the Event is not state-based.')
a2002EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventStateKey.setDescription("A unique, single integer key into the Event State group if this is a state-based Event. If this is not a state-based Event then this attribute's value is not defined.")
a2002AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a2002AssociatedGroup.setDescription('The class name of the group that is associated with the events defined in this Event Generation group.')
a2002EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a2002EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vOther", 0), ("vUnknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2002EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a2002EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
trap1ForPhysicalContainer = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1) + (0,6)).setObjects(("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventType"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventSeverity"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116IsEventState_based"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventStateKey"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116AssociatedGroup"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventSystem"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventSubsystem"))
if mibBuilder.loadTexts: trap1ForPhysicalContainer.setDescription('Container Security Breached')
trap2ForPhysicalContainer = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 116, 1) + (0,256)).setObjects(("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventType"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventSeverity"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116IsEventState_based"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventStateKey"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116AssociatedGroup"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventSystem"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a116EventSubsystem"))
if mibBuilder.loadTexts: trap2ForPhysicalContainer.setDescription('Container Secured')
trap1ForIcmbState = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 1007, 1) + (0,1)).setObjects(("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007EventType"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007EventSeverity"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007IsEventState_based"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007EventStateKey"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007AssociatedGroup"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007EventSystem"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a1007EventSubsystem"))
if mibBuilder.loadTexts: trap1ForIcmbState.setDescription('Chassis availability change')
trap1ForEifControl = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5, 1, 2002, 1) + (0,1)).setObjects(("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002EventType"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002EventSeverity"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002IsEventState_based"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002EventStateKey"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002AssociatedGroup"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002EventSystem"), ("INTELCORPORATIONICMBGENERICCHASSIS-MIB", "a2002EventSubsystem"))
if mibBuilder.loadTexts: trap1ForEifControl.setDescription('No DIM Context created')
mibBuilder.exportSymbols("INTELCORPORATIONICMBGENERICCHASSIS-MIB", a12SelDeviceId=a12SelDeviceId, a31OperationalStatus=a31OperationalStatus, a127PowerState=a127PowerState, a1Installation=a1Installation, a116IsEventState_based=a116IsEventState_based, a127FruGroupIndex=a127FruGroupIndex, a1004Selfid=a1004Selfid, a2000DimContext=a2000DimContext, a1004WatchdogUpdateInterval=a1004WatchdogUpdateInterval, a31AdministrativeState=a31AdministrativeState, a1006Timestamp=a1006Timestamp, a1006RecordLength=a1006RecordLength, tEventGenerationForEifControl=tEventGenerationForEifControl, trap1ForIcmbState=trap1ForIcmbState, a31AvailabilityStatus=a31AvailabilityStatus, a1001MibName=a1001MibName, a2000EifInterfaceName=a2000EifInterfaceName, a1007AssociatedGroup=a1007AssociatedGroup, a127ContainerName=a127ContainerName, ePhysicalContainerGlobalTable=ePhysicalContainerGlobalTable, a1004RestoreFactoryDefaults=a1004RestoreFactoryDefaults, a1SerialNumber=a1SerialNumber, a93SupportPhoneNumber=a93SupportPhoneNumber, a1007EventType=a1007EventType, a12SmDeviceId=a12SmDeviceId, a1006RecordData=a1006RecordData, a1007EventSystem=a1007EventSystem, a12PreviousAvailabilityStatus=a12PreviousAvailabilityStatus, eFieldReplaceableUnit=eFieldReplaceableUnit, a12UniqueId=a12UniqueId, a1004WatchdogTimerResolution=a1004WatchdogTimerResolution, a1007EventSeverity=a1007EventSeverity, a2002EventSeverity=a2002EventSeverity, tMiftomib=tMiftomib, eEifControl=eEifControl, a116EventSystem=a116EventSystem, tEifControl=tEifControl, a1004SystemPowerStatus=a1004SystemPowerStatus, a12EventCount=a12EventCount, a1004ShutdownOsAndPowerOff=a1004ShutdownOsAndPowerOff, tEifExtensionList=tEifExtensionList, eIcmbState=eIcmbState, a2000PersistentDataWriteDelay=a2000PersistentDataWriteDelay, a2002EventSubsystem=a2002EventSubsystem, a2002AssociatedGroup=a2002AssociatedGroup, a12IcmbId=a12IcmbId, eSystemControl=eSystemControl, a1004UseSystemWatchdogFeature=a1004UseSystemWatchdogFeature, tEventGenerationForIcmbState=tEventGenerationForIcmbState, a1004SavePersistentData=a1004SavePersistentData, a31CurrentErrorStatus=a31CurrentErrorStatus, a2001Filename=a2001Filename, a2002EventType=a2002EventType, a93RevisionLevel=a93RevisionLevel, a116EventType=a116EventType, a116EventSubsystem=a116EventSubsystem, a1006RecordType=a1006RecordType, a12ManageChassis=a12ManageChassis, tEventGenerationForPhysicalContainer=tEventGenerationForPhysicalContainer, trap1ForEifControl=trap1ForEifControl, a31MajorErrorCount=a31MajorErrorCount, DmiCounter=DmiCounter, a1004WatchdogTimerIncrement=a1004WatchdogTimerIncrement, a31FatalErrorCount=a31FatalErrorCount, a93Manufacturer=a93Manufacturer, a12ChassisAvailable=a12ChassisAvailable, a1Verify=a1Verify, a127ContainerIndex=a127ContainerIndex, a1004TimedResetIncrement=a1004TimedResetIncrement, eMiftomib=eMiftomib, a1007IsEventState_based=a1007IsEventState_based, a1004ShutdownOsAndHardwareReset=a1004ShutdownOsAndHardwareReset, a1004ResetSystemAfterDelay=a1004ResetSystemAfterDelay, a127BootupState=a127BootupState, a2001Index=a2001Index, a1004TimedResetResolution=a1004TimedResetResolution, a1004ShutdownOs=a1004ShutdownOs, a116AssociatedGroup=a116AssociatedGroup, a93FruSerialNumber=a93FruSerialNumber, a93WarrantyDuration=a93WarrantyDuration, a93WarrantyStartDate=a93WarrantyStartDate, dmtfGroups=dmtfGroups, eComponentid=eComponentid, a12SdrDeviceId=a12SdrDeviceId, a93Model=a93Model, a127OperationalGroupIndex=a127OperationalGroupIndex, a2002IsEventState_based=a2002IsEventState_based, a116EventStateKey=a116EventStateKey, icmbChassis=icmbChassis, trap2ForPhysicalContainer=trap2ForPhysicalContainer, a1004SystemPowerCapabilities=a1004SystemPowerCapabilities, tComponentid=tComponentid, a12EventPollingPeriod=a12EventPollingPeriod, a1004TimeUntilSystemReset=a1004TimeUntilSystemReset, products=products, a127ContainerOrChassisType=a127ContainerOrChassisType, a31DeviceGroupIndex=a31DeviceGroupIndex, a2002EventStateKey=a2002EventStateKey, a93FruIndex=a93FruIndex, a1007EventStateKey=a1007EventStateKey, tPhysicalContainerGlobalTable=tPhysicalContainerGlobalTable, platforms=platforms, a2000Status=a2000Status, a12SetAvailablityState=a12SetAvailablityState, a1004IssueAHardwareNmi=a1004IssueAHardwareNmi, a93Description=a93Description, a12SdrReadState=a12SdrReadState, eEventGenerationForPhysicalContainer=eEventGenerationForPhysicalContainer, a127AssetTag=a127AssetTag, a1007EventSubsystem=a1007EventSubsystem, a31WarningErrorCount=a31WarningErrorCount, a127ContainerLocation=a127ContainerLocation, a1Version=a1Version, a93PartNumber=a93PartNumber, trap1ForPhysicalContainer=trap1ForPhysicalContainer, DmiOctetstring=DmiOctetstring, intel=intel, a116EventSeverity=a116EventSeverity, a1Manufacturer=a1Manufacturer, DmiComponentIndex=DmiComponentIndex, a93FruInternetUniformResourceLocator=a93FruInternetUniformResourceLocator, eOperationalState=eOperationalState, a1006Selfid=a1006Selfid, DmiInteger=DmiInteger, eEventGenerationForEifControl=eEventGenerationForEifControl, DmiDateX=DmiDateX, tSystemControl=tSystemControl, a1004EventLoggingCapability=a1004EventLoggingCapability, server_products=server_products, a1001MibOid=a1001MibOid, a2002EventSystem=a2002EventSystem, a93DeviceGroupIndex=a93DeviceGroupIndex, eSystemEventLog=eSystemEventLog, a1Product=a1Product, a127ThermalState=a127ThermalState, a127ContainerSecurityStatus=a127ContainerSecurityStatus, eEventGenerationForIcmbState=eEventGenerationForIcmbState, a31UsageState=a31UsageState, a1004ResetSystem=a1004ResetSystem, eEifExtensionList=eEifExtensionList, a31OperationalStateInstanceIndex=a31OperationalStateInstanceIndex, a1001DisableTrap=a1001DisableTrap, DmiDisplaystring=DmiDisplaystring, a127ChassisLockPresent=a127ChassisLockPresent, tOperationalState=tOperationalState, tSystemEventLog=tSystemEventLog, tFieldReplaceableUnit=tFieldReplaceableUnit, tIcmbState=tIcmbState)
