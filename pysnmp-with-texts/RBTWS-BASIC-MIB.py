#
# PySNMP MIB module RBTWS-BASIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBTWS-BASIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
rbtwsMibs, = mibBuilder.importSymbols("RBTWS-ROOT-MIB", "rbtwsMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, NotificationType, ObjectIdentity, Bits, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, IpAddress, Unsigned32, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "NotificationType", "ObjectIdentity", "Bits", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "IpAddress", "Unsigned32", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rbtwsBasic = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2))
rbtwsBasic.setRevisions(('2006-07-10 00:08', '2006-04-14 00:07', '2005-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbtwsBasic.setRevisionsDescriptions(('v2.0.6: Fixed MAX-ACCESS of rbtwsMobilityMemberEntryAddr, an index that was also the only column', 'v2.0.5: Revised for 4.1 release', 'v1: initial version, as for 4.0 and older releases',))
if mibBuilder.loadTexts: rbtwsBasic.setLastUpdated('200607102335Z')
if mibBuilder.loadTexts: rbtwsBasic.setOrganization('Enterasys Networks')
if mibBuilder.loadTexts: rbtwsBasic.setContactInfo('www.enterasys.com')
if mibBuilder.loadTexts: rbtwsBasic.setDescription("Basic objects for Enterasys Networks wireless switches. Copyright 2006 Enterasys Networks, Inc. All rights reserved. This SNMP Management Information Base Specification (Specification) embodies confidential and proprietary intellectual property. This Specification is supplied 'AS IS' and Enterasys Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
class RbtwsLicenseFeature(TextualConvention, Integer32):
    description = "Enumeration of the licensable features. Currently only 1 feature is licensed, the number AP/DAPs concurrently supported. This feature has 'three' levels: none, 1, and 2. Level 1 implies support for 80 concurrent AP/DAPs, level 2 implies support for 120 concurrent AP/DAPs. The value in object rbtwsLicenseInfoEntryValue should therefore reflect the number of AP/DAPs supported."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("maxSupportedAPsOrDAPs", 2))

rbtwsBasicSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 1))
rbtwsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: rbtwsSerialNumber.setDescription('The serial number of the switch.')
rbtwsSwMajorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsSwMajorVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rbtwsSwMajorVersionNumber.setDescription('The major release version of the running software.')
rbtwsSwMinorVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsSwMinorVersionNumber.setStatus('current')
if mibBuilder.loadTexts: rbtwsSwMinorVersionNumber.setDescription('The minor release version of the running software.')
rbtwsVersionString = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsVersionString.setStatus('current')
if mibBuilder.loadTexts: rbtwsVersionString.setDescription('The version string of the running software, including the major, minor, patch and build numbers, such as 3.0.0.185')
rbtwsMobilityDomainInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2))
rbtwsMobilityDomainName = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsMobilityDomainName.setStatus('current')
if mibBuilder.loadTexts: rbtwsMobilityDomainName.setDescription('The mobility domain containing the switch, or a zero-length string when the mobility domain is unknown.')
rbtwsMobilitySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsMobilitySeedIp.setStatus('current')
if mibBuilder.loadTexts: rbtwsMobilitySeedIp.setDescription("The IPv4 address of the seed switch for this switch's mobility domain, or the IPv4 address 0.0.0.0 if unknown.")
rbtwsMobilityMemberTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsMobilityMemberTableSize.setStatus('current')
if mibBuilder.loadTexts: rbtwsMobilityMemberTableSize.setDescription('The number of entries in the mobility member table, rbtwsMobilityMemberTable.')
rbtwsMobilityMemberTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2, 4), )
if mibBuilder.loadTexts: rbtwsMobilityMemberTable.setStatus('current')
if mibBuilder.loadTexts: rbtwsMobilityMemberTable.setDescription('Table of members of the mobility domain, indexed by the member IPv4 address.')
rbtwsMobilityMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2, 4, 1), ).setIndexNames((0, "RBTWS-BASIC-MIB", "rbtwsMobilityMemberEntryAddr"))
if mibBuilder.loadTexts: rbtwsMobilityMemberEntry.setStatus('current')
if mibBuilder.loadTexts: rbtwsMobilityMemberEntry.setDescription('An entry in the rbtwsMobilityMemberTable table.')
rbtwsMobilityMemberEntryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsMobilityMemberEntryAddr.setStatus('current')
if mibBuilder.loadTexts: rbtwsMobilityMemberEntryAddr.setDescription('IPv4 address of a member of the mobility domain.')
rbtwsLicenseInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3))
rbtwsLicenseInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsLicenseInfoTableSize.setStatus('current')
if mibBuilder.loadTexts: rbtwsLicenseInfoTableSize.setDescription('The number of entries in the license table, rbtwsLicenseInfoTable.')
rbtwsLicenseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3, 2), )
if mibBuilder.loadTexts: rbtwsLicenseInfoTable.setStatus('current')
if mibBuilder.loadTexts: rbtwsLicenseInfoTable.setDescription('Table of installed licenses on the switch. The licences provide additional capabilities over the default capabilities of the switch.')
rbtwsLicenseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3, 2, 1), ).setIndexNames((0, "RBTWS-BASIC-MIB", "rbtwsLicenseInfoEntryFeature"))
if mibBuilder.loadTexts: rbtwsLicenseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: rbtwsLicenseInfoEntry.setDescription('A license table entry.')
rbtwsLicenseInfoEntryFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3, 2, 1, 1), RbtwsLicenseFeature())
if mibBuilder.loadTexts: rbtwsLicenseInfoEntryFeature.setStatus('current')
if mibBuilder.loadTexts: rbtwsLicenseInfoEntryFeature.setDescription('The feature being reported on')
rbtwsLicenseInfoEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsLicenseInfoEntryValue.setStatus('current')
if mibBuilder.loadTexts: rbtwsLicenseInfoEntryValue.setDescription('The value of the feature enabled, for example a feature may have multiple levels of licensing, so the value will very with the license level.')
rbtwsLicenseInfoEntryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 15, 1, 4, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbtwsLicenseInfoEntryDescr.setStatus('current')
if mibBuilder.loadTexts: rbtwsLicenseInfoEntryDescr.setDescription("A human interpretable description of this license, for example, '120 APs or DAPs.'")
mibBuilder.exportSymbols("RBTWS-BASIC-MIB", rbtwsLicenseInfoGroup=rbtwsLicenseInfoGroup, rbtwsMobilitySeedIp=rbtwsMobilitySeedIp, rbtwsLicenseInfoTableSize=rbtwsLicenseInfoTableSize, rbtwsLicenseInfoEntryFeature=rbtwsLicenseInfoEntryFeature, rbtwsLicenseInfoEntry=rbtwsLicenseInfoEntry, rbtwsMobilityDomainName=rbtwsMobilityDomainName, rbtwsSwMajorVersionNumber=rbtwsSwMajorVersionNumber, rbtwsLicenseInfoTable=rbtwsLicenseInfoTable, rbtwsMobilityMemberTableSize=rbtwsMobilityMemberTableSize, rbtwsSwMinorVersionNumber=rbtwsSwMinorVersionNumber, rbtwsMobilityMemberEntryAddr=rbtwsMobilityMemberEntryAddr, rbtwsSerialNumber=rbtwsSerialNumber, rbtwsMobilityDomainInfo=rbtwsMobilityDomainInfo, rbtwsBasicSystemInfo=rbtwsBasicSystemInfo, rbtwsMobilityMemberTable=rbtwsMobilityMemberTable, rbtwsLicenseInfoEntryDescr=rbtwsLicenseInfoEntryDescr, rbtwsBasic=rbtwsBasic, rbtwsMobilityMemberEntry=rbtwsMobilityMemberEntry, rbtwsVersionString=rbtwsVersionString, rbtwsLicenseInfoEntryValue=rbtwsLicenseInfoEntryValue, PYSNMP_MODULE_ID=rbtwsBasic, RbtwsLicenseFeature=RbtwsLicenseFeature)
