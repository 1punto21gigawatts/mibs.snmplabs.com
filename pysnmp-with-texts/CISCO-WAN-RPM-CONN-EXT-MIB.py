#
# PySNMP MIB module CISCO-WAN-RPM-CONN-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-RPM-CONN-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cwAtmChanCnfgEntry, = mibBuilder.importSymbols("CISCO-WAN-ATM-CONN-MIB", "cwAtmChanCnfgEntry")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Counter32, MibIdentifier, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Gauge32, Counter64, iso, Unsigned32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Gauge32", "Counter64", "iso", "Unsigned32", "Integer32", "ModuleIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoWanRpmConnExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 9))
ciscoWanRpmConnExtMIB.setRevisions(('2002-05-21 00:00', '2002-03-18 00:00', '1999-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanRpmConnExtMIB.setRevisionsDescriptions(('Importing Unsigned32 from SNMPv2-SMI.', 'Modified the range of cwrChanVirtualTemplate to be consistent with value supported in CLI. The Range has been modified from 0..25 to 0..200.', 'Initial Version of this MIB Module.',))
if mibBuilder.loadTexts: ciscoWanRpmConnExtMIB.setLastUpdated('200205210000Z')
if mibBuilder.loadTexts: ciscoWanRpmConnExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanRpmConnExtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanRpmConnExtMIB.setDescription("This MIB together with the CISCO-WAN-ATM-CONN-MIB support provisioning of PVC endpoints and SPVCs on the MGX's Route Processor Module (RPM).")
cwRpmConnExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 9, 1))
cwRpmConnExt = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1))
cwRpmChanExtTable = MibTable((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1), )
if mibBuilder.loadTexts: cwRpmChanExtTable.setStatus('current')
if mibBuilder.loadTexts: cwRpmChanExtTable.setDescription("This table together with the 'cwAtmChanCnfgTable' support provisioning of PVC endpoints and SPVCs on an RPM. This table contains objects that are specific to RPM. This table is an augmentation to the 'cwAtmChanCnfgTable'.")
cwRpmChanExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1), )
cwAtmChanCnfgEntry.registerAugmentions(("CISCO-WAN-RPM-CONN-EXT-MIB", "cwRpmChanExtEntry"))
cwRpmChanExtEntry.setIndexNames(*cwAtmChanCnfgEntry.getIndexNames())
if mibBuilder.loadTexts: cwRpmChanExtEntry.setStatus('current')
if mibBuilder.loadTexts: cwRpmChanExtEntry.setDescription('Each entry contains RPM specific parameters for a connection endpoint on an RPM.')
cwrChanSubInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanSubInterface.setStatus('current')
if mibBuilder.loadTexts: cwrChanSubInterface.setDescription("The RPM's backplane sub-interface for which this channel is configured. Sub-interface 0 means the switch port.")
cwrChanVcd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwrChanVcd.setStatus('current')
if mibBuilder.loadTexts: cwrChanVcd.setDescription('Virtual Circuit Descriptor. A unique number which identifies a connection.')
cwrChanAalEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("aal5ciscoPPP", 1), ("aal5muxAPOLLO", 2), ("aal5muxAPPLETALK", 3), ("aal5muxDECNET", 4), ("aal5muxIP", 5), ("aal5muxIPX", 6), ("aal5muxPPP", 7), ("aal5muxVINES", 8), ("aal5muxXNS", 9), ("aal5nlpid", 10), ("aal5snap", 11), ("ilmi", 12), ("qsaal", 13))).clone('aal5snap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanAalEncapType.setStatus('current')
if mibBuilder.loadTexts: cwrChanAalEncapType.setDescription("ATM adaptation layer (AAL) and Encapsulation type. aal5ciscoPPP - For Cisco PPP over ATM. 'cwrChanVirtualTemplate' is required to be set for this type. aal5muxAPOLLO - For a multiplex (MUX) - type virtual circuit using the Apollo protocol. aal5muxAPPLETALK - For a MUX-type virtual circuit using the AppleTalk protocol. aal5muxDECNET - For a MUX-type virtual circuit using the DECnet protocol. aal5muxIP - For a MUX-type virtual circuit using the IP protocol. aal5muxIPX - For a MUX-type virtual circuit using the IPX protocol. aal5muxPPP - For a MUX-type virtual circuit using the PPP protocol. 'cwrChanVirtualTemplate' is required to be set for this type. aal5muxVINES - For a MUX-type virtual circuit using the VINES protocol. aal5muxXNS - For a MUX-type virtual circuit using the XNS protocol. aal5nlpid - Allows ATM interfaces to interoperate with HSSI. aal5snap - The only encapsulation supported for Inverse ARP. Logical Link Control/ Subnetwork Access Protocol (LLC/SNAP) precedes the protocol datagram. ilmi - Used to set up communication with ILMI. qsaal - A signalling type PVC used for setting up or tearing down SVCs.")
cwrChanVirtualTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanVirtualTemplate.setStatus('current')
if mibBuilder.loadTexts: cwrChanVirtualTemplate.setDescription('This object identifies the virtual template. The non-zero value need to be specified for Cisco PPP or MUX-type PPP encapsulation (i.e. cwrChanAalEncapType = aal5ciscoPPP or aal5muxPPP). The value 0 signifies that Virtual Template is not applicable. ')
cwrChanInArpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(15)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanInArpInterval.setStatus('current')
if mibBuilder.loadTexts: cwrChanInArpInterval.setDescription('This specifies how often Inverse ARP datagrams will be sent on this channel. 0 will disable the InArp for this channel. This object is only supported for aal5snap encapsulation (i.e. cwrChanAalEncapType = aal5snap).')
cwrChanOamLoopbkTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanOamLoopbkTxInterval.setStatus('current')
if mibBuilder.loadTexts: cwrChanOamLoopbkTxInterval.setDescription('This specifies how often to generate an OAM F5 loopback cell from this channel. 0 will disable generation of OAM F5 loopback cells.')
cwrChanOamManage = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanOamManage.setStatus('current')
if mibBuilder.loadTexts: cwrChanOamManage.setDescription('This enables/disables OAM management for this channel. If set to true(1), OAM management is enabled.')
cwrChanOamRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanOamRetryUpCount.setStatus('current')
if mibBuilder.loadTexts: cwrChanOamRetryUpCount.setDescription('Number of consecutive end-to-end F5 OAM loopback cell responses that must be received in order to change a PVC connection state to up. This object only applies if OAM management is enabled (i.e. cwrChanOAMManage = true).')
cwrChanOamRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanOamRetryDownCount.setStatus('current')
if mibBuilder.loadTexts: cwrChanOamRetryDownCount.setDescription('Number of consecutive end-to-end F5 OAM loopback cell responses that are not received in order to change a PVC connection state to down. This object only applies if OAM management is enabled (i.e. cwrChanOAMManage = true).')
cwrChanOamRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 150, 9, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwrChanOamRetryInterval.setStatus('current')
if mibBuilder.loadTexts: cwrChanOamRetryInterval.setDescription('The frequency that end-to-end F5 OAM loopback cells are transmitted when a change in UP/DOWN state of a PVC is being verified. This object only applies if OAM management is enabled (i.e. cwrChanOAMManage = true).')
ciscoWanRpmConnExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 9, 2))
ciscoWanRpmConnExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 9, 2, 1))
ciscoWanRpmConnExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 9, 2, 2))
ciscoWanRpmConnExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 9, 2, 1, 1)).setObjects(("CISCO-WAN-RPM-CONN-EXT-MIB", "ciscoWanRpmConnExtMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanRpmConnExtMIBCompliance = ciscoWanRpmConnExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWanRpmConnExtMIBCompliance.setDescription('The compliance statement for the Cisco MGX RPM connection management group.')
ciscoWanRpmConnExtMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 9, 2, 2, 1)).setObjects(("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanSubInterface"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanVcd"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanAalEncapType"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanVirtualTemplate"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanInArpInterval"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanOamLoopbkTxInterval"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanOamManage"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanOamRetryUpCount"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanOamRetryDownCount"), ("CISCO-WAN-RPM-CONN-EXT-MIB", "cwrChanOamRetryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanRpmConnExtMIBGroup = ciscoWanRpmConnExtMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanRpmConnExtMIBGroup.setDescription('Objects related to ATM connection in RPM module.')
mibBuilder.exportSymbols("CISCO-WAN-RPM-CONN-EXT-MIB", cwrChanVirtualTemplate=cwrChanVirtualTemplate, ciscoWanRpmConnExtMIBGroups=ciscoWanRpmConnExtMIBGroups, ciscoWanRpmConnExtMIBCompliances=ciscoWanRpmConnExtMIBCompliances, cwrChanOamManage=cwrChanOamManage, cwRpmConnExt=cwRpmConnExt, ciscoWanRpmConnExtMIB=ciscoWanRpmConnExtMIB, cwrChanOamRetryDownCount=cwrChanOamRetryDownCount, ciscoWanRpmConnExtMIBConformance=ciscoWanRpmConnExtMIBConformance, ciscoWanRpmConnExtMIBGroup=ciscoWanRpmConnExtMIBGroup, cwrChanOamRetryUpCount=cwrChanOamRetryUpCount, cwrChanAalEncapType=cwrChanAalEncapType, cwRpmChanExtEntry=cwRpmChanExtEntry, cwRpmConnExtMIBObjects=cwRpmConnExtMIBObjects, cwrChanVcd=cwrChanVcd, cwrChanInArpInterval=cwrChanInArpInterval, cwrChanOamRetryInterval=cwrChanOamRetryInterval, cwrChanOamLoopbkTxInterval=cwrChanOamLoopbkTxInterval, cwRpmChanExtTable=cwRpmChanExtTable, cwrChanSubInterface=cwrChanSubInterface, PYSNMP_MODULE_ID=ciscoWanRpmConnExtMIB, ciscoWanRpmConnExtMIBCompliance=ciscoWanRpmConnExtMIBCompliance)
