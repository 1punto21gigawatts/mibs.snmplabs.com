#
# PySNMP MIB module SENAO-ENTERPRISE-INDOOR-AP-CB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SENAO-ENTERPRISE-INDOOR-AP-CB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, NotificationType, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Bits, iso, MibIdentifier, ModuleIdentity, ObjectIdentity, TimeTicks, enterprises, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Bits", "iso", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "enterprises", "Gauge32")
TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
senao = ModuleIdentity((1, 3, 6, 1, 4, 1, 14125))
if mibBuilder.loadTexts: senao.setLastUpdated('0511250000Z')
if mibBuilder.loadTexts: senao.setOrganization('Senao R&D Dept., S/W Division')
if mibBuilder.loadTexts: senao.setContactInfo(' Info SENAO INTERNATIONAL CO., LTD. No.500, Fusing 3 Rd., Hwa-Ya Technical Park, Kuei-Shan Hsiang, TAOYUAN County 333, TAIWAN, R.O.C. Tel: 886-3-328-9289 Fax: 886-3-328-9666 E-mail: info@senao.com.tw ')
if mibBuilder.loadTexts: senao.setDescription(' The MIB module defines Senao implementation-specific metrics useful in managing IEEE 802.11 on Senao devices. This is used as a supplement to the standard 802.11 MIB proposed by IEEE. ')
indoorWirelessDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100))
entSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 1))
entLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 2))
entWAN = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 3))
entMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 4))
entWlan = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 5))
entSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 6))
entWlanCommonInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1))
entPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: entPassword.setStatus('mandatory')
if mibBuilder.loadTexts: entPassword.setDescription('Administration password')
entSysModel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSysModel.setStatus('mandatory')
if mibBuilder.loadTexts: entSysModel.setDescription('System model')
entSysMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ap-router", 0), ("repeater", 1), ("ap-bridge", 2), ("client-bridge", 3), ("client-router", 4), ("wds-bridge", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSysMode.setStatus('mandatory')
if mibBuilder.loadTexts: entSysMode.setDescription('System mode, 0:AP router, 1:Repeater, 2: AP bridge, 3: Client bridge, 4: Client router, 5: WDS bridge')
entSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: entSysUpTime.setDescription('System uptime')
entHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: entHwVersion.setDescription('The version of the hardware')
entSN = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSN.setStatus('mandatory')
if mibBuilder.loadTexts: entSN.setDescription('Serial Number')
entKenelVersion = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entKenelVersion.setStatus('mandatory')
if mibBuilder.loadTexts: entKenelVersion.setDescription('The version of the kernel')
entAppVersion = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entAppVersion.setStatus('mandatory')
if mibBuilder.loadTexts: entAppVersion.setDescription('The version of the system application')
entReset = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 10), TruthValue()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: entReset.setStatus('mandatory')
if mibBuilder.loadTexts: entReset.setDescription('Setting this attribute TRUE causes the AP rebooted')
entResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 11), TruthValue()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: entResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: entResetToDefault.setDescription('Setting this attribute TRUE will Reboot the system and change settings to factory default')
entApplyModules = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 1, 12), TruthValue()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: entApplyModules.setStatus('mandatory')
if mibBuilder.loadTexts: entApplyModules.setDescription('Setting this attribute TRUE will apply the changed modules to reload')
entLANIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entLANIP.setStatus('mandatory')
if mibBuilder.loadTexts: entLANIP.setDescription('LAN IP address')
entLANSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entLANSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: entLANSubnetMask.setDescription('LAN subnet mask')
entSTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entSTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: entSTPEnable.setDescription('Set this attribute TRUE will enable 802.1d Spanning Tree.')
entDHCPEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entDHCPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: entDHCPEnable.setDescription('When system mode is not 1(Repeater) and 5(WDS bridge), set this attribute TRUE will enable the DHCP server function of device')
entIPPoolStart = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entIPPoolStart.setStatus('mandatory')
if mibBuilder.loadTexts: entIPPoolStart.setDescription('TWhen system mode is not 1(Repeater) and 5(WDS bridge), set the start address of DHCP IP pool')
entIPPoolEnd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entIPPoolEnd.setStatus('mandatory')
if mibBuilder.loadTexts: entIPPoolEnd.setDescription('When system mode is not 1(Repeater) and 5(WDS bridge), set the end address of DHCP IP pool')
entIPLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("half-hour", 0), ("one-hour", 1), ("two-hours", 2), ("half-day", 3), ("one-day", 4), ("two-days", 5), ("one-week", 6), ("two-weeks", 7), ("forever", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entIPLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: entIPLeaseTime.setDescription('When system mode is not 1(Repeater) and 5(WDS bridge), the time period client can have the IP address assigned by DHCP server 0(half hour), 1(one hour) 2(two hours), 3(half day), 4(one day), 5(two days), 6(one week), 7(two weeks), 8(forever) ')
entRouterEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entRouterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: entRouterEnable.setDescription('Only When op mode is 0(AP) or (Client bridge), can set this attribute. Set TRUE will enable the router.')
entLanMacFilteringEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entLanMacFilteringEnable.setStatus('mandatory')
if mibBuilder.loadTexts: entLanMacFilteringEnable.setDescription('Set this attribute TRUE will enable the LAN MAC filtering')
entLanMacFilteringMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("white-list", 0), ("black-list", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entLanMacFilteringMode.setStatus('mandatory')
if mibBuilder.loadTexts: entLanMacFilteringMode.setDescription('The mode of LAN MAC filtering can be 0(white list), 1(black list)')
entLanMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 4, 3), )
if mibBuilder.loadTexts: entLanMacFilterTable.setStatus('current')
if mibBuilder.loadTexts: entLanMacFilterTable.setDescription('This table provides one row for each LAN MAC filtering. Each row contains the enterprise LAN MAC filtering table for that LAN MAC filtering.')
entLanMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 4, 3, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entMacAddressIndex"))
if mibBuilder.loadTexts: entLanMacFilterEntry.setStatus('current')
if mibBuilder.loadTexts: entLanMacFilterEntry.setDescription('An entry in the entLanMacFilterTable.')
entMacAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entMacAddressIndex.setStatus('current')
if mibBuilder.loadTexts: entMacAddressIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the LAN MAC Filtering Table')
entMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entMacAddress.setStatus('current')
if mibBuilder.loadTexts: entMacAddress.setDescription('MAC address list in the LAN MAC filtering table')
entMacFilteringValid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 4, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entMacFilteringValid.setStatus('current')
if mibBuilder.loadTexts: entMacFilteringValid.setDescription('The validity status of each corresponding MAC address in LAN MAC filtering table')
entOpMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ap", 0), ("client-bridge", 1), ("wds-bridge", 2), ("repeater", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: entOpMode.setDescription('Set op mode: 0(AP), 1(Client bridge), 2(WDS bridge), 3(Repeater)')
entRadio = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entRadio.setStatus('mandatory')
if mibBuilder.loadTexts: entRadio.setDescription('Set this attribute TRUE will enable the radio')
entAPMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ap", 0), ("wds", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entAPMode.setStatus('mandatory')
if mibBuilder.loadTexts: entAPMode.setDescription('Only when op mode is 0(AP), we can set AP mode: 0(AP), 1(WDS)')
entBand = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ieee802dot11-b-g", 0), ("ieee802dot11-b", 1), ("ieee802dot11-a", 2), ("ieee802dot11-g", 4), ("ieee802dot11-n", 6), ("ieee802dot11-g-n", 7), ("ieee802dot11-a-n", 8), ("ieee802dot11-b-g-n", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entBand.setStatus('mandatory')
if mibBuilder.loadTexts: entBand.setDescription('The wireless mode: 0(802.11 b/g), 1(802.11 b), 2(802.11 a), 4(802.11 g), 6(802.11 n), 7(802.11 g/n), 8(802.11 a/n), 9(802.11 b/g/n)')
entESSIDNum = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entESSIDNum.setStatus('mandatory')
if mibBuilder.loadTexts: entESSIDNum.setDescription('Set the Number of multiple ESSID')
entChannel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entChannel.setStatus('mandatory')
if mibBuilder.loadTexts: entChannel.setDescription('The current operating frequency channel')
entDataRate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5, 11, 6, 9, 12, 18, 24, 36, 48, 54))).clone(namedValues=NamedValues(("auto", 0), ("oneMbps", 1), ("twoMbps", 2), ("fiveNhalfMbps", 5), ("elevenMbps", 11), ("sixMbps", 6), ("nineMbps", 9), ("twelveMbps", 12), ("eighteenMbps", 18), ("twentytwoMbps", 24), ("thirtysixMbps", 36), ("fortyeightMbps", 48), ("fiftyfourMbps", 54)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: entDataRate.setDescription('This attribute specifies the data rate at which the station may transmit data in Mbps 0(Auto), 1(1Mbps), 2(2Mbps), 5(5.5Mbps), 11(11Mbps), 6(6Mbps), 9(9Mbps), 12(12Mbps), 18(18Mbps), 24(24Mbps), 36(36Mbps), 48(48Mbps), 54(54Mbps)')
entNDataRate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entNDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: entNDataRate.setDescription('This attribute specifies the 11n data rate')
entTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: entTxPower.setDescription('The transmit power level: 10(%), 25(%), 50(%), 75(%), 90(%), 100(%)')
entBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entBeaconInterval.setStatus('mandatory')
if mibBuilder.loadTexts: entBeaconInterval.setDescription('This attribute specifies the number of TU that a station shall use for scheduling Beacon transmissions')
entDTIMPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entDTIMPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: entDTIMPeriod.setDescription('This attribute specifies the number of beacon intervals')
entFragmentationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entFragmentationThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: entFragmentationThreshold.setDescription('This attribute shall specify the current maximum size, in octets, of the MPDU that may be delivered to the PHY')
entRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entRTSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: entRTSThreshold.setDescription('This attribute shall indicate the number of octets in an MPDU, below which an RTS/CTS handshake shall not be performed.')
entChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entChannelBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: entChannelBandwidth.setDescription('This attribute specifies the channel bandwidth: 0(Auto 20/40 MHZ), 1(20 MHZ)')
entPreambleType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entPreambleType.setStatus('mandatory')
if mibBuilder.loadTexts: entPreambleType.setDescription('This attribute specifies the preamble type: 1(Short), 2(Long)')
entCTSProtection = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("always", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCTSProtection.setStatus('mandatory')
if mibBuilder.loadTexts: entCTSProtection.setDescription('This attribute specifies the CTS protection: 0(Auto), 1(Always), 2(None)')
entWlanESSIDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2), )
if mibBuilder.loadTexts: entWlanESSIDInfoTable.setStatus('current')
if mibBuilder.loadTexts: entWlanESSIDInfoTable.setDescription('This table provides one row for each ESSID information. Each row contains the enterprise ESSID information Table for that ESSID information.')
entWlanESSIDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entWlanESSIDInfoIndex"))
if mibBuilder.loadTexts: entWlanESSIDInfoEntry.setStatus('current')
if mibBuilder.loadTexts: entWlanESSIDInfoEntry.setDescription('An entry in the entWlanESSIDInfoTable.')
entWlanESSIDInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entWlanESSIDInfoIndex.setStatus('current')
if mibBuilder.loadTexts: entWlanESSIDInfoIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the ESSID information Table')
entESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entESSID.setStatus('current')
if mibBuilder.loadTexts: entESSID.setDescription('This attribute reflects the Service Set ID used in the Desired- SSID parameter of the most recent MLME_Scan.request')
entBroadcastESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entBroadcastESSID.setStatus('mandatory')
if mibBuilder.loadTexts: entBroadcastESSID.setDescription('Set this attribute TRUE will enable the hidden SSID')
entWMM = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWMM.setStatus('mandatory')
if mibBuilder.loadTexts: entWMM.setDescription('Set this attribute TRUE will enable WMM')
entEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entEncryption.setStatus('current')
if mibBuilder.loadTexts: entEncryption.setDescription('The WLAN encryption: 0(none), 1(WEP), 2(TKIP), 3(AES), 4(TKIPAES)')
entWlanAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlanAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: entWlanAuthenticationType.setDescription('The current authentication algorithms: 0 (openSystem), 1(wepAuto), 2(sharedKey), 3(WPAPSK), 4(WPA), 5(WPA2PSK), 6(WPA2), 7(WPA1WPA2), 8(WPA1PSKWPA2PSK)')
entWlanWepInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3), )
if mibBuilder.loadTexts: entWlanWepInfoTable.setStatus('current')
if mibBuilder.loadTexts: entWlanWepInfoTable.setDescription('This table provides one row for each WEP information. Each row contains the enterprise WEP information Table for that WEP information.')
entWlanWepInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entWlanESSIDIndex"))
if mibBuilder.loadTexts: entWlanWepInfoEntry.setStatus('current')
if mibBuilder.loadTexts: entWlanWepInfoEntry.setDescription('An entry in the entWlanWepInfoTable.')
entWlanESSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entWlanESSIDIndex.setStatus('current')
if mibBuilder.loadTexts: entWlanESSIDIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the WEP information Table')
entWlanWepKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlanWepKeyID.setStatus('current')
if mibBuilder.loadTexts: entWlanWepKeyID.setDescription('This attribute shall indicate the use of the first, second, third, or fourth element of the WEPDefaultKeys array')
entWlanWepKey1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlanWepKey1Value.setStatus('current')
if mibBuilder.loadTexts: entWlanWepKey1Value.setDescription('Set key1 string. (5 or 13 ASCCI characters, 10 or 26 hex numbers)')
entWlanWepKey2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlanWepKey2Value.setStatus('current')
if mibBuilder.loadTexts: entWlanWepKey2Value.setDescription('Set key2 string. (5 or 13 ASCCI characters, 10 or 26 hex numbers)')
entWlanWepKey3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlanWepKey3Value.setStatus('current')
if mibBuilder.loadTexts: entWlanWepKey3Value.setDescription('Set key3 string. (5 or 13 ASCCI characters, 10 or 26 hex numbers)')
entWlanWepKey4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 3, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlanWepKey4Value.setStatus('current')
if mibBuilder.loadTexts: entWlanWepKey4Value.setDescription('Set key4 string. (5 or 13 ASCCI characters, 10 or 26 hex numbers)')
entWlanWPAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 5, 4), )
if mibBuilder.loadTexts: entWlanWPAInfoTable.setStatus('current')
if mibBuilder.loadTexts: entWlanWPAInfoTable.setDescription('This table provides one row for each WPA information. Each row contains the enterprise WPA information Table for that WPA information.')
entWlanWPAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 5, 4, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entWlanWPAESSIDIndex"))
if mibBuilder.loadTexts: entWlanWPAInfoEntry.setStatus('current')
if mibBuilder.loadTexts: entWlanWPAInfoEntry.setDescription('An entry in the entWlanWPAInfoTable.')
entWlanWPAESSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entWlanWPAESSIDIndex.setStatus('current')
if mibBuilder.loadTexts: entWlanWPAESSIDIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the WPA information Table')
entPresharedKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 4, 1, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: entPresharedKey.setStatus('current')
if mibBuilder.loadTexts: entPresharedKey.setDescription('The WPA Pre-Shared key. (8~63 ASCII or 64 HEX)')
ent802dot1xInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5), )
if mibBuilder.loadTexts: ent802dot1xInfoTable.setStatus('current')
if mibBuilder.loadTexts: ent802dot1xInfoTable.setDescription('This table provides one row for each 802.1x information. Each row contains the enterprise 802.1x information Table for that 802.1x information.')
ent802dot1xInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entWlan802dot1xESSIDIndex"))
if mibBuilder.loadTexts: ent802dot1xInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ent802dot1xInfoEntry.setDescription('An entry in the ent802dot1xInfoTable.')
entWlan802dot1xESSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entWlan802dot1xESSIDIndex.setStatus('current')
if mibBuilder.loadTexts: entWlan802dot1xESSIDIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the 802.1x information Table')
entRADIUSServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entRADIUSServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: entRADIUSServerIPAddress.setDescription('The address of RADIUS Server')
entRADIUSServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entRADIUSServerPort.setStatus('current')
if mibBuilder.loadTexts: entRADIUSServerPort.setDescription('The port of RADIUS Server')
entRADIUSServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5, 1, 4), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: entRADIUSServerPassword.setStatus('current')
if mibBuilder.loadTexts: entRADIUSServerPassword.setDescription('The password of RADIUS Server')
entWlan802dot1xEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entWlan802dot1xEnable.setStatus('current')
if mibBuilder.loadTexts: entWlan802dot1xEnable.setDescription('Set this attribute TRUE will enable 802.1x')
entWlanClientListInfoTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6), )
if mibBuilder.loadTexts: entWlanClientListInfoTable.setStatus('current')
if mibBuilder.loadTexts: entWlanClientListInfoTable.setDescription('This table provides one row for Wlan client list information.')
entWlanClientListInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entCLInfoIndex"))
if mibBuilder.loadTexts: entWlanClientListInfoEntry.setStatus('current')
if mibBuilder.loadTexts: entWlanClientListInfoEntry.setDescription('An entry in the entWlanClientListInfoTable.')
entCLInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entCLInfoIndex.setStatus('current')
if mibBuilder.loadTexts: entCLInfoIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the ClientList information Table')
entCLInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLInterface.setStatus('current')
if mibBuilder.loadTexts: entCLInterface.setDescription('The Client connected SSID')
entCLMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLMAC.setStatus('current')
if mibBuilder.loadTexts: entCLMAC.setDescription('The Client MAC')
entCLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLRx.setStatus('current')
if mibBuilder.loadTexts: entCLRx.setDescription('The Rx value')
entCLTx = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLTx.setStatus('current')
if mibBuilder.loadTexts: entCLTx.setDescription('The Tx value')
entCLSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLSignal.setStatus('current')
if mibBuilder.loadTexts: entCLSignal.setDescription('The Client Wlan Signal')
entCLConnectedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLConnectedTime.setStatus('current')
if mibBuilder.loadTexts: entCLConnectedTime.setDescription('The Client connected time')
entCLIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 5, 6, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entCLIdleTime.setStatus('current')
if mibBuilder.loadTexts: entCLIdleTime.setDescription('The Client idle time')
entSNMPStatus = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entSNMPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: entSNMPStatus.setDescription('The status of current SNMP agent.0:disable, 1:Enable')
entSNMPVerType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entSNMPVerType.setStatus('mandatory')
if mibBuilder.loadTexts: entSNMPVerType.setDescription('The version of current SNMP agent.0:all, 1: v1, 2:v2c, 3:v3')
entSNMPCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 100, 6, 3), )
if mibBuilder.loadTexts: entSNMPCommunityTable.setStatus('current')
if mibBuilder.loadTexts: entSNMPCommunityTable.setDescription('This table provides one row for each SNMP community. Each row contains the enterprise SNMP community table for that SNMP community.')
entSNMPCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 100, 6, 3, 1), ).setIndexNames((0, "SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "entSNMPCommunityIndex"))
if mibBuilder.loadTexts: entSNMPCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: entSNMPCommunityEntry.setDescription('An entry in the entSNMPCommunityTable.')
entSNMPCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSNMPCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: entSNMPCommunityIndex.setDescription('The auxiliary variable used to identify instances of columnar objects in the SNMP Community Table')
entSNMPCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entSNMPCommunityName.setStatus('current')
if mibBuilder.loadTexts: entSNMPCommunityName.setDescription('The community name used to access SNMP device.')
entSNMPCommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSNMPCommunityType.setStatus('current')
if mibBuilder.loadTexts: entSNMPCommunityType.setDescription('The auxiliary variable used to identify instances of columnar objects in the SNMP Community Table')
entSNMPCommunityValid = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 100, 6, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: entSNMPCommunityValid.setStatus('current')
if mibBuilder.loadTexts: entSNMPCommunityValid.setDescription('Display the validity information of corresponding community index')
entSNMPTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 6, 4))
entTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 6, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entTrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: entTrapStatus.setDescription('The trap status of current SNMP agent.0:disable, 1:Enable')
entTrapVer = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("all", 0), ("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entTrapVer.setStatus('mandatory')
if mibBuilder.loadTexts: entTrapVer.setDescription('The trap version of current SNMP agent.0:all, 1: v1, 2:v2c, 3:v3')
entTrapReceiverIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 6, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entTrapReceiverIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: entTrapReceiverIPAddress.setDescription('Specify the IP address(host) to receive the trap report')
entTrapReceiverCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 100, 6, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: entTrapReceiverCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: entTrapReceiverCommunityName.setDescription('Specify the community name for SNMP manager to receive the trap report')
entTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 20))
entSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 20, 1))
entWanTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 100, 20, 2))
entSystemTrapsReboot = NotificationType((1, 3, 6, 1, 4, 1, 14125, 100, 20, 1, 1))
if mibBuilder.loadTexts: entSystemTrapsReboot.setStatus('current')
if mibBuilder.loadTexts: entSystemTrapsReboot.setDescription('The trap is generated when the system is rebooted.')
entSystemTrapsRestoreToDefault = NotificationType((1, 3, 6, 1, 4, 1, 14125, 100, 20, 1, 2))
if mibBuilder.loadTexts: entSystemTrapsRestoreToDefault.setStatus('current')
if mibBuilder.loadTexts: entSystemTrapsRestoreToDefault.setDescription('The trap is generated when the default configuration of the system is restored.')
entSystemTrapsReloadModules = NotificationType((1, 3, 6, 1, 4, 1, 14125, 100, 20, 1, 3))
if mibBuilder.loadTexts: entSystemTrapsReloadModules.setStatus('current')
if mibBuilder.loadTexts: entSystemTrapsReloadModules.setDescription('The trap is generated when the system modules are reloaded.')
entWanTrapsLinkDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 14125, 100, 20, 2, 1)).setObjects(("SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "ifIndex"))
if mibBuilder.loadTexts: entWanTrapsLinkDisconnect.setStatus('current')
if mibBuilder.loadTexts: entWanTrapsLinkDisconnect.setDescription('The trap is generated when the PHY of WAN is disconnected and it was connected.')
entWanTrapsLinkRecover = NotificationType((1, 3, 6, 1, 4, 1, 14125, 100, 20, 2, 2)).setObjects(("SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", "ifIndex"))
if mibBuilder.loadTexts: entWanTrapsLinkRecover.setStatus('current')
if mibBuilder.loadTexts: entWanTrapsLinkRecover.setDescription('The trap is generated when the PHY of WAN is connected and it was disconnected')
mibBuilder.exportSymbols("SENAO-ENTERPRISE-INDOOR-AP-CB-MIB", entESSID=entESSID, entCTSProtection=entCTSProtection, entAPMode=entAPMode, entCLIdleTime=entCLIdleTime, entWAN=entWAN, entSNMPCommunityType=entSNMPCommunityType, entSysMode=entSysMode, entSNMPVerType=entSNMPVerType, entMacFilter=entMacFilter, ent802dot1xInfoTable=ent802dot1xInfoTable, entSNMP=entSNMP, entCLTx=entCLTx, entWanTrapsLinkDisconnect=entWanTrapsLinkDisconnect, ent802dot1xInfoEntry=ent802dot1xInfoEntry, entSystemTrapsReboot=entSystemTrapsReboot, senao=senao, entSystem=entSystem, entRADIUSServerIPAddress=entRADIUSServerIPAddress, entWlanWPAInfoEntry=entWlanWPAInfoEntry, entSystemTraps=entSystemTraps, indoorWirelessDevice=indoorWirelessDevice, entCLInterface=entCLInterface, entRTSThreshold=entRTSThreshold, entCLMAC=entCLMAC, entTraps=entTraps, entWlan=entWlan, entSysUpTime=entSysUpTime, entSNMPCommunityName=entSNMPCommunityName, entAppVersion=entAppVersion, PYSNMP_MODULE_ID=senao, entESSIDNum=entESSIDNum, entMacAddressIndex=entMacAddressIndex, entLAN=entLAN, entLANIP=entLANIP, entIPPoolEnd=entIPPoolEnd, entLanMacFilterEntry=entLanMacFilterEntry, entSTPEnable=entSTPEnable, entSNMPStatus=entSNMPStatus, entSNMPCommunityEntry=entSNMPCommunityEntry, entMacFilteringValid=entMacFilteringValid, entBroadcastESSID=entBroadcastESSID, entTrapVer=entTrapVer, entWlanWepKey2Value=entWlanWepKey2Value, entBeaconInterval=entBeaconInterval, entWlanWepKey3Value=entWlanWepKey3Value, entWlanWepKey4Value=entWlanWepKey4Value, entTrapReceiverCommunityName=entTrapReceiverCommunityName, entWlanCommonInfo=entWlanCommonInfo, entPassword=entPassword, entWMM=entWMM, entDHCPEnable=entDHCPEnable, entWanTrapsLinkRecover=entWanTrapsLinkRecover, entTrapStatus=entTrapStatus, entMacAddress=entMacAddress, entIPPoolStart=entIPPoolStart, entSNMPCommunityValid=entSNMPCommunityValid, entLanMacFilterTable=entLanMacFilterTable, entLanMacFilteringEnable=entLanMacFilteringEnable, entWlanWepKey1Value=entWlanWepKey1Value, entWlanESSIDIndex=entWlanESSIDIndex, entWlanWepKeyID=entWlanWepKeyID, entIPLeaseTime=entIPLeaseTime, entResetToDefault=entResetToDefault, entLANSubnetMask=entLANSubnetMask, entApplyModules=entApplyModules, entWlan802dot1xESSIDIndex=entWlan802dot1xESSIDIndex, entWlan802dot1xEnable=entWlan802dot1xEnable, entWlanWPAESSIDIndex=entWlanWPAESSIDIndex, entEncryption=entEncryption, entChannel=entChannel, entTrapReceiverIPAddress=entTrapReceiverIPAddress, entReset=entReset, entOpMode=entOpMode, entWlanESSIDInfoEntry=entWlanESSIDInfoEntry, entChannelBandwidth=entChannelBandwidth, entRADIUSServerPassword=entRADIUSServerPassword, entWlanWPAInfoTable=entWlanWPAInfoTable, entCLRx=entCLRx, entRadio=entRadio, entHwVersion=entHwVersion, entRADIUSServerPort=entRADIUSServerPort, entCLSignal=entCLSignal, entSystemTrapsRestoreToDefault=entSystemTrapsRestoreToDefault, entDTIMPeriod=entDTIMPeriod, entWlanClientListInfoEntry=entWlanClientListInfoEntry, entKenelVersion=entKenelVersion, entWlanClientListInfoTable=entWlanClientListInfoTable, entRouterEnable=entRouterEnable, entWanTraps=entWanTraps, entDataRate=entDataRate, entLanMacFilteringMode=entLanMacFilteringMode, entSysModel=entSysModel, entPreambleType=entPreambleType, entSN=entSN, entNDataRate=entNDataRate, entWlanWepInfoTable=entWlanWepInfoTable, entWlanWepInfoEntry=entWlanWepInfoEntry, entCLConnectedTime=entCLConnectedTime, entPresharedKey=entPresharedKey, entSNMPTrap=entSNMPTrap, entSNMPCommunityTable=entSNMPCommunityTable, entWlanESSIDInfoIndex=entWlanESSIDInfoIndex, entSNMPCommunityIndex=entSNMPCommunityIndex, entTxPower=entTxPower, entFragmentationThreshold=entFragmentationThreshold, entWlanESSIDInfoTable=entWlanESSIDInfoTable, entWlanAuthenticationType=entWlanAuthenticationType, entSystemTrapsReloadModules=entSystemTrapsReloadModules, entCLInfoIndex=entCLInfoIndex, entBand=entBand)
