#
# PySNMP MIB module AC-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AcSlotNumber, acPport, AcPortNumber, AcOpStatus, AcNodeId, AcAdminStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcSlotNumber", "acPport", "AcPortNumber", "AcOpStatus", "AcNodeId", "AcAdminStatus")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Integer32, ModuleIdentity, NotificationType, Gauge32, Unsigned32, Counter32, Bits, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "ModuleIdentity", "NotificationType", "Gauge32", "Unsigned32", "Counter32", "Bits", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "MibIdentifier")
TextualConvention, MacAddress, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TruthValue", "DisplayString")
acLagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8))
if mibBuilder.loadTexts: acLagMIB.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acLagMIB.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acLagMIB.setContactInfo(' David Ward')
if mibBuilder.loadTexts: acLagMIB.setDescription('The Appian Communications Link Aggregation module for managing IEEE Std 802.3ad.')
lagMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1))
class LacpKey(TextualConvention, Integer32):
    description = 'The Actor or Partner Key value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class LacpState(TextualConvention, Bits):
    description = 'The Actor and Partner State values from the LACPDU.'
    status = 'current'
    namedValues = NamedValues(("lacpActivity", 0), ("lacpTimeout", 1), ("aggregation", 2), ("synchronization", 3), ("collecting", 4), ("distributing", 5), ("defaulted", 6), ("expired", 7))

class ChurnState(TextualConvention, Integer32):
    description = 'The state of the Churn Detection machine.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noChurn", 1), ("churn", 2), ("churnMonitor", 3))

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

class AcAggInstanceIndex(TextualConvention, Integer32):
    description = 'An instance of an aggregation group within this OSAP which is within the range of (1..64).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

class AcAggInstanceValue(TextualConvention, Integer32):
    description = 'An instance of an aggregation group within this OSAP which is within the range of (1..64). A value of zero indicates the aggregator instance has not been determined.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 64)

acDot3adAgg = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1))
acDot3adAggPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2))
acDot3adTablesLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adTablesLastChanged.setStatus('current')
if mibBuilder.loadTexts: acDot3adTablesLastChanged.setDescription('This object indicates the time of the most recent change to the acDot3adAggTable, acDot3adAggPortListTable, or acDot3adAggPortTable.')
acDot3adAggTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1), )
if mibBuilder.loadTexts: acDot3adAggTable.setReference('IEEE 802.3 Subclause 30.7.1')
if mibBuilder.loadTexts: acDot3adAggTable.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggTable.setDescription('A table that contains information about every Aggregator that is associated with this System.')
acDot3adAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1), ).setIndexNames((0, "AC-LAG-MIB", "acDot3adAggNodeIdIndex"), (0, "AC-LAG-MIB", "acDot3adAggInstanceIndex"))
if mibBuilder.loadTexts: acDot3adAggEntry.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggEntry.setDescription('A list of the Aggregator parameters. This is indexed by OSAP node ID - supporting one Aggregator per OSAP.')
acDot3adAggNodeIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 1), AcNodeId())
if mibBuilder.loadTexts: acDot3adAggNodeIdIndex.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggNodeIdIndex.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDot3adAggInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 2), AcAggInstanceIndex())
if mibBuilder.loadTexts: acDot3adAggInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggInstanceIndex.setDescription('The instance of this aggregator within this OSAP.')
acDot3adAggMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggMACAddress.setReference('IEEE 802.3 Subclause 30.7.1.1.9')
if mibBuilder.loadTexts: acDot3adAggMACAddress.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggMACAddress.setDescription('A 6-octet read-only value carrying the individual MAC address assigned to the Aggregator.')
acDot3adAggActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggActorSystemPriority.setReference('IEEE 802.3 Subclause 30.7.1.1.5')
if mibBuilder.loadTexts: acDot3adAggActorSystemPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggActorSystemPriority.setDescription("A 2-octet read-write value indicating the priority value associated with the Actor's System ID.")
acDot3adAggActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggActorSystemID.setReference('IEEE 802.3 Subclause 30.7.1.1.4')
if mibBuilder.loadTexts: acDot3adAggActorSystemID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggActorSystemID.setDescription("A 6-octet read-write MAC address value used as a unique identifier for the System that contains this Aggregator. NOTE-From the perspective of the Link Aggregation mechanisms described in Clause 43, only a single combination of Actor's System ID and System Priority are considered, and no distinction is made between the values of these parameters for an Aggregator and the port(s) that are associated with it; i.e., the protocol is described in terms of the operation of aggregation within a single System. However, the managed objects provided for the Aggregator and the port both allow management of these parameters. The result of this is to permit a single piece of equipment to be configured by management to contain more than one System from the point of view of the operation of Link Aggregation. This may be of particular use in the configuration of equipment that has limited aggregation capability (see 43.6).")
acDot3adAggAggregateOrIndividual = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggAggregateOrIndividual.setReference('IEEE 802.3 Subclause 30.7.1.1.6')
if mibBuilder.loadTexts: acDot3adAggAggregateOrIndividual.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggAggregateOrIndividual.setDescription("A read-only Boolean value indicating whether the Aggregator represents an Aggregate (`TRUE') or an Individual link (`FALSE').")
acDot3adAggActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 7), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggActorAdminKey.setReference('IEEE 802.3 Subclause 30.7.1.1.7')
if mibBuilder.loadTexts: acDot3adAggActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggActorAdminKey.setDescription('The current administrative value of the Key for the Aggregator. The administrative Key value may differ from the operational Key value for the reasons discussed in 43.6.2. This is a 16-bit, read-write value. The meaning of particular Key values is of local significance.')
acDot3adAggActorOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 8), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggActorOperKey.setReference('IEEE 802.3 Subclause 30.7.1.1.8')
if mibBuilder.loadTexts: acDot3adAggActorOperKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggActorOperKey.setDescription('The current operational value of the Key for the Aggregator. The administrative Key value may differ from the operational Key value for the reasons discussed in 43.6.2. This is a 16-bit read-only value. The meaning of particular Key values is of local significance.')
acDot3adAggPartnerSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPartnerSystemID.setReference('IEEE 802.3 Subclause 30.7.1.1.10')
if mibBuilder.loadTexts: acDot3adAggPartnerSystemID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPartnerSystemID.setDescription('A 6-octet read-only MAC address value consisting of the unique identifier for the current protocol Partner of this Aggregator. A value of zero indicates that there is no known Partner. If the aggregation is manually configured, this System ID value will be a value assigned by the local System.')
acDot3adAggPartnerSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPartnerSystemPriority.setReference('IEEE 802.3 Subclause 30.7.1.1.11')
if mibBuilder.loadTexts: acDot3adAggPartnerSystemPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPartnerSystemPriority.setDescription("A 2-octet read-only value that indicates the priority value associated with the Partner's System ID. If the aggregation is manually configured, this System Priority value will be a value assigned by the local System.")
acDot3adAggPartnerOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 11), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPartnerOperKey.setReference('IEEE 802.3 Subclause 30.7.1.1.12')
if mibBuilder.loadTexts: acDot3adAggPartnerOperKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPartnerOperKey.setDescription("The current operational value of the Key for the Aggregator's current protocol Partner. This is a 16-bit read-only value. If the aggregation is manually configured, this Key value will be a value assigned by the local System.")
acDot3adAggCollectorMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggCollectorMaxDelay.setReference('IEEE 802.3 Subclause 30.7.1.1.32')
if mibBuilder.loadTexts: acDot3adAggCollectorMaxDelay.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggCollectorMaxDelay.setDescription('The value of this 16-bit read-write attribute defines the maximum delay, in tens of microseconds, that may be imposed by the Frame Collector between receiving a frame from an Aggregator Parser, and either delivering the frame to its MAC Client or discarding the frame (see 43.2.3.1.1).')
acDot3adAggPortListTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 2), )
if mibBuilder.loadTexts: acDot3adAggPortListTable.setReference('IEEE 802.3 Subclause 30.7.1.1.30')
if mibBuilder.loadTexts: acDot3adAggPortListTable.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortListTable.setDescription('A table that contains a list of all the ports associated with each Aggregator.')
acDot3adAggPortListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 2, 1), ).setIndexNames((0, "AC-LAG-MIB", "acDot3adAggNodeIdIndex"), (0, "AC-LAG-MIB", "acDot3adAggInstanceIndex"))
if mibBuilder.loadTexts: acDot3adAggPortListEntry.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortListEntry.setDescription('A list of the ports associated with a given Aggregator. This is indexed by OSAP node ID - supporting one Aggregator per OSAP.')
acDot3adAggPortListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 1, 2, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortListPorts.setReference('IEEE 802.3 Subclause 30.7.1.1.30')
if mibBuilder.loadTexts: acDot3adAggPortListPorts.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortListPorts.setDescription('The complete set of ports currently associated with this Aggregator. Each bit set in this list represents an Actor Port member of this Link Aggregation.')
acDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1), )
if mibBuilder.loadTexts: acDot3adAggPortTable.setReference('IEEE 802.3 Subclause 30.7.2')
if mibBuilder.loadTexts: acDot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortTable.setDescription('A table that contains Link Aggregation Control configuration information about every Aggregation Port associated with this device. A row appears in this table for each physical port.')
acDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1), ).setIndexNames((0, "AC-LAG-MIB", "acDot3adAggPortNodeIdIndex"), (0, "AC-LAG-MIB", "acDot3adAggPortSlotIndex"), (0, "AC-LAG-MIB", "acDot3adAggPortPortIndex"))
if mibBuilder.loadTexts: acDot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortEntry.setDescription('A list of Link Aggregation Control configuration parameters for each Aggregation Port on this device.')
acDot3adAggPortNodeIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 1), AcNodeId())
if mibBuilder.loadTexts: acDot3adAggPortNodeIdIndex.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortNodeIdIndex.setDescription('The node id is the id for this specific node in the OSAP ring.')
acDot3adAggPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 2), AcSlotNumber())
if mibBuilder.loadTexts: acDot3adAggPortSlotIndex.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortSlotIndex.setDescription('The slot number within the chassis where this module entry resides.')
acDot3adAggPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 3), AcPortNumber())
if mibBuilder.loadTexts: acDot3adAggPortPortIndex.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPortIndex.setDescription('The port number on the module which represents this instance of an Ethernet access port.')
acDot3adAggPortActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortActorSystemPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.2')
if mibBuilder.loadTexts: acDot3adAggPortActorSystemPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorSystemPriority.setDescription("A 2-octet read-write value used to define the priority value associated with the Actor's System ID.")
acDot3adAggPortActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortActorSystemID.setReference('IEEE 802.3 Subclause 30.7.2.1.3')
if mibBuilder.loadTexts: acDot3adAggPortActorSystemID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorSystemID.setDescription('A 6-octet read-only MAC address value that defines the value of the System ID for the System that contains this Aggregation Port.')
acDot3adAggPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 6), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortActorAdminKey.setReference('IEEE 802.3 Subclause 30.7.2.1.4')
if mibBuilder.loadTexts: acDot3adAggPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorAdminKey.setDescription('The current administrative value of the Key for the Aggregation Port. This is a 16-bit read-write value. The meaning of particular Key values is of local significance.')
acDot3adAggPortActorOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 7), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortActorOperKey.setReference('IEEE 802.3 Subclause 30.7.2.1.5')
if mibBuilder.loadTexts: acDot3adAggPortActorOperKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorOperKey.setDescription('The current operational value of the Key for the Aggregation Port. This is a 16-bit read-only value. The meaning of particular Key values is of local significance.')
acDot3adAggPortPartnerAdminSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminSystemPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.6')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminSystemPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminSystemPriority.setDescription("A 2-octet read-write value used to define the administrative value of priority associated with the Partner's System ID. The assigned value is used, along with the value of aAggPortPartnerAdminSystemID, aAggPortPartnerAdminKey, aAggPortPartnerAdminPort, and aAggPortPartnerAdminPortPriority, in order to achieve manually configured aggregation.")
acDot3adAggPortPartnerOperSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperSystemPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.7')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperSystemPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperSystemPriority.setDescription("A 2-octet read-only value indicating the operational value of priority associated with the Partner's System ID. The value of this attribute may contain the manually configured value carried in aAggPortPartnerAdminSystemPriority if there is no protocol Partner.")
acDot3adAggPortPartnerAdminSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminSystemID.setReference('IEEE 802.3 Subclause 30.7.2.1.8')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminSystemID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminSystemID.setDescription("A 6-octet read-write MACAddress value representing the administrative value of the Aggregation Port's protocol Partner's System ID. The assigned value is used, along with the value of aAggPortPartnerAdminSystemPriority, aAggPortPartnerAdminKey, aAggPortPartnerAdminPort, and aAggPortPartnerAdminPortPriority, in order to achieve manually configured aggregation.")
acDot3adAggPortPartnerOperSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperSystemID.setReference('IEEE 802.3 Subclause 30.7.2.1.9')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperSystemID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperSystemID.setDescription("A 6-octet read-only MACAddress value representing the current value of the Aggregation Port's protocol Partner's System ID. A value of zero indicates that there is no known protocol Partner. The value of this attribute may contain the manually configured value carried in aAggPortPartnerAdminSystemID if there is no protocol Partner.")
acDot3adAggPortPartnerAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 12), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminKey.setReference('IEEE 802.3 Subclause 30.7.2.1.10')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminKey.setDescription('The current administrative value of the Key for the protocol Partner. This is a 16-bit read-write value. The assigned value is used, along with the value of aAggPortPartnerAdminSystemPriority, aAggPortPartnerAdminSystemID, aAggPortPartnerAdminPort, and aAggPortPartnerAdminPortPriority, in order to achieve manually configured aggregation.')
acDot3adAggPortPartnerOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 13), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperKey.setReference('IEEE 802.3 Subclause 30.7.2.1.11')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperKey.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperKey.setDescription('The current operational value of the Key for the protocol Partner. The value of this attribute may contain the manually configured value carried in aAggPortPartnerAdminKey if there is no protocol Partner. This is a 16-bit read-only value.')
acDot3adAggPortSelectedAggID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 14), AcAggInstanceValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortSelectedAggID.setReference('IEEE 802.3 Subclause 30.7.2.1.12')
if mibBuilder.loadTexts: acDot3adAggPortSelectedAggID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortSelectedAggID.setDescription('The identifier value of the Aggregator that this Aggregation Port has currently selected. Zero indicates that the Aggregation Port has not selected an Aggregator, either because it is in the process of detaching from an Aggregator or because there is no suitable Aggregator available for it to select. This value is read-only.')
acDot3adAggPortAttachedAggID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 15), AcAggInstanceValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortAttachedAggID.setReference('IEEE 802.3 Subclause 30.7.2.1.13')
if mibBuilder.loadTexts: acDot3adAggPortAttachedAggID.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortAttachedAggID.setDescription('The identifier value of the Aggregator that this Aggregation Port is currently attached to. Zero indicates that the Aggregation Port is not currently attached to an Aggregator. This value is read-only.')
acDot3adAggPortActorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortActorPort.setReference('IEEE 802.3 Subclause 30.7.2.1.14')
if mibBuilder.loadTexts: acDot3adAggPortActorPort.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorPort.setDescription('The port number locally assigned to the Aggregation Port. The port number is communicated in LACPDUs as the Actor_Port. This value is read-only.')
acDot3adAggPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortActorPortPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.15')
if mibBuilder.loadTexts: acDot3adAggPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port. This 16-bit value is read-write.')
acDot3adAggPortPartnerAdminPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminPort.setReference('IEEE 802.3 Subclause 30.7.2.1.16')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminPort.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminPort.setDescription('The current administrative value of the port number for the protocol Partner. This is a 16-bit read-write value. The assigned value is used, along with the value of aAggPortPartnerAdminSystemPriority, aAggPortPartnerAdminSystemID, aAggPortPartnerAdminKey, and aAggPortPartnerAdminPortPriority, in order to achieve manually configured aggregation.')
acDot3adAggPortPartnerOperPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperPort.setReference('IEEE 802.3 Subclause 30.7.2.1.17')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperPort.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperPort.setDescription("The operational port number assigned to this Aggregation Port by the Aggregation Port's protocol Partner. The value of this attribute may contain the manually configured value carried in aAggPortPartnerAdminPort if there is no protocol Partner. This 16-bit value is read-only.")
acDot3adAggPortPartnerAdminPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminPortPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.18')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminPortPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminPortPriority.setDescription('The current administrative value of the port priority for the protocol Partner. This is a 16-bit read-write value. The assigned value is used, along with the value of aAggPortPartnerAdminSystemPriority, aAggPortPartnerAdminSystemID, aAggPortPartnerAdminKey, and aAggPortPartnerAdminPort, in order to achieve manually configured aggregation.')
acDot3adAggPortPartnerOperPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperPortPriority.setReference('IEEE 802.3 Subclause 30.7.2.1.19')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperPortPriority.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperPortPriority.setDescription('The priority value assigned to this Aggregation Port by the Partner. The value of this attribute may contain the manually configured value carried in aAggPortPartnerAdminPortPriority if there is no protocol Partner. This 16-bit value is read-only.')
acDot3adAggPortActorAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 22), LacpState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortActorAdminState.setReference('IEEE 802.3 Subclause 30.7.2.1.20')
if mibBuilder.loadTexts: acDot3adAggPortActorAdminState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorAdminState.setDescription('A string of 8 bits, corresponding to the administrative values of Actor_State (43.4.2) as transmitted by the Actor in LACPDUs. The first bit corresponds to bit 0 of Actor_State (LACP_Activity), the second bit corresponds to bit 1 (LACP_Timeout), the third bit corresponds to bit 2 (Aggregation), the fourth bit corresponds to bit 3 (Synchronization), the fifth bit corresponds to bit 4 (Collecting), the sixth bit corresponds to bit 5 (Distributing), the seventh bit corresponds to bit 6 (Defaulted), and the eighth bit corresponds to bit 7 (Expired). These values allow administrative control over the values of LACP_Activity, LACP_Timeout and Aggregation. This attribute value is read-write.')
acDot3adAggPortActorOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 23), LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortActorOperState.setReference('IEEE 802.3 Subclause 30.7.2.1.21')
if mibBuilder.loadTexts: acDot3adAggPortActorOperState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortActorOperState.setDescription('A string of 8 bits, corresponding to the current operational values of Actor_State as transmitted by the Actor in LACPDUs. The bit allocations are as defined in 30.7.2.1.20. This attribute value is read-only.')
acDot3adAggPortPartnerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 24), LacpState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminState.setReference('IEEE 802.3 Subclause 30.7.2.1.22')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerAdminState.setDescription('A string of 8 bits, corresponding to the current administrative value of Actor_State for the protocol Partner. The bit allocations are as defined in 30.7.2.1.20. This attribute value is read-write. The assigned value is used in order to achieve manually configured aggregation.')
acDot3adAggPortPartnerOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 25), LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperState.setReference('IEEE 802.3 Subclause 30.7.2.1.23')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortPartnerOperState.setDescription('A string of 8 bits, corresponding to the current values of Actor_State in the most recently received LACPDU transmitted by the protocol Partner. The bit allocations are as defined in 30.7.2.1.20. In the absence of an active protocol Partner, this value may reflect the manually configured value aAggPortPartnerAdminState. This attribute value is read-only.')
acDot3adAggPortAggregateOrIndividual = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 1, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortAggregateOrIndividual.setReference('IEEE 802.3 Subclause 30.7.2.1.24')
if mibBuilder.loadTexts: acDot3adAggPortAggregateOrIndividual.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortAggregateOrIndividual.setDescription("A read-only Boolean value indicating whether the Aggregation Port is able to Aggregate (`TRUE') or is only able to operate as an Individual link (`FALSE').")
acDot3adAggPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2), )
if mibBuilder.loadTexts: acDot3adAggPortStatsTable.setReference('IEEE 802.3 Subclause 30.7.3')
if mibBuilder.loadTexts: acDot3adAggPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsTable.setDescription('A table that contains Link Aggregation information about every port that is associated with this device. A row appears in this table for each physical port.')
acDot3adAggPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1), ).setIndexNames((0, "AC-LAG-MIB", "acDot3adAggPortNodeIdIndex"), (0, "AC-LAG-MIB", "acDot3adAggPortSlotIndex"), (0, "AC-LAG-MIB", "acDot3adAggPortPortIndex"))
if mibBuilder.loadTexts: acDot3adAggPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsEntry.setDescription('A list of Link Aggregation Control Protocol statistics for each port on this device.')
acDot3adAggPortStatsLACPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsLACPDUsRx.setReference('IEEE 802.3 Subclause 30.7.3.1.2')
if mibBuilder.loadTexts: acDot3adAggPortStatsLACPDUsRx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsLACPDUsRx.setDescription('The number of valid LACPDUs received on this Aggregation Port. This value is read-only.')
acDot3adAggPortStatsMarkerPDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerPDUsRx.setReference('IEEE 802.3 Subclause 30.7.3.1.3')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerPDUsRx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerPDUsRx.setDescription('The number of valid Marker PDUs received on this Aggregation Port. This value is read-only.')
acDot3adAggPortStatsMarkerResponsePDUsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerResponsePDUsRx.setReference('IEEE 802.3 Subclause 30.7.3.1.4')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerResponsePDUsRx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerResponsePDUsRx.setDescription('The number of valid Marker Response PDUs received on this Aggregation Port. This value is read-only.')
acDot3adAggPortStatsUnknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsUnknownRx.setReference('IEEE 802.3 Subclause 30.7.3.1.5')
if mibBuilder.loadTexts: acDot3adAggPortStatsUnknownRx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsUnknownRx.setDescription('The number of frames received that either: - carry the Slow Protocols Ethernet Type value (43B.4), but contain an unknown PDU, or: - are addressed to the Slow Protocols group MAC Address (43B.3), but do not carry the Slow Protocols Ethernet Type. This value is read-only.')
acDot3adAggPortStatsIllegalRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsIllegalRx.setReference('IEEE 802.3 Subclause 30.7.3.1.6')
if mibBuilder.loadTexts: acDot3adAggPortStatsIllegalRx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsIllegalRx.setDescription('The number of frames received that carry the Slow Protocols Ethernet Type value (43B.4), but contain a badly formed PDU or an illegal value of Protocol Subtype (43B.4). This value is read-only.')
acDot3adAggPortStatsLACPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsLACPDUsTx.setReference('IEEE 802.3 Subclause 30.7.3.1.7')
if mibBuilder.loadTexts: acDot3adAggPortStatsLACPDUsTx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsLACPDUsTx.setDescription('The number of LACPDUs transmitted on this Aggregation Port. This value is read-only.')
acDot3adAggPortStatsMarkerPDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerPDUsTx.setReference('IEEE 802.3 Subclause 30.7.3.1.8')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerPDUsTx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerPDUsTx.setDescription('The number of Marker PDUs transmitted on this Aggregation Port. This value is read-only.')
acDot3adAggPortStatsMarkerResponsePDUsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerResponsePDUsTx.setReference('IEEE 802.3 Subclause 30.7.3.1.9')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerResponsePDUsTx.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsMarkerResponsePDUsTx.setDescription('The number of Marker Response PDUs transmitted on this Aggregation Port. This value is read-only.')
acDot3adAggPortDebugTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3), )
if mibBuilder.loadTexts: acDot3adAggPortDebugTable.setReference('IEEE 802.3 Subclause 30.7.4')
if mibBuilder.loadTexts: acDot3adAggPortDebugTable.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugTable.setDescription('A table that contains Link Aggregation debug information about every port that is associated with this device. A row appears in this table for each physical port.')
acDot3adAggPortDebugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1), ).setIndexNames((0, "AC-LAG-MIB", "acDot3adAggPortNodeIdIndex"), (0, "AC-LAG-MIB", "acDot3adAggPortSlotIndex"), (0, "AC-LAG-MIB", "acDot3adAggPortPortIndex"))
if mibBuilder.loadTexts: acDot3adAggPortDebugEntry.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugEntry.setDescription('A list of the debug parameters for a port.')
acDot3adAggPortDebugRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("currentRx", 1), ("expired", 2), ("defaulted", 3), ("initialize", 4), ("lacpDisabled", 5), ("portDisabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugRxState.setReference('IEEE 802.3 Subclause 30.7.4.1.2')
if mibBuilder.loadTexts: acDot3adAggPortDebugRxState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugRxState.setDescription("This attribute holds the value `currentRx' if the Receive state machine for the Aggregation Port is in the CURRENT state, `expired' if the Receive state machine is in the EXPIRED state, `defaulted' if the Receive state machine is in the DEFAULTED state, `initialize' if the Receive state machine is in the INITIALIZE state, `lacpDisabled' if the Receive state machine is in the LACP_DISABLED state, or `portDisabled' if the Receive state machine is in the PORT_DISABLED state. This value is read-only.")
acDot3adAggPortDebugLastRxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugLastRxTime.setReference('IEEE 802.3 Subclause 30.7.4.1.3')
if mibBuilder.loadTexts: acDot3adAggPortDebugLastRxTime.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugLastRxTime.setDescription('The value of aTimeSinceSystemReset (F.2.1) when the last LACPDU was received by this Aggregation Port. This value is read-only.')
acDot3adAggPortDebugMuxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("detached", 1), ("waiting", 2), ("attached", 3), ("collecting", 4), ("distributing", 5), ("collectingDistributing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugMuxState.setReference('IEEE 802.3 Subclause 30.7.4.1.4')
if mibBuilder.loadTexts: acDot3adAggPortDebugMuxState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugMuxState.setDescription("This attribute holds the value `detached' if the Mux state machine (43.4.14) for the Aggregation Port is in the DETACHED state, `waiting' if the Mux state machine is in the WAITING state, `attached' if the Mux state machine for the Aggregation Port is in the ATTACHED state, `collecting' if the Mux state machine for the Aggregation Port is in the COLLECTING state, `distributing' if the Mux state machine for the Aggregation Port is in the DISTRIBUTING state, and `collectingDistributing' if the Mux state machine for the Aggregation Port is in the COLLECTING_DISTRIBUTING state. This value is read-only.")
acDot3adAggPortDebugMuxReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugMuxReason.setReference('IEEE 802.3 Subclause 30.7.4.1.5')
if mibBuilder.loadTexts: acDot3adAggPortDebugMuxReason.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugMuxReason.setDescription('A human-readable text string indicating the reason for the most recent change of Mux machine state. This value is read-only.')
acDot3adAggPortDebugActorChurnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 5), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChurnState.setReference('IEEE 802.3 Subclause 30.7.4.1.6')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChurnState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChurnState.setDescription("The state of the Actor Churn Detection machine (43.4.17) for the Aggregation Port. A value of `noChurn' indicates that the state machine is in either the NO_ACTOR_CHURN or the ACTOR_CHURN_MONITOR state, and `churn' indicates that the state machine is in the ACTOR_CHURN state. This value is read-only.")
acDot3adAggPortDebugPartnerChurnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 6), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChurnState.setReference('IEEE 802.3 Subclause 30.7.4.1.7')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChurnState.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChurnState.setDescription("The state of the Partner Churn Detection machine (43.4.17) for the Aggregation Port. A value of `noChurn' indicates that the state machine is in either the NO_PARTNER_CHURN or the PARTNER_CHURN_MONITOR state, and `churn' indicates that the state machine is in the PARTNER_CHURN state. This value is read-only.")
acDot3adAggPortDebugActorChurnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChurnCount.setReference('IEEE 802.3 Subclause 30.7.4.1.8')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChurnCount.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChurnCount.setDescription('Count of the number of times the Actor Churn state machine has entered the ACTOR_CHURN state. This value is read-only.')
acDot3adAggPortDebugPartnerChurnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChurnCount.setReference('IEEE 802.3 Subclause 30.7.4.1.9')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChurnCount.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChurnCount.setDescription('Count of the number of times the Partner Churn state machine has entered the PARTNER_CHURN state. This value is read-only.')
acDot3adAggPortDebugActorSyncTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugActorSyncTransitionCount.setReference('IEEE 802.3 Subclause 30.7.4.1.10')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorSyncTransitionCount.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorSyncTransitionCount.setDescription("Count of the number of times the Actor's Mux state machine (43.4.15) has entered the IN_SYNC state. This value is read-only.")
acDot3adAggPortDebugPartnerSyncTransitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerSyncTransitionCount.setReference('IEEE 802.3 Subclause 30.7.4.1.11')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerSyncTransitionCount.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerSyncTransitionCount.setDescription("Count of the number of times the Partner's Mux state machine (43.4.15) has entered the IN_SYNC state. This value is read-only.")
acDot3adAggPortDebugActorChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChangeCount.setReference('IEEE 802.3 Subclause 30.7.4.1.12')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChangeCount.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugActorChangeCount.setDescription("Count of the number of times the Actor's perception of the LAG ID for this Aggregation Port has changed. This value is read-only.")
acDot3adAggPortDebugPartnerChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChangeCount.setReference('IEEE 802.3 Subclause 30.7.4.1.13')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChangeCount.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugPartnerChangeCount.setDescription("Count of the number of times the Partner's perception of the LAG ID (see 43.3.6.1) for this Aggregation Port has changed. This value is read-only.")
acDot3adAggConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2))
acDot3adAggGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1))
acDot3adAggCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 2))
acDot3adAggGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1, 1)).setObjects(("AC-LAG-MIB", "acDot3adAggActorSystemID"), ("AC-LAG-MIB", "acDot3adAggActorSystemPriority"), ("AC-LAG-MIB", "acDot3adAggAggregateOrIndividual"), ("AC-LAG-MIB", "acDot3adAggActorAdminKey"), ("AC-LAG-MIB", "acDot3adAggMACAddress"), ("AC-LAG-MIB", "acDot3adAggActorOperKey"), ("AC-LAG-MIB", "acDot3adAggPartnerSystemID"), ("AC-LAG-MIB", "acDot3adAggPartnerSystemPriority"), ("AC-LAG-MIB", "acDot3adAggPartnerOperKey"), ("AC-LAG-MIB", "acDot3adAggCollectorMaxDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adAggGroup = acDot3adAggGroup.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggGroup.setDescription('A collection of objects providing information about an aggregation.')
acDot3adAggPortListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1, 2)).setObjects(("AC-LAG-MIB", "acDot3adAggPortListPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adAggPortListGroup = acDot3adAggPortListGroup.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortListGroup.setDescription('A collection of objects providing information about every port in an aggregation.')
acDot3adAggPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1, 3)).setObjects(("AC-LAG-MIB", "acDot3adAggPortActorSystemPriority"), ("AC-LAG-MIB", "acDot3adAggPortActorSystemID"), ("AC-LAG-MIB", "acDot3adAggPortActorAdminKey"), ("AC-LAG-MIB", "acDot3adAggPortActorOperKey"), ("AC-LAG-MIB", "acDot3adAggPortPartnerAdminSystemPriority"), ("AC-LAG-MIB", "acDot3adAggPortPartnerOperSystemPriority"), ("AC-LAG-MIB", "acDot3adAggPortPartnerAdminSystemID"), ("AC-LAG-MIB", "acDot3adAggPortPartnerOperSystemID"), ("AC-LAG-MIB", "acDot3adAggPortPartnerAdminKey"), ("AC-LAG-MIB", "acDot3adAggPortPartnerOperKey"), ("AC-LAG-MIB", "acDot3adAggPortSelectedAggID"), ("AC-LAG-MIB", "acDot3adAggPortAttachedAggID"), ("AC-LAG-MIB", "acDot3adAggPortActorPort"), ("AC-LAG-MIB", "acDot3adAggPortActorPortPriority"), ("AC-LAG-MIB", "acDot3adAggPortPartnerAdminPort"), ("AC-LAG-MIB", "acDot3adAggPortPartnerOperPort"), ("AC-LAG-MIB", "acDot3adAggPortPartnerAdminPortPriority"), ("AC-LAG-MIB", "acDot3adAggPortPartnerOperPortPriority"), ("AC-LAG-MIB", "acDot3adAggPortActorAdminState"), ("AC-LAG-MIB", "acDot3adAggPortActorOperState"), ("AC-LAG-MIB", "acDot3adAggPortPartnerAdminState"), ("AC-LAG-MIB", "acDot3adAggPortPartnerOperState"), ("AC-LAG-MIB", "acDot3adAggPortAggregateOrIndividual"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adAggPortGroup = acDot3adAggPortGroup.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortGroup.setDescription('A collection of objects providing information about every port in an aggregation.')
acDot3adAggPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1, 4)).setObjects(("AC-LAG-MIB", "acDot3adAggPortStatsLACPDUsRx"), ("AC-LAG-MIB", "acDot3adAggPortStatsMarkerPDUsRx"), ("AC-LAG-MIB", "acDot3adAggPortStatsMarkerResponsePDUsRx"), ("AC-LAG-MIB", "acDot3adAggPortStatsUnknownRx"), ("AC-LAG-MIB", "acDot3adAggPortStatsIllegalRx"), ("AC-LAG-MIB", "acDot3adAggPortStatsLACPDUsTx"), ("AC-LAG-MIB", "acDot3adAggPortStatsMarkerPDUsTx"), ("AC-LAG-MIB", "acDot3adAggPortStatsMarkerResponsePDUsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adAggPortStatsGroup = acDot3adAggPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortStatsGroup.setDescription('A collection of objects providing information about every port in an aggregation.')
acDot3adAggPortDebugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1, 5)).setObjects(("AC-LAG-MIB", "acDot3adAggPortDebugRxState"), ("AC-LAG-MIB", "acDot3adAggPortDebugLastRxTime"), ("AC-LAG-MIB", "acDot3adAggPortDebugMuxState"), ("AC-LAG-MIB", "acDot3adAggPortDebugMuxReason"), ("AC-LAG-MIB", "acDot3adAggPortDebugActorChurnState"), ("AC-LAG-MIB", "acDot3adAggPortDebugPartnerChurnState"), ("AC-LAG-MIB", "acDot3adAggPortDebugActorChurnCount"), ("AC-LAG-MIB", "acDot3adAggPortDebugPartnerChurnCount"), ("AC-LAG-MIB", "acDot3adAggPortDebugActorSyncTransitionCount"), ("AC-LAG-MIB", "acDot3adAggPortDebugPartnerSyncTransitionCount"), ("AC-LAG-MIB", "acDot3adAggPortDebugActorChangeCount"), ("AC-LAG-MIB", "acDot3adAggPortDebugPartnerChangeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adAggPortDebugGroup = acDot3adAggPortDebugGroup.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggPortDebugGroup.setDescription('A collection of objects providing debug information about every aggregated port.')
acDot3adTablesLastChangedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 1, 1, 6)).setObjects(("AC-LAG-MIB", "acDot3adTablesLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adTablesLastChangedGroup = acDot3adTablesLastChangedGroup.setStatus('current')
if mibBuilder.loadTexts: acDot3adTablesLastChangedGroup.setDescription('A collection of objects providing information about the time of changes to the configuration of aggregations and their ports.')
acDot3adAggCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2785, 2, 3, 8, 2, 2, 1)).setObjects(("AC-LAG-MIB", "acDot3adAggGroup"), ("AC-LAG-MIB", "acDot3adAggPortGroup"), ("AC-LAG-MIB", "acDot3adTablesLastChangedGroup"), ("AC-LAG-MIB", "acDot3adAggPortListGroup"), ("AC-LAG-MIB", "acDot3adAggPortStatsGroup"), ("AC-LAG-MIB", "acDot3adAggPortDebugGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acDot3adAggCompliance = acDot3adAggCompliance.setStatus('current')
if mibBuilder.loadTexts: acDot3adAggCompliance.setDescription('The compliance statement for device support of Link Aggregation.')
mibBuilder.exportSymbols("AC-LAG-MIB", acDot3adAggPortAggregateOrIndividual=acDot3adAggPortAggregateOrIndividual, acDot3adAggNodeIdIndex=acDot3adAggNodeIdIndex, acDot3adAggPortStatsMarkerPDUsTx=acDot3adAggPortStatsMarkerPDUsTx, acDot3adAggPortActorSystemID=acDot3adAggPortActorSystemID, acDot3adAggPortDebugMuxReason=acDot3adAggPortDebugMuxReason, acDot3adAggPortTable=acDot3adAggPortTable, acDot3adAggPartnerSystemPriority=acDot3adAggPartnerSystemPriority, acDot3adAggPortActorPort=acDot3adAggPortActorPort, acDot3adAggPortActorAdminKey=acDot3adAggPortActorAdminKey, acDot3adAggTable=acDot3adAggTable, PYSNMP_MODULE_ID=acLagMIB, acDot3adAggPortDebugActorChangeCount=acDot3adAggPortDebugActorChangeCount, acDot3adAggPortDebugGroup=acDot3adAggPortDebugGroup, acDot3adAggPortDebugMuxState=acDot3adAggPortDebugMuxState, acDot3adAggPortDebugActorChurnState=acDot3adAggPortDebugActorChurnState, acDot3adAggGroup=acDot3adAggGroup, acDot3adAggPortActorOperKey=acDot3adAggPortActorOperKey, acDot3adAggPortPortIndex=acDot3adAggPortPortIndex, acDot3adAggInstanceIndex=acDot3adAggInstanceIndex, acDot3adAggPortStatsTable=acDot3adAggPortStatsTable, acDot3adAggPortStatsMarkerResponsePDUsTx=acDot3adAggPortStatsMarkerResponsePDUsTx, acDot3adAggActorSystemID=acDot3adAggActorSystemID, acDot3adAggPortActorPortPriority=acDot3adAggPortActorPortPriority, acDot3adAggPortDebugLastRxTime=acDot3adAggPortDebugLastRxTime, acDot3adAggPortDebugActorSyncTransitionCount=acDot3adAggPortDebugActorSyncTransitionCount, acDot3adAggCompliances=acDot3adAggCompliances, acDot3adAggActorSystemPriority=acDot3adAggActorSystemPriority, acDot3adAggCompliance=acDot3adAggCompliance, acDot3adAggPortActorOperState=acDot3adAggPortActorOperState, ChurnState=ChurnState, AcAggInstanceIndex=AcAggInstanceIndex, acDot3adAggPortPartnerAdminPort=acDot3adAggPortPartnerAdminPort, acDot3adAggPortPartnerOperState=acDot3adAggPortPartnerOperState, acDot3adAggPortSlotIndex=acDot3adAggPortSlotIndex, acDot3adAggPortPartnerAdminKey=acDot3adAggPortPartnerAdminKey, acLagMIB=acLagMIB, lagMIBObjects=lagMIBObjects, acDot3adAggPort=acDot3adAggPort, acDot3adAggPortPartnerAdminSystemID=acDot3adAggPortPartnerAdminSystemID, LacpState=LacpState, acDot3adAggPortPartnerOperPort=acDot3adAggPortPartnerOperPort, acDot3adAggConformance=acDot3adAggConformance, acDot3adAggPortStatsEntry=acDot3adAggPortStatsEntry, acDot3adAggPortDebugPartnerChurnCount=acDot3adAggPortDebugPartnerChurnCount, acDot3adAggPortDebugPartnerChangeCount=acDot3adAggPortDebugPartnerChangeCount, acDot3adAggPortPartnerOperKey=acDot3adAggPortPartnerOperKey, acDot3adAggAggregateOrIndividual=acDot3adAggAggregateOrIndividual, acDot3adAggActorOperKey=acDot3adAggActorOperKey, acDot3adAggPartnerOperKey=acDot3adAggPartnerOperKey, AcAggInstanceValue=AcAggInstanceValue, acDot3adAggPortDebugPartnerSyncTransitionCount=acDot3adAggPortDebugPartnerSyncTransitionCount, acDot3adAggPortAttachedAggID=acDot3adAggPortAttachedAggID, acDot3adAggEntry=acDot3adAggEntry, acDot3adAggPortStatsLACPDUsTx=acDot3adAggPortStatsLACPDUsTx, acDot3adAggPortDebugActorChurnCount=acDot3adAggPortDebugActorChurnCount, acDot3adAggPortNodeIdIndex=acDot3adAggPortNodeIdIndex, acDot3adAggPortListGroup=acDot3adAggPortListGroup, acDot3adAggPortPartnerOperPortPriority=acDot3adAggPortPartnerOperPortPriority, acDot3adAggPortPartnerAdminPortPriority=acDot3adAggPortPartnerAdminPortPriority, acDot3adAggPortStatsGroup=acDot3adAggPortStatsGroup, acDot3adAggPortGroup=acDot3adAggPortGroup, acDot3adAggPortPartnerOperSystemID=acDot3adAggPortPartnerOperSystemID, acDot3adAggPortListEntry=acDot3adAggPortListEntry, acDot3adAggPortPartnerAdminState=acDot3adAggPortPartnerAdminState, acDot3adAggPortPartnerOperSystemPriority=acDot3adAggPortPartnerOperSystemPriority, acDot3adAggPortEntry=acDot3adAggPortEntry, acDot3adAggPortDebugEntry=acDot3adAggPortDebugEntry, acDot3adTablesLastChanged=acDot3adTablesLastChanged, acDot3adAggGroups=acDot3adAggGroups, acDot3adAggPartnerSystemID=acDot3adAggPartnerSystemID, PortList=PortList, acDot3adAggCollectorMaxDelay=acDot3adAggCollectorMaxDelay, acDot3adTablesLastChangedGroup=acDot3adTablesLastChangedGroup, acDot3adAggPortStatsUnknownRx=acDot3adAggPortStatsUnknownRx, acDot3adAggPortSelectedAggID=acDot3adAggPortSelectedAggID, LacpKey=LacpKey, acDot3adAggPortActorSystemPriority=acDot3adAggPortActorSystemPriority, acDot3adAggPortStatsMarkerPDUsRx=acDot3adAggPortStatsMarkerPDUsRx, acDot3adAggPortStatsIllegalRx=acDot3adAggPortStatsIllegalRx, acDot3adAggMACAddress=acDot3adAggMACAddress, acDot3adAggPortActorAdminState=acDot3adAggPortActorAdminState, acDot3adAggPortListPorts=acDot3adAggPortListPorts, acDot3adAggPortDebugTable=acDot3adAggPortDebugTable, acDot3adAggPortDebugRxState=acDot3adAggPortDebugRxState, acDot3adAgg=acDot3adAgg, acDot3adAggActorAdminKey=acDot3adAggActorAdminKey, acDot3adAggPortListTable=acDot3adAggPortListTable, acDot3adAggPortDebugPartnerChurnState=acDot3adAggPortDebugPartnerChurnState, acDot3adAggPortPartnerAdminSystemPriority=acDot3adAggPortPartnerAdminSystemPriority, acDot3adAggPortStatsLACPDUsRx=acDot3adAggPortStatsLACPDUsRx, acDot3adAggPortStatsMarkerResponsePDUsRx=acDot3adAggPortStatsMarkerResponsePDUsRx)
