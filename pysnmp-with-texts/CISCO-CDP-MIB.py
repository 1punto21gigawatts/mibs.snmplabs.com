#
# PySNMP MIB module CISCO-CDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoNetworkProtocol, CiscoNetworkAddress = mibBuilder.importSymbols("CISCO-TC", "CiscoNetworkProtocol", "CiscoNetworkAddress")
VlanIndex, = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, ObjectIdentity, Bits, IpAddress, Gauge32, Unsigned32, NotificationType, Counter32, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "Gauge32", "Unsigned32", "NotificationType", "Counter32", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "ModuleIdentity")
TruthValue, TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention")
ciscoCdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 23))
ciscoCdpMIB.setRevisions(('2005-03-21 00:00', '2005-03-14 00:00', '2001-11-23 00:00', '2001-04-23 00:00', '2000-11-22 00:00', '1998-12-10 00:00', '1998-09-16 00:00', '1996-07-08 00:00', '1995-08-15 00:00', '1995-07-27 00:00', '1995-01-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCdpMIB.setRevisionsDescriptions(('Added the following object: cdpInterfaceName.', 'Added cdpCtAddressTable which contains the following objects: cdpCtAddressIndex, cdpCtAddressType, cdpCtAddress.', 'Added cdpInterfaceExtTable which contains the following objects: cdpInterfaceExtendedTrust, cdpInterfaceCosForUntrustedPort.', 'Added the following objects: cdpGlobalDeviceIdFormatCpb, cdpGlobalDeviceIdFormat.', 'Added the following objects: cdpCacheApplianceID, cdpCacheVlanID, cdpCachePowerConsumption, cdpCacheMTU, cdpCachePrimaryMgmtAddrType, cdpCachePrimaryMgmtAddr, cdpCacheSecondaryMgmtAddrType, cdpCacheSecondaryMgmtAddr, cdpCacheLastChange, cdpCachePhysLocation, cdpCacheSysName, cdpCacheSysObjectID, cdpGlobalLastChange', 'Added cdpGlobalDeviceId object.', 'added these objects to cdpCacheTable: cdpCacheVTPMgmtDomain, cdpCacheNativeVLAN, cdpCacheDuplex. ', 'Obsolete cdpInterfaceMessageInterval and newly define cdpGlobal object.', 'Specify a correct (non-negative) range for several index objects.', 'Correct range of cdpInterfaceMessageInterval.', 'Move from ciscoExperiment to ciscoMgmt oid subtree.',))
if mibBuilder.loadTexts: ciscoCdpMIB.setLastUpdated('200503210000Z')
if mibBuilder.loadTexts: ciscoCdpMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoCdpMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoCdpMIB.setDescription('The MIB module for management of the Cisco Discovery Protocol in Cisco devices.')
ciscoCdpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 1))
cdpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1))
cdpCache = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2))
cdpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3))
cdpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1), )
if mibBuilder.loadTexts: cdpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceTable.setDescription("The (conceptual) table containing the status of CDP on the device's interfaces.")
cdpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CDP-MIB", "cdpInterfaceIfIndex"))
if mibBuilder.loadTexts: cdpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceEntry.setDescription('An entry (conceptual row) in the cdpInterfaceTable, containing the status of CDP on an interface.')
cdpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cdpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceIfIndex.setDescription('The ifIndex value of the local interface. For 802.3 Repeaters on which the repeater ports do not have ifIndex values assigned, this value is a unique value for the port, and greater than any ifIndex value supported by the repeater; in this case, the specific port is indicated by corresponding values of cdpInterfaceGroup and cdpInterfacePort, where these values correspond to the group number and port number values of RFC 1516.')
cdpInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpInterfaceEnable.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceEnable.setDescription('An indication of whether the Cisco Discovery Protocol is currently running on this interface. This variable has no effect when CDP is disabled (cdpGlobalRun = FALSE).')
cdpInterfaceMessageInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 254))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpInterfaceMessageInterval.setStatus('obsolete')
if mibBuilder.loadTexts: cdpInterfaceMessageInterval.setDescription('The interval at which CDP messages are to be generated on this interface. The default value is 60 seconds.')
cdpInterfaceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceGroup.setDescription('This object is only relevant to interfaces which are repeater ports on 802.3 repeaters. In this situation, it indicates the RFC1516 group number of the repeater port which corresponds to this interface.')
cdpInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInterfacePort.setStatus('current')
if mibBuilder.loadTexts: cdpInterfacePort.setDescription('This object is only relevant to interfaces which are repeater ports on 802.3 repeaters. In this situation, it indicates the RFC1516 port number of the repeater port which corresponds to this interface.')
cdpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInterfaceName.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceName.setDescription('The name of the local interface as advertised by CDP in the Port-ID TLV')
cdpInterfaceExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 2), )
if mibBuilder.loadTexts: cdpInterfaceExtTable.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceExtTable.setDescription("This table contains the additional CDP configuration on the device's interfaces.")
cdpInterfaceExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cdpInterfaceExtEntry.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceExtEntry.setDescription('An entry in the cdpInterfaceExtTable contains the values configured for Extented Trust TLV and COS (Class of Service) for Untrusted Ports TLV on an interface which supports the sending of these TLVs.')
cdpInterfaceExtendedTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("noTrust", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpInterfaceExtendedTrust.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceExtendedTrust.setDescription('Indicates the value to be sent by Extended Trust TLV. If trusted(1) is configured, the value of Extended Trust TLV is one byte in length with its least significant bit equal to 1 to indicate extended trust. All other bits are 0. If noTrust(2) is configured, the value of Extended Trust TLV is one byte in length with its least significant bit equal to 0 to indicate no extended trust. All other bits are 0.')
cdpInterfaceCosForUntrustedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpInterfaceCosForUntrustedPort.setStatus('current')
if mibBuilder.loadTexts: cdpInterfaceCosForUntrustedPort.setDescription('Indicates the value to be sent by COS for Untrusted Ports TLV.')
cdpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1), )
if mibBuilder.loadTexts: cdpCacheTable.setStatus('current')
if mibBuilder.loadTexts: cdpCacheTable.setDescription('The (conceptual) table containing the cached information obtained via receiving CDP messages.')
cdpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-CDP-MIB", "cdpCacheIfIndex"), (0, "CISCO-CDP-MIB", "cdpCacheDeviceIndex"))
if mibBuilder.loadTexts: cdpCacheEntry.setStatus('current')
if mibBuilder.loadTexts: cdpCacheEntry.setDescription('An entry (conceptual row) in the cdpCacheTable, containing the information received via CDP on one interface from one device. Entries appear when a CDP advertisement is received from a neighbor device. Entries disappear when CDP is disabled on the interface, or globally.')
cdpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cdpCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: cdpCacheIfIndex.setDescription('Normally, the ifIndex value of the local interface. For 802.3 Repeaters for which the repeater ports do not have ifIndex values assigned, this value is a unique value for the port, and greater than any ifIndex value supported by the repeater; the specific port number in this case, is given by the corresponding value of cdpInterfacePort.')
cdpCacheDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cdpCacheDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cdpCacheDeviceIndex.setDescription('A unique value for each device from which CDP messages are being received.')
cdpCacheAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 3), CiscoNetworkProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: cdpCacheAddressType.setDescription('An indication of the type of address contained in the corresponding instance of cdpCacheAddress.')
cdpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 4), CiscoNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheAddress.setStatus('current')
if mibBuilder.loadTexts: cdpCacheAddress.setDescription("The (first) network-layer address of the device as reported in the Address TLV of the most recently received CDP message. For example, if the corresponding instance of cacheAddressType had the value 'ip(1)', then this object would be an IPv4-address. If the neighbor device is SNMP-manageable, it is supposed to generate its CDP messages such that this address is one at which it will receive SNMP messages. Use cdpCtAddressTable to extract the remaining addresses from the Address TLV received most recently.")
cdpCacheVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheVersion.setStatus('current')
if mibBuilder.loadTexts: cdpCacheVersion.setDescription('The Version string as reported in the most recent CDP message. The zero-length string indicates no Version field (TLV) was reported in the most recent CDP message.')
cdpCacheDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheDeviceId.setStatus('current')
if mibBuilder.loadTexts: cdpCacheDeviceId.setDescription('The Device-ID string as reported in the most recent CDP message. The zero-length string indicates no Device-ID field (TLV) was reported in the most recent CDP message.')
cdpCacheDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheDevicePort.setStatus('current')
if mibBuilder.loadTexts: cdpCacheDevicePort.setDescription("The Port-ID string as reported in the most recent CDP message. This will typically be the value of the ifName object (e.g., 'Ethernet0'). The zero-length string indicates no Port-ID field (TLV) was reported in the most recent CDP message.")
cdpCachePlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCachePlatform.setStatus('current')
if mibBuilder.loadTexts: cdpCachePlatform.setDescription("The Device's Hardware Platform as reported in the most recent CDP message. The zero-length string indicates that no Platform field (TLV) was reported in the most recent CDP message.")
cdpCacheCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheCapabilities.setReference('Cisco Discovery Protocol Specification, 10/19/94.')
if mibBuilder.loadTexts: cdpCacheCapabilities.setStatus('current')
if mibBuilder.loadTexts: cdpCacheCapabilities.setDescription("The Device's Functional Capabilities as reported in the most recent CDP message. For latest set of specific values, see the latest version of the CDP specification. The zero-length string indicates no Capabilities field (TLV) was reported in the most recent CDP message.")
cdpCacheVTPMgmtDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheVTPMgmtDomain.setReference('managementDomainName in CISCO-VTP-MIB')
if mibBuilder.loadTexts: cdpCacheVTPMgmtDomain.setStatus('current')
if mibBuilder.loadTexts: cdpCacheVTPMgmtDomain.setDescription("The VTP Management Domain for the remote device's interface, as reported in the most recently received CDP message. This object is not instantiated if no VTP Management Domain field (TLV) was reported in the most recently received CDP message.")
cdpCacheNativeVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 11), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheNativeVLAN.setStatus('current')
if mibBuilder.loadTexts: cdpCacheNativeVLAN.setDescription("The remote device's interface's native VLAN, as reported in the most recent CDP message. The value 0 indicates no native VLAN field (TLV) was reported in the most recent CDP message.")
cdpCacheDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfduplex", 2), ("fullduplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheDuplex.setStatus('current')
if mibBuilder.loadTexts: cdpCacheDuplex.setDescription("The remote device's interface's duplex mode, as reported in the most recent CDP message. The value unknown(1) indicates no duplex mode field (TLV) was reported in the most recent CDP message.")
cdpCacheApplianceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheApplianceID.setStatus('current')
if mibBuilder.loadTexts: cdpCacheApplianceID.setDescription("The remote device's Appliance ID, as reported in the most recent CDP message. This object is not instantiated if no Appliance VLAN-ID field (TLV) was reported in the most recently received CDP message.")
cdpCacheVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheVlanID.setStatus('current')
if mibBuilder.loadTexts: cdpCacheVlanID.setDescription("The remote device's VoIP VLAN ID, as reported in the most recent CDP message. This object is not instantiated if no Appliance VLAN-ID field (TLV) was reported in the most recently received CDP message.")
cdpCachePowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 15), Unsigned32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCachePowerConsumption.setStatus('current')
if mibBuilder.loadTexts: cdpCachePowerConsumption.setDescription('The amount of power consumed by remote device, as reported in the most recent CDP message. This object is not instantiated if no Power Consumption field (TLV) was reported in the most recently received CDP message.')
cdpCacheMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheMTU.setStatus('current')
if mibBuilder.loadTexts: cdpCacheMTU.setDescription('Indicates the size of the largest datagram that can be sent/received by remote device, as reported in the most recent CDP message. This object is not instantiated if no MTU field (TLV) was reported in the most recently received CDP message.')
cdpCacheSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheSysName.setStatus('current')
if mibBuilder.loadTexts: cdpCacheSysName.setDescription("Indicates the value of the remote device's sysName MIB object. By convention, it is the device's fully qualified domain name. This object is not instantiated if no sysName field (TLV) was reported in the most recently received CDP message.")
cdpCacheSysObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheSysObjectID.setStatus('current')
if mibBuilder.loadTexts: cdpCacheSysObjectID.setDescription("Indicates the value of the remote device's sysObjectID MIB object. This object is not instantiated if no sysObjectID field (TLV) was reported in the most recently received CDP message.")
cdpCachePrimaryMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 19), CiscoNetworkProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCachePrimaryMgmtAddrType.setStatus('current')
if mibBuilder.loadTexts: cdpCachePrimaryMgmtAddrType.setDescription('An indication of the type of address contained in the corresponding instance of cdpCachePrimaryMgmtAddress.')
cdpCachePrimaryMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 20), CiscoNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCachePrimaryMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: cdpCachePrimaryMgmtAddr.setDescription("This object indicates the (first) network layer address at which the device will accept SNMP messages as reported in the first address in the Management-Address TLV of the most recently received CDP message. If the corresponding instance of cdpCachePrimaryMgmtAddrType has the value 'ip(1)', then this object would be an IP-address. If the remote device is not currently manageable via any network protocol, then it reports the special value of the IPv4 address 0.0.0.0, and that address is recorded in this object. If the most recently received CDP message did not contain the Management-Address TLV, then this object is not instanstiated.")
cdpCacheSecondaryMgmtAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 21), CiscoNetworkProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheSecondaryMgmtAddrType.setStatus('current')
if mibBuilder.loadTexts: cdpCacheSecondaryMgmtAddrType.setDescription('An indication of the type of address contained in the corresponding instance of cdpCacheSecondaryMgmtAddress.')
cdpCacheSecondaryMgmtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 22), CiscoNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheSecondaryMgmtAddr.setStatus('current')
if mibBuilder.loadTexts: cdpCacheSecondaryMgmtAddr.setDescription("This object indicates the alternate network layer address at which the device will accept SNMP messages as reported in the second address in the Management-Address TLV of the most recently received CDP message. If the corresponding instance of cdpCacheSecondaryMgmtAddrType has the value 'ip(1)', then this object would be an IP-address. If the remote device reports the special value of the IPv4 address 0.0.0.0, that address is recorded in this object. If the most recently received CDP message did not contain the Management-Address TLV, or if that TLV contained only one address, then this object is not instanstiated.")
cdpCachePhysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCachePhysLocation.setStatus('current')
if mibBuilder.loadTexts: cdpCachePhysLocation.setDescription("Indicates the physical location, as reported by the most recent CDP message, of a connector which is on, or physically connected to, the remote device's interface over which the CDP packet is sent. This object is not instantiated if no Physical Location field (TLV) was reported by the most recently received CDP message.")
cdpCacheLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 24), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCacheLastChange.setStatus('current')
if mibBuilder.loadTexts: cdpCacheLastChange.setDescription('Indicates the time when this cache entry was last changed. This object is initialised to the current time when the entry gets created and updated to the current time whenever the value of any (other) object instance in the corresponding row is modified.')
cdpCtAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 2), )
if mibBuilder.loadTexts: cdpCtAddressTable.setStatus('current')
if mibBuilder.loadTexts: cdpCtAddressTable.setDescription('The (conceptual) table containing the list of network-layer addresses of a neighbor interface, as reported in the Address TLV of the most recently received CDP message. The first address included in the Address TLV is saved in cdpCacheAddress. This table contains the remainder of the addresses in the Address TLV.')
cdpCtAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-CDP-MIB", "cdpCacheIfIndex"), (0, "CISCO-CDP-MIB", "cdpCacheDeviceIndex"), (0, "CISCO-CDP-MIB", "cdpCtAddressIndex"))
if mibBuilder.loadTexts: cdpCtAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cdpCtAddressEntry.setDescription('An entry (conceptual row) in the cdpCtAddressTable, containing the information on one address received via CDP on one interface from one device. Entries appear when a CDP advertisement is received from a neighbor device, with an Address TLV. Entries disappear when CDP is disabled on the interface, or globally. An entry or entries would also disappear if the most recently received CDP packet contain fewer address entries in the Address TLV, than are currently present in the CDP cache.')
cdpCtAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cdpCtAddressIndex.setStatus('current')
if mibBuilder.loadTexts: cdpCtAddressIndex.setDescription('The index of the address entry for a given cdpCacheIfIndex,cdpCacheDeviceIndex pair. It has the value N-1 for the N-th address in the Address TLV')
cdpCtAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 2, 1, 4), CiscoNetworkProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCtAddressType.setStatus('current')
if mibBuilder.loadTexts: cdpCtAddressType.setDescription('An indication of the type of address contained in the corresponding instance of cdpCtAddress.')
cdpCtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 2, 1, 5), CiscoNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpCtAddress.setStatus('current')
if mibBuilder.loadTexts: cdpCtAddress.setDescription("The N-th network-layer address of the device as reported in the most recent CDP message's Address TLV, where N-1 is given by the value of cdpCtAddressIndex. For example, if the the corresponding instance of cdpCtAddressType had the value 'ip(1)', then this object would be an IPv4-address. NOTE - The 1st address received in the Address TLV is available using cdpCacheAddress")
cdpGlobalRun = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpGlobalRun.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalRun.setDescription('An indication of whether the Cisco Discovery Protocol is currently running. Entries in cdpCacheTable are deleted when CDP is disabled.')
cdpGlobalMessageInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 254)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpGlobalMessageInterval.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalMessageInterval.setDescription('The interval at which CDP messages are to be generated. The default value is 60 seconds.')
cdpGlobalHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpGlobalHoldTime.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalHoldTime.setDescription('The time for the receiving device holds CDP message. The default value is 180 seconds.')
cdpGlobalDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpGlobalDeviceId.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalDeviceId.setDescription('The device ID advertised by this device. The format of this device id is characterized by the value of cdpGlobalDeviceIdFormat object.')
cdpGlobalLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpGlobalLastChange.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalLastChange.setDescription('Indicates the time when the cache table was last changed. It is the most recent time at which any row was last created, modified or deleted.')
cdpGlobalDeviceIdFormatCpb = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 6), Bits().clone(namedValues=NamedValues(("serialNumber", 0), ("macAddress", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpGlobalDeviceIdFormatCpb.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalDeviceIdFormatCpb.setDescription('Indicate the Device-Id format capability of the device. serialNumber(0) indicates that the device supports using serial number as the format for its DeviceId. macAddress(1) indicates that the device supports using layer 2 MAC address as the format for its DeviceId. other(2) indicates that the device supports using its platform specific format as the format for its DeviceId.')
cdpGlobalDeviceIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("serialNumber", 1), ("macAddress", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpGlobalDeviceIdFormat.setStatus('current')
if mibBuilder.loadTexts: cdpGlobalDeviceIdFormat.setDescription('An indication of the format of Device-Id contained in the corresponding instance of cdpGlobalDeviceId. User can only specify the formats that the device is capable of as denoted in cdpGlobalDeviceIdFormatCpb object. serialNumber(1) indicates that the value of cdpGlobalDeviceId object is in the form of an ASCII string contain the device serial number. macAddress(2) indicates that the value of cdpGlobalDeviceId object is in the form of Layer 2 MAC address. other(3) indicates that the value of cdpGlobalDeviceId object is in the form of a platform specific ASCII string contain info that identifies the device. For example: ASCII string contains serialNumber appended/prepened with system name.')
ciscoCdpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 2))
ciscoCdpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1))
ciscoCdpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2))
ciscoCdpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1, 1)).setObjects(("CISCO-CDP-MIB", "ciscoCdpMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBCompliance = ciscoCdpMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBCompliance.setDescription('The compliance statement for the CDP MIB.')
ciscoCdpMIBComplianceV11R01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1, 2)).setObjects(("CISCO-CDP-MIB", "ciscoCdpMIBGroupV11R01"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBComplianceV11R01 = ciscoCdpMIBComplianceV11R01.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBComplianceV11R01.setDescription('The compliance statement for the CDP MIB.')
ciscoCdpMIBComplianceV11R02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1, 3)).setObjects(("CISCO-CDP-MIB", "ciscoCdpMIBGroupV11R02"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBComplianceV11R02 = ciscoCdpMIBComplianceV11R02.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBComplianceV11R02.setDescription('The compliance statement for the CDP MIB.')
ciscoCdpMIBComplianceV12R02 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1, 4)).setObjects(("CISCO-CDP-MIB", "ciscoCdpMIBGroupV12R02"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBComplianceV12R02 = ciscoCdpMIBComplianceV12R02.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBComplianceV12R02.setDescription('The compliance statement for the CDP MIB.')
ciscoCdpMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1, 5)).setObjects(("CISCO-CDP-MIB", "ciscoCdpMIBGroupV12R02"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBCompliance5 = ciscoCdpMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdpMIBCompliance5.setDescription('The compliance statement for the CDP MIB.')
ciscoCdpMIBComplianceV12R03 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 1, 6)).setObjects(("CISCO-CDP-MIB", "ciscoCdpMIBGroupV12R03"), ("CISCO-CDP-MIB", "ciscoCdpCtAddressGroup"), ("CISCO-CDP-MIB", "ciscoCdpV2MIBGroup"), ("CISCO-CDP-MIB", "ciscoCdpV2IfExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBComplianceV12R03 = ciscoCdpMIBComplianceV12R03.setStatus('current')
if mibBuilder.loadTexts: ciscoCdpMIBComplianceV12R03.setDescription('The compliance statement for the CDP MIB.')
ciscoCdpMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 1)).setObjects(("CISCO-CDP-MIB", "cdpInterfaceEnable"), ("CISCO-CDP-MIB", "cdpInterfaceMessageInterval"), ("CISCO-CDP-MIB", "cdpCacheAddressType"), ("CISCO-CDP-MIB", "cdpCacheAddress"), ("CISCO-CDP-MIB", "cdpCacheVersion"), ("CISCO-CDP-MIB", "cdpCacheDeviceId"), ("CISCO-CDP-MIB", "cdpCacheDevicePort"), ("CISCO-CDP-MIB", "cdpCacheCapabilities"), ("CISCO-CDP-MIB", "cdpCachePlatform"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBGroup = ciscoCdpMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBGroup.setDescription('A collection of objects for use with the Cisco Discovery Protocol.')
ciscoCdpMIBGroupV11R01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 2)).setObjects(("CISCO-CDP-MIB", "cdpInterfaceEnable"), ("CISCO-CDP-MIB", "cdpInterfaceMessageInterval"), ("CISCO-CDP-MIB", "cdpInterfaceGroup"), ("CISCO-CDP-MIB", "cdpInterfacePort"), ("CISCO-CDP-MIB", "cdpCacheAddressType"), ("CISCO-CDP-MIB", "cdpCacheAddress"), ("CISCO-CDP-MIB", "cdpCacheVersion"), ("CISCO-CDP-MIB", "cdpCacheDeviceId"), ("CISCO-CDP-MIB", "cdpCacheDevicePort"), ("CISCO-CDP-MIB", "cdpCacheCapabilities"), ("CISCO-CDP-MIB", "cdpCachePlatform"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBGroupV11R01 = ciscoCdpMIBGroupV11R01.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBGroupV11R01.setDescription('A collection of objects for use with the Cisco Discovery Protocol.')
ciscoCdpMIBGroupV11R02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 3)).setObjects(("CISCO-CDP-MIB", "cdpInterfaceEnable"), ("CISCO-CDP-MIB", "cdpInterfaceGroup"), ("CISCO-CDP-MIB", "cdpInterfacePort"), ("CISCO-CDP-MIB", "cdpCacheAddressType"), ("CISCO-CDP-MIB", "cdpCacheAddress"), ("CISCO-CDP-MIB", "cdpCacheVersion"), ("CISCO-CDP-MIB", "cdpCacheDeviceId"), ("CISCO-CDP-MIB", "cdpCacheDevicePort"), ("CISCO-CDP-MIB", "cdpCacheCapabilities"), ("CISCO-CDP-MIB", "cdpCachePlatform"), ("CISCO-CDP-MIB", "cdpGlobalRun"), ("CISCO-CDP-MIB", "cdpGlobalMessageInterval"), ("CISCO-CDP-MIB", "cdpGlobalHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBGroupV11R02 = ciscoCdpMIBGroupV11R02.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoCdpMIBGroupV11R02.setDescription('A collection of objects for use with the Cisco Discovery Protocol.')
ciscoCdpMIBGroupV12R02 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 5)).setObjects(("CISCO-CDP-MIB", "cdpInterfaceEnable"), ("CISCO-CDP-MIB", "cdpInterfaceGroup"), ("CISCO-CDP-MIB", "cdpInterfacePort"), ("CISCO-CDP-MIB", "cdpCacheAddressType"), ("CISCO-CDP-MIB", "cdpCacheAddress"), ("CISCO-CDP-MIB", "cdpCacheVersion"), ("CISCO-CDP-MIB", "cdpCacheDeviceId"), ("CISCO-CDP-MIB", "cdpCacheDevicePort"), ("CISCO-CDP-MIB", "cdpCacheCapabilities"), ("CISCO-CDP-MIB", "cdpCachePlatform"), ("CISCO-CDP-MIB", "cdpCacheVTPMgmtDomain"), ("CISCO-CDP-MIB", "cdpCacheNativeVLAN"), ("CISCO-CDP-MIB", "cdpCacheDuplex"), ("CISCO-CDP-MIB", "cdpGlobalRun"), ("CISCO-CDP-MIB", "cdpGlobalMessageInterval"), ("CISCO-CDP-MIB", "cdpGlobalHoldTime"), ("CISCO-CDP-MIB", "cdpGlobalDeviceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBGroupV12R02 = ciscoCdpMIBGroupV12R02.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoCdpMIBGroupV12R02.setDescription('A collection of objects for use with the Cisco Discovery Protocol.')
ciscoCdpV2MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 6)).setObjects(("CISCO-CDP-MIB", "cdpCacheApplianceID"), ("CISCO-CDP-MIB", "cdpCacheVlanID"), ("CISCO-CDP-MIB", "cdpCachePowerConsumption"), ("CISCO-CDP-MIB", "cdpCacheMTU"), ("CISCO-CDP-MIB", "cdpCacheSysName"), ("CISCO-CDP-MIB", "cdpCacheSysObjectID"), ("CISCO-CDP-MIB", "cdpCacheLastChange"), ("CISCO-CDP-MIB", "cdpCachePhysLocation"), ("CISCO-CDP-MIB", "cdpCachePrimaryMgmtAddrType"), ("CISCO-CDP-MIB", "cdpCachePrimaryMgmtAddr"), ("CISCO-CDP-MIB", "cdpCacheSecondaryMgmtAddrType"), ("CISCO-CDP-MIB", "cdpCacheSecondaryMgmtAddr"), ("CISCO-CDP-MIB", "cdpGlobalLastChange"), ("CISCO-CDP-MIB", "cdpGlobalDeviceIdFormatCpb"), ("CISCO-CDP-MIB", "cdpGlobalDeviceIdFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpV2MIBGroup = ciscoCdpV2MIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdpV2MIBGroup.setDescription('A collection of objects for use with the Cisco Discovery Protocol version 2.')
ciscoCdpV2IfExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 7)).setObjects(("CISCO-CDP-MIB", "cdpInterfaceExtendedTrust"), ("CISCO-CDP-MIB", "cdpInterfaceCosForUntrustedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpV2IfExtGroup = ciscoCdpV2IfExtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdpV2IfExtGroup.setDescription('A collection of objects for use with the Cisco Discovery Protocol version 2 to configure the value for Extended Trust TLV and COS for Untrusted Port TLV.')
ciscoCdpCtAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 8)).setObjects(("CISCO-CDP-MIB", "cdpCtAddressType"), ("CISCO-CDP-MIB", "cdpCtAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpCtAddressGroup = ciscoCdpCtAddressGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoCdpCtAddressGroup.setDescription('A collection of objects for use with the Cisco Discovery Protocol to obtain the addresses from the Address TLV of a received CDP packet.')
ciscoCdpMIBGroupV12R03 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 23, 2, 2, 9)).setObjects(("CISCO-CDP-MIB", "cdpInterfaceEnable"), ("CISCO-CDP-MIB", "cdpInterfaceGroup"), ("CISCO-CDP-MIB", "cdpInterfacePort"), ("CISCO-CDP-MIB", "cdpInterfaceName"), ("CISCO-CDP-MIB", "cdpCacheAddressType"), ("CISCO-CDP-MIB", "cdpCacheAddress"), ("CISCO-CDP-MIB", "cdpCacheVersion"), ("CISCO-CDP-MIB", "cdpCacheDeviceId"), ("CISCO-CDP-MIB", "cdpCacheDevicePort"), ("CISCO-CDP-MIB", "cdpCacheCapabilities"), ("CISCO-CDP-MIB", "cdpCachePlatform"), ("CISCO-CDP-MIB", "cdpCacheVTPMgmtDomain"), ("CISCO-CDP-MIB", "cdpCacheNativeVLAN"), ("CISCO-CDP-MIB", "cdpCacheDuplex"), ("CISCO-CDP-MIB", "cdpGlobalRun"), ("CISCO-CDP-MIB", "cdpGlobalMessageInterval"), ("CISCO-CDP-MIB", "cdpGlobalHoldTime"), ("CISCO-CDP-MIB", "cdpGlobalDeviceId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoCdpMIBGroupV12R03 = ciscoCdpMIBGroupV12R03.setStatus('current')
if mibBuilder.loadTexts: ciscoCdpMIBGroupV12R03.setDescription('A collection of objects for use with the Cisco Discovery Protocol.')
mibBuilder.exportSymbols("CISCO-CDP-MIB", cdpCacheDeviceId=cdpCacheDeviceId, cdpInterfaceEntry=cdpInterfaceEntry, ciscoCdpMIBGroups=ciscoCdpMIBGroups, ciscoCdpMIBGroupV11R02=ciscoCdpMIBGroupV11R02, ciscoCdpCtAddressGroup=ciscoCdpCtAddressGroup, cdpCacheAddressType=cdpCacheAddressType, cdpCacheVlanID=cdpCacheVlanID, cdpInterfaceExtEntry=cdpInterfaceExtEntry, cdpCacheTable=cdpCacheTable, cdpGlobalDeviceIdFormatCpb=cdpGlobalDeviceIdFormatCpb, ciscoCdpMIBComplianceV11R02=ciscoCdpMIBComplianceV11R02, cdpInterfaceEnable=cdpInterfaceEnable, cdpInterfaceExtendedTrust=cdpInterfaceExtendedTrust, cdpInterfaceExtTable=cdpInterfaceExtTable, cdpCacheDuplex=cdpCacheDuplex, ciscoCdpMIBComplianceV11R01=ciscoCdpMIBComplianceV11R01, ciscoCdpMIBComplianceV12R02=ciscoCdpMIBComplianceV12R02, cdpInterfaceGroup=cdpInterfaceGroup, cdpCtAddressTable=cdpCtAddressTable, ciscoCdpMIBCompliance=ciscoCdpMIBCompliance, cdpCachePrimaryMgmtAddr=cdpCachePrimaryMgmtAddr, ciscoCdpMIBComplianceV12R03=ciscoCdpMIBComplianceV12R03, cdpCacheVersion=cdpCacheVersion, cdpCacheVTPMgmtDomain=cdpCacheVTPMgmtDomain, cdpCacheAddress=cdpCacheAddress, cdpGlobalMessageInterval=cdpGlobalMessageInterval, cdpCacheNativeVLAN=cdpCacheNativeVLAN, cdpCacheSysObjectID=cdpCacheSysObjectID, ciscoCdpMIBConformance=ciscoCdpMIBConformance, ciscoCdpMIBCompliance5=ciscoCdpMIBCompliance5, cdpCacheIfIndex=cdpCacheIfIndex, cdpInterfaceCosForUntrustedPort=cdpInterfaceCosForUntrustedPort, cdpInterface=cdpInterface, cdpCtAddressEntry=cdpCtAddressEntry, ciscoCdpMIBObjects=ciscoCdpMIBObjects, cdpInterfaceTable=cdpInterfaceTable, cdpInterfaceMessageInterval=cdpInterfaceMessageInterval, cdpInterfacePort=cdpInterfacePort, cdpCachePowerConsumption=cdpCachePowerConsumption, cdpCacheMTU=cdpCacheMTU, ciscoCdpMIBGroup=ciscoCdpMIBGroup, ciscoCdpMIBGroupV12R03=ciscoCdpMIBGroupV12R03, cdpCachePhysLocation=cdpCachePhysLocation, cdpCacheEntry=cdpCacheEntry, cdpGlobal=cdpGlobal, cdpCacheCapabilities=cdpCacheCapabilities, ciscoCdpV2MIBGroup=ciscoCdpV2MIBGroup, cdpCacheDevicePort=cdpCacheDevicePort, ciscoCdpMIBGroupV12R02=ciscoCdpMIBGroupV12R02, cdpGlobalDeviceIdFormat=cdpGlobalDeviceIdFormat, ciscoCdpMIBGroupV11R01=ciscoCdpMIBGroupV11R01, cdpCtAddressIndex=cdpCtAddressIndex, cdpCacheSecondaryMgmtAddr=cdpCacheSecondaryMgmtAddr, ciscoCdpMIBCompliances=ciscoCdpMIBCompliances, ciscoCdpMIB=ciscoCdpMIB, cdpCacheSecondaryMgmtAddrType=cdpCacheSecondaryMgmtAddrType, cdpCtAddress=cdpCtAddress, cdpGlobalLastChange=cdpGlobalLastChange, cdpCachePrimaryMgmtAddrType=cdpCachePrimaryMgmtAddrType, PYSNMP_MODULE_ID=ciscoCdpMIB, cdpCache=cdpCache, ciscoCdpV2IfExtGroup=ciscoCdpV2IfExtGroup, cdpCacheDeviceIndex=cdpCacheDeviceIndex, cdpGlobalHoldTime=cdpGlobalHoldTime, cdpCacheApplianceID=cdpCacheApplianceID, cdpCtAddressType=cdpCtAddressType, cdpCacheSysName=cdpCacheSysName, cdpGlobalRun=cdpGlobalRun, cdpGlobalDeviceId=cdpGlobalDeviceId, cdpInterfaceIfIndex=cdpInterfaceIfIndex, cdpInterfaceName=cdpInterfaceName, cdpCacheLastChange=cdpCacheLastChange, cdpCachePlatform=cdpCachePlatform)
