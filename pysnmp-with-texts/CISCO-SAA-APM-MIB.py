#
# PySNMP MIB module CISCO-SAA-APM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SAA-APM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
OwnerString, = mibBuilder.importSymbols("IF-MIB", "OwnerString")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Gauge32, iso, ModuleIdentity, IpAddress, Integer32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Counter64, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "iso", "ModuleIdentity", "IpAddress", "Integer32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Counter64", "Unsigned32", "TimeTicks")
TruthValue, RowStatus, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention", "TimeStamp")
ciscoSaaApmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 177))
ciscoSaaApmMIB.setRevisions(('2000-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSaaApmMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSaaApmMIB.setLastUpdated('200010100000Z')
if mibBuilder.loadTexts: ciscoSaaApmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSaaApmMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-saa@cisco.com')
if mibBuilder.loadTexts: ciscoSaaApmMIB.setDescription("Acronyms and Terms: SAA - Service Assurance Agent APM - Application Performance Monitoring A MIB for controlling SAA APM. APM provides a framework for running scripts, written in TCL language, which help emulate the data flows of an application. Through this emulation, the performance of an application across a network can be computed. The parameters required to perform an operation are defined in a 'config file' as defined by saaApmCtrlScriptCfgURL. This MIB has three OBJECT group. 'saaApmAppl' group contains global objects while 'saaApmCtrl' group contains the objects to control the APM operation. Controlling includes creation and deletion of the operation and initiating a result-transfer for the operation. 'saaApmOper' group contains objects to get the statistics of the operation.")
class SaaApmOperErrorCode(TextualConvention, Integer32):
    description = "Represents the various errors that could occur during APM operation. noError(1) - There are no errors. ftpDnldErr(2) - ftp download error while downloading the script/data/config file. targetDown(3) - Target device is down. scriptErr(4) - The Script has syntax or other errors. socketErr(5) - Socket error occurred while executing the application script. internalErr(6) - Errors other than described here. digestErr(7) - This error indicates that the authentication digest is invalid. fileHeaderErr(8) - The header length for the script/scheduler file doesn't match the requirements. fileFormatErr(9) - It indicates an invalid file format. cacheFull(10) - Cache for storing the script/scheduler/data file is full. lowMem(11) - Free memory is less than saaApmApplFreeMemLowWaterMark."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("noError", 1), ("ftpDnldErr", 2), ("targetDown", 3), ("scriptErr", 4), ("socketErr", 5), ("internalErr", 6), ("digestErr", 7), ("fileHeaderErr", 8), ("fileFormatErr", 9), ("cacheFull", 10), ("lowMem", 11))

class SaaApmDataTransErrorCode(TextualConvention, Integer32):
    description = 'Represents the various error code for APM data transfer. noError(1) - No Error. ftpErr(2) - FTP error while uploading results. timeoutErr(3) - Time out error while uploading results.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noError", 1), ("ftpErr", 2), ("timeoutErr", 3))

ciscoSaaApmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 1))
saaApmAppl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 1))
saaApmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2))
saaApmOper = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 3))
saaApmApplMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmApplMajorVersion.setStatus('current')
if mibBuilder.loadTexts: saaApmApplMajorVersion.setDescription('SAA APM application major version.')
saaApmApplMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmApplMinorVersion.setStatus('current')
if mibBuilder.loadTexts: saaApmApplMinorVersion.setDescription('SAA APM application minor version.')
saaApmApplMaxOper = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmApplMaxOper.setStatus('current')
if mibBuilder.loadTexts: saaApmApplMaxOper.setDescription('This object defines the maximum total number of operations that can be configured.')
saaApmApplFreeMemLowWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saaApmApplFreeMemLowWaterMark.setStatus('current')
if mibBuilder.loadTexts: saaApmApplFreeMemLowWaterMark.setDescription("If APM determines that the available free processor memory has fallen below this mark, new operations will not be configurable until the amount of available free memory is greater than this mark. Available free memory is indicated by the object, ciscoMemoryPoolFree. This object's value should not be set so high as to approach or exceed the free processor memory available on the managed device.")
saaApmApplOperCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmApplOperCapacity.setStatus('current')
if mibBuilder.loadTexts: saaApmApplOperCapacity.setDescription('This object defines the number of new operations that can be configured on the device. The number is obtain by dividing the memory available for APM by the average memory used for each APM operation. The available memory for APM is computed by taking the difference between Free Memory on the device and saaApmApplFreeMemLowWaterMark. If the current number of operation configured is equal to saaApmApplMaxOper then saaApmApplOperCapacity is zero.')
saaApmCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1), )
if mibBuilder.loadTexts: saaApmCtrlTable.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlTable.setDescription('A set of parameters to create, control and destroy an APM Operation.')
saaApmCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SAA-APM-MIB", "saaApmCtrlIndex"))
if mibBuilder.loadTexts: saaApmCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlEntry.setDescription('Parameters for controlling APM operation.')
saaApmCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: saaApmCtrlIndex.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlIndex.setDescription("This object uniquely identifies a row int the saaApmCtrlTable. This is a pseudo-random number selected by the management station when creating a row via the saaApmCtrlStatus object. If the pseudo-random number is already in use, an 'inconsistentValue' error will be returned by the agent.")
saaApmCtrlScriptCfgURL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saaApmCtrlScriptCfgURL.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlScriptCfgURL.setDescription("This URL defines the location of the config file required to measure the performance of the application. It also defines which protocol should be used in downloading the file. For example ftp://joe:mybirthday@myhost/smtp/smtp.cfg The config file contains the parameters required to start and run the operation. Operation/Results control variables, the URL's of the scheduler, and script/data scriptfiles are all possible parameters contained in the config file.")
saaApmCtrlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 3), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saaApmCtrlOwner.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlOwner.setDescription('Identifies the entity that created this table row.')
saaApmCtrlInitDataTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saaApmCtrlInitDataTrans.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlInitDataTrans.setDescription("This object is set to TRUE to initiate result transfer. Results are transferred to a server specified in the control file. It is set back automatically to 'false' by this system once the results are transferred.")
saaApmCtrlDataTransTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmCtrlDataTransTime.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlDataTransTime.setDescription('This object indicates the time of the last result transfer attempt.')
saaApmCtrlDataTransStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 6), SaaApmDataTransErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmCtrlDataTransStatus.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlDataTransStatus.setDescription('This object indicates the status of the result transfer.')
saaApmCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saaApmCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlStatus.setDescription("saaApmControlScriptCfgURL is the only required object for this row to become 'active'. APM operations are created in one of two ways: 1) By setting this object to 'createAndGo' and supplying a values for saaApmControlScriptCfgURL as part of the same set operation. 2) By setting this object to 'createAndWait' and then supplying a value for saaApmControlScriptCfgURL via a different set operation. In the 'createAndGo' case, the row will transition to 'active' and the APM operation will start. In the 'createAndWait' case, a subsequent set operation will be required to transition the row to 'active' and start the APM operation. The APM operation cannot start until saaApmScriptCfgURL is set. Until the required object is set, the row will be 'notReady'. The APM operation can be started by setting this object to 'active'. The APM operation can be stopped by setting this object to 'notInService'. The APM operation can be deleted by setting this object to 'destroy'. saaApmCtrlStatus transitions from 'active' to 'notInService' if the saaApmOperLastStatus is changed to any error other than 'noError' and 'socketErr'.")
saaApmCtrlNvgen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saaApmCtrlNvgen.setStatus('current')
if mibBuilder.loadTexts: saaApmCtrlNvgen.setDescription("This object is to allow or disallow the operation control info from being written to running-config. It cannot be set once the operation is 'active'.")
saaApmOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 3, 1), )
if mibBuilder.loadTexts: saaApmOperTable.setStatus('current')
if mibBuilder.loadTexts: saaApmOperTable.setDescription('A list of Operational status for monitoring APM Operations. All the object in this table are updated after the completion of performance measurement cycle.')
saaApmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 3, 1, 1), )
saaApmCtrlEntry.registerAugmentions(("CISCO-SAA-APM-MIB", "saaApmOperEntry"))
saaApmOperEntry.setIndexNames(*saaApmCtrlEntry.getIndexNames())
if mibBuilder.loadTexts: saaApmOperEntry.setStatus('current')
if mibBuilder.loadTexts: saaApmOperEntry.setDescription('An entry containing the status information applicable to a particular APM operation.')
saaApmOperLastStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 3, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmOperLastStartTime.setStatus('current')
if mibBuilder.loadTexts: saaApmOperLastStartTime.setDescription('This object represents the start time of the last performance measurement cycle for the application specified by saaApmCtrlScriptCfgURL object.')
saaApmOperLastEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 3, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmOperLastEndTime.setStatus('current')
if mibBuilder.loadTexts: saaApmOperLastEndTime.setDescription('This object represents the end time of the last performance measurement cycle for the application specified by saaApmCtrlScriptCfgURL object.')
saaApmOperLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 177, 1, 3, 1, 1, 3), SaaApmOperErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saaApmOperLastStatus.setStatus('current')
if mibBuilder.loadTexts: saaApmOperLastStatus.setDescription('This object is used to indicate status of the last measurement cycle.')
ciscoSaaApmMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 2))
ciscoSaaApmMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 2, 0))
ciscoSaaApmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 3))
ciscoSaaApmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 3, 1))
ciscoSaaApmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 177, 3, 2))
ciscoSaaApmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 177, 3, 1, 1)).setObjects(("CISCO-SAA-APM-MIB", "ciscoSaaApmApplGroup"), ("CISCO-SAA-APM-MIB", "ciscoSaaApmCtrlGroup"), ("CISCO-SAA-APM-MIB", "ciscoSaaApmOperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSaaApmMIBCompliance = ciscoSaaApmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSaaApmMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco SAA APM MIB.')
ciscoSaaApmApplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 177, 3, 2, 1)).setObjects(("CISCO-SAA-APM-MIB", "saaApmApplMajorVersion"), ("CISCO-SAA-APM-MIB", "saaApmApplMinorVersion"), ("CISCO-SAA-APM-MIB", "saaApmApplMaxOper"), ("CISCO-SAA-APM-MIB", "saaApmApplFreeMemLowWaterMark"), ("CISCO-SAA-APM-MIB", "saaApmApplOperCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSaaApmApplGroup = ciscoSaaApmApplGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSaaApmApplGroup.setDescription('A collection of objects to provide the general information of SAA APM management.')
ciscoSaaApmCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 177, 3, 2, 2)).setObjects(("CISCO-SAA-APM-MIB", "saaApmCtrlScriptCfgURL"), ("CISCO-SAA-APM-MIB", "saaApmCtrlOwner"), ("CISCO-SAA-APM-MIB", "saaApmCtrlInitDataTrans"), ("CISCO-SAA-APM-MIB", "saaApmCtrlDataTransTime"), ("CISCO-SAA-APM-MIB", "saaApmCtrlDataTransStatus"), ("CISCO-SAA-APM-MIB", "saaApmCtrlStatus"), ("CISCO-SAA-APM-MIB", "saaApmCtrlNvgen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSaaApmCtrlGroup = ciscoSaaApmCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSaaApmCtrlGroup.setDescription('A collection of objects to control the APM Operations.')
ciscoSaaApmOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 177, 3, 2, 3)).setObjects(("CISCO-SAA-APM-MIB", "saaApmOperLastStartTime"), ("CISCO-SAA-APM-MIB", "saaApmOperLastEndTime"), ("CISCO-SAA-APM-MIB", "saaApmOperLastStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSaaApmOperGroup = ciscoSaaApmOperGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSaaApmOperGroup.setDescription('A collection of objects to provide the operational status of APM Operations.')
mibBuilder.exportSymbols("CISCO-SAA-APM-MIB", ciscoSaaApmMIBCompliance=ciscoSaaApmMIBCompliance, ciscoSaaApmMIBConformance=ciscoSaaApmMIBConformance, saaApmCtrl=saaApmCtrl, saaApmCtrlIndex=saaApmCtrlIndex, ciscoSaaApmOperGroup=ciscoSaaApmOperGroup, ciscoSaaApmMIBCompliances=ciscoSaaApmMIBCompliances, ciscoSaaApmMIBGroups=ciscoSaaApmMIBGroups, saaApmCtrlDataTransStatus=saaApmCtrlDataTransStatus, saaApmCtrlScriptCfgURL=saaApmCtrlScriptCfgURL, saaApmAppl=saaApmAppl, saaApmApplFreeMemLowWaterMark=saaApmApplFreeMemLowWaterMark, ciscoSaaApmMIBObjects=ciscoSaaApmMIBObjects, ciscoSaaApmCtrlGroup=ciscoSaaApmCtrlGroup, saaApmApplMaxOper=saaApmApplMaxOper, saaApmOperLastEndTime=saaApmOperLastEndTime, saaApmCtrlEntry=saaApmCtrlEntry, saaApmApplMinorVersion=saaApmApplMinorVersion, saaApmOperEntry=saaApmOperEntry, ciscoSaaApmMIB=ciscoSaaApmMIB, saaApmCtrlOwner=saaApmCtrlOwner, saaApmOper=saaApmOper, saaApmApplMajorVersion=saaApmApplMajorVersion, saaApmApplOperCapacity=saaApmApplOperCapacity, saaApmCtrlNvgen=saaApmCtrlNvgen, ciscoSaaApmMIBNotifs=ciscoSaaApmMIBNotifs, saaApmCtrlStatus=saaApmCtrlStatus, saaApmOperLastStartTime=saaApmOperLastStartTime, saaApmCtrlTable=saaApmCtrlTable, saaApmCtrlInitDataTrans=saaApmCtrlInitDataTrans, PYSNMP_MODULE_ID=ciscoSaaApmMIB, saaApmOperLastStatus=saaApmOperLastStatus, saaApmOperTable=saaApmOperTable, SaaApmOperErrorCode=SaaApmOperErrorCode, saaApmCtrlDataTransTime=saaApmCtrlDataTransTime, ciscoSaaApmMIBNotifPrefix=ciscoSaaApmMIBNotifPrefix, SaaApmDataTransErrorCode=SaaApmDataTransErrorCode, ciscoSaaApmApplGroup=ciscoSaaApmApplGroup)
