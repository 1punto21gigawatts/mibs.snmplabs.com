#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMDSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMDSU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Unsigned32, iso, Counter32, ModuleIdentity, MibIdentifier, TimeTicks, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "iso", "Counter32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ncm_dds, ncm_dsu, ncm_dbu = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-dds", "ncm-dsu", "ncm-dbu")
ncmdsuCommonTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000), )
if mibBuilder.loadTexts: ncmdsuCommonTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuCommonTable.setDescription('The ncmdsu information table.')
ncmdsuCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuIndex"))
if mibBuilder.loadTexts: ncmdsuCommonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuCommonEntry.setDescription('An entry in the ncmdsu information table.')
ncmdsuNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuNIDIndex.setStatus('mandatory')
ncmdsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuIndex.setStatus('mandatory')
ncmdsuPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("v35", 2), ("rs-449", 3), ("eia530", 4), ("rS-232", 5), ("wrong-DIM", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortType.setStatus('mandatory')
ncmdsuPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 1), ("inband-loop", 2), ("local-loop", 3), ("sending-loop-up", 4), ("sending-loop-down", 5), ("verilink-loop-up", 6), ("verilink-loop-down", 7), ("local-loop-up", 8), ("local-loop-down", 9), ("v54-loop-up", 10), ("v54-loop-down", 11), ("dds-latching-loop-up", 12), ("dds-latching-loop-down", 13), ("dds-nonlatching-loop-up", 14), ("dds-nonlatching-loop-down", 15), ("ft1-loop-up", 16), ("ft1-loop-down", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortLoopback.setStatus('mandatory')
ncmdsuPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-test", 1), ("start-test", 2), ("run-ber-test", 3), ("stop-ber-test", 4), ("test-511", 5), ("test-2047", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortTest.setStatus('mandatory')
ncmdsuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001), )
if mibBuilder.loadTexts: ncmdsuConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuConfigTable.setDescription('The ncmdsu Configuration table.')
ncmdsuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuLineIndex"))
if mibBuilder.loadTexts: ncmdsuConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuConfigEntry.setDescription('An entry in the ncmdsu Configuration table.')
ncmdsuNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuNIDConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuNIDConfigIndex.setDescription('This variable indicates the node id value of the node.')
ncmdsuLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuLineIndex.setStatus('mandatory')
ncmdsubus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("busA", 2), ("busB", 3), ("busC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsubus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsubus.setDescription('The ncmdsu bus type for Port.')
ncmdsuPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortChannel.setDescription('This variable indicates the channel assignment for the ncmdsu for the port.')
ncmdsuPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuPortConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortConfiguration.setDescription('This variable indicates the configuration bits for port. The configuration can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the ncmdsu port configuration to zero 0 1 64k set uses 8bits of data/64kbps. 1 2 LEN set enable loop code and loop commands 2 4 INV set invert the channelized data 3 8 SCR set to scramble channelized data. 4 16 CLK1 DTE transmit clock select bits 5 32 CLK2 DTE transmit clock select bits 6 64 TU set port as a timing unit 7 128 ALM set if DIU has to report alarms to SAM.')
ncmcsushelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsushelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsushelf.setDescription('This variable indicates the csu shelf associated with the ncmdsu port.')
ncmcsuslot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmcsuslot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmcsuslot.setDescription('This variable indicates the csu slot associated with the ncmdsu port.')
ncmdsuAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nO", 1), ("yES", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuAlarmEnable.setDescription('This variable indicates whether the alarm is enabled or disabled for ncmdsu.')
ncmdsuLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuLosLead.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuLosLead.setDescription('This variable indicates the DTE lead bits for port. The DTE leads can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the ncmdsu port configuration to zero 0 1 DTR set uses DTR 1 2 RTS set uses RTS 2 4 DSR set uses DSR 3 8 CTS set uses CTS 4 16 DCD set uses DCD 5 32 LOS use both bits: bits set to use for alarm 6 64 LOS 0 = Disable LOS detect, 1=use RTS , 2 = DTR 7 128 DDSMode set for 56k DDS .')
ncmdsuTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("port1", 2), ("port2", 3), ("cSU", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuTimingSource.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuTimingSource.setDescription('This variable indicates the T1 timing source for ncmdsu.')
ncmdsuDTESpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("mode-64k", 2), ("mode-56k", 3), ("mode-38-4", 4), ("mode-19-2", 5), ("mode-9-6", 6), ("mode-4-8", 7), ("mode-2-4", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdsuDTESpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuDTESpeed.setDescription('This variable indicates DTE Speed control and speeds 38.4k or below holds good for the DIU2131 card type.')
ncmdsustatTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003), )
if mibBuilder.loadTexts: ncmdsustatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsustatTable.setDescription('The ncm dsu stat table.')
ncmdsustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsuNIDstatIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdsustatIndex"))
if mibBuilder.loadTexts: ncmdsustatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsustatEntry.setDescription('An entry in the ncm dsu stat table.')
ncmdsuNIDstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuNIDstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuNIDstatIndex.setDescription('This object specifies the node id of the node.')
ncmdsustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsustatIndex.setStatus('mandatory')
ncmdsuPortLowbattery = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-low-battery", 1), ("low-battery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLowbattery.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortLowbattery.setDescription('The ncmdsu Lowbattery status for Port.')
ncmdsuPortLOSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-Los-status", 1), ("los-status", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLOSstatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortLOSstatus.setDescription('The ncmdsu LOS status for Port.')
ncmdsuPortblockerrorcounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortblockerrorcounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortblockerrorcounter.setDescription('The number of block errors produced on port.')
ncmdsuPortTestSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortTestSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortTestSeconds.setDescription('The number of errors produced by a test on port.')
ncmdsuPortrateper8000 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortrateper8000.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortrateper8000.setDescription('The rate/8000 on port.')
ncmdsuPortLeadStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLeadStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortLeadStatus1.setDescription('This variable indicates the Lead Status (part 1) of the port. The various bit positions are: Bit Value Name 0 1 DTR (1 = on; 0 = off) 1 2 RTS 2 4 DSR 3 8 CTS 4 16 DCD 5 32 TXD 6 64 RXD 7 128 Lead status available bit.')
ncmdsuPortLeadStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortLeadStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortLeadStatus2.setDescription('This variable indicates the Lead Status (part 2) of the port.The lead status2 is bit mapped. The various bit positions are: BIT Value Name 0 0 no-loop 0 1 local-loop 1 2 remote-loop 2 4 test-mode.')
ncmdbuPrimaryLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("oK", 1), ("aSC", 2), ("lOF", 3), ("cD", 4), ("uSER", 5), ("yEL", 6), ("bER", 7), ("aLLONE", 8), ("lOS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuPrimaryLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuPrimaryLineStatus.setDescription('This variable indicates the Primary Line Status of the ncmdbu. ')
ncmdbuLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sTANDBY", 1), ("aCTIVE", 2), ("eRROR", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuLineStatus.setDescription('This variable indicates the ncmdbu Line Status of the ncmdbu. ')
ncmdbuSwitchBy = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nONE", 1), ("aSC", 2), ("lOF", 3), ("cD", 4), ("uSER", 5), ("yEL", 6), ("bER", 7), ("aLLONE", 8), ("lOS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuSwitchBy.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuSwitchBy.setDescription('This variable indicates the cause of the ncmdbu switching. ')
ncmdbuReceivedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuReceivedCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuReceivedCode.setDescription('This variable indicates the ncmdbu received code in hex. ')
ncmdsuPortTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortTestResults.setDescription('The number of errors produced by a test on port .')
ncmdsuPortDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3022, 2003, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdsuPortDiagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdsuPortDiagStatus.setDescription('This variable indicates the Diagnostic Status of the port. The various bit positions are: Bit Value Name 0 1 Reserved 1 2 Reserved 2 4 Reserved 3 8 Sending Test Code 4 16 Sending loopdown code 5 32 Sending loopup code 6 64 far end looped 7 128 Near end looped.')
ncmddsMainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000), )
if mibBuilder.loadTexts: ncmddsMainConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsMainConfigTable.setDescription('The ncmdds Main Configuration table.')
ncmddsMainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsNIDMainConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsMainLineIndex"))
if mibBuilder.loadTexts: ncmddsMainConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsMainConfigEntry.setDescription('An entry in the ncmdds Main Configuration table.')
ncmddsNIDMainConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsNIDMainConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsNIDMainConfigIndex.setDescription('This variable indicates the node id value of the node.')
ncmddsMainLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsMainLineIndex.setStatus('mandatory')
ncmddsdsubus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("busA", 2), ("busB", 3), ("busC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsdsubus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsdsubus.setDescription('The ncmdsu bus type for Port.')
ncmddsPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortChannel.setDescription('This variable indicates the channel assignment for the ncmdsu for the port.')
ncmddsPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortConfiguration.setDescription('This variable indicates the configuration bits for port. The configuration can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the ncmdsu port configuration to zero 0 1 64k set uses 8bits of data/64kbps. 1 2 LEN set enable loop code and loop commands 2 4 INV set invert the channelized data 3 8 SCR set to scramble channelized data. 4 16 CLK1 DTE transmit clock select bits 5 32 CLK2 DTE transmit clock select bits 6 64 TU set port as a timing unit 7 128 ALM set if DIU has to report alarms to SAM.')
ncmddscsushelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddscsushelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddscsushelf.setDescription('This variable indicates the csu shelf associated with the ncmdsu port.')
ncmddscsuslot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddscsuslot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddscsuslot.setDescription('This variable indicates the csu slot associated with the ncmdsu port.')
ncmddsLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5000, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsLosLead.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsLosLead.setDescription('This variable indicates the DTE lead bits for port. The DTE leads can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the ncmdsu port configuration to zero 0 1 DTR set uses DTR 1 2 RTS set uses RTS 2 4 DSR set uses DSR 3 8 CTS set uses CTS 4 16 DCD set uses DCD 5 32 LOS use both bits: bits set to use for alarm 6 64 LOS 0 = Disable LOS detect, 1=use RTS , 2 = DTR 7 128 DDSMode set for 56k DDS .')
ncmddsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001), )
if mibBuilder.loadTexts: ncmddsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsConfigTable.setDescription('The ncmdds Configuration table.')
ncmddsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmddsConfigLineIndex"))
if mibBuilder.loadTexts: ncmddsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsConfigEntry.setDescription('An entry in the ncmdds Configuration table.')
ncmddsNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsNIDConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsNIDConfigIndex.setDescription('This variable specifies the node id.')
ncmddsConfigLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsConfigLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsConfigLineIndex.setDescription('This variable specifies the Line index.')
ncmddsPortLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortLoopEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortLoopEnable.setDescription('This variable indicates the loop enable bits for port. The loop enable can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Description 0 no-loop 0 1 enable ncmdds loop 1 2 enable v54 loop 2 4 enable ft1 loop 3 8 enable verilink loop 4 16 5 32 6 64 7 128 .')
ncmddsPortReceiveLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dSU", 1), ("channel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortReceiveLoopCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortReceiveLoopCode.setDescription('This variable indicates the Receive ncmdds loop code of the port 1.')
ncmddsPortRemoteLoopCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v54", 1), ("fTI", 2), ("verilink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortRemoteLoopCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortRemoteLoopCode.setDescription('This variable indicates the Receive ncmdds loop code of the port.')
ncmddsPortAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortAlarmEnable.setDescription('This variable indicates the Alarm enable which is bit mapped of the port. BIT Value Description 0 0 no-loop 0 1 alarm-on-loop 1 2 alarm-on-test 3 both ')
ncmddsPortAlarmClearDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortAlarmClearDelayTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortAlarmClearDelayTime.setDescription('This variable indicates the Alarmcleardelaytime of the port.')
ncmddsPortAbnormalStationCodeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortAbnormalStationCodeThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortAbnormalStationCodeThreshold.setDescription('This variable indicates the AbnormalStationCodethreshold of the port.')
ncmddsPortControlModeIdleThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortControlModeIdleThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortControlModeIdleThreshold.setDescription('This variable indicates the ControlModeIdlethreshold of the port.')
ncmddsPortMuxOutofSyncThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortMuxOutofSyncThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortMuxOutofSyncThreshold.setDescription('This variable indicates the MuxoutofSyncthreshold of the port.')
ncmddsPortUnAssignedMuxChannelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortUnAssignedMuxChannelThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortUnAssignedMuxChannelThreshold.setDescription('This variable indicates the UnassignedMuxChannelthreshold of the port.')
ncmddsPortGroup1Codes = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsPortGroup1Codes.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortGroup1Codes.setDescription('This variable indicates the port1Group1ncmddsCodes of the port.')
ncmddsPort56KStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsPort56KStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPort56KStatus.setDescription('This variable indicates the 56K ncmdds Status of the port. The various bit positions are: 0 Abnormal Station code(1 = Yes, 0 = No) 1 Control Mode Idle 2 Mux-Out-of-Sync 3 Unassigned Mux Chan 4 Group 1 ncmdds Codes Test Test 5 Test in Progress { 0 } Verilink {0} 511 6 Test in Progress { 0 } {1} 7 ncmdds mode enabled ')
ncmddsPortReceived56KCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("umc", 1), ("tip", 2), ("ta", 3), ("ma", 4), ("rc", 5), ("bl", 6), ("lbe", 7), ("fev", 8), ("asc", 9), ("oos", 10), ("cmi", 11), ("tc", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmddsPortReceived56KCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsPortReceived56KCode.setDescription('This variable specifies the received 56K ncmdds code.Some specitic values indicate the specific testing error. Value Testing Error 1 UMC 2 TIP 3 TA 4 MA 5 RC 6 BL 7 LBE 8 FEV 9 ASC 10 OOS 11 CMI 12 TC')
ncmddsmode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode-56k", 1), ("mode-64k", 2), ("mode-56kncmdds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsmode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsmode.setDescription('This variable specifies the mode of ncmdds.')
ncmddsLatchingLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("chan-loop-up", 1), ("dsu-loop-up", 2), ("ocu-loop-up", 3), ("chan-loop-dn", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsLatchingLoopbackType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsLatchingLoopbackType.setDescription('This variable specifies the latching loop up type of dds.')
ncmddsLatchingLoopbackDevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3024, 5001, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmddsLatchingLoopbackDevNo.setStatus('mandatory')
if mibBuilder.loadTexts: ncmddsLatchingLoopbackDevNo.setDescription('This variable specifies the device number to receive code. Range is 0 to 7, where 0 is the first device. Used only for DS0-Data Port loopback option of Latching Loopback Type Object. No signifiance right now.')
ncmdbuMainConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000), )
if mibBuilder.loadTexts: ncmdbuMainConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuMainConfigTable.setDescription('The ncm dbu Main Configuration table.')
ncmdbuMainConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuNIDMainConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuMainLineIndex"))
if mibBuilder.loadTexts: ncmdbuMainConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuMainConfigEntry.setDescription('An entry in the ncm dbu Main Configuration table.')
ncmdbuNIDMainConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuNIDMainConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuNIDMainConfigIndex.setDescription('This variable indicates the node id value of the node.')
ncmdbuMainLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuMainLineIndex.setStatus('mandatory')
ncmdbudsubus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("busA", 2), ("busB", 3), ("busC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbudsubus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbudsubus.setDescription('The ncmdsu bus type for Port.')
ncmdbuPortChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuPortChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuPortChannel.setDescription('This variable indicates the channel assignment for the ncmdbu for the port.')
ncmdbuPortConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuPortConfiguration.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuPortConfiguration.setDescription('This variable indicates the configuration bits for port. The configuration can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the ncmdsu port configuration to zero 0 1 64k set uses 8bits of data/64kbps. 1 2 LEN set enable loop code and loop commands 2 4 INV set invert the channelized data 3 8 SCR set to scramble channelized data. 4 16 CLK1 DTE transmit clock select bits 5 32 CLK2 DTE transmit clock select bits 6 64 TU set port as a timing unit 7 128 ALM set if DIU has to report alarms to SAM.')
ncmdbucsushelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbucsushelf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbucsushelf.setDescription('This variable indicates the csu shelf associated with the ncmdbu port.')
ncmdbucsuslot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbucsuslot.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbucsuslot.setDescription('This variable indicates the csu slot associated with the ncmdbu port.')
ncmdbuLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4000, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuLosLead.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuLosLead.setDescription('This variable indicates the DTE lead bits for port. The DTE leads can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the ncmdsu port configuration to zero 0 1 DTR set uses DTR 1 2 RTS set uses RTS 2 4 DSR set uses DSR 3 8 CTS set uses CTS 4 16 DCD set uses DCD 5 32 LOS use both bits: bits set to use for alarm 6 64 LOS 0 = Disable LOS detect, 1=use RTS , 2 = DTR 7 128 DDSMode set for 56k DDS .')
ncmdbuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001), )
if mibBuilder.loadTexts: ncmdbuConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuConfigTable.setDescription('The ncm dbu Configuration table.')
ncmdbuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuNIDConfigIndex"), (0, "VERILINK-ENTERPRISE-NCMDSU-MIB", "ncmdbuLineIndex"))
if mibBuilder.loadTexts: ncmdbuConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuConfigEntry.setDescription('An entry in the ncmdbu Configuration table.')
ncmdbuNIDConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuNIDConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuNIDConfigIndex.setDescription('This variable specifies the node id.')
ncmdbuLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmdbuLineIndex.setStatus('mandatory')
ncmdbuAllOnesSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuAllOnesSwitchOverTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuAllOnesSwitchOverTime.setDescription('This variable indicates the all ones duration in seconds for the ncmdbu.')
ncmdbuSwitchOnBERThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nO", 1), ("yES", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuSwitchOnBERThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuSwitchOnBERThresholdExceeded.setDescription('This variable indicates whether the ncmdbu is switched on for BER Threshold exceeded.')
ncmdbuDialBackupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual-manual", 1), ("automatic-automatic", 2), ("automatic-manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuDialBackupMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuDialBackupMode.setDescription('This variable indicates the dial backup mode for the ncmdbu.')
ncmdbuBackupConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("deactivate", 2), ("activate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuBackupConnection.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuBackupConnection.setDescription('This variable indicates the whether the backup connection is activated or not.')
ncmdbumode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode-56k", 1), ("mode-64k", 2), ("mode-56kncmdds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbumode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbumode.setDescription('This variable specifies the mode of ncmdbu.')
ncmdbuLoopType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3023, 4001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("fT1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdbuLoopType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdbuLoopType.setDescription('This variable specifies the Loop Type on RL EIA .')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMDSU-MIB", ncmdsuPortblockerrorcounter=ncmdsuPortblockerrorcounter, ncmddsPortRemoteLoopCode=ncmddsPortRemoteLoopCode, ncmddsPortChannel=ncmddsPortChannel, ncmddsmode=ncmddsmode, ncmddsLatchingLoopbackDevNo=ncmddsLatchingLoopbackDevNo, ncmddscsuslot=ncmddscsuslot, ncmdsuPortTestResults=ncmdsuPortTestResults, ncmdbuBackupConnection=ncmdbuBackupConnection, ncmdsuPortLeadStatus2=ncmdsuPortLeadStatus2, ncmdsuConfigEntry=ncmdsuConfigEntry, ncmddsPortUnAssignedMuxChannelThreshold=ncmddsPortUnAssignedMuxChannelThreshold, ncmddsConfigEntry=ncmddsConfigEntry, ncmddsPortMuxOutofSyncThreshold=ncmddsPortMuxOutofSyncThreshold, ncmcsuslot=ncmcsuslot, ncmddsPortGroup1Codes=ncmddsPortGroup1Codes, ncmdsuPortTest=ncmdsuPortTest, ncmdsuLineIndex=ncmdsuLineIndex, ncmdsuPortLoopback=ncmdsuPortLoopback, ncmdsuCommonEntry=ncmdsuCommonEntry, ncmdsuPortChannel=ncmdsuPortChannel, ncmddsPortLoopEnable=ncmddsPortLoopEnable, ncmdsuIndex=ncmdsuIndex, ncmddsNIDConfigIndex=ncmddsNIDConfigIndex, ncmdsuPortDiagStatus=ncmdsuPortDiagStatus, ncmdbuLineStatus=ncmdbuLineStatus, ncmdbudsubus=ncmdbudsubus, ncmdbuPrimaryLineStatus=ncmdbuPrimaryLineStatus, ncmddsMainConfigTable=ncmddsMainConfigTable, ncmddsNIDMainConfigIndex=ncmddsNIDMainConfigIndex, ncmdbuPortChannel=ncmdbuPortChannel, ncmddsLatchingLoopbackType=ncmddsLatchingLoopbackType, ncmddsPortConfiguration=ncmddsPortConfiguration, ncmddsPort56KStatus=ncmddsPort56KStatus, ncmdsuDTESpeed=ncmdsuDTESpeed, ncmddsLosLead=ncmddsLosLead, ncmddsPortReceiveLoopCode=ncmddsPortReceiveLoopCode, ncmdbuConfigTable=ncmdbuConfigTable, ncmddsConfigLineIndex=ncmddsConfigLineIndex, ncmdsuPortLOSstatus=ncmdsuPortLOSstatus, ncmdbuMainConfigTable=ncmdbuMainConfigTable, ncmdbumode=ncmdbumode, ncmdsuPortrateper8000=ncmdsuPortrateper8000, ncmddsPortAlarmClearDelayTime=ncmddsPortAlarmClearDelayTime, ncmdbuNIDConfigIndex=ncmdbuNIDConfigIndex, ncmdsuConfigTable=ncmdsuConfigTable, ncmddsMainConfigEntry=ncmddsMainConfigEntry, ncmdbuSwitchBy=ncmdbuSwitchBy, ncmdsuTimingSource=ncmdsuTimingSource, ncmdbucsuslot=ncmdbucsuslot, ncmcsushelf=ncmcsushelf, ncmdsuPortConfiguration=ncmdsuPortConfiguration, ncmdsuPortType=ncmdsuPortType, ncmdsuLosLead=ncmdsuLosLead, ncmdsuPortLeadStatus1=ncmdsuPortLeadStatus1, ncmdbuConfigEntry=ncmdbuConfigEntry, ncmdbuLosLead=ncmdbuLosLead, ncmddsMainLineIndex=ncmddsMainLineIndex, ncmdsubus=ncmdsubus, ncmdbuPortConfiguration=ncmdbuPortConfiguration, ncmdbuDialBackupMode=ncmdbuDialBackupMode, ncmdsuPortLowbattery=ncmdsuPortLowbattery, ncmdsuNIDConfigIndex=ncmdsuNIDConfigIndex, ncmdbuMainLineIndex=ncmdbuMainLineIndex, ncmddsPortControlModeIdleThreshold=ncmddsPortControlModeIdleThreshold, ncmdsustatEntry=ncmdsustatEntry, ncmddsPortReceived56KCode=ncmddsPortReceived56KCode, ncmdbuNIDMainConfigIndex=ncmdbuNIDMainConfigIndex, ncmdbuSwitchOnBERThresholdExceeded=ncmdbuSwitchOnBERThresholdExceeded, ncmdsuCommonTable=ncmdsuCommonTable, ncmddscsushelf=ncmddscsushelf, ncmdbucsushelf=ncmdbucsushelf, ncmdsustatIndex=ncmdsustatIndex, ncmdbuAllOnesSwitchOverTime=ncmdbuAllOnesSwitchOverTime, ncmdbuLoopType=ncmdbuLoopType, ncmdbuMainConfigEntry=ncmdbuMainConfigEntry, ncmddsdsubus=ncmddsdsubus, ncmdsustatTable=ncmdsustatTable, ncmdsuPortTestSeconds=ncmdsuPortTestSeconds, ncmdbuReceivedCode=ncmdbuReceivedCode, ncmdsuNIDstatIndex=ncmdsuNIDstatIndex, ncmddsPortAlarmEnable=ncmddsPortAlarmEnable, ncmdbuLineIndex=ncmdbuLineIndex, ncmdsuAlarmEnable=ncmdsuAlarmEnable, ncmddsConfigTable=ncmddsConfigTable, ncmddsPortAbnormalStationCodeThreshold=ncmddsPortAbnormalStationCodeThreshold, ncmdsuNIDIndex=ncmdsuNIDIndex)
