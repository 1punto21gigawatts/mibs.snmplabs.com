#
# PySNMP MIB module AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, ModuleIdentity, iso, Counter32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks, Bits, IpAddress, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ModuleIdentity", "iso", "Counter32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks", "Bits", "IpAddress", "Unsigned32", "Gauge32")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
agentGeneralMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 1))
if mibBuilder.loadTexts: agentGeneralMgmt.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: agentGeneralMgmt.setOrganization('D-Link, Inc.')
if mibBuilder.loadTexts: agentGeneralMgmt.setContactInfo(' D-Link Customer Service Postal: No. 20,Park Ave, II, Science-based Industrial Park, Hsinchu, taiwan, R.O.C. Tel: 886-3-577-9966 E-mail: ')
if mibBuilder.loadTexts: agentGeneralMgmt.setDescription('The Structure of Common Management Information for the D-Link enterprise.')
agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 1))
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('current')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1), ).setIndexNames((0, "AGENT-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of agentMibCapabilityDescr entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of the MIB specified in this entry.')
agentStatusConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusConsoleInUse.setStatus('current')
if mibBuilder.loadTexts: agentStatusConsoleInUse.setDescription('This indicates whether console is currently in-use.')
agentStatusSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("proceeding", 2), ("completed", 3), ("changed-not-save", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentStatusSaveCfg.setDescription('This indicates the status of the device configuration. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. proceeding(2) - the device configuration is being currently saved into the NV-RAM. completed(3) V all of the device configuration parameters have been saved into NV-RAM. changed-not-save(4)V some of the device configuration parameters have been changed but not saved into NV-RAM. failed(5) - The process to save device configuration is failed.')
agentStatusFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("in-process", 2), ("invalid-file", 3), ("violation", 4), ("file-not-found", 5), ("disk-full", 6), ("complete", 7), ("time-out", 8), ("not-format", 9), ("memory-full", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusFileTransfer.setStatus('current')
if mibBuilder.loadTexts: agentStatusFileTransfer.setDescription("status of firmware download control. If the value is 'other', means never firmware updated since device started up.")
agentPORTutilizationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8), )
if mibBuilder.loadTexts: agentPORTutilizationTable.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationTable.setDescription('This table specifies the current utilization of a specified port.')
agentPORTutilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1), ).setIndexNames((0, "AGENT-MIB", "agentPORTutilizationProtIndex"))
if mibBuilder.loadTexts: agentPORTutilizationEntry.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationEntry.setDescription('A list of information regarding the port utilization function.')
agentPORTutilizationProtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationProtIndex.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationProtIndex.setDescription("This object indicates the module's port number.")
agentPORTutilizationTX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationTX.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationTX.setDescription('The current rate of transmitted frames on the specified port.')
agentPORTutilizationRX = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationRX.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationRX.setDescription('The current rate of received frames on the specified port.')
agentPORTutilizationUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPORTutilizationUtil.setStatus('current')
if mibBuilder.loadTexts: agentPORTutilizationUtil.setDescription('The current percentages regarding port statistics.')
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2))
agentBscSwFileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1), )
if mibBuilder.loadTexts: agentBscSwFileTable.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileTable.setDescription('A list of MIB Basic Config entries supported file Update by this agent.')
agentBscSwFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1), ).setIndexNames((0, "AGENT-MIB", "agentBscSwFileIndex"))
if mibBuilder.loadTexts: agentBscSwFileEntry.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileEntry.setDescription('A basic config entry contains objects describing a particular MIB supported by this agent.')
agentBscSwFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileIndex.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileIndex.setDescription('The table index for the file entry')
agentBscSwFileDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileDscr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileDscr.setDescription('The description for the purpose of the software file in this entry. Note: For system which does not support change of this object, setting value to this object will cause the system to return bad-value error message. ')
agentBscSwFileAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileAddr.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileAddr.setDescription('The IP address where the File to be downloaded is located, or the IP address where the file will be uploaded to.')
agentBscSwFileTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileTransferType.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileTransferType.setDescription('The channel through which the file will be downloaded or uploaded. Note: For system which does not support all channels, setting value to the unsupported channel will cause the system to return bad-value error message. ')
agentBscSwFile = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFile.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFile.setDescription('The name of the file to be downloaded from the TFTP server, or to be uploaded to.')
agentBscSwFileLocateId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLocateId.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileLocateId.setDescription('This object describes the type of the file. runtime-code(1), log-file(2), cfg-file(3) Note: For system which does not support change of this object, setting value to this object will cause the system to return bad-value error message. ')
agentBscSwFileLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLoadType.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileLoadType.setDescription('This object provides the user to select download or upload function for the file. Note: For system which does not support change of this object, setting value to this object will cause the system to return bad-value error message. ')
agentBscSwFileCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("start", 3), ("delete", 4), ("create-and-go", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileCtrl.setStatus('current')
if mibBuilder.loadTexts: agentBscSwFileCtrl.setDescription('This object provides the user to download runtime software. The setting will take effect when the system is restart. See Note(1) below Note: For system which does not support change of this object to some value, setting object to these values cause the system to return bad-value error message. ')
agentFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("start-and-reset", 3), ("noaction", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: agentFileTransfer.setDescription('This object will execute the download or upload action. If start(2), it will begin to download/upload, but no reset as follow. If start-and-reset(3), then the reset will active after download or upload. No action if(4). Note: Because these funiction will be limited by the system support. Some of the select item will invalid. When one of the item user select,it will response with bad-value status.')
agentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("warm-start", 3), ("no-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemReset.setStatus('current')
if mibBuilder.loadTexts: agentSystemReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(4) has no effect. Setting this object to cold-start(2) or warm-start(3) will reset the agent. The agent always returns no-reset(4) when this object is read.')
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3), ("notAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('current')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('This object indicates the RS-232C mode while device restart.')
agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-115200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setStatus('obsolete')
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setDescription('This object allows user to specify out_of_band baud rate. It will take effect when the system is restart. Note: Because these funiction will be limited by the system support. Some of the select item will invalid. When one of the item user select,it will response with bad-value status. ')
agentSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("cfg", 3), ("log", 4), ("all", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveCfg.setStatus('current')
if mibBuilder.loadTexts: agentSaveCfg.setDescription('This indicates the current device saving type will be saved into to NV-RAM. other(1) - none of the following. cfg(3) - save configuration. log(4) - save log. all(5) - save both ( active configuration & log).')
agentTrustHostMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10))
agentTrustHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1), )
if mibBuilder.loadTexts: agentTrustHostTable.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostTable.setDescription('This table contains Trust Host information.')
agentTrustHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1), ).setIndexNames((0, "AGENT-MIB", "agentTrustHostIndex"))
if mibBuilder.loadTexts: agentTrustHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostEntry.setDescription('A list of information about Trust Host.')
agentTrustHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrustHostIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIndex.setDescription('The index of Trust Host entry.')
agentTrustHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIPAddress.setDescription('Specifies the IP address of the Trust Host.')
agentTrustHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostRowStatus.setDescription('Indicates the status of this entry. When creating a Trust Host entry, the IP address should be set, too.')
agentTrustHostIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentTrustHostIPSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIPSubnetMask.setDescription('Specifies the IP subnet mask of the Trust Host.')
agentTrustHostDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrustHostDelAllState.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostDelAllState.setDescription('Used to delete all Trust Host entries.')
agentFDBMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11))
agentFDBClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFDBClearAllState.setStatus('current')
if mibBuilder.loadTexts: agentFDBClearAllState.setDescription('Used to clear all FDB entries.')
agentARPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12))
agentARPClearAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentARPClearAllState.setStatus('current')
if mibBuilder.loadTexts: agentARPClearAllState.setDescription('Used to clear all ARP entries.')
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 3))
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('current')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpTftpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTftpServerAddr.setStatus('obsolete')
if mibBuilder.loadTexts: agentIpTftpServerAddr.setDescription('The IP Address of TFTP Server.')
agentIpGetIpFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFrom.setStatus('current')
if mibBuilder.loadTexts: agentIpGetIpFrom.setDescription('This object indicates whether the agent get its system IP address from Bootp/DHCP server at start up.')
agentConsoleModeManager = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 1, 5))
agentConsoleModeManagerDataBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bits-7", 2), ("bits-8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerDataBits.setStatus('current')
if mibBuilder.loadTexts: agentConsoleModeManagerDataBits.setDescription('The DataBits for console mode, If the agentRs232PortConfig change to console mode then the device will use this group to make a setup for console value and agentSlipModeManager group will deactive automatically. ')
agentConsoleModeManagerStopBits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("stopbits-1", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerStopBits.setStatus('current')
if mibBuilder.loadTexts: agentConsoleModeManagerStopBits.setDescription('The Stop Bits for console mode ')
agentConsoleModeManagerParity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerParity.setStatus('current')
if mibBuilder.loadTexts: agentConsoleModeManagerParity.setDescription('The Parity for console mode, If the agentRs232PortConfig change to console mode then the device will use this group to make a setup for console value and agentSlipModeManager group will deactive automatically. ')
agentConsoleModeManagerBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-57200", 6), ("baudRate-115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerBaudRate.setStatus('current')
if mibBuilder.loadTexts: agentConsoleModeManagerBaudRate.setDescription('The transmit rate for console mode. Note: Because these funiction will be limited by the system support. Some of the select item will invalid. When one of the item user select,it will response with bad-value status. ')
agentConsoleModeManagerLogoutTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("never", 1), ("two-minutes", 2), ("five-minutes", 3), ("ten-minutes", 4), ("fifteen-minutes", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerLogoutTime.setStatus('current')
if mibBuilder.loadTexts: agentConsoleModeManagerLogoutTime.setDescription('The time period of auto logout.')
mibBuilder.exportSymbols("AGENT-MIB", agentFileTransfer=agentFileTransfer, agentMgmtProtocolCapability=agentMgmtProtocolCapability, agentConsoleModeManagerDataBits=agentConsoleModeManagerDataBits, agentARPMgmt=agentARPMgmt, agentPORTutilizationEntry=agentPORTutilizationEntry, agentBscSwFileLoadType=agentBscSwFileLoadType, agentMibCapabilityDescr=agentMibCapabilityDescr, agentTrustHostMgmt=agentTrustHostMgmt, agentMibCapabilityIndex=agentMibCapabilityIndex, agentPORTutilizationUtil=agentPORTutilizationUtil, agentSaveCfg=agentSaveCfg, agentMibCapabilityEntry=agentMibCapabilityEntry, agentBscSwFileLocateId=agentBscSwFileLocateId, agentTrustHostEntry=agentTrustHostEntry, agentMibCapabilityType=agentMibCapabilityType, agentIpNumOfIf=agentIpNumOfIf, agentGeneralMgmt=agentGeneralMgmt, agentTrustHostDelAllState=agentTrustHostDelAllState, agentPORTutilizationTable=agentPORTutilizationTable, agentBscSwFileAddr=agentBscSwFileAddr, agentFDBClearAllState=agentFDBClearAllState, agentBscSwFile=agentBscSwFile, agentConsoleModeManager=agentConsoleModeManager, agentConsoleModeManagerStopBits=agentConsoleModeManagerStopBits, agentTrustHostTable=agentTrustHostTable, agentStatusConsoleInUse=agentStatusConsoleInUse, agentMibCapabilityTable=agentMibCapabilityTable, agentBasicInfo=agentBasicInfo, agentRs232PortConfig=agentRs232PortConfig, agentOutOfBandBaudRateConfig=agentOutOfBandBaudRateConfig, agentBscSwFileIndex=agentBscSwFileIndex, agentTrustHostIPSubnetMask=agentTrustHostIPSubnetMask, agentConsoleModeManagerParity=agentConsoleModeManagerParity, agentBscSwFileTable=agentBscSwFileTable, agentTrustHostIPAddress=agentTrustHostIPAddress, agentBscSwFileCtrl=agentBscSwFileCtrl, PYSNMP_MODULE_ID=agentGeneralMgmt, agentIpProtoConfig=agentIpProtoConfig, agentConsoleModeManagerBaudRate=agentConsoleModeManagerBaudRate, agentBscSwFileDscr=agentBscSwFileDscr, agentBscSwFileEntry=agentBscSwFileEntry, agentBasicConfig=agentBasicConfig, agentBscSwFileTransferType=agentBscSwFileTransferType, agentFDBMgmt=agentFDBMgmt, agentTrustHostIndex=agentTrustHostIndex, agentIpGetIpFrom=agentIpGetIpFrom, agentConsoleModeManagerLogoutTime=agentConsoleModeManagerLogoutTime, agentPORTutilizationTX=agentPORTutilizationTX, agentMibCapabilityVersion=agentMibCapabilityVersion, agentPORTutilizationRX=agentPORTutilizationRX, agentStatusFileTransfer=agentStatusFileTransfer, agentARPClearAllState=agentARPClearAllState, agentTrustHostRowStatus=agentTrustHostRowStatus, agentIpTftpServerAddr=agentIpTftpServerAddr, agentSystemReset=agentSystemReset, agentPORTutilizationProtIndex=agentPORTutilizationProtIndex, agentStatusSaveCfg=agentStatusSaveCfg)
