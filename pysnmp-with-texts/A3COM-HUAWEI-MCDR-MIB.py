#
# PySNMP MIB module A3COM-HUAWEI-MCDR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-MCDR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ModuleIdentity, Unsigned32, iso, Counter32, Bits, IpAddress, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ModuleIdentity", "Unsigned32", "iso", "Counter32", "Bits", "IpAddress", "Counter64", "ObjectIdentity")
DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TextualConvention")
h3cMultCDR = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86))
h3cMultCDR.setRevisions(('2007-12-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cMultCDR.setRevisionsDescriptions(('The multicast call detail record MIB.',))
if mibBuilder.loadTexts: h3cMultCDR.setLastUpdated('200712150000Z')
if mibBuilder.loadTexts: h3cMultCDR.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cMultCDR.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cMultCDR.setDescription('The initial version of this MIB file.')
h3cMultCDRCfgObject = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 1))
h3cMultCDRStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMultCDRStatus.setStatus('current')
if mibBuilder.loadTexts: h3cMultCDRStatus.setDescription('Configure to enable or disable multicast CDR function.')
h3cMultCDRReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMultCDRReportInterval.setStatus('current')
if mibBuilder.loadTexts: h3cMultCDRReportInterval.setDescription('Configure the multicast CDR report-interval. Unit: second.')
h3cMultCDRCacheLimit = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMultCDRCacheLimit.setStatus('current')
if mibBuilder.loadTexts: h3cMultCDRCacheLimit.setDescription('Configure the multicast CDR cache-limit.')
h3cMultCDRRecordDelay = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMultCDRRecordDelay.setStatus('current')
if mibBuilder.loadTexts: h3cMultCDRRecordDelay.setDescription('Configure the multicast CDR record-delay. Unit: second')
h3cMultCDRRecordSend = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("caching", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMultCDRRecordSend.setStatus('current')
if mibBuilder.loadTexts: h3cMultCDRRecordSend.setDescription('Send record at once.')
h3cMultUserOnlineInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2), )
if mibBuilder.loadTexts: h3cMultUserOnlineInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserOnlineInfoTable.setDescription('Multicast user online information table.')
h3cMultUserOnlineInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-HUAWEI-MCDR-MIB", "h3cMultUserRecordID"))
if mibBuilder.loadTexts: h3cMultUserOnlineInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserOnlineInfoEntry.setDescription('The entry of multicast user online information table.')
h3cMultUserRecordID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cMultUserRecordID.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserRecordID.setDescription('The index of online record.')
h3cMultUserSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserSubIfIndex.setDescription('The index of sub-interface which is active. If the value is zero, h3cMultUserSubIfIndex should be ignored.')
h3cMultUserVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserVlanID.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserVlanID.setDescription('The ID of VLAN in which the user joined the multicast group.')
h3cMultUserJoinGAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserJoinGAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserJoinGAddrType.setDescription('Type of the multicast group IP address.')
h3cMultUserJoinGAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserJoinGAddr.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserJoinGAddr.setDescription('The multicast group address which the user joined.')
h3cMultUserJoinSAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserJoinSAddrType.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserJoinSAddrType.setDescription('Type of the multicast source IP address.')
h3cMultUserJoinSAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserJoinSAddr.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserJoinSAddr.setDescription("The multicast source address which the user joined. If the value is '0.0.0.0'(IPv4) or '::'(IPv6), h3cMultUserJoinSAddr should be ignored.")
h3cMultUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("preview", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserStatus.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserStatus.setDescription('The current status of user. permit - user in permit status. preview - user in preview status.')
h3cMultUserJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserJoinTime.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserJoinTime.setDescription('The time when the user joined the multicast group.')
h3cMultUserPreviewTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserPreviewTimes.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserPreviewTimes.setDescription('The times of multicast preview which the user joined. If h3cMultUserStatus is not preview, h3cMultUserPreviewTimes should be ignored.')
h3cMultUserPreviewRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 86, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMultUserPreviewRemain.setStatus('current')
if mibBuilder.loadTexts: h3cMultUserPreviewRemain.setDescription('The remanent time slice of multicast preview which the user joined. If h3cMultUserStatus is not preview, h3cMultUserPreviewRemain should be ignored.')
mibBuilder.exportSymbols("A3COM-HUAWEI-MCDR-MIB", h3cMultCDRRecordDelay=h3cMultCDRRecordDelay, h3cMultUserVlanID=h3cMultUserVlanID, h3cMultUserJoinSAddrType=h3cMultUserJoinSAddrType, h3cMultUserStatus=h3cMultUserStatus, h3cMultUserPreviewTimes=h3cMultUserPreviewTimes, h3cMultCDRReportInterval=h3cMultCDRReportInterval, PYSNMP_MODULE_ID=h3cMultCDR, h3cMultUserJoinGAddrType=h3cMultUserJoinGAddrType, h3cMultUserOnlineInfoTable=h3cMultUserOnlineInfoTable, h3cMultCDRRecordSend=h3cMultCDRRecordSend, h3cMultUserOnlineInfoEntry=h3cMultUserOnlineInfoEntry, h3cMultUserJoinTime=h3cMultUserJoinTime, h3cMultCDRCacheLimit=h3cMultCDRCacheLimit, h3cMultUserJoinSAddr=h3cMultUserJoinSAddr, h3cMultUserJoinGAddr=h3cMultUserJoinGAddr, h3cMultUserSubIfIndex=h3cMultUserSubIfIndex, h3cMultUserRecordID=h3cMultUserRecordID, h3cMultCDR=h3cMultCDR, h3cMultCDRStatus=h3cMultCDRStatus, h3cMultUserPreviewRemain=h3cMultUserPreviewRemain, h3cMultCDRCfgObject=h3cMultCDRCfgObject)
