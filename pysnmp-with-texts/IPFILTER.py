#
# PySNMP MIB module IPFILTER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPFILTER
# Produced by pysmi-0.3.4 at Wed May  1 13:55:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Unsigned32, ModuleIdentity, TimeTicks, Counter64, NotificationType, ObjectIdentity, MibIdentifier, Bits, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Unsigned32", "ModuleIdentity", "TimeTicks", "Counter64", "NotificationType", "ObjectIdentity", "MibIdentifier", "Bits", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ucdExperimental, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdExperimental")
ipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 13, 2))
ipfInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1), )
if mibBuilder.loadTexts: ipfInTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipfInTable.setDescription('A table with IP Filter incoming rules and statistic')
ipfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1), ).setIndexNames((0, "IPFILTER", "ipfInIndex"))
if mibBuilder.loadTexts: ipfInEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipfInEntry.setDescription('IP Filter incoming rules table entry')
ipfInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipfInIndex.setDescription('Reference index for each incoming IP Filter rule')
ipfInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInRule.setStatus('mandatory')
if mibBuilder.loadTexts: ipfInRule.setDescription('Textual representation of the incoming IP Filter rule')
ipfInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipfInHits.setDescription('Hits of the incoming IP Filter rule')
ipfOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2), )
if mibBuilder.loadTexts: ipfOutTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipfOutTable.setDescription('A table with IP Filter outgoing rules and statistic')
ipfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1), ).setIndexNames((0, "IPFILTER", "ipfOutIndex"))
if mibBuilder.loadTexts: ipfOutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipfOutEntry.setDescription('IP Filter outgoing rules table entry')
ipfOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipfOutIndex.setDescription('Reference index for each outgoing IP Filter rule')
ipfOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutRule.setStatus('mandatory')
if mibBuilder.loadTexts: ipfOutRule.setDescription('Textual representation of the outgoing IP Filter rule')
ipfOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipfOutHits.setDescription('Hits of the outgoing IP Filter rule')
ipfAccInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3), )
if mibBuilder.loadTexts: ipfAccInTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccInTable.setDescription('A table with IP Filter incoming accounting rules and statistic')
ipfAccInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1), ).setIndexNames((0, "IPFILTER", "ipfAccInIndex"))
if mibBuilder.loadTexts: ipfAccInEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccInEntry.setDescription('IP FIlter incoming accounting rules table entry')
ipfAccInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccInIndex.setDescription('Reference index for each incoming accounting IP Filter rule')
ipfAccInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInRule.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccInRule.setDescription('Textual representation of the incoming accounting IP Filter rule')
ipfAccInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccInHits.setDescription('Hits of the incoming accounting IP Filter rule')
ipfAccInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccInBytes.setDescription('Bytes passed thru the incoming accounting IP Filter rule')
ipfAccOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4), )
if mibBuilder.loadTexts: ipfAccOutTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccOutTable.setDescription('A table with IP Filter outgoing accounting rules and statistic')
ipfAccOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1), ).setIndexNames((0, "IPFILTER", "ipfAccOutIndex"))
if mibBuilder.loadTexts: ipfAccOutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccOutEntry.setDescription('IP Filter outgoing accounting rules table entry')
ipfAccOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccOutIndex.setDescription('Reference index for each outgoing accounting IP Filter rule')
ipfAccOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutRule.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccOutRule.setDescription('Textual representation of the outgoing accounting IP Filter rule')
ipfAccOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutHits.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccOutHits.setDescription('Hits of the outgoing accounting IP Filter rule')
ipfAccOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ipfAccOutBytes.setDescription('Bytes passed thru the outgoing accounting IP Filter rule')
mibBuilder.exportSymbols("IPFILTER", ipfAccInEntry=ipfAccInEntry, ipfOutRule=ipfOutRule, ipFilter=ipFilter, ipfInRule=ipfInRule, ipfAccOutEntry=ipfAccOutEntry, ipfAccOutIndex=ipfAccOutIndex, ipfAccOutHits=ipfAccOutHits, ipfInIndex=ipfInIndex, ipfAccInTable=ipfAccInTable, ipfAccOutRule=ipfAccOutRule, ipfAccOutBytes=ipfAccOutBytes, ipfAccInIndex=ipfAccInIndex, ipfInTable=ipfInTable, ipfInEntry=ipfInEntry, ipfAccInRule=ipfAccInRule, ipfInHits=ipfInHits, ipfOutTable=ipfOutTable, ipfAccOutTable=ipfAccOutTable, ipfOutIndex=ipfOutIndex, ipfAccInBytes=ipfAccInBytes, ipfOutHits=ipfOutHits, ipfAccInHits=ipfAccInHits, ipfOutEntry=ipfOutEntry)
