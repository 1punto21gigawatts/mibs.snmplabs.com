#
# PySNMP MIB module IEEE8021-MSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-MSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
ieee802dot1mibs, IEEE8021MstIdentifier, IEEE8021VlanIndex, IEEE8021BridgePortNumber, IEEE8021PbbComponentIdentifier = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs", "IEEE8021MstIdentifier", "IEEE8021VlanIndex", "IEEE8021BridgePortNumber", "IEEE8021PbbComponentIdentifier")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, ObjectIdentity, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Integer32, Gauge32, ModuleIdentity, iso, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ObjectIdentity", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Integer32", "Gauge32", "ModuleIdentity", "iso", "MibIdentifier", "IpAddress")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ieee8021MstpMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 6))
ieee8021MstpMib.setRevisions(('2014-12-15 00:00', '2012-08-10 00:00', '2011-12-12 00:00', '2011-03-23 00:00', '2008-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021MstpMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q 2014 revision. Cross references updated and corrected. Instances of ...value of mstp(2)... changed to ...value of mstp(3). Defval for ieee8021MstpCistPortAdminEdgePort changed to false. ieee8021MstpVlanV2Table DESCRIPTION updated (4094 not 4096). Bug fixes to conformance section.', 'Updated cross references to other clauses, particularly Clause 13, as part of 802.1Q Cor-2.', 'Deprecated ieee8021MstpFidToMstiTable for an identical ieee8021MstpFidToMstiV2Table to add 4095 to the range of ieee8021MstpFidToMstiV2Fid and to add 0 and 4095 to the range of ieee8021MstpFidToMstiV2MstId for 802.1aq. Deprecated ieee8021MstpVlanTable for an identical ieee8021MstpVlanV2Table to add 0 & 4095 to the range of ieee8021MstpVlanV2MstId for 802.1aq', 'Minor edits to contact information, correction to range of ieee8021MstpCistMaxHops and addition of fragile Bridge as part of 2011 revision of IEEE Std 802.1Q.', 'Initial version.',))
if mibBuilder.loadTexts: ieee8021MstpMib.setLastUpdated('201412150000Z')
if mibBuilder.loadTexts: ieee8021MstpMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021MstpMib.setContactInfo(' WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: stds-802-1@ieee.org Contact: IEEE 802.1 Working Group Chair Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane P.O. Box 1331 Piscataway NJ 08855-1331 USA E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021MstpMib.setDescription('The Bridge MIB modules for managing devices that support IEEE Std 802.1Q multiple spanning tree groups. Unless otherwise indicated, the references in this MIB module are to IEEE Std 802.1Q-2014. Copyright (C) IEEE (2014). This version of this MIB module is part of IEEE Std 802.1Q; see the draft itself for full legal notices.')
ieee8021MstpNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 6, 0))
ieee8021MstpObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 6, 1))
ieee8021MstpConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 6, 2))
ieee8021MstpCistTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 1), )
if mibBuilder.loadTexts: ieee8021MstpCistTable.setReference('12.8.1.1, 12.8.1.3')
if mibBuilder.loadTexts: ieee8021MstpCistTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistTable.setDescription("The Common and Internal Spanning Tree (CIST) Table. Each row in the table represents information regarding a Bridge's Bridge Protocol Entity for the CIST. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3). This table contains objects corresponding to the following items from 12.8.1.1 and 12.8.1.3. Some of those items are provided in the IEEE8021-SPANNING-TREE-MIB as noted below. From 12.8.1.1: Items a), c), o), p), and q) are defined in this table The remaining items are covered in the IEEE8021-SPANNING-TREE-MIB: b) ieee8021SpanningTreeTimeSinceTopologyChange c) ieee8021SpanningTreeTopChanges e) ieee8021SpanningTreeDesignatedRoot f) ieee8021SpanningTreeRootCost g) ieee8021SpanningTreeRootPort h) ieee8021SpanningTreeMaxAge i) ieee8021SpanningTreeForwardDelay j) ieee8021SpanningTreeBridgeMaxAge k) ieee8021SpanningTreeBridgeHelloTime l) ieee8021SpanningTreeBridgeForwardDelay m) ieee8021SpanningTreeHoldTime n) ieee8021SpanningTreeVersion From 12.8.1.3: Item g) is defined in this table The remaining items are covered in the IEEE8021-SPANNING-TREE-MIB: a) ieee8021SpanningTreeBridgeMaxAge b) ieee8021SpanningTreeBridgeHelloTime c) ieee8021SpanningTreeBridgeForwardDelay d) ieee8021SpanningTreePriority e) ieee8021SpanningTreeVersion f) ieee8021RstpStpExtTxHoldCount")
ieee8021MstpCistEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpCistComponentId"))
if mibBuilder.loadTexts: ieee8021MstpCistEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistEntry.setDescription('A CIST Table entry.')
ieee8021MstpCistComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpCistComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpCistBridgeIdentifier = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistBridgeIdentifier.setReference('12.8.1.1')
if mibBuilder.loadTexts: ieee8021MstpCistBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistBridgeIdentifier.setDescription('The Bridge Identifier for the CIST.')
ieee8021MstpCistTopologyChange = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistTopologyChange.setReference('13.25.9, 14.8.1.1.3:d of IEEE 802.1D-2004')
if mibBuilder.loadTexts: ieee8021MstpCistTopologyChange.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistTopologyChange.setDescription('In an STP Bridge, the value of the Topology Change parameter (14.8.1.1.3, item d of IEEE Std 802.1D, 2004 Edition), or in an RSTP or MSTP Bridge, asserted if the tcWhile timer for any Port for the CIST is non-zero.')
ieee8021MstpCistRegionalRootIdentifier = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistRegionalRootIdentifier.setReference('13.16.4, 13.26.3')
if mibBuilder.loadTexts: ieee8021MstpCistRegionalRootIdentifier.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistRegionalRootIdentifier.setDescription('In an MSTP Bridge, the CIST Regional Root Identifier parameter, i.e. the Bridge Identifier of the current CIST Regional Root.')
ieee8021MstpCistPathCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPathCost.setReference('13.9:d, 13.10')
if mibBuilder.loadTexts: ieee8021MstpCistPathCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPathCost.setDescription("In an MSTP Bridge, the CIST Path Cost parameter, i.e. the CIST path cost from the transmitting Bridge to the CIST Regional Root. The sum (about 20 possible out of the given range) of multiple port path costs. Also, if the 'transmitting Bridge' is the 'CIST Regional Root', then this value could be zero.")
ieee8021MstpCistMaxHops = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistMaxHops.setReference('13.26.4')
if mibBuilder.loadTexts: ieee8021MstpCistMaxHops.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistMaxHops.setDescription('In an MSTP Bridge, the MaxHops parameter. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021MstpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: ieee8021MstpTable.setReference('12.8.1.2, 12.8.1.4, 12.12.3.2, 12.12.1')
if mibBuilder.loadTexts: ieee8021MstpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpTable.setDescription("In an MSTP Bridge, the MSTP Table. Each row in the Table represents information regarding a Bridge's Bridge Protocol Entity for the specified Spanning Tree instance. Entries in this table MUST be retained across reinitializations of the management system. Note that entries can be created in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).")
ieee8021MstpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpId"))
if mibBuilder.loadTexts: ieee8021MstpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpEntry.setDescription('A MSTP Table entry.')
ieee8021MstpComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 2), IEEE8021MstIdentifier())
if mibBuilder.loadTexts: ieee8021MstpId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpId.setDescription('In an MSTP Bridge, this parameter is the MSTID, i.e. the identifier of a Spanning Tree (or MST) Instance.')
ieee8021MstpBridgeId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpBridgeId.setReference('13.26.2')
if mibBuilder.loadTexts: ieee8021MstpBridgeId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpBridgeId.setDescription('In an MSTP Bridge, the Bridge Identifier for the MSTI.')
ieee8021MstpTimeSinceTopologyChange = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 4), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpTimeSinceTopologyChange.setReference('13.25.9')
if mibBuilder.loadTexts: ieee8021MstpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpTimeSinceTopologyChange.setDescription('In an MSTP Bridge, count in seconds of the time elapsed since tcWhile was last non-zero for any Port for the MSTI.')
ieee8021MstpTopologyChanges = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 5), Counter64()).setUnits('topology changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpTopologyChanges.setReference('13.25.9')
if mibBuilder.loadTexts: ieee8021MstpTopologyChanges.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpTopologyChanges.setDescription('In an MSTP Bridge, count of the times tcWhile has been non-zero for any Port for the MSTI since the Bridge was powered on or initialized.')
ieee8021MstpTopologyChange = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpTopologyChange.setReference('13.25.9')
if mibBuilder.loadTexts: ieee8021MstpTopologyChange.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpTopologyChange.setDescription('In an MSTP Bridge, the Topology Change parameter value: true(1) if tcWhile is non-zero for any Port for the MSTI.')
ieee8021MstpDesignatedRoot = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpDesignatedRoot.setReference('13.27.20')
if mibBuilder.loadTexts: ieee8021MstpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpDesignatedRoot.setDescription('In an MSTP Bridge, the Designated Root parameter value, i.e. the Bridge Identifier of the Root Bridge for the MSTI.')
ieee8021MstpRootPathCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpRootPathCost.setReference('13.27.20')
if mibBuilder.loadTexts: ieee8021MstpRootPathCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpRootPathCost.setDescription('In an MSTP Bridge, the Root Path Cost parameter value, i.e. the path cost from the transmitting Bridge to the Root Bridge for the MSTI.')
ieee8021MstpRootPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 9), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpRootPort.setReference('13.26.9')
if mibBuilder.loadTexts: ieee8021MstpRootPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpRootPort.setDescription('In an MSTP Bridge, the Root Port parameter value, i.e. the Root Port for the MSTI.')
ieee8021MstpBridgePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021MstpBridgePriority.setReference('13.26.3')
if mibBuilder.loadTexts: ieee8021MstpBridgePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpBridgePriority.setDescription('In an MSTP Bridge, the Bridge Priority parameter value for the MSTI, i.e. the most significant 4 bits of the Bridge Identifier for the MSTI.')
ieee8021MstpVids0 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpVids0.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVids0.setDescription('This object contains the first 1024 bits of the 4096 bit vector indicating which VIDs are assigned to this MSTID. The high order bit of the first octet corresponds to the first bit of the vector, while the low order bit of the last octet corresponds to the last bit of this portion of the vector. A bit that is on (equal to 1) indicates that the corresponding VID is assigned to this MSTID.')
ieee8021MstpVids1 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpVids1.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVids1.setDescription('This object contains the second 1024 bits of the 4096 bit vector indicating which VIDs are assigned to this MSTID. The high order bit of the first octet corresponds to the first bit of this portion of the vector, while the low order bit of the last octet corresponds to the last bit of this portion of the vector. A bit that is on (equal to 1) indicates that the corresponding VID is assigned to this MSTID.')
ieee8021MstpVids2 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpVids2.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVids2.setDescription('This object contains the third 1024 bits of the 4096 bit vector indicating which VIDs are assigned to this MSTID. The high order bit of the first octet corresponds to the first bit of this portion of the vector, while the low order bit of the last octet corresponds to the last bit of this portion of the vector. A bit that is on (equal to 1) indicates that the corresponding VID is assigned to this MSTID.')
ieee8021MstpVids3 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpVids3.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVids3.setDescription('This object contains the fourth 1024 bits of the 4096 bit vector indicating which VIDs are assigned to this MSTID. The high order bit of the first octet corresponds to the first bit of this portion of the vector, while the low order bit of the last octet corresponds to the last bit of this portion of the vector. A bit that is on (equal to 1) indicates that the corresponding VID is assigned to this MSTID.')
ieee8021MstpRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021MstpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpRowStatus.setDescription('The status of the row. Read SNMPv2-TC (RFC2579) for an explanation of the possible values this object can take. The writable columns in a row can not be changed if the row is active. All columns must have a valid value before a row can be activated.')
ieee8021MstpCistPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 3), )
if mibBuilder.loadTexts: ieee8021MstpCistPortTable.setReference('12.8.2.1, 12.8.2.3, 12.8.2.5')
if mibBuilder.loadTexts: ieee8021MstpCistPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortTable.setDescription("The CIST Port Table. Each row in the Table represents information regarding a specific Port within the Bridge's Bridge Protocol Entity, for the CIST. The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3). This table contains objects corresponding to the following items from 12.8.2.1, 12.8.2.3, and 12.8.2.5. Some of those items are provided in the IEEE8021-SPANNING-TREE-MIB as noted below. From 12.8.2.1: Items a), d), e), and i) through w) are defined in this table The remaining items are covered in the IEEE8021-SPANNING-TREE-MIB: b) ieee8021SpanningTreePortState c) ieee8021SpanningTreePortPriority d) ieee8021SpanningTreePortPathCost f) ieee8021SpanningTreePortDesignatedCost g) ieee8021SpanningTreePortDesignatedBridge h) ieee8021SpanningTreePortDesignatedPort From 12.8.2.3: Items a), b), and d) through h) are defined in this table (item a is the index) The remaining items are covered in the IEEE8021-SPANNING-TREE-MIB: b) ieee8021SpanningTreePortPathCost, c) ieee8021SpanningTreePortPriority From 12.8.2.5: All items are defined in this table Also from 12.8.2.1: Items u), v), w), and x) are defined in this table Also from 12.8.2.3: Items i), j), k), and l) are defined in this table")
ieee8021MstpCistPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpCistPortComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpCistPortNum"))
if mibBuilder.loadTexts: ieee8021MstpCistPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortEntry.setDescription('A CIST Port Table entry.')
ieee8021MstpCistPortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpCistPortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpCistPortNum = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021MstpCistPortNum.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortNum.setDescription("The Port's Port Number parameter value for the CIST, i.e. the number of the Bridge Port for the CIST.")
ieee8021MstpCistPortUptime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 3), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortUptime.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortUptime.setDescription("The Port's Uptime parameter value for the CIST, i.e. the count in seconds of the time elapsed since the Port was last reset or initialized (BEGIN, Annex E).")
ieee8021MstpCistPortAdminPathCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortAdminPathCost.setReference('13.27.25, 17.13.11 of IEEE Std 802.1D')
if mibBuilder.loadTexts: ieee8021MstpCistPortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortAdminPathCost.setDescription("The administratively assigned value for the contribution of this port to the path cost of paths toward the spanning tree root. Writing a value of '0' assigns the automatically calculated default Path Cost value to the port. If the default Path Cost is being used, this object returns '0' when read. This complements the object ieee8021MstpCistPortCistPathCost, which returns the operational value of the port path cost. The value of this object MUST be retained across reinitializations of the management system.")
ieee8021MstpCistPortDesignatedRoot = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortDesignatedRoot.setReference('13.27.47')
if mibBuilder.loadTexts: ieee8021MstpCistPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortDesignatedRoot.setDescription("The CIST Regional Root Identifier component of the Port's port priority vector, as defined in 13.10, for the CIST.")
ieee8021MstpCistPortTopologyChangeAck = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortTopologyChangeAck.setReference('13.27.72, 17.19.41 of IEEE Std 802.1D')
if mibBuilder.loadTexts: ieee8021MstpCistPortTopologyChangeAck.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortTopologyChangeAck.setDescription("The Port's Topology Change Acknowledge parameter value. True(1) if a Configuration Message with a topology change acknowledge flag set is to be transmitted. ")
ieee8021MstpCistPortHelloTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortHelloTime.setReference('13.27.48')
if mibBuilder.loadTexts: ieee8021MstpCistPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortHelloTime.setDescription("The Port's Hello Time timer parameter value, for the CIST. In centi-seconds")
ieee8021MstpCistPortAdminEdgePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortAdminEdgePort.setReference('13.27.1')
if mibBuilder.loadTexts: ieee8021MstpCistPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortAdminEdgePort.setDescription("In a Bridge that supports the identification of edge ports, the Port's Admin Edge Port parameter value, for the CIST.")
ieee8021MstpCistPortOperEdgePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortOperEdgePort.setReference('13.27.44')
if mibBuilder.loadTexts: ieee8021MstpCistPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortOperEdgePort.setDescription("In a Bridge that supports the identification of edge ports, the Port's operational Edge Port parameter value, for the CIST. True(1) if it is an Oper Edge Port.")
ieee8021MstpCistPortMacEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortMacEnabled.setReference('12.8.2.1.3 p)')
if mibBuilder.loadTexts: ieee8021MstpCistPortMacEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortMacEnabled.setDescription('In a Bridge that supports the MAC Enabled parameter, the current state of the MAC Enabled parameter. True(1) indicates that adminstratively the MAC is set as if it was connected to a point-to-point LAN.')
ieee8021MstpCistPortMacOperational = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortMacOperational.setReference('12.8.2.1.3 q)')
if mibBuilder.loadTexts: ieee8021MstpCistPortMacOperational.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortMacOperational.setDescription('In a Bridge that supports the MAC Operational parameter, the current state of the MAC Operational parameter. True(1) indicates the MAC is operational.')
ieee8021MstpCistPortRestrictedRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortRestrictedRole.setReference('13.27.64')
if mibBuilder.loadTexts: ieee8021MstpCistPortRestrictedRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortRestrictedRole.setDescription('The current state of the restrictedRole parameter for the Port. True(1) causes the Port not to be selected as Root Port for the CIST or any MSTI. ')
ieee8021MstpCistPortRestrictedTcn = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortRestrictedTcn.setReference('13.27.65')
if mibBuilder.loadTexts: ieee8021MstpCistPortRestrictedTcn.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortRestrictedTcn.setDescription('The current state of the restrictedTcn parameter for the Port. True(1) causes the Port not to propagate topology changes to other Ports.')
ieee8021MstpCistPortRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("root", 1), ("alternate", 2), ("designated", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortRole.setReference('12.8.2.1.3 v)')
if mibBuilder.loadTexts: ieee8021MstpCistPortRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortRole.setDescription('The current Port Role for the Port (i.e., Root, Alternate, Designated, or Backup), for the CIST.')
ieee8021MstpCistPortDisputed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortDisputed.setReference('13.27.22')
if mibBuilder.loadTexts: ieee8021MstpCistPortDisputed.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortDisputed.setDescription('The current value of the disputed variable for the CIST for the Port. A value of true(1) indicates that the disputed variable is set. A value of false(2) indicates that the agreed variable is cleared.')
ieee8021MstpCistPortCistRegionalRootId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 16), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortCistRegionalRootId.setReference('13.9:c, 13.10, 13.27.47')
if mibBuilder.loadTexts: ieee8021MstpCistPortCistRegionalRootId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortCistRegionalRootId.setDescription('In an MSTP Bridge, the CIST Regional Root Identifier, i.e. the Bridge Identifier of the current CIST Regional Root, for the CIST.')
ieee8021MstpCistPortCistPathCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortCistPathCost.setReference('13.27.25, 17.13.11 of IEEE Std 802.1D')
if mibBuilder.loadTexts: ieee8021MstpCistPortCistPathCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortCistPathCost.setDescription("In an MSTP Bridge, the Port's Port Path Cost parameter value for the CIST.")
ieee8021MstpCistPortProtocolMigration = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortProtocolMigration.setReference('13.27.38')
if mibBuilder.loadTexts: ieee8021MstpCistPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortProtocolMigration.setDescription('In an MSTP Bridge, the current value of the mcheck variable for the Port. A value of true(1) forces the state machine to perform functions as per 13.27.38.')
ieee8021MstpCistPortEnableBPDURx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 19), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortEnableBPDURx.setReference('13.27.38')
if mibBuilder.loadTexts: ieee8021MstpCistPortEnableBPDURx.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortEnableBPDURx.setDescription('In an MSTP Bridge, the enableBPDUrx parameter value. A value of false(2) indicates that BPDUs are ignored.')
ieee8021MstpCistPortEnableBPDUTx = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortEnableBPDUTx.setReference('13.27.24')
if mibBuilder.loadTexts: ieee8021MstpCistPortEnableBPDUTx.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortEnableBPDUTx.setDescription('In an MSTP Bridge, the enableBPDUtx parameter value. A value of false(2) indicates that BPDUs are not transmitted.')
ieee8021MstpCistPortPseudoRootId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 21), BridgeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortPseudoRootId.setReference('13.27.51')
if mibBuilder.loadTexts: ieee8021MstpCistPortPseudoRootId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortPseudoRootId.setDescription('In an MSTP Bridge, the pseudoRootId parameter value.')
ieee8021MstpCistPortIsL2Gp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 3, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortIsL2Gp.setReference('13.27.26')
if mibBuilder.loadTexts: ieee8021MstpCistPortIsL2Gp.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortIsL2Gp.setDescription('In an MSTP Bridge, the isL2gp parameter value. A value of true(1) indicates this is an L2GP port.')
ieee8021MstpPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 4), )
if mibBuilder.loadTexts: ieee8021MstpPortTable.setReference('12.8.2.2, 12.8.2.4')
if mibBuilder.loadTexts: ieee8021MstpPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortTable.setDescription("The MSTP Port Table. Each row in the Table represents information regarding a specific Port within the Bridge's Bridge Protocol Entity, for a given MSTI. The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).")
ieee8021MstpPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpPortComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpPortMstId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpPortNum"))
if mibBuilder.loadTexts: ieee8021MstpPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortEntry.setDescription('A MSTP Port Table entry.')
ieee8021MstpPortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpPortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpPortMstId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 2), IEEE8021MstIdentifier())
if mibBuilder.loadTexts: ieee8021MstpPortMstId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortMstId.setDescription('In an MSTP Bridge, this parameter is the MSTID, i.e. the identifier of a Spanning Tree (or MST) Instance.')
ieee8021MstpPortNum = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 3), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021MstpPortNum.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortNum.setDescription("In an MSTP Bridge, the Port's Port Number parameter value for the MSTI, i.e. the number of the Bridge Port for the MSTI.")
ieee8021MstpPortUptime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 4), TimeTicks()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortUptime.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortUptime.setDescription("In an MSTP Bridge, the Port's Uptime parameter value for the MSTI, i.e. the count in seconds of the time elapsed since the Port was last reset or initialized (BEGIN, Annex E).")
ieee8021MstpPortState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("listening", 2), ("learning", 3), ("forwarding", 4), ("blocking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortState.setReference('13.38')
if mibBuilder.loadTexts: ieee8021MstpPortState.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortState.setDescription('In an MSTP Bridge, the current state of the Port (i.e., Disabled, Listening, Learning, Forwarding, or Blocking), for the MSTI.')
ieee8021MstpPortPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpPortPriority.setReference('13.27.47')
if mibBuilder.loadTexts: ieee8021MstpPortPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortPriority.setDescription("In an MSTP Bridge, the Port's Port Priority parameter value for the MSTI, i.e. the priority field for the Port Identifier for the Port for the MSTI.")
ieee8021MstpPortPathCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpPortPathCost.setReference('13.27.33')
if mibBuilder.loadTexts: ieee8021MstpPortPathCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortPathCost.setDescription("In an MSTP Bridge, the Port's Port Path Cost parameter value for the MSTI.")
ieee8021MstpPortDesignatedRoot = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedRoot.setReference('13.27.47')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedRoot.setDescription("In an MSTP Bridge, the Regional Root Identifier component of the Port's MSTI port priority vector, as defined in 13.11, for the MSTI.")
ieee8021MstpPortDesignatedCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedCost.setReference('13.27.47')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedCost.setDescription("In an MSTP Bridge, the Internal Root Path Cost component of the Port's MSTI port priority vector, as defined in 13.11, for the MSTI.")
ieee8021MstpPortDesignatedBridge = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedBridge.setReference('13.27.47')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedBridge.setDescription("In an MSTP Bridge, the Designated Bridge Identifier component of the Port's MSTI port priority vector, as defined in 13.11, for the MSTI.")
ieee8021MstpPortDesignatedPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 11), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedPort.setReference('13.27.47')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortDesignatedPort.setDescription("In an MSTP Bridge, the Designated Port Identifier component of the Port's MSTI port priority vector, as defined in 13.11, for the MSTI.")
ieee8021MstpPortRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("root", 1), ("alternate", 2), ("designated", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortRole.setDescription('In an MSTP Bridge, the current Port Role for the Port (i.e., Root, Alternate, Designated, or Backup), for the MSTI.')
ieee8021MstpPortDisputed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpPortDisputed.setReference('13.27.22')
if mibBuilder.loadTexts: ieee8021MstpPortDisputed.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortDisputed.setDescription('In an MSTP Bridge, the current value of the disputed variable for the MSTI for the Port.')
ieee8021MstpPortAdminPathCost = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpPortAdminPathCost.setReference('13.27.33')
if mibBuilder.loadTexts: ieee8021MstpPortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortAdminPathCost.setDescription("In an MSTP Bridge, the administrative value of the Port's Port Path Cost parameter value for the MSTI. Writing a value of '0' assigns the automatically calculated default Path Cost value to the Port. If the default Path Cost is being used, this object returns '0' when read. This complements the object ieee8021MstpPortPathCost, which returns the operational value of the path cost. The value of this object MUST be retained across reinitializations of the management system.")
ieee8021MstpFidToMstiTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 5), )
if mibBuilder.loadTexts: ieee8021MstpFidToMstiTable.setReference('12.12.2')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiTable.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiTable.setDescription('In an MSTP Bridge, the fixed-length FID to MSTID Allocation Table entry. Each entry in the Table corresponds to a FID, and the value of the entry specifies the MSTID of the spanning tree to which the set of VLANs supported by that FID are assigned. A value of zero in an entry specifies that the set of VLANs supported by that FID are assigned to the CST. The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).')
ieee8021MstpFidToMstiEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 5, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiFid"))
if mibBuilder.loadTexts: ieee8021MstpFidToMstiEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiEntry.setDescription('In an MSTP Bridge, a FID to MSTID Allocation Table entry.')
ieee8021MstpFidToMstiComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 5, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpFidToMstiComponentId.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpFidToMstiFid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: ieee8021MstpFidToMstiFid.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiFid.setDescription('In an MSTP Bridge, the FID of the entry in the FID to MSTID Allocation Table.')
ieee8021MstpFidToMstiMstId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 5, 1, 3), IEEE8021MstIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpFidToMstiMstId.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiMstId.setDescription('In an MSTP Bridge, the MSTID to which the FID (of the entry in the FID to MSTID Allocation Table) is to be allocated.')
ieee8021MstpFidToMstiV2Table = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 9), )
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Table.setReference('12.12.2')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Table.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Table.setDescription('In an MSTP Bridge, the fixed-length FID to MSTID Allocation Table entry. Each entry in the Table corresponds to a FID, and the value of the entry specifies the MSTID of the spanning tree to which the set of VLANs supported by that FID are assigned. A value of zero in an entry specifies that the set of VLANs supported by that FID are assigned to the CST. The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).')
ieee8021MstpFidToMstiV2Entry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 9, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiV2ComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiV2Fid"))
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Entry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Entry.setDescription('In an MSTP Bridge, a FID to MSTID Allocation Table entry.')
ieee8021MstpFidToMstiV2ComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 9, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2ComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2ComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpFidToMstiV2Fid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Fid.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Fid.setDescription('In an MSTP Bridge, the FID of the entry in the FID to MSTID Allocation Table.')
ieee8021MstpFidToMstiV2MstId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2MstId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2MstId.setDescription('In an MSTP Bridge, the MSTID to which the FID (of the entry in the FID to MSTID Allocation Table) is to be allocated. In an SPT Bridge, the value 4095 is used to indicate unused (non-filtering) FIDs.')
ieee8021MstpVlanTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 6), )
if mibBuilder.loadTexts: ieee8021MstpVlanTable.setReference('12.12.3.1')
if mibBuilder.loadTexts: ieee8021MstpVlanTable.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpVlanTable.setDescription('In an MSTP Bridge, the fixed-length (4094 elements), read-only, MST Configuration Table. Its elements are derived from other configuration information held by the Bridge; specifically, the current state of the VID to FID Allocation Table (8.8.8, 12.10.1),and the FID to MSTID Allocation Table (8.9.3, 12.12.2). Hence, changes made to either of these Tables can in turn affect the contents of the MST Configuration Table, and also affect the value of the digest element of the MST Configuration Identifier. The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).')
ieee8021MstpVlanEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 6, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpVlanComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpVlanId"))
if mibBuilder.loadTexts: ieee8021MstpVlanEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpVlanEntry.setDescription('In an MSTP Bridge, a MST Configuration Table entry.')
ieee8021MstpVlanComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 6, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpVlanComponentId.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpVlanComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 6, 1, 2), IEEE8021VlanIndex())
if mibBuilder.loadTexts: ieee8021MstpVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpVlanId.setDescription('In an MSTP Bridge, the VID of the entry in the MST Configuration Table.')
ieee8021MstpVlanMstId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 6, 1, 3), IEEE8021MstIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpVlanMstId.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpVlanMstId.setDescription('In an MSTP Bridge, the MSTID value corresponding to the VID of the entry in the MST Configuration Table.')
ieee8021MstpVlanV2Table = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 10), )
if mibBuilder.loadTexts: ieee8021MstpVlanV2Table.setReference('12.12.3.1')
if mibBuilder.loadTexts: ieee8021MstpVlanV2Table.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVlanV2Table.setDescription('In an MSTP Bridge, the fixed-length (4094 elements), read-only, MST Configuration Table. Its elements are derived from other configuration information held by the Bridge; specifically, the current state of the VID to FID Allocation Table (8.8.8, 12.10.1),and the FID to MSTID Allocation Table (8.9.3, 12.12.2). Hence, changes made to either of these Tables can in turn affect the contents of the MST Configuration Table, and also affect the value of the digest element of the MST Configuration Identifier. The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).')
ieee8021MstpVlanV2Entry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 10, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpVlanV2ComponentId"), (0, "IEEE8021-MSTP-MIB", "ieee8021MstpVlanV2Id"))
if mibBuilder.loadTexts: ieee8021MstpVlanV2Entry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVlanV2Entry.setDescription('In an MSTP Bridge, a MST Configuration Table entry.')
ieee8021MstpVlanV2ComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 10, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpVlanV2ComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVlanV2ComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpVlanV2Id = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 10, 1, 2), IEEE8021VlanIndex())
if mibBuilder.loadTexts: ieee8021MstpVlanV2Id.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVlanV2Id.setDescription('In an MSTP Bridge, the VID of the entry in the MST Configuration Table.')
ieee8021MstpVlanV2MstId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpVlanV2MstId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVlanV2MstId.setDescription('In an MSTP Bridge, the MSTID value corresponding to the VID of the entry in the MST Configuration Table. In an SPT Bridge, a value of 4095 is used to indicate SPVIDs.')
ieee8021MstpConfigIdTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 7), )
if mibBuilder.loadTexts: ieee8021MstpConfigIdTable.setReference('12.12.3.3, 12.12.3.4')
if mibBuilder.loadTexts: ieee8021MstpConfigIdTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigIdTable.setDescription('A table containing the MST Configuration Identifier for each virtual Bridge. In simple situations where there is only a single component, there will only be a single entry in this table (i.e., only a single MST Configuration Identifier). The values of all writable objects in this table MUST be retained across reinitializations of the management system. Note that entries will exist in this table only for Bridge components for which the corresponding instance of ieee8021SpanningTreeVersion (from the IEEE8021-SPANNING-TREE-MIB) has a value of mstp(3).')
ieee8021MstpConfigIdEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 7, 1), ).setIndexNames((0, "IEEE8021-MSTP-MIB", "ieee8021MstpConfigIdComponentId"))
if mibBuilder.loadTexts: ieee8021MstpConfigIdEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigIdEntry.setDescription('An entry contining the MST Configuration Identifier of a Bridge.')
ieee8021MstpConfigIdComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 7, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021MstpConfigIdComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigIdComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual Bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021MstpConfigIdFormatSelector = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpConfigIdFormatSelector.setReference('13.8:1')
if mibBuilder.loadTexts: ieee8021MstpConfigIdFormatSelector.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigIdFormatSelector.setDescription('In an MSTP Bridge, the Configuration Identifier Format Selector in use by the Bridge, in the MST Configuration Identifier. This has a value of 0 to indicate the format specified in IEEE Std 802.1Q.')
ieee8021MstpConfigurationName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 7, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpConfigurationName.setReference('13.8:2')
if mibBuilder.loadTexts: ieee8021MstpConfigurationName.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigurationName.setDescription('In an MSTP Bridge, the Configuration Name in the MST Configuration Identifier.')
ieee8021MstpRevisionLevel = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpRevisionLevel.setReference('13.8:3')
if mibBuilder.loadTexts: ieee8021MstpRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpRevisionLevel.setDescription('In an MSTP Bridge, the Revision Level in the MST Configuration Identifier.')
ieee8021MstpConfigurationDigest = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpConfigurationDigest.setReference('13.8:4')
if mibBuilder.loadTexts: ieee8021MstpConfigurationDigest.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigurationDigest.setDescription('In an MSTP Bridge, the Configuration Digest in the MST Configuration Identifier.')
ieee8021MstpCistPortExtensionTable = MibTable((1, 3, 111, 2, 802, 1, 1, 6, 1, 8), )
if mibBuilder.loadTexts: ieee8021MstpCistPortExtensionTable.setReference('12.8.2')
if mibBuilder.loadTexts: ieee8021MstpCistPortExtensionTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortExtensionTable.setDescription("The CIST Port Extensions Table. Each row in the Table represents information regarding a specific Port within the Bridge's Bridge Protocol Entity, for the CIST.")
ieee8021MstpCistPortExtensionEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 6, 1, 8, 1), )
ieee8021MstpCistPortEntry.registerAugmentions(("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortExtensionEntry"))
ieee8021MstpCistPortExtensionEntry.setIndexNames(*ieee8021MstpCistPortEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021MstpCistPortExtensionEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortExtensionEntry.setDescription('A list of additional objects containing information maintained by every port about the CIST state for that port.')
ieee8021MstpCistPortAutoEdgePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 8, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021MstpCistPortAutoEdgePort.setReference('12.8.2.1.3 )')
if mibBuilder.loadTexts: ieee8021MstpCistPortAutoEdgePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortAutoEdgePort.setDescription('The administrative value of the Auto Edge Port parameter. A value of true(1) indicates if the Bridge detection state machine (BDM, 13.31) is to detect other Bridges attached to the LAN, and set ieee8021SpanningTreeRstpPortOperEdgePort automatically. The default value is true(1) This is optional and provided only by implementations that support the automatic identification of edge ports. The value of this object MUST be retained across reinitializations of the management system.')
ieee8021MstpCistPortAutoIsolatePort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 6, 1, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021MstpCistPortAutoIsolatePort.setReference('12.8.2.1.3')
if mibBuilder.loadTexts: ieee8021MstpCistPortAutoIsolatePort.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortAutoIsolatePort.setDescription('The operational value of the Isolate Port parameter. A value of true(1) indicates a Designated Port will transition to discarding if both ieee8021SpanningTreeRstpPortAdminEdgePort and ieee8021SpanningTreeRstpPortAutoEdgePort are FALSE and the other Bridge presumed to be attached to the same point-to-point LAN does not transmit periodic BPDUs. This is optional and provided only by implementations that support the automatic identification of fragile Bridges.')
ieee8021MstpGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 6, 2, 1))
ieee8021MstpCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 6, 2, 2))
ieee8021MstpCistGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 1)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpCistBridgeIdentifier"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistTopologyChange"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistRegionalRootIdentifier"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPathCost"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistMaxHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpCistGroup = ieee8021MstpCistGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistGroup.setDescription('Objects for the CIST group')
ieee8021MstpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 2)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpBridgeId"), ("IEEE8021-MSTP-MIB", "ieee8021MstpTimeSinceTopologyChange"), ("IEEE8021-MSTP-MIB", "ieee8021MstpTopologyChanges"), ("IEEE8021-MSTP-MIB", "ieee8021MstpTopologyChange"), ("IEEE8021-MSTP-MIB", "ieee8021MstpDesignatedRoot"), ("IEEE8021-MSTP-MIB", "ieee8021MstpRootPathCost"), ("IEEE8021-MSTP-MIB", "ieee8021MstpRootPort"), ("IEEE8021-MSTP-MIB", "ieee8021MstpBridgePriority"), ("IEEE8021-MSTP-MIB", "ieee8021MstpVids0"), ("IEEE8021-MSTP-MIB", "ieee8021MstpVids1"), ("IEEE8021-MSTP-MIB", "ieee8021MstpVids2"), ("IEEE8021-MSTP-MIB", "ieee8021MstpVids3"), ("IEEE8021-MSTP-MIB", "ieee8021MstpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpGroup = ieee8021MstpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpGroup.setDescription('Objects for the MST group')
ieee8021MstpCistPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 3)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortUptime"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortAdminPathCost"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortDesignatedRoot"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortTopologyChangeAck"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortHelloTime"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortAdminEdgePort"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortOperEdgePort"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortMacEnabled"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortMacOperational"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortRestrictedRole"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortRestrictedTcn"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortRole"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortDisputed"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortCistRegionalRootId"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortCistPathCost"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortProtocolMigration"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortEnableBPDURx"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortEnableBPDUTx"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortPseudoRootId"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortIsL2Gp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpCistPortGroup = ieee8021MstpCistPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortGroup.setDescription('Objects for the CIST Port group')
ieee8021MstpPortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 4)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpPortUptime"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortState"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortPriority"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortPathCost"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortDesignatedRoot"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortDesignatedCost"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortDesignatedBridge"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortDesignatedPort"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortRole"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortDisputed"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortAdminPathCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpPortGroup = ieee8021MstpPortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpPortGroup.setDescription('Objects for the MST Port group')
ieee8021MstpFidToMstiGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 5)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiMstId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpFidToMstiGroup = ieee8021MstpFidToMstiGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiGroup.setDescription('Objects for the MST FID to MSTID Allocation Table group')
ieee8021MstpVlanGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 6)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpVlanMstId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpVlanGroup = ieee8021MstpVlanGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpVlanGroup.setDescription('Objects for the MST Configuration Table group')
ieee8021MstpConfigIdGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 7)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpConfigIdFormatSelector"), ("IEEE8021-MSTP-MIB", "ieee8021MstpConfigurationName"), ("IEEE8021-MSTP-MIB", "ieee8021MstpRevisionLevel"), ("IEEE8021-MSTP-MIB", "ieee8021MstpConfigurationDigest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpConfigIdGroup = ieee8021MstpConfigIdGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpConfigIdGroup.setDescription('Objects for the MST Configuration Identifier group')
ieee8021MstpCistPortExtensionGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 8)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortAutoEdgePort"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortAutoIsolatePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpCistPortExtensionGroup = ieee8021MstpCistPortExtensionGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpCistPortExtensionGroup.setDescription('Objects for the CIST Port Extension group for fragile Bridges')
ieee8021MstpFidToMstiV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 9)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiV2MstId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpFidToMstiV2Group = ieee8021MstpFidToMstiV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpFidToMstiV2Group.setDescription('Objects for the MST FID to MSTID Allocation Table group for SPB')
ieee8021MstpVlanV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 6, 2, 1, 10)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpVlanV2MstId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpVlanV2Group = ieee8021MstpVlanV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpVlanV2Group.setDescription('Objects for the MST Configuration Table group for SPB')
ieee8021MstpCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 6, 2, 2, 1)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpCistGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpVlanGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpConfigIdGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortExtensionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpCompliance = ieee8021MstpCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021MstpCompliance.setDescription('The compliance statement for devices supporting Multiple Spanning Tree as defined in 13 of IEEE Std 802.1Q.')
ieee8021MstpComplianceV2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 6, 2, 2, 2)).setObjects(("IEEE8021-MSTP-MIB", "ieee8021MstpCistGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpPortGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpFidToMstiV2Group"), ("IEEE8021-MSTP-MIB", "ieee8021MstpVlanV2Group"), ("IEEE8021-MSTP-MIB", "ieee8021MstpConfigIdGroup"), ("IEEE8021-MSTP-MIB", "ieee8021MstpCistPortExtensionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021MstpComplianceV2 = ieee8021MstpComplianceV2.setStatus('current')
if mibBuilder.loadTexts: ieee8021MstpComplianceV2.setDescription('The compliance statement for devices supporting Multiple Spanning Tree as defined in 13 of IEEE Std 802.1Q.')
mibBuilder.exportSymbols("IEEE8021-MSTP-MIB", ieee8021MstpCistPortIsL2Gp=ieee8021MstpCistPortIsL2Gp, ieee8021MstpFidToMstiGroup=ieee8021MstpFidToMstiGroup, ieee8021MstpPortEntry=ieee8021MstpPortEntry, ieee8021MstpVids0=ieee8021MstpVids0, ieee8021MstpFidToMstiV2Group=ieee8021MstpFidToMstiV2Group, ieee8021MstpCistGroup=ieee8021MstpCistGroup, ieee8021MstpCistPortCistRegionalRootId=ieee8021MstpCistPortCistRegionalRootId, ieee8021MstpCistPortRestrictedRole=ieee8021MstpCistPortRestrictedRole, ieee8021MstpPortGroup=ieee8021MstpPortGroup, ieee8021MstpFidToMstiFid=ieee8021MstpFidToMstiFid, ieee8021MstpVlanV2Group=ieee8021MstpVlanV2Group, ieee8021MstpPortPriority=ieee8021MstpPortPriority, ieee8021MstpVids3=ieee8021MstpVids3, ieee8021MstpFidToMstiV2Fid=ieee8021MstpFidToMstiV2Fid, ieee8021MstpEntry=ieee8021MstpEntry, ieee8021MstpCistPathCost=ieee8021MstpCistPathCost, ieee8021MstpCistPortExtensionGroup=ieee8021MstpCistPortExtensionGroup, ieee8021MstpCistPortPseudoRootId=ieee8021MstpCistPortPseudoRootId, ieee8021MstpCistPortGroup=ieee8021MstpCistPortGroup, ieee8021MstpRevisionLevel=ieee8021MstpRevisionLevel, ieee8021MstpTopologyChange=ieee8021MstpTopologyChange, ieee8021MstpFidToMstiV2Table=ieee8021MstpFidToMstiV2Table, ieee8021MstpCompliance=ieee8021MstpCompliance, ieee8021MstpTimeSinceTopologyChange=ieee8021MstpTimeSinceTopologyChange, ieee8021MstpMib=ieee8021MstpMib, ieee8021MstpVlanV2MstId=ieee8021MstpVlanV2MstId, ieee8021MstpCistPortExtensionTable=ieee8021MstpCistPortExtensionTable, ieee8021MstpCistPortDesignatedRoot=ieee8021MstpCistPortDesignatedRoot, ieee8021MstpRowStatus=ieee8021MstpRowStatus, ieee8021MstpCistPortEntry=ieee8021MstpCistPortEntry, ieee8021MstpPortPathCost=ieee8021MstpPortPathCost, ieee8021MstpVlanMstId=ieee8021MstpVlanMstId, ieee8021MstpComponentId=ieee8021MstpComponentId, ieee8021MstpFidToMstiV2MstId=ieee8021MstpFidToMstiV2MstId, ieee8021MstpCistPortNum=ieee8021MstpCistPortNum, ieee8021MstpFidToMstiEntry=ieee8021MstpFidToMstiEntry, ieee8021MstpFidToMstiV2ComponentId=ieee8021MstpFidToMstiV2ComponentId, ieee8021MstpObjects=ieee8021MstpObjects, ieee8021MstpFidToMstiMstId=ieee8021MstpFidToMstiMstId, ieee8021MstpCistPortEnableBPDUTx=ieee8021MstpCistPortEnableBPDUTx, ieee8021MstpVlanComponentId=ieee8021MstpVlanComponentId, ieee8021MstpCistPortAdminEdgePort=ieee8021MstpCistPortAdminEdgePort, ieee8021MstpPortRole=ieee8021MstpPortRole, ieee8021MstpCistPortRestrictedTcn=ieee8021MstpCistPortRestrictedTcn, ieee8021MstpRootPort=ieee8021MstpRootPort, ieee8021MstpComplianceV2=ieee8021MstpComplianceV2, ieee8021MstpVids1=ieee8021MstpVids1, ieee8021MstpCistPortCistPathCost=ieee8021MstpCistPortCistPathCost, ieee8021MstpVlanTable=ieee8021MstpVlanTable, ieee8021MstpTopologyChanges=ieee8021MstpTopologyChanges, ieee8021MstpCistPortUptime=ieee8021MstpCistPortUptime, ieee8021MstpCistRegionalRootIdentifier=ieee8021MstpCistRegionalRootIdentifier, ieee8021MstpConformance=ieee8021MstpConformance, ieee8021MstpPortUptime=ieee8021MstpPortUptime, ieee8021MstpCistPortMacEnabled=ieee8021MstpCistPortMacEnabled, ieee8021MstpCistPortAutoEdgePort=ieee8021MstpCistPortAutoEdgePort, ieee8021MstpCistPortHelloTime=ieee8021MstpCistPortHelloTime, ieee8021MstpCistTable=ieee8021MstpCistTable, ieee8021MstpCistPortAutoIsolatePort=ieee8021MstpCistPortAutoIsolatePort, ieee8021MstpConfigIdComponentId=ieee8021MstpConfigIdComponentId, ieee8021MstpTable=ieee8021MstpTable, ieee8021MstpPortTable=ieee8021MstpPortTable, ieee8021MstpVids2=ieee8021MstpVids2, ieee8021MstpGroups=ieee8021MstpGroups, ieee8021MstpVlanEntry=ieee8021MstpVlanEntry, ieee8021MstpNotifications=ieee8021MstpNotifications, ieee8021MstpConfigIdFormatSelector=ieee8021MstpConfigIdFormatSelector, ieee8021MstpPortState=ieee8021MstpPortState, ieee8021MstpVlanId=ieee8021MstpVlanId, ieee8021MstpPortComponentId=ieee8021MstpPortComponentId, ieee8021MstpConfigIdGroup=ieee8021MstpConfigIdGroup, ieee8021MstpCistMaxHops=ieee8021MstpCistMaxHops, ieee8021MstpCistPortTopologyChangeAck=ieee8021MstpCistPortTopologyChangeAck, ieee8021MstpFidToMstiComponentId=ieee8021MstpFidToMstiComponentId, ieee8021MstpCistPortTable=ieee8021MstpCistPortTable, ieee8021MstpPortDesignatedPort=ieee8021MstpPortDesignatedPort, ieee8021MstpCistPortExtensionEntry=ieee8021MstpCistPortExtensionEntry, ieee8021MstpConfigIdTable=ieee8021MstpConfigIdTable, ieee8021MstpCistPortAdminPathCost=ieee8021MstpCistPortAdminPathCost, ieee8021MstpVlanV2Table=ieee8021MstpVlanV2Table, ieee8021MstpCistTopologyChange=ieee8021MstpCistTopologyChange, ieee8021MstpCistPortRole=ieee8021MstpCistPortRole, ieee8021MstpCistPortDisputed=ieee8021MstpCistPortDisputed, ieee8021MstpCistPortMacOperational=ieee8021MstpCistPortMacOperational, ieee8021MstpCompliances=ieee8021MstpCompliances, ieee8021MstpCistPortEnableBPDURx=ieee8021MstpCistPortEnableBPDURx, ieee8021MstpFidToMstiV2Entry=ieee8021MstpFidToMstiV2Entry, ieee8021MstpCistComponentId=ieee8021MstpCistComponentId, ieee8021MstpCistEntry=ieee8021MstpCistEntry, ieee8021MstpBridgePriority=ieee8021MstpBridgePriority, ieee8021MstpVlanV2ComponentId=ieee8021MstpVlanV2ComponentId, ieee8021MstpId=ieee8021MstpId, ieee8021MstpPortDesignatedBridge=ieee8021MstpPortDesignatedBridge, ieee8021MstpFidToMstiTable=ieee8021MstpFidToMstiTable, ieee8021MstpVlanGroup=ieee8021MstpVlanGroup, ieee8021MstpCistPortOperEdgePort=ieee8021MstpCistPortOperEdgePort, ieee8021MstpDesignatedRoot=ieee8021MstpDesignatedRoot, ieee8021MstpBridgeId=ieee8021MstpBridgeId, ieee8021MstpConfigurationName=ieee8021MstpConfigurationName, ieee8021MstpVlanV2Entry=ieee8021MstpVlanV2Entry, PYSNMP_MODULE_ID=ieee8021MstpMib, ieee8021MstpCistBridgeIdentifier=ieee8021MstpCistBridgeIdentifier, ieee8021MstpConfigurationDigest=ieee8021MstpConfigurationDigest, ieee8021MstpRootPathCost=ieee8021MstpRootPathCost, ieee8021MstpConfigIdEntry=ieee8021MstpConfigIdEntry, ieee8021MstpPortNum=ieee8021MstpPortNum, ieee8021MstpPortDesignatedCost=ieee8021MstpPortDesignatedCost, ieee8021MstpPortMstId=ieee8021MstpPortMstId, ieee8021MstpGroup=ieee8021MstpGroup, ieee8021MstpCistPortProtocolMigration=ieee8021MstpCistPortProtocolMigration, ieee8021MstpPortAdminPathCost=ieee8021MstpPortAdminPathCost, ieee8021MstpVlanV2Id=ieee8021MstpVlanV2Id, ieee8021MstpPortDesignatedRoot=ieee8021MstpPortDesignatedRoot, ieee8021MstpPortDisputed=ieee8021MstpPortDisputed, ieee8021MstpCistPortComponentId=ieee8021MstpCistPortComponentId)
