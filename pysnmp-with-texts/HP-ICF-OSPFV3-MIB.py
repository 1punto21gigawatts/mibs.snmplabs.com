#
# PySNMP MIB module HP-ICF-OSPFV3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-OSPFV3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:34:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
HpicfOspfLogAction, HpicfOspfLogType = mibBuilder.importSymbols("HP-ICF-OSPF", "HpicfOspfLogAction", "HpicfOspfLogType")
InetAddressIPv6, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6")
Metric, BigMetric = mibBuilder.importSymbols("OSPF-MIB", "Metric", "BigMetric")
ospfv3LinkLsdbRouterId, Ospfv3RouterIdTC, ospfv3AreaLsdbRouterId, ospfv3NbrEntry, ospfv3LinkLsdbIfInstId, ospfv3IfInstId, ospfv3AsLsdbEntry, ospfv3LinkLsdbEntry, ospfv3IfIndex, ospfv3LinkLsdbLsid, ospfv3AreaEntry, ospfv3AreaLsdbType, ospfv3LinkLsdbIfIndex, ospfv3AreaLsdbAreaId, ospfv3AreaLsdbEntry, ospfv3IfEntry, ospfv3AreaLsdbLsid, ospfv3LinkLsdbType, ospfv3AreaAggregateEntry = mibBuilder.importSymbols("OSPFV3-MIB", "ospfv3LinkLsdbRouterId", "Ospfv3RouterIdTC", "ospfv3AreaLsdbRouterId", "ospfv3NbrEntry", "ospfv3LinkLsdbIfInstId", "ospfv3IfInstId", "ospfv3AsLsdbEntry", "ospfv3LinkLsdbEntry", "ospfv3IfIndex", "ospfv3LinkLsdbLsid", "ospfv3AreaEntry", "ospfv3AreaLsdbType", "ospfv3LinkLsdbIfIndex", "ospfv3AreaLsdbAreaId", "ospfv3AreaLsdbEntry", "ospfv3IfEntry", "ospfv3AreaLsdbLsid", "ospfv3LinkLsdbType", "ospfv3AreaAggregateEntry")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, MibIdentifier, iso, ModuleIdentity, Unsigned32, TimeTicks, Bits, Counter64, Gauge32, NotificationType, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "iso", "ModuleIdentity", "Unsigned32", "TimeTicks", "Bits", "Counter64", "Gauge32", "NotificationType", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
hpicfOspfv3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44))
hpicfOspfv3MIB.setRevisions(('2017-05-18 00:00', '2014-06-13 00:00', '2012-04-30 00:00', '2012-04-20 00:00', '2011-06-13 19:53', '2010-11-04 00:00', '2009-02-05 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfOspfv3MIB.setRevisionsDescriptions(('Added hpicfOspfv3ReferenceCost. Added hpicfOspfv3IfFlagValue Added hpicfOspfv3MetricGroup Added hpicfOspfv3Compliance2 Deprecated hpicfOspfv3Compliance.', 'Updated the descriptions for MIB objects. Deleted Notifications.', 'Added objects in hpicfOspfv3NbrTable hpicfOspfv3NbrDataBaseSummary hpicfOspfv3NbrLinkStateRequest hpicfOspfv3NbrRestartState Added objected in hpicfOspfv3IfStatsTable hpicfOspfv3IfSentTotalErrorCount hpicfOspfv3IfRcvdTotalErrorCount', 'Added hpicfOspfv3AreaLsdbStatsTable, hpicfOspfv3AreaLsdbStatsTable and added objects hpicfOspfv3AreaLsdbStatRtrLsaCnt hpicfOspfv3AreaLsdbStatNwLsaCnt hpicfOspfv3AreaLsdbStatInterPreLsaCnt hpicfOspfv3AreaLsdbStatInterRtrLsaCnt hpicfOspfv3AreaLsdbStatIntraPreLsaCnt, Added objects in hpicfOspfv3GeneralGroup hpicfOspfv3AreaCount hpicfOspfv3RestartHelper hpicfOspfv3ASscopeUnknownLsaCount hpicfOspfv3LinkLsdbStatLinkLsa, Added objects in hpicfOspfv3LinkLsdbTable, Added objects in hpicfOspfv3AreaTable hpicfOspfv3AreaNbrDownCount hpicfOspfv3AreaNbrAttemptCount hpicfOspfv3AreaNbrInitCount hpicfOspfv3AreaNbr2wayCount hpicfOspfv3AreaNbrExstartCount hpicfOspfv3AreaNbrExchangeCount hpicfOspfv3AreaNbrLoadingCount hpicfOspfv3AreaNbrFullCount hpicfOspfv3AreaInterfaceCount hpicfOspfv3AreaScopeUnknownLsaCount Added objects in hpicfOspfv3AreaLsdbTable hpicfOspfv3AreaLsdbLsaLength hpicfOspfv3AreaLsdbLinks', 'Added hpicfOspfv3AreaAggregateTable, hpicfOspfv3AreaAggregateEntry, HpicfOspfv3AreaAggregateEntry and hpicfOspfv3AreaAggregateCost', "Added 'hpicfOspfv3AreaTable', 'hpicfOspfv3VirtIntfTable' and added objects in 'hpicfOspfv3IfTable'", 'Initial revision.',))
if mibBuilder.loadTexts: hpicfOspfv3MIB.setLastUpdated('201705180000Z')
if mibBuilder.loadTexts: hpicfOspfv3MIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfOspfv3MIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfOspfv3MIB.setDescription('The MIB module contains HP proprietary extensions to the OSPFV3-MIB module.')
hpicfOspfv3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1))
hpicfOspfv3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2))
hpicfOspfv3GeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1))
hpicfOspfv3DefaultImportMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 1), BigMetric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3DefaultImportMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3DefaultImportMetric.setDescription('The default metric used for advertising external routes by this router.')
hpicfOspfv3DefaultImportMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3DefaultImportMetricType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3DefaultImportMetricType.setDescription('The default metric type used for advertising external routes by this router.')
hpicfOspfv3IntraAreaDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3IntraAreaDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAreaDistance.setDescription("The administrative distance to associate with intra-area routes learned by OSPF. Routes with lower distances are preferred. By default, OSPF routes have an administrative distance of 110. Note that the administrative distance settings for OSPF do not affect the choice of routes within OSPF. OSPF will still prefer intra-area routes over inter-area or AS-external routes even if hpicfOspfv3InterAreaDistance or hpicfOspfv3ExternalDistance is lower than hpicfOspfv3IntraAreaDistance. The appropriate administrative distance value is applied to the route that OSPF selects as its best route to a destination and is used to decide whether OSPF's route is preferred over a route from some other source.")
hpicfOspfv3InterAreaDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3InterAreaDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3InterAreaDistance.setDescription("The administrative distance to associate with inter-area routes learned by OSPF. Routes with lower distances are preferred. By default, OSPF routes have an administrative distance of 110. Note that the administrative distance settings for OSPF do not affect the choice of routes within OSPF. OSPF will still prefer intra-area routes over inter-area routes, even if hpicfOspfv3InterAreaDistance is lower than hpicfOspfv3IntraAreaDistance. It will also still prefer inter-area routes over AS-external routes even if hpicfOspfv3ExternalDistance is lower than hpicfOspfv3InterAreaDistance. The appropriate administrative distance value is applied to the route that OSPF selects as its best route to a destination and is used to decide whether OSPF's route is preferred over a route from some other source.")
hpicfOspfv3ExternalDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3ExternalDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3ExternalDistance.setDescription("The administrative distance to associate with AS-external routes learned by OSPF. Routes with lower distances are preferred. By default, OSPF routes have an administrative distance of 110. Note that the administrative distance settings for OSPF do not affect the choice of routes within OSPF. OSPF will still prefer intra-area routes and inter-area routes over AS-external routes even if hpicfOspfv3ExternalDistance is lower than the hpicfOspfv3IntraAreaDistance or hpicfOspfv3InterAreaDistance. The appropriate administrative distance value is applied to the route that OSPF selects as its best route to a destination and is used to decide whether OSPF's route is preferred over a route from some other source.")
hpicfOspfv3SpfThrottleStartInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleStartInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleStartInterval.setDescription('Initial SPF schedule delay')
hpicfOspfv3SpfThrottleWaitInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleWaitInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleWaitInterval.setDescription('Minimum wait time between two consecutive SPFs When spf throttle is triggered.')
hpicfOspfv3SpfThrottleMaxWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleMaxWaitTime.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleMaxWaitTime.setDescription('Maximum time between two consecutive SPFs runs when spf throttling active.')
hpicfOspfv3SpfThrottleCurrentSpfInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleCurrentSpfInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfThrottleCurrentSpfInterval.setDescription('Current dynamic wait interval between SPF computations')
hpicfOspfv3AreaCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaCount.setDescription('Number of areas in a router')
hpicfOspfv3RestartHelper = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3RestartHelper.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RestartHelper.setDescription('Graceful restart helper status A value of true (1) indicates that Restart helper is enabled, false(2) indicates that Restart helper is disabled.')
hpicfOspfv3ASscopeUnknownLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3ASscopeUnknownLsaCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3ASscopeUnknownLsaCount.setDescription('The total number of AS-scope unknown link state advertisements received.')
hpicfOspfv3LinkLsdbStatLinkLsa = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbStatLinkLsa.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbStatLinkLsa.setDescription('This object indicates total number of Link LSAs in the router.')
hpicfOspfv3TotalUnknownLsa = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3TotalUnknownLsa.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3TotalUnknownLsa.setDescription('This object indicates total number of LSAs received with Unknown type.')
hpicfOspfv3ReferenceCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 1, 16), Metric()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3ReferenceCost.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3ReferenceCost.setDescription('The reference cost is used as global configuration for internal area cost & vlan cost.')
hpicfOspfv3IfMetricObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 4))
hpicfOspfv3IfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 4, 1), )
if mibBuilder.loadTexts: hpicfOspfv3IfMetricTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfMetricTable.setDescription('Extensions to the table that contains OSPF Metric specific information.')
hpicfOspfv3IfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 4, 1, 1), )
ospfv3IfEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfMetricEntry"))
hpicfOspfv3IfMetricEntry.setIndexNames(*ospfv3IfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3IfMetricEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfMetricEntry.setDescription('A list of extensions to the information maintained for an OSPF interface.')
hpicfOspfv3IfFlagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3IfFlagValue.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfFlagValue.setDescription('This flag is defined to know the type of OSPF cost configuration.. -1 : Default configuration. 0 : Manual configuration. 1 : Global configuration (value taken from global).')
hpicfOspfv3AsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2), )
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbTable.setDescription('The OSPFv3 AS-Scope Link State Database (LSDB). The LSDB contains the AS-Scope Link State Advertisements from throughout the areas that the device is attached to.')
hpicfOspfv3AsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1), )
ospfv3AsLsdbEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbEntry"))
hpicfOspfv3AsLsdbEntry.setIndexNames(*ospfv3AsLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbEntry.setDescription('A single AS-Scope Link State Advertisement.')
hpicfOspfv3AsLsdbEFTFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 1), Bits().clone(namedValues=NamedValues(("bitE", 0), ("bitF", 1), ("bitT", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbEFTFlags.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbEFTFlags.setDescription('A 32-bit integer Representing the E,F and T bit flags')
hpicfOspfv3AsLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 2), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbMetric.setDescription('The cost associated with this route.')
hpicfOspfv3AsLsdbPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbPrefixLength.setDescription('The Prefix Length of the Address Prefix.')
hpicfOspfv3AsLsdbPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbPrefixOptions.setDescription('The Prefix Options associated with the Address Prefix.')
hpicfOspfv3AsLsdbRefLsType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbRefLsType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbRefLsType.setDescription('If non-zero value, this refers to another LSA type in Link State Database further identified by the Reference Link State ID field')
hpicfOspfv3AsLsdbAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbAddrPrefix.setDescription('The advertised 16-byte Address Prefix.')
hpicfOspfv3AsLsdbFwdingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 7), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbFwdingAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbFwdingAddress.setDescription('If included, Data traffic for the advertised destination will be forwarded to this address.')
hpicfOspfv3AsLsdbExtRouteTags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbExtRouteTags.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbExtRouteTags.setDescription('The 32-bit Route Tag for the advertised Route.')
hpicfOspfv3AsLsdbRefLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbRefLsId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbRefLsId.setDescription('The 32-bit Link state ID of the referenced LSA entry.')
hpicfOspfv3AsLsdbLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbLsaLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbLsaLength.setDescription('This field describes the length of LSA.')
hpicfOspfv3AreaLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3), )
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbTable.setDescription('The OSPFv3 Area-Scope link state database. The LSDB contains the Area-Scope Link State Advertisements from throughout the area that the device is attached to.')
hpicfOspfv3AreaLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1), )
ospfv3AreaLsdbEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbEntry"))
hpicfOspfv3AreaLsdbEntry.setIndexNames(*ospfv3AreaLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfv3AreaLsdbRtrCapBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("bitV", 0), ("bitE", 1), ("bitB", 2), ("bitW", 3), ("bitNt", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRtrCapBits.setReference('OSPF Version 3, Appendix A.4.2 Router LSAs, RFC5340')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRtrCapBits.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRtrCapBits.setDescription('This field is valid only for Router LSA. It represents the capabilities of the router in the Area.')
hpicfOspfv3AreaLsdbOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbOptions.setReference('OSPF Version 3, Appendix A.2 The Options field')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbOptions.setDescription('The Options field enables OSPF routers to support (or not support) optional capabilities, and to communicate their capability level to other OSPF routers. This field is valid if the LSA is a Router LSA or a Network LSA, or an Inter-Area-Router LSA.')
hpicfOspfv3AreaLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 3), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbMetric.setDescription('This field is valid only for Router LSA, a Inter-Area_prefix LSA or a NSSA LSA. This field indicates the cost involved in using the interface or route.')
hpicfOspfv3AreaLsdbPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbPrefixLength.setDescription('The Prefix Length of the Address Prefix.')
hpicfOspfv3AreaLsdbPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbPrefixOptions.setDescription('The Prefix Options associated with the Address Prefix.')
hpicfOspfv3AreaLsdbAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbAddrPrefix.setDescription('The advertised 16-byte Address Prefix.')
hpicfOspfv3AreaLsdbDstRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 7), Ospfv3RouterIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbDstRtrId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbDstRtrId.setDescription('The Router ID of the router being described by the LSA. This field is valid if the LSA is a Inter-Area-Router LSA.')
hpicfOspfv3AreaLsdbNumPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbNumPrefixes.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbNumPrefixes.setDescription('This field is valid only for Inter-Area-Prefix LSA and indicates the number of prefixes in the LSA.')
hpicfOspfv3AreaLsdbRefLsType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRefLsType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRefLsType.setDescription('This field is valid only for Inter-Area-Prefix LSA or a NSSA LSA. If non-zero, an LSA with this LS type is to be associated with this LSA.')
hpicfOspfv3AreaLsdbRefLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRefLsId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRefLsId.setDescription('This field is valid only for Inter-Area-Prefix LSA or a NSSA LSA. This field is included only if the Reference LS Type field is set and identifies the LSA with this Link State ID.')
hpicfOspfv3AreaLsdbRefAdvRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 11), Ospfv3RouterIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRefAdvRtrId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbRefAdvRtrId.setDescription('This field is valid only for Inter-Area-Prefix LSA or a NSSA LSA. This field is included only if the Reference LS Type field is set and identifies the LSA having this Router ID as the advertising Router ID.')
hpicfOspfv3AreaLsdbEFTFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 12), Bits().clone(namedValues=NamedValues(("bitE", 0), ("bitF", 1), ("bitT", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbEFTFlags.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbEFTFlags.setDescription('This field is valid only for NSSA LSA. This field represents the E,F and T bit flags')
hpicfOspfv3AreaLsdbFwdingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 13), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbFwdingAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbFwdingAddress.setDescription("This field is valid only for NSSA LSA. This field is present only if the 'F' Bit is set in the EFT flags field and if included, the data traffic for the advertised destination will be forwarded to this address.")
hpicfOspfv3AreaLsdbExtRouteTags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbExtRouteTags.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbExtRouteTags.setDescription("This field is valid only for NSSA LSA. This field is present only if the 'T' Bit is set in the EFT flags field. A 32-bit field which may be used to communicate additional information between AS boundary routers.")
hpicfOspfv3AreaLsdbLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbLsaLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbLsaLength.setDescription('This field describes the length of LSA.')
hpicfOspfv3AreaLsdbLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbLinks.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbLinks.setDescription('This field describes the number of links.')
hpicfOspfv3LinkLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4), )
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbTable.setDescription('The OSPFv3 Link-Scope link state database(LSDB) for non-virtual interfaces. The LSDB contains the Link-Scope Link State Advertisements from the interfaces that the device is attached to.')
hpicfOspfv3LinkLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4, 1), )
ospfv3LinkLsdbEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbEntry"))
hpicfOspfv3LinkLsdbEntry.setIndexNames(*ospfv3LinkLsdbEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbEntry.setDescription('A single Link-Scope Link State Advertisement.')
hpicfOspfv3LinkLsdbRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbRtrPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbRtrPriority.setDescription('This field is the OSPF priority set for this router')
hpicfOspfv3LinkLsdbOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbOptions.setReference('OSPF Version 3, Appendix A.2 The Options field')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbOptions.setDescription('The Options field enables OSPF routers to support (or not support) optional capabilities, and to communicate their capability level to other OSPF routers.')
hpicfOspfv3LinkLsdbLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4, 1, 3), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbLocalAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbLocalAddress.setDescription("The advertising router's link local IPv6 address")
hpicfOspfv3LinkLsdbNumPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbNumPrefixes.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbNumPrefixes.setDescription('The number of other links on the advertising router')
hpicfOspfv3LinkLsdbLsaLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbLsaLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbLsaLength.setDescription('This field describes the length of LSA.')
hpicfOspfv3IfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5), )
if mibBuilder.loadTexts: hpicfOspfv3IfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: hpicfOspfv3IfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfTable.setDescription('The table describes the Ospfv3 interfaces.')
hpicfOspfv3IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1), )
ospfv3IfEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfEntry"))
hpicfOspfv3IfEntry.setIndexNames(*ospfv3IfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3IfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfEntry.setDescription('The Entry describes one Ospfv3 interface.')
hpicfOspfv3IfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOspfv3IfPassive.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfPassive.setDescription('The passive state configuration of the OSPF interface. In the passive mode no OSPF protocol messages are exchanged on this interface. true (1) - The interface is configured to work in Passive mode false (2) - The interface is configured to work in normal mode. This is the default configuration. Changing the value will cause OSPF to reset on this interface and make necessary adjustments to the link state database. All other operations are not defined and will not affect the state of the protocol.')
hpicfOspfv3IfNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfNbrCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfNbrCount.setDescription('This object specifies the number of OSPFv3 neighbors reachable via this interface. This counter should be incremented when a new neighbor is added in the network in which this interface is present. It should be decremented when a neighbor is disconnected.')
hpicfOspfv3IfDRAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1, 10), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfDRAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfDRAddr.setDescription('This object specifies link local ipv6 address of Designated Router on the interface.')
hpicfOspfv3IfBDRAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1, 11), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfBDRAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfBDRAddr.setDescription('This object specifies link local ipv6 address of Backup Designated Router on the interface.')
hpicfOspfv3IfHelloDueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfHelloDueTime.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfHelloDueTime.setDescription('This object specifies the time remaining for the hello timer for the particular Interface to expire.')
hpicfOspfv3IfAdjNbrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfAdjNbrCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfAdjNbrCount.setDescription('This object specifies the number of fully adjacent neighbors present on this interface. This counter should be incremented when a new neighbor becomes fully adjacent. It should be decremented when the neighbor goes out from full state.')
hpicfOspfv3NbrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6), )
if mibBuilder.loadTexts: hpicfOspfv3NbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: hpicfOspfv3NbrTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrTable.setDescription('A table describing all neighbors of the of the OSPFv3 router.')
hpicfOspfv3NbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6, 1), )
if mibBuilder.loadTexts: hpicfOspfv3NbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
ospfv3NbrEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrEntry"))
hpicfOspfv3NbrEntry.setIndexNames(*ospfv3NbrEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3NbrEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrEntry.setDescription('The information regarding a single neighbor.')
hpicfOspfv3NbrUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3NbrUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrUpTime.setDescription('This object specifies the time duration in seconds for which the adjacency with a particular neighbor is active. This should be a monotonically increasing timer for the duration till the adjacency is active. This counter should be reset on losing and re-establishing an adjacency')
hpicfOspfv3NbrTimeToExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3NbrTimeToExpiry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrTimeToExpiry.setDescription('This object specifies the time remaining for the dead timer for the particular neighbor to expire. This counter thus specifies the time in seconds left for an adjacency to be brought down in case no hello packet is received during that interval.')
hpicfOspfv3NbrDataBaseSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3NbrDataBaseSummary.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrDataBaseSummary.setDescription('The number of Link State Advertisements (LSA) sent in Database Description (DD)packet.')
hpicfOspfv3NbrLinkStateRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3NbrLinkStateRequest.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrLinkStateRequest.setDescription('The number of Link State Advertisements (LSA) in link state request list.')
hpicfOspfv3NbrRestartState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("helper", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3NbrRestartState.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrRestartState.setDescription('Describes the Graceful Restart(GR) state. normal(0) - Indicates normal status helper(1) - Helper indicates the router is helping another router which is currently in graceful restart.')
hpicfOspfv3IfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7), )
if mibBuilder.loadTexts: hpicfOspfv3IfStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfStatsTable.setDescription('Table that contains OSPFv3 Interface traffic specific statistics.')
hpicfOspfv3IfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3IfIndex"), (0, "OSPFV3-MIB", "ospfv3IfInstId"))
if mibBuilder.loadTexts: hpicfOspfv3IfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfStatsEntry.setDescription('A list of statistics counters maintained for an OSPFv3 interface traffic information.')
hpicfOspfv3IfSentHelloPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfSentHelloPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfSentHelloPkt.setDescription("The number of OSPFv3 Hello packets sent on the interface. This number is incremented each time an OSPFv3 Hello packet is sent out of an OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfSentDDPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfSentDDPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfSentDDPkt.setDescription("The number of Database Description packets sent on the interface. This number is incremented each time an OSPFv3 DD packet is sent out of an OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfSentLSRPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfSentLSRPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfSentLSRPkt.setDescription("The number of Link State Request packets sent on the interface. This number is incremented each time OSPFv3 LSR packet is sent out of an OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfSentLSUPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfSentLSUPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfSentLSUPkt.setDescription("The number of Link State Update packets sent on the interface. This number is incremented each time OSPFv3 LSU packet is sent out of an OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command.")
hpicfOspfv3IfSentLSAPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfSentLSAPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfSentLSAPkt.setDescription("The number of Link State Acknowledgement packet sent on the interface. This number is incremented each time OSPFv3 LS Ack packet is sent out of an OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command.")
hpicfOspfv3IfRcvdHelloPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdHelloPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdHelloPkt.setDescription("The number of Hello packets received on the interface. This number is incremented each time a hello packet is received on OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfRcvdDDPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdDDPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdDDPkt.setDescription("The number of Database Description packets received on the interface. This number is incremented each time a OSPFv3 DD packet is received on OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfRcvdLSRPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdLSRPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdLSRPkt.setDescription("The number of Link State Request packets received on the interface. This number is incremented each time a OSPFv3 LSR packet is received on OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfRcvdLSUPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdLSUPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdLSUPkt.setDescription("The number of Link State Update packets received on the interface. This number is incremented each time an OSPFv3 LSU packet is received on OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfRcvdLSAPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdLSAPkt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdLSAPkt.setDescription("The number of Link State Acknowledgement packets received on the interface. This number is incremented each time a OSPF LS Ack packet is received on OSPFv3 enabled interface. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command")
hpicfOspfv3IfSentTotalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfSentTotalErrorCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfSentTotalErrorCount.setDescription('This refers to the number of erroneous packets discarded on an OSPFv3 interface while sending errors. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
hpicfOspfv3IfRcvdTotalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdTotalErrorCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfRcvdTotalErrorCount.setDescription('This refers to the number of erroneous packets received on an OSPFv3 interface. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
hpicfOspfv3IfErrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 8), )
if mibBuilder.loadTexts: hpicfOspfv3IfErrorTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfErrorTable.setDescription('Table that contains OSPFv3 Interface traffic specific error information.')
hpicfOspfv3IfErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 8, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3IfIndex"), (0, "OSPFV3-MIB", "ospfv3IfInstId"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfErrorType"))
if mibBuilder.loadTexts: hpicfOspfv3IfErrorEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfErrorEntry.setDescription('A list of error counters maintained for an OSPFv3 interface.')
hpicfOspfv3IfErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfOspfv3IfErrorType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfErrorType.setDescription('This refers to the type of errors in the OSPFv3 packet received on an OSPFv3 enabled interface.')
hpicfOspfv3IfErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IfErrorCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfErrorCount.setDescription("This refers to the number of erroneous packets received on an OSPFv3 interface for each error type. Discontinuities in the value of this counter can occur at re-initialization of the management system. The counters can be cleared for any interface using 'clear ipv6 ospf3 statistics' command.")
hpicfOspfv3IfClearStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 9), )
if mibBuilder.loadTexts: hpicfOspfv3IfClearStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfClearStatsTable.setDescription('A list used to clear statistics information maintained for an OSPFv3 interface.')
hpicfOspfv3IfClearStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 9, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3IfIndex"), (0, "OSPFV3-MIB", "ospfv3IfInstId"))
if mibBuilder.loadTexts: hpicfOspfv3IfClearStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfClearStatsEntry.setDescription('A list used to clear statistics information maintained for an OSPFv3 interface.')
hpicfOspfv3ClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 9, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3ClearCounters.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3ClearCounters.setDescription('When this variable is set to true for a given vlan interface, corresponding interface counters will be cleared. Read of this will always be false.')
hpicfOspfv3SpfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 10), )
if mibBuilder.loadTexts: hpicfOspfv3SpfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfTable.setDescription('Table that contains OSPFv3 SPF execution details.')
hpicfOspfv3SpfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 10, 1), ).setIndexNames((0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3SpfIndex"))
if mibBuilder.loadTexts: hpicfOspfv3SpfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfEntry.setDescription('A list of OSPFv3 SPF algorithm execution details.')
hpicfOspfv3SpfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfOspfv3SpfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfIndex.setDescription("The index in spf table. This can range from 1 to 100 as only last hundred SPF run's reasons will be saved.")
hpicfOspfv3SpfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3SpfReason.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SpfReason.setDescription('The hpicfOspfv3SpfReason refers to the reasons for scheduling an SPF run. The Reasons could be OSPFv3 initialization, adding/deleting interface or link state update received.')
hpicfOspfv3LogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 11), )
if mibBuilder.loadTexts: hpicfOspfv3LogTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LogTable.setDescription('A table containing the configuration parameters for OSPFv3 event logging.')
hpicfOspfv3LogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 11, 1), ).setIndexNames((0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3LogType"))
if mibBuilder.loadTexts: hpicfOspfv3LogEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LogEntry.setDescription('The configuration parameters for OSPFv3 event log entry.')
hpicfOspfv3LogType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 11, 1, 1), HpicfOspfLogType())
if mibBuilder.loadTexts: hpicfOspfv3LogType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LogType.setDescription('The type of the event log in OSPFv3 routing protocol .')
hpicfOspfv3LogAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 11, 1, 2), HpicfOspfLogAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3LogAction.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LogAction.setDescription('The mode of OSPFv3 event logging. If the OSPFv3 log type is set to neighborAdjacencyChanges, then meaning of this field is as follows: If enabled, it logs only the adjacency state transitions to final states. If enabledWithDetail option, it logs all the state transitions and other events and error conditions related to adjacency. If disabled, none of the adjacency related events are logged.')
hpicfOspfv3RouterLSATable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12), )
if mibBuilder.loadTexts: hpicfOspfv3RouterLSATable.setReference('OSPF Version 3, Appendix 4.3 Router-LSAs, rfc 5340')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSATable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSATable.setDescription('This table represents details advertised in router LSA in addition to area LSDB table.')
hpicfOspfv3RouterLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3AreaLsdbAreaId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbType"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbLsid"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3RouterLSANbrIfId"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3RouterLSANbrRtrId"))
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfv3RouterLSANbrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfOspfv3RouterLSANbrIfId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSANbrIfId.setDescription('The Interface Id of the neighbor.')
hpicfOspfv3RouterLSANbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12, 1, 2), Ospfv3RouterIdTC())
if mibBuilder.loadTexts: hpicfOspfv3RouterLSANbrRtrId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSANbrRtrId.setDescription('The Router ID the of the neighbor router.')
hpicfOspfv3RouterLSAIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAIfType.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAIfType.setDescription('The kind of interface being described. One of the following: Type Description --------------------------------------------------- 1 Point-to-point connection to another router 2 Connection to a transit network 3 Reserved 4 Virtual link .')
hpicfOspfv3RouterLSAMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAMetric.setDescription('The cost of using this router interface for outbound traffic.')
hpicfOspfv3RouterLSAIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAIfId.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3RouterLSAIfId.setDescription('The Interface ID assigned to the interface being described.')
hpicfOspfv3NetworkLSATable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 13), )
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSATable.setReference('OSPF Version 3, Appendix 4.4 Network-LSAs')
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSATable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSATable.setDescription('This table represents details advertised in a Network LSA in addition to area LSDB table.')
hpicfOspfv3NetworkLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 13, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3AreaLsdbAreaId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbType"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbLsid"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3NetworkLSASeqNum"))
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSAEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSAEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfv3NetworkLSASeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSASeqNum.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSASeqNum.setDescription('The 32-bit LSA sequence number.')
hpicfOspfv3NetworkLSAAttachedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 13, 1, 2), Ospfv3RouterIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSAAttachedRouter.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NetworkLSAAttachedRouter.setDescription('The 32-bit Router identifier of the attached Router.')
hpicfOspfv3IntraAPLSATable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 14), )
if mibBuilder.loadTexts: hpicfOspfv3IntraAPLSATable.setReference('OSPF Version 3, Appendix 4.6 Intra-Area-Prefix-LSAs')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPLSATable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPLSATable.setDescription('This table represents details advertised in Intra AP LSA in addition to area LSDB table.')
hpicfOspfv3IntraAPLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 14, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3AreaLsdbAreaId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbType"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3AreaLsdbLsid"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3IntraAPAddrPrefix"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3IntraAPPrefixLength"))
if mibBuilder.loadTexts: hpicfOspfv3IntraAPLSAEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPLSAEntry.setDescription('A single Area-Scope Link State Advertisement.')
hpicfOspfv3IntraAPAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 14, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: hpicfOspfv3IntraAPAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPAddrPrefix.setDescription('The advertised 16-byte Address Prefix.')
hpicfOspfv3IntraAPPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpicfOspfv3IntraAPPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPPrefixLength.setDescription('The Prefix Length of the Address Prefix.')
hpicfOspfv3IntraAPPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 14, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IntraAPPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPPrefixOptions.setDescription('The Prefix Options associated with the Address Prefix.')
hpicfOspfv3IntraAPMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 14, 1, 4), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3IntraAPMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IntraAPMetric.setDescription('The Cost associated with the Address Prefix.')
hpicfOspfv3LinkLSATable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 15), )
if mibBuilder.loadTexts: hpicfOspfv3LinkLSATable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLSATable.setDescription('This table represents details advertised in link LSA in addition to link LSDB table.')
hpicfOspfv3LinkLSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 15, 1), ).setIndexNames((0, "OSPFV3-MIB", "ospfv3LinkLsdbIfIndex"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbIfInstId"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbType"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbRouterId"), (0, "OSPFV3-MIB", "ospfv3LinkLsdbLsid"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkAddrPrefix"), (0, "HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkPrefixLength"))
if mibBuilder.loadTexts: hpicfOspfv3LinkLSAEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLSAEntry.setDescription('A single Link-Scope Link State Advertisement.')
hpicfOspfv3LinkAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 15, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: hpicfOspfv3LinkAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkAddrPrefix.setDescription('The address prefix of link advertised in link LSA.')
hpicfOspfv3LinkPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpicfOspfv3LinkPrefixLength.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkPrefixLength.setDescription('The Prefix Length of the Address Prefix.')
hpicfOspfv3LinkPrefixOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 15, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3LinkPrefixOptions.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkPrefixOptions.setDescription('The Prefix Options associated with the Address Prefix.')
hpicfOspfv3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 16))
hpicfOspfv3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 16, 0))
hpicfOspfv3TrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 16, 1))
hpicfOspfv3SetTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfOspfv3SetTrap.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3SetTrap.setDescription('A four-octet string serving as a bit map for the trap events defined by the OSPFv3 traps. This object is used to enable or disable specific OSPFv3 traps where a 1 in the bit field represents enabled. The right-most bit (least significant) represents trap 0. Trap Name BitMap ---------------------------------------- OSPFV3_IF_STATE_CHANGE 0x00001 OSPFV3_VIRT_IF_STATE_CHANGE 0x00002 OSPFV3_NBR_STATE_CHANGE 0x00004 OSPFV3_VIRT_NBR_STATE_CHANGE 0x00008 OSPFV3_INTF_CONFIG_ERROR 0x00010 OSPFV3_VIRT_INTF_CONFIG_ERROR 0x00020 OSPFV3_INTF_RCV_BAD_PKT 0x00040 OSPFV3_VIRT_INTF_RCV_BAD_PKT 0x00080 OSPFV3_RST_STATUS 0x20000 OSPFV3_NBR_RST_HELP_STATUS 0x40000 OSPFV3_VIRT_NBR_RST_HELP_STAT 0x80000 OSPFV3_ALL_TRAPS 0xE00FF')
hpicfOspfv3AreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 19), )
if mibBuilder.loadTexts: hpicfOspfv3AreaAggregateTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaAggregateTable.setDescription('HP proprietary extensions to ospfv3AreaAggregateTable')
hpicfOspfv3AreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 19, 1), )
ospfv3AreaAggregateEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaAggregateEntry"))
hpicfOspfv3AreaAggregateEntry.setIndexNames(*ospfv3AreaAggregateEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3AreaAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaAggregateEntry.setDescription('Each entry is extension of ospfv3AreaAggregateEntry')
hpicfOspfv3AreaAggregateCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 19, 1, 1), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfOspfv3AreaAggregateCost.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaAggregateCost.setDescription('Manually configured cost of the summary advertisement. A value of 0 indicates that the cost calculated by the OSPF standard should be used. Valid costs range from 1-16777215')
hpicfOspfv3AreaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17), )
if mibBuilder.loadTexts: hpicfOspfv3AreaTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaTable.setDescription('This table describes Ospfv3 area.')
hpicfOspfv3AreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1), )
ospfv3AreaEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaEntry"))
hpicfOspfv3AreaEntry.setIndexNames(*ospfv3AreaEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3AreaEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaEntry.setDescription('The object describes Ospfv3 area.')
hpicfOspfv3AreaNbrDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrDownCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrDownCount.setDescription('This object indicates the number of neighbor routers in this area that are in DOWN state.')
hpicfOspfv3AreaNbrAttemptCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrAttemptCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrAttemptCount.setDescription('This object indicates the number of neighbor routers in this area that are in ATTEMPT state.')
hpicfOspfv3AreaNbrInitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrInitCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrInitCount.setDescription('This object indicates the number of neighbor routers in this area that are in INIT state.')
hpicfOspfv3AreaNbr2wayCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbr2wayCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbr2wayCount.setDescription('This object indicates the number of neighbor routers in this area that are in TWO WAY state.')
hpicfOspfv3AreaNbrExstartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrExstartCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrExstartCount.setDescription('This object indicates the number of neighbor routers in this area that are in EX-START state.')
hpicfOspfv3AreaNbrExchangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrExchangeCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrExchangeCount.setDescription('This object indicates the number of neighbor routers in this area that are in EXCHANGE state.')
hpicfOspfv3AreaNbrLoadingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrLoadingCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrLoadingCount.setDescription('This object indicates the number of neighbor routers in this area that are in LOADING state.')
hpicfOspfv3AreaNbrFullCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrFullCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaNbrFullCount.setDescription('This object indicates the number of neighbor routers in this area that are in FULL state.')
hpicfOspfv3AreaInterfaceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaInterfaceCount.setDescription('This object indicates the total number of OSPFv3 interfaces in this area.')
hpicfOspfv3AreaScopeUnknownLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 17, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaScopeUnknownLsaCount.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaScopeUnknownLsaCount.setDescription("The total number of area-scope unknown link state advertisements in this area's link state database.")
hpicfOspfv3AreaLsdbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20), )
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatsTable.setDescription('Table that contains OSPFv3 area link state database statistics specific information.')
hpicfOspfv3AreaLsdbStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20, 1), )
ospfv3AreaEntry.registerAugmentions(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatsEntry"))
hpicfOspfv3AreaLsdbStatsEntry.setIndexNames(*ospfv3AreaEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatsEntry.setDescription('A list of statistics counters maintained for an OSPFv3 area link state database.')
hpicfOspfv3AreaLsdbStatRtrLsaCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatRtrLsaCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatRtrLsaCnt.setDescription('This object indicates number of router LSA per area.')
hpicfOspfv3AreaLsdbStatNwLsaCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatNwLsaCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatNwLsaCnt.setDescription('This object indicates number of network LSA per area.')
hpicfOspfv3AreaLsdbStatInterPreLsaCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatInterPreLsaCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatInterPreLsaCnt.setDescription('This object indicates number of inter-area prefix LSA per area.')
hpicfOspfv3AreaLsdbStatInterRtrLsaCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatInterRtrLsaCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatInterRtrLsaCnt.setDescription('This object indicates number of inter-area router LSA per area.')
hpicfOspfv3AreaLsdbStatIntraPreLsaCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatIntraPreLsaCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatIntraPreLsaCnt.setDescription('This object indicates number of intra-area prefix LSA per area.')
hpicfOspfv3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1))
hpicfOspfv3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 2))
hpicfOspfv3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 2, 1)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3BasicGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfGroup1"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrGroup1"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3StatisticGroup1"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LogGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3TrapControlGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3Compliance = hpicfOspfv3Compliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfOspfv3Compliance.setDescription('The compliance statement')
hpicfOspfv3Compliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 2, 2)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3BasicGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfGroup1"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrGroup1"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3StatisticGroup1"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LogGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3TrapControlGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatsGroup"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3MetricGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3Compliance2 = hpicfOspfv3Compliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3Compliance2.setDescription('The compliance statement')
hpicfOspfv3BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 1)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3DefaultImportMetric"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3DefaultImportMetricType"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3ReferenceCost"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IntraAreaDistance"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3InterAreaDistance"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3ExternalDistance"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3SpfThrottleStartInterval"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3SpfThrottleWaitInterval"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3SpfThrottleMaxWaitTime"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3SpfThrottleCurrentSpfInterval"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaAggregateCost"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3RestartHelper"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3ASscopeUnknownLsaCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbStatLinkLsa"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3TotalUnknownLsa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3BasicGroup = hpicfOspfv3BasicGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3BasicGroup.setDescription('These objects are used for managing/monitoring OSPFv3 global parameters.')
hpicfOspfv3AsLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 2)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbEFTFlags"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbMetric"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbPrefixLength"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbPrefixOptions"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbRefLsType"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbAddrPrefix"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbFwdingAddress"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbExtRouteTags"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbRefLsId"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AsLsdbLsaLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3AsLsdbGroup = hpicfOspfv3AsLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AsLsdbGroup.setDescription('These objects are used for OSPFv3 systems that display their AS-scope link state database.')
hpicfOspfv3AreaLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 3)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbRtrCapBits"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbOptions"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbMetric"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbPrefixLength"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbPrefixOptions"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbAddrPrefix"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbDstRtrId"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbNumPrefixes"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbRefLsType"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbRefLsId"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbRefAdvRtrId"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbEFTFlags"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbFwdingAddress"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbExtRouteTags"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3RouterLSAIfType"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3RouterLSAMetric"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3RouterLSAIfId"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NetworkLSAAttachedRouter"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IntraAPPrefixOptions"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IntraAPMetric"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbLsaLength"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbLinks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3AreaLsdbGroup = hpicfOspfv3AreaLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbGroup.setDescription('These objects are used for OSPFv3 systems that display their Area-scope link state database.')
hpicfOspfv3LinkLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 4)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbRtrPriority"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbOptions"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbLocalAddress"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbNumPrefixes"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkPrefixOptions"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LinkLsdbLsaLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3LinkLsdbGroup = hpicfOspfv3LinkLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LinkLsdbGroup.setDescription('These objects are used for OSPFv3 systems that display their Link-scope link state database for non-virtual interfaces.')
hpicfOspfv3LogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 8)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3LogAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3LogGroup = hpicfOspfv3LogGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3LogGroup.setDescription('A collection of objects for configuring the logging of OSPFv3 adjacency related events.')
hpicfOspfv3TrapControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 9)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3SetTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3TrapControlGroup = hpicfOspfv3TrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3TrapControlGroup.setDescription('A collection of object which is for controlling the hpicfOspfv3Traps.')
hpicfOspfv3AreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 11)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrDownCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrAttemptCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrInitCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbr2wayCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrExstartCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrExchangeCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrLoadingCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaNbrFullCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaInterfaceCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaScopeUnknownLsaCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3AreaGroup = hpicfOspfv3AreaGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaGroup.setDescription('These Area objects used for managing/monitoring OSPFv3 Areas.')
hpicfOspfv3AreaLsdbStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 13)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatRtrLsaCnt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatNwLsaCnt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatInterPreLsaCnt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatInterRtrLsaCnt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3AreaLsdbStatIntraPreLsaCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3AreaLsdbStatsGroup = hpicfOspfv3AreaLsdbStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3AreaLsdbStatsGroup.setDescription('These lsdb objects used for monitoring OSPFv3 statistics per area.')
hpicfOspfv3NbrGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 14)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrUpTime"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrTimeToExpiry"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrDataBaseSummary"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrLinkStateRequest"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3NbrRestartState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3NbrGroup1 = hpicfOspfv3NbrGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3NbrGroup1.setDescription('These neighbor objects are used for managing/monitoring OSPFv3 neighbors.')
hpicfOspfv3StatisticGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 15)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfSentHelloPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfSentDDPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfSentLSRPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfSentLSUPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfSentLSAPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfRcvdHelloPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfRcvdDDPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfRcvdLSRPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfRcvdLSUPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfRcvdLSAPkt"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfErrorCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfSentTotalErrorCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfRcvdTotalErrorCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3ClearCounters"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3SpfReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3StatisticGroup1 = hpicfOspfv3StatisticGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3StatisticGroup1.setDescription('A collection of objects that contain OSPF interface and SPF statistics.')
hpicfOspfv3IfGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 16)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfPassive"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfNbrCount"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfDRAddr"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfBDRAddr"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfHelloDueTime"), ("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfAdjNbrCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3IfGroup1 = hpicfOspfv3IfGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3IfGroup1.setDescription('These interface objects are used for managing/monitoring OSPFv3 interfaces.')
hpicfOspfv3MetricGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 44, 2, 1, 17)).setObjects(("HP-ICF-OSPFV3-MIB", "hpicfOspfv3IfFlagValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfOspfv3MetricGroup = hpicfOspfv3MetricGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfOspfv3MetricGroup.setDescription('Flags to identify global or manual OSPFv3 cost configuration.')
mibBuilder.exportSymbols("HP-ICF-OSPFV3-MIB", hpicfOspfv3Trap=hpicfOspfv3Trap, hpicfOspfv3IfPassive=hpicfOspfv3IfPassive, hpicfOspfv3AreaLsdbLsaLength=hpicfOspfv3AreaLsdbLsaLength, hpicfOspfv3NbrTable=hpicfOspfv3NbrTable, hpicfOspfv3AsLsdbGroup=hpicfOspfv3AsLsdbGroup, hpicfOspfv3IfBDRAddr=hpicfOspfv3IfBDRAddr, hpicfOspfv3AreaNbr2wayCount=hpicfOspfv3AreaNbr2wayCount, hpicfOspfv3NetworkLSAEntry=hpicfOspfv3NetworkLSAEntry, hpicfOspfv3AsLsdbAddrPrefix=hpicfOspfv3AsLsdbAddrPrefix, hpicfOspfv3AreaNbrInitCount=hpicfOspfv3AreaNbrInitCount, hpicfOspfv3NbrLinkStateRequest=hpicfOspfv3NbrLinkStateRequest, hpicfOspfv3AreaLsdbExtRouteTags=hpicfOspfv3AreaLsdbExtRouteTags, hpicfOspfv3Conformance=hpicfOspfv3Conformance, hpicfOspfv3IfSentLSRPkt=hpicfOspfv3IfSentLSRPkt, hpicfOspfv3AsLsdbTable=hpicfOspfv3AsLsdbTable, hpicfOspfv3AreaLsdbNumPrefixes=hpicfOspfv3AreaLsdbNumPrefixes, hpicfOspfv3IntraAPLSATable=hpicfOspfv3IntraAPLSATable, hpicfOspfv3IfFlagValue=hpicfOspfv3IfFlagValue, hpicfOspfv3AreaNbrFullCount=hpicfOspfv3AreaNbrFullCount, hpicfOspfv3IfGroup1=hpicfOspfv3IfGroup1, hpicfOspfv3AreaLsdbStatRtrLsaCnt=hpicfOspfv3AreaLsdbStatRtrLsaCnt, hpicfOspfv3AreaLsdbStatsTable=hpicfOspfv3AreaLsdbStatsTable, hpicfOspfv3AreaLsdbOptions=hpicfOspfv3AreaLsdbOptions, hpicfOspfv3AreaInterfaceCount=hpicfOspfv3AreaInterfaceCount, hpicfOspfv3AreaLsdbPrefixLength=hpicfOspfv3AreaLsdbPrefixLength, hpicfOspfv3AreaLsdbStatNwLsaCnt=hpicfOspfv3AreaLsdbStatNwLsaCnt, hpicfOspfv3AreaAggregateTable=hpicfOspfv3AreaAggregateTable, hpicfOspfv3RouterLSAIfType=hpicfOspfv3RouterLSAIfType, hpicfOspfv3BasicGroup=hpicfOspfv3BasicGroup, hpicfOspfv3AreaLsdbEFTFlags=hpicfOspfv3AreaLsdbEFTFlags, hpicfOspfv3NetworkLSAAttachedRouter=hpicfOspfv3NetworkLSAAttachedRouter, hpicfOspfv3SpfReason=hpicfOspfv3SpfReason, hpicfOspfv3AsLsdbEntry=hpicfOspfv3AsLsdbEntry, hpicfOspfv3RouterLSAMetric=hpicfOspfv3RouterLSAMetric, hpicfOspfv3IfRcvdLSUPkt=hpicfOspfv3IfRcvdLSUPkt, hpicfOspfv3Objects=hpicfOspfv3Objects, hpicfOspfv3IfRcvdHelloPkt=hpicfOspfv3IfRcvdHelloPkt, hpicfOspfv3AsLsdbFwdingAddress=hpicfOspfv3AsLsdbFwdingAddress, hpicfOspfv3SetTrap=hpicfOspfv3SetTrap, hpicfOspfv3IntraAreaDistance=hpicfOspfv3IntraAreaDistance, hpicfOspfv3NbrDataBaseSummary=hpicfOspfv3NbrDataBaseSummary, hpicfOspfv3AreaLsdbGroup=hpicfOspfv3AreaLsdbGroup, hpicfOspfv3AreaCount=hpicfOspfv3AreaCount, hpicfOspfv3AreaEntry=hpicfOspfv3AreaEntry, hpicfOspfv3IfStatsTable=hpicfOspfv3IfStatsTable, hpicfOspfv3LinkLsdbRtrPriority=hpicfOspfv3LinkLsdbRtrPriority, hpicfOspfv3AsLsdbMetric=hpicfOspfv3AsLsdbMetric, hpicfOspfv3AreaNbrLoadingCount=hpicfOspfv3AreaNbrLoadingCount, hpicfOspfv3IntraAPPrefixLength=hpicfOspfv3IntraAPPrefixLength, hpicfOspfv3AreaLsdbRefAdvRtrId=hpicfOspfv3AreaLsdbRefAdvRtrId, hpicfOspfv3AreaLsdbEntry=hpicfOspfv3AreaLsdbEntry, hpicfOspfv3IfNbrCount=hpicfOspfv3IfNbrCount, hpicfOspfv3IfErrorCount=hpicfOspfv3IfErrorCount, hpicfOspfv3Groups=hpicfOspfv3Groups, hpicfOspfv3LogTable=hpicfOspfv3LogTable, hpicfOspfv3IfHelloDueTime=hpicfOspfv3IfHelloDueTime, hpicfOspfv3IfMetricTable=hpicfOspfv3IfMetricTable, hpicfOspfv3TotalUnknownLsa=hpicfOspfv3TotalUnknownLsa, hpicfOspfv3AreaLsdbRefLsId=hpicfOspfv3AreaLsdbRefLsId, hpicfOspfv3SpfIndex=hpicfOspfv3SpfIndex, hpicfOspfv3IfSentDDPkt=hpicfOspfv3IfSentDDPkt, hpicfOspfv3IfMetricObjects=hpicfOspfv3IfMetricObjects, hpicfOspfv3Compliances=hpicfOspfv3Compliances, hpicfOspfv3AreaAggregateEntry=hpicfOspfv3AreaAggregateEntry, hpicfOspfv3NbrRestartState=hpicfOspfv3NbrRestartState, hpicfOspfv3LinkAddrPrefix=hpicfOspfv3LinkAddrPrefix, hpicfOspfv3AreaNbrDownCount=hpicfOspfv3AreaNbrDownCount, hpicfOspfv3AreaLsdbLinks=hpicfOspfv3AreaLsdbLinks, hpicfOspfv3AreaScopeUnknownLsaCount=hpicfOspfv3AreaScopeUnknownLsaCount, hpicfOspfv3AsLsdbPrefixLength=hpicfOspfv3AsLsdbPrefixLength, hpicfOspfv3LinkLsdbNumPrefixes=hpicfOspfv3LinkLsdbNumPrefixes, hpicfOspfv3NetworkLSATable=hpicfOspfv3NetworkLSATable, hpicfOspfv3IfRcvdTotalErrorCount=hpicfOspfv3IfRcvdTotalErrorCount, hpicfOspfv3AreaLsdbAddrPrefix=hpicfOspfv3AreaLsdbAddrPrefix, hpicfOspfv3IfErrorEntry=hpicfOspfv3IfErrorEntry, hpicfOspfv3LogType=hpicfOspfv3LogType, hpicfOspfv3IntraAPAddrPrefix=hpicfOspfv3IntraAPAddrPrefix, hpicfOspfv3AreaLsdbStatInterPreLsaCnt=hpicfOspfv3AreaLsdbStatInterPreLsaCnt, hpicfOspfv3SpfThrottleWaitInterval=hpicfOspfv3SpfThrottleWaitInterval, hpicfOspfv3MetricGroup=hpicfOspfv3MetricGroup, hpicfOspfv3AsLsdbExtRouteTags=hpicfOspfv3AsLsdbExtRouteTags, hpicfOspfv3SpfThrottleStartInterval=hpicfOspfv3SpfThrottleStartInterval, hpicfOspfv3AsLsdbPrefixOptions=hpicfOspfv3AsLsdbPrefixOptions, hpicfOspfv3AsLsdbRefLsId=hpicfOspfv3AsLsdbRefLsId, hpicfOspfv3IfClearStatsEntry=hpicfOspfv3IfClearStatsEntry, hpicfOspfv3Traps=hpicfOspfv3Traps, hpicfOspfv3AreaLsdbStatIntraPreLsaCnt=hpicfOspfv3AreaLsdbStatIntraPreLsaCnt, hpicfOspfv3NbrGroup1=hpicfOspfv3NbrGroup1, hpicfOspfv3DefaultImportMetricType=hpicfOspfv3DefaultImportMetricType, hpicfOspfv3AsLsdbLsaLength=hpicfOspfv3AsLsdbLsaLength, hpicfOspfv3AreaLsdbStatInterRtrLsaCnt=hpicfOspfv3AreaLsdbStatInterRtrLsaCnt, hpicfOspfv3TrapControlGroup=hpicfOspfv3TrapControlGroup, hpicfOspfv3IfRcvdDDPkt=hpicfOspfv3IfRcvdDDPkt, hpicfOspfv3LinkLsdbEntry=hpicfOspfv3LinkLsdbEntry, hpicfOspfv3ReferenceCost=hpicfOspfv3ReferenceCost, hpicfOspfv3SpfThrottleCurrentSpfInterval=hpicfOspfv3SpfThrottleCurrentSpfInterval, hpicfOspfv3NbrEntry=hpicfOspfv3NbrEntry, hpicfOspfv3IfAdjNbrCount=hpicfOspfv3IfAdjNbrCount, hpicfOspfv3StatisticGroup1=hpicfOspfv3StatisticGroup1, hpicfOspfv3AreaLsdbDstRtrId=hpicfOspfv3AreaLsdbDstRtrId, hpicfOspfv3ClearCounters=hpicfOspfv3ClearCounters, hpicfOspfv3AsLsdbEFTFlags=hpicfOspfv3AsLsdbEFTFlags, hpicfOspfv3Compliance=hpicfOspfv3Compliance, hpicfOspfv3IfSentLSUPkt=hpicfOspfv3IfSentLSUPkt, hpicfOspfv3LinkLSATable=hpicfOspfv3LinkLSATable, hpicfOspfv3IfMetricEntry=hpicfOspfv3IfMetricEntry, hpicfOspfv3AreaLsdbStatsEntry=hpicfOspfv3AreaLsdbStatsEntry, hpicfOspfv3Compliance2=hpicfOspfv3Compliance2, hpicfOspfv3NbrUpTime=hpicfOspfv3NbrUpTime, hpicfOspfv3RestartHelper=hpicfOspfv3RestartHelper, hpicfOspfv3LinkLsdbStatLinkLsa=hpicfOspfv3LinkLsdbStatLinkLsa, hpicfOspfv3AreaLsdbRefLsType=hpicfOspfv3AreaLsdbRefLsType, hpicfOspfv3IfEntry=hpicfOspfv3IfEntry, hpicfOspfv3LinkLsdbLocalAddress=hpicfOspfv3LinkLsdbLocalAddress, hpicfOspfv3LinkLSAEntry=hpicfOspfv3LinkLSAEntry, hpicfOspfv3IfErrorTable=hpicfOspfv3IfErrorTable, hpicfOspfv3RouterLSAEntry=hpicfOspfv3RouterLSAEntry, hpicfOspfv3RouterLSANbrIfId=hpicfOspfv3RouterLSANbrIfId, hpicfOspfv3RouterLSANbrRtrId=hpicfOspfv3RouterLSANbrRtrId, hpicfOspfv3LogGroup=hpicfOspfv3LogGroup, PYSNMP_MODULE_ID=hpicfOspfv3MIB, hpicfOspfv3AreaLsdbStatsGroup=hpicfOspfv3AreaLsdbStatsGroup, hpicfOspfv3NbrTimeToExpiry=hpicfOspfv3NbrTimeToExpiry, hpicfOspfv3AreaNbrExchangeCount=hpicfOspfv3AreaNbrExchangeCount, hpicfOspfv3ASscopeUnknownLsaCount=hpicfOspfv3ASscopeUnknownLsaCount, hpicfOspfv3GeneralGroup=hpicfOspfv3GeneralGroup, hpicfOspfv3AreaGroup=hpicfOspfv3AreaGroup, hpicfOspfv3IfSentHelloPkt=hpicfOspfv3IfSentHelloPkt, hpicfOspfv3IfSentLSAPkt=hpicfOspfv3IfSentLSAPkt, hpicfOspfv3IntraAPLSAEntry=hpicfOspfv3IntraAPLSAEntry, hpicfOspfv3AreaNbrExstartCount=hpicfOspfv3AreaNbrExstartCount, hpicfOspfv3NetworkLSASeqNum=hpicfOspfv3NetworkLSASeqNum, hpicfOspfv3IfRcvdLSRPkt=hpicfOspfv3IfRcvdLSRPkt, hpicfOspfv3LinkPrefixLength=hpicfOspfv3LinkPrefixLength, hpicfOspfv3TrapControl=hpicfOspfv3TrapControl, hpicfOspfv3AreaNbrAttemptCount=hpicfOspfv3AreaNbrAttemptCount, hpicfOspfv3IfErrorType=hpicfOspfv3IfErrorType, hpicfOspfv3AreaLsdbTable=hpicfOspfv3AreaLsdbTable, hpicfOspfv3IfTable=hpicfOspfv3IfTable, hpicfOspfv3AreaLsdbMetric=hpicfOspfv3AreaLsdbMetric, hpicfOspfv3LogAction=hpicfOspfv3LogAction, hpicfOspfv3AreaLsdbPrefixOptions=hpicfOspfv3AreaLsdbPrefixOptions, hpicfOspfv3RouterLSATable=hpicfOspfv3RouterLSATable, hpicfOspfv3DefaultImportMetric=hpicfOspfv3DefaultImportMetric, hpicfOspfv3LinkLsdbOptions=hpicfOspfv3LinkLsdbOptions, hpicfOspfv3SpfThrottleMaxWaitTime=hpicfOspfv3SpfThrottleMaxWaitTime, hpicfOspfv3AsLsdbRefLsType=hpicfOspfv3AsLsdbRefLsType, hpicfOspfv3ExternalDistance=hpicfOspfv3ExternalDistance, hpicfOspfv3MIB=hpicfOspfv3MIB, hpicfOspfv3LogEntry=hpicfOspfv3LogEntry, hpicfOspfv3AreaTable=hpicfOspfv3AreaTable, hpicfOspfv3SpfEntry=hpicfOspfv3SpfEntry, hpicfOspfv3IntraAPPrefixOptions=hpicfOspfv3IntraAPPrefixOptions, hpicfOspfv3IfStatsEntry=hpicfOspfv3IfStatsEntry, hpicfOspfv3IfRcvdLSAPkt=hpicfOspfv3IfRcvdLSAPkt, hpicfOspfv3RouterLSAIfId=hpicfOspfv3RouterLSAIfId, hpicfOspfv3LinkLsdbGroup=hpicfOspfv3LinkLsdbGroup, hpicfOspfv3IfSentTotalErrorCount=hpicfOspfv3IfSentTotalErrorCount, hpicfOspfv3AreaLsdbFwdingAddress=hpicfOspfv3AreaLsdbFwdingAddress, hpicfOspfv3IntraAPMetric=hpicfOspfv3IntraAPMetric, hpicfOspfv3AreaAggregateCost=hpicfOspfv3AreaAggregateCost, hpicfOspfv3IfDRAddr=hpicfOspfv3IfDRAddr, hpicfOspfv3AreaLsdbRtrCapBits=hpicfOspfv3AreaLsdbRtrCapBits, hpicfOspfv3InterAreaDistance=hpicfOspfv3InterAreaDistance, hpicfOspfv3LinkLsdbTable=hpicfOspfv3LinkLsdbTable, hpicfOspfv3LinkLsdbLsaLength=hpicfOspfv3LinkLsdbLsaLength, hpicfOspfv3SpfTable=hpicfOspfv3SpfTable, hpicfOspfv3LinkPrefixOptions=hpicfOspfv3LinkPrefixOptions, hpicfOspfv3IfClearStatsTable=hpicfOspfv3IfClearStatsTable)
