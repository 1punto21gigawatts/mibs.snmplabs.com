#
# PySNMP MIB module REDLINE-AN50-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-AN50-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
an50pmpLastMissedSsMacAddress, an50pmpLastModifiedCID, an50pmpLastRegisteredSsMacAddress = mibBuilder.importSymbols("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastMissedSsMacAddress", "an50pmpLastModifiedCID", "an50pmpLastRegisteredSsMacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Gauge32, ModuleIdentity, NotificationType, IpAddress, Unsigned32, ObjectIdentity, Counter32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Counter64, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Gauge32", "ModuleIdentity", "NotificationType", "IpAddress", "Unsigned32", "ObjectIdentity", "Counter32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Counter64", "TimeTicks", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
redline = MibIdentifier((1, 3, 6, 1, 4, 1, 10728))
redlineProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 1))
redlineMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2))
redlineAn50 = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16))
an50General = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1))
an50Config = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2))
an50Pm = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3))
an50Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 4))
an50LinkPmp = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 5))
an50GenUBR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenUBR.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenUBR.setDescription("Indicates the system's current uncoded burst rate. With adaptive modulation enabled, this rate may change over time, depending on the prevailing propagation conditions. ")
an50GenRFLink = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenRFLink.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenRFLink.setDescription('connected(2) indicates the terminal is communicating properly to the remote terminal. notConnected(1) indicates there is no communication with the remote terminal.')
an50GenFrequency = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenFrequency.setDescription('The frequency which represents the operating channel of the link. The system can be configured to operate over 9 distinct channels.')
an50GenAllignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voltage", 1), ("buzzer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenAllignmentMode.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenAllignmentMode.setDescription('Specifies if the antenna alignment is done with buzzer or voltage.')
an50GenEncryptionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenEncryptionEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenEncryptionEnabled.setDescription('Specifies if encryption is enabled or not.')
an50GenFlowControlEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenFlowControlEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenFlowControlEnabled.setDescription('This attribute specifies if flow control is enabled or not.')
an50GenHttpAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenHttpAccessEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenHttpAccessEnabled.setDescription('This attribute specifies if Http Access is enabled or not.')
an50GenTelnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenTelnetAccessEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenTelnetAccessEnabled.setDescription('This attribute specifies if Telnet Access is enabled or not.')
an50GenTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenTelnetPort.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenTelnetPort.setDescription('This attribute specifies the Telnet port number.')
an50GenOptionsKey = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenOptionsKey.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenOptionsKey.setDescription('This attribute specifies the Product Options Key.')
an50GenResetDevice = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenResetDevice.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenResetDevice.setDescription('reset(2) indicates to reset the AN50 terminal. donothing(1) indicates do not reset AN50 terminal.')
an50GenFault = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenFault.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenFault.setDescription('The attribute specifies the Fault LED status of the terminal.')
an50GenTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenTxPower.setDescription('This object specifies the actual Tx Power of the AN-50 Node in ?')
an50GenRegisteredStations = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenRegisteredStations.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenRegisteredStations.setDescription('This object specifies the actual number of configured links.')
an50GenRegisteredConnections = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenRegisteredConnections.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenRegisteredConnections.setDescription('This object specifies the actual number of configured connections.')
an50GenActiveWirelessLinks = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenActiveWirelessLinks.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenActiveWirelessLinks.setDescription('This object specifies the actual number of provisioned links.')
an50GenChannelAutoScan = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50GenChannelAutoScan.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenChannelAutoScan.setDescription('This object specifies the Auto-Scanning feature for the channel.')
an50GenIduType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenIduType.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenIduType.setDescription('This object specifies the Indoor Unit Type.')
an50GenOduType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50GenOduType.setStatus('mandatory')
if mibBuilder.loadTexts: an50GenOduType.setDescription('This object specifies the Outdoor Unit Type.')
an50ConfigEther = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1))
an50EtherMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50EtherMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherMacAddress.setDescription('This object specifies the Ethernet MAC address of the local terminal.')
an50EtherGateway = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherGateway.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherGateway.setDescription('The IP Gateway of the AN-50 This field is used to specify the IP address of the gateway which the AN-50 is communicating through the core network.')
an50EtherPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50EtherPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherPortStatus.setDescription('The attribute specifies the status of the Ethernet Port of the AN50.')
an50EtherIP = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherIP.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherIP.setDescription('The IP address of the AN-50. The default address from the factory is 192.168.25.2. For the initial set-up, the terminal should not be connected to the Internet network, i.e. the host computer should be connected directly to the terminal Ethernet port, to avoid address conflicts with other devices in a public network. Once the IP address has been set, the terminal can be connected to the core network, where it can receive either static or dynamic addressing (DHCP) in future configuration updates.')
an50EtherMask = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherMask.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherMask.setDescription('The IP Subnet Mask of the AN-50. The value is typically set to 255.255.255.0 (Class C subnet), which prevents certain local devices from going out into the wireless network.')
an50Ether100 = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s10Mbs", 1), ("s100Mbs", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50Ether100.setStatus('mandatory')
if mibBuilder.loadTexts: an50Ether100.setDescription('This object specifies the 100 Mb/s Ethernet LED status of the AN50.')
an50EtherFd = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50EtherFd.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherFd.setDescription('The object specifies the Ethernet FullDuplex LED status of the AN50.')
an50EtherMgmVidEn = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherMgmVidEn.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherMgmVidEn.setDescription('The attribute specifies the Ethernet Management Vlan Enabled Status of the AN50.')
an50EtherMgmVid = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherMgmVid.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherMgmVid.setDescription('The attribute specifies the Ethernet Management Vlan Id of the AN50.')
an50EtherLben = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50EtherLben.setStatus('mandatory')
if mibBuilder.loadTexts: an50EtherLben.setDescription('The attribute specifies the Link Backup Enable Status of the AN50.')
an50ConfigWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2))
an50WrlsChannel = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("chan1", 1), ("chan1A", 2), ("chan2", 3), ("chan2A", 4), ("chan3", 5), ("chan3A", 6), ("chan4", 7), ("chan4A", 8), ("chan5", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsChannel.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsChannel.setDescription('specifies the operating channel of the system, within the 100 MHz available in the 5.8GHz UNII band. To avoid interference, two PTP links operating in the same physical location (co-located) or within close proximity (e.g. across the street) must be separated by at least one channel, i.e. the gap between channels should be 20 MHz or more (e.g. channels 1 and 3).')
an50WrlsTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsTxPower.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsTxPower.setDescription('The Tx Power of the AN-50 in dBm. Specifies the power level of the system, which is preset at the factory and should not be altered. In the event that this parameter needs to be changed, please contact the Redline support team.')
an50WrlsModReduction = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsModReduction.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsModReduction.setDescription('The Modulation Reduction Level of the AN-50. Applies when the Adaptive rate is disabled. Specifies how many levels the system must drop in modulation before beginning re-transmission to address packet errors. The value can be set from 1-7, with 2 being the typical value.')
an50WrlsAdaptiveMod = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAdaptiveRate", 1), ("adaptiveRate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsAdaptiveMod.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsAdaptiveMod.setDescription('Setting this attribute to AdaptiveRate(2) sets the system to operate in adaptive modulation mode. It is recommended to keep the AN-50 in this mode so that the system can automatically adjust the modulation level to the highest possible data rate based on measured RF performance. The user can define the minimum desired modulation level by setting the Main rate parameter. If the system meets this data rate, then the Signal LED on the front panel will light continuously green. If packet errors exceed one out of a million, the system will automatically lower the modulation level to maintain the link. In this case, the LED will flash green. If errors continue when the system reaches the lowest modulation level, the LED will flash red to indicate a failed RF link. The user can also disable the dynamic modulation mode by disabling Adaptive Modulation. In this mode, the user is required to set the Burst Rate and the Modulation Reduction Level. It is recommended not to operate the system in manual mode, as this mode is intended primarily for field support. Note the Signal LED will light solid green when the packet error rate is less than 1 out of a million. When the errors exceed this limit, the LED will not illuminate, indicating the RF link has failed.')
an50WrlsUBR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsUBR.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsUBR.setDescription('This object contains the desired net uncoded burst rate for the link. Set uncoded burst rate in steps (0=6Mb/s, 1=9Mb/s, 2=12Mb/s, 3=18Mb/s, 4=24Mb/s, 5=36Mb/s, 6=48Mb/s, 7=54Mbs).')
an50WrlsMaster = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ptpSlave", 1), ("ptpMaster", 2), ("pmpSlave", 3), ("pmpMaster", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsMaster.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsMaster.setDescription('The object contains the configured mode of the AN50 terminal. 1 = PTP Slave, 2 = PTP Master, 3 = PMP Slave, 4 = PMP Master')
an50WrlsVersion = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firstFlash", 1), ("secondFlash", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsVersion.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsVersion.setDescription('Sets the version of the AN50 system software. The software can be remotely downloaded into the AN50. The system comprises sufficient memory to hold two independent software loads. The operator can specify which load to set as the active version.')
an50WrlsEncryptCode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsEncryptCode.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsEncryptCode.setDescription('The object contains the Encryption Key used for the AN-50 terminal. Enter the MAC address of the remote terminal to enable over-the-air data encryption.')
an50WrlsCableAttenuation = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsCableAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsCableAttenuation.setDescription('This object contains the Cable Attenuation for the AN-50 in dB.')
an50WrlsRfPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsRfPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsRfPortStatus.setDescription('The object specifies the status of the AN50s Wireless Port.')
an50WrlsSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("saveConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsSaveConfig.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsSaveConfig.setDescription('The object saves the entire config set of the AN50.')
an50WrlsActivateConfig = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("activeConfig", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsActivateConfig.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsActivateConfig.setDescription('The object activates the entire config set of the AN50.')
an50WrlsRadioEnable = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txOff", 1), ("txOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsRadioEnable.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsRadioEnable.setDescription('The object specifies whether radio transmission is enabled or disabled.')
an50WrlsRfStatusErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsRfStatusErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsRfStatusErrorCode.setDescription('The object specifies the Error Code for the RF Status.')
an50WrlsRfSignal = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("blinking", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50WrlsRfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsRfSignal.setDescription('The object specifies the Wireless Signal LED status.')
an50WrlsLLMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsLLMode.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsLLMode.setDescription('Link length set mode.')
an50WrlsLMU = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mile", 1), ("km", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsLMU.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsLMU.setDescription('This object specifies the Link measurements unit (mile / Km).')
an50WrlsLL = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsLL.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsLL.setDescription('This object specifies the Link Length. See an50WrlsLMU object for units.')
an50ConfigScheduler = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19))
an50WrlsFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsFrameSize.setDescription('This object specifies the size of wireless frame (DL+RTD+UL) in micro seconds.')
an50WrlsMinBlockSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsMinBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsMinBlockSize.setDescription('This object specifies a minimum number of bytes comprising transmitted block.')
an50WrlsDownlinkSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsDownlinkSize.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsDownlinkSize.setDescription('This object specifies the size of downlink sub-frame in micro seconds.')
an50WrlsRoundTripDelay = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsRoundTripDelay.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsRoundTripDelay.setDescription('This object specifies the round trip delay in micro seconds.')
an50WrlsAdaptiveDLSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsAdaptiveDLSize.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsAdaptiveDLSize.setDescription('This object specifies if adaptive downlink size is enabled or disabled.')
an50WrlsExtSyncronize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsExtSyncronize.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsExtSyncronize.setDescription('This object specifies if external synchronization is enabled or disabled.')
an50WrlsMaximumDistance = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsMaximumDistance.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsMaximumDistance.setDescription('This object specifies the maximum distance between base station and subscriber station in Km.')
an50WrlsRegistrationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 19, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsRegistrationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsRegistrationPeriod.setDescription('This object specifies the number of frames between registration periods.')
an50ConfigDefGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 20))
an50WrlsBroadcastDLCIR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsBroadcastDLCIR.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsBroadcastDLCIR.setDescription('This object specifies the broadcast downlink commited rate in kb/s.')
an50WrlsBroadcastDLPIR = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsBroadcastDLPIR.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsBroadcastDLPIR.setDescription('This object specifies the broadcast downlink peak rate in kb/s.')
an50WrlsDFSAction = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("txDisabled", 2), ("changeFreq", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsDFSAction.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsDFSAction.setDescription('This object specifies the action taken when another system is detected on the same frequency')
an50WrlsAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsAntennaGain.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsAntennaGain.setDescription('Antenna Gain in dB.')
an50WrlsATPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50WrlsATPEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: an50WrlsATPEnabled.setDescription('This object specifies if the Automatic Transmitted Power Control is enabled')
an50ResetStatistics = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("donothing", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50ResetStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: an50ResetStatistics.setDescription('A value of reset(2) resets the performance statistics on the AN-50, a value of donothing(1) does nothing.')
an50PmEther = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2))
an50PmEtherRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmEtherRxPackets.setDescription('This object counts the number of ethernet packets successfully received by the local system.')
an50PmEtherRxPacketsErr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherRxPacketsErr.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmEtherRxPacketsErr.setDescription('This object counts the number of ethernet packet errors received by the local system.')
an50PmEtherTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmEtherTxPackets.setDescription('This object counts the number of Ethernet packets transmitted by the local system.')
an50PmEtherTxPacketsErr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherTxPacketsErr.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmEtherTxPacketsErr.setDescription('This object counts the number of Ethernet error packets transmitted by the local system.')
an50PmEtherRxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherRxPacketsDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmEtherRxPacketsDisc.setDescription('This object counts the number of ethernet packets discarded by receiver.')
an50PmEtherTxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmEtherTxPacketsDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmEtherTxPacketsDisc.setDescription('This object counts the number of ethernet packets discarded by transmitter.')
an50PmWrls = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3))
an50PmWrlsRxSigMin = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxSigMin.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsRxSigMin.setDescription('This object indicates the minimum received signal strength measured since the last SNMP update.')
an50PmWrlsRxSigMean = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxSigMean.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsRxSigMean.setDescription('This object indicates the average received signal strength measured since the last SNMP update.')
an50PmWrlsRxSigMax = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxSigMax.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsRxSigMax.setDescription('This object indicates the maximum received signal strength measured since the last SNMP update')
an50PmWrlsAvgSinAdr = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsAvgSinAdr.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsAvgSinAdr.setDescription('This object indicates the average signal to noise ratio measured since the last SNMP update. The ratio is based on the digital information provided from the output of the AtoD converter.')
an50PmWrlsRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsRxPackets.setDescription('This object indicates the number of packets received over the air from the remote terminal.')
an50PmWrlsRxPacketsRetx = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxPacketsRetx.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsRxPacketsRetx.setDescription('This object indicates the number of packets retransmitted over the air from the remoter terminal.')
an50PmWrlsRxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsRxPacketsDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsRxPacketsDisc.setDescription('This object indicates the number of packets, originating from the remote terminal lost over the air due to degradation in the RF link.')
an50PmWrlsTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsTxPackets.setDescription('This object indicates the number of wireless packets (including Ethernet frames and error correction bytes) transmitted over the air by the local terminal.')
an50PmWrlsTxPacketsRetx = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsTxPacketsRetx.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsTxPacketsRetx.setDescription('This object indicates the number of packets retransmitted over the air by the local terminal. The retransmission scheme is based on the Acknowledge/Request (ARQ) algorithm that detects when packets are lost and makes a request to the MAC scheduler to repeat transmission of the lost packets.')
an50PmWrlsTxPacketsDisc = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsTxPacketsDisc.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsTxPacketsDisc.setDescription('This object indicates the total number of packets lost over the air due to degradation in the RF link.')
an50PmWrlsCalcDst = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 3, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50PmWrlsCalcDst.setStatus('mandatory')
if mibBuilder.loadTexts: an50PmWrlsCalcDst.setDescription('This object contains the calculated link distance.')
an50Sw = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3))
an50SwServer = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50SwServer.setStatus('mandatory')
if mibBuilder.loadTexts: an50SwServer.setDescription('The address of the TFTP server used for software upgrades. If the address of the TFTP server is unknown, return 0.0.0.0.')
an50SwFilename = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50SwFilename.setStatus('mandatory')
if mibBuilder.loadTexts: an50SwFilename.setDescription('The file name of the software image to be loaded into this device.')
an50SwAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUpgrade", 1), ("upgrade", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: an50SwAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: an50SwAdminStatus.setDescription('If set to upgrade(2), the device will initiate a TFTP software image download using an50SwFilename. If the download process is interrupted by a reset or power failure, the device will load the previous image. If set to noUpgrade(1), the device will revert to the previous version of the software. At initial startup, this object has the default value of noUpgrade(1).')
an50SwOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("completeSuccess", 2), ("failed", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SwOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: an50SwOperStatus.setDescription(' This object shows the download status. inProgress(1) indicates that a TFTP download is underway completeSuccess(2) indicates that the last software upgrade was successful failed(3) indicates that the last attempted download failed, ordinarily due to TFTP timeout.')
an50SwCurrentVers = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SwCurrentVers.setStatus('mandatory')
if mibBuilder.loadTexts: an50SwCurrentVers.setDescription("The software version currently operating in this device's flash. This object should be in the syntax used by the individual vendor to identify software versions. If it is not applicable, this MUST contain an empty string.")
an50SwOtherVers = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 2, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SwOtherVers.setStatus('mandatory')
if mibBuilder.loadTexts: an50SwOtherVers.setDescription('The software version in the secondary flash. This object should be in the syntax used by the individual vendor to identify software versions. If it is not applicable, this MUST contain an empty string.')
an50SysLastTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50SysLastTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: an50SysLastTrapTime.setDescription('The value of system.sysUpTime when the last trap was generated. If no traps have been generated since the last reset, this attribute has a value of 0. No trap is issued as a result of a change to this value.')
an50TftpFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,1)).setObjects(("REDLINE-AN50-MIB", "an50SwServer"), ("REDLINE-AN50-MIB", "an50SwFilename"), ("REDLINE-AN50-MIB", "an50SwAdminStatus"), ("REDLINE-AN50-MIB", "an50SwOperStatus"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50TftpFailTrap.setDescription('An event to report the failure of a Software Download.')
an50TftpSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,2)).setObjects(("REDLINE-AN50-MIB", "an50SwServer"), ("REDLINE-AN50-MIB", "an50SwFilename"), ("REDLINE-AN50-MIB", "an50SwAdminStatus"), ("REDLINE-AN50-MIB", "an50SwOperStatus"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50TftpSuccessTrap.setDescription('An event to report the success of a Software Download.')
an50PswdChangeFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,3)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50PswdChangeFailTrap.setDescription('An event to report the failure of a password change.')
an50FirmwareConfigFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,4)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50FirmwareConfigFailTrap.setDescription('An event to report the failure of a firmware config.')
an50EepromCorruptedTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,5)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50EepromCorruptedTrap.setDescription('An event to report the corruption of the EEPROM.')
an50PowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,6)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50PowerSupplyFailureTrap.setDescription('An event to report the power supply failure.')
an50SaveConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,7)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50SaveConfigTrap.setDescription('An event to report the saving of configuration')
an50ModifiedIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,8)).setObjects(("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastModifiedCID"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50ModifiedIDTrap.setDescription('An event to report the modification in the configuration of a CID')
an50pmpRegistrationMissed = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,9)).setObjects(("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastMissedSsMacAddress"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50pmpRegistrationMissed.setDescription('An event to report the missing of the registration by a AN50 Subscriber to one BS.This trap is sent by the BS and contains the MAC address of the SS missing the registration')
an50pmpRegistrationSuccessful = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,10)).setObjects(("REDLINE-AN50-PMP-V1-MIB", "an50pmpLastRegisteredSsMacAddress"), ("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50pmpRegistrationSuccessful.setDescription('An event to report the successful registration of an AN50 Subscriber to BS. This trap is sent by the BS and contains the MAC address of the newly registered SS')
an50DFSEvent = NotificationType((1, 3, 6, 1, 4, 1, 10728) + (0,11)).setObjects(("REDLINE-AN50-MIB", "an50SysLastTrapTime"))
if mibBuilder.loadTexts: an50DFSEvent.setDescription('An event to report a dynamic frequency selection (DFS) event in AN50')
an50MaxCid = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50MaxCid.setStatus('mandatory')
if mibBuilder.loadTexts: an50MaxCid.setDescription('The object contains the maximum number of CID for this equipment')
an50LinkCurrentAvailId = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 16, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: an50LinkCurrentAvailId.setStatus('mandatory')
if mibBuilder.loadTexts: an50LinkCurrentAvailId.setDescription('The current available ID in the Links table that is queried by NMS before creating a new row in Link Table')
mibBuilder.exportSymbols("REDLINE-AN50-MIB", an50GenTelnetAccessEnabled=an50GenTelnetAccessEnabled, an50WrlsRfSignal=an50WrlsRfSignal, an50PmWrlsRxPacketsDisc=an50PmWrlsRxPacketsDisc, an50GenRFLink=an50GenRFLink, an50PswdChangeFailTrap=an50PswdChangeFailTrap, an50SwCurrentVers=an50SwCurrentVers, an50ConfigEther=an50ConfigEther, an50Pm=an50Pm, an50EtherMask=an50EtherMask, an50Sw=an50Sw, an50PmWrlsRxPacketsRetx=an50PmWrlsRxPacketsRetx, an50WrlsEncryptCode=an50WrlsEncryptCode, an50WrlsRfStatusErrorCode=an50WrlsRfStatusErrorCode, redlineMgmt=redlineMgmt, an50WrlsRoundTripDelay=an50WrlsRoundTripDelay, an50GenOduType=an50GenOduType, an50GenOptionsKey=an50GenOptionsKey, an50PmWrls=an50PmWrls, an50PmWrlsRxSigMean=an50PmWrlsRxSigMean, an50WrlsVersion=an50WrlsVersion, an50WrlsSaveConfig=an50WrlsSaveConfig, an50PmWrlsTxPacketsDisc=an50PmWrlsTxPacketsDisc, an50WrlsBroadcastDLPIR=an50WrlsBroadcastDLPIR, an50WrlsLL=an50WrlsLL, an50TftpSuccessTrap=an50TftpSuccessTrap, an50GenFault=an50GenFault, an50WrlsActivateConfig=an50WrlsActivateConfig, an50ModifiedIDTrap=an50ModifiedIDTrap, an50EtherFd=an50EtherFd, an50WrlsRadioEnable=an50WrlsRadioEnable, an50WrlsUBR=an50WrlsUBR, an50pmpRegistrationMissed=an50pmpRegistrationMissed, redline=redline, an50PmEtherRxPackets=an50PmEtherRxPackets, an50EtherMgmVid=an50EtherMgmVid, an50SwFilename=an50SwFilename, an50WrlsDFSAction=an50WrlsDFSAction, an50PmEtherTxPacketsErr=an50PmEtherTxPacketsErr, an50Config=an50Config, an50WrlsTxPower=an50WrlsTxPower, an50WrlsLLMode=an50WrlsLLMode, an50WrlsMaximumDistance=an50WrlsMaximumDistance, an50EtherPortStatus=an50EtherPortStatus, an50EtherIP=an50EtherIP, an50WrlsAntennaGain=an50WrlsAntennaGain, an50WrlsATPEnabled=an50WrlsATPEnabled, an50WrlsMinBlockSize=an50WrlsMinBlockSize, an50pmpRegistrationSuccessful=an50pmpRegistrationSuccessful, an50EepromCorruptedTrap=an50EepromCorruptedTrap, an50ConfigDefGroup=an50ConfigDefGroup, an50SwServer=an50SwServer, an50FirmwareConfigFailTrap=an50FirmwareConfigFailTrap, an50GenFrequency=an50GenFrequency, an50PmEther=an50PmEther, an50WrlsLMU=an50WrlsLMU, an50GenTelnetPort=an50GenTelnetPort, an50PmEtherRxPacketsErr=an50PmEtherRxPacketsErr, an50EtherGateway=an50EtherGateway, an50LinkPmp=an50LinkPmp, an50WrlsAdaptiveMod=an50WrlsAdaptiveMod, an50PmWrlsTxPacketsRetx=an50PmWrlsTxPacketsRetx, an50PmWrlsTxPackets=an50PmWrlsTxPackets, an50GenEncryptionEnabled=an50GenEncryptionEnabled, an50DFSEvent=an50DFSEvent, an50GenActiveWirelessLinks=an50GenActiveWirelessLinks, an50PowerSupplyFailureTrap=an50PowerSupplyFailureTrap, an50TftpFailTrap=an50TftpFailTrap, an50Ether100=an50Ether100, an50SysLastTrapTime=an50SysLastTrapTime, redlineProducts=redlineProducts, an50PmEtherRxPacketsDisc=an50PmEtherRxPacketsDisc, an50PmWrlsRxPackets=an50PmWrlsRxPackets, an50WrlsFrameSize=an50WrlsFrameSize, redlineAn50=redlineAn50, an50GenTxPower=an50GenTxPower, an50PmWrlsRxSigMin=an50PmWrlsRxSigMin, an50GenHttpAccessEnabled=an50GenHttpAccessEnabled, an50ResetStatistics=an50ResetStatistics, an50PmWrlsAvgSinAdr=an50PmWrlsAvgSinAdr, an50WrlsExtSyncronize=an50WrlsExtSyncronize, an50WrlsRfPortStatus=an50WrlsRfPortStatus, an50GenChannelAutoScan=an50GenChannelAutoScan, an50EtherMacAddress=an50EtherMacAddress, an50LinkCurrentAvailId=an50LinkCurrentAvailId, an50ConfigScheduler=an50ConfigScheduler, an50WrlsMaster=an50WrlsMaster, an50GenFlowControlEnabled=an50GenFlowControlEnabled, an50GenRegisteredStations=an50GenRegisteredStations, an50WrlsAdaptiveDLSize=an50WrlsAdaptiveDLSize, an50GenUBR=an50GenUBR, an50SwOtherVers=an50SwOtherVers, an50WrlsRegistrationPeriod=an50WrlsRegistrationPeriod, an50GenRegisteredConnections=an50GenRegisteredConnections, an50General=an50General, an50WrlsCableAttenuation=an50WrlsCableAttenuation, an50SwAdminStatus=an50SwAdminStatus, an50WrlsChannel=an50WrlsChannel, an50SaveConfigTrap=an50SaveConfigTrap, an50WrlsBroadcastDLCIR=an50WrlsBroadcastDLCIR, an50PmEtherTxPackets=an50PmEtherTxPackets, an50PmEtherTxPacketsDisc=an50PmEtherTxPacketsDisc, an50MaxCid=an50MaxCid, an50GenAllignmentMode=an50GenAllignmentMode, an50ConfigWireless=an50ConfigWireless, an50SwOperStatus=an50SwOperStatus, an50EtherMgmVidEn=an50EtherMgmVidEn, an50WrlsModReduction=an50WrlsModReduction, an50PmWrlsRxSigMax=an50PmWrlsRxSigMax, an50GenResetDevice=an50GenResetDevice, an50PmWrlsCalcDst=an50PmWrlsCalcDst, an50EtherLben=an50EtherLben, an50WrlsDownlinkSize=an50WrlsDownlinkSize, an50GenIduType=an50GenIduType, an50Trap=an50Trap)
