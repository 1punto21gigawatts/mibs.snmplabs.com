#
# PySNMP MIB module WWP-LEOS-MULTICAST-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-MULTICAST-FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, Bits, Gauge32, ObjectIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Unsigned32, iso, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Bits", "Gauge32", "ObjectIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Unsigned32", "iso", "ModuleIdentity", "MibIdentifier")
TruthValue, TextualConvention, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosMcastFilterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7))
wwpLeosMcastFilterMIB.setRevisions(('2008-10-02 19:00', '2008-06-19 00:00', '2003-02-10 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosMcastFilterMIB.setRevisionsDescriptions(('Added the following objects to support rapid-recovery: - wwpLeosMcastIgmpSnoopRapidRecoveryMode to set rapid recovery mode on or off - wwpLeosMcastStatsQuerySrcIpZeroDiscard to get number of zero IP GQ discards', 'Added the objects to clear the statistics for the Mcast-Services: - wwpLeosMcastGlobalStatsClear clears the statistics for all the services - wwpLeosMcastStatsClear clears the statistics for the associated VlanId only', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosMcastFilterMIB.setLastUpdated('200810021900Z')
if mibBuilder.loadTexts: wwpLeosMcastFilterMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosMcastFilterMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosMcastFilterMIB.setDescription('This MIB specifies the managed objects for Multicast filter specific to the WWP Products.')
class VlanId(TextualConvention, Integer32):
    description = 'A Vlan Id represents a Broadcast Domain.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 24576)

wwpLeosMcastFilterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1))
wwpLeosMcastFilterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1))
wwpLeosMcastFilterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2))
wwpLeosMcastFilterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3))
wwpLeosMcastFilterMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 2))
wwpLeosMcastFilterMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 2, 0))
wwpLeosMcastFilterMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 3))
wwpLeosMcastFilterMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 3, 1))
wwpLeosMcastFilterMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 3, 2))
wwpLeosMcastConfigState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastConfigState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastConfigState.setDescription('Setting this object will enable or disable multicast globally.')
wwpLeosMcastSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastSnoopState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastSnoopState.setDescription('Setting this object will enable or disable IGMP Snooping globally on SAOS (6.x). LEOS (4.x) does not support setting IGMP snooping at a global level. It should be enabled on a per VLAN bases using the wwpLeosMcastIgmpSnoopEnable MIB object')
wwpLeosMcastGlobalStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastGlobalStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastGlobalStatsClear.setDescription('Setting this object to clear will clear the statistics for all the Multicast-Service filter entries. We cannot set the object to none. It is for display purpose only.')
wwpLeosMcastFilterActivationTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosMcastFilterActivationTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterActivationTable.setDescription('The (conceptual) table listing the vlans on which the multicast filter can be applied. This table is used to create and delete entries in the multicast table and also to administratively enable/disable. To configure the IGMP Snooping on this VLAN use table wwpLeosMcastIgmpSnoopTable after creating entry in this (wwpLeosMcastFilterActivationTable) table.')
wwpLeosMcastFilterActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"))
if mibBuilder.loadTexts: wwpLeosMcastFilterActivationEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterActivationEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastFilterActivationTable.')
wwpLeosMcastVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastVlanId.setDescription('The VLAN for which this multicast filter can be enabled/disabled.')
wwpLeosMcastFilterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterAdminState.setDescription('Setting this object to enable will enable multicast on then given VLAN.')
wwpLeosMcastFilterOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastFilterOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterOperState.setDescription('The object represents the operational state of multicast on the given VLAN.')
wwpLeosMcastFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosMcastFilterState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterState.setDescription('Setting this object to createandgo(4) will create an entry in the multicast table for the given VLAN and will enable multicast on that VLAN. Setting this object to destroy will delete the entry from the multicast table.')
wwpLeosMcastFilterServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosMcastFilterServerPortTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterServerPortTable.setDescription('The (conceptual) table listing the authorized server ports.')
wwpLeosMcastFilterServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"), (0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastServerPortId"))
if mibBuilder.loadTexts: wwpLeosMcastFilterServerPortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterServerPortEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastFilterServerPortTable.')
wwpLeosMcastServerPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastServerPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastServerPortId.setDescription('The server port from which the IGMP query messages can be received, and joins/leaves messages can be sent.')
wwpLeosMcastServerPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosMcastServerPortStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastServerPortStatus.setDescription("This object is used to add/delete server ports from the list of authorized server ports. To add a port to the authorized server port list, a user must set this object to 'createAndGo'.")
wwpLeosMcastIgmpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopTable.setDescription('The (conceptual) table listing the configuration parameters for the IGMP snooping.')
wwpLeosMcastIgmpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"))
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastIgmpSnoopTable.')
wwpLeosMcastIgmpSnoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopEnable.setDescription("For LEOS (4.x) IGMP snooping can be enabled on this VLAN by setting this object to 'true'. The Management station should define the router IP address range and the list of server ports before snooping is enabled. SAOS (6.x) does not support setting IGMP snooping per VLAN. Instead it should be enabled globally using the wwpLeosMcastSnoopState MIB object")
wwpLeosMcastIgmpSnoopRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRobustness.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRobustness.setDescription('The number of replies to send for each multicast group.')
wwpLeosMcastIgmpSnoopProxyQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999999)).clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopProxyQueryInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopProxyQueryInterval.setDescription('The interval period between each general query sent to the router. This parameter specifies how often to repeat the group specific query. Default will be 125 seconds. Note that the actual rate may be slower when the switch becomes busy, so this parameter should be thought of as a minimum time interval.')
wwpLeosMcastIgmpSnoopProxyQueryReplyTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopProxyQueryReplyTmo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopProxyQueryReplyTmo.setDescription('The amount of time to receive a membership report after a query message was sent. This value goes directly into the query packet.')
wwpLeosMcastIgmpSnoopProxyQueryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopProxyQueryDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopProxyQueryDelay.setDescription('The amount of time to wait before sending the next group specific query downstream. General queries are sent one port at a time.')
wwpLeosMcastIgmpSnoopLingerTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(125)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopLingerTmo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopLingerTmo.setDescription('This value specifies the amount of time that a multicast filter will be in place after the last host has left. In essence it configures how long to filter the stream after all the hosts have left the group. This can tune the system as to how long the router has to remove the stream from the subnet. The minimum value is 1 second, with no maximum value.')
wwpLeosMcastIgmpQueryEngineState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpQueryEngineState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpQueryEngineState.setDescription('Setting this object to disable will enable query engine on a given VLAN. Setting it to enable will enable it.')
wwpLeosMcastIgmpProxyQuerySrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpProxyQuerySrcIp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpProxyQuerySrcIp.setDescription('Setting this object will set the source ip address for the VLAN.')
wwpLeosMcastIgmpRouterQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpRouterQueryInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpRouterQueryInterval.setDescription('Setting this object will set the router query interval for given VLAN.')
wwpLeosMcastIgmpMinResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpMinResponseTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpMinResponseTime.setDescription('Setting this object will set the minimum response time for given VLAN.')
wwpLeosMcastIgmpDefaultRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpDefaultRouterPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpDefaultRouterPort.setDescription('Setting this object will set the default router port for given VLAN.')
wwpLeosMcastIgmpInquisitiveLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpInquisitiveLeaveState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpInquisitiveLeaveState.setDescription('Setting this object will set the IGMP inquisitive leave state for given VLAN.')
wwpLeosMcastIgmpLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpLastMemberQueryInterval.setDescription('Setting this object will set the last membership query interval for given VLAN.')
wwpLeosMcastIgmpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpPriority.setDescription('Setting this object will set the priority if IGMP packets for this VLAN.')
wwpLeosMcastIgmpSnoopRouterRangeStartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRouterRangeStartIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRouterRangeStartIpAddr.setDescription('The first IP Address of the router IP Address range.')
wwpLeosMcastIgmpSnoopRouterRangeEndIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRouterRangeEndIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRouterRangeEndIpAddr.setDescription('The last IP Address of the router IP Address range. When range is undefined, all leave/join messages will be forwarded to the router even when the multicast stream does not originate from the router. If the range is defined, leave/join messages will be filtered. The default value for this object should be equal to the value of wwpLeosMcastIgmpSnoopRouterRangeStartIpAddr.')
wwpLeosMcastIgmpSnoopActiveLingerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopActiveLingerTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopActiveLingerTimeout.setDescription('The object specifies the active linger timeout in seconds.')
wwpLeosMcastIgmpSnoopServerTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centralized", 1), ("distributed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopServerTopology.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopServerTopology.setDescription('The object specifies the server topology.')
wwpLeosMcastIgmpSnoopRapidRecoveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRapidRecoveryMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastIgmpSnoopRapidRecoveryMode.setDescription('Specifies whether the rapid recovery mode is set to on or off. If this object is set to ON then device will generate and accept query packets with src IP = 0 else in the OFF state, it would not.')
wwpLeosMcastChannelStreamTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamTable.setDescription('The (conceptual) table listing the configuration parameters for the multicast channel stream.')
wwpLeosMcastChannelStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"), (0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastChanelStreamStartGroupAddr"))
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastChannelStreamTable.')
wwpLeosMcastChanelStreamStartGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastChanelStreamStartGroupAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChanelStreamStartGroupAddr.setDescription('The first IP Address of the multicast IP Address range. ')
wwpLeosMcastChanelStreamEndGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastChanelStreamEndGroupAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChanelStreamEndGroupAddr.setDescription('The last IP Address of the multicast IP address range. If range does not need to be specified then do not set this value.')
wwpLeosMcastChannelStreamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamStatus.setDescription("This object is used to add/delete multicast groups to the channel stream. To add a multicast group to the channel stream, a user must set this object to 'createAndGo'. Device will not allow to create entry unless 'wwpLeosMcastChanelStreamStartGroupAddr' is specified. If range needs to be specified then set 'wwpLeosMcastChanelStreamEndGroupAddr' with the desired group address. If device cannot create entry for any of the IP addresses within the range then no entry will be created and an error will be returned.")
wwpLeosMcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosMcastGroupTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastGroupTable.setDescription('The (conceptual) table listing all the multicast groups.')
wwpLeosMcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"), (0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastGroupAddr"))
if mibBuilder.loadTexts: wwpLeosMcastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastGroupEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastGroupTable.')
wwpLeosMcastGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastGroupAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastGroupAddr.setDescription('The multicast group IP address.')
wwpLeosMcastState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("query", 2), ("linger", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastState.setDescription('The current state of the multicast stream.')
wwpLeosMcastType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastType.setDescription('The type of the multicast stream.')
wwpLeosMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("router", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastSource.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastSource.setDescription('The source for this multicast stream.')
wwpLeosMcastMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastMemberCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastMemberCount.setDescription('The number of ports that joined the group.')
wwpLeosMcastGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosMcastGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastGroupMemberTable.setDescription('The (conceptual) table listing all the port members of the multicast groups.')
wwpLeosMcastGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"), (0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastGroupAddr"), (0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastPortId"))
if mibBuilder.loadTexts: wwpLeosMcastGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastGroupMemberEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastGroupMemberTable.')
wwpLeosMcastPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastPortId.setDescription('The router port from which the IGMP query messages are received, and joins/leaves messages are sent.')
wwpLeosMcastPortTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastPortTagId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastPortTagId.setDescription('The Virtual Lan Tag Id used by the port on this Virtual Lan. If the switch is being used as a traditional Layer 2 device, then the value of this object should be same as wwpLeosMcastVlanId.')
wwpLeosMcastFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosMcastFilterStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterStatsTable.setDescription('The (conceptual) table listing the multicast statistics.')
wwpLeosMcastFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"))
if mibBuilder.loadTexts: wwpLeosMcastFilterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterStatsEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastFilterServerTable.')
wwpLeosMcastStaticGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastStaticGrpCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastStaticGrpCount.setDescription('The total number of static multicast groups.')
wwpLeosMcastDynamicGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastDynamicGrpCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastDynamicGrpCount.setDescription('The total number of dynamic mcast groups.')
wwpLeosMcastJoinMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastJoinMessages.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastJoinMessages.setDescription('The total number of join messages received.')
wwpLeosMcastLeaveMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastLeaveMessages.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastLeaveMessages.setDescription('The total number of leave messages received.')
wwpLeosMcastQueryMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastQueryMessages.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastQueryMessages.setDescription('The total number of queries received.')
wwpLeosMcastQueryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastQueryDiscards.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastQueryDiscards.setDescription('The total number of queries discarded.')
wwpLeosMcastQueryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastQueryTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastQueryTimeouts.setDescription('The total number of timeouts waiting for the router to send query.')
wwpLeosMcastUnknownPktType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastUnknownPktType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastUnknownPktType.setDescription('The total number of unknown (unknown type ) IGMP packets received.')
wwpLeosMcastRouterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastRouterDiscards.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastRouterDiscards.setDescription('The total number of messages discarded by the router. This happens when join comes in from a router port.')
wwpLeosMcastHostDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastHostDiscards.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastHostDiscards.setDescription('The total number of messages discarded by the host. This happens when a join/leave comes in a port, but no router port is established.')
wwpLeosMcastBadChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastBadChecksum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastBadChecksum.setDescription('The total number of packets received with bad IP checksum.')
wwpLeosMcastL2L3Mismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastL2L3Mismatch.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastL2L3Mismatch.setDescription('The total number of IGMP Layer2 / Layer 3 mismatch packets received.')
wwpLeosMcastTotalMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastTotalMembers.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastTotalMembers.setDescription('The total number of group members for all groups in the given VLAN.')
wwpLeosMcastLingerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastLingerCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastLingerCount.setDescription('The total number of groups in linger state.')
wwpLeosMcastRouterSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastRouterSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastRouterSrcMacAddr.setDescription("Specifies the router's MAC address.")
wwpLeosMcastRouterSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastRouterSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastRouterSrcIpAddr.setDescription("Specifies the router's IP address.")
wwpLeosMcastRouterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastRouterPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastRouterPortId.setDescription('Specifies the port from where router queries are coming.')
wwpLeosMcastReportSendPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastReportSendPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastReportSendPortId.setDescription('The new value is the port number of the port where IGMP reports will be sent. Not always the same as the router port.')
wwpLeosMcastStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastStatsClear.setDescription('Setting this object to clear will clear the statistics for only the associated VlanId. We cannot set this object to none, it is for display purpose only.')
wwpLeosMcastStatsQuerySrcIpZeroDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastStatsQuerySrcIpZeroDiscard.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastStatsQuerySrcIpZeroDiscard.setDescription('Specifies the number of Queries discarded with Zero source IP in them')
wwpLeosMcastFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosMcastFilterConfigTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterConfigTable.setDescription('The (conceptual) table listing the vlans on which the UPF can be applied.')
wwpLeosMcastFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"))
if mibBuilder.loadTexts: wwpLeosMcastFilterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterConfigEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastFilterConfigTable.')
wwpLeosMcastFilterUPFActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterUPFActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterUPFActivate.setDescription("UPF can be enabled on this VLAN by setting this object to 'true'.")
wwpLeosMcastUnresolvedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastUnresolvedAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastUnresolvedAction.setDescription("Setting this object to 'flood' will cause the device to flood all the unresolved messages to all the ports in the VLAN. Setting this object to 'drop' will cause the device to drop all the unresolved messages. If an IGMP join is received with a matching multicast group address, the multicast stream will forward to the corresponding port.")
wwpLeosMcastFilterWKMFLocalActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFLocalActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFLocalActivate.setDescription('Setting the object to flood will enable flooding of local WKMF on a VLAN. Setting the object to drop will enable dropping of local WKMF on a VLAN. Multicast address belonging to this object is 224.0.0.x.')
wwpLeosMcastFilterWKMFInternetActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFInternetActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFInternetActivate.setDescription('Setting the object to flood will enable flooding of internet WKMF on a VLAN. Setting the object to drop will enable dropping of internet WKMF on a VLAN. Multicast address belonging to this object is 224.0.1.x.')
wwpLeosMcastFilterWKMFAdhocActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFAdhocActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFAdhocActivate.setDescription('Setting the object to flood will enable flooding of adhoc WKMF on a VLAN. Setting the object to drop will enable dropping of adhoc WKMF on a VLAN. Multicast address belonging to this object is 224.0.2.x to 224.0.255.x.')
wwpLeosMcastFilterWKMFStMulticastActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFStMulticastActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFStMulticastActivate.setDescription('Setting the object to flood will enable flooding of st-multicast WKMF on a VLAN. Setting the object to drop will enable dropping of st-multicast WKMF on a VLAN. Multicast address belonging to this object is 224.1.x.x.')
wwpLeosMcastFilterWKMFSdpSapActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFSdpSapActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastFilterWKMFSdpSapActivate.setDescription('Setting the object to flood will enable flooding of sdp-sap WKMF on a VLAN. Setting the object to drop will enable dropping of sdp-sap WKMF on a VLAN. Multicast address belonging to this object is 224.2.x.x.')
wwpLeosMcastChannelStreamExPortMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortMemTable.setDescription('The (conceptual) table listing the excluded port list per VLAN for channel stream.')
wwpLeosMcastChannelStreamExPortMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastVlanId"), (0, "WWP-LEOS-MULTICAST-FILTER-MIB", "wwpLeosMcastChannelStreamExPortId"))
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortMemEntry.setDescription('An entry (conceptual row) in the wwpLeosMcastChannelStreamExPortMemTable.')
wwpLeosMcastChannelStreamExPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortId.setDescription('The port num to be excluded from channel stream.')
wwpLeosMcastChannelStreamExPortMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortMemStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastChannelStreamExPortMemStatus.setDescription('Setting this object to createAndGo will add wwpLeosMcastVlanId and wwpLeosMcastChannelStreamExPortId in the excluded port list of channel stream. Setting this to destroy will remove the wwpLeosMcastVlanId, wwpLeosMcastChannelStreamExPortId membership from excluded port list.')
wwpLeosMcastAddrOverlapNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 7, 2, 0, 1))
if mibBuilder.loadTexts: wwpLeosMcastAddrOverlapNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMcastAddrOverlapNotification.setDescription('A wwpLeosMcastAddrOverlapNotification is sent whenever several multicast IP addresses overlap (matches the same L2 address).')
mibBuilder.exportSymbols("WWP-LEOS-MULTICAST-FILTER-MIB", wwpLeosMcastFilterStatus=wwpLeosMcastFilterStatus, wwpLeosMcastFilterConfig=wwpLeosMcastFilterConfig, wwpLeosMcastChannelStreamTable=wwpLeosMcastChannelStreamTable, wwpLeosMcastGroupMemberEntry=wwpLeosMcastGroupMemberEntry, wwpLeosMcastFilterAdminState=wwpLeosMcastFilterAdminState, wwpLeosMcastFilterActivationEntry=wwpLeosMcastFilterActivationEntry, wwpLeosMcastIgmpMinResponseTime=wwpLeosMcastIgmpMinResponseTime, wwpLeosMcastGroupAddr=wwpLeosMcastGroupAddr, wwpLeosMcastFilterMIBConformance=wwpLeosMcastFilterMIBConformance, wwpLeosMcastIgmpSnoopRouterRangeEndIpAddr=wwpLeosMcastIgmpSnoopRouterRangeEndIpAddr, wwpLeosMcastIgmpSnoopProxyQueryInterval=wwpLeosMcastIgmpSnoopProxyQueryInterval, wwpLeosMcastFilterActivationTable=wwpLeosMcastFilterActivationTable, wwpLeosMcastSource=wwpLeosMcastSource, wwpLeosMcastQueryDiscards=wwpLeosMcastQueryDiscards, wwpLeosMcastGroupEntry=wwpLeosMcastGroupEntry, wwpLeosMcastPortId=wwpLeosMcastPortId, wwpLeosMcastIgmpSnoopRapidRecoveryMode=wwpLeosMcastIgmpSnoopRapidRecoveryMode, wwpLeosMcastServerPortStatus=wwpLeosMcastServerPortStatus, wwpLeosMcastIgmpSnoopRouterRangeStartIpAddr=wwpLeosMcastIgmpSnoopRouterRangeStartIpAddr, wwpLeosMcastLeaveMessages=wwpLeosMcastLeaveMessages, wwpLeosMcastDynamicGrpCount=wwpLeosMcastDynamicGrpCount, wwpLeosMcastLingerCount=wwpLeosMcastLingerCount, wwpLeosMcastFilterWKMFStMulticastActivate=wwpLeosMcastFilterWKMFStMulticastActivate, wwpLeosMcastIgmpSnoopServerTopology=wwpLeosMcastIgmpSnoopServerTopology, wwpLeosMcastType=wwpLeosMcastType, wwpLeosMcastIgmpQueryEngineState=wwpLeosMcastIgmpQueryEngineState, wwpLeosMcastIgmpSnoopTable=wwpLeosMcastIgmpSnoopTable, wwpLeosMcastFilterStatsTable=wwpLeosMcastFilterStatsTable, wwpLeosMcastFilterWKMFInternetActivate=wwpLeosMcastFilterWKMFInternetActivate, wwpLeosMcastStaticGrpCount=wwpLeosMcastStaticGrpCount, wwpLeosMcastConfigState=wwpLeosMcastConfigState, wwpLeosMcastFilterWKMFSdpSapActivate=wwpLeosMcastFilterWKMFSdpSapActivate, wwpLeosMcastTotalMembers=wwpLeosMcastTotalMembers, wwpLeosMcastStatsQuerySrcIpZeroDiscard=wwpLeosMcastStatsQuerySrcIpZeroDiscard, wwpLeosMcastQueryTimeouts=wwpLeosMcastQueryTimeouts, wwpLeosMcastFilterMIBNotificationPrefix=wwpLeosMcastFilterMIBNotificationPrefix, wwpLeosMcastIgmpSnoopActiveLingerTimeout=wwpLeosMcastIgmpSnoopActiveLingerTimeout, wwpLeosMcastIgmpSnoopEntry=wwpLeosMcastIgmpSnoopEntry, wwpLeosMcastIgmpSnoopRobustness=wwpLeosMcastIgmpSnoopRobustness, wwpLeosMcastHostDiscards=wwpLeosMcastHostDiscards, wwpLeosMcastAddrOverlapNotification=wwpLeosMcastAddrOverlapNotification, wwpLeosMcastChannelStreamExPortId=wwpLeosMcastChannelStreamExPortId, wwpLeosMcastGlobalStatsClear=wwpLeosMcastGlobalStatsClear, wwpLeosMcastIgmpSnoopProxyQueryReplyTmo=wwpLeosMcastIgmpSnoopProxyQueryReplyTmo, wwpLeosMcastQueryMessages=wwpLeosMcastQueryMessages, wwpLeosMcastServerPortId=wwpLeosMcastServerPortId, wwpLeosMcastUnknownPktType=wwpLeosMcastUnknownPktType, wwpLeosMcastChannelStreamExPortMemEntry=wwpLeosMcastChannelStreamExPortMemEntry, wwpLeosMcastStatsClear=wwpLeosMcastStatsClear, wwpLeosMcastUnresolvedAction=wwpLeosMcastUnresolvedAction, wwpLeosMcastL2L3Mismatch=wwpLeosMcastL2L3Mismatch, wwpLeosMcastChannelStreamEntry=wwpLeosMcastChannelStreamEntry, wwpLeosMcastFilterMIBNotifications=wwpLeosMcastFilterMIBNotifications, wwpLeosMcastFilterWKMFAdhocActivate=wwpLeosMcastFilterWKMFAdhocActivate, wwpLeosMcastChannelStreamExPortMemTable=wwpLeosMcastChannelStreamExPortMemTable, wwpLeosMcastFilterWKMFLocalActivate=wwpLeosMcastFilterWKMFLocalActivate, wwpLeosMcastFilterServerPortTable=wwpLeosMcastFilterServerPortTable, wwpLeosMcastFilterConfigTable=wwpLeosMcastFilterConfigTable, wwpLeosMcastFilterStatsEntry=wwpLeosMcastFilterStatsEntry, wwpLeosMcastIgmpSnoopEnable=wwpLeosMcastIgmpSnoopEnable, wwpLeosMcastFilterState=wwpLeosMcastFilterState, wwpLeosMcastPortTagId=wwpLeosMcastPortTagId, wwpLeosMcastFilterMIBGroups=wwpLeosMcastFilterMIBGroups, wwpLeosMcastFilterOperState=wwpLeosMcastFilterOperState, wwpLeosMcastRouterDiscards=wwpLeosMcastRouterDiscards, wwpLeosMcastFilterMIBObjects=wwpLeosMcastFilterMIBObjects, wwpLeosMcastIgmpLastMemberQueryInterval=wwpLeosMcastIgmpLastMemberQueryInterval, wwpLeosMcastMemberCount=wwpLeosMcastMemberCount, wwpLeosMcastIgmpRouterQueryInterval=wwpLeosMcastIgmpRouterQueryInterval, wwpLeosMcastRouterSrcIpAddr=wwpLeosMcastRouterSrcIpAddr, wwpLeosMcastBadChecksum=wwpLeosMcastBadChecksum, wwpLeosMcastChanelStreamStartGroupAddr=wwpLeosMcastChanelStreamStartGroupAddr, wwpLeosMcastGroupMemberTable=wwpLeosMcastGroupMemberTable, wwpLeosMcastState=wwpLeosMcastState, wwpLeosMcastIgmpProxyQuerySrcIp=wwpLeosMcastIgmpProxyQuerySrcIp, wwpLeosMcastRouterSrcMacAddr=wwpLeosMcastRouterSrcMacAddr, wwpLeosMcastChanelStreamEndGroupAddr=wwpLeosMcastChanelStreamEndGroupAddr, wwpLeosMcastFilterMIBCompliances=wwpLeosMcastFilterMIBCompliances, wwpLeosMcastFilterMIB=wwpLeosMcastFilterMIB, wwpLeosMcastFilterUPFActivate=wwpLeosMcastFilterUPFActivate, VlanId=VlanId, wwpLeosMcastFilterStats=wwpLeosMcastFilterStats, wwpLeosMcastChannelStreamStatus=wwpLeosMcastChannelStreamStatus, wwpLeosMcastSnoopState=wwpLeosMcastSnoopState, wwpLeosMcastVlanId=wwpLeosMcastVlanId, wwpLeosMcastIgmpSnoopProxyQueryDelay=wwpLeosMcastIgmpSnoopProxyQueryDelay, wwpLeosMcastReportSendPortId=wwpLeosMcastReportSendPortId, wwpLeosMcastRouterPortId=wwpLeosMcastRouterPortId, wwpLeosMcastIgmpInquisitiveLeaveState=wwpLeosMcastIgmpInquisitiveLeaveState, wwpLeosMcastJoinMessages=wwpLeosMcastJoinMessages, wwpLeosMcastIgmpDefaultRouterPort=wwpLeosMcastIgmpDefaultRouterPort, PYSNMP_MODULE_ID=wwpLeosMcastFilterMIB, wwpLeosMcastGroupTable=wwpLeosMcastGroupTable, wwpLeosMcastIgmpPriority=wwpLeosMcastIgmpPriority, wwpLeosMcastChannelStreamExPortMemStatus=wwpLeosMcastChannelStreamExPortMemStatus, wwpLeosMcastFilterConfigEntry=wwpLeosMcastFilterConfigEntry, wwpLeosMcastIgmpSnoopLingerTmo=wwpLeosMcastIgmpSnoopLingerTmo, wwpLeosMcastFilterServerPortEntry=wwpLeosMcastFilterServerPortEntry)
