#
# PySNMP MIB module OASWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OASWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:32:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, TimeTicks, Gauge32, Integer32, Bits, Unsigned32, MibIdentifier, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Counter64, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "Gauge32", "Integer32", "Bits", "Unsigned32", "MibIdentifier", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Counter64", "ModuleIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

oaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 6926))
oaManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 1))
oaSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 1, 5))
oaSwitchMac = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1))
oaSwitchMacInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 1))
oaSwitchMacInfoNumber = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSwitchMacInfoNumber.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwitchMacInfoNumber.setDescription('Current number of entries in the learning table.')
oaSwitchMacInfoMaxNumbr = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSwitchMacInfoMaxNumbr.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwitchMacInfoMaxNumbr.setDescription('Maximum number of entries in the learning table.')
oaSwitchMacInfoClear = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwitchMacInfoClear.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwitchMacInfoClear.setDescription("GET always returns 'none (1)'. SET 'clear(2)' couses LT erasing. GET always returns 'none (1)'. WARNING: erasing LT on some kind of agents may couse disconnection for short period of time.")
oaSwMacTable = MibTable((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2), )
if mibBuilder.loadTexts: oaSwMacTable.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacTable.setDescription('A table that contains Learning Table with fields that does not exsist in dot1dTpFdbTable.')
oaSwMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1), ).setIndexNames((0, "OASWITCH-MIB", "oaSwMacAddr"), (0, "OASWITCH-MIB", "oaSwMacVid"))
if mibBuilder.loadTexts: oaSwMacEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacEntry.setDescription('Information about a specific MAC address in the oaSwMacTable.')
oaSwMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSwMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacAddr.setDescription('MAC address for which the bridge has forwarding and/or filtering information.')
oaSwMacVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSwMacVid.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacVid.setDescription("Tag of the entry: the address 'Address recognition' is concatenation of oaSwMac and oaSwMacVid. When ISVP is not implemented or ISVL mode is disabled, this field in SET/NEXT operations may have any value, GET operation should return 0.")
oaSwMacVidx = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacVidx.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacVidx.setDescription("Outbound VLAN tag: if frame 'Address recognition' was resolved with this entry, the forwarding will be maked according the VLAN with this tag. When ISVP is not implemented or ISVL mode is disabled, this field in SET operations may have any value, GET operation should return 0.")
oaSwMacGetViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSwMacGetViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacGetViewIndex.setDescription('Sequantial index of the entry.')
oaSwMacPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacPort.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacPort.setDescription("Port of the entry. '0' value indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address. Another words, the frame will be forwarding 'to the CPU only' and the bridge will sovle, what it must be done with this frame.")
oaSwMacMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dynamic", 2), ("static", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacMode.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacMode.setDescription("Status of the entry: Only 'dynamic (2)' entries are aged.")
oaSwMacTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacTagged.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacTagged.setDescription("'Tagged' state of the entry. When ISVP is not implemented or ISVL mode is disabled, this field in SET operations may have any value, GET operation should return 0.")
oaSwMacPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacPriority.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacPriority.setDescription('Controls the priority level of this entry')
oaSwMacFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacFlags.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacFlags.setDescription('Specific flags for MAC entry: 0x0001 - Router Entry')
oaSwMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6926, 1, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSwMacStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oaSwMacStatus.setDescription("State of the entry: Only 'valid(1)' entries participate in the forwarding/filtering process. The new entry is created when PDU with oaSwMacStatus=valid(1), oaSwMac, oaSwMacVid and optionally oaSwMacPort (default '0'), oaSwMacVidx (default oaSwMacVid) and oaSwMacMode comes. If {oaSwMac,oaSwMacVid} exists, the bridge replaces it. The old entry is deleted when PDU with oaSwMacStatus=invalid(2), oaSwMac, oaSwMacVid comes. The old entry is modified when PDU with oaSwMac, oaSwMacVid and new value of fields oaSwMacPort and/or oaSwMacVidx and/or oaSwMacMode comes.")
oaSysFrmGen = MibIdentifier((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3))
oaSysFrmGenSession = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idleFG", 1), ("runFG", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenSession.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenSession.setDescription('This object controls the activity of the Frame Generator process.')
oaSysFrmGenDa = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenDa.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenDa.setDescription('The Frame Generator Destination MAC Address.')
oaSysFrmGenSa = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenSa.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenSa.setDescription('The Frame Generator Source MAC Address.')
oaSysFrmGenPktFill = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenPktFill.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenPktFill.setDescription('The Frame Generator Packet Fill Pattern. The default is 0.')
oaSysFrmGenPktRate = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenPktRate.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenPktRate.setDescription('The Frame Generator Rate, meaning the number of packets per second to be generated. Each device is able to generate a certain number of packets/second. Default is 1 packet/second')
oaSysFrmGenDestMap = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenDestMap.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenDestMap.setDescription('The Frame Generator Destination Map = the set of ports to which the generated packets are to be sent. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of <1> then that port is included in the set of ports; the port is not included if its bit has a value of <0>. (Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.) The default value of this object is a string of ones of appropriate length.')
oaSysFrmGenPktNum = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenPktNum.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenPktNum.setDescription('The Frame Generator Number of Packets to be generated. Default is 1.')
oaSysFrmGenPktLen = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenPktLen.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenPktLen.setDescription('The Frame Generator Packet Length. Default is 60 bytes')
oaSysFrmGenXmtPktNum = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSysFrmGenXmtPktNum.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenXmtPktNum.setDescription('Number of Packets transmitted by the The Frame Generator.')
oaSysFrmGenPriority = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenPriority.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenPriority.setDescription('The Frame Generator packet priority. This value determines the priority level at which the generated packet will be transmitted. For tagged packets the VPT field in the vlan header will be assigned according to this value.')
oaSysFrmGenVlanId = MibScalar((1, 3, 6, 1, 4, 1, 6926, 1, 5, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaSysFrmGenVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: oaSysFrmGenVlanId.setDescription('A 12 bit VLAN Identifier to be set in the PVID field of the packet. 0 - Used when the packet should contains no vlan Header.')
mibBuilder.exportSymbols("OASWITCH-MIB", oaSwitchMacInfoMaxNumbr=oaSwitchMacInfoMaxNumbr, oaSysFrmGenPktNum=oaSysFrmGenPktNum, oaSysFrmGenDestMap=oaSysFrmGenDestMap, oaSysFrmGenPktLen=oaSysFrmGenPktLen, oaSysFrmGenPriority=oaSysFrmGenPriority, oaSwMacTable=oaSwMacTable, oaSysFrmGen=oaSysFrmGen, oaManagement=oaManagement, oaSwMacMode=oaSwMacMode, oaSysFrmGenPktRate=oaSysFrmGenPktRate, oaccess=oaccess, oaSysFrmGenDa=oaSysFrmGenDa, oaSwMacAddr=oaSwMacAddr, oaSwMacFlags=oaSwMacFlags, oaSysFrmGenPktFill=oaSysFrmGenPktFill, oaSwitchMac=oaSwitchMac, oaSwMacVidx=oaSwMacVidx, oaSysFrmGenXmtPktNum=oaSysFrmGenXmtPktNum, oaSwMacStatus=oaSwMacStatus, oaSwMacPriority=oaSwMacPriority, MacAddress=MacAddress, oaSwMacVid=oaSwMacVid, oaSwMacEntry=oaSwMacEntry, oaSwitchMacInfoClear=oaSwitchMacInfoClear, oaSwMacGetViewIndex=oaSwMacGetViewIndex, oaSwMacTagged=oaSwMacTagged, oaSwitchMacInfoNumber=oaSwitchMacInfoNumber, oaSysFrmGenSa=oaSysFrmGenSa, oaSysFrmGenVlanId=oaSysFrmGenVlanId, oaSysFrmGenSession=oaSysFrmGenSession, oaSwitch=oaSwitch, oaSwMacPort=oaSwMacPort, oaSwitchMacInfo=oaSwitchMacInfo)
