#
# PySNMP MIB module JUNIPER-JS-PACKET-MIRROR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JS-PACKET-MIRROR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
Ipv6AddressPrefix, = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix")
jnxJsPacketMirror, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsPacketMirror")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, TimeTicks, Counter64, ModuleIdentity, ObjectIdentity, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, Bits, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "ObjectIdentity", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "Bits", "Gauge32", "MibIdentifier")
TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString")
jnxJsPacketMirrorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1))
jnxJsPacketMirrorMIB.setRevisions(('2009-10-29 00:00', '2010-02-25 00:00', '2010-12-16 00:00', '2011-03-16 00:00', '2011-03-23 00:00', '2011-06-07 00:00', '2011-11-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJsPacketMirrorMIB.setRevisionsDescriptions(('Creation Date', 'Added analyzer address to the LI Service Activated trap.', 'Added Target Ipv6 Address address to traps.', 'Added Target Ipv6 Prefix Length to traps.', 'Add missing Ipv6 Prefix Length to traps. Use SYNTAX Counter64 for tranmitted and received Octets.', 'Change SYNTAX of Mirror Identifier.', 'Add jnxJsPacketMirrorTriggerType circuitId.',))
if mibBuilder.loadTexts: jnxJsPacketMirrorMIB.setLastUpdated('201111230000Z')
if mibBuilder.loadTexts: jnxJsPacketMirrorMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJsPacketMirrorMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxJsPacketMirrorMIB.setDescription('The packet mirror MIB for the Juniper Networks enterprise.')
jnxJsPacketMirrorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0))
jnxJsPacketMirrorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1))
jnxJsPacketMirrorTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1))
jnxJsPacketMirrorIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorIdentifier.setDescription('The mirror identifier.')
jnxJsPacketMirrorSessionIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorSessionIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorSessionIdentifier.setDescription('The session identifier.')
jnxJsPacketMirrorTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorTrigger.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorTrigger.setDescription('The trigger that caused mirroring.')
jnxJsPacketMirrorTriggerType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("interfaceString", 0), ("ipAddress", 1), ("nasPortId", 2), ("username", 3), ("callingStationId", 4), ("acctSessionId", 5), ("option82", 6), ("remoteId", 7), ("circuitId", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorTriggerType.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorTriggerType.setDescription('The trigger type.')
jnxJsPacketMirrorConfigurationSource = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("radiusLogin", 0), ("radiusCoa", 1), ("cliTrigger", 2), ("cliStatic", 3), ("dtcp", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorConfigurationSource.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorConfigurationSource.setDescription('The configuration source of this mirroring.')
jnxJsPacketMirrorErrorCause = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("genericFailure", 0), ("noResourcesAvailable", 1), ("memoryExhausted", 2), ("noSuchName", 3), ("invalidAnalyzerAddress", 4), ("noSuchUserOrInterface", 5), ("featureNotSupported", 6), ("missingOrInvalidAttribute", 7), ("routerMismatch", 8), ("nameLengthExceeded", 9), ("dfcdNak", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorErrorCause.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorErrorCause.setDescription('The error cause.')
jnxJsPacketMirrorErrorString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorErrorString.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorErrorString.setDescription('The error string as reported by the JUNOS application.')
jnxJsPacketMirrorApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("authd", 0)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorApplicationName.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorApplicationName.setDescription('The name of the JUNOS application reporting the trap.')
jnxJsPacketMirrorAnalyzerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorAnalyzerAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorAnalyzerAddress.setDescription('The IP address of analyzer.')
jnxJsPacketMirrorUserName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorUserName.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorUserName.setDescription("The login name of the user who's traffic is being mirrored.")
jnxJsPacketMirrorDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 11), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorDateAndTime.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorDateAndTime.setDescription('The time of event.')
jnxJsPacketMirrorRouterId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorRouterId.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorRouterId.setDescription('The VRF ID in JUNOS. Represented as the Logical Router (LR) Name followed by the Router Instance (RI) Name.')
jnxJsPacketMirrorDirection = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ingress", 0), ("egress", 1), ("bidirection", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorDirection.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorDirection.setDescription('The mirroring direction.')
jnxJsPacketMirrorTargetIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorTargetIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorTargetIpAddress.setDescription('IP address of the mirrored interface.')
jnxJsPacketMirrorTerminationReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("genericFailure", 0), ("userRequest", 1), ("lostCarrier", 2), ("lostService", 3), ("idleTimeout", 4), ("sessionTimeout", 5), ("adminReset", 6), ("adminReboot", 7), ("portError", 8), ("nasError", 9), ("nasRequest0", 10), ("nasReboot1", 11), ("portUnneeded", 12), ("portPreempted", 13), ("portSuspended", 14), ("serviceUnavailable", 15), ("callback", 16), ("userError", 17), ("hostRequest", 18), ("supplicantRestart", 19), ("reauthenticationFailure", 20), ("portReinitialized", 21), ("portAdministrativelyDisabled", 22), ("authenticationReject", 23), ("interfaceDeleted", 24)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorTerminationReason.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorTerminationReason.setDescription('The reason for ending a mirroring session which the analyzer may interpret as an access or packet session event.')
jnxPacketMirrorCallingStationIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPacketMirrorCallingStationIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxPacketMirrorCallingStationIdentifier.setDescription("The calling station id of the subscriber who's traffic is being monitored.")
jnxPacketMirrorNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxPacketMirrorNasIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxPacketMirrorNasIdentifier.setDescription('The Nas identification where the traffic is being monitored.')
jnxJsPacketMirrorOctetsReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 18), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorOctetsReceived.setDescription('The subscriber octet count received.')
jnxJsPacketMirrorOctetsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 19), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorOctetsTransmitted.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorOctetsTransmitted.setDescription('The subscriber octet count transmitted.')
jnxJsPacketMirrorTargetIpv6Address = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 20), Ipv6AddressPrefix()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorTargetIpv6Address.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorTargetIpv6Address.setDescription('IPv6 address of the mirrored interface.')
jnxJsPacketMirrorTrgtIpv6PfxLen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 1, 1, 21), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsPacketMirrorTrgtIpv6PfxLen.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorTrgtIpv6PfxLen.setDescription('IPv6 prefix length of the mirrored interface.')
jnxJsPacketMirrorMirroringFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 1)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorUserName"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorErrorCause"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorApplicationName"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorErrorString"))
if mibBuilder.loadTexts: jnxJsPacketMirrorMirroringFailure.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorMirroringFailure.setDescription('The jnxJsPacketMirrorMirroringFailure Trap indicates that the packet mirroring operation failed.')
jnxJsPacketMirrorLiSubscriberLoggedIn = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 2)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDirection"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorAnalyzerAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxPacketMirrorNasIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxPacketMirrorCallingStationIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpv6Address"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrgtIpv6PfxLen"))
if mibBuilder.loadTexts: jnxJsPacketMirrorLiSubscriberLoggedIn.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorLiSubscriberLoggedIn.setDescription('The jnxJsPacketMirrorLiSubscriberLoggedIn Trap indicates that the target has logged in.')
jnxJsPacketMirrorLiSubscriberLogInFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 3)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDirection"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorAnalyzerAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorErrorCause"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorErrorString"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxPacketMirrorCallingStationIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpv6Address"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrgtIpv6PfxLen"))
if mibBuilder.loadTexts: jnxJsPacketMirrorLiSubscriberLogInFailed.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorLiSubscriberLogInFailed.setDescription('The jnxJsPacketMirrorLiSubscriberLogInFailed Trap indicates that a request for the subscriber log in request failed due to the reason in jnxJsPacketMirrorTerminationReason.')
jnxJsPacketMirrorLiSubscriberLoggedOut = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 4)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDirection"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorAnalyzerAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTerminationReason"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorOctetsReceived"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorOctetsTransmitted"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpv6Address"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrgtIpv6PfxLen"))
if mibBuilder.loadTexts: jnxJsPacketMirrorLiSubscriberLoggedOut.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorLiSubscriberLoggedOut.setDescription('The jnxJsPacketMirrorLiSubscriberLoggedOut Trap indicates that the target has logged out with one of the reasons in jnxJsPacketMirrorTerminationReason.')
jnxJsPacketMirrorLiServiceActivated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 5)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDirection"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxPacketMirrorNasIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxPacketMirrorCallingStationIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorAnalyzerAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpv6Address"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrgtIpv6PfxLen"))
if mibBuilder.loadTexts: jnxJsPacketMirrorLiServiceActivated.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorLiServiceActivated.setDescription('The jnxJsPacketMirrorLiServiceActivated Trap indicates that packet mirroring on an interface has been activated.')
jnxJsPacketMirrorLiServiceActivationFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 6)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDirection"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorAnalyzerAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorErrorCause"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorErrorString"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxPacketMirrorCallingStationIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpv6Address"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrgtIpv6PfxLen"))
if mibBuilder.loadTexts: jnxJsPacketMirrorLiServiceActivationFailed.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorLiServiceActivationFailed.setDescription('The jnxJsPacketMirrorLiServiceActivationFailed Trap indicates that the LI service on an interface has failed due to the reason in jnxJsPacketMirrorTerminationReason.')
jnxJsPacketMirrorLiServiceDeactivated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 16, 1, 0, 7)).setObjects(("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDateAndTime"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorConfigurationSource"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTriggerType"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrigger"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorRouterId"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorSessionIdentifier"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorDirection"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorAnalyzerAddress"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTerminationReason"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTargetIpv6Address"), ("JUNIPER-JS-PACKET-MIRROR-MIB", "jnxJsPacketMirrorTrgtIpv6PfxLen"))
if mibBuilder.loadTexts: jnxJsPacketMirrorLiServiceDeactivated.setStatus('current')
if mibBuilder.loadTexts: jnxJsPacketMirrorLiServiceDeactivated.setDescription('The jnxJsPacketMirrorLiServiceDeactivated Trap indicates that the LI service on an interface has been deactivated due to the reason in jnxJsPacketMirrorTerminationReason.')
mibBuilder.exportSymbols("JUNIPER-JS-PACKET-MIRROR-MIB", jnxJsPacketMirrorMirroringFailure=jnxJsPacketMirrorMirroringFailure, jnxJsPacketMirrorTrigger=jnxJsPacketMirrorTrigger, jnxJsPacketMirrorTrapVars=jnxJsPacketMirrorTrapVars, jnxJsPacketMirrorLiServiceActivated=jnxJsPacketMirrorLiServiceActivated, jnxJsPacketMirrorUserName=jnxJsPacketMirrorUserName, jnxJsPacketMirrorDateAndTime=jnxJsPacketMirrorDateAndTime, jnxJsPacketMirrorOctetsTransmitted=jnxJsPacketMirrorOctetsTransmitted, jnxJsPacketMirrorLiServiceActivationFailed=jnxJsPacketMirrorLiServiceActivationFailed, jnxJsPacketMirrorObjects=jnxJsPacketMirrorObjects, jnxJsPacketMirrorNotifications=jnxJsPacketMirrorNotifications, jnxJsPacketMirrorTerminationReason=jnxJsPacketMirrorTerminationReason, jnxJsPacketMirrorMIB=jnxJsPacketMirrorMIB, jnxJsPacketMirrorLiServiceDeactivated=jnxJsPacketMirrorLiServiceDeactivated, jnxJsPacketMirrorAnalyzerAddress=jnxJsPacketMirrorAnalyzerAddress, jnxJsPacketMirrorApplicationName=jnxJsPacketMirrorApplicationName, jnxJsPacketMirrorLiSubscriberLoggedIn=jnxJsPacketMirrorLiSubscriberLoggedIn, jnxPacketMirrorNasIdentifier=jnxPacketMirrorNasIdentifier, jnxJsPacketMirrorTargetIpAddress=jnxJsPacketMirrorTargetIpAddress, jnxJsPacketMirrorRouterId=jnxJsPacketMirrorRouterId, jnxJsPacketMirrorDirection=jnxJsPacketMirrorDirection, jnxJsPacketMirrorTrgtIpv6PfxLen=jnxJsPacketMirrorTrgtIpv6PfxLen, jnxJsPacketMirrorSessionIdentifier=jnxJsPacketMirrorSessionIdentifier, jnxJsPacketMirrorErrorCause=jnxJsPacketMirrorErrorCause, jnxJsPacketMirrorConfigurationSource=jnxJsPacketMirrorConfigurationSource, jnxJsPacketMirrorIdentifier=jnxJsPacketMirrorIdentifier, jnxJsPacketMirrorTargetIpv6Address=jnxJsPacketMirrorTargetIpv6Address, PYSNMP_MODULE_ID=jnxJsPacketMirrorMIB, jnxJsPacketMirrorLiSubscriberLoggedOut=jnxJsPacketMirrorLiSubscriberLoggedOut, jnxJsPacketMirrorTriggerType=jnxJsPacketMirrorTriggerType, jnxJsPacketMirrorErrorString=jnxJsPacketMirrorErrorString, jnxJsPacketMirrorLiSubscriberLogInFailed=jnxJsPacketMirrorLiSubscriberLogInFailed, jnxPacketMirrorCallingStationIdentifier=jnxPacketMirrorCallingStationIdentifier, jnxJsPacketMirrorOctetsReceived=jnxJsPacketMirrorOctetsReceived)
