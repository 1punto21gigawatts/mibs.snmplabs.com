#
# PySNMP MIB module SONUS-DSP-RESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-DSP-RESOURCES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, Counter32, Counter64, ModuleIdentity, Bits, Unsigned32, ObjectIdentity, IpAddress, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Counter32", "Counter64", "ModuleIdentity", "Bits", "Unsigned32", "ObjectIdentity", "IpAddress", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
sonusShelfIndex, sonusEventLevel, sonusEventDescription, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusShelfIndex", "sonusEventLevel", "sonusEventDescription", "sonusEventClass")
sonusResourcesMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusResourcesMIBs")
SonusName, SonusAdminState, SonusShelfIndex = mibBuilder.importSymbols("SONUS-TC", "SonusName", "SonusAdminState", "SonusShelfIndex")
sonusDspResourcesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1))
if mibBuilder.loadTexts: sonusDspResourcesMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusDspResourcesMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusDspResourcesMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 Carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusDspResourcesMIB.setDescription('The MIB Module for DSP Resources Management.')
sonusDspResourcesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1))
sonusChannelStatTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 1))
sonusDspAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: sonusDspAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnTable.setDescription('Table of Sonus Enterprise DSP Admn information')
sonusDspAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-DSP-RESOURCES-MIB", "sonusDspAdmnShelfIndex"), (0, "SONUS-DSP-RESOURCES-MIB", "sonusDspAdmnSlotIndex"), (0, "SONUS-DSP-RESOURCES-MIB", "sonusDspAdmnDspIndex"))
if mibBuilder.loadTexts: sonusDspAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnEntry.setDescription('Entry in Table consisting of the all the Sonus DSP ADMN information')
sonusDspAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnShelfIndex.setDescription('Shelf Index for this table')
sonusDspAdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspAdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnSlotIndex.setDescription('Slot index for this table')
sonusDspAdmnDspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspAdmnDspIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnDspIndex.setDescription('DSP index into this table')
sonusDspAdmnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vpad", 1), ("hdlc", 2), ("g729AB", 3), ("tone", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnType.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnType.setDescription('DSP Function Type, VPAD XPAD TONE etc.')
sonusDspAdmnNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnNumChannels.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnNumChannels.setDescription('Number of channels on this DSP')
sonusDspAdmnMaxTail = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("millisecs24", 1), ("millisec32", 2), ("millisec48", 3), ("millisec64", 4))).clone('millisec64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnMaxTail.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnMaxTail.setDescription('Maximum Echo tail length')
sonusDspAdmnEcAudioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uLaw", 1), ("aLaw", 2))).clone('uLaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnEcAudioType.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnEcAudioType.setDescription('Echo Cancellation: A-law or U-law')
sonusDspAdmnEcSignallingTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("c5", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnEcSignallingTone.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnEcSignallingTone.setDescription('Echo Cancellation: None, 2400, 2600 or 2101 Hz')
sonusDspAdmnNlpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnNlpDisable.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnNlpDisable.setDescription('Non-linear processing control, Disable')
sonusDspAdmnNlpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnNlpEnable.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnNlpEnable.setDescription('Non-linear processing control, Enable')
sonusDspAdmnJitterEvalPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnJitterEvalPeriod.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnJitterEvalPeriod.setDescription('Time period to decide when to periodically evaluate playout occupancy in units of 1.25 msec = 1 subframe')
sonusDspAdmnJitterMinOccThsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspAdmnJitterMinOccThsh.setStatus('current')
if mibBuilder.loadTexts: sonusDspAdmnJitterMinOccThsh.setDescription('If occupancy falls below this threshold for some time period we advance the playout time. Units are 125usec samples')
sonusDspResidualEchoControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cancelOnly", 1), ("suppressResidual", 2), ("comfortNoise", 4))).clone('comfortNoise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspResidualEchoControl.setStatus('current')
if mibBuilder.loadTexts: sonusDspResidualEchoControl.setDescription('For Network Echo Cancellation, specifies the residual echo cancellation.')
sonusDspEchoReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dB6", 1), ("dB3", 2), ("dB0", 3))).clone('dB6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspEchoReturnLoss.setStatus('current')
if mibBuilder.loadTexts: sonusDspEchoReturnLoss.setDescription("For Network Echo Cancellation, specifies the echo return loss in dB's. Default value is 6dB.")
sonusDspModemDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("ignore2100Hz", 1), ("g164", 2), ("g165", 4))).clone('g165')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspModemDisable.setStatus('current')
if mibBuilder.loadTexts: sonusDspModemDisable.setDescription('For Network Echo Cancellation, specifies whether to disable echo cancellation when a modem tone is detected.')
sonusDspHighLevelComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dB6", 2))).clone('dB6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDspHighLevelComp.setStatus('current')
if mibBuilder.loadTexts: sonusDspHighLevelComp.setDescription('For Network Echo Cancellation, the high level compensation value. Default value is to attenuate by 6dB.')
sonusDspStatTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 3))
sonusDspSlotStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4), )
if mibBuilder.loadTexts: sonusDspSlotStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatTable.setDescription('Table of Sonus Enterprise DSP Resource Status for a particular slot')
sonusDspSlotStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1), ).setIndexNames((0, "SONUS-DSP-RESOURCES-MIB", "sonusDspSlotStatShelfIndex"), (0, "SONUS-DSP-RESOURCES-MIB", "sonusDspSlotStatSlotIndex"))
if mibBuilder.loadTexts: sonusDspSlotStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatEntry.setDescription('Entry in Table consisting of Sonus DSP Resource Status information for a particular slot')
sonusDspSlotStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatShelfIndex.setDescription('Shelf index for this table')
sonusDspSlotStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatSlotIndex.setDescription('Slot index for this table')
sonusDspSlotStatG711EcTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG711EcTotal.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG711EcTotal.setDescription('Total number of G711 with Echo Cancellation resources available on this slot')
sonusDspSlotStatG711Total = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG711Total.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG711Total.setDescription('Total number of G711 resources available on this slot')
sonusDspSlotStatHdlcTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatHdlcTotal.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatHdlcTotal.setDescription('Total number of HDLC resources available on this slot')
sonusDspSlotStatToneTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatToneTotal.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatToneTotal.setDescription('Total number of Tones resources available on this slot')
sonusDspSlotStatG729AbTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG729AbTotal.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG729AbTotal.setDescription('Total number of G729A+B resources available on this slot')
sonusDspSlotStatG711EcUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG711EcUtilization.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG711EcUtilization.setDescription('Percentage utilization of G711 Echo canceller resources on this slot')
sonusDspSlotStatG711EcAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG711EcAllocFailures.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG711EcAllocFailures.setDescription('Percentage of G711 Echo canceller resources allocation failures on this slot')
sonusDspSlotStatG711Utilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG711Utilization.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG711Utilization.setDescription('Percentage utilization of G711 resources on this slot')
sonusDspSlotStatG711AllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG711AllocFailures.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG711AllocFailures.setDescription('Percentage of G711 resources allocation failures on this slot')
sonusDspSlotStatHdlcUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatHdlcUtilization.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatHdlcUtilization.setDescription('Percentage utilization HDLC resources on this slot')
sonusDspSlotStatHdlcAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatHdlcAllocFailures.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatHdlcAllocFailures.setDescription('Percentage of HDLC resources allocation failures on this slot')
sonusDspSlotStatToneUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatToneUtilization.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatToneUtilization.setDescription('Percentage utilization of Tone resources on this slot')
sonusDspSlotStatToneAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatToneAllocFailures.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatToneAllocFailures.setDescription('Percentage of Tone resources allocation failures on this slot')
sonusDspSlotStatG729AbUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG729AbUtilization.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG729AbUtilization.setDescription('Percentage utilization of G729A+B resources on this slot')
sonusDspSlotStatG729AbAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDspSlotStatG729AbAllocFailures.setStatus('current')
if mibBuilder.loadTexts: sonusDspSlotStatG729AbAllocFailures.setDescription('Percentage of G729A+B resources allocation failures on this slot')
sonusPadAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5), )
if mibBuilder.loadTexts: sonusPadAdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnTable.setDescription('Table of Sonus Enterprise Packet Assembler Dis-Assembler Admn information')
sonusPadAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1), ).setIndexNames((0, "SONUS-DSP-RESOURCES-MIB", "sonusPadAdmnShelfIndex"))
if mibBuilder.loadTexts: sonusPadAdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnEntry.setDescription('Entry in Table consisting of the Sonus Packet Assembler Dis-assembler Administartion information')
sonusPadAdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusPadAdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnShelfIndex.setDescription('Shelf Index for Sonus PAD table.')
sonusPadAdmnJitterEvalPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnJitterEvalPeriod.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnJitterEvalPeriod.setDescription('Time period to decide when to periodically evaluate playout occupancy in units of millisecond.')
sonusPadAdmnJitterMinOccThsh = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnJitterMinOccThsh.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnJitterMinOccThsh.setDescription('If occupancy falls below this threshold for some time period we advance the playout time in units of millisecond.')
sonusPadAdmnRtpG711ALaw = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnRtpG711ALaw.setStatus('obsolete')
if mibBuilder.loadTexts: sonusPadAdmnRtpG711ALaw.setDescription('This Payload type is no longer configurable. It has been standardized in RFC 1890.')
sonusPadAdmnRtpG711ULaw = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnRtpG711ULaw.setStatus('obsolete')
if mibBuilder.loadTexts: sonusPadAdmnRtpG711ULaw.setDescription('This Payload type is no longer configurable. It has been standardized in RFC 1890.')
sonusPadAdmnRtpG729A = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnRtpG729A.setStatus('obsolete')
if mibBuilder.loadTexts: sonusPadAdmnRtpG729A.setDescription('This Payload type is no longer configurable. It has been standardized in RFC 1890.')
sonusPadAdmnRtpG729AB = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnRtpG729AB.setStatus('obsolete')
if mibBuilder.loadTexts: sonusPadAdmnRtpG729AB.setDescription('This Payload type is no longer configurable. It has been standardized in RFC 1890.')
sonusPadAdmnG729ABThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnG729ABThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnG729ABThreshold.setDescription('Perecentage Threshold crossing value for G729AB resources. When this threshold is reached an event will be generated if sonusPadAdmnG729ABThresholdState is enabled.')
sonusPadAdmnG729ABThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 9), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnG729ABThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnG729ABThresholdState.setDescription('State of G729AB Threshold Event, Enabled/Disabled. An event will be generated only if state is enabled.')
sonusPadAdmnToneThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnToneThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnToneThreshold.setDescription('Perecentage Threshold crossing value for tone resources. When this threshold is reached an event will be generated if sonusPadAdmnToneThresholdState is enabled.')
sonusPadAdmnToneThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 11), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnToneThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnToneThresholdState.setDescription('State of Tone Threshold Event, Enabled/Disabled. An event will be generated only if state is enabled.')
sonusPadAdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 12), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusPadAdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnRowStatus.setDescription('This object is used to create, delete, or modify a row in this table.')
sonusPadAdmnRtpDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnRtpDtmfRelay.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnRtpDtmfRelay.setDescription('RTP Payload type used for DTMF relay during compressed calls.')
sonusPadAdmnRtpFaxRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(101)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnRtpFaxRelay.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnRtpFaxRelay.setDescription('RTP Payload type used for fax relay during compressed calls.')
sonusPadAdmnSidMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 300000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnSidMinTime.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnSidMinTime.setDescription('Minimum time between silence packets. In units of millisecond.')
sonusPadAdmnSidMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 300000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnSidMaxTime.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnSidMaxTime.setDescription('Maximum time between silence packets. Must be larger than minimum time between silence packets. In units of millisecond.')
sonusPadAdmnSidHangoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 2560)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnSidHangoverTime.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnSidHangoverTime.setDescription('Minimum time after a VAD detects speaker going inactive before sending a silence packets. In units of millisecond.')
sonusPadAdmnSidMinNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 62)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnSidMinNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnSidMinNoiseFloor.setDescription('Minimum noise floor, if energy level is below this it will be considered as silence. Configuration range is between -62dBm -24dBm.')
sonusPadAdmnSidMaxNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(24, 62)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnSidMaxNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnSidMaxNoiseFloor.setDescription('Maximum noise floor, if the energy level is above this it will be considered as speech. Configuration range is between -62dBm -24dBm.')
sonusPadAdmnComfortEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 90)).clone(56)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusPadAdmnComfortEnergy.setStatus('current')
if mibBuilder.loadTexts: sonusPadAdmnComfortEnergy.setDescription('Initial estimate to be used for generating comfort noise. It is used when no silence packets are received to generate comfort noise. Configuration range is between -90dBm and -35dBm.')
sonusEchoCancellorProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6))
sonusEchoCancellorProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEchoCancellorProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileNextIndex.setDescription('The next valid index to use when creating an entry in the sonusEchoCancellorProfile.')
sonusEchoCancellorProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2), )
if mibBuilder.loadTexts: sonusEchoCancellorProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileTable.setDescription('Table of Sonus Enterprise Echo Canceller Profile information')
sonusEchoCancellorProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1), ).setIndexNames((0, "SONUS-DSP-RESOURCES-MIB", "sonusEchoCancellorProfileIndex"))
if mibBuilder.loadTexts: sonusEchoCancellorProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileEntry.setDescription('Entry in Table consisting of the Sonus Echo Canceller Profile entries')
sonusEchoCancellorProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusEchoCancellorProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileIndex.setDescription('Index into the Echo Canceller Profile table')
sonusEchoCancellorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileName.setDescription('Name of this Echo Canceller Profile')
sonusEchoCancellorProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 3), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileState.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileState.setDescription('Echo Canceller Profile state. Profile can only be applied when in enabled state.')
sonusEchoCancellorProfileMaxTail = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("millisec24", 1), ("millisec32", 2), ("millisec48", 3), ("millisec64", 4))).clone('millisec64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileMaxTail.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileMaxTail.setDescription('Maximum Echo canceller tail length')
sonusEchoCancellorProfileAudioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uLaw", 1), ("aLaw", 2))).clone('uLaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileAudioType.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileAudioType.setDescription('Audio encoding type A-law or U-law')
sonusEchoCancellorProfileSignallingTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("c5", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileSignallingTone.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileSignallingTone.setDescription('Echo Cancellation: None, 2400, 2600 or 2101 Hz')
sonusEchoCancellorProfileNlpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileNlpDisable.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileNlpDisable.setDescription('Non-linear processing control, Disable')
sonusEchoCancellorProfileNlpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileNlpEnable.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileNlpEnable.setDescription('Non-linear processing control, Enable')
sonusEchoCancellorProfileReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dB6", 1), ("dB3", 2), ("dB0", 3))).clone('dB6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileReturnLoss.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileReturnLoss.setDescription("For Network Echo Cancellation, specifies the echo return loss in dB's. Default value is 6dB.")
sonusEchoCancellorProfileResidualEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cancelOnly", 1), ("suppressResidual", 2), ("comfortNoise", 4))).clone('comfortNoise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileResidualEcho.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileResidualEcho.setDescription('For Network Echo Cancellation, specifies the residual echo cancellation.')
sonusEchoCancellorProfileHiLevelComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dB6", 2))).clone('dB6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileHiLevelComp.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileHiLevelComp.setDescription('For Network Echo Cancellation, the high level compensation value. Default value is to attenuate by 6dB.')
sonusEchoCancellorProfileModemDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("ignore2100Hz", 1), ("g164", 2), ("g165", 4))).clone('g165')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileModemDisable.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileModemDisable.setDescription('For Network Echo Cancellation, specifies whether to disable echo cancellation when a modem tone is detected.')
sonusEchoCancellorProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileRowStatus.setDescription('This object is used to create, delete, or modify a row in this table.')
sonusEchoCancellorProfileNarrowbandDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusEchoCancellorProfileNarrowbandDetection.setStatus('current')
if mibBuilder.loadTexts: sonusEchoCancellorProfileNarrowbandDetection.setDescription('For Network Echo Cancellation, narrow band detection is OFF or ON. If set ON it narrows the G.164 detection bandwidth in G.165 mode to the G.165 band.')
sonusPadMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 2))
sonusPadMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 2, 0))
sonusPadMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 2, 1))
sonusPadThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g729AB", 1), ("tone", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusPadThresholdType.setStatus('current')
if mibBuilder.loadTexts: sonusPadThresholdType.setDescription('Type of resource usage that caused a threshold crossing trap')
sonusPadThresholdState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusPadThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusPadThresholdState.setDescription('State of threshold, indicates whether threshold is on or off')
sonusPadThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 2, 1, 2, 0, 1)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-DSP-RESOURCES-MIB", "sonusPadThresholdType"), ("SONUS-DSP-RESOURCES-MIB", "sonusPadThresholdState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusPadThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: sonusPadThresholdNotification.setDescription('Generated when a PAD resource usage has gone above the threshold value. The type indicates the type reseource.')
mibBuilder.exportSymbols("SONUS-DSP-RESOURCES-MIB", sonusDspResourcesMIBObjects=sonusDspResourcesMIBObjects, sonusPadAdmnG729ABThresholdState=sonusPadAdmnG729ABThresholdState, sonusPadThresholdType=sonusPadThresholdType, sonusDspAdmnJitterEvalPeriod=sonusDspAdmnJitterEvalPeriod, sonusPadAdmnComfortEnergy=sonusPadAdmnComfortEnergy, sonusEchoCancellorProfile=sonusEchoCancellorProfile, sonusPadAdmnRtpG711ULaw=sonusPadAdmnRtpG711ULaw, sonusPadMIBNotifications=sonusPadMIBNotifications, sonusEchoCancellorProfileName=sonusEchoCancellorProfileName, sonusPadAdmnSidHangoverTime=sonusPadAdmnSidHangoverTime, sonusDspSlotStatHdlcAllocFailures=sonusDspSlotStatHdlcAllocFailures, sonusDspAdmnShelfIndex=sonusDspAdmnShelfIndex, sonusEchoCancellorProfileNextIndex=sonusEchoCancellorProfileNextIndex, sonusDspModemDisable=sonusDspModemDisable, sonusPadAdmnSidMaxNoiseFloor=sonusPadAdmnSidMaxNoiseFloor, sonusDspSlotStatG711Total=sonusDspSlotStatG711Total, sonusPadAdmnRtpFaxRelay=sonusPadAdmnRtpFaxRelay, sonusDspSlotStatG729AbUtilization=sonusDspSlotStatG729AbUtilization, sonusDspSlotStatG711EcAllocFailures=sonusDspSlotStatG711EcAllocFailures, sonusDspAdmnType=sonusDspAdmnType, sonusDspSlotStatHdlcTotal=sonusDspSlotStatHdlcTotal, sonusDspResourcesMIB=sonusDspResourcesMIB, sonusDspAdmnEcAudioType=sonusDspAdmnEcAudioType, sonusDspAdmnMaxTail=sonusDspAdmnMaxTail, sonusDspSlotStatEntry=sonusDspSlotStatEntry, sonusPadAdmnRtpG729A=sonusPadAdmnRtpG729A, sonusDspSlotStatToneAllocFailures=sonusDspSlotStatToneAllocFailures, sonusDspSlotStatToneUtilization=sonusDspSlotStatToneUtilization, sonusPadMIBNotificationsObjects=sonusPadMIBNotificationsObjects, sonusPadAdmnJitterEvalPeriod=sonusPadAdmnJitterEvalPeriod, sonusDspSlotStatG711EcTotal=sonusDspSlotStatG711EcTotal, sonusEchoCancellorProfileHiLevelComp=sonusEchoCancellorProfileHiLevelComp, sonusEchoCancellorProfileMaxTail=sonusEchoCancellorProfileMaxTail, sonusDspSlotStatSlotIndex=sonusDspSlotStatSlotIndex, sonusDspEchoReturnLoss=sonusDspEchoReturnLoss, sonusPadMIBNotificationsPrefix=sonusPadMIBNotificationsPrefix, sonusEchoCancellorProfileNlpDisable=sonusEchoCancellorProfileNlpDisable, sonusPadAdmnToneThresholdState=sonusPadAdmnToneThresholdState, sonusDspAdmnJitterMinOccThsh=sonusDspAdmnJitterMinOccThsh, sonusDspAdmnNumChannels=sonusDspAdmnNumChannels, sonusDspSlotStatShelfIndex=sonusDspSlotStatShelfIndex, sonusDspAdmnSlotIndex=sonusDspAdmnSlotIndex, sonusPadAdmnRtpDtmfRelay=sonusPadAdmnRtpDtmfRelay, sonusEchoCancellorProfileNlpEnable=sonusEchoCancellorProfileNlpEnable, sonusDspStatTable=sonusDspStatTable, sonusEchoCancellorProfileNarrowbandDetection=sonusEchoCancellorProfileNarrowbandDetection, sonusChannelStatTable=sonusChannelStatTable, sonusDspSlotStatTable=sonusDspSlotStatTable, sonusEchoCancellorProfileSignallingTone=sonusEchoCancellorProfileSignallingTone, sonusDspSlotStatToneTotal=sonusDspSlotStatToneTotal, sonusPadAdmnG729ABThreshold=sonusPadAdmnG729ABThreshold, sonusPadAdmnSidMaxTime=sonusPadAdmnSidMaxTime, sonusEchoCancellorProfileModemDisable=sonusEchoCancellorProfileModemDisable, sonusPadThresholdState=sonusPadThresholdState, sonusEchoCancellorProfileIndex=sonusEchoCancellorProfileIndex, sonusPadAdmnRowStatus=sonusPadAdmnRowStatus, sonusPadAdmnEntry=sonusPadAdmnEntry, sonusEchoCancellorProfileAudioType=sonusEchoCancellorProfileAudioType, sonusDspAdmnEcSignallingTone=sonusDspAdmnEcSignallingTone, sonusPadAdmnToneThreshold=sonusPadAdmnToneThreshold, sonusDspSlotStatG711AllocFailures=sonusDspSlotStatG711AllocFailures, sonusDspAdmnNlpDisable=sonusDspAdmnNlpDisable, sonusPadAdmnJitterMinOccThsh=sonusPadAdmnJitterMinOccThsh, sonusPadAdmnSidMinNoiseFloor=sonusPadAdmnSidMinNoiseFloor, sonusPadThresholdNotification=sonusPadThresholdNotification, sonusDspAdmnTable=sonusDspAdmnTable, sonusDspSlotStatG711EcUtilization=sonusDspSlotStatG711EcUtilization, sonusPadAdmnSidMinTime=sonusPadAdmnSidMinTime, sonusDspHighLevelComp=sonusDspHighLevelComp, sonusDspSlotStatG729AbTotal=sonusDspSlotStatG729AbTotal, sonusEchoCancellorProfileReturnLoss=sonusEchoCancellorProfileReturnLoss, sonusPadAdmnShelfIndex=sonusPadAdmnShelfIndex, sonusDspAdmnEntry=sonusDspAdmnEntry, sonusDspSlotStatHdlcUtilization=sonusDspSlotStatHdlcUtilization, sonusEchoCancellorProfileResidualEcho=sonusEchoCancellorProfileResidualEcho, sonusPadAdmnTable=sonusPadAdmnTable, sonusEchoCancellorProfileTable=sonusEchoCancellorProfileTable, sonusEchoCancellorProfileState=sonusEchoCancellorProfileState, sonusDspAdmnNlpEnable=sonusDspAdmnNlpEnable, sonusPadAdmnRtpG711ALaw=sonusPadAdmnRtpG711ALaw, sonusPadAdmnRtpG729AB=sonusPadAdmnRtpG729AB, sonusEchoCancellorProfileRowStatus=sonusEchoCancellorProfileRowStatus, sonusDspSlotStatG711Utilization=sonusDspSlotStatG711Utilization, sonusDspAdmnDspIndex=sonusDspAdmnDspIndex, sonusEchoCancellorProfileEntry=sonusEchoCancellorProfileEntry, sonusDspSlotStatG729AbAllocFailures=sonusDspSlotStatG729AbAllocFailures, PYSNMP_MODULE_ID=sonusDspResourcesMIB, sonusDspResidualEchoControl=sonusDspResidualEchoControl)
