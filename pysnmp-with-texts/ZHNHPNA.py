#
# PySNMP MIB module ZHNHPNA (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNHPNA
# Produced by pysmi-0.3.4 at Wed May  1 15:46:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, enterprises, Integer32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, MibIdentifier, ModuleIdentity, Unsigned32, NotificationType, Bits, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "enterprises", "Integer32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "MibIdentifier", "ModuleIdentity", "Unsigned32", "NotificationType", "Bits", "Counter32", "TimeTicks")
TextualConvention, DisplayString, RowStatus, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "MacAddress", "TruthValue")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
zhnHpna = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47))
zhnHpna.setRevisions(('2012-04-25 12:00', '2012-01-30 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhnHpna.setRevisionsDescriptions(('Added https to FirewallMgmtAccessServiceValues StationRxPower to Integer32', 'First Draft',))
if mibBuilder.loadTexts: zhnHpna.setLastUpdated('201204251200Z')
if mibBuilder.loadTexts: zhnHpna.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhnHpna.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhnHpna.setDescription('This file defines the private Enterprise MIB extensions that define the HCNA/HPNA interfaces supported by the Zhone CPEs.')
zhnHpnaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1))
hpnaDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1), )
if mibBuilder.loadTexts: hpnaDeviceTable.setStatus('current')
if mibBuilder.loadTexts: hpnaDeviceTable.setDescription('Table of HPNA Phoneline information for the integral HPNA devices.')
hpnaDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1), ).setIndexNames((0, "ZHNHPNA", "hpnaDeviceIndex"))
if mibBuilder.loadTexts: hpnaDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: hpnaDeviceEntry.setDescription('This table includes an entry for each integral HPNA device supported by the CPE.')
hpnaDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnaDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: hpnaDeviceIndex.setDescription('HPNA Device Table index')
hpnaDeviceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaDeviceMAC.setStatus('current')
if mibBuilder.loadTexts: hpnaDeviceMAC.setDescription('The Source MAC address of the integral HPNA device.')
hpnaDeviceHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaDeviceHWVersion.setStatus('current')
if mibBuilder.loadTexts: hpnaDeviceHWVersion.setDescription('Version of the on-board, hardware chipset.')
hpnaDeviceFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaDeviceFWVersion.setStatus('current')
if mibBuilder.loadTexts: hpnaDeviceFWVersion.setDescription('Firmware version of the code running on the HPNA device.')
hcnaDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2), )
if mibBuilder.loadTexts: hcnaDeviceTable.setStatus('current')
if mibBuilder.loadTexts: hcnaDeviceTable.setDescription('Table of HPNA Coax information for the integral HCNA devices.')
hcnaDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1), ).setIndexNames((0, "ZHNHPNA", "hcnaDeviceIndex"))
if mibBuilder.loadTexts: hcnaDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: hcnaDeviceEntry.setDescription('This table includes an entry for each integral HCNA device supported by the CPE.')
hcnaDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hcnaDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: hcnaDeviceIndex.setDescription('HCNA Device Table index')
hcnaDeviceMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaDeviceMAC.setStatus('current')
if mibBuilder.loadTexts: hcnaDeviceMAC.setDescription('The Source MAC address of the integral HCNA device.')
hcnaDeviceHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaDeviceHWVersion.setStatus('current')
if mibBuilder.loadTexts: hcnaDeviceHWVersion.setDescription('Version of the on-board, hardware chipset.')
hcnaDeviceFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaDeviceFWVersion.setStatus('current')
if mibBuilder.loadTexts: hcnaDeviceFWVersion.setDescription('Firmware version of the code running on the HCNA device.')
hpnaStationsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3), )
if mibBuilder.loadTexts: hpnaStationsTable.setStatus('current')
if mibBuilder.loadTexts: hpnaStationsTable.setDescription('Table of HPNA station information.')
hpnaStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1), ).setIndexNames((0, "ZHNHPNA", "hpnaStationIndex"))
if mibBuilder.loadTexts: hpnaStationsEntry.setStatus('current')
if mibBuilder.loadTexts: hpnaStationsEntry.setDescription('Each HPNA interface maintains a list of known HPNA devices on the network. This table includes an entry for each HPNA device detected.')
hpnaStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnaStationIndex.setStatus('current')
if mibBuilder.loadTexts: hpnaStationIndex.setDescription('HPNA Stations Table index')
hpnaStationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationSource.setStatus('current')
if mibBuilder.loadTexts: hpnaStationSource.setDescription('The MAC address of the source HPNA station.')
hpnaStationDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationDestination.setStatus('current')
if mibBuilder.loadTexts: hpnaStationDestination.setDescription('The MAC address of the destination HPNA station.')
hpnaStationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationRate.setStatus('current')
if mibBuilder.loadTexts: hpnaStationRate.setDescription('HPNA transmission rate, in Mbps.')
hpnaStationSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationSymbolRate.setStatus('current')
if mibBuilder.loadTexts: hpnaStationSymbolRate.setDescription('HPNA symbol rate, in Mhz.')
hpnaStationBitsPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationBitsPerSymbol.setStatus('current')
if mibBuilder.loadTexts: hpnaStationBitsPerSymbol.setDescription('HPNA rate divided by the symbol rate, in Mhz.')
hpnaStationRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnaStationRxPower.setStatus('current')
if mibBuilder.loadTexts: hpnaStationRxPower.setDescription('HPNA receive power, in dBm.')
hcnaStationsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4), )
if mibBuilder.loadTexts: hcnaStationsTable.setStatus('current')
if mibBuilder.loadTexts: hcnaStationsTable.setDescription('Table of HPNA Coax (HCNA) station information.')
hcnaStationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1), ).setIndexNames((0, "ZHNHPNA", "hcnaStationIndex"))
if mibBuilder.loadTexts: hcnaStationsEntry.setStatus('current')
if mibBuilder.loadTexts: hcnaStationsEntry.setDescription('Each HCNA interface maintains a list of known HPNA Coax devices on the network. This table includes an entry for each HCNA device detected.')
hcnaStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hcnaStationIndex.setStatus('current')
if mibBuilder.loadTexts: hcnaStationIndex.setDescription('HCNA Stations Table index')
hcnaStationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationSource.setStatus('current')
if mibBuilder.loadTexts: hcnaStationSource.setDescription('The MAC address of the source HCNA station.')
hcnaStationDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationDestination.setStatus('current')
if mibBuilder.loadTexts: hcnaStationDestination.setDescription('The MAC address of the destination HCNA station.')
hcnaStationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationRate.setStatus('current')
if mibBuilder.loadTexts: hcnaStationRate.setDescription('HCNA transmission rate, in Mbps.')
hcnaStationSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationSymbolRate.setStatus('current')
if mibBuilder.loadTexts: hcnaStationSymbolRate.setDescription('HCNA symbol rate, in Mhz.')
hcnaStationBitsPerSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationBitsPerSymbol.setStatus('current')
if mibBuilder.loadTexts: hcnaStationBitsPerSymbol.setDescription('HCNA rate divided by the symbol rate, in Mhz.')
hcnaStationRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcnaStationRxPower.setStatus('current')
if mibBuilder.loadTexts: hcnaStationRxPower.setDescription('HCNA receive power, in dBm.')
zhnHpnaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2))
zhnHpnaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1))
zhnHpnaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 2))
zhnHpnaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 2, 1)).setObjects(("ZHNHPNA", "zhnHpnaDeviceGroup"), ("ZHNHPNA", "zhnHcnaDeviceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHpnaCompliance = zhnHpnaCompliance.setStatus('current')
if mibBuilder.loadTexts: zhnHpnaCompliance.setDescription('The Compliance statement for SNMP entities which manage the Zhone CPE HPNA/HCNA Station Information')
zhnHpnaDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 1)).setObjects(("ZHNHPNA", "hpnaDeviceMAC"), ("ZHNHPNA", "hpnaDeviceHWVersion"), ("ZHNHPNA", "hpnaDeviceFWVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHpnaDeviceGroup = zhnHpnaDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: zhnHpnaDeviceGroup.setDescription('A collection of Zhone IP objects that describe the HPNA station information. This group is only supported by CPEs that have one or more HPNA Phone lines.')
zhnHcnaDeviceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 2)).setObjects(("ZHNHPNA", "hcnaDeviceMAC"), ("ZHNHPNA", "hcnaDeviceHWVersion"), ("ZHNHPNA", "hcnaDeviceFWVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHcnaDeviceGroup = zhnHcnaDeviceGroup.setStatus('current')
if mibBuilder.loadTexts: zhnHcnaDeviceGroup.setDescription('A collection of Zhone IP objects that describe the HPNA station information. This group is only supported by CPEs that have one or more HPNA Coax line.')
zhnHpnaStationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 3)).setObjects(("ZHNHPNA", "hpnaStationSource"), ("ZHNHPNA", "hpnaStationDestination"), ("ZHNHPNA", "hpnaStationRate"), ("ZHNHPNA", "hpnaStationSymbolRate"), ("ZHNHPNA", "hpnaStationBitsPerSymbol"), ("ZHNHPNA", "hpnaStationRxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHpnaStationsGroup = zhnHpnaStationsGroup.setStatus('current')
if mibBuilder.loadTexts: zhnHpnaStationsGroup.setDescription('A collection of Zhone IP objects that describe the HPNA station information. This group is only supported by CPEs that have one or more HPNA Phone line.')
zhnHcnaStationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 2, 5, 47, 2, 1, 4)).setObjects(("ZHNHPNA", "hcnaStationSource"), ("ZHNHPNA", "hcnaStationDestination"), ("ZHNHPNA", "hcnaStationRate"), ("ZHNHPNA", "hcnaStationSymbolRate"), ("ZHNHPNA", "hcnaStationBitsPerSymbol"), ("ZHNHPNA", "hcnaStationRxPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhnHcnaStationsGroup = zhnHcnaStationsGroup.setStatus('current')
if mibBuilder.loadTexts: zhnHcnaStationsGroup.setDescription('A collection of Zhone IP objects that describe the HCNA station information. This group is only supported by CPEs that have one or more HPNA Coax line.')
mibBuilder.exportSymbols("ZHNHPNA", hcnaDeviceIndex=hcnaDeviceIndex, zhnHpnaObjects=zhnHpnaObjects, hpnaStationBitsPerSymbol=hpnaStationBitsPerSymbol, PYSNMP_MODULE_ID=zhnHpna, hpnaStationIndex=hpnaStationIndex, hcnaStationSource=hcnaStationSource, hpnaDeviceIndex=hpnaDeviceIndex, hpnaDeviceMAC=hpnaDeviceMAC, hcnaStationDestination=hcnaStationDestination, zhnHpnaStationsGroup=zhnHpnaStationsGroup, hpnaStationSource=hpnaStationSource, hpnaDeviceEntry=hpnaDeviceEntry, zhnHcnaStationsGroup=zhnHcnaStationsGroup, hcnaDeviceTable=hcnaDeviceTable, zhnHpnaGroups=zhnHpnaGroups, hcnaStationRate=hcnaStationRate, hcnaStationBitsPerSymbol=hcnaStationBitsPerSymbol, hpnaStationRate=hpnaStationRate, zhnHpnaCompliance=zhnHpnaCompliance, zhnHpnaDeviceGroup=zhnHpnaDeviceGroup, hpnaStationDestination=hpnaStationDestination, hpnaStationSymbolRate=hpnaStationSymbolRate, hcnaDeviceMAC=hcnaDeviceMAC, hcnaDeviceHWVersion=hcnaDeviceHWVersion, hpnaDeviceTable=hpnaDeviceTable, hpnaStationsEntry=hpnaStationsEntry, zhnHpnaCompliances=zhnHpnaCompliances, hcnaDeviceEntry=hcnaDeviceEntry, hcnaStationRxPower=hcnaStationRxPower, hcnaDeviceFWVersion=hcnaDeviceFWVersion, hcnaStationIndex=hcnaStationIndex, hpnaDeviceFWVersion=hpnaDeviceFWVersion, zhnHpnaConformance=zhnHpnaConformance, hcnaStationsEntry=hcnaStationsEntry, hcnaStationsTable=hcnaStationsTable, zhnHpna=zhnHpna, hcnaStationSymbolRate=hcnaStationSymbolRate, zhnHcnaDeviceGroup=zhnHcnaDeviceGroup, hpnaStationRxPower=hpnaStationRxPower, hpnaStationsTable=hpnaStationsTable, hpnaDeviceHWVersion=hpnaDeviceHWVersion)
