#
# PySNMP MIB module CISCO-SYS-INFO-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SYS-INFO-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, ObjectIdentity, ModuleIdentity, IpAddress, Integer32, TimeTicks, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Counter32, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Integer32", "TimeTicks", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Counter32", "iso", "Unsigned32")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
ciscoSysInfoLogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 330))
ciscoSysInfoLogMIB.setRevisions(('2005-08-12 10:00', '2003-01-24 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSysInfoLogMIB.setRevisionsDescriptions(('Added new value ftp(3) to csilServerProtocol. Added new value ftpError(10) to csilServerLastStatus.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSysInfoLogMIB.setLastUpdated('200508121000Z')
if mibBuilder.loadTexts: ciscoSysInfoLogMIB.setOrganization('Cisco System, Inc.')
if mibBuilder.loadTexts: ciscoSysInfoLogMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSysInfoLogMIB.setDescription('This MIB provides the configuration of System Information Logging feature, which allows a certain number of commands to be executed periodically via command line interface, and stores the result into a file on a configured server.')
ciscoSysInfoLogMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 0))
ciscoSysInfoLogMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 1))
ciscoSysInfoLogMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 2))
csilGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 1))
csilServerConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2))
csilCommandConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3))
csilSysInfoLogEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csilSysInfoLogEnabled.setStatus('current')
if mibBuilder.loadTexts: csilSysInfoLogEnabled.setDescription('Specifies whether System Information Logging has been enabled in the system or not.')
csilSysInfoLogNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csilSysInfoLogNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: csilSysInfoLogNotifEnabled.setDescription('This object controls whether notifications will be generated by system logging process or not.')
csilMaxServerAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('servers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csilMaxServerAllowed.setStatus('current')
if mibBuilder.loadTexts: csilMaxServerAllowed.setDescription('Specifies the maximum number of entries that can be configured in csilServerTable. A value of zero indicates no limit on the numbers of entries in the csilServerTable.')
csilMaxProfilePerServerAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 2), Unsigned32()).setUnits('profiles').setMaxAccess("readonly")
if mibBuilder.loadTexts: csilMaxProfilePerServerAllowed.setStatus('current')
if mibBuilder.loadTexts: csilMaxProfilePerServerAllowed.setDescription('Indicates the maximum number of command profiles allowed to configure for a logging server. A profile defines a set of commands that will be used for system information logging purpose.')
csilServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3), )
if mibBuilder.loadTexts: csilServerTable.setStatus('current')
if mibBuilder.loadTexts: csilServerTable.setDescription('A table of servers used to keep the data files for System Information Logging purpose.')
csilServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-SYS-INFO-LOG-MIB", "csilServerIndex"))
if mibBuilder.loadTexts: csilServerEntry.setStatus('current')
if mibBuilder.loadTexts: csilServerEntry.setDescription('Information about a server to keep the data file for System Information Logging purpose. Entries in this table can be created or deleted using csilServerRowStatus object.')
csilServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csilServerIndex.setStatus('current')
if mibBuilder.loadTexts: csilServerIndex.setDescription('An arbitrary index assigned by the NMS to identify the entry. Maximum value of this object is limited by the value of csilMaxServerAllowed.')
csilServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerAddressType.setStatus('current')
if mibBuilder.loadTexts: csilServerAddressType.setDescription('Specifies the type of address used to determine the address of the server to be used for logging system information.')
csilServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerAddress.setStatus('current')
if mibBuilder.loadTexts: csilServerAddress.setDescription('Specifies the address of the remote host used for logging system information.')
csilServerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerProfileIndex.setStatus('current')
if mibBuilder.loadTexts: csilServerProfileIndex.setDescription('Specifies the profile assigned to this server. A profile is a set of specific commands defined in csilCommandConfigTable, which will be executed in the period specified by the object csilServerInterval for logging system information to the server.')
csilServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("rcp", 2), ("ftp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerProtocol.setStatus('current')
if mibBuilder.loadTexts: csilServerProtocol.setDescription('Specifies the file transfer protocol to be used for logging system information. - tftp(1): indicates that tftp is used for logging system information. - rcp(2): indicates that rcp is used for logging system information. - ftp(3): indicates that ftp is used for logging system information.')
csilServerRcpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerRcpUserName.setStatus('current')
if mibBuilder.loadTexts: csilServerRcpUserName.setDescription('Specifies the remote user name used to download system information via RCP protocol. This object must be set when csilServerProtocol is set to rcp(2). This object will have no effect for protocols other than RCP.')
csilServerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 7), Unsigned32().clone(1440)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerInterval.setStatus('current')
if mibBuilder.loadTexts: csilServerInterval.setDescription('A period of time, measured in unit of minutes. This object specifies how often the command set is executed for logging system information.')
csilServerLoggingFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerLoggingFileName.setStatus('current')
if mibBuilder.loadTexts: csilServerLoggingFileName.setDescription('Specifies the file name used for logging system information.')
csilServerLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("noLogFile", 2), ("noCommand", 3), ("linkBlock", 4), ("authError", 5), ("addrError", 6), ("copying", 7), ("writeError", 8), ("success", 9), ("ftpError", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csilServerLastStatus.setStatus('current')
if mibBuilder.loadTexts: csilServerLastStatus.setDescription('Indicates the status of the last system information logging process into the server. - none(1): initial state. No process has been started. - noLogFile(2): there is no log file has been configured. - noCommand(3): there is no command has been configured. - linkBlock(4): another process might have taken the rcp or tftp connection at the time the interval is due. - authError(5): authentication failed. - addrError(6): an error occurs due to the destination address is not reachable. - copying(7) : logging process to destination server is in progress. - writeError(8): an error occurs while copying logging information to the server. - success(9): logging process completed successfully. - ftpError(10): an error occurs during ftp operation.')
csilServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 2, 3, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: csilServerRowStatus.setDescription("This object is used to manage the creation, modification and deletion of rows in the table. Except of csilServerRcpUserName, all other objects need to be set before csilServerRowStatus can be set to 'active'. When this object is set to be 'active', the entry can not be modified.")
csilMaxCommandPerProfile = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csilMaxCommandPerProfile.setStatus('current')
if mibBuilder.loadTexts: csilMaxCommandPerProfile.setDescription('Specifies the maximum commands allowed in a profile. A value of zero indicates no limitation on the number of commands allowed in a profile.')
csilCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2), )
if mibBuilder.loadTexts: csilCommandsTable.setStatus('current')
if mibBuilder.loadTexts: csilCommandsTable.setDescription('A table of commands for System Information Logging purpose.')
csilCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-SYS-INFO-LOG-MIB", "csilCommandProfileIndex"), (0, "CISCO-SYS-INFO-LOG-MIB", "csilCommandIndex"))
if mibBuilder.loadTexts: csilCommandsEntry.setStatus('current')
if mibBuilder.loadTexts: csilCommandsEntry.setDescription('An entry contains the command logging information regarding a profile and a command index combination. Entries in this table can be created or deleted using csilCommandStatus object.')
csilCommandProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csilCommandProfileIndex.setStatus('current')
if mibBuilder.loadTexts: csilCommandProfileIndex.setDescription('An arbitrary index assigned by NMS to uniquely identify a profile. A profile contains a set of commands that will be executed periodically for the purpose of logging system information.')
csilCommandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csilCommandIndex.setStatus('current')
if mibBuilder.loadTexts: csilCommandIndex.setDescription('An arbitrary index assigned by NMS, which is combined with the value of csilCommandProfileIndex object to uniquely identify an entry.')
csilCommandString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilCommandString.setStatus('current')
if mibBuilder.loadTexts: csilCommandString.setDescription('Specifies the command to be executed.')
csilCommandExecOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilCommandExecOrder.setStatus('current')
if mibBuilder.loadTexts: csilCommandExecOrder.setDescription("Specifies the order in which the command specified in the object csilCommandLog will be executed periodically for loging system information. Value of this object need not to be consistent as it can be changed during the configuration of the command set. Execution order of commands in the lower part of the list will be moved up or pushed down when a command is removed from or inserted to a position in the middle of the list, respectively. For example, there is a list of three commands 'show A', 'show B' and 'show C' with the execution orders as 1, 2 and 3 respectively. If 'show B' is removed from the list, the execution order of 'show C' will be changed from 3 to 2. If 'show D' is added to the list with the execution order as 2, the execution order of 'show B' and 'show C' will be changed to 3 and 4, respectively. Execution order of new commands appended to the list must be continuous with the execution order of the last existing command on the list, otherwise it will be rejected.")
csilCommandStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 330, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csilCommandStatus.setStatus('current')
if mibBuilder.loadTexts: csilCommandStatus.setDescription("This object is used to manage the creation, modification and deletion of rows in this table. Value of this object can be set to 'active' only when value of other columns have been assigned. The entry may not be modified when value of this object is 'active'.")
csilLoggingFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 330, 0, 1)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilServerLastStatus"))
if mibBuilder.loadTexts: csilLoggingFailNotif.setStatus('current')
if mibBuilder.loadTexts: csilLoggingFailNotif.setDescription('A csilLoggingFailNotif is sent for an unsuccessful system information logging process, specifically when value of csilServerLastStatus is changed to any one of the failure states (2, 3, 4, 5, 6 and 8).')
ciscoSysInfoLogMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 1))
ciscoSysInfoLogMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 2))
ciscoSysInfoLogMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 1, 1)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilGlobalConfigGroup"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerConfigGroup"), ("CISCO-SYS-INFO-LOG-MIB", "csilCommandConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSysInfoLogMIBCompliance = ciscoSysInfoLogMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSysInfoLogMIBCompliance.setDescription('The compliance statement for agents which implement CISCO-SYS-INFO-LOG-MIB. OBJECT csilMaxServerAllowed SYNTAX Unsigned32(1) ACCESS-TYPE read-only DESCRIPTION An implementation is only required to support one logging server. OBJECT csilServerAddressType SYNTAX InetAddressType (ipv4(1)) DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT csilMaxCommandPerProfile SYNTAX Unsigned32(15) ACCESS-TYPE read-only DESCRIPTION An implementation is only required to support maximum 15 commands in a profile. OBJECT csilCommandString SYNTAX SnmpAdminString (SIZE (1..48)) DESCRIPTION An implementation is only required to support commands not having more than 48 characters.')
csilGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 2, 1)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilSysInfoLogEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csilGlobalConfigGroup = csilGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: csilGlobalConfigGroup.setDescription('A collection of objects that provides the global configuration for logging system information.')
csilServerConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 2, 2)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilMaxServerAllowed"), ("CISCO-SYS-INFO-LOG-MIB", "csilMaxProfilePerServerAllowed"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerAddress"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerAddressType"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerProfileIndex"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerProtocol"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerInterval"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerLoggingFileName"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerRcpUserName"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerLastStatus"), ("CISCO-SYS-INFO-LOG-MIB", "csilServerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csilServerConfigGroup = csilServerConfigGroup.setStatus('current')
if mibBuilder.loadTexts: csilServerConfigGroup.setDescription('A collection of objects that provides the status and control of logging servers.')
csilCommandConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 2, 3)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilMaxCommandPerProfile"), ("CISCO-SYS-INFO-LOG-MIB", "csilCommandString"), ("CISCO-SYS-INFO-LOG-MIB", "csilCommandExecOrder"), ("CISCO-SYS-INFO-LOG-MIB", "csilCommandStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csilCommandConfigGroup = csilCommandConfigGroup.setStatus('current')
if mibBuilder.loadTexts: csilCommandConfigGroup.setDescription('A collection of objects that provides the status and control of commands used for logging system information.')
csilNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 2, 4)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilSysInfoLogNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csilNotifControlGroup = csilNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: csilNotifControlGroup.setDescription('A collection of objects that provides the status and control of logging process notifications.')
csilLoggingFailNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 330, 2, 2, 5)).setObjects(("CISCO-SYS-INFO-LOG-MIB", "csilLoggingFailNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csilLoggingFailNotifGroup = csilLoggingFailNotifGroup.setStatus('current')
if mibBuilder.loadTexts: csilLoggingFailNotifGroup.setDescription('A collection of notifications for supporting system information logging feature.')
mibBuilder.exportSymbols("CISCO-SYS-INFO-LOG-MIB", ciscoSysInfoLogMIB=ciscoSysInfoLogMIB, csilServerEntry=csilServerEntry, csilServerLastStatus=csilServerLastStatus, ciscoSysInfoLogMIBConform=ciscoSysInfoLogMIBConform, csilMaxServerAllowed=csilMaxServerAllowed, csilServerAddress=csilServerAddress, csilServerAddressType=csilServerAddressType, ciscoSysInfoLogMIBGroups=ciscoSysInfoLogMIBGroups, ciscoSysInfoLogMIBCompliances=ciscoSysInfoLogMIBCompliances, csilGlobalConfig=csilGlobalConfig, csilCommandString=csilCommandString, csilServerLoggingFileName=csilServerLoggingFileName, csilNotifControlGroup=csilNotifControlGroup, csilServerConfigGroup=csilServerConfigGroup, csilServerProfileIndex=csilServerProfileIndex, csilSysInfoLogEnabled=csilSysInfoLogEnabled, csilServerInterval=csilServerInterval, csilCommandIndex=csilCommandIndex, ciscoSysInfoLogMIBObjects=ciscoSysInfoLogMIBObjects, csilServerRowStatus=csilServerRowStatus, csilCommandProfileIndex=csilCommandProfileIndex, PYSNMP_MODULE_ID=ciscoSysInfoLogMIB, csilCommandsTable=csilCommandsTable, csilCommandExecOrder=csilCommandExecOrder, csilCommandsEntry=csilCommandsEntry, csilCommandStatus=csilCommandStatus, csilCommandConfig=csilCommandConfig, csilSysInfoLogNotifEnabled=csilSysInfoLogNotifEnabled, csilServerIndex=csilServerIndex, csilLoggingFailNotif=csilLoggingFailNotif, csilCommandConfigGroup=csilCommandConfigGroup, csilServerConfig=csilServerConfig, csilMaxCommandPerProfile=csilMaxCommandPerProfile, csilMaxProfilePerServerAllowed=csilMaxProfilePerServerAllowed, csilServerProtocol=csilServerProtocol, csilLoggingFailNotifGroup=csilLoggingFailNotifGroup, ciscoSysInfoLogMIBCompliance=ciscoSysInfoLogMIBCompliance, csilServerTable=csilServerTable, csilGlobalConfigGroup=csilGlobalConfigGroup, ciscoSysInfoLogMIBNotifs=ciscoSysInfoLogMIBNotifs, csilServerRcpUserName=csilServerRcpUserName)
