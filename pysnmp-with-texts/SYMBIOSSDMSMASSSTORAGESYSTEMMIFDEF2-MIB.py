#
# PySNMP MIB module SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, NotificationType, ObjectIdentity, Counter32, MibIdentifier, IpAddress, iso, Gauge32, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "NotificationType", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress", "iso", "Gauge32", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

symbios = MibIdentifier((1, 3, 6, 1, 4, 1, 1123))
cosprings = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3))
scsi = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1))
fam8xx = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2))
id = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This group is required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this component.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this component.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this component.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this component')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The installation date and time of this component. The Service Layer assigns this value, the manufacturer should leave it blank.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerifyIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tSoftwareComponentInformation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2), )
if mibBuilder.loadTexts: tSoftwareComponentInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tSoftwareComponentInformation.setDescription('Contains additional identifying information about this software component.')
eSoftwareComponentInformation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eSoftwareComponentInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eSoftwareComponentInformation.setDescription('')
a2MajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MajorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a2MajorVersion.setDescription('Major version of this software component.')
a2MinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2MinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: a2MinorVersion.setDescription('Minor version of this software component.')
a2Revision = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Revision.setStatus('mandatory')
if mibBuilder.loadTexts: a2Revision.setDescription('Revision of this software component.')
a2Build = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Build.setStatus('mandatory')
if mibBuilder.loadTexts: a2Build.setDescription("Manufacturer's internal identifier for this compilation.")
a2TargetOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 0), ("vDos", 1), ("vMacos", 2), ("vOs2", 3), ("vUnix", 4), ("vWin16", 5), ("vWin32", 6), ("vOpenvms", 7), ("vNetware", 8), ("vWin9x", 9), ("vWinnt", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2TargetOperatingSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a2TargetOperatingSystem.setDescription('The operating system for which this software component is intended.')
a2LanguageEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2LanguageEdition.setStatus('mandatory')
if mibBuilder.loadTexts: a2LanguageEdition.setDescription('This identifies the language edition of this component.')
a2IdentificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2IdentificationCode.setStatus('mandatory')
if mibBuilder.loadTexts: a2IdentificationCode.setDescription('Stock Keeping Unit (SKU) or Part Number for this software component.')
a2InstallableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 1), ("vInstallable", 2), ("vNotInstallable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2InstallableState.setStatus('mandatory')
if mibBuilder.loadTexts: a2InstallableState.setDescription('Specifies whether this component describes a software product installed for the purpose of further distribution.')
a2ExecutableState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vUnknown", 1), ("vExecutable", 2), ("vNotExecutable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2ExecutableState.setStatus('mandatory')
if mibBuilder.loadTexts: a2ExecutableState.setDescription('Specifies whether this component describes a software product which is executable.')
tSoftwareSignature = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3), )
if mibBuilder.loadTexts: tSoftwareSignature.setStatus('mandatory')
if mibBuilder.loadTexts: tSoftwareSignature.setDescription('The Software Signature Group contains information that can be used to detect this software component.')
eSoftwareSignature = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a3FileIndex"))
if mibBuilder.loadTexts: eSoftwareSignature.setStatus('mandatory')
if mibBuilder.loadTexts: eSoftwareSignature.setDescription('')
a3FileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileName.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileName.setDescription('The name of a file that can be examined to detect this software component.')
a3FileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileSize.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileSize.setDescription('The size in bytes of a file that can be examined to detect this software component.')
a3FileDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 3), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileDateAndTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileDateAndTime.setDescription('The date and time of a file that can be examined to detect this software component.')
a3FileChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileChecksum.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileChecksum.setDescription('The checksum of the first 32 bytes of this file.')
a3FileCrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileCrc1.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileCrc1.setDescription('The 16-bit CRC (ITU-T) on the middle 512k of this file.')
a3FileCrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileCrc2.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileCrc2.setDescription('The 16-bit CRC (ITU-T) on the middle 512k of this file with a modulo-3 offset relative to the beginning of the file.')
a3FileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3FileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3FileIndex.setDescription('The index into this software signature table. ')
tFieldReplaceableUnit = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4), )
if mibBuilder.loadTexts: tFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: tFieldReplaceableUnit.setDescription('A Field Replaceable Unit (FRU), is defined as a hardware component which is designed to be separately removable for replacement or repair. For the purposes of this definition, a motherboard and a fixed hard disk are FRUs, whereas a fixed hard disk platter or a chip fixed in place on the motherboard are not FRUs since they are not designed to be separately removable. Each instance within the FRU table should contain the device group and instance data for the associated hardware component.')
eFieldReplaceableUnit = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a4FruIndex"))
if mibBuilder.loadTexts: eFieldReplaceableUnit.setStatus('mandatory')
if mibBuilder.loadTexts: eFieldReplaceableUnit.setDescription('')
a4FruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4FruIndex.setDescription('The index into the Field Replaceable Unit table.')
a4DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a4DeviceGroupIndex.setDescription('The group ID of the group referencing this Field Replaceable Unit instance.')
a4Description = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Description.setStatus('mandatory')
if mibBuilder.loadTexts: a4Description.setDescription('A clear description of this Field Replaceable Unit.')
a4Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a4Manufacturer.setDescription('The name of the company manufacturing or providing this Field Replaceable Unit.')
a4Model = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Model.setStatus('mandatory')
if mibBuilder.loadTexts: a4Model.setDescription("The manufacturer's model number for this Field Replaceable Unit.")
a4PartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4PartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4PartNumber.setDescription('A part number by which a replacement part can be ordered for this Field Replaceable Unit.')
a4FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4FruSerialNumber.setDescription("The manufacturer's serial number for this Field Replaceable Unit.")
a4RevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4RevisionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a4RevisionLevel.setDescription('The revision level of this Field Replaceable Unit.')
a4WarrantyStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 9), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyStartDate.setStatus('mandatory')
if mibBuilder.loadTexts: a4WarrantyStartDate.setDescription('The start date of the service warranty for this Field Replaceabl Unit.')
a4WarrantyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4WarrantyDuration.setStatus('mandatory')
if mibBuilder.loadTexts: a4WarrantyDuration.setDescription('The total duration of this Field Replaceable Unit warranty in months.')
a4SupportPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 4, 1, 11), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4SupportPhoneNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4SupportPhoneNumber.setDescription('The phone number(s) for support for this Field Replaceable Unit.')
tStorageDevices = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: tStorageDevices.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageDevices.setDescription('This group defines the mass storage devices in this system.')
eStorageDevices = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: eStorageDevices.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageDevices.setDescription('')
a5StorageDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5StorageDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5StorageDeviceIndex.setDescription('An index into the storage device table.')
a5Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRigidDiskDrive", 3), ("vCartridgeRigidDiskDrive", 4), ("vFlexibleDisketteDrive", 5), ("vCompactDiskDrive", 6), ("vOpticalWrite-onceread-manyWormDrive", 7), ("vMagneto-opticalDrive", 8), ("vTapeDrive", 9), ("vMediaChanger", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Type.setStatus('mandatory')
if mibBuilder.loadTexts: a5Type.setDescription("The type of this mass storage device. If 'Other' is used, then the Type Description attribute shall be used.")
a5TypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5TypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a5TypeDescription.setDescription("A longer description of the storage device. For example: 3.5 inch flexible diskette drive using diskettes with a maximum capacity of 1.44MB. If 'Other' was specified above, then this field shall be used. Otherwise, the contents of this optional field shall not contradict the Storage Device Type specified above.")
a5WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5WorldwideIdentifierType.setStatus('mandatory')
if mibBuilder.loadTexts: a5WorldwideIdentifierType.setDescription('The type of identifier displayed by the Worldwide Identifier attribute.')
a5WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5WorldwideIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: a5WorldwideIdentifier.setDescription('The Worldwide identifier for this device.')
a5Sub_identifier = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 6), DmiDisplaystring()).setLabel("a5Sub-identifier").setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Sub_identifier.setStatus('mandatory')
if mibBuilder.loadTexts: a5Sub_identifier.setDescription("The sub-identifier for this storage device (e.g., the device's SCSI logical unit number).")
a5MediaDataBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaDataBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: a5MediaDataBlockSize.setDescription('The size in bytes of the data blocks used on the storage media. If the media block size is unknown or not consistent across the media, then this value shall be zero.')
a5FormattedMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 8), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5FormattedMediaCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: a5FormattedMediaCapacity.setDescription('The total size in bytes of this storage media after it has been formatted.')
a5RemovableDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableDevice.setStatus('mandatory')
if mibBuilder.loadTexts: a5RemovableDevice.setDescription('If true, then this storage device is removable (e.g.: PCMCIA device).')
a5DeviceLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5DeviceLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a5DeviceLoaded.setDescription("If true, then the storage device is loaded. If the device is not removable, then this value shall be 'TRUE'.")
a5RemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5RemovableMedia.setStatus('mandatory')
if mibBuilder.loadTexts: a5RemovableMedia.setDescription('If true, then the media in this storage device is removable.')
a5MediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5MediaLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: a5MediaLoaded.setDescription("If true, the media in this storage device is loaded. If the media is not removable, then this value shall be 'TRUE' ")
a5Compression = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Compression.setStatus('mandatory')
if mibBuilder.loadTexts: a5Compression.setDescription('If true, the storage device supports compression.')
a5Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Encryption.setStatus('mandatory')
if mibBuilder.loadTexts: a5Encryption.setDescription('If true, the storage device supports encryption.')
a5FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table for this device; 'value = -1' indicates that the group is not a FRU.")
a5OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 5, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a5OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
tStorageDevicesEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6), )
if mibBuilder.loadTexts: tStorageDevicesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageDevicesEvents.setDescription('Storage Devices events.')
eStorageDevicesEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"))
if mibBuilder.loadTexts: eStorageDevicesEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageDevicesEvents.setDescription('')
a6StorageDevicesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vRebuildInProgress", 1), ("vStorageDeviceReadying", 2), ("vStorageDeviceError", 3), ("vSelf-monitoringWarning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6StorageDevicesEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a6StorageDevicesEventType.setDescription('The type of Storage Devices event that has occurred.')
a6EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSeverity.setDescription('The severity of this event.')
a6EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a6EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a6AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a6AssociatedGroup.setDescription('The')
a6EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a6EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a6EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a6EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
tStorageController = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7), )
if mibBuilder.loadTexts: tStorageController.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageController.setDescription('This group defines the storage controller in this system.')
eStorageController = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: eStorageController.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageController.setDescription('')
a7ControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7ControllerIndex.setDescription('An index into the Storage Controller table.')
a7Identification = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Identification.setStatus('mandatory')
if mibBuilder.loadTexts: a7Identification.setDescription('e.g. Name, brand and hardware revision level of the storage controller.')
a7WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WorldwideIdentifierType.setStatus('mandatory')
if mibBuilder.loadTexts: a7WorldwideIdentifierType.setDescription('The type of identifier displayed by the Worldwide Identifier attribute.')
a7WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7WorldwideIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: a7WorldwideIdentifier.setDescription('The Worldwide identifier for this controller.')
a7ProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vUnprotected", 3), ("vProtected", 4), ("vProtectedThroughScsi-3ControllerCommand", 5), ("vProtectedThroughScsi-3ControllerComman1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7ProtectionManagement.setStatus('mandatory')
if mibBuilder.loadTexts: a7ProtectionManagement.setDescription('Indicates whether or not the controller provides redundancy or protection against device failures.')
a7BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7BusMaster.setStatus('mandatory')
if mibBuilder.loadTexts: a7BusMaster.setDescription('If true, then this storage controller is the bus master.')
a7SecondsSinceLastPower_up = MibScalar((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 7), DmiInteger()).setLabel("a7SecondsSinceLastPower-up").setMaxAccess("readonly")
if mibBuilder.loadTexts: a7SecondsSinceLastPower_up.setStatus('mandatory')
if mibBuilder.loadTexts: a7SecondsSinceLastPower_up.setDescription('The number of seconds that have passed since this controller was last powered on.')
a7FruGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7FruGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7FruGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another FRU, this provides an index into the FRU table; 'value = -1' indicates that the group is not a FRU.")
a7OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 7, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a7OperationalGroupIndex.setDescription('The index into the Operational State table for this device.')
tStorageControllerEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8), )
if mibBuilder.loadTexts: tStorageControllerEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tStorageControllerEvents.setDescription('Storage Controller events.')
eStorageControllerEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8AssociatedGroup"))
if mibBuilder.loadTexts: eStorageControllerEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eStorageControllerEvents.setDescription('')
a8StorageControllerEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vStorageControllerError", 1), ("vSelf-monitoringWarning1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8StorageControllerEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a8StorageControllerEventType.setDescription('The type of Storage Controller event that has occurred.')
a8EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSeverity.setDescription('The severity of this event.')
a8EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a8EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a8AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a8AssociatedGroup.setDescription('The')
a8EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a8EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a8EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a8EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
tBusPort = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9), )
if mibBuilder.loadTexts: tBusPort.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPort.setDescription('This global table has one entry for each of the Bus Ports in this Component.')
eBusPort = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a9BusPortIndex"))
if mibBuilder.loadTexts: eBusPort.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPort.setDescription('')
a9BusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9BusPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9BusPortIndex.setDescription('An index into the Bus Port table.')
a9Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEisa", 3), ("vIsa", 4), ("vPci", 5), ("vAtaatapi", 6), ("vFlexibleDiskette", 7), ("v1496", 8), ("vScsiParallelInterface", 9), ("vScsiFibreChannelProtocol", 10), ("vScsiSerialBusProtocol", 11), ("vScsiSerialBusProtocol-21394", 12), ("vScsiSerialStorageArchitecture", 13), ("vVesa", 14), ("vPcmcia", 15), ("vUniversalSerialBus", 16), ("vParallelPort", 17), ("vEscon", 18), ("vDiagnostic", 19), ("vI2c", 20), ("vPower", 21), ("vHippi", 22), ("vMultibus", 23), ("vVme", 24), ("vIpi", 25), ("vIeee-488", 26), ("vRs232", 27), ("vIeee802310base5", 28), ("vIeee802310base2", 29), ("vIeee80231base5", 30), ("vIeee802310broad36", 31), ("vIeee8023100basevg", 32), ("vIeee8025Token-ring", 33), ("vAnsiX3t95Fddi", 34), ("vMca", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: a9Protocol.setDescription("The protocol describing the electrical characteristic of the Bus Port. If 'Other' is used, then the Protocol Description attribute shall be used.")
a9ProtocolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ProtocolDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a9ProtocolDescription.setDescription("Additional description of the protocol described above. If 'Other' was specified above, then this field shall be used. Otherwise, the contents of this optional field shall not contradict the Protocol specified above.")
a9SignalCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vSingleEnded", 3), ("vDifferential", 4), ("vLowVoltageDifferential", 5), ("vOptical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9SignalCharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: a9SignalCharacteristics.setDescription('The signal characteristics of the Bus Port being described.')
a9WorldwideIdentifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vVendorIdProductIdSerialNumber", 4), ("vIeeeExtendedUniqueIdentifier64-bit", 5), ("vFc-ph64-bitName_identifier", 6), ("vBinary", 7), ("vUnicode", 8), ("vLanMacAddress", 9), ("vWanAccessAddress", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WorldwideIdentifierType.setStatus('mandatory')
if mibBuilder.loadTexts: a9WorldwideIdentifierType.setDescription('The type of identifier displayed by the Worldwide Identifier attribute.')
a9WorldwideIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 6), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9WorldwideIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: a9WorldwideIdentifier.setDescription('The Worldwide identifier for this bus port.')
a9AddressDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 7), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9AddressDescriptor.setStatus('mandatory')
if mibBuilder.loadTexts: a9AddressDescriptor.setDescription('The address descriptor of this bus port. For example, the SCSI address of this port.')
a9Isochronous = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9Isochronous.setStatus('mandatory')
if mibBuilder.loadTexts: a9Isochronous.setDescription('Indicates whether or not this bus port supports isochronous transfers.')
a9MaximumWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a9MaximumWidth.setDescription("The maximum width, in bits, of this Bus Port's data path. A value of 1 should be used for serial.")
a9MaximumTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumTransferRate.setStatus('mandatory')
if mibBuilder.loadTexts: a9MaximumTransferRate.setDescription('The theoretical maximum transfer rate, in millions of bytes per second, that this Bus Port is capable of achieving under ideal conditions. A value of zero should be used if the transfer rate is less than 1 million bytes per second. A value of 0x80000000 should be used if the transfer rate is unknown.')
a9MaximumNumberOfAttachments = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MaximumNumberOfAttachments.setStatus('mandatory')
if mibBuilder.loadTexts: a9MaximumNumberOfAttachments.setDescription("The maximum number of directly addressable entities supported by this bus port's protocol. A value of zero should be used if the number of attachments is unknown.")
a9ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNone", 3), ("vScsiAHigh-densityShielded50Pins", 4), ("vScsiAHigh-densityUnshielded50Pins", 5), ("vScsiALow-densityShielded50Pins", 6), ("vScsiALow-densityUnshielded50Pins", 7), ("vScsiPHigh-densityShielded68Pins", 8), ("vScsiPHigh-densityUnshielded68Pins", 9), ("vScsiSca-i80Pins", 10), ("vScsiSca-ii80Pins", 11), ("vScsiFibreChannelDb9Copper", 12), ("vScsiFibreChannelFibre", 13), ("vScsiFibreChannelSca-ii40Pins", 14), ("vScsiFibreChannelSca-ii20Pins", 15), ("vScsiFibreChannelBnc", 16), ("vAta3-12Inch40Pins", 17), ("vAta2-12Inch44Pins", 18), ("vSerial9Pin", 19), ("vSerial25Pin", 20), ("vRs23225Pin", 21), ("vRs422", 22), ("vIeee-488", 23), ("vAui", 24), ("vUptCategory3", 25), ("vUptCategory4", 26), ("vUptCategory5", 27), ("vBnc", 28), ("vStpRj11", 29), ("vStpRj45", 30), ("vStpDb9", 31), ("vFiberMic", 32), ("vAppleAui", 33), ("vPciSlot", 34), ("vIsaSlot", 35), ("vEisaSlot", 36), ("vVesaSlot", 37), ("vPcmciaSlot", 38), ("vPcCardSlot", 39), ("vFloppyDiskette5-14Inch", 40), ("vFloppyDiskette3-12Inch", 41), ("vHssdc6Pins", 42), ("vGbicSocket", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorType.setStatus('mandatory')
if mibBuilder.loadTexts: a9ConnectorType.setDescription("Describes how options (cards, devices, etc.) physically connect to this bus port. If 'Other' is used, then the Connector Type Description attribute shall be used.")
a9ConnectorTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 13), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorTypeDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a9ConnectorTypeDescription.setDescription("An additional text description of the type of connector describe above. If 'Other' was specified above, then this field shall be used. Otherwis , the contents of this optional field shall not contradict the connector specified above.")
a9ConnectorGender = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vFemale", 3), ("vMale", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9ConnectorGender.setStatus('mandatory')
if mibBuilder.loadTexts: a9ConnectorGender.setDescription('Indicates the gender of the connector described above.')
a9OperationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9OperationalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9OperationalGroupIndex.setDescription('The index into the Operational State table for this bus port.')
a9MassStorageStatisticsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 9, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a9MassStorageStatisticsGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a9MassStorageStatisticsGroupIndex.setDescription('The index into the Mass Storage Statistics table for this bus port.')
tBusPortEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10), )
if mibBuilder.loadTexts: tBusPortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPortEvents.setDescription('Bus Port events.')
eBusPortEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a10AssociatedGroup"))
if mibBuilder.loadTexts: eBusPortEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPortEvents.setDescription('')
a10BusPortEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("vBusPortError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10BusPortEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a10BusPortEventType.setDescription('The type of Bus Port event that has occurred.')
a10EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a10EventSeverity.setDescription('The severity of this event.')
a10EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a10EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a10EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a10EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a10AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a10AssociatedGroup.setDescription('The')
a10EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a10EventSystem.setDescription('The major functional aspect of the product causing the fault.')
a10EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a10EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a10EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
tMassStorageAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11), )
if mibBuilder.loadTexts: tMassStorageAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tMassStorageAssociation.setDescription('Mass storage associations define the relationships between the various components of the Storage Subsystem.')
eMassStorageAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a11AssociationIndex"))
if mibBuilder.loadTexts: eMassStorageAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eMassStorageAssociation.setDescription('')
a11AssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11AssociationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a11AssociationIndex.setDescription('An index into the Association table.')
a11Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vPhysicalOrganization", 0), ("vLogicalOrganization", 1), ("vLogicalToPhysicalOrganization", 2), ("vRedundancyOrganization", 3), ("vSpareOrganization", 4), ("vCacheOrganization", 5), ("vSoftwareOrganization", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Type.setStatus('mandatory')
if mibBuilder.loadTexts: a11Type.setDescription('This field specifies the type of the association.')
a11Object1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object1Type.setStatus('mandatory')
if mibBuilder.loadTexts: a11Object1Type.setDescription('This field specifies the type of the object referred to by object 1 index. Therefore, combined with the object 1 index a complete referenc is made to a specific object.')
a11Object1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object1Index.setStatus('mandatory')
if mibBuilder.loadTexts: a11Object1Index.setDescription('An index into the table identified by the object 1 type.')
a11Object2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object2Type.setStatus('mandatory')
if mibBuilder.loadTexts: a11Object2Type.setDescription('This field specifies the type of the object referred to by object 2 index. Therefore, combined with the object 2 index a complete referenc is made to a specific object.')
a11Object2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 11, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a11Object2Index.setStatus('mandatory')
if mibBuilder.loadTexts: a11Object2Index.setDescription('An index into the table identified by the Object 2 type.')
tMassStorageAssociationEvents = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12), )
if mibBuilder.loadTexts: tMassStorageAssociationEvents.setStatus('mandatory')
if mibBuilder.loadTexts: tMassStorageAssociationEvents.setDescription('Mass Storage Association events.')
eMassStorageAssociationEvents = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a12AssociatedGroup"))
if mibBuilder.loadTexts: eMassStorageAssociationEvents.setStatus('mandatory')
if mibBuilder.loadTexts: eMassStorageAssociationEvents.setDescription('')
a12MassStorageAssociationEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vPhysicalOrganization", 0), ("vLogicalOrganization", 1), ("vLogicalToPhysicalOrganization", 2), ("vRedundancyOrganization", 3), ("vSpareOrganization", 4), ("vCacheOrganization", 5), ("vSoftwareOrganization", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12MassStorageAssociationEventType.setStatus('mandatory')
if mibBuilder.loadTexts: a12MassStorageAssociationEventType.setDescription('The type of Mass storage association where a change has occurred ')
a12EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 16), ("vNon-recoverable", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSeverity.setDescription('The severity of this event.')
a12EventIsStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventIsStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventIsStateBased.setDescription('The value of this attribute determined whether the Event being reported is a state-based Event or not. If the value of this attribute is TRUE then the Event is state-based. Else the Event is not state-based')
a12EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventStateKey.setDescription('This attribute holds the key identifying a row of the Event State group within the Component in which the event generator group is located. The Current State attribute within the row contains the current state of this state-based event. The current state can be one of the four severities: OK, Non-Critical, Critical, and Non-Recoverable.')
a12AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a12AssociatedGroup.setDescription('The')
a12EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vStorageController", 0), ("vStorageDevice", 1), ("vBusPort", 2), ("vVolumeSet", 3), ("vProtectedSpaceExtent", 4), ("vAggregateProtectedSpaceExtent", 5), ("vPhysicalExtent", 6), ("vAggregatePhysicalExtent", 7), ("vRedundancyGroup", 8), ("vCache", 9), ("vSoftwareComponent", 10), ("vSoftwareSignature", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSystem.setDescription('The mass storage association object type which is causing a change.')
a12EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a12EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a12EventSubsystem.setDescription('The minor functional aspect of the product causing the fault.')
tBusPortAssociation = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13), )
if mibBuilder.loadTexts: tBusPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: tBusPortAssociation.setDescription('Bus Port Association ')
eBusPortAssociation = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a13BusPortAssociationIndex"))
if mibBuilder.loadTexts: eBusPortAssociation.setStatus('mandatory')
if mibBuilder.loadTexts: eBusPortAssociation.setDescription('')
a13BusPortAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13BusPortAssociationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a13BusPortAssociationIndex.setDescription('An index into the Bus Port Association table. This index is the same as the index in the Association group that defines the bus port association.')
a13NegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a13NegotiatedSpeed.setDescription('The maximum burst transfer rate, in millions of bytes, which was negotiated between the two associated bus ports.')
a13NegotiatedWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 13, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a13NegotiatedWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a13NegotiatedWidth.setDescription('The width, in bits, of the bus ports data path which was negotiated between the two associated bus ports.')
tOperationalState = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14), )
if mibBuilder.loadTexts: tOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: tOperationalState.setDescription('This group provides the operational state, usage, and availabili y status, and administrative state indicators for specific Device Group instance .')
eOperationalState = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a14OperationalStateInstanceIndex"))
if mibBuilder.loadTexts: eOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: eOperationalState.setDescription('')
a14OperationalStateInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStateInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a14OperationalStateInstanceIndex.setDescription('The Index into the Operational State table.')
a14DeviceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DeviceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a14DeviceGroupIndex.setDescription('The group ID of the group referencing this instance.')
a14OperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vEnabled", 3), ("vDisabled", 4), ("vNotApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14OperationalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14OperationalStatus.setDescription('The operational status of the Device Group instance.')
a14UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIdle", 3), ("vActive", 4), ("vBusy", 5), ("vNotApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: a14UsageState.setDescription('The usage state of the Device Group instance.')
a14AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRunning", 3), ("vWarning", 4), ("vInTest", 5), ("vNotApplicable", 6), ("vPowerOff", 7), ("vOffLine", 8), ("vOffDuty", 9), ("vDegraded", 10), ("vNotInstalled", 11), ("vInstallError", 12), ("vPowerSave", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14AvailabilityStatus.setDescription('The availability status of the Device Group instance.')
a14AdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLocked", 3), ("vUnlocked", 4), ("vNotApplicable", 5), ("vShuttingDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14AdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: a14AdministrativeState.setDescription('The administrative state of the Device Group instance.')
a14FatalErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 7), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14FatalErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a14FatalErrorCount.setDescription('The accumulated Fatal or Non-recoverable error count for this Device Group instance.')
a14MajorErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 8), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14MajorErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a14MajorErrorCount.setDescription('The accumulated Major or Critical error count for this Device Group instance.')
a14WarningErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 9), DmiCounter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14WarningErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: a14WarningErrorCount.setDescription('The accumulated Warning or Non-Critical error count for this Device Group instance.')
a14CurrentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vOk", 3), ("vNon-critical1", 4), ("vCritical", 5), ("vNon-recoverable1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14CurrentErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14CurrentErrorStatus.setDescription("This attribute presents the current error status for this Device Group instance. The most critical error status in effect should be presented. I.e. if a part of the Device Group instance is 'Critical', while other status is 'Non-critical' then the status 'Critical' should be reported.")
a14DevicePredictedFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vNotSupportedByThisDevice", 3), ("vNoFailurePredictedByTheDevice", 4), ("vDeviceFailurePredictedByTheDevice", 5), ("vMediaFailurePredictedByTheDevice", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a14DevicePredictedFailureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a14DevicePredictedFailureStatus.setDescription('Enumeration describing the current Device Predicted Failure Status (e.g.: the S.M.A.R.T. status of the device).')
tSymsdmsmassstoragesystem = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15), )
if mibBuilder.loadTexts: tSymsdmsmassstoragesystem.setStatus('mandatory')
if mibBuilder.loadTexts: tSymsdmsmassstoragesystem.setDescription('This group is the Symbios Vendor unique group. ')
eSymsdmsmassstoragesystem = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"), (0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a15SymDeviceIndex"))
if mibBuilder.loadTexts: eSymsdmsmassstoragesystem.setStatus('mandatory')
if mibBuilder.loadTexts: eSymsdmsmassstoragesystem.setDescription('')
a15SymDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15SymDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a15SymDeviceIndex.setDescription('An index into the Symbios Vendor Unique Device info table.')
a15SymDeviceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a15SymDeviceFlag.setStatus('mandatory')
if mibBuilder.loadTexts: a15SymDeviceFlag.setDescription('An Symbios Vendor Unique Flag.')
a15SmartReportingCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1), ("vUnknown", 2), ("vNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SmartReportingCapability.setStatus('mandatory')
if mibBuilder.loadTexts: a15SmartReportingCapability.setDescription("A flag indicating the state of a Devices's SMART reporting capability.")
a15SmartPollingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 15, 1, 4), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a15SmartPollingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: a15SmartPollingPeriod.setDescription('Number of minutes to wait between polling a device for its S.M.A.R.T. status.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1), ).setIndexNames((0, "SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibName.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB OID that corresponds to this MIF')
a99DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a99DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTrap.setDescription('This attribute can be changed to disable sending oftraps from this component')
trap1 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,1)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: trap1.setDescription('Rebuild in Progress')
trap2 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,2)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: trap2.setDescription('Storage Device Readying')
trap3 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,3)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: trap3.setDescription('Storage Device Error')
trap4 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 6, 1) + (0,4)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6StorageDevicesEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a6EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a5StorageDeviceIndex"))
if mibBuilder.loadTexts: trap4.setDescription('Self-Monitoring Warning')
trap5 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1) + (0,1)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8StorageControllerEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: trap5.setDescription('Storage Controller Error')
trap6 = NotificationType((1, 3, 6, 1, 4, 1, 1123, 3, 1, 2, 4, 1, 8, 1) + (0,2)).setObjects(("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8StorageControllerEventType"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSeverity"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventIsStateBased"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventStateKey"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8AssociatedGroup"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a8EventSubsystem"), ("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", "a7ControllerIndex"))
if mibBuilder.loadTexts: trap6.setDescription('Self-monitoring Warning')
mibBuilder.exportSymbols("SYMBIOSSDMSMASSSTORAGESYSTEMMIFDEF2-MIB", tSoftwareComponentInformation=tSoftwareComponentInformation, a2Build=a2Build, a10EventSystem=a10EventSystem, a5FruGroupIndex=a5FruGroupIndex, a5MediaDataBlockSize=a5MediaDataBlockSize, a14CurrentErrorStatus=a14CurrentErrorStatus, a5WorldwideIdentifier=a5WorldwideIdentifier, a11Type=a11Type, a9MaximumNumberOfAttachments=a9MaximumNumberOfAttachments, a5Compression=a5Compression, a9BusPortIndex=a9BusPortIndex, tMassStorageAssociationEvents=tMassStorageAssociationEvents, a2LanguageEdition=a2LanguageEdition, eMiftomib=eMiftomib, DmiInteger64X=DmiInteger64X, a6EventStateKey=a6EventStateKey, a11Object1Type=a11Object1Type, a7FruGroupIndex=a7FruGroupIndex, tComponentid=tComponentid, a6EventIsStateBased=a6EventIsStateBased, DmiComponentIndex=DmiComponentIndex, a4SupportPhoneNumber=a4SupportPhoneNumber, a8EventIsStateBased=a8EventIsStateBased, scsi=scsi, a12EventStateKey=a12EventStateKey, trap5=trap5, a13BusPortAssociationIndex=a13BusPortAssociationIndex, a14OperationalStateInstanceIndex=a14OperationalStateInstanceIndex, a7OperationalGroupIndex=a7OperationalGroupIndex, a2MajorVersion=a2MajorVersion, a9Protocol=a9Protocol, a9MaximumTransferRate=a9MaximumTransferRate, a14AdministrativeState=a14AdministrativeState, a8EventSeverity=a8EventSeverity, a9OperationalGroupIndex=a9OperationalGroupIndex, a1Version=a1Version, a3FileCrc1=a3FileCrc1, a9SignalCharacteristics=a9SignalCharacteristics, a8EventSystem=a8EventSystem, a9MassStorageStatisticsGroupIndex=a9MassStorageStatisticsGroupIndex, a8EventSubsystem=a8EventSubsystem, eOperationalState=eOperationalState, a10EventSeverity=a10EventSeverity, fam8xx=fam8xx, a7ProtectionManagement=a7ProtectionManagement, a6StorageDevicesEventType=a6StorageDevicesEventType, a14WarningErrorCount=a14WarningErrorCount, a4PartNumber=a4PartNumber, tBusPort=tBusPort, DmiDateX=DmiDateX, trap4=trap4, a12EventIsStateBased=a12EventIsStateBased, tBusPortAssociation=tBusPortAssociation, a3FileDateAndTime=a3FileDateAndTime, a10EventIsStateBased=a10EventIsStateBased, a15SymDeviceIndex=a15SymDeviceIndex, a7SecondsSinceLastPower_up=a7SecondsSinceLastPower_up, a9Isochronous=a9Isochronous, a12EventSeverity=a12EventSeverity, a9WorldwideIdentifier=a9WorldwideIdentifier, a8AssociatedGroup=a8AssociatedGroup, a6EventSubsystem=a6EventSubsystem, id=id, a11Object2Type=a11Object2Type, eMassStorageAssociationEvents=eMassStorageAssociationEvents, a99MibOid=a99MibOid, a12EventSubsystem=a12EventSubsystem, tMiftomib=tMiftomib, a14AvailabilityStatus=a14AvailabilityStatus, a99MibName=a99MibName, a10AssociatedGroup=a10AssociatedGroup, a1SerialNumber=a1SerialNumber, a2InstallableState=a2InstallableState, symbios=symbios, eStorageDevicesEvents=eStorageDevicesEvents, a7ControllerIndex=a7ControllerIndex, a4Manufacturer=a4Manufacturer, a99DisableTrap=a99DisableTrap, a10EventStateKey=a10EventStateKey, eStorageControllerEvents=eStorageControllerEvents, a15SymDeviceFlag=a15SymDeviceFlag, a7Identification=a7Identification, eSymsdmsmassstoragesystem=eSymsdmsmassstoragesystem, a5StorageDeviceIndex=a5StorageDeviceIndex, a15SmartPollingPeriod=a15SmartPollingPeriod, a6AssociatedGroup=a6AssociatedGroup, a2MinorVersion=a2MinorVersion, a3FileCrc2=a3FileCrc2, a3FileSize=a3FileSize, trap2=trap2, a6EventSeverity=a6EventSeverity, a9ConnectorGender=a9ConnectorGender, a4RevisionLevel=a4RevisionLevel, a12EventSystem=a12EventSystem, a3FileChecksum=a3FileChecksum, a4Model=a4Model, eComponentid=eComponentid, a2TargetOperatingSystem=a2TargetOperatingSystem, eMassStorageAssociation=eMassStorageAssociation, a8StorageControllerEventType=a8StorageControllerEventType, a8EventStateKey=a8EventStateKey, a14DevicePredictedFailureStatus=a14DevicePredictedFailureStatus, eBusPortAssociation=eBusPortAssociation, a11AssociationIndex=a11AssociationIndex, a14OperationalStatus=a14OperationalStatus, a4WarrantyStartDate=a4WarrantyStartDate, a9ConnectorTypeDescription=a9ConnectorTypeDescription, trap1=trap1, tMassStorageAssociation=tMassStorageAssociation, tBusPortEvents=tBusPortEvents, a6EventSystem=a6EventSystem, a1Installation=a1Installation, a4Description=a4Description, a14DeviceGroupIndex=a14DeviceGroupIndex, a3FileName=a3FileName, tStorageController=tStorageController, a5FormattedMediaCapacity=a5FormattedMediaCapacity, a5Sub_identifier=a5Sub_identifier, DmiInteger=DmiInteger, a13NegotiatedSpeed=a13NegotiatedSpeed, a5MediaLoaded=a5MediaLoaded, a9AddressDescriptor=a9AddressDescriptor, a5RemovableDevice=a5RemovableDevice, tStorageDevicesEvents=tStorageDevicesEvents, a15SmartReportingCapability=a15SmartReportingCapability, a3FileIndex=a3FileIndex, eBusPortEvents=eBusPortEvents, eStorageDevices=eStorageDevices, a14MajorErrorCount=a14MajorErrorCount, a4DeviceGroupIndex=a4DeviceGroupIndex, a12MassStorageAssociationEventType=a12MassStorageAssociationEventType, eStorageController=eStorageController, cosprings=cosprings, dmtfGroups=dmtfGroups, a5RemovableMedia=a5RemovableMedia, a4WarrantyDuration=a4WarrantyDuration, tStorageDevices=tStorageDevices, DmiCounter=DmiCounter, tSymsdmsmassstoragesystem=tSymsdmsmassstoragesystem, eFieldReplaceableUnit=eFieldReplaceableUnit, a1Manufacturer=a1Manufacturer, a11Object2Index=a11Object2Index, a4FruIndex=a4FruIndex, a11Object1Index=a11Object1Index, a5Encryption=a5Encryption, a7WorldwideIdentifier=a7WorldwideIdentifier, tStorageControllerEvents=tStorageControllerEvents, a9ConnectorType=a9ConnectorType, tOperationalState=tOperationalState, a7WorldwideIdentifierType=a7WorldwideIdentifierType, a10EventSubsystem=a10EventSubsystem, eSoftwareSignature=eSoftwareSignature, eBusPort=eBusPort, a5OperationalGroupIndex=a5OperationalGroupIndex, eSoftwareComponentInformation=eSoftwareComponentInformation, a9MaximumWidth=a9MaximumWidth, a12AssociatedGroup=a12AssociatedGroup, a13NegotiatedWidth=a13NegotiatedWidth, a2Revision=a2Revision, a2ExecutableState=a2ExecutableState, a5Type=a5Type, a7BusMaster=a7BusMaster, a14UsageState=a14UsageState, a1Product=a1Product, tFieldReplaceableUnit=tFieldReplaceableUnit, a10BusPortEventType=a10BusPortEventType, a5WorldwideIdentifierType=a5WorldwideIdentifierType, a9WorldwideIdentifierType=a9WorldwideIdentifierType, a9ProtocolDescription=a9ProtocolDescription, trap6=trap6, a1Verify=a1Verify, a4FruSerialNumber=a4FruSerialNumber, a2IdentificationCode=a2IdentificationCode, a5TypeDescription=a5TypeDescription, DmiDisplaystring=DmiDisplaystring, trap3=trap3, a5DeviceLoaded=a5DeviceLoaded, a14FatalErrorCount=a14FatalErrorCount, tSoftwareSignature=tSoftwareSignature)
