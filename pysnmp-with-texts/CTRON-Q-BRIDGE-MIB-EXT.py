#
# PySNMP MIB module CTRON-Q-BRIDGE-MIB-EXT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-Q-BRIDGE-MIB-EXT
# Produced by pysmi-0.3.4 at Wed May  1 12:30:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
dot1dBasePort, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort", "dot1dBasePortEntry")
ctVlanExt, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctVlanExt")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
dot1qTpFdbAddress, VlanIndex, PortList, dot1qVlanCurrentEntry, dot1qVlanIndex, dot1qFdbId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qTpFdbAddress", "VlanIndex", "PortList", "dot1qVlanCurrentEntry", "dot1qVlanIndex", "dot1qFdbId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, Bits, TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, Counter32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "Bits", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter32", "Unsigned32", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ctQBridgeMibExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7))
ctQBridgeMibExt.setRevisions(('2007-02-16 17:44', '2005-01-21 17:17', '2004-06-04 12:41', '2003-12-15 20:53', '2002-07-26 20:45', '2002-07-19 14:12', '2001-04-16 18:16', '2001-01-10 13:29', '1999-10-06 08:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ctQBridgeMibExt.setRevisionsDescriptions(('Added the rfc3580VlanTunnelAttribute enumeration to the ctDot1qPortVlanEgressStatus leaf.', 'Added the ctDot1qTpFdbExtTable to allow a mechanism for removing learned(3) entries from the filter database.', 'Added the ctDot1qPortVlanEgressTable to represent egress information on a per port basis.', 'Added ctDot1qPortReplaceTCI to allow the optional replacement of the original Tag Control Information (TCI) in an 802.1Q tagged frame.', 'Changed the description of ctDot1qVlanForbidEgressPorts.', 'Added the ctDot1qVlanCurrentExtTable. Changed CONTACT-INFO clause to Enterasys Networks.', 'Minor grammatical changes.', 'Added the ctDot1qPortDiscardTagged leaf for additional backwards compatibility with the now obsolete CTRON-VLAN-EXTENSIONS-MIB. Fixed the INDEX clause of the ctDot1qVlanDynamicEgressEntry. Added the new ctQBridgePortGroup2 OBJECT-GROUP and ctDot1qVlan2 MODULE-COMPLIANCE. Deprecated the ctQBridgePortGroup OBJECT-GROUP and ctDot1qVlan MODULE-COMPLIANCE.', 'The initial version of this MIB module published as 01.00.00.',))
if mibBuilder.loadTexts: ctQBridgeMibExt.setLastUpdated('200702161744Z')
if mibBuilder.loadTexts: ctQBridgeMibExt.setOrganization('Enterasys Networks, Inc.')
if mibBuilder.loadTexts: ctQBridgeMibExt.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: ctQBridgeMibExt.setDescription('This MIB module defines a portion of the SNMP enterprise MIBs under the Cabletron enterprise OID pertaining to the configuration of switches that support IEEE 802.1Q [802.1Q] and the Q-BRIDGE-MIB [RFC2674].')
ctQBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1))
ctDot1qPortVlanExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 1), )
if mibBuilder.loadTexts: ctDot1qPortVlanExtTable.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanExtTable.setDescription('A table containing per port control and status information for Cabletron proprietary extensions pertaining to VLAN configuration in the device.')
ctDot1qPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 1, 1), )
dot1dBasePortEntry.registerAugmentions(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortVlanEntry"))
ctDot1qPortVlanEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: ctDot1qPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanEntry.setDescription('Information controlling proprietary VLAN configuration for a port on the device. This is indexed by dot1dBasePort.')
ctDot1qPortDefaultForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwardNoFrames", 1), ("forwardAllFramesAsTagged", 2), ("forwardAllFramesAsUntagged", 3))).clone('forwardNoFrames')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDot1qPortDefaultForwardMode.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortDefaultForwardMode.setDescription('The method used to forward frames belonging to VLANs that do not have an entry in the dot1qVlanCurrentTable. When this is forwardNoFrames(1), the device will not forward traffic out this port, for any VLAN that does not have an entry in the dot1qVlanCurrentTable. When this is forwardAllFramesAsTagged(2), the device will forward all traffic out this port, with an 802.1Q VLAN tag, for any VLAN that does not have an entry in dot1qVlanCurrentTable. When this is forwardAllFramesAsUntagged(3), the device will forward all traffic out this port, without an 802.1Q VLAN tag, for any VLAN that does not have an entry in dot1qVlanCurrentTable. This control does not affect VLAN independent BPDU frames, such as GVRP and STP. It does affect VLAN dependent BPDU frames, such as GMRP.')
ctDot1qPortDiscardTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 1, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDot1qPortDiscardTagged.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortDiscardTagged.setDescription('The method used to discard all incoming VLAN tagged frames for the port specified by the indexing of this entry. When this is enabled(1), the device will discard all 802.1Q tagged packets received on this port. When this is disabled(2), the device will NOT discard frames received on this port based on the presence of an 802.1Q tag. The behavior of this method in conjunction with the dot1qPortAcceptableFrameTypes leaf of Q-BRIDGE-MIB [RFC2674] is that of a logical OR.')
ctDot1qPortReplaceTCI = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDot1qPortReplaceTCI.setReference('IEEE Std. 802.1Q-1998: Section 9.3.2')
if mibBuilder.loadTexts: ctDot1qPortReplaceTCI.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortReplaceTCI.setDescription('The method used to replace the Tag Control Information (TCI) field in all VLAN tagged frames received on the port specified by the indexing of this entry. When this is enabled(1), the device will replace the 802.1Q TCI field with results of the INGRESS stage of frame forwarding. Logically, this happens immediately prior to the PROGRESS stage of frame relay. When this is disabled(2), the device operates in compliance with the IEEE 802.1Q standard and honors the TCI field of incident frames.')
ctDot1qVlanDynamicEgressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 2), )
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressTable.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressTable.setDescription('A table containing per VLAN control and status information for Cabletron proprietary egress extensions for VLAN configuration in the device.')
ctDot1qVlanDynamicEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 2, 1), ).setIndexNames((0, "CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qVlanDynamicEgressIndex"))
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressEntry.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressEntry.setDescription('Information controlling proprietary VLAN configuration for a device.')
ctDot1qVlanDynamicEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressIndex.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressIndex.setDescription("The VLAN to which this entries' dynamic egress status applies.")
ctDot1qVlanDynamicEgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 2, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressStatus.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanDynamicEgressStatus.setDescription('The state of Dynamic Egress operation on this VLAN. The value enabled(1) indicates that Dynamic Egress is enabled on this VLAN. If Dynamic Egress is enabled for a VLAN the following rules are applied to received frames: 1. If the frame is untagged, and 2. The frame is successfully classified to the specified VLAN, and 3. The port the frame was received on is not configured in dot1qVlanCurrentEgressPorts, dot1qVlanCurrentUntaggedPorts, or dot1qVlanForbiddenEgressPorts, for the classified VLAN, and 4. The port is configured for forwardNoFrames(1) in ctDot1qPortDefaultForwardMode (if supported), then 5. The port the frame was received on will be added to the dot1qVlanCurrentEgressPorts and dot1qVlanCurrentUntaggedPorts for the classified VLAN. If the VLAN was not preexisting the dot1qVlanStatus leaf for the VLAN will return other(1).')
ctDot1qVlanCurrentExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 3), )
if mibBuilder.loadTexts: ctDot1qVlanCurrentExtTable.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanCurrentExtTable.setDescription('A table containing current configuration information for each VLAN currently configured into the device by (local or network) management or created dynamically created. This table provides proprietary extensions to dot1qVlanCurrentTable as defined in RFC2674.')
ctDot1qVlanCurrentEntryExt = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 3, 1), )
dot1qVlanCurrentEntry.registerAugmentions(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qVlanCurrentEntryExt"))
ctDot1qVlanCurrentEntryExt.setIndexNames(*dot1qVlanCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: ctDot1qVlanCurrentEntryExt.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanCurrentEntryExt.setDescription('Information for a VLAN configured into the device by (local or network) management or created dynamically.')
ctDot1qVlanForbidEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 3, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDot1qVlanForbidEgressPorts.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanForbidEgressPorts.setDescription('The current set of ports which are prohibited from being included in the egress list for this VLAN. This object is a logical combination of dot1qVlanForbiddenEgressPorts and zero or more proprietary methods of forbidding egress on a per port per VLAN basis.')
ctDot1qPortVlanEgressTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 4), )
if mibBuilder.loadTexts: ctDot1qPortVlanEgressTable.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanEgressTable.setDescription('A table containing per port, per VLAN egress information. This table represents information contained in the dot1qVlanCurrentTable, but indexed by port instead of by VLAN. Only ports that a given VLAN is actively egressing are represented in this table.')
ctDot1qPortVlanEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: ctDot1qPortVlanEgressEntry.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanEgressEntry.setDescription('Information related to egress on a per port, per VLAN basis. The entry also represents the method that caused the port to have egress.')
ctDot1qPortVlanEgressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("gvrp", 3), ("ctDynamicEgress", 4), ("etsysPolicyProfile", 5), ("ctPortDefFwdMode", 6), ("rfc3580VlanTunnelAttribute", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDot1qPortVlanEgressStatus.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanEgressStatus.setDescription('This object indicates the method that is causing the VLAN to egress on this port. other(1) - The VLAN is currently egressing on this port but the conditions under which it will remain so differ from the following values. static(2) - The VLAN is currently egressing on this port as a result of static configuration in the dot1qVlanStaticTable. gvrp(3) - The VLAN is currently egressing on this port as a result of GVRP. ctDynamicEgress(4) - The VLAN is currently egressing on this port as a result of ctDyanmicEgress. This feature is controlled by the ctDot1qVlanDynamicEgressStatus object. etsysPolicyProfile(5) - The VLAN is currently egressing on this port as a result of policy configuration in the ENTERASYS-POLICY-PROFILE-MIB. ctPortDefFwdMode(6) - The VLAN is currently egressing on this port as a result of explicit configuration of the ctDot1qPortDefaultForwardMode object for this port. rfc3580VlanTunnelAttribute(7) - The VLAN is currently egressing on this port as a result of a specified RFC2580 VLAN Tunnel Attribute.')
ctDot1qPortVlanEgressType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("forbidden", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDot1qPortVlanEgressType.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanEgressType.setDescription('This object indicates the type of egress the VLAN has on this port. tagged(1) - Frames for the specified VLAN egressing this port have an 802.1Q tag. untagged(2) - Frames for the specified VLAN egressing this port do not have an 802.1Q tag. forbidden(3) - Frames for the specified VLAN are not allowed to egress this port under any circumstances.')
ctDot1qTpFdbExtTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 5), )
if mibBuilder.loadTexts: ctDot1qTpFdbExtTable.setReference("RFC 2674, 'Definitions of Managed Objects for Bridges with Traffic Classes, Multicast Filtering and Virtual LAN Extensions'")
if mibBuilder.loadTexts: ctDot1qTpFdbExtTable.setStatus('current')
if mibBuilder.loadTexts: ctDot1qTpFdbExtTable.setDescription('A table that extends the functionality provided by the dot1qTpFdbTable of Q-BRIDGE-MIB. Only unicast MAC addresses with a dot1qTpFdbStatus of learned(3) will appear in this table.')
ctDot1qTpFdbExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 5, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"), (0, "Q-BRIDGE-MIB", "dot1qTpFdbAddress"))
if mibBuilder.loadTexts: ctDot1qTpFdbExtEntry.setStatus('current')
if mibBuilder.loadTexts: ctDot1qTpFdbExtEntry.setDescription('Information about a specific unicast MAC address for which the device has some forwarding and/or filtering information.')
ctDot1qTpFdbRemoveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDot1qTpFdbRemoveAddress.setStatus('current')
if mibBuilder.loadTexts: ctDot1qTpFdbRemoveAddress.setDescription('When this is object is set to true(1) the unicast MAC address specified by the indexing will be removed from transparent filter database. A set to false(2) will have no effect. This object will always return false(2).')
ctQBridgeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2))
ctQBridgeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1))
ctQBridgeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 2))
ctQBridgePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 1)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortDefaultForwardMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgePortGroup = ctQBridgePortGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ctQBridgePortGroup.setDescription('********* THIS GROUP IS DEPRECATED ********** A collection of objects providing port level control over the forwarding behavior of frames classified to unconfigured VLANs.')
ctQBridgeVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 2)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qVlanDynamicEgressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgeVlanGroup = ctQBridgeVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ctQBridgeVlanGroup.setDescription('A collection of objects providing device level control over the addition and deletion of unconfigured ports to the egress lists of VLANs.')
ctQBridgePortGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 3)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortDefaultForwardMode"), ("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortDiscardTagged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgePortGroup2 = ctQBridgePortGroup2.setStatus('current')
if mibBuilder.loadTexts: ctQBridgePortGroup2.setDescription('A collection of objects providing port level control over the ingress and egress of frames received by the device.')
ctQBridgeVlanCurrentForbidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 4)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qVlanForbidEgressPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgeVlanCurrentForbidGroup = ctQBridgeVlanCurrentForbidGroup.setStatus('current')
if mibBuilder.loadTexts: ctQBridgeVlanCurrentForbidGroup.setDescription('A collection of objects providing read-only current operational information pertaining to forbidden egress on a per VLAN basis.')
ctQBridgePortReplaceTCIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 5)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortReplaceTCI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgePortReplaceTCIGroup = ctQBridgePortReplaceTCIGroup.setStatus('current')
if mibBuilder.loadTexts: ctQBridgePortReplaceTCIGroup.setDescription('An object providing port level control TCI replacement.')
ctQBridgePortVlanEgressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 6)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortVlanEgressStatus"), ("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qPortVlanEgressType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgePortVlanEgressGroup = ctQBridgePortVlanEgressGroup.setStatus('current')
if mibBuilder.loadTexts: ctQBridgePortVlanEgressGroup.setDescription('Objects providing per port, per VLAN egress information.')
ctQBridgeTpFdbTableExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 1, 7)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctDot1qTpFdbRemoveAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctQBridgeTpFdbTableExtGroup = ctQBridgeTpFdbTableExtGroup.setStatus('current')
if mibBuilder.loadTexts: ctQBridgeTpFdbTableExtGroup.setDescription('Objects providing per 802.1Q unicast MAC address configuration.')
ctDot1qVlan = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 2, 1)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgePortGroup"), ("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgeVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctDot1qVlan = ctDot1qVlan.setStatus('deprecated')
if mibBuilder.loadTexts: ctDot1qVlan.setDescription('******** THIS COMPLIANCE IS DEPRECATED ******** The compliance statement for devices that support Cabletron extensions to Q-BRIDGE-MIB.')
ctDot1qVlan2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 2, 2)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgeVlanGroup"), ("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgePortGroup2"), ("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgePortReplaceTCIGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctDot1qVlan2 = ctDot1qVlan2.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlan2.setDescription('The compliance statement for devices that support Cabletron extensions to Q-BRIDGE-MIB.')
ctDot1qVlanCurentCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 2, 3)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgeVlanCurrentForbidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctDot1qVlanCurentCompliance = ctDot1qVlanCurentCompliance.setStatus('current')
if mibBuilder.loadTexts: ctDot1qVlanCurentCompliance.setDescription('The compliance statement for devices that support Cabletron extensions to the dot1qVlanCurrentTable of the Q-BRIDGE-MIB.')
ctDot1qPortVlanEgressCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 2, 4)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgePortVlanEgressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctDot1qPortVlanEgressCompliance = ctDot1qPortVlanEgressCompliance.setStatus('current')
if mibBuilder.loadTexts: ctDot1qPortVlanEgressCompliance.setDescription('The compliance statement for devices that support reporting of VLAN egress on a per port, per VLAN basis.')
ctDot1qTpFdbTableExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 16, 7, 2, 2, 5)).setObjects(("CTRON-Q-BRIDGE-MIB-EXT", "ctQBridgeTpFdbTableExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctDot1qTpFdbTableExtCompliance = ctDot1qTpFdbTableExtCompliance.setStatus('current')
if mibBuilder.loadTexts: ctDot1qTpFdbTableExtCompliance.setDescription('The compliance statement for devices that support extensions to the dot1qTpFdbTable of Q-BRIDGE-MIB.')
mibBuilder.exportSymbols("CTRON-Q-BRIDGE-MIB-EXT", ctQBridgePortGroup2=ctQBridgePortGroup2, ctDot1qPortReplaceTCI=ctDot1qPortReplaceTCI, ctDot1qTpFdbRemoveAddress=ctDot1qTpFdbRemoveAddress, ctDot1qTpFdbExtTable=ctDot1qTpFdbExtTable, ctDot1qVlanForbidEgressPorts=ctDot1qVlanForbidEgressPorts, ctDot1qPortVlanExtTable=ctDot1qPortVlanExtTable, ctDot1qPortVlanEgressType=ctDot1qPortVlanEgressType, ctDot1qVlan2=ctDot1qVlan2, ctDot1qVlanCurentCompliance=ctDot1qVlanCurentCompliance, ctDot1qPortVlanEgressStatus=ctDot1qPortVlanEgressStatus, ctQBridgePortVlanEgressGroup=ctQBridgePortVlanEgressGroup, ctDot1qVlanCurrentExtTable=ctDot1qVlanCurrentExtTable, ctQBridgeTpFdbTableExtGroup=ctQBridgeTpFdbTableExtGroup, ctQBridgeVlanGroup=ctQBridgeVlanGroup, ctDot1qPortVlanEgressTable=ctDot1qPortVlanEgressTable, ctQBridgeVlanCurrentForbidGroup=ctQBridgeVlanCurrentForbidGroup, ctDot1qPortVlanEgressEntry=ctDot1qPortVlanEgressEntry, ctDot1qVlanCurrentEntryExt=ctDot1qVlanCurrentEntryExt, ctQBridgeConformance=ctQBridgeConformance, ctQBridgePortGroup=ctQBridgePortGroup, ctQBridgeMIBObjects=ctQBridgeMIBObjects, PYSNMP_MODULE_ID=ctQBridgeMibExt, ctDot1qVlanDynamicEgressIndex=ctDot1qVlanDynamicEgressIndex, ctDot1qTpFdbTableExtCompliance=ctDot1qTpFdbTableExtCompliance, ctDot1qPortVlanEntry=ctDot1qPortVlanEntry, ctQBridgeMibExt=ctQBridgeMibExt, ctDot1qVlanDynamicEgressEntry=ctDot1qVlanDynamicEgressEntry, ctQBridgePortReplaceTCIGroup=ctQBridgePortReplaceTCIGroup, ctQBridgeCompliances=ctQBridgeCompliances, ctDot1qVlanDynamicEgressTable=ctDot1qVlanDynamicEgressTable, ctDot1qVlanDynamicEgressStatus=ctDot1qVlanDynamicEgressStatus, ctDot1qVlan=ctDot1qVlan, ctQBridgeGroups=ctQBridgeGroups, ctDot1qTpFdbExtEntry=ctDot1qTpFdbExtEntry, ctDot1qPortVlanEgressCompliance=ctDot1qPortVlanEgressCompliance, ctDot1qPortDefaultForwardMode=ctDot1qPortDefaultForwardMode, ctDot1qPortDiscardTagged=ctDot1qPortDiscardTagged)
