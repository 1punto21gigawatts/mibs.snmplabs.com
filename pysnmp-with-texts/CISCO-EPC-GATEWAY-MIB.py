#
# PySNMP MIB module CISCO-EPC-GATEWAY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-EPC-GATEWAY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:57:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Counter32, MibIdentifier, TimeTicks, Gauge32, Integer32, ObjectIdentity, Unsigned32, NotificationType, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "MibIdentifier", "TimeTicks", "Gauge32", "Integer32", "ObjectIdentity", "Unsigned32", "NotificationType", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress")
DisplayString, TimeInterval, TimeStamp, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeInterval", "TimeStamp", "TextualConvention", "TruthValue")
ciscoEpcGatewayMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 731))
ciscoEpcGatewayMIB.setRevisions(('2012-02-08 00:00', '2011-05-10 00:00', '2011-03-04 00:00', '2010-06-28 00:00', '2010-05-06 00:00', '2010-04-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEpcGatewayMIB.setRevisionsDescriptions(('Added the following object to ciscoEPCGatewayStatus cegTotalIdleSessions. Added the following objects to cegBufferStats cegPacketDropDueToMaxPacketLimit, cegPacketDropDueToMaxBufferLimit. Added cegSystemStatusGrpSup3 group. Added cegPacketDropLimitStatsGrp. Deprecated ciscoEpcGatewayMIBComplianceRev2 and replaced it with ciscoEpcGatewayMIBComplianceRev3.', 'Added the following objects to ciscoEpcGatewayStatus cegActivatedBearers, cegActivatedDedicatedBearers , cegActivatedIpv4DedicatedBearers, cegActivatedIpv6DedicatedBearers. Added cegSystemStatusGrpSup2 group. Deprecated ciscoEpcGatewayMIBComplianceRev1 and replaced it with ciscoEpcGatewayMIBComplianceRev2.', 'Added cegActivatedIpv4v6Bearers, cegActivatedGtpv2SgwSessions, cegActivatedGtpv2PgwSessions, cegActivatedGtpv2SPgwSessions to ciscoEpcGatewayStatus. Added units for cegActivatedIpv4v6Sessions. Added cegSystemStatusGrpSup1 to supplement cegSystemStatusGrp. Added ciscoEpcGatewayMIBComplianceRev1 and deprecated ciscoEpcGatewayMIBCompliance.', 'Modified default values for the following objects cegCongestionLowThreshold cegCongestionHighThreshold', 'Modified Default values for the follwing objects cegBufferMaxSize, cegBufferDiscardDataTime, cegBufferMaxPacketsPerBuffer. Modified range for the following objects cegBufferDiscardDataTime, cegBufferMaxPacketsPerBuffer.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoEpcGatewayMIB.setLastUpdated('201202080000Z')
if mibBuilder.loadTexts: ciscoEpcGatewayMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEpcGatewayMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lte@cisco.com')
if mibBuilder.loadTexts: ciscoEpcGatewayMIB.setDescription('This MIB module manages the features and configuration for PDN Gateway(PGW) and Serving Gateway(SGW) in Evolved Packet Core(EPC) architecture. The PGW is the permanent IP point-of-attachment for access via the E-UTRAN. The PGW performs IP policy and charging enforcement on packet flows to and from mobile devices. The SGW is a local mobility anchor for E-UTRAN mobility, switching packets between the S5 interface and the GTP based S1-U interface for mobiles in connected mode. +------------------------------------------------+ | | | | | +=======+__________ | | | UTRAN | |S12 | | | +======+ | | | +======| | | | | +======| SGSN |___ | | | | +======+ || | | | GERAN | | S4|| | | +=======+ |(GTP-C|| | | S3| VO,V1|| | | | GTPU|| | | |VO,V1)|| | | +======+ || | | ____| MME |__ || | | | +======+ ||| | | S1-MME| S11 ||| | | | GTP-C ||| | | | (V0,V1,V2) ||| | |+====+ +========+ +======+ +======+ | +===+ || UE |-|E-Utran | | SGW | | PGW |-SGi-|PDN| || | |(EnodeB)| | | | | | | | |+====+ +========+ +======+ +======+ | +===+ | | | | GTP-C | | | | | |(vo,v1,v2)| | | | | |GTP-C | | | | | | (vo,v1) | | | | GTP v2-u | | | | | ------------ ----------- | | (S1-U) S5 | | | +------------------------------------------------+ This architecture supports the non-roaming and roaming architectures using GTP based protocol on the PGW and SGW with a number of functions. It support high number of subscribers with their associated control messages and data traffic. Each of this association forms an entry in PGW and SGW and is commonly know as bearers. The various features used by this architecture and their attributes are captured in this MIB: 1. Overload protection, handles congestion control, SGW and PGW represent congestion as a DFP metric considering the current CPU, memory usage and number of bearers open. On reaching the low congestion threshold, based on the ARP, high priority calls are accepted and those with a lower priority are rejected. Once the high threshold is reached all new calls are rejected. 2. Buffering agent, the SGW buffers the data packets in the downlink direction till the downlink path/peer information is ready. It buffers all packets coming from any gateway based on the default/configured values of the buffer size, discard period and number of packets. Packets will be buffered on a per bearer basis and retrieved in the order it was buffered using the handle given by the buffering agent initially. If the buffer is full then no more bearers will be accepted. Acronyms and terms: 3GPP 3rd Generation Partnership Project DFP Dynamic Feedback Protocol EDGE Enhanced Data rates for GSM Evolution EPC Evolved Packet Core E-UTRAN Evolved UTRAN GERAN GSM EDGE Radio Access Network GPRS General Packet Radio Service GSM Global System for Mobile communications GTP GPRS Tunneling Protocol PDN Public Data Network PGW PDN Gateway SAE System Architecture Evolution SGW Serving Gateway SP GW An integrated SGW and PGW Gateway UE User Equipment UMTS Universal Mobile Telecommunications System UTRAN UMTS Radio Access Network REFERENCE [1] 3GPP: Evolved GPRS Tunneling Protocol for Control Plane (GTPv2-C). 3GPP TS 29.274 V1.3.1. [2] 3GPP: GPRS enhancements for E-UTRAN access. 3GPP TS 23.401 V8.3.0. [3] 3GPP: Circuit Switched fallback in Evolved Packet System(EPS). 3GPP TS 23.272.')
ciscoEpcGatewayMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 0))
ciscoEpcGatewayMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1))
ciscoEpcGatewayStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1))
cegOverloadProtectionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 1))
cegBufferStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2))
ciscoEpcGatewayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2))
cegOverloadProtectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 1))
cegBufferingAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 2))
ciscoEpcGatewayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3))
ciscoEpcGatewayNotifMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 4))
cegCongestionIncomingReqDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionIncomingReqDrops.setStatus('current')
if mibBuilder.loadTexts: cegCongestionIncomingReqDrops.setDescription('This object represents the total number of incoming calls dropped at the gateway. This counter is incremented when the gateway receives an incoming call request at high congestion level, and the request is dropped.')
cegCongestionLowThresholdReached = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionLowThresholdReached.setStatus('current')
if mibBuilder.loadTexts: cegCongestionLowThresholdReached.setDescription('This object represents the number of times low congestion occurred on the gateway. The value is equal to the number of times the gateway exceeded the congestion threshold cegCongestionLowThreshold.')
cegCongestionHighThresholdReached = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionHighThresholdReached.setStatus('current')
if mibBuilder.loadTexts: cegCongestionHighThresholdReached.setDescription('This object represents the number of times high congestion occurred on the gateway. The value is equal to the number of times the gateway exceeded the congestion threshold cegCongestionHighThreshold.')
cegBuffersCreated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 1), Counter32()).setUnits('buffer').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBuffersCreated.setStatus('current')
if mibBuilder.loadTexts: cegBuffersCreated.setDescription('This object represents the total number of buffers allocated by buffering agent.')
cegBuffersDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 2), Counter32()).setUnits('buffer').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBuffersDeleted.setStatus('current')
if mibBuilder.loadTexts: cegBuffersDeleted.setDescription('This object represents the total number of buffers deallocated by buffering agent.')
cegBuffersTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBuffersTimedOut.setStatus('current')
if mibBuilder.loadTexts: cegBuffersTimedOut.setDescription('This object represents the total number of buffers that got timed out, at buffering agent. A buffer is timed out when the discard timer cegBufferDiscardDataTime expires.')
cegBufferPacketsEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 4), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBufferPacketsEnqueued.setStatus('current')
if mibBuilder.loadTexts: cegBufferPacketsEnqueued.setDescription('This object represents the total number of packets enqueued to the buffering agent.')
cegBufferPacketsDequeued = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 5), Counter32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBufferPacketsDequeued.setStatus('current')
if mibBuilder.loadTexts: cegBufferPacketsDequeued.setDescription('This object represents the total number of packets dequeued from the buffering agent.')
cegBufferBytesEnqueued = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 6), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBufferBytesEnqueued.setStatus('current')
if mibBuilder.loadTexts: cegBufferBytesEnqueued.setDescription('This object represents the total bytes of data enqueued to the buffering agent.')
cegBufferBytesDequeued = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 7), Counter32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBufferBytesDequeued.setStatus('current')
if mibBuilder.loadTexts: cegBufferBytesDequeued.setDescription('This object represents the total bytes of data dequeued from the buffering agent.')
cegBufferRejMemUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBufferRejMemUnavailable.setStatus('current')
if mibBuilder.loadTexts: cegBufferRejMemUnavailable.setDescription('This object represents the total number of times, buffer allocation is rejected by gateway due to, requested memory is greater than cegTotalBufferAvailable.')
cegBufferRejLowMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegBufferRejLowMem.setStatus('current')
if mibBuilder.loadTexts: cegBufferRejLowMem.setDescription('This object represents the total number of times, buffer allocation is rejected due to, low memory availability in the gateway.')
cegPacketDropDueToMaxPacketLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegPacketDropDueToMaxPacketLimit.setStatus('current')
if mibBuilder.loadTexts: cegPacketDropDueToMaxPacketLimit.setDescription('This object represents the number of packet drops due to bearer maximum packet limit.')
cegPacketDropDueToMaxBufferLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegPacketDropDueToMaxBufferLimit.setStatus('current')
if mibBuilder.loadTexts: cegPacketDropDueToMaxBufferLimit.setDescription('This object represents the number of packet drops due to bearer maximum buffer limit.')
cegCongestionLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegCongestionLowThreshold.setStatus('current')
if mibBuilder.loadTexts: cegCongestionLowThreshold.setDescription('This object specifies the low threshold for congestion. Congestion DFP metric considers the current CPU memory usage and number of bearers open. On reaching the low congestion threshold, based on the ARP, high priority calls are accepted and those with a lower priority are rejected.')
cegCongestionHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegCongestionHighThreshold.setStatus('current')
if mibBuilder.loadTexts: cegCongestionHighThreshold.setDescription('This object specifies the high threshold for congestion. Congestion DFP metric considers the current CPU memory usage and number of bearers open. Once the high threshold is reached all new calls are rejected.')
cegBufferingAgentEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegBufferingAgentEnabled.setStatus('current')
if mibBuilder.loadTexts: cegBufferingAgentEnabled.setDescription("This object specifies the state of the buffering agent. 'true' - indicates that the buffering agent is enabled. 'false' - indicates that the buffering agent is disabled.")
cegBufferMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(400, 12000)).clone(1024)).setUnits('Bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegBufferMaxSize.setStatus('current')
if mibBuilder.loadTexts: cegBufferMaxSize.setDescription("This object represents the maximum size of a buffer that can be allocated for a bearer. This object is directly dependent on object cegBufferingAgentEnabled and is applicable only when buffering agent is enabled, that is when cegBufferingAgentEnabled is 'true'.")
cegBufferDiscardDataTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(30)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegBufferDiscardDataTime.setStatus('current')
if mibBuilder.loadTexts: cegBufferDiscardDataTime.setDescription('This object specifies the duration for which the buffering agent waits before discarding a buffer. The discard timer begins when a packet is enqueued in the allocated buffer for a bearer. Whenever a packet is enqueued for a bearer, the discard timer is reset. If the timer expires, then the buffer is freed.')
cegBufferMaxPacketsPerBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 2, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(5)).setUnits('packet').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegBufferMaxPacketsPerBuffer.setStatus('current')
if mibBuilder.loadTexts: cegBufferMaxPacketsPerBuffer.setDescription('This object specifies the maximum number of packets allowed per buffer in buffering agent. Any new incoming packet after this value has reached its maximum will be dropped.')
cegVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegVersion.setStatus('current')
if mibBuilder.loadTexts: cegVersion.setDescription('This object represents the current version of the PGW or SGW software running on the gateway. Display format: <software> : <version>:<release>.')
cegActivatedIpv4Bearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 2), Gauge32()).setUnits('bearer').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedIpv4Bearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedIpv4Bearers.setDescription('This object represents the total activated IPv4 GTPv2 bearers.')
cegActivatedIpv6Bearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 3), Gauge32()).setUnits('bearer').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedIpv6Bearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedIpv6Bearers.setDescription('This object represents the total activated IPv6 GTPv2 bearers.')
cegTotalUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalUsers.setStatus('current')
if mibBuilder.loadTexts: cegTotalUsers.setDescription('This object represents the total number of users connected to the gateway.')
cegTotalIdleUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 5), Gauge32()).setUnits('Users').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalIdleUsers.setStatus('current')
if mibBuilder.loadTexts: cegTotalIdleUsers.setDescription('This object represents the total number of users currently in ISR state in the gateway.')
cegTotalSuspendedUsers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalSuspendedUsers.setStatus('current')
if mibBuilder.loadTexts: cegTotalSuspendedUsers.setDescription('This object represents the total number of users suspended by the gateway. A user would be suspended when E-UTRAN coverage is overlapped by either GERAN or UTRAN coverage leading to a Circuit Switch fallback from E-UTRAN. The Circuit Switch fallback enables reuse of voice and other Circuit Switch services by reuse of the Circuit Switch infrastructure.')
cegActivatedIpv4v6Sessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 7), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedIpv4v6Sessions.setStatus('current')
if mibBuilder.loadTexts: cegActivatedIpv4v6Sessions.setDescription('This object represents the total number of activated IPv4v6 sessions.')
cegActivatedIpv4v6Bearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 10), Gauge32()).setUnits('bearers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedIpv4v6Bearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedIpv4v6Bearers.setDescription('This object represents the total number of activated IPv4v6 bearers.')
cegActivatedGtpv2SgwSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 11), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedGtpv2SgwSessions.setStatus('current')
if mibBuilder.loadTexts: cegActivatedGtpv2SgwSessions.setDescription('This object represents the total number of activated GTPV2 sessions in SGW mode.')
cegActivatedGtpv2PgwSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 12), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedGtpv2PgwSessions.setStatus('current')
if mibBuilder.loadTexts: cegActivatedGtpv2PgwSessions.setDescription('This object represents the total number of activated GTPV2 sessions in PGW mode.')
cegActivatedGtpv2SPgwSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 13), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedGtpv2SPgwSessions.setStatus('current')
if mibBuilder.loadTexts: cegActivatedGtpv2SPgwSessions.setDescription('This object represents the total number of activated GTPV2 sessions in SP GW mode.')
cegOverloadProtectionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8))
cegCongestionDfpWeight = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionDfpWeight.setStatus('current')
if mibBuilder.loadTexts: cegCongestionDfpWeight.setDescription('This object represents the DFP weight value, which is the measure of the load on CPU in the gateway.')
cegCongestionStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("low", 2), ("high", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionStatus.setStatus('current')
if mibBuilder.loadTexts: cegCongestionStatus.setDescription('This object represents the gateway congestion status. normal - The gateway is not in a congestion state. At this state, the value of cegCongestionDfpWeight is less than value of cegCongestionLowThreshold. low - The gateway is running in low congestion state. At this state, the value of cegCongestionDfpWeight is more than value of cegCongestionLowThreshold but less than value of cegCongestionHighThreshold. high - The gateway is running in high congestion state. At this state, the value of cegCongestionDfpWeight is more than value of cegCongestionHighThreshold.')
cegCongestionLowLastOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionLowLastOccurTime.setStatus('current')
if mibBuilder.loadTexts: cegCongestionLowLastOccurTime.setDescription('This object represents the timestamp at which low congestion last occurred on the gateway.')
cegCongestionLowLastDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionLowLastDuration.setStatus('current')
if mibBuilder.loadTexts: cegCongestionLowLastDuration.setDescription('This object represents the duration of last low congestion.')
cegCongestionHighLastOccurTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionHighLastOccurTime.setStatus('current')
if mibBuilder.loadTexts: cegCongestionHighLastOccurTime.setDescription('This object represents the timestamp at which high congestion last occurred on the gateway.')
cegCongestionHighLastDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 8, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cegCongestionHighLastDuration.setStatus('current')
if mibBuilder.loadTexts: cegCongestionHighLastDuration.setDescription('This object represents the duration of the last high congestion.')
cegBufferStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 9))
cegActivatedBearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 14), Gauge32()).setUnits('Bearers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedBearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedBearers.setDescription('This object represents the total number of default and dedicated bearers currently active in the Gateway.')
cegActivatedDedicatedBearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 15), Gauge32()).setUnits('Bearers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedDedicatedBearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedDedicatedBearers.setDescription('This object represents the total number of dedicated bearers currently active in the Gateway.')
cegActivatedIpv4DedicatedBearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 16), Gauge32()).setUnits('Bearers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedIpv4DedicatedBearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedIpv4DedicatedBearers.setDescription('This object represents the total number of IPv4 dedicated bearers currently active in the Gateway.')
cegActivatedIpv6DedicatedBearers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 17), Gauge32()).setUnits('Bearers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegActivatedIpv6DedicatedBearers.setStatus('current')
if mibBuilder.loadTexts: cegActivatedIpv6DedicatedBearers.setDescription('This object represents the total number of IPv6 dedicated bearers currently active in the Gateway.')
cegTotalIdleSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 18), Gauge32()).setUnits('Sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalIdleSessions.setStatus('current')
if mibBuilder.loadTexts: cegTotalIdleSessions.setDescription('This object represents the total number of sessions currently in Idle state in the gateway.')
cegTotalInUseBuffers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 9, 1), Gauge32()).setUnits('buffer').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalInUseBuffers.setStatus('current')
if mibBuilder.loadTexts: cegTotalInUseBuffers.setDescription('This object represents the total number of buffers currently allocated for the bearers, by buffering agents.')
cegTotalBufferedPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 9, 2), Gauge32()).setUnits('packet').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalBufferedPackets.setStatus('current')
if mibBuilder.loadTexts: cegTotalBufferedPackets.setDescription('This object represents the total number of packets buffered at present in the buffers of buffering agents.')
cegTotalBufferedBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 9, 3), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalBufferedBytes.setStatus('current')
if mibBuilder.loadTexts: cegTotalBufferedBytes.setDescription('This object represents the total number of bytes buffered at present in the buffers of buffering agents.')
cegTotalBufferAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 3, 9, 4), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cegTotalBufferAvailable.setStatus('current')
if mibBuilder.loadTexts: cegTotalBufferAvailable.setDescription('This object represents the total unallocated bytes at buffering agents.')
cegCongestionHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 4, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegCongestionHighNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cegCongestionHighNotifEnable.setDescription("The object controls the generation of cegCongestionHighThresholdNotif as follows: 'true(1)' - the generation of cegCongestionHighThresholdNotif notifications is enabled. 'false(2)' - the generation of cegCongestionHighThresholdNotif notifications is disabled.")
cegCongestionLowNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 4, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegCongestionLowNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cegCongestionLowNotifEnable.setDescription("The object controls the generation of cegCongestionLowThresholdNotif as follows: 'true(1)' - the generation of cegCongestionLowThresholdNotif notifications is enabled. 'false(2)' - the generation of cegCongestionLowThresholdNotif notifications is disabled.")
cegCongestionClearNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 731, 1, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cegCongestionClearNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cegCongestionClearNotifEnable.setDescription("The object controls the generation of cegCongestionClearedNotif as follows: 'true(1)' - the generation of cegCongestionClearedNotif notifications is enabled. 'false(2)' - the generation of cegCongestionClearedNotif notifications is disabled.")
cegCongestionHighThresholdNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 731, 0, 1)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegVersion"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionDfpWeight"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionStatus"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighThreshold"))
if mibBuilder.loadTexts: cegCongestionHighThresholdNotif.setStatus('current')
if mibBuilder.loadTexts: cegCongestionHighThresholdNotif.setDescription('This notification will be sent when the gateway congestion level goes above cegCongestionHighThreshold value. This gives an indication that the gateway is running at high congestion and at this state it would reject all new calls.')
cegCongestionLowThresholdNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 731, 0, 2)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegVersion"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionDfpWeight"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionStatus"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowThreshold"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighThreshold"))
if mibBuilder.loadTexts: cegCongestionLowThresholdNotif.setStatus('current')
if mibBuilder.loadTexts: cegCongestionLowThresholdNotif.setDescription('This notification will be sent when the gateway congestion level goes above cegCongestionLowThreshold value. This gives an indication that the gateway is running at low congestion at this state it can accept only the high priority calls and those with a lower priority would be rejected.')
cegCongestionClearedNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 731, 0, 3)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegVersion"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionDfpWeight"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionStatus"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowThreshold"))
if mibBuilder.loadTexts: cegCongestionClearedNotif.setStatus('current')
if mibBuilder.loadTexts: cegCongestionClearedNotif.setDescription('This notification will be sent when the gateway congestion level goes below cegCongestionLowThreshold value. This gives an indication that the gateway has recovered from congestion and it can accept all calls.')
ciscoEpcGatewayMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 3))
ciscoEpcGatewayMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 1))
ciscoEpcGatewayMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2))
ciscoEpcGatewayMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 1, 1)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifMgmtGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatusGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpcGatewayMIBCompliance = ciscoEpcGatewayMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEpcGatewayMIBCompliance.setDescription('The compliance statement is for the entities which implement CISCO-EPC-GATEWAY-MIB. This is deprecated by ciscoEpcGatewayMIBComplianceRev1.')
ciscoEpcGatewayMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 1, 2)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifMgmtGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrpSup1"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatusGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpcGatewayMIBComplianceRev1 = ciscoEpcGatewayMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEpcGatewayMIBComplianceRev1.setDescription('The compliance statement is for the entities which implement CISCO-EPC-GATEWAY-MIB. This is deprecated by ciscoEpcGatewayMIBComplianceRev2.')
ciscoEPCGatewayMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 1, 3)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifMgmtGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrpSup1"), ("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrpSup2"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatusGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEPCGatewayMIBComplianceRev2 = ciscoEPCGatewayMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEPCGatewayMIBComplianceRev2.setDescription('The compliance statement is for the entities which implement CISCO-EPC-GATEWAY-MIB. This is superceded by ciscoEpcGatewayMIBComplianceRev3.')
ciscoEpcGatewayMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 1, 4)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifMgmtGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegOverloadProtectionNotifGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrpSup1"), ("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrpSup2"), ("CISCO-EPC-GATEWAY-MIB", "cegSystemStatusGrpSup3"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatsGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentConfigGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatusGrp"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentStatsGrpSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEpcGatewayMIBComplianceRev3 = ciscoEpcGatewayMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoEpcGatewayMIBComplianceRev3.setDescription('The compliance statement is for the entities which implement CISCO-EPC-GATEWAY-MIB.')
cegSystemStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 1)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegVersion"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedIpv4Bearers"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedIpv6Bearers"), ("CISCO-EPC-GATEWAY-MIB", "cegTotalUsers"), ("CISCO-EPC-GATEWAY-MIB", "cegTotalSuspendedUsers"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedIpv4v6Sessions"), ("CISCO-EPC-GATEWAY-MIB", "cegTotalIdleUsers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegSystemStatusGrp = cegSystemStatusGrp.setStatus('current')
if mibBuilder.loadTexts: cegSystemStatusGrp.setDescription('This group has a collection of objects to provide the system status.')
cegOverloadProtectionStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 2)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegCongestionIncomingReqDrops"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighThresholdReached"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowThresholdReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegOverloadProtectionStatsGrp = cegOverloadProtectionStatsGrp.setStatus('current')
if mibBuilder.loadTexts: cegOverloadProtectionStatsGrp.setDescription('This group has a collection of objects to provide the overload protection statistics.')
cegBufferingAgentStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 3)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegBuffersCreated"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferPacketsEnqueued"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferBytesEnqueued"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferPacketsDequeued"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferBytesDequeued"), ("CISCO-EPC-GATEWAY-MIB", "cegBuffersDeleted"), ("CISCO-EPC-GATEWAY-MIB", "cegBuffersTimedOut"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferRejMemUnavailable"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferRejLowMem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegBufferingAgentStatsGrp = cegBufferingAgentStatsGrp.setStatus('current')
if mibBuilder.loadTexts: cegBufferingAgentStatsGrp.setDescription('This group has a collection of objects to provide the buffering agent statistics.')
cegOverloadProtectionConfigGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 4)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowThreshold"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegOverloadProtectionConfigGrp = cegOverloadProtectionConfigGrp.setStatus('current')
if mibBuilder.loadTexts: cegOverloadProtectionConfigGrp.setDescription('This group has a collection of objects which configures attributes for overload protection.')
cegBufferingAgentConfigGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 5)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegBufferingAgentEnabled"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferMaxSize"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferDiscardDataTime"), ("CISCO-EPC-GATEWAY-MIB", "cegBufferMaxPacketsPerBuffer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegBufferingAgentConfigGrp = cegBufferingAgentConfigGrp.setStatus('current')
if mibBuilder.loadTexts: cegBufferingAgentConfigGrp.setDescription('This group has a collection of objects which configures the buffering agent.')
cegBufferingAgentStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 6)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegTotalInUseBuffers"), ("CISCO-EPC-GATEWAY-MIB", "cegTotalBufferedPackets"), ("CISCO-EPC-GATEWAY-MIB", "cegTotalBufferedBytes"), ("CISCO-EPC-GATEWAY-MIB", "cegTotalBufferAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegBufferingAgentStatusGrp = cegBufferingAgentStatusGrp.setStatus('current')
if mibBuilder.loadTexts: cegBufferingAgentStatusGrp.setDescription('This group has a collection of objects to provide the buffering agent status.')
cegOverloadProtectionStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 7)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegCongestionDfpWeight"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionStatus"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowLastOccurTime"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowLastDuration"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighLastOccurTime"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighLastDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegOverloadProtectionStatusGrp = cegOverloadProtectionStatusGrp.setStatus('current')
if mibBuilder.loadTexts: cegOverloadProtectionStatusGrp.setDescription('This group has a collection of objects to provide the overload protection status.')
cegOverloadProtectionNotifMgmtGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 8)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighNotifEnable"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowNotifEnable"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionClearNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegOverloadProtectionNotifMgmtGrp = cegOverloadProtectionNotifMgmtGrp.setStatus('current')
if mibBuilder.loadTexts: cegOverloadProtectionNotifMgmtGrp.setDescription('This group has a collection of objects which controls the generation of congestion notification in the system.')
cegOverloadProtectionNotifGrp = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 9)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegCongestionHighThresholdNotif"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionLowThresholdNotif"), ("CISCO-EPC-GATEWAY-MIB", "cegCongestionClearedNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegOverloadProtectionNotifGrp = cegOverloadProtectionNotifGrp.setStatus('current')
if mibBuilder.loadTexts: cegOverloadProtectionNotifGrp.setDescription('This group has a collection of notification which informs about the congestion level in the system.')
cegSystemStatusGrpSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 10)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegActivatedIpv4v6Bearers"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedGtpv2SgwSessions"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedGtpv2PgwSessions"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedGtpv2SPgwSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegSystemStatusGrpSup1 = cegSystemStatusGrpSup1.setStatus('current')
if mibBuilder.loadTexts: cegSystemStatusGrpSup1.setDescription('This group has objects to supplement the cegSystemStatusGrp.')
cegSystemStatusGrpSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 11)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegActivatedBearers"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedDedicatedBearers"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedIpv4DedicatedBearers"), ("CISCO-EPC-GATEWAY-MIB", "cegActivatedIpv6DedicatedBearers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegSystemStatusGrpSup2 = cegSystemStatusGrpSup2.setStatus('current')
if mibBuilder.loadTexts: cegSystemStatusGrpSup2.setDescription('This group has objects to supplement the cegSystemStatusGrp')
cegSystemStatusGrpSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 12)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegTotalIdleSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegSystemStatusGrpSup3 = cegSystemStatusGrpSup3.setStatus('current')
if mibBuilder.loadTexts: cegSystemStatusGrpSup3.setDescription('This group has a collection of objects which provides the details of the EPC Gateway status and supplements the cegSystemStatusGrp.')
cegBufferingAgentStatsGrpSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 731, 3, 2, 13)).setObjects(("CISCO-EPC-GATEWAY-MIB", "cegPacketDropDueToMaxPacketLimit"), ("CISCO-EPC-GATEWAY-MIB", "cegPacketDropDueToMaxBufferLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cegBufferingAgentStatsGrpSup1 = cegBufferingAgentStatsGrpSup1.setStatus('current')
if mibBuilder.loadTexts: cegBufferingAgentStatsGrpSup1.setDescription('This group has a collection of objects to provide the buffering agent statistics related to packet drops based on max limit.')
mibBuilder.exportSymbols("CISCO-EPC-GATEWAY-MIB", cegBufferingAgentStatsGrpSup1=cegBufferingAgentStatsGrpSup1, cegOverloadProtectionStatsGrp=cegOverloadProtectionStatsGrp, cegBufferingAgentConfigGrp=cegBufferingAgentConfigGrp, ciscoEpcGatewayMIBObjects=ciscoEpcGatewayMIBObjects, cegTotalIdleSessions=cegTotalIdleSessions, ciscoEpcGatewayMIBComplianceRev3=ciscoEpcGatewayMIBComplianceRev3, cegCongestionClearedNotif=cegCongestionClearedNotif, cegOverloadProtectionStats=cegOverloadProtectionStats, cegOverloadProtectionConfigGrp=cegOverloadProtectionConfigGrp, ciscoEpcGatewayNotifMgmt=ciscoEpcGatewayNotifMgmt, cegBufferMaxPacketsPerBuffer=cegBufferMaxPacketsPerBuffer, cegActivatedIpv6DedicatedBearers=cegActivatedIpv6DedicatedBearers, cegBufferBytesEnqueued=cegBufferBytesEnqueued, cegActivatedDedicatedBearers=cegActivatedDedicatedBearers, cegBufferingAgentConfig=cegBufferingAgentConfig, cegBufferPacketsDequeued=cegBufferPacketsDequeued, cegCongestionLowThresholdNotif=cegCongestionLowThresholdNotif, cegTotalIdleUsers=cegTotalIdleUsers, ciscoEpcGatewayMIB=ciscoEpcGatewayMIB, cegActivatedIpv4v6Sessions=cegActivatedIpv4v6Sessions, ciscoEpcGatewayMIBCompliances=ciscoEpcGatewayMIBCompliances, cegCongestionLowLastOccurTime=cegCongestionLowLastOccurTime, cegTotalSuspendedUsers=cegTotalSuspendedUsers, cegActivatedGtpv2PgwSessions=cegActivatedGtpv2PgwSessions, cegActivatedIpv4DedicatedBearers=cegActivatedIpv4DedicatedBearers, cegCongestionStatus=cegCongestionStatus, cegOverloadProtectionStatus=cegOverloadProtectionStatus, cegCongestionIncomingReqDrops=cegCongestionIncomingReqDrops, cegBufferDiscardDataTime=cegBufferDiscardDataTime, ciscoEPCGatewayMIBComplianceRev2=ciscoEPCGatewayMIBComplianceRev2, cegBufferRejMemUnavailable=cegBufferRejMemUnavailable, cegActivatedGtpv2SPgwSessions=cegActivatedGtpv2SPgwSessions, cegBufferingAgentStatusGrp=cegBufferingAgentStatusGrp, cegCongestionClearNotifEnable=cegCongestionClearNotifEnable, cegActivatedIpv6Bearers=cegActivatedIpv6Bearers, ciscoEpcGatewayStatus=ciscoEpcGatewayStatus, cegVersion=cegVersion, ciscoEpcGatewayMIBGroups=ciscoEpcGatewayMIBGroups, cegActivatedIpv4Bearers=cegActivatedIpv4Bearers, cegOverloadProtectionNotifGrp=cegOverloadProtectionNotifGrp, cegOverloadProtectionConfig=cegOverloadProtectionConfig, cegTotalInUseBuffers=cegTotalInUseBuffers, cegBufferPacketsEnqueued=cegBufferPacketsEnqueued, cegBufferBytesDequeued=cegBufferBytesDequeued, cegCongestionHighThresholdReached=cegCongestionHighThresholdReached, cegTotalBufferAvailable=cegTotalBufferAvailable, cegActivatedIpv4v6Bearers=cegActivatedIpv4v6Bearers, cegCongestionLowThreshold=cegCongestionLowThreshold, cegCongestionHighLastOccurTime=cegCongestionHighLastOccurTime, cegTotalUsers=cegTotalUsers, cegCongestionHighThresholdNotif=cegCongestionHighThresholdNotif, cegPacketDropDueToMaxBufferLimit=cegPacketDropDueToMaxBufferLimit, ciscoEpcGatewayMIBComplianceRev1=ciscoEpcGatewayMIBComplianceRev1, cegBuffersCreated=cegBuffersCreated, cegSystemStatusGrpSup3=cegSystemStatusGrpSup3, cegBuffersDeleted=cegBuffersDeleted, cegSystemStatusGrp=cegSystemStatusGrp, cegCongestionDfpWeight=cegCongestionDfpWeight, cegCongestionLowNotifEnable=cegCongestionLowNotifEnable, cegOverloadProtectionNotifMgmtGrp=cegOverloadProtectionNotifMgmtGrp, ciscoEpcGatewayStatistics=ciscoEpcGatewayStatistics, cegCongestionLowThresholdReached=cegCongestionLowThresholdReached, ciscoEpcGatewayMIBNotifications=ciscoEpcGatewayMIBNotifications, cegCongestionLowLastDuration=cegCongestionLowLastDuration, cegCongestionHighLastDuration=cegCongestionHighLastDuration, ciscoEpcGatewayMIBConformance=ciscoEpcGatewayMIBConformance, cegBufferRejLowMem=cegBufferRejLowMem, cegCongestionHighThreshold=cegCongestionHighThreshold, cegBufferingAgentEnabled=cegBufferingAgentEnabled, cegCongestionHighNotifEnable=cegCongestionHighNotifEnable, cegActivatedGtpv2SgwSessions=cegActivatedGtpv2SgwSessions, ciscoEpcGatewayConfig=ciscoEpcGatewayConfig, cegTotalBufferedPackets=cegTotalBufferedPackets, ciscoEpcGatewayMIBCompliance=ciscoEpcGatewayMIBCompliance, PYSNMP_MODULE_ID=ciscoEpcGatewayMIB, cegBufferingAgentStatsGrp=cegBufferingAgentStatsGrp, cegBuffersTimedOut=cegBuffersTimedOut, cegBufferStats=cegBufferStats, cegSystemStatusGrpSup1=cegSystemStatusGrpSup1, cegOverloadProtectionStatusGrp=cegOverloadProtectionStatusGrp, cegBufferStatus=cegBufferStatus, cegTotalBufferedBytes=cegTotalBufferedBytes, cegSystemStatusGrpSup2=cegSystemStatusGrpSup2, cegActivatedBearers=cegActivatedBearers, cegBufferMaxSize=cegBufferMaxSize, cegPacketDropDueToMaxPacketLimit=cegPacketDropDueToMaxPacketLimit)
