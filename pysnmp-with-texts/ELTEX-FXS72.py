#
# PySNMP MIB module ELTEX-FXS72 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-FXS72
# Produced by pysmi-0.3.4 at Wed May  1 13:00:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
elHardware, = mibBuilder.importSymbols("ELTEX-SMI-ACTUAL", "elHardware")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, Bits, TimeTicks, MibIdentifier, Integer32, IpAddress, NotificationType, Counter32, Unsigned32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "TimeTicks", "MibIdentifier", "Integer32", "IpAddress", "NotificationType", "Counter32", "Unsigned32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64")
TruthValue, DisplayString, TimeInterval, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeInterval", "RowStatus", "TimeStamp", "TextualConvention")
fxs72 = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 9))
fxs72.setRevisions(('2009-10-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fxs72.setRevisionsDescriptions(('last revision',))
if mibBuilder.loadTexts: fxs72.setLastUpdated('200910190000Z')
if mibBuilder.loadTexts: fxs72.setOrganization('Eltex Co')
if mibBuilder.loadTexts: fxs72.setContactInfo(' eltex@gcom.ru ')
if mibBuilder.loadTexts: fxs72.setDescription('fxs72 mib')
class SSwStatusConv(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("connected", 1), ("disconnected", 2))

class VoltageMode(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("high", 1), ("normal", 2), ("low", 3))

class FXSFanState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("off", 0), ("on", 1))

class BoolValue(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class DevTypeString(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 17, 33, 50))
    namedValues = NamedValues(("fxs72", 16), ("tau72", 17), ("tau36", 33), ("tau32m", 50))

class FxsPortState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))
    namedValues = NamedValues(("hangdown", 0), ("hangup", 1), ("dial", 2), ("calling", 3), ("ringback", 4), ("ringing", 5), ("talking", 6), ("busy", 7), ("hold", 8), ("holdDial", 9), ("dvo", 10), ("test", 11), ("blocked", 12), ("preCalling", 13), ("conference3way", 14), ("void", 15), ("fxoHangdown", 16), ("fxoHangup", 17), ("disabled", 255))

class PortMegacoState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 255))
    namedValues = NamedValues(("hangdown", 0), ("hangup", 1), ("dial", 2), ("calling", 3), ("ringback", 4), ("ringing", 5), ("talking", 6), ("busy", 7), ("hold", 8), ("holdDial", 9), ("holdDvo", 10), ("transfer", 11), ("unattended", 12), ("blocked", 13), ("ready", 14), ("notInited", 15), ("disabled", 16), ("absent", 17), ("noActualData", 255))

class PortMegacoJitter(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("ok", 0), ("leakageCurrent", 1), ("overheating", 2), ("dissipatedPower", 3))

class SipConnectState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("ok", 1), ("failed", 2))

class FxsDialPlanType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("h323GateKeeper", 1), ("sipProxy", 2), ("h323DirectIP", 3), ("sipDirectIP", 4), ("siptDirectIP", 5), ("pickupGroup", 6))

class FxsAON(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("off", 0), ("aonRus", 1), ("dtmf", 2), ("fskBell202", 3), ("fskV23", 4))

class FxsGroupSerialType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("group", 0), ("serial", 1), ("cyclic", 2))

class FxoGroupType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(3, 4))
    namedValues = NamedValues(("fxoFirstFree", 3), ("fxoAround", 4))

class FxsGroupBusyType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clearOnBusy", 0), ("waitFirstFree", 1))

class FxsGroupSerialEnableType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class FxsTaxophoneType(TextualConvention, Integer32):
    description = '0-3 for TAU72,36; 0-1 for TAU32M (from v2.8) 0-3 for TAU32M-revB (from 2.10)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("polarity", 1), ("kHz16", 2), ("kHz12", 3))

class FxsDialPlanNatureType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("subscriber", 1), ("national", 2), ("international", 3))

class FxsProcessFlashType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("transmitFlash", 0), ("attendedCT", 1), ("unattendedCT", 2), ("noDetectFlash", 3), ("localCT", 4))

class TauDialProtocolType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sip", 1), ("h323", 2))

class ProxyMode(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("parking", 1), ("homing", 2))

class OptionsHomeServerTest(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invite", 0), ("options", 1), ("register", 2))

class AuthenticationType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("global", 1), ("userDefined", 2))

class CwRingbackRingbackAtCallwaiting(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ring180Ringing", 0), ("ring182Queued", 1))

class RemoteRingback(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("dontSendRingbackInRTP", 0), ("ringbackWith180Ringing", 1), ("ringbackWith183Progress", 2))

class DTMFMIMEType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("applicationDtmfRelay", 0), ("applicationDtmf", 1), ("audioTelephoneEvent", 2))

class HookFlashMIMEType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("asDTMF", 0), ("applicationHookFlash", 1), ("applicationBroadsoft", 2), ("applicationSscc", 3))

class TypeTransport(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("udpPrefferedOrTcp", 0), ("tcpPrefferedOrUdp", 1), ("udpOnly", 2), ("tcpOnly", 3))

class Type100rel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("supported", 0), ("required", 1), ("off", 2))

class OutboundType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("withBusyTone", 2))

class FxoDialingType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dtmf", 1), ("pulse", 2))

class FxsToneParametrs(TextualConvention, OctetString):
    description = ' X;Z(A/B/1) X,Y;Z(A/B/1) X,Y;Z(A/B/1+2) X,Y;Z(A/B/2) X - frequency 1 Y - frequency 2 (set X=Y to use only one frequency) Z - number of parcels needed for signal detection (for ringback and busy) A - signal duration B - pause duration '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class TauDtmfTransferType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inband", 0), ("rfc2833", 1), ("info", 2))

class TauFlashTransferType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("disabled", 0), ("rfc2833", 1), ("info", 2))

class TauFaxDirectionType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("both", 0), ("caller", 1), ("callee", 2), ("none", 3))

class TauFaxTransferType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("t38", 2))

class TauFaxTransferSlaveType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("g711a", 0), ("g711u", 1), ("t38", 2), ("none", 3))

class TauModemTransferType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("g711aVbd", 0), ("g711uVbd", 1), ("g711aRfc3108", 2), ("g711uRfc3108", 3), ("off", 4), ("g711aNse", 5), ("g711uNse", 6))

class TauVoiceModeType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("fixed", 0), ("adaptive", 1))

class TauvoiceDeletionModeType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("hard", 0), ("soft", 1))

class TauTrapVersion(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("v1", 1), ("v2", 2))

class TauMegacoTrapVersion(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("inform", 0), ("trapV1", 1), ("trapV2", 2))

class TauUserViewType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("readOnly", 1), ("readWrite", 2))

class FxoGroupBusyType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clearOnBusy", 0), ("waitFirstFree", 1))

class FxsNetworkAutoupdateSourceType(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("dhcp", 0), ("dhcpVlan1", 1), ("dhcpVlan2", 2), ("dhcpVlan3", 3), ("noDhcp", 4))

class SipLogLevel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("none", -1), ("fatalErrors", 0), ("criticalErrors", 1), ("nonCriticalErrors", 2), ("warnings", 3), ("verbose1", 4), ("signalProtocol", 5), ("verbose2", 6), ("mediaProtocol", 7), ("verobse3", 8), ("everything", 9))

class H323LogLevel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("errors", 1), ("warnings", 2), ("info", 3), ("debugA", 4), ("debugB", 5), ("debugC", 6))

class VapiLibLogLevel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("api", 1), ("apiPacket", 2), ("vapiInfo", 3), ("vapiGtlInfo", 4), ("vapiUt", 5), ("allInfo", 6))

class VapiAppLogLevel(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 4, 3, 2, 1))
    namedValues = NamedValues(("none", 5), ("warnings", 4), ("packet", 3), ("debug", 2), ("info", 1))

class FxsPortTestStatus(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))
    namedValues = NamedValues(("idle", 0), ("requested", 1), ("completed", 2), ("disabled", 255))

class FxsPortTestFlag(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 255))
    namedValues = NamedValues(("unknown", -1), ("ok", 0), ("overheat", 1), ("leakageCurrent", 2), ("resistanceNotMeasured", 3), ("capacitanceNotMeasured", 4), ("testingUnavailable", 5), ("testFailure", 255))

class KeepAliveMode(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("options", 1), ("notify", 2), ("clrf", 3))

class ConferenceMode(TextualConvention, Integer32):
    description = 'TAU-SIP 2.8'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("local", 0), ("remote", 1))

class GroupRegistrationState(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("ok", 1), ("failed", 2))

class FirewallProtocol(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("any", 0), ("udp", 1), ("tcp", 2), ("icmp", 3))

class TypeOfMessageICMP(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("any", 0), ("echoReply", 1), ("destinationUnreachable", 2), ("networkUnreachable", 3), ("hostUnreachable", 4), ("protocolUnreachable", 5), ("portUnreachable", 6), ("fragmentationNeeded", 7), ("sourceRouteFailed", 8), ("networkUnknown", 9), ("hostUnknown", 10), ("networkProhibited", 11), ("hostProhibited", 12), ("tosNetworkUnreachable", 13), ("tosHostUnreachable", 14), ("communicationProhibited", 15), ("hostPrecedenceViolation", 16), ("precedenceCutoff", 17), ("sourceQuench", 18), ("redirect", 19), ("networkRedirect", 20), ("hostRedirect", 21), ("tosNetworkRedirect", 22), ("tosHostRedirect", 23), ("echoRequest", 24), ("routerAdvertisement", 25), ("routerSolicitation", 26), ("timeExceeded", 27), ("ttlZeroDuringTransit", 28), ("ttlZeroDuringReassembly", 29), ("parameterProblem", 30), ("ipHeaderBad", 31), ("requiredOptionMissing", 32), ("timestampRequest", 33), ("timestampReply", 34), ("addressMaskRequest", 35), ("addressMaskReply", 36))

class FirewallTarget(TextualConvention, Integer32):
    description = 'TAU-SIP 2.7'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("drop", 0), ("accept", 1), ("reject", 2))

class ReversalPolarityAction(TextualConvention, Integer32):
    description = 'TAU-SIP 2.9'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ignore", 0), ("release", 1), ("answer", 2))

class CallLimitType(TextualConvention, Integer32):
    description = 'TAU-SIP 2.9'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("proxyGk", 0), ("host", 1))

class PowerMode(TextualConvention, Integer32):
    description = 'TAU-SIP 2.9. added for TAU-32M-revB (TAU-32M_1v5)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("extendedRange", 1))

class DRSubscriberProfilesType(TextualConvention, OctetString):
    description = 'TAU-SIP 2.9 set 01 = 00000001 to enable Profile1 set 03 = 00000011 to enable Profile2 and Profile1 set 80 = 10000000 to enable Profile8'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class PstnActivityType(TextualConvention, Integer32):
    description = 'TAU-SIP 2.9'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("releaseAtPstnReversalPolarityDetection", 1), ("answerAtPstnReversalPolarityDetection", 2), ("pstnAnswerDetection", 3))

class IMSMode(TextualConvention, Integer32):
    description = 'IMS notify mode TAU-SIP 2.10'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("implicit", 1), ("explicit", 2))

class AutoupdateProtocolType(TextualConvention, Integer32):
    description = 'TAU-SIP 2.12'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("tftp", 0), ("ftp", 1), ("http", 2), ("https", 3))

class SipProfileChangeoverType(TextualConvention, Integer32):
    description = 'TAU-SIP 2.12'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("changeoverOnFailureOfInviteOrRegisterRequest", 0), ("changeoverOnFailureOfRegisterRequest", 1))

class DevPowerType(TextualConvention, Integer32):
    description = 'Power type. TAU-SIP 2.13'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ac", 1), ("dc", 2))

fxsDevName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDevName.setStatus('current')
if mibBuilder.loadTexts: fxsDevName.setDescription("PBX name 'fxs72'")
fxsDevType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 2), DevTypeString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDevType.setStatus('current')
if mibBuilder.loadTexts: fxsDevType.setDescription('device type')
fxsDevCfgBuild = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDevCfgBuild.setStatus('current')
if mibBuilder.loadTexts: fxsDevCfgBuild.setDescription('os build string: compiling data and other info')
fxsFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsFreeSpace.setStatus('current')
if mibBuilder.loadTexts: fxsFreeSpace.setDescription('percent of free blocks on flash disk')
fxsFreeRam = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsFreeRam.setStatus('current')
if mibBuilder.loadTexts: fxsFreeRam.setDescription('free RAM (bytes)')
fxsSSwStatus = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 6), SSwStatusConv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSSwStatus.setStatus('current')
if mibBuilder.loadTexts: fxsSSwStatus.setDescription('Softswitch status')
fxsSSwStatusTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSSwStatusTime.setStatus('current')
if mibBuilder.loadTexts: fxsSSwStatusTime.setDescription('How long in current state')
fxsCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fxsCpuUsage.setDescription('Total CPU usage (%)')
fxsMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10))
fxsMonitoringVMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 1), VoltageMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVMode.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringVMode.setDescription(' ')
fxsMonitoringVBat = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 2), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVBat.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringVBat.setDescription(' ')
fxsMonitoringVRing1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 3), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVRing1.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringVRing1.setDescription(' ')
fxsMonitoringVRing2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 4), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVRing2.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringVRing2.setDescription(' ')
fxsMonitoringTemp1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 5), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp1.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringTemp1.setDescription(' ')
fxsMonitoringTemp2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 6), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp2.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringTemp2.setDescription(' ')
fxsMonitoringTemp3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 7), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp3.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringTemp3.setDescription(' ')
fxsMonitoringTemp4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 8), Integer32()).setUnits('Ã\x82Â°C').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringTemp4.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringTemp4.setDescription(' ')
fxsMonitoringFanState = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 9), FXSFanState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringFanState.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringFanState.setDescription(' ')
fxsMonitoringFan1Rotate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 10), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringFan1Rotate.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringFan1Rotate.setDescription(' ')
fxsMonitoringFan2Rotate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 11), BoolValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringFan2Rotate.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringFan2Rotate.setDescription(' ')
fxsMonitoringSubCooling = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringSubCooling.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringSubCooling.setDescription(' ')
fxsMonitoringVinput = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 13), Integer32()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringVinput.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringVinput.setDescription(' added for TAU-32M ')
fxsMonitoringDevicePower = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 10, 14), DevPowerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsMonitoringDevicePower.setStatus('current')
if mibBuilder.loadTexts: fxsMonitoringDevicePower.setDescription('Power: AC, DC')
fxsPortsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortsMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: fxsPortsMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
fxsPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12))
fxsPortsMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1), )
if mibBuilder.loadTexts: fxsPortsMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: fxsPortsMonitoringTable.setDescription(' ')
fxsPortsMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: fxsPortsMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: fxsPortsMonitoringEntry.setDescription(' ')
fxsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: fxsPortNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortNumber.setDescription('fxs port number TAU-SIP')
fxsPortPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortPhoneNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortPhoneNumber.setDescription('fxs port phone number TAU-SIP')
fxsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 3), FxsPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortState.setStatus('current')
if mibBuilder.loadTexts: fxsPortState.setDescription('fxs port state TAU-SIP')
fxsPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortUserName.setStatus('current')
if mibBuilder.loadTexts: fxsPortUserName.setDescription('fxs port user name TAU-SIP')
fxsPortTalkingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortTalkingNum.setStatus('current')
if mibBuilder.loadTexts: fxsPortTalkingNum.setDescription('Current phone number of remote party TAU-SIP')
fxsPortTalkingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortTalkingStartTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortTalkingStartTime.setDescription('start talking time TAU-SIP')
fxsPortSipConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnected.setStatus('current')
if mibBuilder.loadTexts: fxsPortSipConnected.setDescription('time of last sip connect TAU-SIP')
fxsPortH323Connected = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortH323Connected.setStatus('current')
if mibBuilder.loadTexts: fxsPortH323Connected.setDescription('time since h323 connect TAU-SIP')
fxsPortSipConnecteNext = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnecteNext.setStatus('current')
if mibBuilder.loadTexts: fxsPortSipConnecteNext.setDescription('time of next sip connect TAU-SIP')
fxsPortSipConnecteState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 10), SipConnectState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnecteState.setStatus('current')
if mibBuilder.loadTexts: fxsPortSipConnecteState.setDescription('sip connect state TAU-SIP')
fxsPortSipConnectHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortSipConnectHost.setStatus('current')
if mibBuilder.loadTexts: fxsPortSipConnectHost.setDescription('sip connect host. TAU-SIP 2.7')
fxsPortsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2), )
if mibBuilder.loadTexts: fxsPortsConfigTable.setStatus('current')
if mibBuilder.loadTexts: fxsPortsConfigTable.setDescription(' ')
fxsPortsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: fxsPortsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: fxsPortsConfigEntry.setDescription(' ')
fxsPortConfigPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPhone.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPhone.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUserName.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigUserName.setDescription(' ')
fxsPortConfigAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAuthName.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigAuthName.setDescription(' ')
fxsPortConfigAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAuthPass.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigAuthPass.setDescription(' ')
fxsPortConfigCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCustom.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCustom.setDescription(' ')
fxsPortConfigPlaymoh = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPlaymoh.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPlaymoh.setDescription(' ')
fxsPortConfigAON = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 7), FxsAON()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAON.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigAON.setDescription(' ')
fxsPortConfigAONHideDate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAONHideDate.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigAONHideDate.setDescription(' ')
fxsPortConfigAONHideName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAONHideName.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigAONHideName.setDescription(' ')
fxsPortConfigTaxophone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 10), FxsTaxophoneType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigTaxophone.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigTaxophone.setDescription(' ')
fxsPortConfigMinFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigMinFlashtime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigMinFlashtime.setDescription('70-2000(from v2.8),1000(to v2.7)')
fxsPortConfigMaxFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigMaxFlashtime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigMaxFlashtime.setDescription('70-2000(from v2.8),1000(to v2.7)')
fxsPortConfigGainr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigGainr.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigGainr.setDescription(' ')
fxsPortConfigGaint = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigGaint.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigGaint.setDescription(' ')
fxsPortConfigCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCategory.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCategory.setDescription(' ')
fxsPortConfigCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 16), FxsProcessFlashType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCallTransfer.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCallTransfer.setDescription(' ')
fxsPortConfigCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCallWaiting.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCallWaiting.setDescription(' ')
fxsPortConfigHotLine = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigHotLine.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigHotLine.setDescription(' ')
fxsPortConfigHotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigHotNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigHotNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigHotTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigHotTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigHotTimeout.setDescription(' ')
fxsPortConfigDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDisabled.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDisabled.setDescription(' ')
fxsPortConfigCtBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtBusy.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCtBusy.setDescription(' ')
fxsPortConfigCtUnconditional = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtUnconditional.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCtUnconditional.setDescription(' ')
fxsPortConfigCtNoanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtNoanswer.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCtNoanswer.setDescription(' ')
fxsPortConfigCtNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtNumber.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCtNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigCtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCtTimeout.setDescription(' ')
fxsPortConfigClir = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigClir.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigClir.setDescription(' ')
fxsPortConfigStopDial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigStopDial.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigStopDial.setDescription(' ')
fxsPortConfigAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigAltNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigAltNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigUseAltNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUseAltNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigUseAltNumber.setDescription(' ')
fxsPortConfigPickUp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPickUp.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPickUp.setDescription(' ')
fxsPortConfigSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigSipPort.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigSipPort.setDescription(' ')
fxsPortConfigCfgPriOverCw = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfgPriOverCw.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCfgPriOverCw.setDescription(' ')
fxsPortConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 34), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsPortConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigRowStatus.setDescription(' we will save all our fixes when Commit set to 1 ')
fxsPortConfigDvoCwEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCwEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoCwEn.setDescription(' ')
fxsPortConfigDvoCtAttendedEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCtAttendedEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoCtAttendedEn.setDescription(' ')
fxsPortConfigDvoCtUnattendedEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCtUnattendedEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoCtUnattendedEn.setDescription(' ')
fxsPortConfigDvoUnconditionalEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoUnconditionalEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoUnconditionalEn.setDescription(' ')
fxsPortConfigDvoCfBusyEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCfBusyEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoCfBusyEn.setDescription(' ')
fxsPortConfigDvoCfAnswerEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCfAnswerEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoCfAnswerEn.setDescription(' ')
fxsPortConfigDvoCfServiceEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoCfServiceEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoCfServiceEn.setDescription(' ')
fxsPortConfigDvoDoDisturbEn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDvoDoDisturbEn.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDvoDoDisturbEn.setDescription(' ')
fxsPortConfigCtOutofservice = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCtOutofservice.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCtOutofservice.setDescription(' ')
fxsPortConfigCfuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfuNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCfuNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigCfbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfbNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCfbNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigCfnrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 46), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfnrNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCfnrNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigCfoosNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCfoosNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCfoosNumber.setDescription('allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigDnd = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 48), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDnd.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDnd.setDescription(' ')
fxsPortConfigFxoFlashTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoFlashTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigFxoFlashTime.setDescription('70 1000 def 300 ms')
fxsPortConfigFxoDelTdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoDelTdm.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigFxoDelTdm.setDescription('100 1000 def 200 ms')
fxsPortConfigFxoRingtdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoRingtdm.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigFxoRingtdm.setDescription('2 10 def 2')
fxsPortConfigPstnNumberprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 52), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnNumberprefix.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPstnNumberprefix.setDescription('max len 20. allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigPstnNameprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnNameprefix.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPstnNameprefix.setDescription('max len 20')
fxsPortConfigUsePstnCid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUsePstnCid.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigUsePstnCid.setDescription(' ')
fxsPortConfigtdmhotline = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigtdmhotline.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigtdmhotline.setDescription(' ')
fxsPortConfigtdmhottimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigtdmhottimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigtdmhottimeout.setDescription('0 300 def 15. FXO only')
fxsPortConfigtdmhotnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigtdmhotnumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigtdmhotnumber.setDescription('max len 30. allowed symbols 0-9A-Za-z*#_+!~$-')
fxsPortConfigEnableCpc = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigEnableCpc.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigEnableCpc.setDescription('def false')
fxsPortConfigCpcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCpcTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCpcTime.setDescription('200-600 ms def 200')
fxsPortConfigDontDetectDT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDontDetectDT.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDontDetectDT.setDescription('def false')
fxsPortConfigDelayDialingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDelayDialingTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDelayDialingTimeout.setDescription('0-10 ms def 2')
fxsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsPortType.setStatus('current')
if mibBuilder.loadTexts: fxsPortType.setDescription('FXS, FXO, NONE')
fxsPortConfigDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 63), FxoDialingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDialing.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDialing.setDescription(' ')
fxsPortConfigTransmitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 64), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigTransmitNumber.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigTransmitNumber.setDescription(' ')
fxsPortConfigDontTransmitPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDontTransmitPrefix.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDontTransmitPrefix.setDescription(' ')
fxsPortConfigPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPortProfileID.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPortProfileID.setDescription(' ')
fxsPortConfigSipProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigSipProfileID.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigSipProfileID.setDescription(' ')
fxsPortConfigDialToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 68), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDialToneDetectionParameters.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDialToneDetectionParameters.setDescription('FXO only')
fxsPortConfigRingBackToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 69), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigRingBackToneDetectionParameters.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigRingBackToneDetectionParameters.setDescription('FXO only')
fxsPortConfigBusyToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 70), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigBusyToneDetectionParameters.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigBusyToneDetectionParameters.setDescription('FXO only')
fxsPortConfigDtDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDtDetectTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDtDetectTime.setDescription(' ')
fxsPortConfigDecadePulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDecadePulseTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDecadePulseTime.setDescription(' ')
fxsPortConfigDecadePauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDecadePauseTime.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDecadePauseTime.setDescription(' ')
fxsPortConfigNoOffhookAtRinging = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigNoOffhookAtRinging.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigNoOffhookAtRinging.setDescription('only for FXO')
fxsPortConfigFxoCallBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoCallBusy.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigFxoCallBusy.setDescription("only for FXO. Send '503 Service unavailable' on busy (SIP)")
fxsPortConfigCpcRus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCpcRus.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigCpcRus.setDescription('1..10 or 0 (off)')
fxsPortConfigReversalPolarityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 77), ReversalPolarityAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigReversalPolarityAction.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigReversalPolarityAction.setDescription('only for FXO. TAU-SIP 2.9. Deprecated by PstnActivity')
fxsPortConfigPstnActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 78), PstnActivityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnActivity.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPstnActivity.setDescription('only for FXO. TAU-SIP 2.9. pstn_200_at_answer')
fxsPortConfigPstnRbDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigPstnRbDetectTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigPstnRbDetectTimeout.setDescription('only for FXO. TAU-SIP 2.9')
fxsPortConfigDetectFxoLinePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 80), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigDetectFxoLinePresence.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigDetectFxoLinePresence.setDescription('only for FXO. TAU-SIP 2.10')
fxsPortConfigBlockFxoLineInOutgoingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 81), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigBlockFxoLineInOutgoingDirection.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigBlockFxoLineInOutgoingDirection.setDescription('only for FXO. TAU-SIP 2.10')
fxsPortConfigFxoMinLevelDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 82), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigFxoMinLevelDetect.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigFxoMinLevelDetect.setDescription('Minimum level of detectable signal (dBm): -40..-20 (def -36) TAU-SIP 2.10. FXO only')
fxsPortConfigUseAltNumberAsContact = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 83), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigUseAltNumberAsContact.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigUseAltNumberAsContact.setDescription('Use alternative number as contact (only for serial groups members) TAU-SIP 2.12')
fxsPortConfigModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 84), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigModifier.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigModifier.setDescription('modifierNumber (1..16) at modifiersTable or -1=off TAU-SIP 2.12')
fxsPortConfigMwiDialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 2, 1, 85), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigMwiDialtone.setStatus('current')
if mibBuilder.loadTexts: fxsPortConfigMwiDialtone.setDescription('MWI Dialtone TAU-SIP 2.13')
fxsPortsConfigCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3))
fxsPortConfigCommonPlaymoh = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonPlaymoh.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonPlaymoh.setDescription(' ')
fxsPortConfigCommonAON = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 2), FxsAON()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonAON.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonAON.setDescription(' ')
fxsPortConfigCommonAONHideDate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonAONHideDate.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonAONHideDate.setDescription(' ')
fxsPortConfigCommonAONHideName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonAONHideName.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonAONHideName.setDescription(' ')
fxsPortConfigCommonTaxophone = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 5), FxsTaxophoneType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonTaxophone.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonTaxophone.setDescription(' ')
fxsPortConfigCommonMinFlashtime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonMinFlashtime.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonMinFlashtime.setDescription(' ')
fxsPortConfigCommonMaxFlashtime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonMaxFlashtime.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonMaxFlashtime.setDescription(' ')
fxsPortConfigCommonGainr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonGainr.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonGainr.setDescription(' ')
fxsPortConfigCommonGaint = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonGaint.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonGaint.setDescription(' ')
fxsPortConfigCommonCategory = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCategory.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonCategory.setDescription(' ')
fxsPortConfigCommonCallTransfer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 11), FxsProcessFlashType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCallTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonCallTransfer.setDescription(' ')
fxsPortConfigCommonCallWaiting = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCallWaiting.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonCallWaiting.setDescription(' ')
fxsPortConfigCommonCfgPriOverCw = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCfgPriOverCw.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonCfgPriOverCw.setDescription(' ')
fxsPortConfigCommonFxoFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonFxoFlashTime.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonFxoFlashTime.setDescription('70 1000 def 300 ms')
fxsPortConfigCommonFxoDelTdm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonFxoDelTdm.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonFxoDelTdm.setDescription('100 1000 def 200 ms')
fxsPortConfigCommonFxoRingtdm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonFxoRingtdm.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonFxoRingtdm.setDescription('2 10 def 2')
fxsPortConfigCommonPstnNumberprefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonPstnNumberprefix.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonPstnNumberprefix.setDescription('max len 20 ')
fxsPortConfigCommonPstnNameprefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonPstnNameprefix.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonPstnNameprefix.setDescription('max len 20 ')
fxsPortConfigCommonUsePstnCid = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonUsePstnCid.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonUsePstnCid.setDescription(' ')
fxsPortConfigCommonEnableCpc = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonEnableCpc.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonEnableCpc.setDescription(' ')
fxsPortConfigCommonCpcTime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonCpcTime.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonCpcTime.setDescription(' ')
fxsPortConfigCommonDontDetectDT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDontDetectDT.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonDontDetectDT.setDescription('def false')
fxsPortConfigCommonDelayDialingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDelayDialingTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonDelayDialingTimeout.setDescription('0-10 ms def 2')
fxsPortConfigCommonDialing = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 24), FxoDialingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDialing.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonDialing.setDescription(' ')
fxsPortConfigCommonTransmitNumber = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonTransmitNumber.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonTransmitNumber.setDescription(' ')
fxsPortConfigCommonDontTransmitPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 3, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsPortConfigCommonDontTransmitPrefix.setStatus('obsolete')
if mibBuilder.loadTexts: fxsPortConfigCommonDontTransmitPrefix.setDescription(' ')
megacoPortsMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4), )
if mibBuilder.loadTexts: megacoPortsMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: megacoPortsMonitoringTable.setDescription('TAU-MEGACO RC03')
megacoPortsMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1), ).setIndexNames((0, "ELTEX-FXS72", "megacoPortNumber"))
if mibBuilder.loadTexts: megacoPortsMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: megacoPortsMonitoringEntry.setDescription(' ')
megacoPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: megacoPortNumber.setStatus('current')
if mibBuilder.loadTexts: megacoPortNumber.setDescription('megaco port number')
megacoPortTerminationID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortTerminationID.setStatus('current')
if mibBuilder.loadTexts: megacoPortTerminationID.setDescription('megaco port Termination ID (from cfg)')
megacoPortComments = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortComments.setStatus('current')
if mibBuilder.loadTexts: megacoPortComments.setDescription('megaco port Comments (from cfg)')
megacoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 4), PortMegacoState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortState.setStatus('current')
if mibBuilder.loadTexts: megacoPortState.setDescription('megaco port state')
megacoPortStateStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortStateStartTime.setStatus('current')
if mibBuilder.loadTexts: megacoPortStateStartTime.setDescription('current state start time')
megacoPortStateDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortStateDuration.setStatus('current')
if mibBuilder.loadTexts: megacoPortStateDuration.setDescription('or current state duration [DD hh:mm:ss]')
megacoPortJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 7), PortMegacoJitter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortJitter.setStatus('current')
if mibBuilder.loadTexts: megacoPortJitter.setDescription('port jitter')
megacoPortTelNo = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 12, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: megacoPortTelNo.setStatus('current')
if mibBuilder.loadTexts: megacoPortTelNo.setDescription('megaco port TelNo (from cfg)')
fxsDialMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDialMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: fxsDialMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
fxsDial = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14))
fxsDialPlanTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1), )
if mibBuilder.loadTexts: fxsDialPlanTable.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanTable.setDescription(' ')
fxsDialPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsDialPlanNumber"))
if mibBuilder.loadTexts: fxsDialPlanEntry.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanEntry.setDescription(' ')
fxsDialPlanHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanHost.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanHost.setDescription(' ')
fxsDialPlanDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanDigits.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanDigits.setDescription(' ')
fxsDialPlanTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanTimeout.setDescription(' ')
fxsDialPlanMinDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanMinDigits.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanMinDigits.setDescription(' ')
fxsDialPlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 5), FxsDialPlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanType.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanType.setDescription(' ')
fxsDialPlanAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanAccessMask.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanAccessMask.setDescription(' ')
fxsDialPlanDialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanDialtone.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanDialtone.setDescription(' ')
fxsDialPlanModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanModifier.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanModifier.setDescription(' ')
fxsDialPlanNature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 9), FxsDialPlanNatureType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanNature.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanNature.setDescription(' ')
fxsDialPlanDelnum = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanDelnum.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanDelnum.setDescription(' ')
fxsDialPlanPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialPlanPtime.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanPtime.setDescription(' ')
fxsDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsDialRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialRowStatus.setDescription(' ')
fxsDialPlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)))
if mibBuilder.loadTexts: fxsDialPlanNumber.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanNumber.setDescription(' ')
fxsDialPlanNext = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsDialPlanNext.setStatus('obsolete')
if mibBuilder.loadTexts: fxsDialPlanNext.setDescription(' Show next (empty) position in DialPlanTable ')
tauDialPlansRegExp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3))
tauDialRegularOn = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauDialRegularOn.setStatus('obsolete')
if mibBuilder.loadTexts: tauDialRegularOn.setDescription('')
tauDialRegularProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3, 2), TauDialProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauDialRegularProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: tauDialRegularProtocol.setDescription('')
tauDialRegularText = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 14, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauDialRegularText.setStatus('obsolete')
if mibBuilder.loadTexts: tauDialRegularText.setDescription('')
fxsConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigSave.setStatus('current')
if mibBuilder.loadTexts: fxsConfigSave.setDescription(' SET 1 to save /etc ')
fxsConfigApply = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigApply.setStatus('obsolete')
if mibBuilder.loadTexts: fxsConfigApply.setDescription(' SET 1 to reload all configuration ')
fxsSerialGroupsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSerialGroupsMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
fxsSerialGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18))
fxsSerialGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1), )
if mibBuilder.loadTexts: fxsSerialGroupsTable.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsTable.setDescription(' ')
fxsSerialGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsDialPlanNumber"))
if mibBuilder.loadTexts: fxsSerialGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsEntry.setDescription(' ')
fxsSerialGroupsPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsPhone.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsPhone.setDescription(' ')
fxsSerialGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 2), FxsGroupSerialEnableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsEnabled.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsEnabled.setDescription(' ')
fxsSerialGroupsSerialType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 3), FxsGroupSerialType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsSerialType.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsSerialType.setDescription(' ')
fxsSerialGroupsBusyType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 4), FxsGroupBusyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsBusyType.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsBusyType.setDescription(' ')
fxsSerialGroupsTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsTimeout.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsTimeout.setDescription(' ')
fxsSerialGroupsSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsSipPort.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsSipPort.setDescription(' ')
fxsSerialGroupsAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsAuthName.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsAuthName.setDescription(' ')
fxsSerialGroupsAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsAuthPass.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsAuthPass.setDescription(' ')
fxsSerialGroupsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsPorts.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsPorts.setDescription(' ')
fxsSerialGroupsSipProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsSipProfile.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsSipProfile.setDescription(' ')
fxsSerialGroupsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxsSerialGroupsRowStatus.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsRowStatus.setDescription(' ')
fxsSerialGroupsNextEmpty = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxsSerialGroupsNextEmpty.setStatus('current')
if mibBuilder.loadTexts: fxsSerialGroupsNextEmpty.setDescription(' ')
fxsReboot = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsReboot.setStatus('current')
if mibBuilder.loadTexts: fxsReboot.setDescription(' SET 1 to reboot device ')
tauVoipDvo = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20))
tauVoipDvoCallwaiting = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCallwaiting.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCallwaiting.setDescription('00..99')
tauVoipDvoCtAttended = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCtAttended.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCtAttended.setDescription(' ')
tauVoipDvoCtUnattended = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCtUnattended.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCtUnattended.setDescription(' ')
tauVoipDvoCfUnconditional = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfUnconditional.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCfUnconditional.setDescription(' ')
tauVoipDvoCfBusy = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfBusy.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCfBusy.setDescription(' ')
tauVoipDvoCfNoanswer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfNoanswer.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCfNoanswer.setDescription(' ')
tauVoipDvoCfService = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoCfService.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoCfService.setDescription(' ')
tauVoipDvoDoDisturb = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 20, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauVoipDvoDoDisturb.setStatus('current')
if mibBuilder.loadTexts: tauVoipDvoDoDisturb.setDescription(' ')
tauSipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21))
sipEnablesip = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipEnablesip.setStatus('obsolete')
if mibBuilder.loadTexts: sipEnablesip.setDescription('')
sipObtimeout = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipObtimeout.setStatus('obsolete')
if mibBuilder.loadTexts: sipObtimeout.setDescription('')
sipMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 3), ProxyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipMode.setStatus('obsolete')
if mibBuilder.loadTexts: sipMode.setDescription('')
sipOptions = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 4), OptionsHomeServerTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipOptions.setStatus('obsolete')
if mibBuilder.loadTexts: sipOptions.setDescription('')
sipKeepalivet = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipKeepalivet.setStatus('obsolete')
if mibBuilder.loadTexts: sipKeepalivet.setDescription('')
sipDomainToReg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDomainToReg.setStatus('obsolete')
if mibBuilder.loadTexts: sipDomainToReg.setDescription('')
sipDomain = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDomain.setStatus('obsolete')
if mibBuilder.loadTexts: sipDomain.setDescription('')
sipRegisterRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegisterRetryInterval.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegisterRetryInterval.setDescription('')
sipOutbound = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 9), OutboundType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipOutbound.setStatus('obsolete')
if mibBuilder.loadTexts: sipOutbound.setDescription('')
sipInboundProxy = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipInboundProxy.setStatus('obsolete')
if mibBuilder.loadTexts: sipInboundProxy.setDescription('')
sipExpires = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipExpires.setStatus('obsolete')
if mibBuilder.loadTexts: sipExpires.setDescription('')
sipAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 12), AuthenticationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipAuthentication.setStatus('obsolete')
if mibBuilder.loadTexts: sipAuthentication.setDescription('')
sipUsername = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUsername.setStatus('obsolete')
if mibBuilder.loadTexts: sipUsername.setDescription('')
sipPassword = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPassword.setStatus('obsolete')
if mibBuilder.loadTexts: sipPassword.setDescription('')
sipProxy0 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy0.setStatus('obsolete')
if mibBuilder.loadTexts: sipProxy0.setDescription('')
sipRegrar0 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar0.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegrar0.setDescription('')
sipRegistration0 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration0.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegistration0.setDescription('')
sipProxy1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy1.setStatus('obsolete')
if mibBuilder.loadTexts: sipProxy1.setDescription('')
sipRegrar1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar1.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegrar1.setDescription('')
sipProxy2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy2.setStatus('obsolete')
if mibBuilder.loadTexts: sipProxy2.setDescription('')
sipRegrar2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar2.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegrar2.setDescription('')
sipProxy3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy3.setStatus('obsolete')
if mibBuilder.loadTexts: sipProxy3.setDescription('')
sipRegrar3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar3.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegrar3.setDescription('')
sipProxy4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProxy4.setStatus('obsolete')
if mibBuilder.loadTexts: sipProxy4.setDescription('')
sipRegrar4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegrar4.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegrar4.setDescription('')
sipDtmfmime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 26), DTMFMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipDtmfmime.setStatus('obsolete')
if mibBuilder.loadTexts: sipDtmfmime.setDescription('')
sipHfmime = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 27), HookFlashMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipHfmime.setStatus('obsolete')
if mibBuilder.loadTexts: sipHfmime.setDescription('')
sipCtWithReplaces = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCtWithReplaces.setStatus('obsolete')
if mibBuilder.loadTexts: sipCtWithReplaces.setDescription('')
sipShortmode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipShortmode.setStatus('obsolete')
if mibBuilder.loadTexts: sipShortmode.setDescription('')
sipTransport = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 30), TypeTransport()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipTransport.setStatus('obsolete')
if mibBuilder.loadTexts: sipTransport.setDescription('')
sipSipMtu = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipSipMtu.setStatus('obsolete')
if mibBuilder.loadTexts: sipSipMtu.setDescription('')
sip100Rel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 32), Type100rel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sip100Rel.setStatus('obsolete')
if mibBuilder.loadTexts: sip100Rel.setDescription('')
sipUserPhone = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUserPhone.setStatus('obsolete')
if mibBuilder.loadTexts: sipUserPhone.setDescription('')
sipUriEscapeHash = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipUriEscapeHash.setStatus('obsolete')
if mibBuilder.loadTexts: sipUriEscapeHash.setDescription('')
sipInviteTotalT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipInviteTotalT.setStatus('obsolete')
if mibBuilder.loadTexts: sipInviteTotalT.setDescription('')
sipInviteInitT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipInviteInitT.setStatus('obsolete')
if mibBuilder.loadTexts: sipInviteInitT.setDescription('')
sipCwRingback = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 37), CwRingbackRingbackAtCallwaiting()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCwRingback.setStatus('obsolete')
if mibBuilder.loadTexts: sipCwRingback.setDescription('')
sipRingbackSdp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 38), RemoteRingback()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRingbackSdp.setStatus('obsolete')
if mibBuilder.loadTexts: sipRingbackSdp.setDescription('')
sipRingback = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRingback.setStatus('obsolete')
if mibBuilder.loadTexts: sipRingback.setDescription('')
sipRegistration1 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration1.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegistration1.setDescription('')
sipRegistration2 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration2.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegistration2.setDescription('')
sipRegistration3 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration3.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegistration3.setDescription('')
sipRegistration4 = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipRegistration4.setStatus('obsolete')
if mibBuilder.loadTexts: sipRegistration4.setDescription('')
sipPRTPstat = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 21, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPRTPstat.setStatus('obsolete')
if mibBuilder.loadTexts: sipPRTPstat.setDescription('')
fxsStatTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23), )
if mibBuilder.loadTexts: fxsStatTable.setStatus('current')
if mibBuilder.loadTexts: fxsStatTable.setDescription(' ')
fxsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: fxsStatEntry.setStatus('current')
if mibBuilder.loadTexts: fxsStatEntry.setDescription(' ')
termID = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termID.setStatus('current')
if mibBuilder.loadTexts: termID.setDescription(' ')
currentState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 2), FxsPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentState.setStatus('current')
if mibBuilder.loadTexts: currentState.setDescription(' ')
totalCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCallCount.setStatus('current')
if mibBuilder.loadTexts: totalCallCount.setDescription(' ')
lastCallPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCallPhone.setStatus('current')
if mibBuilder.loadTexts: lastCallPhone.setDescription(' ')
peakJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakJitter.setStatus('current')
if mibBuilder.loadTexts: peakJitter.setDescription(' ')
lostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lostPackets.setStatus('current')
if mibBuilder.loadTexts: lostPackets.setDescription(' ')
numTxPack = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTxPack.setStatus('current')
if mibBuilder.loadTexts: numTxPack.setDescription(' ')
numTxOct = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numTxOct.setStatus('current')
if mibBuilder.loadTexts: numTxOct.setDescription(' ')
numRxPack = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numRxPack.setStatus('current')
if mibBuilder.loadTexts: numRxPack.setDescription(' ')
numRxOct = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numRxOct.setStatus('current')
if mibBuilder.loadTexts: numRxOct.setDescription(' ')
fxsUpdateFw = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsUpdateFw.setStatus('current')
if mibBuilder.loadTexts: fxsUpdateFw.setDescription('SET: filename tftpaddr')
fxsProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30))
profilesSip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1))
profilesSipCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1))
sipCommonEnablesip = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonEnablesip.setStatus('current')
if mibBuilder.loadTexts: sipCommonEnablesip.setDescription('')
sipCommonShortmode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonShortmode.setStatus('current')
if mibBuilder.loadTexts: sipCommonShortmode.setDescription('')
sipCommonTransport = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 3), TypeTransport()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonTransport.setStatus('current')
if mibBuilder.loadTexts: sipCommonTransport.setDescription('')
sipCommonSipMtu = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1300, 1450))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonSipMtu.setStatus('current')
if mibBuilder.loadTexts: sipCommonSipMtu.setDescription('')
sipCommonInviteTotalT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 39000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonInviteTotalT.setStatus('current')
if mibBuilder.loadTexts: sipCommonInviteTotalT.setDescription('')
sipCommonInviteInitT = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonInviteInitT.setStatus('current')
if mibBuilder.loadTexts: sipCommonInviteInitT.setDescription('')
sipCommonPortRegistrationDelay = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000)).clone(500)).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipCommonPortRegistrationDelay.setStatus('current')
if mibBuilder.loadTexts: sipCommonPortRegistrationDelay.setDescription('Port registration delay (ms)')
stunEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stunEnable.setStatus('current')
if mibBuilder.loadTexts: stunEnable.setDescription(' ')
stunServer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stunServer.setStatus('current')
if mibBuilder.loadTexts: stunServer.setDescription('max 49 symbols')
stunInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stunInterval.setStatus('current')
if mibBuilder.loadTexts: stunInterval.setDescription(' ')
sipPublicIp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipPublicIp.setStatus('current')
if mibBuilder.loadTexts: sipPublicIp.setDescription('IPv4 address')
profilesSipMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesSipMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: profilesSipMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
profilesSipTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3), )
if mibBuilder.loadTexts: profilesSipTable.setStatus('current')
if mibBuilder.loadTexts: profilesSipTable.setDescription(' ')
profilesSipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesSipEntry.setStatus('current')
if mibBuilder.loadTexts: profilesSipEntry.setDescription(' ')
profileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: profileNumber.setStatus('current')
if mibBuilder.loadTexts: profileNumber.setDescription('')
sipProfileObtimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileObtimeout.setStatus('current')
if mibBuilder.loadTexts: sipProfileObtimeout.setDescription('')
sipProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 3), ProxyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileMode.setStatus('current')
if mibBuilder.loadTexts: sipProfileMode.setDescription('')
sipProfileOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 4), OptionsHomeServerTest()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileOptions.setStatus('current')
if mibBuilder.loadTexts: sipProfileOptions.setDescription('')
sipProfileKeepalivet = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileKeepalivet.setStatus('current')
if mibBuilder.loadTexts: sipProfileKeepalivet.setDescription('')
sipProfileDomainToReg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileDomainToReg.setStatus('current')
if mibBuilder.loadTexts: sipProfileDomainToReg.setDescription('')
sipProfileDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileDomain.setStatus('current')
if mibBuilder.loadTexts: sipProfileDomain.setDescription('2.13 - 128 symbols')
sipProfileRegisterRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegisterRetryInterval.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegisterRetryInterval.setDescription('')
sipProfileOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 9), OutboundType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileOutbound.setStatus('current')
if mibBuilder.loadTexts: sipProfileOutbound.setDescription('')
sipProfileInboundProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileInboundProxy.setStatus('current')
if mibBuilder.loadTexts: sipProfileInboundProxy.setDescription('')
sipProfileExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileExpires.setStatus('current')
if mibBuilder.loadTexts: sipProfileExpires.setDescription('')
sipProfileAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 12), AuthenticationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileAuthentication.setStatus('current')
if mibBuilder.loadTexts: sipProfileAuthentication.setDescription('')
sipProfileUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUsername.setStatus('current')
if mibBuilder.loadTexts: sipProfileUsername.setDescription('')
sipProfilePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfilePassword.setStatus('current')
if mibBuilder.loadTexts: sipProfilePassword.setDescription('')
sipProfileProxy0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy0.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxy0.setDescription('2.13 - 128 symbols')
sipProfileRegrar0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar0.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegrar0.setDescription('2.13 - 128 symbols')
sipProfileRegistration0 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration0.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegistration0.setDescription('')
sipProfileProxy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy1.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxy1.setDescription('2.13 - 128 symbols')
sipProfileRegrar1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar1.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegrar1.setDescription('2.13 - 128 symbols')
sipProfileProxy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy2.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxy2.setDescription('2.13 - 128 symbols')
sipProfileRegrar2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar2.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegrar2.setDescription('2.13 - 128 symbols')
sipProfileProxy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy3.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxy3.setDescription('2.13 - 128 symbols')
sipProfileRegrar3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar3.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegrar3.setDescription('2.13 - 128 symbols')
sipProfileProxy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileProxy4.setStatus('current')
if mibBuilder.loadTexts: sipProfileProxy4.setDescription('2.13 - 128 symbols')
sipProfileRegrar4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegrar4.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegrar4.setDescription('2.13 - 128 symbols')
sipProfileDtmfmime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 26), DTMFMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileDtmfmime.setStatus('current')
if mibBuilder.loadTexts: sipProfileDtmfmime.setDescription('')
sipProfileHfmime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 27), HookFlashMIMEType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileHfmime.setStatus('current')
if mibBuilder.loadTexts: sipProfileHfmime.setDescription('')
sipProfileCtWithReplaces = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileCtWithReplaces.setStatus('current')
if mibBuilder.loadTexts: sipProfileCtWithReplaces.setDescription('')
sipProfile100Rel = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 32), Type100rel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfile100Rel.setStatus('current')
if mibBuilder.loadTexts: sipProfile100Rel.setDescription('')
sipProfileUserPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUserPhone.setStatus('current')
if mibBuilder.loadTexts: sipProfileUserPhone.setDescription('')
sipProfileUriEscapeHash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUriEscapeHash.setStatus('current')
if mibBuilder.loadTexts: sipProfileUriEscapeHash.setDescription('')
sipProfileCwRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 37), CwRingbackRingbackAtCallwaiting()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileCwRingback.setStatus('current')
if mibBuilder.loadTexts: sipProfileCwRingback.setDescription('')
sipProfileRingbackSdp = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 38), RemoteRingback()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRingbackSdp.setStatus('current')
if mibBuilder.loadTexts: sipProfileRingbackSdp.setDescription('')
sipProfileRingback = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRingback.setStatus('current')
if mibBuilder.loadTexts: sipProfileRingback.setDescription('')
sipProfileRegistration1 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration1.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegistration1.setDescription('')
sipProfileRegistration2 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration2.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegistration2.setDescription('')
sipProfileRegistration3 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration3.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegistration3.setDescription('')
sipProfileRegistration4 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRegistration4.setStatus('current')
if mibBuilder.loadTexts: sipProfileRegistration4.setDescription('')
sipProfilePRTPstat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfilePRTPstat.setStatus('current')
if mibBuilder.loadTexts: sipProfilePRTPstat.setDescription('')
sipProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 45), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sipProfileRowStatus.setDescription('')
sipProfileEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileEnableTimer.setStatus('current')
if mibBuilder.loadTexts: sipProfileEnableTimer.setDescription('Enable timer')
sipProfileMinSE = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileMinSE.setStatus('current')
if mibBuilder.loadTexts: sipProfileMinSE.setDescription('Min SE 90..1800 def 120')
sipProfileSessionExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileSessionExpires.setStatus('current')
if mibBuilder.loadTexts: sipProfileSessionExpires.setDescription('SessionExpires 90..80000 or 0 def 0')
sipProfileRemoveInactiveMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 49), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileRemoveInactiveMedia.setStatus('current')
if mibBuilder.loadTexts: sipProfileRemoveInactiveMedia.setDescription('Remove inactive media')
sipProfileKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: sipProfileKeepAliveInterval.setDescription('keep alive interval 30..120 def 30. TAU-SIP 2.7')
sipProfileKeepAliveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 51), KeepAliveMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileKeepAliveMode.setStatus('current')
if mibBuilder.loadTexts: sipProfileKeepAliveMode.setDescription('type of the keep alive message. TAU-SIP 2.7')
sipProfileConferenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 52), ConferenceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileConferenceMode.setStatus('current')
if mibBuilder.loadTexts: sipProfileConferenceMode.setDescription('Conference mode. TAU-SIP 2.8')
sipProfileConferenceServer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileConferenceServer.setStatus('current')
if mibBuilder.loadTexts: sipProfileConferenceServer.setDescription('Conference server name. TAU-SIP 2.8')
sipProfileEnableIMS = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 54), IMSMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileEnableIMS.setStatus('current')
if mibBuilder.loadTexts: sipProfileEnableIMS.setDescription('Enable IMS. TAU-SIP 2.8 TruthValue TAU-SIP 2.10 IMSMode')
sipProfileXCAPNameForThreePartyConference = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForThreePartyConference.setStatus('current')
if mibBuilder.loadTexts: sipProfileXCAPNameForThreePartyConference.setDescription('XCAP name for three-party conference. TAU-SIP 2.8')
sipProfileXCAPNameForHotline = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 56), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForHotline.setStatus('current')
if mibBuilder.loadTexts: sipProfileXCAPNameForHotline.setDescription('XCAP name for hotline. TAU-SIP 2.8')
sipProfileXCAPNameForCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForCallWaiting.setStatus('current')
if mibBuilder.loadTexts: sipProfileXCAPNameForCallWaiting.setDescription('XCAP name for call waiting. TAU-SIP 2.8')
sipProfileXCAPNameForCallHold = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 58), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForCallHold.setStatus('current')
if mibBuilder.loadTexts: sipProfileXCAPNameForCallHold.setDescription('XCAP name for call hold. TAU-SIP 2.8')
sipProfileXCAPNameForExplicitCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 59), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileXCAPNameForExplicitCallTransfer.setStatus('current')
if mibBuilder.loadTexts: sipProfileXCAPNameForExplicitCallTransfer.setDescription('XCAP name for explicit call transfer. TAU-SIP 2.10')
sipProfileUseAlertInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileUseAlertInfo.setStatus('current')
if mibBuilder.loadTexts: sipProfileUseAlertInfo.setDescription('Alert-Info')
sipProfileFullRuriCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 61), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileFullRuriCompliance.setStatus('current')
if mibBuilder.loadTexts: sipProfileFullRuriCompliance.setDescription('Full RURI compliance. TAU-SIP 2.12')
sipProfileChangeover = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 3, 1, 62), SipProfileChangeoverType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipProfileChangeover.setStatus('current')
if mibBuilder.loadTexts: sipProfileChangeover.setDescription('Changeover mode. TAU-SIP 2.12')
profilesSipAlertInfoMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesSipAlertInfoMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: profilesSipAlertInfoMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
profilesSipAlertInfoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5), )
if mibBuilder.loadTexts: profilesSipAlertInfoTable.setStatus('current')
if mibBuilder.loadTexts: profilesSipAlertInfoTable.setDescription(' ')
profilesSipAlertInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"), (0, "ELTEX-FXS72", "cadenceNumber"))
if mibBuilder.loadTexts: profilesSipAlertInfoEntry.setStatus('current')
if mibBuilder.loadTexts: profilesSipAlertInfoEntry.setDescription(' ')
cadenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: cadenceNumber.setStatus('current')
if mibBuilder.loadTexts: cadenceNumber.setDescription('')
cadenceName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadenceName.setStatus('current')
if mibBuilder.loadTexts: cadenceName.setDescription('Alert-Info string (max len 30)')
cadenceRingRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadenceRingRule.setStatus('current')
if mibBuilder.loadTexts: cadenceRingRule.setDescription("Distinctive Ring rule (max len 71) string of values (200-16000) devided by ',' or ';' allowed 2,4,6,8,10,12 elements")
cadenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadenceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadenceRowStatus.setDescription('')
profilesPortsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesPortsMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: profilesPortsMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
profilesPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3))
profilesPortsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1), )
if mibBuilder.loadTexts: profilesPortsTable.setStatus('current')
if mibBuilder.loadTexts: profilesPortsTable.setDescription(' ')
profilesPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesPortsEntry.setStatus('current')
if mibBuilder.loadTexts: profilesPortsEntry.setDescription(' ')
profilePortsPlaymoh = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPlaymoh.setStatus('current')
if mibBuilder.loadTexts: profilePortsPlaymoh.setDescription(' ')
profilePortsAON = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 2), FxsAON()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsAON.setStatus('current')
if mibBuilder.loadTexts: profilePortsAON.setDescription(' ')
profilePortsAONHideDate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsAONHideDate.setStatus('current')
if mibBuilder.loadTexts: profilePortsAONHideDate.setDescription(' ')
profilePortsAONHideName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsAONHideName.setStatus('current')
if mibBuilder.loadTexts: profilePortsAONHideName.setDescription(' ')
profilePortsTaxophone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 5), FxsTaxophoneType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsTaxophone.setStatus('current')
if mibBuilder.loadTexts: profilePortsTaxophone.setDescription(' ')
profilePortsMinFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsMinFlashtime.setStatus('current')
if mibBuilder.loadTexts: profilePortsMinFlashtime.setDescription('70-2000(from v2.8),1000(to v2.7)')
profilePortsMaxFlashtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsMaxFlashtime.setStatus('current')
if mibBuilder.loadTexts: profilePortsMaxFlashtime.setDescription('70-2000(from v2.8),1000(to v2.7)')
profilePortsGainr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsGainr.setStatus('current')
if mibBuilder.loadTexts: profilePortsGainr.setDescription(' ')
profilePortsGaint = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsGaint.setStatus('current')
if mibBuilder.loadTexts: profilePortsGaint.setDescription(' ')
profilePortsCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCategory.setStatus('current')
if mibBuilder.loadTexts: profilePortsCategory.setDescription(' ')
profilePortsCallTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 11), FxsProcessFlashType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCallTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: profilePortsCallTransfer.setDescription(' ')
profilePortsCallWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCallWaiting.setStatus('obsolete')
if mibBuilder.loadTexts: profilePortsCallWaiting.setDescription(' ')
profilePortsCfgPriOverCw = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCfgPriOverCw.setStatus('current')
if mibBuilder.loadTexts: profilePortsCfgPriOverCw.setDescription(' ')
profilePortsFxoFlashTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoFlashTime.setStatus('current')
if mibBuilder.loadTexts: profilePortsFxoFlashTime.setDescription('70 1000 def 300 ms')
profilePortsFxoDelTdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoDelTdm.setStatus('current')
if mibBuilder.loadTexts: profilePortsFxoDelTdm.setDescription('100 1000 def 200 ms')
profilePortsFxoRingtdm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoRingtdm.setStatus('current')
if mibBuilder.loadTexts: profilePortsFxoRingtdm.setDescription('2 10 def 2')
profilePortsPstnNumberprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnNumberprefix.setStatus('current')
if mibBuilder.loadTexts: profilePortsPstnNumberprefix.setDescription('max len 20. allowed symbols 0-9A-Za-z*#_+!~$-')
profilePortsPstnNameprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnNameprefix.setStatus('current')
if mibBuilder.loadTexts: profilePortsPstnNameprefix.setDescription('max len 20 ')
profilePortsUsePstnCid = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsUsePstnCid.setStatus('current')
if mibBuilder.loadTexts: profilePortsUsePstnCid.setDescription(' ')
profilePortsEnableCpc = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsEnableCpc.setStatus('current')
if mibBuilder.loadTexts: profilePortsEnableCpc.setDescription(' ')
profilePortsCpcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCpcTime.setStatus('current')
if mibBuilder.loadTexts: profilePortsCpcTime.setDescription(' ')
profilePortsDontDetectDT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDontDetectDT.setStatus('current')
if mibBuilder.loadTexts: profilePortsDontDetectDT.setDescription('def false')
profilePortsDelayDialingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDelayDialingTimeout.setStatus('current')
if mibBuilder.loadTexts: profilePortsDelayDialingTimeout.setDescription('0-10 ms def 2')
profilePortsDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 24), FxoDialingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDialing.setStatus('current')
if mibBuilder.loadTexts: profilePortsDialing.setDescription(' ')
profilePortsTransmitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsTransmitNumber.setStatus('current')
if mibBuilder.loadTexts: profilePortsTransmitNumber.setDescription(' ')
profilePortsDontTransmitPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDontTransmitPrefix.setStatus('current')
if mibBuilder.loadTexts: profilePortsDontTransmitPrefix.setDescription(' ')
profilePortsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profilePortsRowStatus.setStatus('current')
if mibBuilder.loadTexts: profilePortsRowStatus.setDescription(' ')
profilePortsDialToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 28), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDialToneDetectionParameters.setStatus('current')
if mibBuilder.loadTexts: profilePortsDialToneDetectionParameters.setDescription('FXO only')
profilePortsRingBackToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 29), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsRingBackToneDetectionParameters.setStatus('current')
if mibBuilder.loadTexts: profilePortsRingBackToneDetectionParameters.setDescription('FXO only')
profilePortsBusyToneDetectionParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 30), FxsToneParametrs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsBusyToneDetectionParameters.setStatus('current')
if mibBuilder.loadTexts: profilePortsBusyToneDetectionParameters.setDescription('FXO only')
profilePortsDtDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDtDetectTime.setStatus('current')
if mibBuilder.loadTexts: profilePortsDtDetectTime.setDescription(' ')
profilePortsDecadePulseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDecadePulseTime.setStatus('current')
if mibBuilder.loadTexts: profilePortsDecadePulseTime.setDescription(' ')
profilePortsDecadePauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDecadePauseTime.setStatus('current')
if mibBuilder.loadTexts: profilePortsDecadePauseTime.setDescription(' ')
profilePortsFxoCallBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoCallBusy.setStatus('current')
if mibBuilder.loadTexts: profilePortsFxoCallBusy.setDescription("Only for FXO. Send '503 Service unavailable' on busy (SIP)")
profilePortsCpcRus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsCpcRus.setStatus('current')
if mibBuilder.loadTexts: profilePortsCpcRus.setDescription('1..10 or 0 (off)')
profilePortsReversalPolarityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 36), ReversalPolarityAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsReversalPolarityAction.setStatus('obsolete')
if mibBuilder.loadTexts: profilePortsReversalPolarityAction.setDescription('FXO port only. TAU-SIP 2.9. Deprecated by PstnActivity')
profilePortsPstnActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 37), PstnActivityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnActivity.setStatus('current')
if mibBuilder.loadTexts: profilePortsPstnActivity.setDescription('only for FXO. TAU-SIP 2.9. pstn_200_at_answer')
profilePortsPstnRbDetectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsPstnRbDetectTimeout.setStatus('current')
if mibBuilder.loadTexts: profilePortsPstnRbDetectTimeout.setDescription('only for FXO. TAU-SIP 2.9')
profilePortsDetectFxoLinePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsDetectFxoLinePresence.setStatus('current')
if mibBuilder.loadTexts: profilePortsDetectFxoLinePresence.setDescription('TAU-SIP 2.10. FXO only')
profilePortsBlockFxoLineInOutgoingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsBlockFxoLineInOutgoingDirection.setStatus('current')
if mibBuilder.loadTexts: profilePortsBlockFxoLineInOutgoingDirection.setDescription('TAU-SIP 2.10. FXO only')
profilePortsStopDial = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsStopDial.setStatus('current')
if mibBuilder.loadTexts: profilePortsStopDial.setDescription(' ')
profilePortsFxoMinLevelDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsFxoMinLevelDetect.setStatus('current')
if mibBuilder.loadTexts: profilePortsFxoMinLevelDetect.setDescription('Minimum level of detectable signal (dBm): -40..-20 (def -36) TAU-SIP 2.10. FXO only')
profilePortsModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 3, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profilePortsModifier.setStatus('current')
if mibBuilder.loadTexts: profilePortsModifier.setDescription('modifierNumber (1..16) at modifiersTable or -1=off TAU-SIP 2.12')
profilesDialPlansMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesDialPlansMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: profilesDialPlansMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
profilesDialPlans = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5))
profilesDialPlansTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1), )
if mibBuilder.loadTexts: profilesDialPlansTable.setStatus('current')
if mibBuilder.loadTexts: profilesDialPlansTable.setDescription(' ')
profilesDialPlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"), (0, "ELTEX-FXS72", "profileDialPlanNumber"))
if mibBuilder.loadTexts: profilesDialPlansEntry.setStatus('current')
if mibBuilder.loadTexts: profilesDialPlansEntry.setDescription(' ')
profileDialPlanHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanHost.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanHost.setDescription(' ')
profileDialPlanDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanDigits.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanDigits.setDescription(' ')
profileDialPlanTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanTimeout.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanTimeout.setDescription(' ')
profileDialPlanMinDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanMinDigits.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanMinDigits.setDescription(' ')
profileDialPlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 5), FxsDialPlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanType.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanType.setDescription(' ')
profileDialPlanAccessMask = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanAccessMask.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanAccessMask.setDescription(' ')
profileDialPlanDialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanDialtone.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanDialtone.setDescription(' ')
profileDialPlanModifier = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanModifier.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanModifier.setDescription(' ')
profileDialPlanNature = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 9), FxsDialPlanNatureType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanNature.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanNature.setDescription(' ')
profileDialPlanDelnum = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanDelnum.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanDelnum.setDescription(' ')
profileDialPlanPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialPlanPtime.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanPtime.setDescription(' ')
profileDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileDialRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileDialRowStatus.setDescription(' ')
profileDialPlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)))
if mibBuilder.loadTexts: profileDialPlanNumber.setStatus('current')
if mibBuilder.loadTexts: profileDialPlanNumber.setDescription(' ')
profilesRegExpDPTableMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: profilesRegExpDPTableMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: profilesRegExpDPTableMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
profilesRegExpDPTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3), )
if mibBuilder.loadTexts: profilesRegExpDPTable.setStatus('current')
if mibBuilder.loadTexts: profilesRegExpDPTable.setDescription(' ')
profilesRegExpDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesRegExpDPEntry.setStatus('current')
if mibBuilder.loadTexts: profilesRegExpDPEntry.setDescription(' ')
profileRegExpDialOn = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRegExpDialOn.setStatus('current')
if mibBuilder.loadTexts: profileRegExpDialOn.setDescription('')
profileRegExpDialProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 2), TauDialProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRegExpDialProtocol.setStatus('current')
if mibBuilder.loadTexts: profileRegExpDialProtocol.setDescription('')
profileRegExpDialText = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: profileRegExpDialText.setStatus('current')
if mibBuilder.loadTexts: profileRegExpDialText.setDescription('')
profileRegExpDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profileRegExpDialRowStatus.setStatus('current')
if mibBuilder.loadTexts: profileRegExpDialRowStatus.setDescription(' ')
profilesCodecs = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7))
profilesCodecsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1), )
if mibBuilder.loadTexts: profilesCodecsTable.setStatus('current')
if mibBuilder.loadTexts: profilesCodecsTable.setDescription(' ')
profilesCodecsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "profileNumber"))
if mibBuilder.loadTexts: profilesCodecsEntry.setStatus('current')
if mibBuilder.loadTexts: profilesCodecsEntry.setDescription(' ')
useG711A = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG711A.setStatus('current')
if mibBuilder.loadTexts: useG711A.setDescription('order by 1 to N or 0(not use)')
useG711U = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG711U.setStatus('current')
if mibBuilder.loadTexts: useG711U.setDescription('order by 1 to N or 0(not use)')
useG726to32 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG726to32.setStatus('current')
if mibBuilder.loadTexts: useG726to32.setDescription('order by 1 to N or 0(not use)')
useG723 = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG723.setStatus('current')
if mibBuilder.loadTexts: useG723.setDescription('order by 1 to N or 0(not use)')
useG729B = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG729B.setStatus('current')
if mibBuilder.loadTexts: useG729B.setDescription('order by 1 to N or 0(not use)')
useG729A = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useG729A.setStatus('current')
if mibBuilder.loadTexts: useG729A.setDescription('order by 1 to N or 0(not use)')
g711Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g711Ptime.setStatus('current')
if mibBuilder.loadTexts: g711Ptime.setDescription('10,20,30..60')
g729Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g729Ptime.setStatus('current')
if mibBuilder.loadTexts: g729Ptime.setDescription('10,20,30..80')
g723Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g723Ptime.setStatus('current')
if mibBuilder.loadTexts: g723Ptime.setDescription('30,60,90')
g726to32Ptime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g726to32Ptime.setStatus('current')
if mibBuilder.loadTexts: g726to32Ptime.setDescription('10,20,30')
g726to32PT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g726to32PT.setStatus('current')
if mibBuilder.loadTexts: g726to32PT.setDescription('96..127')
dtmfTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 13), TauDtmfTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmfTransfer.setStatus('current')
if mibBuilder.loadTexts: dtmfTransfer.setDescription('')
flashTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 14), TauFlashTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flashTransfer.setStatus('current')
if mibBuilder.loadTexts: flashTransfer.setDescription('')
faxDetectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 15), TauFaxDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxDetectDirection.setStatus('current')
if mibBuilder.loadTexts: faxDetectDirection.setDescription('')
faxTransferCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 16), TauFaxTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faxTransferCodec.setStatus('current')
if mibBuilder.loadTexts: faxTransferCodec.setDescription('')
slaveFaxTransferCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 17), TauFaxTransferSlaveType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slaveFaxTransferCodec.setStatus('current')
if mibBuilder.loadTexts: slaveFaxTransferCodec.setDescription('')
modemTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 18), TauModemTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTransfer.setStatus('current')
if mibBuilder.loadTexts: modemTransfer.setDescription('')
rfc2833PT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfc2833PT.setStatus('current')
if mibBuilder.loadTexts: rfc2833PT.setDescription('96..127')
silenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: silenceSuppression.setStatus('current')
if mibBuilder.loadTexts: silenceSuppression.setDescription('')
echoCanceller = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: echoCanceller.setStatus('current')
if mibBuilder.loadTexts: echoCanceller.setDescription('')
nlpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlpDisable.setStatus('current')
if mibBuilder.loadTexts: nlpDisable.setDescription('')
comfortNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comfortNoise.setStatus('current')
if mibBuilder.loadTexts: comfortNoise.setDescription('')
rtcpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpTimer.setStatus('current')
if mibBuilder.loadTexts: rtcpTimer.setDescription('5..65535')
rtcpControlPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpControlPeriod.setStatus('current')
if mibBuilder.loadTexts: rtcpControlPeriod.setDescription('2..65535')
ciscoNsePT = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoNsePT.setStatus('current')
if mibBuilder.loadTexts: ciscoNsePT.setDescription('96..127')
t38MaxDatagramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38MaxDatagramSize.setStatus('current')
if mibBuilder.loadTexts: t38MaxDatagramSize.setDescription('272..512')
t38Bitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t38Bitrate.setStatus('current')
if mibBuilder.loadTexts: t38Bitrate.setDescription('9600,14400')
modemFaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 29), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemFaxDelay.setStatus('current')
if mibBuilder.loadTexts: modemFaxDelay.setDescription('0..200')
voiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 30), TauVoiceModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceMode.setStatus('current')
if mibBuilder.loadTexts: voiceMode.setDescription('')
voiceDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 31), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDelayMin.setStatus('current')
if mibBuilder.loadTexts: voiceDelayMin.setDescription('0..200')
voiceDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 32), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDelayMax.setStatus('current')
if mibBuilder.loadTexts: voiceDelayMax.setDescription('2..200')
voiceDeletionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 33), Integer32()).setUnits('ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDeletionThreshold.setStatus('current')
if mibBuilder.loadTexts: voiceDeletionThreshold.setDescription('200..500')
voiceDeletionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 34), TauvoiceDeletionModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceDeletionMode.setStatus('current')
if mibBuilder.loadTexts: voiceDeletionMode.setDescription('')
profilesCodecsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: profilesCodecsRowStatus.setStatus('current')
if mibBuilder.loadTexts: profilesCodecsRowStatus.setDescription(' ')
rtcpXR = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 36), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtcpXR.setStatus('current')
if mibBuilder.loadTexts: rtcpXR.setDescription('')
rfc3264PtCommon = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 30, 7, 1, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfc3264PtCommon.setStatus('current')
if mibBuilder.loadTexts: rfc3264PtCommon.setDescription('Decoding rfc2833 with PT from answer SDP TAU-SIP 2.9')
tauSnmpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31))
tauTrapSink = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauTrapSink.setStatus('current')
if mibBuilder.loadTexts: tauTrapSink.setDescription('')
tauTrapType = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 2), TauTrapVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauTrapType.setStatus('current')
if mibBuilder.loadTexts: tauTrapType.setDescription('1,2')
tauSysName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauSysName.setStatus('current')
if mibBuilder.loadTexts: tauSysName.setDescription('')
tauSysContact = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauSysContact.setStatus('current')
if mibBuilder.loadTexts: tauSysContact.setDescription('')
tauSysLocation = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauSysLocation.setStatus('current')
if mibBuilder.loadTexts: tauSysLocation.setDescription('')
tauRoCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauRoCommunity.setStatus('current')
if mibBuilder.loadTexts: tauRoCommunity.setDescription('')
tauRwCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauRwCommunity.setStatus('current')
if mibBuilder.loadTexts: tauRwCommunity.setDescription('')
tauTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: tauTrapCommunity.setDescription('')
tauUserV3Name = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauUserV3Name.setStatus('current')
if mibBuilder.loadTexts: tauUserV3Name.setDescription('')
tauUserV3Password = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauUserV3Password.setStatus('current')
if mibBuilder.loadTexts: tauUserV3Password.setDescription('')
tauViewV3Type = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 11), TauUserViewType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauViewV3Type.setStatus('current')
if mibBuilder.loadTexts: tauViewV3Type.setDescription('1read,2readwrite')
tauRestartSnmp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 31, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauRestartSnmp.setStatus('current')
if mibBuilder.loadTexts: tauRestartSnmp.setDescription('set True to restart snmpd with new snmp-config')
tauMegacoTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32), )
if mibBuilder.loadTexts: tauMegacoTrapsTable.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapsTable.setDescription('TAU-MEGACO traps table. also used for SMG SBC MSR')
tauMegacoTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1), ).setIndexNames((0, "ELTEX-FXS72", "tauMegacoTrapId"))
if mibBuilder.loadTexts: tauMegacoTrapsEntry.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapsEntry.setDescription(' ')
tauMegacoTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tauMegacoTrapId.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapId.setDescription('')
tauMegacoTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 2), TauMegacoTrapVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapType.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapType.setDescription('')
tauMegacoTrapHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapHost.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapHost.setDescription('')
tauMegacoTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapCommunity.setDescription('')
tauMegacoTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tauMegacoTrapPort.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapPort.setDescription('')
tauMegacoTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 32, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tauMegacoTrapRowStatus.setStatus('current')
if mibBuilder.loadTexts: tauMegacoTrapRowStatus.setDescription('')
fxoSerialGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34))
fxoSerialGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1), )
if mibBuilder.loadTexts: fxoSerialGroupsTable.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsTable.setDescription(' ')
fxoSerialGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsDialPlanNumber"))
if mibBuilder.loadTexts: fxoSerialGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsEntry.setDescription(' ')
fxoSerialGroupsPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsPhone.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsPhone.setDescription(' ')
fxoSerialGroupsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 2), FxsGroupSerialEnableType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsEnabled.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsEnabled.setDescription(' ')
fxoSerialGroupsBusyType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 3), FxoGroupBusyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsBusyType.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsBusyType.setDescription(' ')
fxoSerialGroupsSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsSipPort.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsSipPort.setDescription(' ')
fxoSerialGroupsAuthName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsAuthName.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsAuthName.setDescription(' ')
fxoSerialGroupsAuthPass = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsAuthPass.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsAuthPass.setDescription(' ')
fxoSerialGroupsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsPorts.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsPorts.setDescription(' ')
fxoSerialGroupsSipProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsSipProfile.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsSipProfile.setDescription(' ')
fxoSerialGroupsTransmitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsTransmitNumber.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsTransmitNumber.setDescription(' ')
fxoSerialGroupsDontTransmitPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsDontTransmitPrefix.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsDontTransmitPrefix.setDescription(' ')
fxoSerialGroupsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fxoSerialGroupsRowStatus.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsRowStatus.setDescription(' ')
fxoSerialGroupsSend503OnBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsSend503OnBusy.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsSend503OnBusy.setDescription('Send 503 Service unavailable on busy (SIP) TAU-SIP 2.7')
fxoSerialGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 34, 1, 1, 13), FxoGroupType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxoSerialGroupsType.setStatus('current')
if mibBuilder.loadTexts: fxoSerialGroupsType.setDescription('group type TAU-SIP 2.9')
fxsNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35))
fxsAutoupdateSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1))
fxsEnableAutoupdate = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsEnableAutoupdate.setStatus('current')
if mibBuilder.loadTexts: fxsEnableAutoupdate.setDescription('true if autoupdate enabled, false otherwise')
fxsSource = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 2), FxsNetworkAutoupdateSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsSource.setStatus('current')
if mibBuilder.loadTexts: fxsSource.setDescription('dhcp, dhcpVlan1, dhcpVlan2, dhcpVlan3, noDhcp')
fxsTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsTFTPServer.setStatus('current')
if mibBuilder.loadTexts: fxsTFTPServer.setDescription('IP or domain name of tftp server 2.13 - 128 symbols')
fxsConfigurationFile = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigurationFile.setStatus('current')
if mibBuilder.loadTexts: fxsConfigurationFile.setDescription('path to configuration file (tau.dat)')
fxsFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: fxsFirmwareVersion.setDescription('path to version file (tau.versions)')
fxsConfigurationUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsConfigurationUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: fxsConfigurationUpdateInterval.setDescription('configuration update interval (s): 0 - disabled or 60..65535')
fxsFirmwareUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fxsFirmwareUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: fxsFirmwareUpdateInterval.setDescription('firmware update interval (s): 0 - disabled or 60..65535')
autoupdateProtocol = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 8), AutoupdateProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdateProtocol.setStatus('current')
if mibBuilder.loadTexts: autoupdateProtocol.setDescription('tftp|ftp|http|https TAU-SIP 2.12')
autoupdateAuth = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdateAuth.setStatus('current')
if mibBuilder.loadTexts: autoupdateAuth.setDescription('TAU-SIP 2.12')
autoupdateUser = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdateUser.setStatus('current')
if mibBuilder.loadTexts: autoupdateUser.setDescription('TAU-SIP 2.12')
autoupdatePassword = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 35, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoupdatePassword.setStatus('current')
if mibBuilder.loadTexts: autoupdatePassword.setDescription('TAU-SIP 2.12')
fxsVoipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37))
fansForceEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansForceEnable.setStatus('current')
if mibBuilder.loadTexts: fansForceEnable.setDescription('true if fans ON, false otherwise')
fansThresholdTemperature = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(35, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fansThresholdTemperature.setStatus('current')
if mibBuilder.loadTexts: fansThresholdTemperature.setDescription('fans_threshold_temperature (C): 35..55 default 55')
deviceName = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setStatus('current')
if mibBuilder.loadTexts: deviceName.setDescription('Device name TAU-SIP 2.9. max 20 symbols 2.13 - 128 symbols')
startTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startTimer.setStatus('current')
if mibBuilder.loadTexts: startTimer.setDescription('Start timer (sec, from 10 to 300) TAU-SIP 2.9')
durationTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: durationTimer.setStatus('current')
if mibBuilder.loadTexts: durationTimer.setDescription('Duration timer (sec, from 10 to 300) TAU-SIP 2.9')
waitAnswerTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waitAnswerTimer.setStatus('current')
if mibBuilder.loadTexts: waitAnswerTimer.setDescription('Wait answer timer (sec, from 40 to 300) TAU-SIP 2.9')
powerMode = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 7), PowerMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMode.setStatus('current')
if mibBuilder.loadTexts: powerMode.setDescription('TAU-SIP 2.9. for 32M-revB')
siptUsePrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siptUsePrefix.setStatus('current')
if mibBuilder.loadTexts: siptUsePrefix.setDescription('Use prefix (SIP-T) TAU-SIP 2.10')
siptPrefix = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 37, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siptPrefix.setStatus('current')
if mibBuilder.loadTexts: siptPrefix.setDescription('Prefix (SIP-T) TAU-SIP 2.10. max 20 symbols')
fxsSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38))
runSyslog = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: runSyslog.setStatus('current')
if mibBuilder.loadTexts: runSyslog.setDescription('Run syslog on startup')
syslogAddr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogAddr.setStatus('current')
if mibBuilder.loadTexts: syslogAddr.setDescription(' ')
syslogPort = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPort.setStatus('current')
if mibBuilder.loadTexts: syslogPort.setDescription(' ')
appAlarm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appAlarm.setStatus('current')
if mibBuilder.loadTexts: appAlarm.setDescription(' TAU-SIP 2.9')
appErr = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appErr.setStatus('current')
if mibBuilder.loadTexts: appErr.setDescription(' ')
appWarn = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appWarn.setStatus('current')
if mibBuilder.loadTexts: appWarn.setDescription(' ')
appInfo = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appInfo.setStatus('current')
if mibBuilder.loadTexts: appInfo.setDescription(' ')
appDbg = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appDbg.setStatus('current')
if mibBuilder.loadTexts: appDbg.setDescription(' ')
sipLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 8), SipLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sipLevel.setStatus('current')
if mibBuilder.loadTexts: sipLevel.setDescription(' ')
h323Level = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 9), H323LogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323Level.setStatus('current')
if mibBuilder.loadTexts: h323Level.setDescription(' ')
vapiEnabled = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapiEnabled.setStatus('current')
if mibBuilder.loadTexts: vapiEnabled.setDescription(' ')
vapiLibLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 11), VapiLibLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapiLibLevel.setStatus('current')
if mibBuilder.loadTexts: vapiLibLevel.setDescription(' ')
vapiAppLevel = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 38, 12), VapiAppLogLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vapiAppLevel.setStatus('current')
if mibBuilder.loadTexts: vapiAppLevel.setDescription(' ')
testPortsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39), )
if mibBuilder.loadTexts: testPortsTable.setStatus('current')
if mibBuilder.loadTexts: testPortsTable.setDescription('TAU-SIP 2.7')
testPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxsPortNumber"))
if mibBuilder.loadTexts: testPortsTableEntry.setStatus('current')
if mibBuilder.loadTexts: testPortsTableEntry.setDescription(' ')
portTestTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 1), FxsPortTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestTestStatus.setStatus('current')
if mibBuilder.loadTexts: portTestTestStatus.setDescription(' ')
portTestTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestTestStartTime.setStatus('current')
if mibBuilder.loadTexts: portTestTestStartTime.setDescription('time in sec by epoch')
portTestLastTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestLastTestStartTime.setStatus('current')
if mibBuilder.loadTexts: portTestLastTestStartTime.setDescription('time in sec by epoch')
portTestLastTestEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestLastTestEndTime.setStatus('current')
if mibBuilder.loadTexts: portTestLastTestEndTime.setDescription('time in sec by epoch')
portTestResultFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 5), FxsPortTestFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResultFlag.setStatus('current')
if mibBuilder.loadTexts: portTestResultFlag.setDescription(' ')
portTestRingU = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 6), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestRingU.setStatus('current')
if mibBuilder.loadTexts: portTestRingU.setDescription('Ub (External voltage RING)')
portTestTipU = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 7), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestTipU.setStatus('current')
if mibBuilder.loadTexts: portTestTipU.setDescription('Ua (External voltage TIP)')
portTestShortVbat = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 8), DisplayString()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestShortVbat.setStatus('current')
if mibBuilder.loadTexts: portTestShortVbat.setDescription('Ubat (Short line supply voltage)')
portTestResistTr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 9), DisplayString()).setUnits('kOhm').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResistTr.setStatus('current')
if mibBuilder.loadTexts: portTestResistTr.setDescription('Rab (Resist TIP-RING)')
portTestResistTg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 10), DisplayString()).setUnits('kOhm').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResistTg.setStatus('current')
if mibBuilder.loadTexts: portTestResistTg.setDescription('Ra (Resist TIP-GND)')
portTestResistRg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 11), DisplayString()).setUnits('kOhm').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestResistRg.setStatus('current')
if mibBuilder.loadTexts: portTestResistRg.setDescription('Rb (Resist RING-GND)')
portTestCapacityTr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 12), DisplayString()).setUnits('uF').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestCapacityTr.setStatus('current')
if mibBuilder.loadTexts: portTestCapacityTr.setDescription('Cab (Capacity TIP-RING)')
portTestCapacityTg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 13), DisplayString()).setUnits('uF').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestCapacityTg.setStatus('current')
if mibBuilder.loadTexts: portTestCapacityTg.setDescription('Ca (Capacity TIP-GND)')
portTestCapacityRg = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 14), DisplayString()).setUnits('uF').setMaxAccess("readonly")
if mibBuilder.loadTexts: portTestCapacityRg.setStatus('current')
if mibBuilder.loadTexts: portTestCapacityRg.setDescription('Cb (Capacity RING-GND)')
portTestRunTest = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 39, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTestRunTest.setStatus('current')
if mibBuilder.loadTexts: portTestRunTest.setDescription('set 1 to run test')
monitorSerialGroupsMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorSerialGroupsMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: monitorSerialGroupsMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
monitorSerialGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41), )
if mibBuilder.loadTexts: monitorSerialGroupsTable.setStatus('current')
if mibBuilder.loadTexts: monitorSerialGroupsTable.setDescription('TAU-SIP 2.7')
monitorSerialGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1), ).setIndexNames((0, "ELTEX-FXS72", "serialGroupNumber"))
if mibBuilder.loadTexts: monitorSerialGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: monitorSerialGroupsEntry.setDescription(' ')
serialGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: serialGroupNumber.setStatus('current')
if mibBuilder.loadTexts: serialGroupNumber.setDescription(' ')
serialGroupPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupPhone.setStatus('current')
if mibBuilder.loadTexts: serialGroupPhone.setDescription(' ')
serialGroupRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 3), GroupRegistrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupRegistrationState.setStatus('current')
if mibBuilder.loadTexts: serialGroupRegistrationState.setDescription(' ')
serialGroupRegistrationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupRegistrationHost.setStatus('current')
if mibBuilder.loadTexts: serialGroupRegistrationHost.setDescription(' ')
serialGroupLastRegistrationAt = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupLastRegistrationAt.setStatus('current')
if mibBuilder.loadTexts: serialGroupLastRegistrationAt.setDescription(' ')
serialGroupNextRegistrationAfter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupNextRegistrationAfter.setStatus('current')
if mibBuilder.loadTexts: serialGroupNextRegistrationAfter.setDescription(' ')
serialGroupH323GK = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 41, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialGroupH323GK.setStatus('current')
if mibBuilder.loadTexts: serialGroupH323GK.setDescription(' ')
monitorFxoGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42), )
if mibBuilder.loadTexts: monitorFxoGroupsTable.setStatus('current')
if mibBuilder.loadTexts: monitorFxoGroupsTable.setDescription(' ')
monitorFxoGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1), ).setIndexNames((0, "ELTEX-FXS72", "fxoGroupNumber"))
if mibBuilder.loadTexts: monitorFxoGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: monitorFxoGroupsEntry.setDescription('TAU-SIP 2.7')
fxoGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fxoGroupNumber.setStatus('current')
if mibBuilder.loadTexts: fxoGroupNumber.setDescription(' ')
fxoGroupPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupPhone.setStatus('current')
if mibBuilder.loadTexts: fxoGroupPhone.setDescription(' ')
fxoGroupRegistrationState = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 3), GroupRegistrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupRegistrationState.setStatus('current')
if mibBuilder.loadTexts: fxoGroupRegistrationState.setDescription(' ')
fxoGroupRegistrationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupRegistrationHost.setStatus('current')
if mibBuilder.loadTexts: fxoGroupRegistrationHost.setDescription(' ')
fxoGroupLastRegistrationAt = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupLastRegistrationAt.setStatus('current')
if mibBuilder.loadTexts: fxoGroupLastRegistrationAt.setDescription(' ')
fxoGroupNextRegistrationAfter = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupNextRegistrationAfter.setStatus('current')
if mibBuilder.loadTexts: fxoGroupNextRegistrationAfter.setDescription(' ')
fxoGroupH323GK = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 42, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fxoGroupH323GK.setStatus('current')
if mibBuilder.loadTexts: fxoGroupH323GK.setDescription(' ')
firewallTableMIBBoundary = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firewallTableMIBBoundary.setStatus('current')
if mibBuilder.loadTexts: firewallTableMIBBoundary.setDescription('Dummy object to prevent GETNEXT request from poking into neighbor table.')
firewallConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44))
firewallTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1), )
if mibBuilder.loadTexts: firewallTable.setStatus('current')
if mibBuilder.loadTexts: firewallTable.setDescription('TAU-SIP 2.7')
firewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1), ).setIndexNames((0, "ELTEX-FXS72", "ruleNumber"))
if mibBuilder.loadTexts: firewallEntry.setStatus('current')
if mibBuilder.loadTexts: firewallEntry.setDescription(' ')
ruleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ruleNumber.setStatus('current')
if mibBuilder.loadTexts: ruleNumber.setDescription(' ')
startingSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startingSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: startingSourceIpAddress.setDescription('Starting source IP address')
numberOfSourceIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfSourceIpAddresses.setStatus('current')
if mibBuilder.loadTexts: numberOfSourceIpAddresses.setDescription('Number of source IP addresses:')
allSourceIpAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allSourceIpAddresses.setStatus('current')
if mibBuilder.loadTexts: allSourceIpAddresses.setDescription('All source IP addresses')
ruleprotocol = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 5), FirewallProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleprotocol.setStatus('current')
if mibBuilder.loadTexts: ruleprotocol.setDescription('Protocol')
typeOfMessageICMP = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 6), TypeOfMessageICMP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: typeOfMessageICMP.setStatus('current')
if mibBuilder.loadTexts: typeOfMessageICMP.setDescription('Type of message (ICMP): for protocol ICMP only')
startingSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startingSourcePort.setStatus('current')
if mibBuilder.loadTexts: startingSourcePort.setDescription('Starting source port: from 1 to 65535, for protocols UDP, TCP only')
numberOfSourcePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfSourcePorts.setStatus('current')
if mibBuilder.loadTexts: numberOfSourcePorts.setDescription('Number of source ports: starting+number<=65535, for protocols UDP, TCP only')
allSourcePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allSourcePorts.setStatus('current')
if mibBuilder.loadTexts: allSourcePorts.setDescription('All source ports: for protocols UDP, TCP only')
startingDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startingDestinationPort.setStatus('current')
if mibBuilder.loadTexts: startingDestinationPort.setDescription('Starting destination port: from 1 to 65535, for protocols UDP, TCP only')
numberOfDestinationPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfDestinationPorts.setStatus('current')
if mibBuilder.loadTexts: numberOfDestinationPorts.setDescription('Number of destination ports: starting+number<=65535, for protocols UDP, TCP only')
allDestinationPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allDestinationPorts.setStatus('current')
if mibBuilder.loadTexts: allDestinationPorts.setDescription('All destination ports: for protocols UDP, TCP only')
ruleTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 13), FirewallTarget()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleTarget.setStatus('current')
if mibBuilder.loadTexts: ruleTarget.setDescription('Target')
ruleMoveTo = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruleMoveTo.setStatus('current')
if mibBuilder.loadTexts: ruleMoveTo.setDescription('set new position of rule (1..30)')
ruleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ruleRowStatus.setStatus('current')
if mibBuilder.loadTexts: ruleRowStatus.setDescription(' ')
firewallApply = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firewallApply.setStatus('current')
if mibBuilder.loadTexts: firewallApply.setDescription('set to apply firewall config it will rollback in ? second without firewallConfirm TAU-SIP 2.7')
firewallConfirm = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 44, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firewallConfirm.setStatus('current')
if mibBuilder.loadTexts: firewallConfirm.setDescription('set to confirm firewall config firewallCommit kill firewallApply-timer TAU-SIP 2.7')
configTcpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45))
rtpSipMin = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(23000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtpSipMin.setStatus('current')
if mibBuilder.loadTexts: rtpSipMin.setDescription('RTP SIP min. TAU-SIP 2.9')
rtpSipMax = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(23896)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtpSipMax.setStatus('current')
if mibBuilder.loadTexts: rtpSipMax.setDescription('RTP SIP max. TAU-SIP 2.9')
interceptPortMin = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interceptPortMin.setStatus('current')
if mibBuilder.loadTexts: interceptPortMin.setDescription('Intercept port min. TAU-SIP 2.9')
interceptPortMax = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65500)).clone(50100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interceptPortMax.setStatus('current')
if mibBuilder.loadTexts: interceptPortMax.setDescription('Intercept port max. TAU-SIP 2.9')
diffservForSip = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(104)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffservForSip.setStatus('current')
if mibBuilder.loadTexts: diffservForSip.setDescription('Diffserv for SIP. TAU-SIP 2.9')
diffservForRtp = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(184)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffservForRtp.setStatus('current')
if mibBuilder.loadTexts: diffservForRtp.setDescription('Diffserv for RTP. TAU-SIP 2.9')
verifyRemoteMediaAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 9, 45, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: verifyRemoteMediaAddress.setStatus('current')
if mibBuilder.loadTexts: verifyRemoteMediaAddress.setDescription('Verify remote media address. TAU-SIP 2.9')
callLimitTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46), )
if mibBuilder.loadTexts: callLimitTable.setStatus('current')
if mibBuilder.loadTexts: callLimitTable.setDescription('TAU-SIP 2.9')
callLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1), ).setIndexNames((0, "ELTEX-FXS72", "clIndex"))
if mibBuilder.loadTexts: callLimitEntry.setStatus('current')
if mibBuilder.loadTexts: callLimitEntry.setDescription(' ')
clIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: clIndex.setStatus('current')
if mibBuilder.loadTexts: clIndex.setDescription(' ')
clType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 2), CallLimitType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clType.setStatus('current')
if mibBuilder.loadTexts: clType.setDescription('proxy/gk or host')
clHostOfNeighbourGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clHostOfNeighbourGateway.setStatus('current')
if mibBuilder.loadTexts: clHostOfNeighbourGateway.setDescription('Host of neighbour gateway. max 255 symbols')
clSimultaneousCallsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clSimultaneousCallsCount.setStatus('current')
if mibBuilder.loadTexts: clSimultaneousCallsCount.setDescription('Simultaneous calls count')
clRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 46, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clRowStatus.setStatus('current')
if mibBuilder.loadTexts: clRowStatus.setDescription(' ')
distinctiveRingTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47), )
if mibBuilder.loadTexts: distinctiveRingTable.setStatus('current')
if mibBuilder.loadTexts: distinctiveRingTable.setDescription('TAU-SIP 2.9')
distinctiveRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1), ).setIndexNames((0, "ELTEX-FXS72", "drId"))
if mibBuilder.loadTexts: distinctiveRingEntry.setStatus('current')
if mibBuilder.loadTexts: distinctiveRingEntry.setDescription(' ')
drId = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: drId.setStatus('current')
if mibBuilder.loadTexts: drId.setDescription(' ')
drRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drRule.setStatus('current')
if mibBuilder.loadTexts: drRule.setDescription('Rule. 50 symbol max')
drRing = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drRing.setStatus('current')
if mibBuilder.loadTexts: drRing.setDescription('Ring, x100 msec')
drPause = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drPause.setStatus('current')
if mibBuilder.loadTexts: drPause.setDescription('Pause, x100 msec')
drSubscriberProfiles = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 5), DRSubscriberProfilesType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drSubscriberProfiles.setStatus('current')
if mibBuilder.loadTexts: drSubscriberProfiles.setDescription('Subscriber profiles 1-8, bit mask: 0 bit = 1 profile, 7 bit = 8 profile. more description at DRSubscriberProfilesType')
drRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 47, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: drRowStatus.setStatus('current')
if mibBuilder.loadTexts: drRowStatus.setDescription(' ')
modifiersTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48), )
if mibBuilder.loadTexts: modifiersTable.setStatus('current')
if mibBuilder.loadTexts: modifiersTable.setDescription(' ')
modifiersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1), ).setIndexNames((0, "ELTEX-FXS72", "modifierNumber"), (0, "ELTEX-FXS72", "modifierRule"))
if mibBuilder.loadTexts: modifiersEntry.setStatus('current')
if mibBuilder.loadTexts: modifiersEntry.setDescription(' ')
modifierNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: modifierNumber.setStatus('current')
if mibBuilder.loadTexts: modifierNumber.setDescription('')
modifierRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: modifierRule.setStatus('current')
if mibBuilder.loadTexts: modifierRule.setDescription('')
modifierDialedNumberRegexpRule = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modifierDialedNumberRegexpRule.setStatus('current')
if mibBuilder.loadTexts: modifierDialedNumberRegexpRule.setDescription("Dialed number regexp rule (max len 50) Allowed symbols: - '|' - OR (rule part divider) - 'X', 'x' - any digit, equals to [0-9] - 0-9 - digits from 0 to 9 - '*', '#' - symbols - [] - borders of range for this symbol (example: [0-7], [138], [135*#]) - {min,max} - min/max symbol repeats (example: 5{2,5}) - '.' - previous digit, symbol or range is not mandatory or can has any repeats; exuals to 5{0,} (example: 35.*) - '+' - previous digit, symbol or range can has any repeats; exuals to 5{1,} (example: x5+#)")
modifierDialedNumberModification = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modifierDialedNumberModification.setStatus('current')
if mibBuilder.loadTexts: modifierDialedNumberModification.setDescription("Dialed number modification (max len 29) Allowed symbols: - '.', '-' - digit removing - 'X', 'x' - digit or symbol on this position is unchanging (mandatory); - '?' - digit or symbol on this position is unchanging (not mandatory); - '+' - next symblos will be added - '!' - end of parsing; all next symbols will be cutted - '$' - end of parsing; all next symbols will be unchanged - 0-9, '#', ‘*’ (without '+') - digit or symbol on this position will be replaced")
modifierCallingNumberModification = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modifierCallingNumberModification.setStatus('current')
if mibBuilder.loadTexts: modifierCallingNumberModification.setDescription('Calling number modification (max len 29) Allowed symbols like modifierDialedNumberModification')
modifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 9, 48, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: modifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: modifierRowStatus.setDescription('')
tauSubtypes = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90))
tau72sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 1))
tau36sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 2))
tau32Msip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 3))
tau72megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 4))
tau72v30sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 5))
tau36v30sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 6))
fxs72sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 7))
tau36megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 8))
tau72v30megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 9))
tau36v30megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 10))
fxs72megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 11))
fxs72v21 = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 12))
tau72v40sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 13))
tau36v40sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 14))
tau72v40megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 15))
tau36v40megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 16))
tau32MrevBsip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 17))
tau32Mmegaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 18))
tau32MrevBmegaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 19))
tau16sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 20))
tau24sip = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 21))
tau16megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 22))
tau24megaco = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 9, 90, 23))
fxsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 35265, 1, 9, 200))
for _fxsGroup_obj in [[("ELTEX-FXS72", "fxsDevName"), ("ELTEX-FXS72", "fxsDevType"), ("ELTEX-FXS72", "fxsDevCfgBuild"), ("ELTEX-FXS72", "fxsFreeSpace"), ("ELTEX-FXS72", "fxsFreeRam"), ("ELTEX-FXS72", "fxsSSwStatus"), ("ELTEX-FXS72", "fxsSSwStatusTime"), ("ELTEX-FXS72", "fxsCpuUsage"), ("ELTEX-FXS72", "fxsMonitoringVMode"), ("ELTEX-FXS72", "fxsMonitoringVBat"), ("ELTEX-FXS72", "fxsMonitoringVRing1"), ("ELTEX-FXS72", "fxsMonitoringVRing2"), ("ELTEX-FXS72", "fxsMonitoringTemp1"), ("ELTEX-FXS72", "fxsMonitoringTemp2"), ("ELTEX-FXS72", "fxsMonitoringTemp3"), ("ELTEX-FXS72", "fxsMonitoringTemp4"), ("ELTEX-FXS72", "fxsMonitoringFanState"), ("ELTEX-FXS72", "fxsMonitoringFan1Rotate"), ("ELTEX-FXS72", "fxsMonitoringFan2Rotate"), ("ELTEX-FXS72", "fxsMonitoringSubCooling"), ("ELTEX-FXS72", "fxsMonitoringVinput"), ("ELTEX-FXS72", "fxsMonitoringDevicePower"), ("ELTEX-FXS72", "fxsPortsMIBBoundary"), ("ELTEX-FXS72", "fxsPortPhoneNumber"), ("ELTEX-FXS72", "fxsPortState"), ("ELTEX-FXS72", "fxsPortUserName"), ("ELTEX-FXS72", "fxsPortTalkingNum"), ("ELTEX-FXS72", "fxsPortTalkingStartTime"), ("ELTEX-FXS72", "fxsPortSipConnected"), ("ELTEX-FXS72", "fxsPortH323Connected"), ("ELTEX-FXS72", "fxsPortSipConnecteNext"), ("ELTEX-FXS72", "fxsPortSipConnecteState"), ("ELTEX-FXS72", "fxsPortSipConnectHost"), ("ELTEX-FXS72", "fxsPortConfigPhone"), ("ELTEX-FXS72", "fxsPortConfigUserName"), ("ELTEX-FXS72", "fxsPortConfigAuthName"), ("ELTEX-FXS72", "fxsPortConfigAuthPass"), ("ELTEX-FXS72", "fxsPortConfigCustom"), ("ELTEX-FXS72", "fxsPortConfigPlaymoh"), ("ELTEX-FXS72", "fxsPortConfigAON"), ("ELTEX-FXS72", "fxsPortConfigAONHideDate"), ("ELTEX-FXS72", "fxsPortConfigAONHideName"), ("ELTEX-FXS72", "fxsPortConfigTaxophone"), ("ELTEX-FXS72", "fxsPortConfigMinFlashtime"), ("ELTEX-FXS72", "fxsPortConfigMaxFlashtime"), ("ELTEX-FXS72", "fxsPortConfigGainr"), ("ELTEX-FXS72", "fxsPortConfigGaint"), ("ELTEX-FXS72", "fxsPortConfigCategory"), ("ELTEX-FXS72", "fxsPortConfigCallTransfer"), ("ELTEX-FXS72", "fxsPortConfigCallWaiting"), ("ELTEX-FXS72", "fxsPortConfigHotLine"), ("ELTEX-FXS72", "fxsPortConfigHotNumber"), ("ELTEX-FXS72", "fxsPortConfigHotTimeout"), ("ELTEX-FXS72", "fxsPortConfigDisabled"), ("ELTEX-FXS72", "fxsPortConfigCtBusy"), ("ELTEX-FXS72", "fxsPortConfigCtUnconditional"), ("ELTEX-FXS72", "fxsPortConfigCtNoanswer"), ("ELTEX-FXS72", "fxsPortConfigCtTimeout"), ("ELTEX-FXS72", "fxsPortConfigClir"), ("ELTEX-FXS72", "fxsPortConfigStopDial"), ("ELTEX-FXS72", "fxsPortConfigAltNumber"), ("ELTEX-FXS72", "fxsPortConfigUseAltNumber"), ("ELTEX-FXS72", "fxsPortConfigPickUp"), ("ELTEX-FXS72", "fxsPortConfigSipPort"), ("ELTEX-FXS72", "fxsPortConfigCfgPriOverCw"), ("ELTEX-FXS72", "fxsPortConfigRowStatus"), ("ELTEX-FXS72", "fxsPortConfigDvoCwEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCtAttendedEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCtUnattendedEn"), ("ELTEX-FXS72", "fxsPortConfigDvoUnconditionalEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCfBusyEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCfAnswerEn"), ("ELTEX-FXS72", "fxsPortConfigDvoCfServiceEn"), ("ELTEX-FXS72", "fxsPortConfigDvoDoDisturbEn"), ("ELTEX-FXS72", "fxsPortConfigCtOutofservice"), ("ELTEX-FXS72", "fxsPortConfigCfuNumber"), ("ELTEX-FXS72", "fxsPortConfigCfbNumber"), ("ELTEX-FXS72", "fxsPortConfigCfnrNumber"), ("ELTEX-FXS72", "fxsPortConfigCfoosNumber"), ("ELTEX-FXS72", "fxsPortConfigDnd"), ("ELTEX-FXS72", "fxsPortConfigCtNumber"), ("ELTEX-FXS72", "fxsPortConfigEnableCpc"), ("ELTEX-FXS72", "fxsPortConfigCpcTime"), ("ELTEX-FXS72", "fxsPortConfigFxoFlashTime"), ("ELTEX-FXS72", "fxsPortConfigFxoDelTdm"), ("ELTEX-FXS72", "fxsPortConfigFxoRingtdm"), ("ELTEX-FXS72", "fxsPortConfigPstnNumberprefix"), ("ELTEX-FXS72", "fxsPortConfigPstnNameprefix"), ("ELTEX-FXS72", "fxsPortConfigUsePstnCid"), ("ELTEX-FXS72", "fxsPortConfigtdmhotline"), ("ELTEX-FXS72", "fxsPortConfigtdmhottimeout"), ("ELTEX-FXS72", "fxsPortConfigtdmhotnumber"), ("ELTEX-FXS72", "fxsPortConfigDontDetectDT"), ("ELTEX-FXS72", "fxsPortConfigDelayDialingTimeout"), ("ELTEX-FXS72", "fxsPortType"), ("ELTEX-FXS72", "fxsPortConfigDialing"), ("ELTEX-FXS72", "fxsPortConfigTransmitNumber"), ("ELTEX-FXS72", "fxsPortConfigDontTransmitPrefix"), ("ELTEX-FXS72", "fxsPortConfigPortProfileID"), ("ELTEX-FXS72", "fxsPortConfigSipProfileID"), ("ELTEX-FXS72", "fxsPortConfigDialToneDetectionParameters"), ("ELTEX-FXS72", "fxsPortConfigRingBackToneDetectionParameters"), ("ELTEX-FXS72", "fxsPortConfigBusyToneDetectionParameters"), ("ELTEX-FXS72", "fxsPortConfigDtDetectTime"), ("ELTEX-FXS72", "fxsPortConfigDecadePulseTime"), ("ELTEX-FXS72", "fxsPortConfigDecadePauseTime"), ("ELTEX-FXS72", "fxsPortConfigNoOffhookAtRinging"), ("ELTEX-FXS72", "fxsPortConfigFxoCallBusy"), ("ELTEX-FXS72", "fxsPortConfigCpcRus"), ("ELTEX-FXS72", "fxsPortConfigReversalPolarityAction"), ("ELTEX-FXS72", "fxsPortConfigPstnActivity"), ("ELTEX-FXS72", "fxsPortConfigPstnRbDetectTimeout"), ("ELTEX-FXS72", "fxsPortConfigDetectFxoLinePresence"), ("ELTEX-FXS72", "fxsPortConfigBlockFxoLineInOutgoingDirection"), ("ELTEX-FXS72", "fxsPortConfigFxoMinLevelDetect"), ("ELTEX-FXS72", "fxsPortConfigUseAltNumberAsContact"), ("ELTEX-FXS72", "fxsPortConfigModifier"), ("ELTEX-FXS72", "fxsPortConfigMwiDialtone"), ("ELTEX-FXS72", "fxsPortConfigCommonPlaymoh"), ("ELTEX-FXS72", "fxsPortConfigCommonAON"), ("ELTEX-FXS72", "fxsPortConfigCommonAONHideDate"), ("ELTEX-FXS72", "fxsPortConfigCommonAONHideName"), ("ELTEX-FXS72", "fxsPortConfigCommonTaxophone"), ("ELTEX-FXS72", "fxsPortConfigCommonMinFlashtime"), ("ELTEX-FXS72", "fxsPortConfigCommonMaxFlashtime"), ("ELTEX-FXS72", "fxsPortConfigCommonGainr"), ("ELTEX-FXS72", "fxsPortConfigCommonGaint"), ("ELTEX-FXS72", "fxsPortConfigCommonCategory"), ("ELTEX-FXS72", "fxsPortConfigCommonCallTransfer"), ("ELTEX-FXS72", "fxsPortConfigCommonCallWaiting"), ("ELTEX-FXS72", "fxsPortConfigCommonCfgPriOverCw"), ("ELTEX-FXS72", "fxsPortConfigCommonFxoFlashTime"), ("ELTEX-FXS72", "fxsPortConfigCommonFxoDelTdm"), ("ELTEX-FXS72", "fxsPortConfigCommonFxoRingtdm"), ("ELTEX-FXS72", "fxsPortConfigCommonPstnNumberprefix"), ("ELTEX-FXS72", "fxsPortConfigCommonPstnNameprefix"), ("ELTEX-FXS72", "fxsPortConfigCommonUsePstnCid"), ("ELTEX-FXS72", "fxsPortConfigCommonEnableCpc"), ("ELTEX-FXS72", "fxsPortConfigCommonCpcTime"), ("ELTEX-FXS72", "fxsPortConfigCommonDontDetectDT"), ("ELTEX-FXS72", "fxsPortConfigCommonDelayDialingTimeout"), ("ELTEX-FXS72", "fxsPortConfigCommonDialing"), ("ELTEX-FXS72", "fxsPortConfigCommonTransmitNumber"), ("ELTEX-FXS72", "fxsPortConfigCommonDontTransmitPrefix"), ("ELTEX-FXS72", "fxsDialMIBBoundary"), ("ELTEX-FXS72", "fxsDialPlanHost"), ("ELTEX-FXS72", "fxsDialPlanDigits"), ("ELTEX-FXS72", "fxsDialPlanTimeout"), ("ELTEX-FXS72", "fxsDialPlanMinDigits"), ("ELTEX-FXS72", "fxsDialPlanType"), ("ELTEX-FXS72", "fxsDialPlanAccessMask"), ("ELTEX-FXS72", "fxsDialPlanDialtone"), ("ELTEX-FXS72", "fxsDialPlanModifier"), ("ELTEX-FXS72", "fxsDialPlanNature"), ("ELTEX-FXS72", "fxsDialPlanDelnum"), ("ELTEX-FXS72", "fxsDialPlanPtime"), ("ELTEX-FXS72", "fxsDialRowStatus"), ("ELTEX-FXS72", "fxsDialPlanNext"), ("ELTEX-FXS72", "tauDialRegularOn"), ("ELTEX-FXS72", "tauDialRegularProtocol"), ("ELTEX-FXS72", "tauDialRegularText"), ("ELTEX-FXS72", "fxsConfigSave"), ("ELTEX-FXS72", "fxsConfigApply"), ("ELTEX-FXS72", "fxsSerialGroupsMIBBoundary"), ("ELTEX-FXS72", "fxsSerialGroupsPhone"), ("ELTEX-FXS72", "fxsSerialGroupsEnabled"), ("ELTEX-FXS72", "fxsSerialGroupsSerialType"), ("ELTEX-FXS72", "fxsSerialGroupsBusyType"), ("ELTEX-FXS72", "fxsSerialGroupsTimeout"), ("ELTEX-FXS72", "fxsSerialGroupsSipPort"), ("ELTEX-FXS72", "fxsSerialGroupsAuthName"), ("ELTEX-FXS72", "fxsSerialGroupsAuthPass"), ("ELTEX-FXS72", "fxsSerialGroupsPorts"), ("ELTEX-FXS72", "fxsSerialGroupsRowStatus"), ("ELTEX-FXS72", "fxsSerialGroupsSipProfile"), ("ELTEX-FXS72", "fxsSerialGroupsNextEmpty"), ("ELTEX-FXS72", "fxsReboot"), ("ELTEX-FXS72", "tauVoipDvoCallwaiting"), ("ELTEX-FXS72", "tauVoipDvoCtAttended"), ("ELTEX-FXS72", "tauVoipDvoCtUnattended"), ("ELTEX-FXS72", "tauVoipDvoCfUnconditional"), ("ELTEX-FXS72", "tauVoipDvoCfBusy"), ("ELTEX-FXS72", "tauVoipDvoCfNoanswer"), ("ELTEX-FXS72", "tauVoipDvoCfService"), ("ELTEX-FXS72", "tauVoipDvoDoDisturb"), ("ELTEX-FXS72", "sipEnablesip"), ("ELTEX-FXS72", "sipObtimeout"), ("ELTEX-FXS72", "sipMode"), ("ELTEX-FXS72", "sipOptions"), ("ELTEX-FXS72", "sipKeepalivet"), ("ELTEX-FXS72", "sipDomainToReg"), ("ELTEX-FXS72", "sipDomain"), ("ELTEX-FXS72", "sipRegisterRetryInterval"), ("ELTEX-FXS72", "sipOutbound"), ("ELTEX-FXS72", "sipInboundProxy"), ("ELTEX-FXS72", "sipExpires"), ("ELTEX-FXS72", "sipAuthentication"), ("ELTEX-FXS72", "sipUsername"), ("ELTEX-FXS72", "sipPassword"), ("ELTEX-FXS72", "sipProxy0"), ("ELTEX-FXS72", "sipRegrar0"), ("ELTEX-FXS72", "sipRegistration0"), ("ELTEX-FXS72", "sipProxy1"), ("ELTEX-FXS72", "sipRegrar1"), ("ELTEX-FXS72", "sipProxy2"), ("ELTEX-FXS72", "sipRegrar2"), ("ELTEX-FXS72", "sipProxy3"), ("ELTEX-FXS72", "sipRegrar3"), ("ELTEX-FXS72", "sipProxy4"), ("ELTEX-FXS72", "sipRegrar4"), ("ELTEX-FXS72", "sipDtmfmime"), ("ELTEX-FXS72", "sipHfmime"), ("ELTEX-FXS72", "sipCtWithReplaces"), ("ELTEX-FXS72", "sipShortmode"), ("ELTEX-FXS72", "sipTransport"), ("ELTEX-FXS72", "sipSipMtu"), ("ELTEX-FXS72", "sip100Rel"), ("ELTEX-FXS72", "sipUserPhone"), ("ELTEX-FXS72", "sipUriEscapeHash"), ("ELTEX-FXS72", "sipInviteTotalT"), ("ELTEX-FXS72", "sipInviteInitT"), ("ELTEX-FXS72", "sipCwRingback"), ("ELTEX-FXS72", "sipRingbackSdp"), ("ELTEX-FXS72", "sipRingback"), ("ELTEX-FXS72", "sipRegistration1"), ("ELTEX-FXS72", "sipRegistration2"), ("ELTEX-FXS72", "sipRegistration3"), ("ELTEX-FXS72", "sipRegistration4"), ("ELTEX-FXS72", "sipPRTPstat"), ("ELTEX-FXS72", "termID"), ("ELTEX-FXS72", "currentState"), ("ELTEX-FXS72", "totalCallCount"), ("ELTEX-FXS72", "lastCallPhone"), ("ELTEX-FXS72", "peakJitter"), ("ELTEX-FXS72", "lostPackets"), ("ELTEX-FXS72", "numTxPack"), ("ELTEX-FXS72", "numTxOct"), ("ELTEX-FXS72", "numRxPack"), ("ELTEX-FXS72", "numRxOct"), ("ELTEX-FXS72", "fxsUpdateFw"), ("ELTEX-FXS72", "sipCommonEnablesip"), ("ELTEX-FXS72", "sipCommonShortmode"), ("ELTEX-FXS72", "sipCommonTransport"), ("ELTEX-FXS72", "sipCommonSipMtu"), ("ELTEX-FXS72", "sipCommonInviteTotalT"), ("ELTEX-FXS72", "sipCommonInviteInitT"), ("ELTEX-FXS72", "sipCommonPortRegistrationDelay"), ("ELTEX-FXS72", "profilesSipMIBBoundary"), ("ELTEX-FXS72", "profileNumber"), ("ELTEX-FXS72", "sipProfileObtimeout"), ("ELTEX-FXS72", "sipProfileMode"), ("ELTEX-FXS72", "sipProfileOptions"), ("ELTEX-FXS72", "sipProfileKeepalivet"), ("ELTEX-FXS72", "sipProfileDomainToReg"), ("ELTEX-FXS72", "sipProfileRegisterRetryInterval")], [("ELTEX-FXS72", "sipProfileOutbound"), ("ELTEX-FXS72", "sipProfileInboundProxy"), ("ELTEX-FXS72", "sipProfileExpires"), ("ELTEX-FXS72", "sipProfileAuthentication"), ("ELTEX-FXS72", "sipProfileUsername"), ("ELTEX-FXS72", "sipProfilePassword"), ("ELTEX-FXS72", "sipProfileProxy0"), ("ELTEX-FXS72", "sipProfileRegrar0"), ("ELTEX-FXS72", "sipProfileRegistration0"), ("ELTEX-FXS72", "sipProfileProxy1"), ("ELTEX-FXS72", "sipProfileRegrar1"), ("ELTEX-FXS72", "sipProfileProxy2"), ("ELTEX-FXS72", "sipProfileRegrar2"), ("ELTEX-FXS72", "sipProfileProxy3"), ("ELTEX-FXS72", "sipProfileRegrar3"), ("ELTEX-FXS72", "sipProfileProxy4"), ("ELTEX-FXS72", "sipProfileRegrar4"), ("ELTEX-FXS72", "sipProfileDtmfmime"), ("ELTEX-FXS72", "sipProfileHfmime"), ("ELTEX-FXS72", "sipProfileCtWithReplaces"), ("ELTEX-FXS72", "sipProfile100Rel"), ("ELTEX-FXS72", "sipProfileUserPhone"), ("ELTEX-FXS72", "sipProfileUriEscapeHash"), ("ELTEX-FXS72", "sipProfileCwRingback"), ("ELTEX-FXS72", "sipProfileRingbackSdp"), ("ELTEX-FXS72", "sipProfileRingback"), ("ELTEX-FXS72", "sipProfileRegistration1"), ("ELTEX-FXS72", "sipProfileRegistration2"), ("ELTEX-FXS72", "sipProfileRegistration3"), ("ELTEX-FXS72", "sipProfileRegistration4"), ("ELTEX-FXS72", "sipProfilePRTPstat"), ("ELTEX-FXS72", "sipProfileRowStatus"), ("ELTEX-FXS72", "sipProfileDomain"), ("ELTEX-FXS72", "sipProfileEnableTimer"), ("ELTEX-FXS72", "sipProfileMinSE"), ("ELTEX-FXS72", "sipProfileSessionExpires"), ("ELTEX-FXS72", "sipProfileRemoveInactiveMedia"), ("ELTEX-FXS72", "sipProfileKeepAliveInterval"), ("ELTEX-FXS72", "sipProfileKeepAliveMode"), ("ELTEX-FXS72", "sipProfileConferenceMode"), ("ELTEX-FXS72", "sipProfileConferenceServer"), ("ELTEX-FXS72", "sipProfileEnableIMS"), ("ELTEX-FXS72", "sipProfileXCAPNameForThreePartyConference"), ("ELTEX-FXS72", "sipProfileXCAPNameForHotline"), ("ELTEX-FXS72", "sipProfileXCAPNameForCallWaiting"), ("ELTEX-FXS72", "sipProfileXCAPNameForCallHold"), ("ELTEX-FXS72", "sipProfileXCAPNameForExplicitCallTransfer"), ("ELTEX-FXS72", "sipProfileUseAlertInfo"), ("ELTEX-FXS72", "sipProfileFullRuriCompliance"), ("ELTEX-FXS72", "sipProfileChangeover"), ("ELTEX-FXS72", "profilesPortsMIBBoundary"), ("ELTEX-FXS72", "profilePortsPlaymoh"), ("ELTEX-FXS72", "profilePortsAON"), ("ELTEX-FXS72", "profilePortsAONHideDate"), ("ELTEX-FXS72", "profilePortsAONHideName"), ("ELTEX-FXS72", "profilePortsTaxophone"), ("ELTEX-FXS72", "profilePortsMinFlashtime"), ("ELTEX-FXS72", "profilePortsMaxFlashtime"), ("ELTEX-FXS72", "profilePortsGainr"), ("ELTEX-FXS72", "profilePortsGaint"), ("ELTEX-FXS72", "profilePortsCategory"), ("ELTEX-FXS72", "profilePortsCallTransfer"), ("ELTEX-FXS72", "profilePortsCallWaiting"), ("ELTEX-FXS72", "profilePortsCfgPriOverCw"), ("ELTEX-FXS72", "profilePortsFxoFlashTime"), ("ELTEX-FXS72", "profilePortsFxoDelTdm"), ("ELTEX-FXS72", "profilePortsFxoRingtdm"), ("ELTEX-FXS72", "profilePortsPstnNumberprefix"), ("ELTEX-FXS72", "profilePortsPstnNameprefix"), ("ELTEX-FXS72", "profilePortsUsePstnCid"), ("ELTEX-FXS72", "profilePortsEnableCpc"), ("ELTEX-FXS72", "profilePortsCpcTime"), ("ELTEX-FXS72", "profilePortsDontDetectDT"), ("ELTEX-FXS72", "profilePortsDelayDialingTimeout"), ("ELTEX-FXS72", "profilePortsDialing"), ("ELTEX-FXS72", "profilePortsTransmitNumber"), ("ELTEX-FXS72", "profilePortsDontTransmitPrefix"), ("ELTEX-FXS72", "profilePortsRowStatus"), ("ELTEX-FXS72", "profilePortsDialToneDetectionParameters"), ("ELTEX-FXS72", "profilePortsRingBackToneDetectionParameters"), ("ELTEX-FXS72", "profilePortsBusyToneDetectionParameters"), ("ELTEX-FXS72", "profilePortsDtDetectTime"), ("ELTEX-FXS72", "profilePortsDecadePulseTime"), ("ELTEX-FXS72", "profilePortsDecadePauseTime"), ("ELTEX-FXS72", "profilePortsFxoCallBusy"), ("ELTEX-FXS72", "profilePortsCpcRus"), ("ELTEX-FXS72", "profilePortsReversalPolarityAction"), ("ELTEX-FXS72", "profilePortsPstnActivity"), ("ELTEX-FXS72", "profilePortsPstnRbDetectTimeout"), ("ELTEX-FXS72", "profilePortsDetectFxoLinePresence"), ("ELTEX-FXS72", "profilePortsBlockFxoLineInOutgoingDirection"), ("ELTEX-FXS72", "profilePortsStopDial"), ("ELTEX-FXS72", "profilePortsFxoMinLevelDetect"), ("ELTEX-FXS72", "profilePortsModifier"), ("ELTEX-FXS72", "profilesDialPlansMIBBoundary"), ("ELTEX-FXS72", "profileDialPlanHost"), ("ELTEX-FXS72", "profileDialPlanDigits"), ("ELTEX-FXS72", "profileDialPlanTimeout"), ("ELTEX-FXS72", "profileDialPlanMinDigits"), ("ELTEX-FXS72", "profileDialPlanType"), ("ELTEX-FXS72", "profileDialPlanAccessMask"), ("ELTEX-FXS72", "profileDialPlanDialtone"), ("ELTEX-FXS72", "profileDialPlanModifier"), ("ELTEX-FXS72", "profileDialPlanNature"), ("ELTEX-FXS72", "profileDialPlanDelnum"), ("ELTEX-FXS72", "profileDialPlanPtime"), ("ELTEX-FXS72", "profileDialRowStatus"), ("ELTEX-FXS72", "profilesRegExpDPTableMIBBoundary"), ("ELTEX-FXS72", "profileRegExpDialOn"), ("ELTEX-FXS72", "profileRegExpDialProtocol"), ("ELTEX-FXS72", "profileRegExpDialText"), ("ELTEX-FXS72", "profileRegExpDialRowStatus"), ("ELTEX-FXS72", "useG711A"), ("ELTEX-FXS72", "useG711U"), ("ELTEX-FXS72", "useG726to32"), ("ELTEX-FXS72", "useG723"), ("ELTEX-FXS72", "useG729B"), ("ELTEX-FXS72", "useG729A"), ("ELTEX-FXS72", "g711Ptime"), ("ELTEX-FXS72", "g729Ptime"), ("ELTEX-FXS72", "g723Ptime"), ("ELTEX-FXS72", "g726to32Ptime"), ("ELTEX-FXS72", "g726to32PT"), ("ELTEX-FXS72", "dtmfTransfer"), ("ELTEX-FXS72", "flashTransfer"), ("ELTEX-FXS72", "faxDetectDirection"), ("ELTEX-FXS72", "faxTransferCodec"), ("ELTEX-FXS72", "slaveFaxTransferCodec"), ("ELTEX-FXS72", "modemTransfer"), ("ELTEX-FXS72", "rfc2833PT"), ("ELTEX-FXS72", "silenceSuppression"), ("ELTEX-FXS72", "echoCanceller"), ("ELTEX-FXS72", "nlpDisable"), ("ELTEX-FXS72", "comfortNoise"), ("ELTEX-FXS72", "rtcpTimer"), ("ELTEX-FXS72", "rtcpControlPeriod"), ("ELTEX-FXS72", "ciscoNsePT"), ("ELTEX-FXS72", "t38MaxDatagramSize"), ("ELTEX-FXS72", "t38Bitrate"), ("ELTEX-FXS72", "modemFaxDelay"), ("ELTEX-FXS72", "voiceMode"), ("ELTEX-FXS72", "voiceDelayMin"), ("ELTEX-FXS72", "voiceDelayMax"), ("ELTEX-FXS72", "voiceDeletionThreshold"), ("ELTEX-FXS72", "voiceDeletionMode"), ("ELTEX-FXS72", "profilesCodecsRowStatus"), ("ELTEX-FXS72", "rtcpXR"), ("ELTEX-FXS72", "rfc3264PtCommon"), ("ELTEX-FXS72", "tauTrapSink"), ("ELTEX-FXS72", "tauTrapType"), ("ELTEX-FXS72", "tauSysName"), ("ELTEX-FXS72", "tauSysContact"), ("ELTEX-FXS72", "tauSysLocation"), ("ELTEX-FXS72", "tauRoCommunity"), ("ELTEX-FXS72", "tauRwCommunity"), ("ELTEX-FXS72", "tauTrapCommunity"), ("ELTEX-FXS72", "tauUserV3Name"), ("ELTEX-FXS72", "tauUserV3Password"), ("ELTEX-FXS72", "tauViewV3Type"), ("ELTEX-FXS72", "tauRestartSnmp"), ("ELTEX-FXS72", "tauMegacoTrapType"), ("ELTEX-FXS72", "tauMegacoTrapHost"), ("ELTEX-FXS72", "tauMegacoTrapCommunity"), ("ELTEX-FXS72", "tauMegacoTrapPort"), ("ELTEX-FXS72", "tauMegacoTrapRowStatus"), ("ELTEX-FXS72", "fxoSerialGroupsPhone"), ("ELTEX-FXS72", "fxoSerialGroupsEnabled"), ("ELTEX-FXS72", "fxoSerialGroupsBusyType"), ("ELTEX-FXS72", "fxoSerialGroupsSipPort"), ("ELTEX-FXS72", "fxoSerialGroupsAuthName"), ("ELTEX-FXS72", "fxoSerialGroupsAuthPass"), ("ELTEX-FXS72", "fxoSerialGroupsPorts"), ("ELTEX-FXS72", "fxoSerialGroupsSipProfile"), ("ELTEX-FXS72", "fxoSerialGroupsTransmitNumber"), ("ELTEX-FXS72", "fxoSerialGroupsDontTransmitPrefix"), ("ELTEX-FXS72", "fxoSerialGroupsRowStatus"), ("ELTEX-FXS72", "fxoSerialGroupsSend503OnBusy"), ("ELTEX-FXS72", "fxoSerialGroupsType"), ("ELTEX-FXS72", "fxsEnableAutoupdate"), ("ELTEX-FXS72", "fxsSource"), ("ELTEX-FXS72", "fxsTFTPServer"), ("ELTEX-FXS72", "fxsConfigurationFile"), ("ELTEX-FXS72", "fxsFirmwareVersion"), ("ELTEX-FXS72", "fxsConfigurationUpdateInterval"), ("ELTEX-FXS72", "fxsFirmwareUpdateInterval"), ("ELTEX-FXS72", "autoupdateProtocol"), ("ELTEX-FXS72", "autoupdateAuth"), ("ELTEX-FXS72", "autoupdateUser"), ("ELTEX-FXS72", "autoupdatePassword"), ("ELTEX-FXS72", "fansForceEnable"), ("ELTEX-FXS72", "fansThresholdTemperature"), ("ELTEX-FXS72", "runSyslog"), ("ELTEX-FXS72", "syslogAddr"), ("ELTEX-FXS72", "syslogPort"), ("ELTEX-FXS72", "appAlarm"), ("ELTEX-FXS72", "appErr"), ("ELTEX-FXS72", "appWarn"), ("ELTEX-FXS72", "appInfo"), ("ELTEX-FXS72", "appDbg"), ("ELTEX-FXS72", "sipLevel"), ("ELTEX-FXS72", "h323Level"), ("ELTEX-FXS72", "vapiEnabled"), ("ELTEX-FXS72", "vapiLibLevel"), ("ELTEX-FXS72", "vapiAppLevel"), ("ELTEX-FXS72", "portTestTestStatus"), ("ELTEX-FXS72", "portTestTestStartTime"), ("ELTEX-FXS72", "portTestLastTestStartTime"), ("ELTEX-FXS72", "portTestLastTestEndTime"), ("ELTEX-FXS72", "portTestResultFlag"), ("ELTEX-FXS72", "portTestRingU"), ("ELTEX-FXS72", "portTestTipU"), ("ELTEX-FXS72", "portTestShortVbat"), ("ELTEX-FXS72", "portTestResistTr"), ("ELTEX-FXS72", "portTestResistTg"), ("ELTEX-FXS72", "portTestResistRg"), ("ELTEX-FXS72", "portTestCapacityTr"), ("ELTEX-FXS72", "portTestCapacityTg"), ("ELTEX-FXS72", "portTestCapacityRg"), ("ELTEX-FXS72", "portTestRunTest"), ("ELTEX-FXS72", "monitorSerialGroupsMIBBoundary"), ("ELTEX-FXS72", "serialGroupPhone"), ("ELTEX-FXS72", "serialGroupRegistrationState"), ("ELTEX-FXS72", "serialGroupRegistrationHost"), ("ELTEX-FXS72", "serialGroupLastRegistrationAt"), ("ELTEX-FXS72", "serialGroupNextRegistrationAfter"), ("ELTEX-FXS72", "serialGroupH323GK"), ("ELTEX-FXS72", "fxoGroupPhone"), ("ELTEX-FXS72", "fxoGroupRegistrationState"), ("ELTEX-FXS72", "fxoGroupRegistrationHost"), ("ELTEX-FXS72", "fxoGroupLastRegistrationAt"), ("ELTEX-FXS72", "fxoGroupNextRegistrationAfter"), ("ELTEX-FXS72", "fxoGroupH323GK"), ("ELTEX-FXS72", "firewallTableMIBBoundary"), ("ELTEX-FXS72", "startingSourceIpAddress"), ("ELTEX-FXS72", "numberOfSourceIpAddresses"), ("ELTEX-FXS72", "allSourceIpAddresses"), ("ELTEX-FXS72", "ruleprotocol"), ("ELTEX-FXS72", "typeOfMessageICMP"), ("ELTEX-FXS72", "startingSourcePort"), ("ELTEX-FXS72", "numberOfSourcePorts"), ("ELTEX-FXS72", "allSourcePorts"), ("ELTEX-FXS72", "startingDestinationPort"), ("ELTEX-FXS72", "numberOfDestinationPorts"), ("ELTEX-FXS72", "allDestinationPorts"), ("ELTEX-FXS72", "ruleTarget"), ("ELTEX-FXS72", "ruleMoveTo"), ("ELTEX-FXS72", "ruleRowStatus"), ("ELTEX-FXS72", "firewallApply"), ("ELTEX-FXS72", "firewallConfirm"), ("ELTEX-FXS72", "megacoPortTerminationID"), ("ELTEX-FXS72", "megacoPortState"), ("ELTEX-FXS72", "megacoPortComments"), ("ELTEX-FXS72", "megacoPortStateStartTime"), ("ELTEX-FXS72", "megacoPortStateDuration"), ("ELTEX-FXS72", "megacoPortJitter")], [("ELTEX-FXS72", "megacoPortTelNo"), ("ELTEX-FXS72", "deviceName"), ("ELTEX-FXS72", "startTimer"), ("ELTEX-FXS72", "durationTimer"), ("ELTEX-FXS72", "waitAnswerTimer"), ("ELTEX-FXS72", "powerMode"), ("ELTEX-FXS72", "siptUsePrefix"), ("ELTEX-FXS72", "siptPrefix"), ("ELTEX-FXS72", "rtpSipMin"), ("ELTEX-FXS72", "rtpSipMax"), ("ELTEX-FXS72", "interceptPortMin"), ("ELTEX-FXS72", "interceptPortMax"), ("ELTEX-FXS72", "diffservForSip"), ("ELTEX-FXS72", "diffservForRtp"), ("ELTEX-FXS72", "verifyRemoteMediaAddress"), ("ELTEX-FXS72", "clType"), ("ELTEX-FXS72", "clHostOfNeighbourGateway"), ("ELTEX-FXS72", "clSimultaneousCallsCount"), ("ELTEX-FXS72", "clRowStatus"), ("ELTEX-FXS72", "drRule"), ("ELTEX-FXS72", "drRing"), ("ELTEX-FXS72", "drPause"), ("ELTEX-FXS72", "drSubscriberProfiles"), ("ELTEX-FXS72", "drRowStatus"), ("ELTEX-FXS72", "profilesSipAlertInfoMIBBoundary"), ("ELTEX-FXS72", "cadenceName"), ("ELTEX-FXS72", "cadenceRingRule"), ("ELTEX-FXS72", "cadenceRowStatus"), ("ELTEX-FXS72", "stunEnable"), ("ELTEX-FXS72", "stunServer"), ("ELTEX-FXS72", "stunInterval"), ("ELTEX-FXS72", "sipPublicIp"), ("ELTEX-FXS72", "modifierDialedNumberRegexpRule"), ("ELTEX-FXS72", "modifierDialedNumberModification"), ("ELTEX-FXS72", "modifierCallingNumberModification"), ("ELTEX-FXS72", "modifierRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        fxsGroup = fxsGroup.setObjects(*_fxsGroup_obj)
    else:
        fxsGroup = fxsGroup.setObjects(*_fxsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fxsGroup = fxsGroup.setStatus('current')
if mibBuilder.loadTexts: fxsGroup.setDescription('none')
mibBuilder.exportSymbols("ELTEX-FXS72", fxsDialPlanNature=fxsDialPlanNature, fxsPortConfigCfbNumber=fxsPortConfigCfbNumber, typeOfMessageICMP=typeOfMessageICMP, fxsMonitoringTemp4=fxsMonitoringTemp4, fxsSerialGroupsSipProfile=fxsSerialGroupsSipProfile, fxsDialPlanTable=fxsDialPlanTable, FxsGroupBusyType=FxsGroupBusyType, profilePortsDecadePulseTime=profilePortsDecadePulseTime, fxsPortConfigDetectFxoLinePresence=fxsPortConfigDetectFxoLinePresence, useG711U=useG711U, tau36v40megaco=tau36v40megaco, profilesDialPlans=profilesDialPlans, waitAnswerTimer=waitAnswerTimer, serialGroupNumber=serialGroupNumber, profilePortsReversalPolarityAction=profilePortsReversalPolarityAction, fxsProfiles=fxsProfiles, FxsToneParametrs=FxsToneParametrs, tau72v30sip=tau72v30sip, rtpSipMin=rtpSipMin, sipProfileRegrar0=sipProfileRegrar0, sipProfileCwRingback=sipProfileCwRingback, fxs72v21=fxs72v21, fxsMonitoringSubCooling=fxsMonitoringSubCooling, sipRegisterRetryInterval=sipRegisterRetryInterval, tau16megaco=tau16megaco, profilePortsDialToneDetectionParameters=profilePortsDialToneDetectionParameters, FxsPortTestStatus=FxsPortTestStatus, syslogPort=syslogPort, fxsPortConfigUsePstnCid=fxsPortConfigUsePstnCid, sipPRTPstat=sipPRTPstat, appAlarm=appAlarm, fxsPortConfigDnd=fxsPortConfigDnd, sipProfileRegistration2=sipProfileRegistration2, vapiAppLevel=vapiAppLevel, fxsPortConfigMaxFlashtime=fxsPortConfigMaxFlashtime, lastCallPhone=lastCallPhone, fxsPortConfigNoOffhookAtRinging=fxsPortConfigNoOffhookAtRinging, TauModemTransferType=TauModemTransferType, sipSipMtu=sipSipMtu, sipProfileExpires=sipProfileExpires, rfc3264PtCommon=rfc3264PtCommon, tau32MrevBsip=tau32MrevBsip, fxsDialPlanAccessMask=fxsDialPlanAccessMask, sipProfileRingback=sipProfileRingback, sipHfmime=sipHfmime, fxsPortConfigFxoMinLevelDetect=fxsPortConfigFxoMinLevelDetect, firewallTableMIBBoundary=firewallTableMIBBoundary, deviceName=deviceName, sipCommonEnablesip=sipCommonEnablesip, BoolValue=BoolValue, H323LogLevel=H323LogLevel, fxsSerialGroupsTable=fxsSerialGroupsTable, SipConnectState=SipConnectState, tauSysContact=tauSysContact, rtpSipMax=rtpSipMax, fxsPortNumber=fxsPortNumber, voiceDelayMin=voiceDelayMin, sipRingback=sipRingback, fxsPortConfigCfnrNumber=fxsPortConfigCfnrNumber, fxsPortsConfigTable=fxsPortsConfigTable, sipObtimeout=sipObtimeout, fxoSerialGroupsPhone=fxoSerialGroupsPhone, sipProfileRegrar1=sipProfileRegrar1, tauSipConfig=tauSipConfig, tauTrapType=tauTrapType, profilePortsFxoRingtdm=profilePortsFxoRingtdm, profilePortsStopDial=profilePortsStopDial, tau36megaco=tau36megaco, profilesSipEntry=profilesSipEntry, fxsPortConfigCtTimeout=fxsPortConfigCtTimeout, fxsPortConfigReversalPolarityAction=fxsPortConfigReversalPolarityAction, DevTypeString=DevTypeString, profilePortsAONHideName=profilePortsAONHideName, fxsSerialGroupsEntry=fxsSerialGroupsEntry, FxsAON=FxsAON, fxsPortConfigCtNumber=fxsPortConfigCtNumber, fxsPortConfigDontTransmitPrefix=fxsPortConfigDontTransmitPrefix, tauDialPlansRegExp=tauDialPlansRegExp, g726to32Ptime=g726to32Ptime, fxsConfigSave=fxsConfigSave, profilesCodecsRowStatus=profilesCodecsRowStatus, fxsPortConfigUserName=fxsPortConfigUserName, totalCallCount=totalCallCount, fxsPortConfigtdmhottimeout=fxsPortConfigtdmhottimeout, useG729A=useG729A, sipUserPhone=sipUserPhone, modifierDialedNumberRegexpRule=modifierDialedNumberRegexpRule, sipTransport=sipTransport, serialGroupNextRegistrationAfter=serialGroupNextRegistrationAfter, fxsPortConfigPstnActivity=fxsPortConfigPstnActivity, sipRegrar1=sipRegrar1, fxsPortConfigCommonTaxophone=fxsPortConfigCommonTaxophone, tauTrapSink=tauTrapSink, sipCwRingback=sipCwRingback, autoupdateUser=autoupdateUser, fxsPortSipConnectHost=fxsPortSipConnectHost, fxsPortConfigDialToneDetectionParameters=fxsPortConfigDialToneDetectionParameters, fxsReboot=fxsReboot, fxsSource=fxsSource, fxsPortTalkingNum=fxsPortTalkingNum, fxsPortConfigDisabled=fxsPortConfigDisabled, portTestResistRg=portTestResistRg, fxsPortConfigCommonUsePstnCid=fxsPortConfigCommonUsePstnCid, profilePortsDialing=profilePortsDialing, fxsDialPlanDelnum=fxsDialPlanDelnum, fxsPortConfigFxoFlashTime=fxsPortConfigFxoFlashTime, profileDialPlanPtime=profileDialPlanPtime, numberOfSourceIpAddresses=numberOfSourceIpAddresses, sipProfileUseAlertInfo=sipProfileUseAlertInfo, fxsPortConfigRowStatus=fxsPortConfigRowStatus, fxsPortConfigCtBusy=fxsPortConfigCtBusy, RemoteRingback=RemoteRingback, tauMegacoTrapHost=tauMegacoTrapHost, FxsTaxophoneType=FxsTaxophoneType, fxsDialPlanModifier=fxsDialPlanModifier, serialGroupH323GK=serialGroupH323GK, appWarn=appWarn, sipInviteInitT=sipInviteInitT, stunInterval=stunInterval, fxsDevCfgBuild=fxsDevCfgBuild, sipRegrar2=sipRegrar2, fxsSerialGroupsBusyType=fxsSerialGroupsBusyType, sipProfileEnableTimer=sipProfileEnableTimer, faxTransferCodec=faxTransferCodec, appDbg=appDbg, h323Level=h323Level, fxsSerialGroupsNextEmpty=fxsSerialGroupsNextEmpty, fxsMonitoringTemp3=fxsMonitoringTemp3, fxsPortConfigCommonAONHideName=fxsPortConfigCommonAONHideName, startingSourcePort=startingSourcePort, profilesPortsTable=profilesPortsTable, fxsPortConfigCommonGaint=fxsPortConfigCommonGaint, tau72megaco=tau72megaco, fxsPortConfigPortProfileID=fxsPortConfigPortProfileID, portTestTestStatus=portTestTestStatus, sipCommonInviteTotalT=sipCommonInviteTotalT, fxsPortConfigDvoCtUnattendedEn=fxsPortConfigDvoCtUnattendedEn, durationTimer=durationTimer, sipProfileXCAPNameForCallHold=sipProfileXCAPNameForCallHold, sipProfileRegrar4=sipProfileRegrar4, profileDialPlanDelnum=profileDialPlanDelnum, voiceDelayMax=voiceDelayMax, serialGroupPhone=serialGroupPhone, startingSourceIpAddress=startingSourceIpAddress, sipRegrar3=sipRegrar3, TypeOfMessageICMP=TypeOfMessageICMP, fxsStatTable=fxsStatTable, profilePortsTransmitNumber=profilePortsTransmitNumber, tauViewV3Type=tauViewV3Type, sipRegistration0=sipRegistration0, fxsPortConfigDelayDialingTimeout=fxsPortConfigDelayDialingTimeout, sipPassword=sipPassword, sipCommonSipMtu=sipCommonSipMtu, profilePortsDelayDialingTimeout=profilePortsDelayDialingTimeout, rtcpTimer=rtcpTimer, fxsPortConfigDvoCfAnswerEn=fxsPortConfigDvoCfAnswerEn, fxoSerialGroupsType=fxoSerialGroupsType, fxsVoipGeneral=fxsVoipGeneral, fxsFirmwareUpdateInterval=fxsFirmwareUpdateInterval, profileRegExpDialText=profileRegExpDialText, megacoPortComments=megacoPortComments, profileDialPlanTimeout=profileDialPlanTimeout, cadenceRowStatus=cadenceRowStatus, drPause=drPause, fxoGroupPhone=fxoGroupPhone, configTcpIp=configTcpIp, modifiersTable=modifiersTable, sipLevel=sipLevel, sipOutbound=sipOutbound, sipProfileDtmfmime=sipProfileDtmfmime, fxsPortConfigCtNoanswer=fxsPortConfigCtNoanswer, sipProfileRegrar2=sipProfileRegrar2, modemFaxDelay=modemFaxDelay, sipProfile100Rel=sipProfile100Rel, sipCommonInviteInitT=sipCommonInviteInitT, vapiEnabled=vapiEnabled, fxoGroupNumber=fxoGroupNumber, profileDialPlanModifier=profileDialPlanModifier, fxsStatEntry=fxsStatEntry, tauVoipDvoCfNoanswer=tauVoipDvoCfNoanswer, fxsPortConfigStopDial=fxsPortConfigStopDial, fxs72=fxs72, diffservForRtp=diffservForRtp, fxsPortConfigtdmhotnumber=fxsPortConfigtdmhotnumber, profileDialPlanNature=profileDialPlanNature, fxsPortsConfigCommon=fxsPortsConfigCommon, fxoSerialGroupsSipPort=fxoSerialGroupsSipPort, tau36sip=tau36sip, sipProfileXCAPNameForCallWaiting=sipProfileXCAPNameForCallWaiting, sipProfileRemoveInactiveMedia=sipProfileRemoveInactiveMedia, fxsPortsMIBBoundary=fxsPortsMIBBoundary, fxsPortConfigTaxophone=fxsPortConfigTaxophone, drRowStatus=drRowStatus, g726to32PT=g726to32PT, megacoPortsMonitoringTable=megacoPortsMonitoringTable, fxoSerialGroupsSend503OnBusy=fxoSerialGroupsSend503OnBusy, DTMFMIMEType=DTMFMIMEType, SipProfileChangeoverType=SipProfileChangeoverType, profilesPortsMIBBoundary=profilesPortsMIBBoundary, TauFlashTransferType=TauFlashTransferType, fxsEnableAutoupdate=fxsEnableAutoupdate, fxsMonitoringTemp1=fxsMonitoringTemp1, numTxPack=numTxPack, portTestLastTestStartTime=portTestLastTestStartTime, firewallConfig=firewallConfig, fxsPortConfigAuthPass=fxsPortConfigAuthPass, fxsTFTPServer=fxsTFTPServer, portTestRingU=portTestRingU, fxsMonitoringFan1Rotate=fxsMonitoringFan1Rotate, voiceDeletionThreshold=voiceDeletionThreshold, TauFaxDirectionType=TauFaxDirectionType, fxsPortConfigMinFlashtime=fxsPortConfigMinFlashtime, sipProfileProxy1=sipProfileProxy1, sipProfileProxy0=sipProfileProxy0, fxsDevType=fxsDevType, profilePortsBusyToneDetectionParameters=profilePortsBusyToneDetectionParameters, megacoPortTerminationID=megacoPortTerminationID, fxsPortConfigCommonPstnNumberprefix=fxsPortConfigCommonPstnNumberprefix, flashTransfer=flashTransfer, profilePortsCallTransfer=profilePortsCallTransfer, fxsPortConfigCustom=fxsPortConfigCustom, verifyRemoteMediaAddress=verifyRemoteMediaAddress, fxsPortState=fxsPortState, tauMegacoTrapCommunity=tauMegacoTrapCommunity, sipProfileUsername=sipProfileUsername, appErr=appErr, fxoSerialGroupsEntry=fxoSerialGroupsEntry, fxsPortConfigCommonDialing=fxsPortConfigCommonDialing, t38Bitrate=t38Bitrate, fxsPortConfigCommonDontDetectDT=fxsPortConfigCommonDontDetectDT, sip100Rel=sip100Rel, fxsConfigurationUpdateInterval=fxsConfigurationUpdateInterval, tau32Mmegaco=tau32Mmegaco, fxsPortConfigDecadePulseTime=fxsPortConfigDecadePulseTime, sipProfileXCAPNameForExplicitCallTransfer=sipProfileXCAPNameForExplicitCallTransfer, sipProxy4=sipProxy4, fxsSerialGroupsSerialType=fxsSerialGroupsSerialType, profilesSip=profilesSip, tauVoipDvoCfService=tauVoipDvoCfService, tauUserV3Password=tauUserV3Password, fxsMonitoringFanState=fxsMonitoringFanState, fxsDialPlanPtime=fxsDialPlanPtime, profilesRegExpDPTableMIBBoundary=profilesRegExpDPTableMIBBoundary, callLimitEntry=callLimitEntry, PYSNMP_MODULE_ID=fxs72, numberOfDestinationPorts=numberOfDestinationPorts, VapiLibLogLevel=VapiLibLogLevel, fxsSerialGroupsMIBBoundary=fxsSerialGroupsMIBBoundary, fxsPortsMonitoringEntry=fxsPortsMonitoringEntry, tau16sip=tau16sip, sipProfileUriEscapeHash=sipProfileUriEscapeHash, autoupdatePassword=autoupdatePassword, fxsUpdateFw=fxsUpdateFw, modifierDialedNumberModification=modifierDialedNumberModification)
mibBuilder.exportSymbols("ELTEX-FXS72", fxsSerialGroupsRowStatus=fxsSerialGroupsRowStatus, fxsPortH323Connected=fxsPortH323Connected, fxsMonitoringFan2Rotate=fxsMonitoringFan2Rotate, monitorFxoGroupsEntry=monitorFxoGroupsEntry, profilesDialPlansTable=profilesDialPlansTable, fxoSerialGroupsPorts=fxoSerialGroupsPorts, fxsPortConfigCommonFxoDelTdm=fxsPortConfigCommonFxoDelTdm, sipProfileInboundProxy=sipProfileInboundProxy, g711Ptime=g711Ptime, profilesRegExpDPTable=profilesRegExpDPTable, fxsPortConfigCommonPlaymoh=fxsPortConfigCommonPlaymoh, portTestShortVbat=portTestShortVbat, ConferenceMode=ConferenceMode, sipProfileKeepAliveMode=sipProfileKeepAliveMode, fxsPortConfigCfoosNumber=fxsPortConfigCfoosNumber, clSimultaneousCallsCount=clSimultaneousCallsCount, fxoGroupLastRegistrationAt=fxoGroupLastRegistrationAt, profilePortsBlockFxoLineInOutgoingDirection=profilePortsBlockFxoLineInOutgoingDirection, profilePortsFxoDelTdm=profilePortsFxoDelTdm, sipCommonTransport=sipCommonTransport, fxsPortConfigDialing=fxsPortConfigDialing, profileDialPlanHost=profileDialPlanHost, profilePortsModifier=profilePortsModifier, allSourcePorts=allSourcePorts, cadenceRingRule=cadenceRingRule, tauUserV3Name=tauUserV3Name, fxsPortConfigCommonGainr=fxsPortConfigCommonGainr, drSubscriberProfiles=drSubscriberProfiles, firewallConfirm=firewallConfirm, FxsDialPlanNatureType=FxsDialPlanNatureType, fxsPortConfigAONHideName=fxsPortConfigAONHideName, profileRegExpDialRowStatus=profileRegExpDialRowStatus, megacoPortJitter=megacoPortJitter, fxsPortConfigFxoRingtdm=fxsPortConfigFxoRingtdm, FxsGroupSerialType=FxsGroupSerialType, ruleRowStatus=ruleRowStatus, profileDialRowStatus=profileDialRowStatus, tauVoipDvoCtAttended=tauVoipDvoCtAttended, tau72v30megaco=tau72v30megaco, sipProfileConferenceServer=sipProfileConferenceServer, megacoPortsMonitoringEntry=megacoPortsMonitoringEntry, sipExpires=sipExpires, profilesSipAlertInfoEntry=profilesSipAlertInfoEntry, ruleprotocol=ruleprotocol, profilePortsDtDetectTime=profilePortsDtDetectTime, sipDomain=sipDomain, tau36v30sip=tau36v30sip, FxsPortState=FxsPortState, sipProfileRegisterRetryInterval=sipProfileRegisterRetryInterval, t38MaxDatagramSize=t38MaxDatagramSize, profilePortsFxoCallBusy=profilePortsFxoCallBusy, fxsPortConfigSipProfileID=fxsPortConfigSipProfileID, fxs72sip=fxs72sip, echoCanceller=echoCanceller, syslogAddr=syslogAddr, ProxyMode=ProxyMode, fxsPortConfigCallWaiting=fxsPortConfigCallWaiting, tauSnmpConfiguration=tauSnmpConfiguration, profilePortsRingBackToneDetectionParameters=profilePortsRingBackToneDetectionParameters, fxsPortPhoneNumber=fxsPortPhoneNumber, rtcpXR=rtcpXR, fxsPortConfigCommonAONHideDate=fxsPortConfigCommonAONHideDate, fxsPortConfigCommonTransmitNumber=fxsPortConfigCommonTransmitNumber, fxsDialPlanNumber=fxsDialPlanNumber, interceptPortMin=interceptPortMin, fxsPortConfigAltNumber=fxsPortConfigAltNumber, tauDialRegularOn=tauDialRegularOn, startTimer=startTimer, modifiersEntry=modifiersEntry, fxsPortConfigGainr=fxsPortConfigGainr, fxsFirmwareVersion=fxsFirmwareVersion, tau72v40megaco=tau72v40megaco, sipProfileMode=sipProfileMode, fxsSerialGroupsAuthName=fxsSerialGroupsAuthName, fxsFreeRam=fxsFreeRam, distinctiveRingEntry=distinctiveRingEntry, megacoPortStateDuration=megacoPortStateDuration, fxsPortConfigCommonCfgPriOverCw=fxsPortConfigCommonCfgPriOverCw, profileNumber=profileNumber, fxsPortsMonitoringTable=fxsPortsMonitoringTable, testPortsTableEntry=testPortsTableEntry, profilePortsRowStatus=profilePortsRowStatus, fxsPortConfigCommonFxoFlashTime=fxsPortConfigCommonFxoFlashTime, profilePortsDontDetectDT=profilePortsDontDetectDT, numTxOct=numTxOct, fxoSerialGroupsRowStatus=fxoSerialGroupsRowStatus, profilePortsMaxFlashtime=profilePortsMaxFlashtime, profileDialPlanDialtone=profileDialPlanDialtone, fxsDialPlanDialtone=fxsDialPlanDialtone, tauVoipDvoCtUnattended=tauVoipDvoCtUnattended, fxsPortConfigDvoCwEn=fxsPortConfigDvoCwEn, numberOfSourcePorts=numberOfSourcePorts, profileDialPlanType=profileDialPlanType, rtcpControlPeriod=rtcpControlPeriod, profilesCodecsEntry=profilesCodecsEntry, portTestCapacityRg=portTestCapacityRg, fxsDialPlanEntry=fxsDialPlanEntry, profilePortsEnableCpc=profilePortsEnableCpc, tauMegacoTrapType=tauMegacoTrapType, clIndex=clIndex, fxsPortConfigSipPort=fxsPortConfigSipPort, sipInviteTotalT=sipInviteTotalT, fxoSerialGroupsAuthName=fxoSerialGroupsAuthName, FirewallProtocol=FirewallProtocol, profilesDialPlansEntry=profilesDialPlansEntry, profilePortsFxoFlashTime=profilePortsFxoFlashTime, sipProxy1=sipProxy1, sipUsername=sipUsername, fxoSerialGroupsBusyType=fxoSerialGroupsBusyType, tau24sip=tau24sip, sipProfileRegistration4=sipProfileRegistration4, monitorSerialGroupsTable=monitorSerialGroupsTable, profilePortsMinFlashtime=profilePortsMinFlashtime, profilesRegExpDPEntry=profilesRegExpDPEntry, sipUriEscapeHash=sipUriEscapeHash, fxsPortConfigCommonAON=fxsPortConfigCommonAON, fxsDialMIBBoundary=fxsDialMIBBoundary, fxsPortConfigCommonCpcTime=fxsPortConfigCommonCpcTime, sipProfileOptions=sipProfileOptions, profilesCodecs=profilesCodecs, dtmfTransfer=dtmfTransfer, AutoupdateProtocolType=AutoupdateProtocolType, serialGroupLastRegistrationAt=serialGroupLastRegistrationAt, fxsDialPlanType=fxsDialPlanType, fxsSerialGroupsTimeout=fxsSerialGroupsTimeout, tau72v40sip=tau72v40sip, sipProfileObtimeout=sipProfileObtimeout, profileDialPlanAccessMask=profileDialPlanAccessMask, sipProfileRegrar3=sipProfileRegrar3, profilePortsPstnNameprefix=profilePortsPstnNameprefix, currentState=currentState, CwRingbackRingbackAtCallwaiting=CwRingbackRingbackAtCallwaiting, sipProfileRegistration1=sipProfileRegistration1, fxsPortConfigHotTimeout=fxsPortConfigHotTimeout, sipCommonShortmode=sipCommonShortmode, profilePortsCategory=profilePortsCategory, tauMegacoTrapRowStatus=tauMegacoTrapRowStatus, portTestTestStartTime=portTestTestStartTime, firewallEntry=firewallEntry, sipProfileUserPhone=sipProfileUserPhone, modifierCallingNumberModification=modifierCallingNumberModification, faxDetectDirection=faxDetectDirection, PstnActivityType=PstnActivityType, fxsDialPlanNext=fxsDialPlanNext, fxsPortConfigCategory=fxsPortConfigCategory, fxsPortConfigDvoDoDisturbEn=fxsPortConfigDvoDoDisturbEn, fxsPortConfigPickUp=fxsPortConfigPickUp, monitorSerialGroupsEntry=monitorSerialGroupsEntry, distinctiveRingTable=distinctiveRingTable, sipRingbackSdp=sipRingbackSdp, fxoGroupNextRegistrationAfter=fxoGroupNextRegistrationAfter, useG723=useG723, profilePortsDontTransmitPrefix=profilePortsDontTransmitPrefix, tauTrapCommunity=tauTrapCommunity, sipProfileProxy4=sipProfileProxy4, sipProfileAuthentication=sipProfileAuthentication, fxsPortConfigCpcRus=fxsPortConfigCpcRus, profilePortsGaint=profilePortsGaint, numRxPack=numRxPack, profilePortsAONHideDate=profilePortsAONHideDate, runSyslog=runSyslog, fxoGroupH323GK=fxoGroupH323GK, fxsMonitoringVBat=fxsMonitoringVBat, FxsDialPlanType=FxsDialPlanType, fxsPortConfigHotNumber=fxsPortConfigHotNumber, profilePortsPstnNumberprefix=profilePortsPstnNumberprefix, fxoSerialGroupsAuthPass=fxoSerialGroupsAuthPass, allSourceIpAddresses=allSourceIpAddresses, fxsPortConfigEnableCpc=fxsPortConfigEnableCpc, fxsPorts=fxsPorts, sipProfileDomain=sipProfileDomain, clHostOfNeighbourGateway=clHostOfNeighbourGateway, fxs72megaco=fxs72megaco, monitorSerialGroupsMIBBoundary=monitorSerialGroupsMIBBoundary, tau36v30megaco=tau36v30megaco, tauVoipDvoDoDisturb=tauVoipDvoDoDisturb, OutboundType=OutboundType, fxoSerialGroupsTable=fxoSerialGroupsTable, tau32Msip=tau32Msip, useG729B=useG729B, FXSFanState=FXSFanState, portTestCapacityTr=portTestCapacityTr, serialGroupRegistrationState=serialGroupRegistrationState, ReversalPolarityAction=ReversalPolarityAction, fxsPortConfigPhone=fxsPortConfigPhone, tau32MrevBmegaco=tau32MrevBmegaco, profileRegExpDialProtocol=profileRegExpDialProtocol, fxsSerialGroupsSipPort=fxsSerialGroupsSipPort, fxsDialPlanHost=fxsDialPlanHost, profilePortsPlaymoh=profilePortsPlaymoh, DevPowerType=DevPowerType, profilesSipTable=profilesSipTable, fxsDialPlanMinDigits=fxsDialPlanMinDigits, sipMode=sipMode, sipRegistration2=sipRegistration2, FxoDialingType=FxoDialingType, tauVoipDvoCallwaiting=tauVoipDvoCallwaiting, sipKeepalivet=sipKeepalivet, fxsPortConfigPstnNameprefix=fxsPortConfigPstnNameprefix, profilePortsDecadePauseTime=profilePortsDecadePauseTime, fxsPortConfigModifier=fxsPortConfigModifier, sipProfileChangeover=sipProfileChangeover, fxsPortConfigDvoUnconditionalEn=fxsPortConfigDvoUnconditionalEn, sipProfileCtWithReplaces=sipProfileCtWithReplaces, fxsPortConfigBlockFxoLineInOutgoingDirection=fxsPortConfigBlockFxoLineInOutgoingDirection, sipProfileRowStatus=sipProfileRowStatus, fxsPortConfigMwiDialtone=fxsPortConfigMwiDialtone, SipLogLevel=SipLogLevel, FxoGroupType=FxoGroupType, fxsDialRowStatus=fxsDialRowStatus, sipPublicIp=sipPublicIp, siptPrefix=siptPrefix, sipRegrar4=sipRegrar4, TauMegacoTrapVersion=TauMegacoTrapVersion, lostPackets=lostPackets, callLimitTable=callLimitTable, fxsSerialGroupsAuthPass=fxsSerialGroupsAuthPass, profilePortsPstnRbDetectTimeout=profilePortsPstnRbDetectTimeout, tauSubtypes=tauSubtypes, GroupRegistrationState=GroupRegistrationState, fxsSerialGroupsEnabled=fxsSerialGroupsEnabled, fxsPortConfigAuthName=fxsPortConfigAuthName, fxsSSwStatus=fxsSSwStatus, fxsPortConfigHotLine=fxsPortConfigHotLine, fxsPortConfigCommonDontTransmitPrefix=fxsPortConfigCommonDontTransmitPrefix, sipRegrar0=sipRegrar0, portTestResistTg=portTestResistTg, testPortsTable=testPortsTable, tau36v40sip=tau36v40sip, tau72sip=tau72sip, fxoSerialGroupsDontTransmitPrefix=fxoSerialGroupsDontTransmitPrefix, profilePortsAON=profilePortsAON, portTestTipU=portTestTipU, fxsDevName=fxsDevName, diffservForSip=diffservForSip, fxsPortConfigDecadePauseTime=fxsPortConfigDecadePauseTime, g729Ptime=g729Ptime, sipProfileSessionExpires=sipProfileSessionExpires, fxsPortConfigGaint=fxsPortConfigGaint, fxsSyslog=fxsSyslog, profilePortsUsePstnCid=profilePortsUsePstnCid, fxsGroup=fxsGroup, sipProfilePassword=sipProfilePassword, fxsDialPlanTimeout=fxsDialPlanTimeout, fxoSerialGroups=fxoSerialGroups, clType=clType, voiceDeletionMode=voiceDeletionMode, tauVoipDvo=tauVoipDvo, profileRegExpDialOn=profileRegExpDialOn, autoupdateAuth=autoupdateAuth, powerMode=powerMode, fxsPortConfigDvoCfServiceEn=fxsPortConfigDvoCfServiceEn, megacoPortState=megacoPortState, profilesPorts=profilesPorts)
mibBuilder.exportSymbols("ELTEX-FXS72", comfortNoise=comfortNoise, FxsProcessFlashType=FxsProcessFlashType, fxsPortConfigFxoCallBusy=fxsPortConfigFxoCallBusy, fxsPortConfigAON=fxsPortConfigAON, fxsPortConfigCommonMaxFlashtime=fxsPortConfigCommonMaxFlashtime, monitorFxoGroupsTable=monitorFxoGroupsTable, profilesPortsEntry=profilesPortsEntry, fxsPortConfigDvoCtAttendedEn=fxsPortConfigDvoCtAttendedEn, fxsPortConfigCommonFxoRingtdm=fxsPortConfigCommonFxoRingtdm, fxsPortTalkingStartTime=fxsPortTalkingStartTime, portTestResistTr=portTestResistTr, tauSysLocation=tauSysLocation, KeepAliveMode=KeepAliveMode, stunServer=stunServer, drRing=drRing, fxsConfigurationFile=fxsConfigurationFile, useG726to32=useG726to32, slaveFaxTransferCodec=slaveFaxTransferCodec, tauMegacoTrapsEntry=tauMegacoTrapsEntry, sipProfileHfmime=sipProfileHfmime, profilePortsCfgPriOverCw=profilePortsCfgPriOverCw, profilePortsTaxophone=profilePortsTaxophone, clRowStatus=clRowStatus, firewallTable=firewallTable, portTestRunTest=portTestRunTest, fxsPortSipConnecteNext=fxsPortSipConnecteNext, drId=drId, HookFlashMIMEType=HookFlashMIMEType, tauRestartSnmp=tauRestartSnmp, TauVoiceModeType=TauVoiceModeType, sipCommonPortRegistrationDelay=sipCommonPortRegistrationDelay, tau24megaco=tau24megaco, sipProfileFullRuriCompliance=sipProfileFullRuriCompliance, fxsPortConfigtdmhotline=fxsPortConfigtdmhotline, TauDtmfTransferType=TauDtmfTransferType, PowerMode=PowerMode, FxsNetworkAutoupdateSourceType=FxsNetworkAutoupdateSourceType, FxsGroupSerialEnableType=FxsGroupSerialEnableType, rfc2833PT=rfc2833PT, fxsPortConfigCfgPriOverCw=fxsPortConfigCfgPriOverCw, profilePortsCpcRus=profilePortsCpcRus, megacoPortNumber=megacoPortNumber, TauFaxTransferType=TauFaxTransferType, startingDestinationPort=startingDestinationPort, megacoPortTelNo=megacoPortTelNo, AuthenticationType=AuthenticationType, fxsFreeSpace=fxsFreeSpace, profilePortsDetectFxoLinePresence=profilePortsDetectFxoLinePresence, fxsDialPlanDigits=fxsDialPlanDigits, TauFaxTransferSlaveType=TauFaxTransferSlaveType, FxoGroupBusyType=FxoGroupBusyType, modemTransfer=modemTransfer, fxsPortConfigAONHideDate=fxsPortConfigAONHideDate, tauMegacoTrapPort=tauMegacoTrapPort, ruleNumber=ruleNumber, sipProxy0=sipProxy0, peakJitter=peakJitter, fxsPortConfigCpcTime=fxsPortConfigCpcTime, sipRegistration1=sipRegistration1, CallLimitType=CallLimitType, profilePortsCallWaiting=profilePortsCallWaiting, interceptPortMax=interceptPortMax, sipProfileRegistration0=sipProfileRegistration0, fxsPortSipConnecteState=fxsPortSipConnecteState, fxsMonitoringVRing2=fxsMonitoringVRing2, fxsPortConfigFxoDelTdm=fxsPortConfigFxoDelTdm, drRule=drRule, siptUsePrefix=siptUsePrefix, useG711A=useG711A, nlpDisable=nlpDisable, fxsPortConfigBusyToneDetectionParameters=fxsPortConfigBusyToneDetectionParameters, sipProxy3=sipProxy3, fxsPortType=fxsPortType, tauVoipDvoCfUnconditional=tauVoipDvoCfUnconditional, SSwStatusConv=SSwStatusConv, tauMegacoTrapId=tauMegacoTrapId, FirewallTarget=FirewallTarget, fxsPortConfigCommonCategory=fxsPortConfigCommonCategory, sipProfileConferenceMode=sipProfileConferenceMode, stunEnable=stunEnable, sipProfileRegistration3=sipProfileRegistration3, sipProfileKeepAliveInterval=sipProfileKeepAliveInterval, fxsPortConfigPlaymoh=fxsPortConfigPlaymoh, tauSysName=tauSysName, sipInboundProxy=sipInboundProxy, cadenceNumber=cadenceNumber, fxsPortConfigUseAltNumberAsContact=fxsPortConfigUseAltNumberAsContact, tauRoCommunity=tauRoCommunity, OptionsHomeServerTest=OptionsHomeServerTest, fxoSerialGroupsTransmitNumber=fxoSerialGroupsTransmitNumber, fxsPortConfigCfuNumber=fxsPortConfigCfuNumber, tauDialRegularProtocol=tauDialRegularProtocol, profilePortsGainr=profilePortsGainr, fxoGroupRegistrationHost=fxoGroupRegistrationHost, sipProfileKeepalivet=sipProfileKeepalivet, fxsConfigApply=fxsConfigApply, modifierNumber=modifierNumber, fxoGroupRegistrationState=fxoGroupRegistrationState, ruleMoveTo=ruleMoveTo, TauvoiceDeletionModeType=TauvoiceDeletionModeType, fxsSSwStatusTime=fxsSSwStatusTime, fxsDial=fxsDial, sipProfileProxy2=sipProfileProxy2, fxsPortConfigCallTransfer=fxsPortConfigCallTransfer, fxsPortConfigPstnRbDetectTimeout=fxsPortConfigPstnRbDetectTimeout, profilePortsPstnActivity=profilePortsPstnActivity, fxsPortConfigCommonDelayDialingTimeout=fxsPortConfigCommonDelayDialingTimeout, profilesCodecsTable=profilesCodecsTable, profilePortsCpcTime=profilePortsCpcTime, profileDialPlanMinDigits=profileDialPlanMinDigits, IMSMode=IMSMode, voiceMode=voiceMode, tauRwCommunity=tauRwCommunity, sipCtWithReplaces=sipCtWithReplaces, fxsMonitoringTemp2=fxsMonitoringTemp2, sipProfileOutbound=sipProfileOutbound, DRSubscriberProfilesType=DRSubscriberProfilesType, sipRegistration4=sipRegistration4, fxsMonitoringDevicePower=fxsMonitoringDevicePower, tauMegacoTrapsTable=tauMegacoTrapsTable, fxsPortConfigPstnNumberprefix=fxsPortConfigPstnNumberprefix, sipProfilePRTPstat=sipProfilePRTPstat, cadenceName=cadenceName, VapiAppLogLevel=VapiAppLogLevel, fxsMonitoringVMode=fxsMonitoringVMode, fxsPortConfigCommonCallWaiting=fxsPortConfigCommonCallWaiting, fxsPortConfigCommonEnableCpc=fxsPortConfigCommonEnableCpc, g723Ptime=g723Ptime, sipProfileEnableIMS=sipProfileEnableIMS, TauTrapVersion=TauTrapVersion, tauVoipDvoCfBusy=tauVoipDvoCfBusy, Type100rel=Type100rel, appInfo=appInfo, FxsPortTestFlag=FxsPortTestFlag, profileDialPlanNumber=profileDialPlanNumber, fxsPortConfigRingBackToneDetectionParameters=fxsPortConfigRingBackToneDetectionParameters, fxsPortUserName=fxsPortUserName, fxsPortConfigCtOutofservice=fxsPortConfigCtOutofservice, fansThresholdTemperature=fansThresholdTemperature, sipOptions=sipOptions, sipProfileXCAPNameForHotline=sipProfileXCAPNameForHotline, silenceSuppression=silenceSuppression, numRxOct=numRxOct, portTestResultFlag=portTestResultFlag, profilesDialPlansMIBBoundary=profilesDialPlansMIBBoundary, fxsPortConfigDtDetectTime=fxsPortConfigDtDetectTime, fxsCpuUsage=fxsCpuUsage, fxsSerialGroupsPorts=fxsSerialGroupsPorts, modifierRowStatus=modifierRowStatus, sipProfileXCAPNameForThreePartyConference=sipProfileXCAPNameForThreePartyConference, TauUserViewType=TauUserViewType, fxsSerialGroups=fxsSerialGroups, PortMegacoState=PortMegacoState, sipProfileDomainToReg=sipProfileDomainToReg, portTestCapacityTg=portTestCapacityTg, modifierRule=modifierRule, portTestLastTestEndTime=portTestLastTestEndTime, fxsPortConfigClir=fxsPortConfigClir, fxsMonitoringVRing1=fxsMonitoringVRing1, profilesSipCommon=profilesSipCommon, sipAuthentication=sipAuthentication, VoltageMode=VoltageMode, vapiLibLevel=vapiLibLevel, sipEnablesip=sipEnablesip, fxsNetwork=fxsNetwork, profilesSipAlertInfoTable=profilesSipAlertInfoTable, fxsAutoupdateSettings=fxsAutoupdateSettings, termID=termID, fxsMonitoring=fxsMonitoring, profilesSipMIBBoundary=profilesSipMIBBoundary, fxsPortConfigUseAltNumber=fxsPortConfigUseAltNumber, TypeTransport=TypeTransport, firewallApply=firewallApply, autoupdateProtocol=autoupdateProtocol, sipDtmfmime=sipDtmfmime, profilesSipAlertInfoMIBBoundary=profilesSipAlertInfoMIBBoundary, serialGroupRegistrationHost=serialGroupRegistrationHost, tauDialRegularText=tauDialRegularText, sipProfileRingbackSdp=sipProfileRingbackSdp, fxoSerialGroupsEnabled=fxoSerialGroupsEnabled, fxsPortConfigDontDetectDT=fxsPortConfigDontDetectDT, fxsPortConfigCommonPstnNameprefix=fxsPortConfigCommonPstnNameprefix, fxsPortConfigCtUnconditional=fxsPortConfigCtUnconditional, fxsPortConfigTransmitNumber=fxsPortConfigTransmitNumber, sipProfileMinSE=sipProfileMinSE, profilePortsFxoMinLevelDetect=profilePortsFxoMinLevelDetect, fxsPortConfigDvoCfBusyEn=fxsPortConfigDvoCfBusyEn, profileDialPlanDigits=profileDialPlanDigits, ruleTarget=ruleTarget, fxsPortConfigCommonCallTransfer=fxsPortConfigCommonCallTransfer, sipRegistration3=sipRegistration3, megacoPortStateStartTime=megacoPortStateStartTime, fxsMonitoringVinput=fxsMonitoringVinput, sipShortmode=sipShortmode, fxsSerialGroupsPhone=fxsSerialGroupsPhone, TauDialProtocolType=TauDialProtocolType, sipDomainToReg=sipDomainToReg, fansForceEnable=fansForceEnable, fxoSerialGroupsSipProfile=fxoSerialGroupsSipProfile, fxsPortConfigCommonMinFlashtime=fxsPortConfigCommonMinFlashtime, fxsPortsConfigEntry=fxsPortsConfigEntry, sipProxy2=sipProxy2, allDestinationPorts=allDestinationPorts, ciscoNsePT=ciscoNsePT, fxsPortSipConnected=fxsPortSipConnected, sipProfileProxy3=sipProfileProxy3, PortMegacoJitter=PortMegacoJitter)
