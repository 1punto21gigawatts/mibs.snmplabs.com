#
# PySNMP MIB module HM2-PLATFORM-MMRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-MMRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hm2AgentDot1qMrpMxrp, = mibBuilder.importSymbols("HM2-PLATFORM-MRP-MIB", "hm2AgentDot1qMrpMxrp")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, NotificationType, MibIdentifier, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, ModuleIdentity, Bits, Counter64, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "NotificationType", "MibIdentifier", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "ModuleIdentity", "Bits", "Counter64", "ObjectIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2PlatformMMRP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1))
hm2PlatformMMRP.setRevisions(('2013-04-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformMMRP.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformMMRP.setLastUpdated('201304100000Z')
if mibBuilder.loadTexts: hm2PlatformMMRP.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformMMRP.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformMMRP.setDescription('The Hirschmann Private Platform2 MIB for 802.1ak MMRP Configuration. Copyright (C) 2013. All Rights Reserved.')
hm2AgentDot1qMmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1))
hm2AgentDot1qMrpMmrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2))
hm2AgentDot1qPortMmrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpTable.setDescription('A table of MMRP control information about every bridge port. This is indexed by hm2AgentDot1qMmrpPort.')
hm2AgentDot1qPortMmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MMRP-MIB", "hm2AgentDot1qMmrpPort"))
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpEntry.setDescription('MMRP control information for a bridge port.')
hm2AgentDot1qMmrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMmrpPort.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMmrpPort.setDescription('The MMRP port number.')
hm2AgentDot1qPortMmrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpMode.setDescription('Enables/disables the MMRP admin-state on the port.')
hm2AgentDot1qBridgeMmrpMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMmrpMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMmrpMode.setDescription('Enables/disables the global MMRP admin-state on the device.')
hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp.setDescription('Enables/disables the MRP periodic state machine for MMRP.')
hm2AgentDot1qMrpMmrpPktTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktTx.setDescription("Total number of MMRP PDU's transmitted by the device.")
hm2AgentDot1qMrpMmrpPktRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRx.setDescription("Total number of MMRP PDU's received by the device.")
hm2AgentDot1qMrpMmrpPktRxBadHeader = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRxBadHeader.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRxBadHeader.setDescription("Total number of MMRP PDU's received by the device with bad header.")
hm2AgentDot1qMrpMmrpPktRxBadFormat = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRxBadFormat.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRxBadFormat.setDescription("Total number of MMRP PDU's received by the device with bad format.")
hm2AgentDot1qMrpMmrpPktTxFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktTxFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktTxFailure.setDescription("Total number of MMRP PDU's that were not transmitted by the device.")
hm2AgentDot1qMrpMmrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6), )
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpStatsTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpStatsTable.setDescription('A table which contains MMRP statistics per port.')
hm2AgentDot1qMrpMmrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-MMRP-MIB", "hm2AgentDot1qMrpMmrpIntf"))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpStatsEntry.setDescription('MMRP statistics entry.')
hm2AgentDot1qMrpMmrpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpIntf.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpIntf.setDescription('Index of hm2AgentDot1qMrpMmrpStatistics table.')
hm2AgentDot1qMrpMmrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktTx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktTx.setDescription("Total number of MMRP PDU's transmitted on port.")
hm2AgentDot1qMrpMmrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRx.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRx.setDescription("Total number of MMRP PDU's received on port.")
hm2AgentDot1qMrpMmrpPortPktRxBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRxBadHeader.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRxBadHeader.setDescription("Total number of MMRP PDU's received on port with bad header.")
hm2AgentDot1qMrpMmrpPortPktRxBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRxBadFormat.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRxBadFormat.setDescription("Total number of MMRP PDU's received on port with bad format.")
hm2AgentDot1qMrpMmrpPortPktTxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktTxFailure.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktTxFailure.setDescription("Total number of MMRP PDU's that were not transmitted on port.")
hm2AgentDot1qMrpMmrpDynamicAddrCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 248), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpDynamicAddrCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpDynamicAddrCount.setDescription('Total number of MAC addresses learned dynamically for MMRP.')
mibBuilder.exportSymbols("HM2-PLATFORM-MMRP-MIB", hm2AgentDot1qMrpMmrpPortPktRxBadHeader=hm2AgentDot1qMrpMmrpPortPktRxBadHeader, hm2AgentDot1qMrpMmrpPktRxBadHeader=hm2AgentDot1qMrpMmrpPktRxBadHeader, hm2AgentDot1qMrpMmrpPortPktRxBadFormat=hm2AgentDot1qMrpMmrpPortPktRxBadFormat, hm2AgentDot1qMmrp=hm2AgentDot1qMmrp, hm2AgentDot1qBridgeMmrpMode=hm2AgentDot1qBridgeMmrpMode, hm2AgentDot1qMrpMmrpPktRx=hm2AgentDot1qMrpMmrpPktRx, hm2AgentDot1qMrpMmrpPktRxBadFormat=hm2AgentDot1qMrpMmrpPktRxBadFormat, hm2AgentDot1qMmrpPort=hm2AgentDot1qMmrpPort, hm2AgentDot1qPortMmrpEntry=hm2AgentDot1qPortMmrpEntry, hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp=hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp, hm2AgentDot1qMrpMmrpIntf=hm2AgentDot1qMrpMmrpIntf, hm2AgentDot1qMrpMmrpPktTx=hm2AgentDot1qMrpMmrpPktTx, hm2AgentDot1qMrpMmrpPortPktRx=hm2AgentDot1qMrpMmrpPortPktRx, hm2AgentDot1qMrpMmrpPortPktTx=hm2AgentDot1qMrpMmrpPortPktTx, hm2AgentDot1qPortMmrpMode=hm2AgentDot1qPortMmrpMode, hm2AgentDot1qMrpMmrpStats=hm2AgentDot1qMrpMmrpStats, hm2AgentDot1qMrpMmrpDynamicAddrCount=hm2AgentDot1qMrpMmrpDynamicAddrCount, hm2AgentDot1qPortMmrpTable=hm2AgentDot1qPortMmrpTable, hm2AgentDot1qMrpMmrpStatsEntry=hm2AgentDot1qMrpMmrpStatsEntry, PYSNMP_MODULE_ID=hm2PlatformMMRP, hm2PlatformMMRP=hm2PlatformMMRP, hm2AgentDot1qMrpMmrpStatsTable=hm2AgentDot1qMrpMmrpStatsTable, hm2AgentDot1qMrpMmrpPortPktTxFailure=hm2AgentDot1qMrpMmrpPortPktTxFailure, hm2AgentDot1qMrpMmrpPktTxFailure=hm2AgentDot1qMrpMmrpPktTxFailure)
