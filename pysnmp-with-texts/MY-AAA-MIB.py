#
# PySNMP MIB module MY-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-AAA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
ConfigStatus, IfIndex = mibBuilder.importSymbols("MY-TC", "ConfigStatus", "IfIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Bits, Unsigned32, IpAddress, ModuleIdentity, Counter32, ObjectIdentity, Integer32, MibIdentifier, Counter64, NotificationType, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Unsigned32", "IpAddress", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32", "MibIdentifier", "Counter64", "NotificationType", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
myAAAMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19))
myAAAMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: myAAAMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: myAAAMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: myAAAMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: myAAAMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: myAAAMIB.setDescription('This module defines my AAA(802.1x) mibs.')
myAAAMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1))
myDot1xAuthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1))
myAAAServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2))
myAuthUserObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3))
myAuthModeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 4))
myClientProbeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 5))
myDot1xAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthStatus.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthStatus.setDescription('The enable(1)/disable(2) control used by the 802.1x global settings.')
myDot1xAuthObjectsQuietPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 2), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsQuietPeriod.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsQuietPeriod.setDescription('The value, in seconds, of the quietPeriod constant currently in use by the Authenticator PAE state machine.')
myDot1xAuthObjectsTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 3), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsTxPeriod.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsTxPeriod.setDescription('The value, in seconds, of the txPeriod constant currently in use by the Authenticator PAE state machine.')
myDot1xAuthObjectsSuppTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 4), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsSuppTimeout.setDescription('The value, in seconds, of the suppTimeout constant currently in use by the Backend Authentication state machine.')
myDot1xAuthObjectsServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 5), Unsigned32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsServerTimeout.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsServerTimeout.setDescription('The value, in seconds, of the serverTimeout constant currently in use by the Backend Authentication state machine.')
myDot1xAuthObjectsMaxReq = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 6), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsMaxReq.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsMaxReq.setDescription('The value of the maxReq constant currently in use by the Backend Authentication state machine.')
myDot1xAuthObjectsReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 7), Unsigned32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsReAuthPeriod.setDescription('The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine.')
myDot1xAuthObjectsMaxReauth = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 8), Unsigned32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsMaxReauth.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsMaxReauth.setDescription('The value of the reAuthMax constant currently in use by the Authenticator PAE state machine.')
myDot1xAuthObjectsReAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 9), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAuthObjectsReAuthEnable.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsReAuthEnable.setDescription('The enable(1)/disable(2) control used by the Reauthentication Timer state machine.')
myDot1xAuthObjectsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10), )
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigTable.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigTable.setDescription('A table that contains the configuration objects for the Authenticator PAE associated with each MAC address. An entry appears in this table for each MAC address that may authenticate access to itself.')
myDot1xAuthObjectsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1), ).setIndexNames((0, "MY-AAA-MIB", "myDot1xAuthObjectsConfigFdbId"), (0, "MY-AAA-MIB", "myDot1xAuthObjectsConfigAddr"))
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigEntry.setDescription('The configuration information for an Authenticator PAE.')
myDot1xAuthObjectsConfigFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigFdbId.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigFdbId.setDescription('The VID of vlan which the address blongs to.')
myDot1xAuthObjectsConfigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigAddr.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsConfigAddr.setDescription('The MAC address associated with this configurations.')
myDot1xAuthObjectsPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsPaeState.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsPaeState.setDescription('The current value of the Authenticator PAE state machine.')
myDot1xAuthObjectsBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
myDot1xAuthObjectsAuthControlledPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authorized", 1), ("unauthorized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsAuthControlledPortStatus.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsAuthControlledPortStatus.setDescription('The current value of the controlled Port status parameter for the Port.')
myDot1xAuthObjectsKeyTxEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsKeyTxEnabled.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsKeyTxEnabled.setDescription('The value of the keyTransmissionEnabled constant currently in use by the Authenticator PAE state machine.')
myDot1xAuthObjectsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 10, 1, 7), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsIfIndex.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsIfIndex.setDescription('The interface index associated with this configurations')
myDot1xAuthObjectsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11), )
if mibBuilder.loadTexts: myDot1xAuthObjectsStatsTable.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsStatsTable.setDescription('A table that contains the statistics objects for the Authenticator PAE associated with each MAC address. An entry appears in this table for each MAC address that may authenticate access to itself.')
myDot1xAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1), ).setIndexNames((0, "MY-AAA-MIB", "myDot1xAuthObjectsStatsFdbId"), (0, "MY-AAA-MIB", "myDot1xAuthObjectsStatsAddr"))
if mibBuilder.loadTexts: myDot1xAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthStatsEntry.setDescription('The statistics information for an Authenticator PAE.')
myDot1xAuthObjectsStatsFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsStatsFdbId.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsStatsFdbId.setDescription('The VID of vlan which the address blongs to.')
myDot1xAuthObjectsStatsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsStatsAddr.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsStatsAddr.setDescription('The MAC address associated with this states.')
myDot1xAuthObjectsEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator.')
myDot1xAuthObjectsEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolFramesTx.setDescription('The number of EAPOL frames of any type that have been transmitted by this Authenticator.')
myDot1xAuthObjectsEapolMyFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolMyFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolMyFramesRx.setDescription('The number of EAPOL My frames that have been received by this Authenticator.')
myDot1xAuthObjectsEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator.')
myDot1xAuthObjectsEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator.')
myDot1xAuthObjectsEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator.')
myDot1xAuthObjectsEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator.')
myDot1xAuthObjectsEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapolReqFramesTx.setDescription('The number of EAP Request frames (other than Rq/Id frames) that have been transmitted by this Authenticator.')
myDot1xAuthObjectsInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognized.')
myDot1xAuthObjectsEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid.')
myDot1xAuthObjectsLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frame.')
myDot1xAuthObjectsLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 11, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xAuthObjectsLastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthObjectsLastEapolFrameSource.setDescription('The source MAC address carried in the most recently received EAPOL frame.')
myDot1xCurrentUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xCurrentUserNumber.setStatus('current')
if mibBuilder.loadTexts: myDot1xCurrentUserNumber.setDescription('Numbers of users who attached to the system ,regardless of their state.')
myDot1xCurrentAuthenticatedUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xCurrentAuthenticatedUserNumber.setStatus('current')
if mibBuilder.loadTexts: myDot1xCurrentAuthenticatedUserNumber.setDescription('Numbers of user who attached to the system and their current state is authorized')
myDot1xAccountStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 14), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAccountStatus.setStatus('current')
if mibBuilder.loadTexts: myDot1xAccountStatus.setDescription('The enable(1)/disable(2) control used by the accounting function.')
myAuthIfTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 15), )
if mibBuilder.loadTexts: myAuthIfTable.setStatus('current')
if mibBuilder.loadTexts: myAuthIfTable.setDescription('The table of the authenticated status of interface.')
myAuthIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 15, 1), ).setIndexNames((0, "MY-AAA-MIB", "myAuthIf"))
if mibBuilder.loadTexts: myAuthIfEntry.setStatus('current')
if mibBuilder.loadTexts: myAuthIfEntry.setDescription('The entry of MAC address which can be authenticated.')
myAuthIf = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 15, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthIf.setStatus('current')
if mibBuilder.loadTexts: myAuthIf.setDescription('The port number of the port/trunk to which frames received from a specific port/trunk and destined for a specific MAC address.')
myAuthIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 15, 1, 2), EnabledStatus().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAuthIfStatus.setStatus('current')
if mibBuilder.loadTexts: myAuthIfStatus.setDescription('The authentication status of a port, can be opened by setting its value to Enabled(1), or closed by setting its value to Disabled(2).')
myAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eap-md5", 1), ("chap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: myAuthenticationMode.setDescription('Mode used for authentication')
myDot1xAccountUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAccountUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: myDot1xAccountUpdateStatus.setDescription('Account Update Status')
myDot1xAcctInterimInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xAcctInterimInterval.setStatus('current')
if mibBuilder.loadTexts: myDot1xAcctInterimInterval.setDescription('Account Interim Interval')
myDot1xEapolTagEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 19), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xEapolTagEnabled.setStatus('current')
if mibBuilder.loadTexts: myDot1xEapolTagEnabled.setDescription('Eapol Tag Enabled')
myDot1xIfUserMaxTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 20), )
if mibBuilder.loadTexts: myDot1xIfUserMaxTable.setStatus('current')
if mibBuilder.loadTexts: myDot1xIfUserMaxTable.setDescription('The table of the max dot1x user number on authenticated interface.')
myDot1xIfUserMaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 20, 1), ).setIndexNames((0, "MY-AAA-MIB", "myDot1xIfUserMaxIndex"))
if mibBuilder.loadTexts: myDot1xIfUserMaxEntry.setStatus('current')
if mibBuilder.loadTexts: myDot1xIfUserMaxEntry.setDescription('The entry of max dot1x user number on authenticated interface.')
myDot1xIfUserMaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 20, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myDot1xIfUserMaxIndex.setStatus('current')
if mibBuilder.loadTexts: myDot1xIfUserMaxIndex.setDescription('The interface index which dot1x authentication is enabled.')
myDot1xIfUserMaxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 1, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myDot1xIfUserMaxNum.setStatus('current')
if mibBuilder.loadTexts: myDot1xIfUserMaxNum.setDescription('The max dot1x user num on the interface, this is valid only when dot1x authentication is enable on that interface. Number 0 indicates no user number limits enabled on the interface.')
myAAAServerAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAAAServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: myAAAServerAuthPort.setDescription('UDP port used for authentication in the global configuration. For RADIUS only, default value is 1812.')
myAAAServerAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAAAServerAcctPort.setStatus('current')
if mibBuilder.loadTexts: myAAAServerAcctPort.setDescription('UDP port used for accounting service in the global configuration. For RADIUS only, default value is 1813.')
myAAAServerRadiusKeyStr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAAAServerRadiusKeyStr.setStatus('current')
if mibBuilder.loadTexts: myAAAServerRadiusKeyStr.setDescription('The server key to be used with all RADIUS server. Retrieving the value of this object via SNMP will return an empty string for security reasons.')
myAAAServerTacplusKeyStr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAAAServerTacplusKeyStr.setStatus('current')
if mibBuilder.loadTexts: myAAAServerTacplusKeyStr.setDescription('The server key to be used with all TACACS+ server. Retrieving the value of this object via SNMP will return an empty string for security reasons.')
myAAAServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9), )
if mibBuilder.loadTexts: myAAAServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigTable.setDescription('This table shows current configurations for each AAA server, allows existing servers to be removed and new ones to be created.')
myAAAServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1), ).setIndexNames((0, "MY-AAA-MIB", "myAAAServerConfigProtocol"), (0, "MY-AAA-MIB", "myAAAServerConfigIndex"))
if mibBuilder.loadTexts: myAAAServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigEntry.setDescription('The table of AAA server configuration identified by its protocol and its index.')
myAAAServerConfigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("tacplus", 2))))
if mibBuilder.loadTexts: myAAAServerConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigProtocol.setDescription('The variable denotes the protocol used by the managed device with the AAA server corresponding to this entry in the table.')
myAAAServerConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: myAAAServerConfigIndex.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigIndex.setDescription('A number uniquely identifying each server. If the myAAAServerConfigIndex value for row creation is already in use by an existing entry, snmp set to the myAAAServerConfigIndex value will fail. Upon reload, casIndex values may be changed.')
myAAAServerConfigAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myAAAServerConfigAddressType.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigAddressType.setDescription('The type of address format used for the myAAAServerConfigAddress object.')
myAAAServerConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myAAAServerConfigAddress.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigAddress.setDescription('The IP address of the server.')
myAAAServerConfigAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myAAAServerConfigAuthPort.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigAuthPort.setDescription('UDP/TCP port used for authentication in the server. For RADIUS, default value is 1812. For TACACS+, default value is 49.')
myAAAServerConfigAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myAAAServerConfigAcctPort.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigAcctPort.setDescription('UDP/TCP port used for accounting service in the server. For RADIUS, default value is 1813. For TACACS+, the value of myAAAServerConfigAcctPort is ignored, myAAAServerConfigAuthPort will be used instead.')
myAAAServerConfigKeyStr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myAAAServerConfigKeyStr.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigKeyStr.setDescription('The server key to be used with this server. Retrieving the value of this object via SNMP will return an empty string for security reasons.')
myAAAServerConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 2, 9, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myAAAServerConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: myAAAServerConfigRowStatus.setDescription('The status of this table entry. Once the entry status is set to active, the associated entry cannot be modified except destroyed by setting this object to destroy(6).')
myAuthAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 1), )
if mibBuilder.loadTexts: myAuthAddrTable.setStatus('current')
if mibBuilder.loadTexts: myAuthAddrTable.setDescription('The table of MAC address which can be authenticated.')
myAuthAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 1, 1), ).setIndexNames((0, "MY-AAA-MIB", "myAuthPort"), (0, "MY-AAA-MIB", "myAuthMacAddress"))
if mibBuilder.loadTexts: myAuthAddrEntry.setStatus('current')
if mibBuilder.loadTexts: myAuthAddrEntry.setDescription('The entry of MAC address which can be authenticated.')
myAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 1, 1, 1), IfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthPort.setStatus('current')
if mibBuilder.loadTexts: myAuthPort.setDescription('The port number of the port/trunk to which frames received from a specific port/trunk and destined for a specific MAC address.')
myAuthMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthMacAddress.setStatus('current')
if mibBuilder.loadTexts: myAuthMacAddress.setDescription('The MAC address which can be authenticated.')
myAuthAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAuthAddrStatus.setStatus('current')
if mibBuilder.loadTexts: myAuthAddrStatus.setDescription('valid(1) - this entry is currently in use . invalid(2) - writing this value to the object removes the corresponding entry.')
myAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2), )
if mibBuilder.loadTexts: myAuthUserTable.setStatus('current')
if mibBuilder.loadTexts: myAuthUserTable.setDescription('The table of authentication User Info.')
myAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1), ).setIndexNames((0, "MY-AAA-MIB", "myAuthUserFdbId"), (0, "MY-AAA-MIB", "myAuthUserMacAddress"))
if mibBuilder.loadTexts: myAuthUserEntry.setStatus('current')
if mibBuilder.loadTexts: myAuthUserEntry.setDescription('The entry of authentication User Info table.')
myAuthUserFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthUserFdbId.setStatus('current')
if mibBuilder.loadTexts: myAuthUserFdbId.setDescription('The VID of vlan which the address blongs to.')
myAuthUserMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthUserMacAddress.setStatus('current')
if mibBuilder.loadTexts: myAuthUserMacAddress.setDescription(' The MAC Address of authentication User .')
myAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthUserName.setStatus('current')
if mibBuilder.loadTexts: myAuthUserName.setDescription('The Name of authentication User.')
myAuthUserSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthUserSessionId.setStatus('current')
if mibBuilder.loadTexts: myAuthUserSessionId.setDescription(' The Session Id of authentication User .')
myAuthUserIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthUserIpAddr.setStatus('current')
if mibBuilder.loadTexts: myAuthUserIpAddr.setDescription(' The IP Address of authentication User .')
myAuthUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myAuthUserPort.setStatus('current')
if mibBuilder.loadTexts: myAuthUserPort.setDescription(' The interface of authentication User .')
myAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 2, 1, 7), ConfigStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAuthUserStatus.setStatus('current')
if mibBuilder.loadTexts: myAuthUserStatus.setDescription("Setting this object to 'invalid' will close a authenticated user, set its value to valid will cause no action of agent, when query always return value valid.")
myAuthUserForVPNDel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myAuthUserForVPNDel.setStatus('current')
if mibBuilder.loadTexts: myAuthUserForVPNDel.setDescription("VPN user's name. Setting this object will delete a authenticated user and this user is unauthenticated. The set string is the username. Reading this object always return null string.")
myIpAuthorizationMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("dhcpServer", 2), ("radiusServer", 3), ("supplicant", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myIpAuthorizationMode.setStatus('current')
if mibBuilder.loadTexts: myIpAuthorizationMode.setDescription("disable(1) - don't limit ip address of user dhcpServer(2) - limit ip address of user, only ip address assigned by the dhcp server is legit. radiusServer(3) - limit ip address of user, only ip address assigned by the radius server is legit. supplicant(4) - mac+ip+port indicates different users (get the IP adress through supplicant)")
myClientProbeEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myClientProbeEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: myClientProbeEnabledStatus.setDescription('The status of client probe function.')
myClientProbeHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 5, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myClientProbeHelloInterval.setStatus('current')
if mibBuilder.loadTexts: myClientProbeHelloInterval.setDescription('The interval that client send hello packets.')
myClientProbeAliveInteval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 1, 5, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myClientProbeAliveInteval.setStatus('current')
if mibBuilder.loadTexts: myClientProbeAliveInteval.setDescription('When switch does not receive any legal hello packets from client in this interval,it will send RADIUS-Account-Stop to RADIUS server to stop this connection.The value of the objects must be more than myClientProbeHelloInterval')
myAAAMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2))
myAAAMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 1))
myAAAMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 2))
myAAAMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 1, 1)).setObjects(("MY-AAA-MIB", "myDot1xAuthMIBGroup"), ("MY-AAA-MIB", "myAAAServerMIBGroup"), ("MY-AAA-MIB", "myAuthAddrMIBGroup"), ("MY-AAA-MIB", "myAuthModeMIBGroup"), ("MY-AAA-MIB", "myClientProbeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myAAAMIBCompliance = myAAAMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: myAAAMIBCompliance.setDescription('The compliance statement for entities which implement the My AAA MIB')
myDot1xAuthMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 2, 1)).setObjects(("MY-AAA-MIB", "myDot1xAuthStatus"), ("MY-AAA-MIB", "myDot1xAuthObjectsQuietPeriod"), ("MY-AAA-MIB", "myDot1xAuthObjectsTxPeriod"), ("MY-AAA-MIB", "myDot1xAuthObjectsSuppTimeout"), ("MY-AAA-MIB", "myDot1xAuthObjectsServerTimeout"), ("MY-AAA-MIB", "myDot1xAuthObjectsMaxReq"), ("MY-AAA-MIB", "myDot1xAuthObjectsReAuthPeriod"), ("MY-AAA-MIB", "myDot1xAuthObjectsReAuthEnable"), ("MY-AAA-MIB", "myDot1xAuthObjectsConfigFdbId"), ("MY-AAA-MIB", "myDot1xAuthObjectsConfigAddr"), ("MY-AAA-MIB", "myDot1xAuthObjectsPaeState"), ("MY-AAA-MIB", "myDot1xAuthObjectsBackendAuthState"), ("MY-AAA-MIB", "myDot1xAuthObjectsAuthControlledPortStatus"), ("MY-AAA-MIB", "myDot1xAuthObjectsKeyTxEnabled"), ("MY-AAA-MIB", "myDot1xAuthObjectsIfIndex"), ("MY-AAA-MIB", "myDot1xAuthObjectsStatsFdbId"), ("MY-AAA-MIB", "myDot1xAuthObjectsStatsAddr"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolFramesTx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolMyFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolLogoffFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolRespIdFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolRespFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolReqIdFramesTx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapolReqFramesTx"), ("MY-AAA-MIB", "myDot1xAuthObjectsInvalidEapolFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsEapLengthErrorFramesRx"), ("MY-AAA-MIB", "myDot1xAuthObjectsLastEapolFrameVersion"), ("MY-AAA-MIB", "myDot1xAuthObjectsLastEapolFrameSource"), ("MY-AAA-MIB", "myDot1xCurrentUserNumber"), ("MY-AAA-MIB", "myDot1xCurrentAuthenticatedUserNumber"), ("MY-AAA-MIB", "myDot1xAuthObjectsMaxReauth"), ("MY-AAA-MIB", "myAuthIf"), ("MY-AAA-MIB", "myAuthIfStatus"), ("MY-AAA-MIB", "myAuthenticationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myDot1xAuthMIBGroup = myDot1xAuthMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myDot1xAuthMIBGroup.setDescription('A collection of objects providing dot1x authentication managment.')
myAAAServerMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 2, 2)).setObjects(("MY-AAA-MIB", "myAAAServerAuthPort"), ("MY-AAA-MIB", "myAAAServerAcctPort"), ("MY-AAA-MIB", "myAAAServerRadiusKeyStr"), ("MY-AAA-MIB", "myAAAServerTacplusKeyStr"), ("MY-AAA-MIB", "myAAAServerConfigAddressType"), ("MY-AAA-MIB", "myAAAServerConfigAddress"), ("MY-AAA-MIB", "myAAAServerConfigAuthPort"), ("MY-AAA-MIB", "myAAAServerConfigAcctPort"), ("MY-AAA-MIB", "myAAAServerConfigKeyStr"), ("MY-AAA-MIB", "myAAAServerConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myAAAServerMIBGroup = myAAAServerMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myAAAServerMIBGroup.setDescription('A collection of objects providing AAA server managment.')
myAuthAddrMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 2, 3)).setObjects(("MY-AAA-MIB", "myAuthMacAddress"), ("MY-AAA-MIB", "myAuthPort"), ("MY-AAA-MIB", "myAuthAddrStatus"), ("MY-AAA-MIB", "myAuthUserFdbId"), ("MY-AAA-MIB", "myAuthUserMacAddress"), ("MY-AAA-MIB", "myAuthUserName"), ("MY-AAA-MIB", "myAuthUserSessionId"), ("MY-AAA-MIB", "myAuthUserIpAddr"), ("MY-AAA-MIB", "myAuthUserPort"), ("MY-AAA-MIB", "myAuthUserStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myAuthAddrMIBGroup = myAuthAddrMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myAuthAddrMIBGroup.setDescription('A collection of objects providing address permitted authentication managment.')
myAuthModeMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 2, 4)).setObjects(("MY-AAA-MIB", "myIpAuthorizationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myAuthModeMIBGroup = myAuthModeMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myAuthModeMIBGroup.setDescription('A collection of objects providing authentication mode managment.')
myClientProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 19, 2, 2, 5)).setObjects(("MY-AAA-MIB", "myClientProbeEnabledStatus"), ("MY-AAA-MIB", "myClientProbeHelloInterval"), ("MY-AAA-MIB", "myClientProbeAliveInteval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myClientProbeGroup = myClientProbeGroup.setStatus('current')
if mibBuilder.loadTexts: myClientProbeGroup.setDescription('A collection of objects providing client probe management.')
mibBuilder.exportSymbols("MY-AAA-MIB", myDot1xAuthObjectsServerTimeout=myDot1xAuthObjectsServerTimeout, myAAAServerRadiusKeyStr=myAAAServerRadiusKeyStr, myDot1xAuthStatsEntry=myDot1xAuthStatsEntry, myAuthIfEntry=myAuthIfEntry, myDot1xAuthObjectsQuietPeriod=myDot1xAuthObjectsQuietPeriod, myAAAMIBObjects=myAAAMIBObjects, myDot1xAuthObjectsEapLengthErrorFramesRx=myDot1xAuthObjectsEapLengthErrorFramesRx, myIpAuthorizationMode=myIpAuthorizationMode, myAAAServerMIBGroup=myAAAServerMIBGroup, myAuthUserSessionId=myAuthUserSessionId, myDot1xAuthObjectsStatsAddr=myDot1xAuthObjectsStatsAddr, myAAAServerAcctPort=myAAAServerAcctPort, myDot1xAuthObjectsIfIndex=myDot1xAuthObjectsIfIndex, myAAAServerConfigEntry=myAAAServerConfigEntry, myAuthUserForVPNDel=myAuthUserForVPNDel, myAAAServerConfigAcctPort=myAAAServerConfigAcctPort, myAAAServerConfigRowStatus=myAAAServerConfigRowStatus, myAAAServerConfigProtocol=myAAAServerConfigProtocol, myAAAMIBCompliance=myAAAMIBCompliance, myDot1xAuthObjectsTxPeriod=myDot1xAuthObjectsTxPeriod, myDot1xAuthObjectsEapolLogoffFramesRx=myDot1xAuthObjectsEapolLogoffFramesRx, myDot1xAuthObjectsMaxReq=myDot1xAuthObjectsMaxReq, myDot1xAuthObjectsEapolReqFramesTx=myDot1xAuthObjectsEapolReqFramesTx, myAAAServerConfigAuthPort=myAAAServerConfigAuthPort, myDot1xAuthObjectsLastEapolFrameVersion=myDot1xAuthObjectsLastEapolFrameVersion, myDot1xAuthObjectsConfigTable=myDot1xAuthObjectsConfigTable, myDot1xAuthMIBGroup=myDot1xAuthMIBGroup, myDot1xAuthObjectsConfigAddr=myDot1xAuthObjectsConfigAddr, myDot1xAuthObjectsLastEapolFrameSource=myDot1xAuthObjectsLastEapolFrameSource, myClientProbeGroup=myClientProbeGroup, myDot1xAuthObjectsSuppTimeout=myDot1xAuthObjectsSuppTimeout, myAAAServerTacplusKeyStr=myAAAServerTacplusKeyStr, myDot1xEapolTagEnabled=myDot1xEapolTagEnabled, myAAAServerAuthPort=myAAAServerAuthPort, myAAAServerObjects=myAAAServerObjects, myDot1xAuthObjectsEapolRespFramesRx=myDot1xAuthObjectsEapolRespFramesRx, myAuthIfStatus=myAuthIfStatus, myAuthUserTable=myAuthUserTable, myDot1xAuthObjectsStatsTable=myDot1xAuthObjectsStatsTable, myAAAMIB=myAAAMIB, myDot1xAuthObjectsEapolFramesRx=myDot1xAuthObjectsEapolFramesRx, myAuthIf=myAuthIf, myDot1xAuthObjectsStatsFdbId=myDot1xAuthObjectsStatsFdbId, myAuthUserEntry=myAuthUserEntry, myDot1xAcctInterimInterval=myDot1xAcctInterimInterval, myAuthUserMacAddress=myAuthUserMacAddress, myDot1xAuthStatus=myDot1xAuthStatus, myClientProbeAliveInteval=myClientProbeAliveInteval, myAAAServerConfigAddress=myAAAServerConfigAddress, myAuthUserObjects=myAuthUserObjects, myDot1xAccountUpdateStatus=myDot1xAccountUpdateStatus, myAAAServerConfigAddressType=myAAAServerConfigAddressType, myDot1xCurrentUserNumber=myDot1xCurrentUserNumber, myDot1xIfUserMaxTable=myDot1xIfUserMaxTable, myDot1xAuthObjectsBackendAuthState=myDot1xAuthObjectsBackendAuthState, myClientProbeObjects=myClientProbeObjects, myAuthAddrTable=myAuthAddrTable, myAuthUserFdbId=myAuthUserFdbId, myDot1xIfUserMaxIndex=myDot1xIfUserMaxIndex, myAuthUserIpAddr=myAuthUserIpAddr, myAuthIfTable=myAuthIfTable, myDot1xAuthObjectsInvalidEapolFramesRx=myDot1xAuthObjectsInvalidEapolFramesRx, myClientProbeHelloInterval=myClientProbeHelloInterval, myDot1xCurrentAuthenticatedUserNumber=myDot1xCurrentAuthenticatedUserNumber, myClientProbeEnabledStatus=myClientProbeEnabledStatus, myDot1xAuthObjectsReAuthPeriod=myDot1xAuthObjectsReAuthPeriod, myAuthAddrStatus=myAuthAddrStatus, myDot1xAuthObjectsEapolMyFramesRx=myDot1xAuthObjectsEapolMyFramesRx, myDot1xAuthObjectsEapolReqIdFramesTx=myDot1xAuthObjectsEapolReqIdFramesTx, myAAAServerConfigTable=myAAAServerConfigTable, myDot1xAuthObjectsReAuthEnable=myDot1xAuthObjectsReAuthEnable, myDot1xAuthObjectsAuthControlledPortStatus=myDot1xAuthObjectsAuthControlledPortStatus, myDot1xAuthObjectsEapolRespIdFramesRx=myDot1xAuthObjectsEapolRespIdFramesRx, myAuthModeObjects=myAuthModeObjects, myAuthMacAddress=myAuthMacAddress, myAAAMIBCompliances=myAAAMIBCompliances, myAuthUserPort=myAuthUserPort, myAuthUserStatus=myAuthUserStatus, myDot1xAuthObjectsConfigEntry=myDot1xAuthObjectsConfigEntry, myDot1xAuthObjectsEapolFramesTx=myDot1xAuthObjectsEapolFramesTx, myAuthAddrMIBGroup=myAuthAddrMIBGroup, myAuthModeMIBGroup=myAuthModeMIBGroup, myDot1xAccountStatus=myDot1xAccountStatus, myDot1xIfUserMaxNum=myDot1xIfUserMaxNum, myDot1xAuthObjectsMaxReauth=myDot1xAuthObjectsMaxReauth, myAAAMIBConformance=myAAAMIBConformance, myAuthAddrEntry=myAuthAddrEntry, myDot1xAuthObjectsPaeState=myDot1xAuthObjectsPaeState, myAAAServerConfigKeyStr=myAAAServerConfigKeyStr, myAuthUserName=myAuthUserName, myDot1xIfUserMaxEntry=myDot1xIfUserMaxEntry, myDot1xAuthObjects=myDot1xAuthObjects, myDot1xAuthObjectsKeyTxEnabled=myDot1xAuthObjectsKeyTxEnabled, myAuthenticationMode=myAuthenticationMode, myDot1xAuthObjectsConfigFdbId=myDot1xAuthObjectsConfigFdbId, myAAAMIBGroups=myAAAMIBGroups, myAuthPort=myAuthPort, myAAAServerConfigIndex=myAAAServerConfigIndex, PYSNMP_MODULE_ID=myAAAMIB)
