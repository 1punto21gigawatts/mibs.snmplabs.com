#
# PySNMP MIB module F10-BPSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-BPSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, iso, Unsigned32, MibIdentifier, Counter32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Integer32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "iso", "Unsigned32", "MibIdentifier", "Counter32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Integer32", "NotificationType", "ObjectIdentity")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
f10BpStatsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 24))
f10BpStatsMib.setRevisions(('2013-05-22 12:48',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10BpStatsMib.setRevisionsDescriptions(('Initial version of this mib.',))
if mibBuilder.loadTexts: f10BpStatsMib.setLastUpdated('201309181248Z')
if mibBuilder.loadTexts: f10BpStatsMib.setOrganization('Dell Inc')
if mibBuilder.loadTexts: f10BpStatsMib.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10BpStatsMib.setDescription('Dell Networking OS Back plane statistics mib. This is MIB shall use for all back plane statistics related activities. This includes the BP ports traffic statistics. BP link bundle monitoring based on BP port statistics. Queue statistics and buffer utilization on BP ports etc ..')
f10BpStatsLinkBundleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 1))
f10BpStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2))
f10BpStatsAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3))
bpLinkBundleObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 1, 1))
bpLinkBundleRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 299))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpLinkBundleRateInterval.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleRateInterval.setDescription('The rate interval for polling the Bp link bundle Monitoring.')
bpLinkBundleTriggerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 90))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bpLinkBundleTriggerThreshold.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleTriggerThreshold.setDescription('The traffic distribution trigger threshold for Bp link bundle Monitoring.In percentage of total bandwidth of the link Bundle')
bpStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1))
bpDropsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1), )
if mibBuilder.loadTexts: bpDropsTable.setStatus('current')
if mibBuilder.loadTexts: bpDropsTable.setDescription('The back plane drops table contains the list of various drops per BP higig port per BCM unit in a stack unit(card type).')
bpDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1), ).setIndexNames((0, "F10-BPSTATS-MIB", "bpDropsStackUnitIndex"), (0, "F10-BPSTATS-MIB", "bpDropsPortPipe"), (0, "F10-BPSTATS-MIB", "bpDropsPortIndex"))
if mibBuilder.loadTexts: bpDropsEntry.setStatus('current')
if mibBuilder.loadTexts: bpDropsEntry.setDescription('Each drops entry is being indexed by StackUnit(card Type) BCM unit ID and local Port Id')
bpDropsStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: bpDropsStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: bpDropsStackUnitIndex.setDescription('Stack unit(Card Type Id) number where this port present Each card shall contain more than one BCM units')
bpDropsPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: bpDropsPortPipe.setStatus('current')
if mibBuilder.loadTexts: bpDropsPortPipe.setDescription('bpPortPipe denotes the BCM unit in the stack unit(card Type) Each BCM unit shall contain 1-128 local ports, which includes BP as well as front end ports')
bpDropsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: bpDropsPortIndex.setStatus('current')
if mibBuilder.loadTexts: bpDropsPortIndex.setDescription('BP port number. Maximum ports shall support by Trident2 BCM npu is 128. This address space includes FE ports also, which are invalid ports as far as BP is concern. For Z9000 leaf BCM units, 34 to 41 are the valid BP port numbers and for spine BCM units, 1 to 16 are the valid BP ports ')
bpDropsInDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsInDrops.setStatus('current')
if mibBuilder.loadTexts: bpDropsInDrops.setDescription('The No of Ingress packet Drops')
bpDropsInUnKnownHgHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsInUnKnownHgHdr.setStatus('current')
if mibBuilder.loadTexts: bpDropsInUnKnownHgHdr.setDescription('The No of Unknown hiGig header Ingress packet Drops')
bpDropsInUnKnownHgOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsInUnKnownHgOpcode.setStatus('current')
if mibBuilder.loadTexts: bpDropsInUnKnownHgOpcode.setDescription('The No of Unknown hiGig Opcode Ingress packet Drops')
bpDropsInMTUExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsInMTUExceeds.setStatus('current')
if mibBuilder.loadTexts: bpDropsInMTUExceeds.setDescription('No of packets dropped on Ingress because of MTUExceeds')
bpDropsInMacDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsInMacDrops.setStatus('current')
if mibBuilder.loadTexts: bpDropsInMacDrops.setDescription('No of packets dropped on Ingress MAC')
bpDropsMMUHOLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsMMUHOLDrops.setStatus('current')
if mibBuilder.loadTexts: bpDropsMMUHOLDrops.setDescription('No of packets dropped in MMU because of MMU HOL Drops')
bpDropsEgMacDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsEgMacDrops.setStatus('current')
if mibBuilder.loadTexts: bpDropsEgMacDrops.setDescription('No of packets dropped on Egress MAC')
bpDropsEgTxAgedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsEgTxAgedCounter.setStatus('current')
if mibBuilder.loadTexts: bpDropsEgTxAgedCounter.setDescription('No of Aged packets dropped on Egress')
bpDropsEgTxErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsEgTxErrCounter.setStatus('current')
if mibBuilder.loadTexts: bpDropsEgTxErrCounter.setDescription('No of Error packets dropped on Egress')
bpDropsEgTxMACUnderflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsEgTxMACUnderflow.setStatus('current')
if mibBuilder.loadTexts: bpDropsEgTxMACUnderflow.setDescription('No of MAC underflow packets dropped on Egress')
bpDropsEgTxErrPktCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpDropsEgTxErrPktCounter.setStatus('current')
if mibBuilder.loadTexts: bpDropsEgTxErrPktCounter.setDescription('No of total packets dropped in Egress')
bpIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2), )
if mibBuilder.loadTexts: bpIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsTable.setDescription('The back plane counter statistics table contains the list of various counters per BP higig port per BCM unit in a stack unit(card type).')
bpIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1), ).setIndexNames((0, "F10-BPSTATS-MIB", "bpIfStatsStackUnitIndex"), (0, "F10-BPSTATS-MIB", "bpIfStatsPortPipe"), (0, "F10-BPSTATS-MIB", "bpIfStatsPortIndex"))
if mibBuilder.loadTexts: bpIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsEntry.setDescription('Each Stats entry is being indexed by StackUnit(card Type) BCM unit ID and local Port Id')
bpIfStatsStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: bpIfStatsStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsStackUnitIndex.setDescription('Stack unit(Card Type Id) number where this port present Each card shall contain more than one BCM units')
bpIfStatsPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: bpIfStatsPortPipe.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsPortPipe.setDescription('bpPortPipe denotes the BCM unit in the stack unit(card Type) Each BCM unit shall contain 1-128 local ports, which includes BP as well as front end ports')
bpIfStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: bpIfStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsPortIndex.setDescription('BP port number. Maximum ports shall support by Trident2 BCM npu is 128. This address space includes FE ports also, which are invalid ports as far as BP is concern. For Z9000 leaf BCM units, 34 to 41 are the valid BP port numbers and for spine BCM units, 1 to 16 are the valid BP ports ')
bpIfStatsIn64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsIn64BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsIn64BytePkts.setDescription('The total number of frames (including bad frames) received that were 64 octets in length (excluding framing bits but including FCS octets).')
bpIfStatsIn65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsIn65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsIn65To127BytePkts.setDescription('The total number of frames (including bad frames) received that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
bpIfStatsIn128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsIn128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsIn128To255BytePkts.setDescription('The total number of frames (including bad frames) received that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
bpIfStatsIn256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsIn256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsIn256To511BytePkts.setDescription('The total number of frames (including bad frames) received that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
bpIfStatsIn512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsIn512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsIn512To1023BytePkts.setDescription('The total number of frames (including bad frames) received that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
bpIfStatsInOver1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInOver1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInOver1023BytePkts.setDescription('The total number of frames received that were longer than 1023 (1025 Bytes in case of VLAN Tag) octets (excluding framing bits, but including FCS octets) and were otherwise well formed. This counter is not incremented for too long frames.')
bpIfStatsInThrottles = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInThrottles.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInThrottles.setDescription('This counter is incremented when a valid frame with a length or type field value equal to 0x8808 (Control Frame) is received.')
bpIfStatsInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInRunts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInRunts.setDescription('The total number of frames received that were less than 64 octets long (excluding framing bits, but including FCS octets) and were otherwise well formed.')
bpIfStatsInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInGiants.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInGiants.setDescription('The total number of frames received that were longer than 1518 (1522 Bytes in case of VLAN Tag) octets (excluding framing bits, but including FCS octets) and were otherwise well formed. This counter is not incremented for too long frames.')
bpIfStatsInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInCRC.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInCRC.setDescription('The total number of frames received that had a length (excluding framing bits, but including FCS octets) of between 64 and 1518 octets, inclusive, but had a bad CRC.')
bpIfStatsInOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInOverruns.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInOverruns.setDescription('The total number of frames has been chosen to be dropped by detecting the buffer issue')
bpIfStatsOutUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutUnderruns.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutUnderruns.setDescription('The total number of frames dropped because of buffer underrun.')
bpIfStatsOutUnicasts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutUnicasts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutUnicasts.setDescription('The total number of Unicast frames are transmitted out of the interface')
bpIfStatsOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutCollisions.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutCollisions.setDescription('A count of the frames that due to excessive or late collisions are not transmitted successfully.')
bpIfStatsOutWredDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutWredDrops.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutWredDrops.setDescription('The total number of frames are dropped by using WRED policy due to excessive traffic.')
bpIfStatsOut64BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOut64BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOut64BytePkts.setDescription('The total number of valid frames with the block of 64 byte size is transmitted')
bpIfStatsOut65To127BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOut65To127BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOut65To127BytePkts.setDescription('The total of valid frame with the block size of range between 65 and 127 bytes are transmitted.')
bpIfStatsOut128To255BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOut128To255BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOut128To255BytePkts.setDescription('The total of valid frame with the block size of range between 128 and 255 bytes are transmitted')
bpIfStatsOut256To511BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOut256To511BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOut256To511BytePkts.setDescription('The total of valid frame with the block size of range between 256 and 511 bytes are transmitted')
bpIfStatsOut512To1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOut512To1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOut512To1023BytePkts.setDescription('The total of valid frame with the block size of range between 512 and 1023 bytes are transmitted')
bpIfStatsOutOver1023BytePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutOver1023BytePkts.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutOver1023BytePkts.setDescription('The total of valid frame with the block size of greater than 1023 bytes are transmitted.')
bpIfStatsOutThrottles = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutThrottles.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutThrottles.setDescription('This counter is incremented when a valid frame with a length or type field value equal to 0x8808 (Control Frame) is sent.')
bpIfStatsLastDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsLastDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsLastDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which this interface's counters suffered a discontinuity via a reset. If no such discontinuities have occurred since the last reinitialization of the local management subsystem, then this object contains a zero value.")
bpIfStatsInCentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsInCentRate.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsInCentRate.setDescription('This is the percentage of maximum line rate at which data is receiving on the Interface. For Z9000 - BP hiGig line rate is 42G. This is an integer value which can go from 0% to 100%.')
bpIfStatsOutCentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsOutCentRate.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsOutCentRate.setDescription('This is the percentage of maximum line rate at which data is sending on the Interface. For Z9000 - BP hiGig line rate is 42G. This is an integer value which can go from 0% to 100%.')
bpIfStatsLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 2, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpIfStatsLastChange.setStatus('current')
if mibBuilder.loadTexts: bpIfStatsLastChange.setDescription('The value of sysUpTime, on which all the counters are updated recently')
bpPacketBufferTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3), )
if mibBuilder.loadTexts: bpPacketBufferTable.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferTable.setDescription('The packet buffer table contains the modular packet buffers details per stack unit and the mode of allocation.')
bpPacketBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3, 1), ).setIndexNames((0, "F10-BPSTATS-MIB", "bpPacketBufferStackUnitIndex"), (0, "F10-BPSTATS-MIB", "bpPacketBufferPortPipe"))
if mibBuilder.loadTexts: bpPacketBufferEntry.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferEntry.setDescription('Packet buffer details per NPU unit.')
bpPacketBufferStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: bpPacketBufferStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferStackUnitIndex.setDescription('Stack unit(Card Type Id) number where this port present Each card shall contain more than one BCM units')
bpPacketBufferPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: bpPacketBufferPortPipe.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferPortPipe.setDescription('bpPortPipe denotes the BCM unit in the stack unit(card Type) Each BCM unit shall contain 1-128 local ports, which includes BP as well as front end ports')
bpPacketBufferTotalPacketBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpPacketBufferTotalPacketBuffer.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferTotalPacketBuffer.setDescription('Total packet buffer in this NPU unit.')
bpPacketBufferCurrentAvailBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpPacketBufferCurrentAvailBuffer.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferCurrentAvailBuffer.setDescription('Current available buffer in this NPU unit.')
bpPacketBufferPacketBufferAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpPacketBufferPacketBufferAlloc.setStatus('current')
if mibBuilder.loadTexts: bpPacketBufferPacketBufferAlloc.setDescription('Static or Dynamic allocation.')
bpBufferStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4), )
if mibBuilder.loadTexts: bpBufferStatsTable.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsTable.setDescription('The back plane stats per port table contains the packet buffer usage per bp port per NPU unit.')
bpBufferStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1), ).setIndexNames((0, "F10-BPSTATS-MIB", "bpBufferStatsStackUnitIndex"), (0, "F10-BPSTATS-MIB", "bpBufferStatsPortPipe"), (0, "F10-BPSTATS-MIB", "bpBufferStatsPortIndex"))
if mibBuilder.loadTexts: bpBufferStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsEntry.setDescription('Per bp port buffer stats ')
bpBufferStatsStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: bpBufferStatsStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsStackUnitIndex.setDescription('Stack unit(Card Type Id) number where this port present Each card shall contain more than one BCM units')
bpBufferStatsPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: bpBufferStatsPortPipe.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsPortPipe.setDescription('bpPortPipe denotes the BCM unit in the stack unit(card Type) Each BCM unit shall contain 1-128 local ports, which includes BP as well as front end ports')
bpBufferStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: bpBufferStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsPortIndex.setDescription('BP port number. Maximum ports shall support by Trident2 BCM npu is 128. This address space includes FE ports also, which are invalid ports as far as BP is concern. For Z9000 leaf BCM units, 34 to 41 are the valid BP port numbers and for spine BCM units, 1 to 16 are the valid BP ports ')
bpBufferStatsCurrentUsagePerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpBufferStatsCurrentUsagePerPort.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsCurrentUsagePerPort.setDescription('Current buffer usage per bp port.')
bpBufferStatsDefaultPacketBuffAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpBufferStatsDefaultPacketBuffAlloc.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsDefaultPacketBuffAlloc.setDescription('Default packet buffer allocated.')
bpBufferStatsMaxLimitPerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpBufferStatsMaxLimitPerPort.setStatus('current')
if mibBuilder.loadTexts: bpBufferStatsMaxLimitPerPort.setDescription('Max buffer limit per bp port.')
bpCosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5), )
if mibBuilder.loadTexts: bpCosStatsTable.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsTable.setDescription('The back plane statistics per COS table gives packet buffer statistics per COS per bp port.')
bpCosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1), ).setIndexNames((0, "F10-BPSTATS-MIB", "bpCosStatsStackUnitIndex"), (0, "F10-BPSTATS-MIB", "bpCosStatsPortPipe"), (0, "F10-BPSTATS-MIB", "bpCosStatsPortIndex"), (0, "F10-BPSTATS-MIB", "bpCosStatsCOSNumber"))
if mibBuilder.loadTexts: bpCosStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsEntry.setDescription('Per bp port buffer stats and per COS buffer stats.')
bpCosStatsStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: bpCosStatsStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsStackUnitIndex.setDescription('Stack unit(Card Type Id) number where this port present Each card shall contain more than one BCM units')
bpCosStatsPortPipe = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: bpCosStatsPortPipe.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsPortPipe.setDescription('bpPortPipe denotes the BCM unit in the stack unit(card Type) Each BCM unit shall contain 1-128 local ports, which includes BP as well as front end ports')
bpCosStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: bpCosStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsPortIndex.setDescription('BP port number. Maximum ports shall support by Trident2 BCM npu is 128. This address space includes FE ports also, which are invalid ports as far as BP is concern. For Z9000 leaf BCM units, 34 to 41 are the valid BP port numbers and for spine BCM units, 1 to 16 are the valid BP ports ')
bpCosStatsCOSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: bpCosStatsCOSNumber.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsCOSNumber.setDescription('COS queue number, There shall 10 unicast and 5 multicast queues per port in Trident2')
bpCosStatsCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpCosStatsCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsCurrentUsage.setDescription('Current buffer usage per COS per bp port.')
bpCosStatsDefaultPacketBuffAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpCosStatsDefaultPacketBuffAlloc.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsDefaultPacketBuffAlloc.setDescription('Default packet buffer allocated per COS queue')
bpCosStatsMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpCosStatsMaxLimit.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsMaxLimit.setDescription('Max buffer utilization limit per bp port.')
bpCosStatsHOLDDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 24, 2, 1, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bpCosStatsHOLDDrops.setStatus('current')
if mibBuilder.loadTexts: bpCosStatsHOLDDrops.setDescription('HOLD Drops Per Queue.')
bpLinkBundleNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 1))
bpLinkBundleAlarmVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 2))
bpLinkBundleType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("bpHgBundle", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bpLinkBundleType.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleType.setDescription('Indicates Type of Back plane HiGig link bundle')
bpLinkBundleSlot = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bpLinkBundleSlot.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleSlot.setDescription('The SlotId on which Link Bundle is overloaded')
bpLinkBundleNpuUnit = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bpLinkBundleNpuUnit.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleNpuUnit.setDescription('The npuUnitId(BCM unit Id) on which Link Bundle is overloaded')
bpLinkBundleLocalId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 2, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bpLinkBundleLocalId.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleLocalId.setDescription('The local linkBundle Id which is overloaded')
bpLinkBundleImbalance = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 1, 1)).setObjects(("F10-BPSTATS-MIB", "bpLinkBundleType"), ("F10-BPSTATS-MIB", "bpLinkBundleSlot"), ("F10-BPSTATS-MIB", "bpLinkBundleNpuUnit"), ("F10-BPSTATS-MIB", "bpLinkBundleLocalId"))
if mibBuilder.loadTexts: bpLinkBundleImbalance.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleImbalance.setDescription('Trap generated when traffic imbalance observed in BP Link Bundles')
bpLinkBundleImbalanceClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 24, 3, 1, 2)).setObjects(("F10-BPSTATS-MIB", "bpLinkBundleType"), ("F10-BPSTATS-MIB", "bpLinkBundleSlot"), ("F10-BPSTATS-MIB", "bpLinkBundleNpuUnit"), ("F10-BPSTATS-MIB", "bpLinkBundleLocalId"))
if mibBuilder.loadTexts: bpLinkBundleImbalanceClear.setStatus('current')
if mibBuilder.loadTexts: bpLinkBundleImbalanceClear.setDescription('Trap generated when traffic imbalance is no longer observed on Bp Link bundles')
mibBuilder.exportSymbols("F10-BPSTATS-MIB", bpIfStatsOutCentRate=bpIfStatsOutCentRate, bpCosStatsHOLDDrops=bpCosStatsHOLDDrops, bpLinkBundleLocalId=bpLinkBundleLocalId, bpBufferStatsStackUnitIndex=bpBufferStatsStackUnitIndex, bpIfStatsIn256To511BytePkts=bpIfStatsIn256To511BytePkts, bpIfStatsInGiants=bpIfStatsInGiants, bpBufferStatsDefaultPacketBuffAlloc=bpBufferStatsDefaultPacketBuffAlloc, bpCosStatsDefaultPacketBuffAlloc=bpCosStatsDefaultPacketBuffAlloc, bpDropsInUnKnownHgOpcode=bpDropsInUnKnownHgOpcode, bpCosStatsEntry=bpCosStatsEntry, bpBufferStatsCurrentUsagePerPort=bpBufferStatsCurrentUsagePerPort, bpLinkBundleType=bpLinkBundleType, PYSNMP_MODULE_ID=f10BpStatsMib, bpDropsEgTxErrPktCounter=bpDropsEgTxErrPktCounter, bpDropsTable=bpDropsTable, bpDropsEgTxAgedCounter=bpDropsEgTxAgedCounter, bpCosStatsCOSNumber=bpCosStatsCOSNumber, bpLinkBundleTriggerThreshold=bpLinkBundleTriggerThreshold, bpLinkBundleNpuUnit=bpLinkBundleNpuUnit, bpDropsInMacDrops=bpDropsInMacDrops, bpPacketBufferEntry=bpPacketBufferEntry, bpIfStatsOutWredDrops=bpIfStatsOutWredDrops, bpCosStatsStackUnitIndex=bpCosStatsStackUnitIndex, bpCosStatsMaxLimit=bpCosStatsMaxLimit, bpBufferStatsTable=bpBufferStatsTable, bpIfStatsOutUnderruns=bpIfStatsOutUnderruns, bpDropsPortIndex=bpDropsPortIndex, bpPacketBufferStackUnitIndex=bpPacketBufferStackUnitIndex, bpDropsEgMacDrops=bpDropsEgMacDrops, bpDropsInMTUExceeds=bpDropsInMTUExceeds, bpLinkBundleNotifications=bpLinkBundleNotifications, bpIfStatsInCentRate=bpIfStatsInCentRate, bpIfStatsStackUnitIndex=bpIfStatsStackUnitIndex, bpCosStatsCurrentUsage=bpCosStatsCurrentUsage, bpDropsEntry=bpDropsEntry, bpPacketBufferTotalPacketBuffer=bpPacketBufferTotalPacketBuffer, bpIfStatsOut256To511BytePkts=bpIfStatsOut256To511BytePkts, bpIfStatsTable=bpIfStatsTable, bpIfStatsLastDiscontinuityTime=bpIfStatsLastDiscontinuityTime, bpLinkBundleImbalanceClear=bpLinkBundleImbalanceClear, bpIfStatsInOverruns=bpIfStatsInOverruns, bpIfStatsIn64BytePkts=bpIfStatsIn64BytePkts, bpIfStatsIn512To1023BytePkts=bpIfStatsIn512To1023BytePkts, bpBufferStatsMaxLimitPerPort=bpBufferStatsMaxLimitPerPort, bpBufferStatsPortIndex=bpBufferStatsPortIndex, bpDropsEgTxErrCounter=bpDropsEgTxErrCounter, bpIfStatsPortPipe=bpIfStatsPortPipe, bpIfStatsLastChange=bpIfStatsLastChange, bpDropsInDrops=bpDropsInDrops, bpIfStatsInRunts=bpIfStatsInRunts, bpLinkBundleImbalance=bpLinkBundleImbalance, f10BpStatsLinkBundleObjects=f10BpStatsLinkBundleObjects, f10BpStatsObjects=f10BpStatsObjects, bpIfStatsOutOver1023BytePkts=bpIfStatsOutOver1023BytePkts, bpDropsInUnKnownHgHdr=bpDropsInUnKnownHgHdr, bpIfStatsIn65To127BytePkts=bpIfStatsIn65To127BytePkts, bpDropsStackUnitIndex=bpDropsStackUnitIndex, bpIfStatsEntry=bpIfStatsEntry, bpIfStatsIn128To255BytePkts=bpIfStatsIn128To255BytePkts, f10BpStatsMib=f10BpStatsMib, bpBufferStatsEntry=bpBufferStatsEntry, bpPacketBufferTable=bpPacketBufferTable, bpLinkBundleRateInterval=bpLinkBundleRateInterval, bpCosStatsPortIndex=bpCosStatsPortIndex, bpLinkBundleAlarmVariable=bpLinkBundleAlarmVariable, bpDropsPortPipe=bpDropsPortPipe, bpStatsObjects=bpStatsObjects, bpIfStatsOutCollisions=bpIfStatsOutCollisions, f10BpStatsAlarms=f10BpStatsAlarms, bpIfStatsInCRC=bpIfStatsInCRC, bpIfStatsOut512To1023BytePkts=bpIfStatsOut512To1023BytePkts, bpPacketBufferCurrentAvailBuffer=bpPacketBufferCurrentAvailBuffer, bpIfStatsOutUnicasts=bpIfStatsOutUnicasts, bpIfStatsInOver1023BytePkts=bpIfStatsInOver1023BytePkts, bpDropsEgTxMACUnderflow=bpDropsEgTxMACUnderflow, bpCosStatsTable=bpCosStatsTable, bpIfStatsOut128To255BytePkts=bpIfStatsOut128To255BytePkts, bpIfStatsInThrottles=bpIfStatsInThrottles, bpIfStatsPortIndex=bpIfStatsPortIndex, bpBufferStatsPortPipe=bpBufferStatsPortPipe, bpPacketBufferPortPipe=bpPacketBufferPortPipe, bpCosStatsPortPipe=bpCosStatsPortPipe, bpLinkBundleObjects=bpLinkBundleObjects, bpIfStatsOutThrottles=bpIfStatsOutThrottles, bpDropsMMUHOLDrops=bpDropsMMUHOLDrops, bpIfStatsOut64BytePkts=bpIfStatsOut64BytePkts, bpPacketBufferPacketBufferAlloc=bpPacketBufferPacketBufferAlloc, bpIfStatsOut65To127BytePkts=bpIfStatsOut65To127BytePkts, bpLinkBundleSlot=bpLinkBundleSlot)
