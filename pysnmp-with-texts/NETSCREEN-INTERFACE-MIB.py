#
# PySNMP MIB module NETSCREEN-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
netscreenInterface, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenInterface")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, TimeTicks, Bits, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, ObjectIdentity, ModuleIdentity, NotificationType, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "TimeTicks", "Bits", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Gauge32", "Counter64")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
netscreenInterfaceMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 9, 0))
netscreenInterfaceMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2001-09-28 00:00', '2001-05-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenInterfaceMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setDescription("This module defines the object that are used to monitor NS's interface configuration")
nsIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 1), )
if mibBuilder.loadTexts: nsIfTable.setStatus('current')
if mibBuilder.loadTexts: nsIfTable.setDescription('All NetScreen devices have a trusted interface and an untrusted interface. The NetScreen-10 and -100 also have a DMZ interface. Additionally, on each of the virtual systems supported by the NetScreen-1000 there can be on or more tursted subinterfaces linking a particular virtual system to one or more virtual LANs. Other interfaces-some physical, some logical, and some virtual-provide exclusive channels for administrative traffic, or for communication among member in a redundant group. In this table, it will collect following interface: tursted interface, untrusted interface, DMZ interface, Management Interface and Subinterface.')
nsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfIndex"))
if mibBuilder.loadTexts: nsIfEntry.setStatus('current')
if mibBuilder.loadTexts: nsIfEntry.setDescription('nsIfEntry collects some attributes about NetScreen interface settings.')
nsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nsIfIndex.setDescription('Interface number which uniquely identifies an interface.')
nsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfName.setStatus('current')
if mibBuilder.loadTexts: nsIfName.setDescription("Each interface has a readable name such as 'trust', 'trust/1', etc.")
nsIfVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfVsys.setStatus('current')
if mibBuilder.loadTexts: nsIfVsys.setDescription("According NetScreen's concepts, each interface belongs to one virtual system. This attribute displays the virtual system name an interface belongs to. If the device is device which doesn't support vsys such as NS-100, we can logically think all the setting belongs to 'root' vsys.")
nsIfZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfZone.setStatus('current')
if mibBuilder.loadTexts: nsIfZone.setDescription('Each interface belongs to one security zone. This attribute displays the security zone name an interface belongs to.')
nsIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("ready", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfStatus.setStatus('current')
if mibBuilder.loadTexts: nsIfStatus.setDescription("The interface status which indicates interface's operational status.")
nsIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfIp.setStatus('current')
if mibBuilder.loadTexts: nsIfIp.setDescription('Each interface must be assigned an IP address.')
nsIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfNetmask.setStatus('current')
if mibBuilder.loadTexts: nsIfNetmask.setDescription('Each interface must belong to a subnet represented by netmask.')
nsIfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfGateway.setStatus('current')
if mibBuilder.loadTexts: nsIfGateway.setDescription('Default gateway ip address.')
nsIfMngIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngIp.setStatus('current')
if mibBuilder.loadTexts: nsIfMngIp.setDescription('Trusted, untrusted and DMZ interfaces can have two IP address: an interface IP address that corresponds to the physical port through which that interface connects to a network, and a Manage IP address that can be used to receive administrative traffic')
nsIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("transparent", 0), ("nat", 1), ("route", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMode.setStatus('current')
if mibBuilder.loadTexts: nsIfMode.setDescription('NetScreen interface can has three operation modes. They are transparent, nat and route.')
nsIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMAC.setStatus('current')
if mibBuilder.loadTexts: nsIfMAC.setDescription('MAC address the interface has.')
nsIfMngTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngTelnet.setStatus('current')
if mibBuilder.loadTexts: nsIfMngTelnet.setDescription('This attribute is used to indicate whether the interface permits telnet management.')
nsIfMngSCS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSCS.setStatus('current')
if mibBuilder.loadTexts: nsIfMngSCS.setDescription('This attribute is used to indicate whether the interface permits Secure Command Shell management.')
nsIfMngWEB = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngWEB.setStatus('current')
if mibBuilder.loadTexts: nsIfMngWEB.setDescription('This attribute is used to indicate whether the interface permits WEB UI management.')
nsIfMngSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSSL.setStatus('current')
if mibBuilder.loadTexts: nsIfMngSSL.setDescription('This attribute is used to indicate whether the interface permits SSL management.')
nsIfMngSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSNMP.setStatus('current')
if mibBuilder.loadTexts: nsIfMngSNMP.setDescription('This attribute is used to indicate whether the interface permits SNMP management.')
nsIfMngGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngGlobal.setStatus('current')
if mibBuilder.loadTexts: nsIfMngGlobal.setDescription('This attribute is used to indicate whether the interface permits NS Global management.')
nsIfMngGlobalPro = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngGlobalPro.setStatus('current')
if mibBuilder.loadTexts: nsIfMngGlobalPro.setDescription('This attribute is used to indicate whether the interface permits NS Global Pro management.')
nsIfMngPing = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngPing.setStatus('current')
if mibBuilder.loadTexts: nsIfMngPing.setDescription('This attribute is used to indicate whether the interface permits Ping go-through.')
nsIfMngIdentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngIdentReset.setStatus('current')
if mibBuilder.loadTexts: nsIfMngIdentReset.setDescription('This attribute is used to indicate whether the interface permits ident reset.')
nsIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfInfo.setStatus('current')
if mibBuilder.loadTexts: nsIfInfo.setDescription('Internal id assigned to this interface. Stays persistent across resets.')
nsIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfDescr.setStatus('current')
if mibBuilder.loadTexts: nsIfDescr.setDescription('Each interface has a a configurable descriptor string.')
nsIfSecondaryIpTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 2), )
if mibBuilder.loadTexts: nsIfSecondaryIpTable.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpTable.setDescription('In some ScreenOS, it supports multiple IP addresses and related subnets based on the same interface. This table collects the multiple IP addresses configuration on an interface.')
nsIfSecondaryIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfSecondaryIpIndex"))
if mibBuilder.loadTexts: nsIfSecondaryIpEntry.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpEntry.setDescription('nsIfSecondaryIpEntry collects some attributes about multiple IP configurations on an interface.')
nsIfSecondaryIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIndex.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpIndex.setDescription('The table index used as primary key when retrieving the table.')
nsIfSecondaryIpIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIfIdx.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpIfIdx.setDescription('The index value which uniquely identifies an interface the secodary ip belongs to. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
nsIfSecondaryIpVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpVsys.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpVsys.setDescription("According NetScreen's concepts, each interface belongs to one virtual system. This attribute displays the virtual system ID an interface belongs to. If the device is device which doesn't support vsys such as NS-100, we can logically think all the setting belongs to 'root' vsys.")
nsIfSecondaryIpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpZone.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpZone.setDescription('each interface belongs to one security zone. this attribute displays the security zone name an interface belongs to.')
nsIfSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpAddress.setDescription('Ip Address value.')
nsIfSecondaryIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpNetmask.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpNetmask.setDescription('Subnet of a ip belongs to.')
nsIfSecondaryIpIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIfInfo.setStatus('current')
if mibBuilder.loadTexts: nsIfSecondaryIpIfInfo.setDescription('Internal id assigned to this interface. Stays persistent across resets.')
nsIfFlowTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 3), )
if mibBuilder.loadTexts: nsIfFlowTable.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowTable.setDescription('nsIfFlowTable is used to get flow statistical information of the interface.')
nsIfFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfFlowIfIdx"))
if mibBuilder.loadTexts: nsIfFlowEntry.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowEntry.setDescription('Table entry collect some attributes about interface flow counters.')
nsIfFlowIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowIfIdx.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowIfIdx.setDescription('Unique interface id, also used as table index.')
nsIfFlowVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowVsys.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowVsys.setDescription("According NetScreen's concepts. each interface belongs to one virtual system. This attribute displays the virtual system name an interface belongs to.")
nsIfFlowInByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInByte.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowInByte.setDescription('Incoming byte number arriving at the this interface')
nsIfFlowInPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInPacket.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowInPacket.setDescription('Incoming packet number arriving at the this interface')
nsIfFlowOutByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowOutByte.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowOutByte.setDescription('Outgoing byte number sending through this interface')
nsIfFlowOutPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowOutPacket.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowOutPacket.setDescription('Outgoing packet number sending through this interface')
nsIfFlowInVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInVpn.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowInVpn.setDescription('VPN packet go through this interface')
nsIfInVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfInVlan.setStatus('current')
if mibBuilder.loadTexts: nsIfInVlan.setDescription('Incoming vlan packet')
nsIfOutVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOutVlan.setStatus('current')
if mibBuilder.loadTexts: nsIfOutVlan.setDescription('Outgoing vlan packet')
nsIfFlowIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowIfInfo.setStatus('current')
if mibBuilder.loadTexts: nsIfFlowIfInfo.setDescription('Internal id assigned to this interface. Stays persistent across resets.')
nsIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 4), )
if mibBuilder.loadTexts: nsIfMonTable.setStatus('current')
if mibBuilder.loadTexts: nsIfMonTable.setDescription('This table collects some of dropped packet counters of interface')
nsIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfMonIfIdx"))
if mibBuilder.loadTexts: nsIfMonEntry.setStatus('current')
if mibBuilder.loadTexts: nsIfMonEntry.setDescription('An entry containing tunnel information')
nsIfMonIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonIfIdx.setStatus('current')
if mibBuilder.loadTexts: nsIfMonIfIdx.setDescription('Unique interface id, also used as table index.')
nsIfMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonVsys.setStatus('current')
if mibBuilder.loadTexts: nsIfMonVsys.setDescription("According NetScreen's concepts, each interface belongs to one virtual system. This attribute displays the virtual system name an interface belongs to.")
nsIfMonPlyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonPlyDeny.setStatus('current')
if mibBuilder.loadTexts: nsIfMonPlyDeny.setDescription('Packet drop since denied by policy.')
nsIfMonAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonAuthFail.setStatus('current')
if mibBuilder.loadTexts: nsIfMonAuthFail.setDescription('Packet drop due to authentication failed.')
nsIfMonUrlBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonUrlBlock.setStatus('current')
if mibBuilder.loadTexts: nsIfMonUrlBlock.setDescription('Packet drop due to URL blocking.')
nsIfMonTrMngQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonTrMngQueue.setStatus('current')
if mibBuilder.loadTexts: nsIfMonTrMngQueue.setDescription('packet queue up due to traffic management')
nsIfMonTrMngDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonTrMngDrop.setStatus('current')
if mibBuilder.loadTexts: nsIfMonTrMngDrop.setDescription('Packet drop due to traffic management')
nsIfMonEncFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonEncFail.setStatus('current')
if mibBuilder.loadTexts: nsIfMonEncFail.setDescription('IPSec enc failed due to sa not available, no ipak, etc')
nsIfMonNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonNoSa.setStatus('current')
if mibBuilder.loadTexts: nsIfMonNoSa.setDescription('packet drop due to no sa found for incomig spi')
nsIfMonNoSaPly = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonNoSaPly.setStatus('current')
if mibBuilder.loadTexts: nsIfMonNoSaPly.setDescription('packet drop due to no policy associated with found sa')
nsIfMonSaInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonSaInactive.setStatus('current')
if mibBuilder.loadTexts: nsIfMonSaInactive.setDescription('packet drop due to sa not active')
nsIfMonSaPolicyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonSaPolicyDeny.setStatus('current')
if mibBuilder.loadTexts: nsIfMonSaPolicyDeny.setDescription('packet drop due to denial by sa policy')
nsIfMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonIfInfo.setStatus('current')
if mibBuilder.loadTexts: nsIfMonIfInfo.setDescription('Internal id assigned to this interface. Stays persistent across resets.')
mibBuilder.exportSymbols("NETSCREEN-INTERFACE-MIB", nsIfFlowInPacket=nsIfFlowInPacket, nsIfMonPlyDeny=nsIfMonPlyDeny, nsIfSecondaryIpZone=nsIfSecondaryIpZone, nsIfMonAuthFail=nsIfMonAuthFail, nsIfTable=nsIfTable, nsIfIp=nsIfIp, nsIfMngGlobal=nsIfMngGlobal, nsIfFlowVsys=nsIfFlowVsys, PYSNMP_MODULE_ID=netscreenInterfaceMibModule, nsIfMonTrMngDrop=nsIfMonTrMngDrop, nsIfMonIfInfo=nsIfMonIfInfo, nsIfMngSNMP=nsIfMngSNMP, nsIfMngIdentReset=nsIfMngIdentReset, nsIfSecondaryIpNetmask=nsIfSecondaryIpNetmask, nsIfMonEncFail=nsIfMonEncFail, nsIfInfo=nsIfInfo, nsIfMonTable=nsIfMonTable, nsIfMonNoSaPly=nsIfMonNoSaPly, nsIfMngWEB=nsIfMngWEB, nsIfSecondaryIpVsys=nsIfSecondaryIpVsys, nsIfMonEntry=nsIfMonEntry, nsIfMonNoSa=nsIfMonNoSa, nsIfSecondaryIpTable=nsIfSecondaryIpTable, nsIfNetmask=nsIfNetmask, nsIfMonVsys=nsIfMonVsys, nsIfFlowIfInfo=nsIfFlowIfInfo, nsIfFlowOutByte=nsIfFlowOutByte, nsIfFlowEntry=nsIfFlowEntry, nsIfOutVlan=nsIfOutVlan, nsIfSecondaryIpEntry=nsIfSecondaryIpEntry, nsIfMonSaPolicyDeny=nsIfMonSaPolicyDeny, nsIfEntry=nsIfEntry, nsIfZone=nsIfZone, nsIfMode=nsIfMode, nsIfFlowIfIdx=nsIfFlowIfIdx, nsIfStatus=nsIfStatus, nsIfMonUrlBlock=nsIfMonUrlBlock, nsIfName=nsIfName, nsIfInVlan=nsIfInVlan, nsIfMAC=nsIfMAC, nsIfMonIfIdx=nsIfMonIfIdx, nsIfGateway=nsIfGateway, netscreenInterfaceMibModule=netscreenInterfaceMibModule, nsIfSecondaryIpIfIdx=nsIfSecondaryIpIfIdx, nsIfSecondaryIpAddress=nsIfSecondaryIpAddress, nsIfFlowTable=nsIfFlowTable, nsIfMonSaInactive=nsIfMonSaInactive, nsIfMonTrMngQueue=nsIfMonTrMngQueue, nsIfMngTelnet=nsIfMngTelnet, nsIfDescr=nsIfDescr, nsIfFlowInByte=nsIfFlowInByte, nsIfFlowInVpn=nsIfFlowInVpn, nsIfMngPing=nsIfMngPing, nsIfVsys=nsIfVsys, nsIfIndex=nsIfIndex, nsIfMngSCS=nsIfMngSCS, nsIfSecondaryIpIndex=nsIfSecondaryIpIndex, nsIfMngSSL=nsIfMngSSL, nsIfFlowOutPacket=nsIfFlowOutPacket, nsIfMngIp=nsIfMngIp, nsIfSecondaryIpIfInfo=nsIfSecondaryIpIfInfo, nsIfMngGlobalPro=nsIfMngGlobalPro)
