#
# PySNMP MIB module INNOVX-DTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INNOVX-DTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:53:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dteGroup, = mibBuilder.importSymbols("INNOVX-CORE-MIB", "dteGroup")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, TimeTicks, Gauge32, Bits, Counter32, MibIdentifier, iso, Unsigned32, NotificationType, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "Bits", "Counter32", "MibIdentifier", "iso", "Unsigned32", "NotificationType", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dteAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 1))
dteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2))
dteAlarmCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 3))
dteDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4))
dteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5))
dtesMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtesMIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: dtesMIBversion.setDescription("Identifies the version of the MIB as `X.YZT' where: X: Major Revision (1-9) Y: Minor Revision (0-9) Z: Typographical Revision (0-9) T: Test Revision (A-Z) Upon formal release, the test revision will not be present.")
dteInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("v28", 1), ("v35", 2), ("rs449", 3), ("eia530", 4), ("eia530a", 5), ("x21", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: dteInterfaceType.setDescription('Defines the DTE Interface Type. WEBFLAG V.28 V.35 RS-449 EIA-530 EIA-530A X.21 WEBEND')
dteTxInvertingTiming = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slaveNormal", 1), ("slaveInvert", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteTxInvertingTiming.setStatus('mandatory')
if mibBuilder.loadTexts: dteTxInvertingTiming.setDescription('normal(1) tx timing clocks the transmit data from the DTE using an internal generated clock. invert (2) Invert Internally generated transmit clock used to sample the transmit data from the DTE. external(3) uses the DTE clock, EXTCLK, to clock the transmit data from the DTE. WEBFLAG Slave Normal Slave Inverted External WEBEND')
dteRxCarrier = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedOn", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteRxCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: dteRxCarrier.setDescription('The Receive Carrier option. This option controls the operation of DCD. WEBFLAG Forced On Normal Operation WEBEND')
dteDsrControl = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedOn", 1), ("followsDTR", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteDsrControl.setStatus('mandatory')
if mibBuilder.loadTexts: dteDsrControl.setDescription('The DSR option. This option controls the operation of DSR. When forcedOn(1) is selected, DSR is normally on, if set for followsDTR(2) then DSR is on only when DTR is on. WEBFLAG Forced On Follows DTR WEBEND')
dteDtrLossTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteDtrLossTrapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: dteDtrLossTrapSeverity.setDescription('Controls the reporting and defines the severity of the Channel Data Terminal Ready Loss Alarm when this event occurs. WEBFLAG Inhibit Critical Major Minor Warning Info WEBEND')
dteLoopback = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTest", 1), ("toChan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: dteLoopback.setDescription('Control the DTE loopback to the channel. noTest(1) stops the test. toChan(2) starts a loopback toward the DTE.')
dteDiagTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testTime1Min", 1), ("testTime5Mins", 2), ("testTime10Mins", 3), ("testTime20Mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteDiagTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: dteDiagTestDuration.setDescription('Defines the length of the diagnostic test.')
dteDiagTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statDteLoop", 1), ("statNoTestinProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteDiagTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dteDiagTestStatus.setDescription('Displays the test in progress, if any.')
dteLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dteLedStatus.setDescription('A bitwise snapshot of the front panel LED states, where 0 = LED off and 1 = LED on, as follows: LED description Octet 1 bit 7 - n/u bit 6 - n/u bit 5 - n/u bit 4 - n/u bit 3 - n/u bit 2 - DTE LMI LMI traffic on DTE bit 1 - SD EQP send data - equipment traffic bit 0 - RD EQP receive data - equipment traffic')
dtePortStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtePortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dtePortStatus.setDescription('A bitwise snapshot of interface port status conditions and EIA signals, where 0 = condition not present, and 1 = condition present, as follows: Octet 1 - DTE Interface Port Status bit 7 - n/u bit 6 - n/u bit 5 - n/u bit 4 - n/u bit 3 - n/u bit 2 - Transmit Activity bit 1 - Receive Activity bit 0 - DTR Loss')
dtePortFrameCounts = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 6, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtePortFrameCounts.setStatus('mandatory')
if mibBuilder.loadTexts: dtePortFrameCounts.setDescription('The total number of frames transmitted and received on each interface port. This object will be reset to zero after a read, and after power up, soft reset, or factory defaults reset. Octet 1 - DTE Interface Transmit Frame Count Octet 2 bit 7 - 2^15 bit 7 - 2^7 bit 6 - 2^14 bit 6 - 2^6 bit 5 - 2^13 bit 5 - 2^5 bit 4 - 2^12 bit 4 - 2^4 bit 3 - 2^11 bit 3 - 2^3 bit 2 - 2^10 bit 2 - 2^2 bit 1 - 2^9 bit 1 - 2^1 bit 0 - 2^8 bit 0 - 2^0 Octet 3 - DTE Interface Receive Frame Count Octet 4 bit 7 - 2^15 bit 7 - 2^7 bit 6 - 2^14 bit 6 - 2^6 bit 5 - 2^13 bit 5 - 2^5 bit 4 - 2^12 bit 4 - 2^4 bit 3 - 2^11 bit 3 - 2^3 bit 2 - 2^10 bit 2 - 2^2 bit 1 - 2^9 bit 1 - 2^1 bit 0 - 2^8 bit 0 - 2^0')
mibBuilder.exportSymbols("INNOVX-DTE-MIB", dteDiagTestDuration=dteDiagTestDuration, dteLedStatus=dteLedStatus, dteCfg=dteCfg, dteLoopback=dteLoopback, dtePortStatus=dtePortStatus, dteTxInvertingTiming=dteTxInvertingTiming, dteRxCarrier=dteRxCarrier, dteStatus=dteStatus, dteDsrControl=dteDsrControl, dteDtrLossTrapSeverity=dteDtrLossTrapSeverity, dteDiagnostics=dteDiagnostics, dtePortFrameCounts=dtePortFrameCounts, dteDiagTestStatus=dteDiagTestStatus, dteAdmin=dteAdmin, dtesMIBversion=dtesMIBversion, dteInterfaceType=dteInterfaceType, dteAlarmCfg=dteAlarmCfg)
