#
# PySNMP MIB module Wellfleet-ISDB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-ISDB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, Counter32, Integer32, TimeTicks, Gauge32, Unsigned32, ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Counter32", "Integer32", "TimeTicks", "Gauge32", "Unsigned32", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfIsdbGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIsdbGroup")
wfIsdbCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1), )
if mibBuilder.loadTexts: wfIsdbCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgTable.setDescription('Table of Isdb Config Objects')
wfIsdbCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1), ).setIndexNames((0, "Wellfleet-ISDB-MIB", "wfIsdbCfgSlot"), (0, "Wellfleet-ISDB-MIB", "wfIsdbCfgConnector"))
if mibBuilder.loadTexts: wfIsdbCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgEntry.setDescription('An entry in the Isdb Config Table')
wfIsdbCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgDelete.setDescription('Create/Delete parameter')
wfIsdbCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgDisable.setDescription('Enable/Disable parameter')
wfIsdbCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgState.setDescription('Current state of the Async port on the I-SDB')
wfIsdbCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgSlot.setDescription('Instance ID Slot, filled in by the ISDB mib gate')
wfIsdbCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfIsdbCfgCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgCircuit.setDescription('Circuit number, filled in by the ISDB mib gate')
wfIsdbCfgLogFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgLogFilter.setDescription('Log Filters')
wfIsdbCfgPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 8), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgPollInterval.setDescription('Interval that ISDB gate polls ISDB')
wfIsdbCfgAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgAutoRestart.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgAutoRestart.setDescription('Auto restart of ISDB after crash')
wfIsdbCfgAutoUld = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgAutoUld.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgAutoUld.setDescription('Auto Up load memory image when ISDB crashes')
wfIsdbCfgUldVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 11), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbCfgUldVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbCfgUldVolume.setDescription('Volume to Up load memory image on ISDB crash')
wfIsdbImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbImageVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbImageVersion.setDescription('Version of code running on the Isdb board')
wfIsdbImageDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbImageDate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbImageDate.setDescription('The creation date of the Isdb Flash Image ')
wfIsdbDiagVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbDiagVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbDiagVersion.setDescription('The revision level of the Diagnostic Flash. Major revision level is in the upper 2 bytes, minor revision level in the lower 2 bytes.')
wfIsdbDiagDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbDiagDate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbDiagDate.setDescription('The creation date of the Diagnostic Flash')
wfIsdbStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2), )
if mibBuilder.loadTexts: wfIsdbStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTable.setDescription('Table of Isdb Config Objects')
wfIsdbStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1), ).setIndexNames((0, "Wellfleet-ISDB-MIB", "wfIsdbStatSlot"), (0, "Wellfleet-ISDB-MIB", "wfIsdbStatConnector"))
if mibBuilder.loadTexts: wfIsdbStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatEntry.setDescription('An entry in the Isdb Config Table')
wfIsdbStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatState.setDescription('Current state of the Async port on the I-SDB')
wfIsdbStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatSlot.setDescription('Instance ID Slot, filled in by the ISDB mib gate')
wfIsdbStatConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfIsdbStatVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatVersion.setDescription('Version of code running on the Isdb board')
wfIsdbStatCurrentConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatCurrentConnCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatCurrentConnCount.setDescription('Current number of connections made to the Isdb')
wfIsdbStatTotalConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTotalConnCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTotalConnCount.setDescription('Total number of connections made to the Isdb')
wfIsdbStatStartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatStartCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatStartCount.setDescription('Number of start commands sent to the Isdb')
wfIsdbStatCpuIdleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatCpuIdleCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatCpuIdleCurrent.setDescription('Number of idle cycles since the last query of this mib')
wfIsdbStatCpuIdleTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatCpuIdleTotal.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatCpuIdleTotal.setDescription('Total number of cpu idle cycles since bootup')
wfIsdbStatMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatMemoryFree.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatMemoryFree.setDescription('Amount of free memory on Isdb ')
wfIsdbStatMemoryLargestBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatMemoryLargestBlock.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatMemoryLargestBlock.setDescription('Largest block of memory on Isdb ')
wfIsdbStatTaskCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTaskCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTaskCount.setDescription('Number of active tasks on Isdb ')
wfIsdbStatMsgQueueLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatMsgQueueLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatMsgQueueLacks.setDescription('Number of message queue lack of resources ')
wfIsdbStatHardwareTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatHardwareTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatHardwareTimeouts.setDescription('Number of hardware timeouts')
wfIsdbStatAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAlarmCount.setDescription('Number of alarms on Isdb')
wfIsdbStatAuthorUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAuthorUnknown.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAuthorUnknown.setDescription('Not currently used')
wfIsdbStatAv1Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv1Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv1Ints.setDescription('Auto Vector Interrupt 1')
wfIsdbStatAv2Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv2Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv2Ints.setDescription('Auto Vector Interrupt 2')
wfIsdbStatAv3Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv3Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv3Ints.setDescription('Auto Vector Interrupt 3')
wfIsdbStatAv4Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv4Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv4Ints.setDescription('Auto Vector Interrupt 4')
wfIsdbStatAv5Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv5Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv5Ints.setDescription('Auto Vector Interrupt 5 ')
wfIsdbStatAv6Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv6Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv6Ints.setDescription('Auto Vector Interrupt 6')
wfIsdbStatAv7Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatAv7Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatAv7Ints.setDescription('Auto Vector Interrupt 7')
wfIsdbStatScc3Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatScc3Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatScc3Ints.setDescription('Serial communications controller interrupts')
wfIsdbStatErrorInts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatErrorInts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatErrorInts.setDescription('Interrupts caused by errors')
wfIsdbStatTimer1Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTimer1Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTimer1Ints.setDescription('Timer 1 Interrupt')
wfIsdbStatTimer2Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTimer2Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTimer2Ints.setDescription('Timer 2 Interrupt')
wfIsdbStatTimer3Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTimer3Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTimer3Ints.setDescription('Timer 3 Interrupt')
wfIsdbStatTimer4Ints = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTimer4Ints.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTimer4Ints.setDescription('Timer 4 Interrupt')
wfIsdbStatBusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatBusErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatBusErrors.setDescription('Bus errors on Isdb')
wfIsdbStatRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxFrames.setDescription('Number of frames received without error')
wfIsdbStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxOctets.setDescription('Number of octets received without error')
wfIsdbStatRxLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxLacks.setDescription('Number of Rx frames dropped due to lack of buffer resources')
wfIsdbStatRxDataLinkMsgLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxDataLinkMsgLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxDataLinkMsgLacks.setDescription('Number of datalink frames dropped due to lack of buffer resources')
wfIsdbStatRxManagementMsgLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxManagementMsgLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxManagementMsgLacks.setDescription('Number managment messages dropped due to lack of buffer resources')
wfIsdbStatRxBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxBadFrames.setDescription('Number of bad receive frames, caused by FCS errors or non octet aligned. ')
wfIsdbStatRxOverFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxOverFlows.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxOverFlows.setDescription('Number of receive overflows, device FIFO overflowed before next DMA cycle granted. No buffer resources available.')
wfIsdbStatRxRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxRunts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxRunts.setDescription('Number of runt frames received or number of frames where the Carrier Detect signal was lost during reception.')
wfIsdbStatRxLargeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxLargeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxLargeFrames.setDescription('Number of frames received that exceed the size of a frame with a datalink header + X.25 header + 256 bytes of data (total 265 bytes)')
wfIsdbStatRxSmallFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxSmallFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxSmallFrames.setDescription('Number of frames received that are less than the size of the datalink header (< 2 bytes)')
wfIsdbStatRxIncompleteFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxIncompleteFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxIncompleteFrames.setDescription('Number of frames which were incompletely received. These are frames which may have resulted from FRMRR errors.')
wfIsdbStatRxInts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxInts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxInts.setDescription('Total number of receive interrupts on the isdb board')
wfIsdbStatRxDataLinkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxDataLinkFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxDataLinkFrames.setDescription('Total number of datalink frames received')
wfIsdbStatRxDataLinkDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxDataLinkDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxDataLinkDiscards.setDescription('Number of datalink frames that were discarded')
wfIsdbStatRxManagementFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxManagementFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxManagementFrames.setDescription('Number of management frames received')
wfIsdbStatRxUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatRxUnknownFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatRxUnknownFrames.setDescription('Number of unknown frames received')
wfIsdbStatTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxFrames.setDescription('Total number of frames transmitted without error')
wfIsdbStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxOctets.setDescription('Total number of octets transmitted without error')
wfIsdbStatTxLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxLacks.setDescription("Number of frames clipped in driver's transmit routine due to transmit congestion. ")
wfIsdbStatTxUnderFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxUnderFlows.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxUnderFlows.setDescription('Number of transmission underflows, device FIFO went empty before next DMA request was granted. ')
wfIsdbStatTxAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxAbortedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxAbortedFrames.setDescription('Number of frames where CTS was lost during transmission. ')
wfIsdbStatTxMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxMsgs.setDescription('Total number of messages transmitted')
wfIsdbStatTxLargeMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxLargeMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxLargeMsgs.setDescription('Number of messages transmitted to the driver that exceed the size of the datalink header + X.25 header + 256 bytes of data (total 265 bytes)')
wfIsdbStatTxSmallMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxSmallMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxSmallMsgs.setDescription('Number of messages transmitted to the driver that are less than the size of the datalink header ( < 2 bytes)')
wfIsdbStatTxInts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxInts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxInts.setDescription('Total number of transmit interrupts on the isdb board')
wfIsdbStatTxDataLinkFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxDataLinkFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxDataLinkFrames.setDescription('Number of datalink frames transmitted')
wfIsdbStatTxManagementFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxManagementFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxManagementFrames.setDescription('Number of management frames transmitted')
wfIsdbStatTxUnknownFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbStatTxUnknownFrames.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbStatTxUnknownFrames.setDescription('Number of unknown frames transmitted')
wfIsdbPortDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3), )
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgTable.setDescription('ASYNC line record')
wfIsdbPortDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1), ).setIndexNames((0, "Wellfleet-ISDB-MIB", "wfIsdbPortDefaultCfgSlot"), (0, "Wellfleet-ISDB-MIB", "wfIsdbPortDefaultCfgConnector"), (0, "Wellfleet-ISDB-MIB", "wfIsdbPortDefaultCfgNumber"))
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgEntry.setDescription('An entry in the ASYNC table')
wfIsdbPortDefaultCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDelete.setDescription('Create/Delete parameter')
wfIsdbPortDefaultCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDisable.setDescription('Enable/Disable parameter')
wfIsdbPortDefaultCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgState.setDescription('Current state of the Async port on the I-SDB')
wfIsdbPortDefaultCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgSlot.setDescription('Instance ID Slot, filled in by the ISDB mib gate')
wfIsdbPortDefaultCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfIsdbPortDefaultCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgNumber.setDescription('Instance ID Async Port, filled in by the ISDB mib gate')
wfIsdbPortDefaultCfgBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300, 1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("baudrate300b", 300), ("baudrate1200b", 1200), ("baudrate2400b", 2400), ("baudrate4800b", 4800), ("baudrate9600b", 9600), ("baudrate19200b", 19200))).clone('baudrate9600b')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgBaudRate.setDescription('Baud rate configured on this Async Port')
wfIsdbPortDefaultCfgDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8))).clone('eight')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDataBits.setDescription('Number of data bits configured on this Async Port')
wfIsdbPortDefaultCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgParity.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgParity.setDescription('Type of parity configured on this Async Port')
wfIsdbPortDefaultCfgStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s1bit", 1), ("s15bit", 2), ("s2bit", 3))).clone('s1bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgStopBits.setDescription('Number of stop bits configured on this Async Port')
wfIsdbPortDefaultCfgCts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysOn", 1), ("alwaysOff", 2), ("followFlowControl", 3), ("followRTS", 4))).clone('alwaysOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgCts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgCts.setDescription('DCE (output) configuration of the CTS signal')
wfIsdbPortDefaultCfgDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysOn", 1), ("alwaysOff", 2), ("followDTR", 3), ("toggleOnDisconnect", 4))).clone('alwaysOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDsr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDsr.setDescription('DCE (output) configuration of the DSR signal')
wfIsdbPortDefaultCfgDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysOn", 1), ("alwaysOff", 2), ("followDTR", 3), ("followVC", 4))).clone('alwaysOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDcd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDcd.setDescription('DCE (output) configuration of the DCD signal')
wfIsdbPortDefaultCfgPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgPrompt.setDescription('Character string to be used for Async Port prompt')
wfIsdbPortDefaultCfgCommandParser = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("menu", 1), ("test", 2), ("x25pad", 3), ("loopback", 4))).clone('x25pad')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgCommandParser.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgCommandParser.setDescription('Default command parser for Async Port')
wfIsdbPortDefaultCfgInactivityTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgInactivityTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgInactivityTimeOut.setDescription('Async port is reset after inactivity period')
wfIsdbPortDefaultCfgRxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8192)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgRxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgRxQueueSize.setDescription("Size of the async port's receive queue")
wfIsdbPortDefaultCfgTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8192)).clone(8192)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgTxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgTxQueueSize.setDescription("Size of the async port's transmit queue")
wfIsdbPortDefaultCfgRxXoff = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgRxXoff.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgRxXoff.setDescription("Flow Control Xon/Xoff for Isdb's async port")
wfIsdbPortDefaultCfgTxXoff = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgTxXoff.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgTxXoff.setDescription('Flow Control Xon/Xoff for remote terminal')
wfIsdbPortDefaultCfgDtrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDtrAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgDtrAction.setDescription('Determines whether or not an action is taken when the DTR signal changes')
wfIsdbPortDefaultCfgRxXoffAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgRxXoffAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortDefaultCfgRxXoffAction.setDescription('Determine whether or not we notify the application when an Xon or Xoff change occurs')
wfIsdbPortCurrentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4), )
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgTable.setDescription('ASYNC Current line record')
wfIsdbPortCurrentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1), ).setIndexNames((0, "Wellfleet-ISDB-MIB", "wfIsdbPortCurrentCfgSlot"), (0, "Wellfleet-ISDB-MIB", "wfIsdbPortCurrentCfgConnector"), (0, "Wellfleet-ISDB-MIB", "wfIsdbPortCurrentCfgNumber"))
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgEntry.setDescription('An entry in the ASYNC table')
wfIsdbPortCurrentCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgState.setDescription('Current state of the Async port on the I-SDB')
wfIsdbPortCurrentCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgSlot.setDescription('Instance ID Slot, filled in by the ISDB mib gate')
wfIsdbPortCurrentCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfIsdbPortCurrentCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgNumber.setDescription('Instance ID Async Port, filled in by the ISDB mib gate')
wfIsdbPortCurrentCfgBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300, 1200, 2400, 4800, 9600, 19200))).clone(namedValues=NamedValues(("baudrate300b", 300), ("baudrate1200b", 1200), ("baudrate2400b", 2400), ("baudrate4800b", 4800), ("baudrate9600b", 9600), ("baudrate19200b", 19200)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgBaudRate.setDescription('Baud rate configured on this Async Port')
wfIsdbPortCurrentCfgDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8))).clone(namedValues=NamedValues(("five", 5), ("six", 6), ("seven", 7), ("eight", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDataBits.setDescription('Number of data bits configured on this Async Port')
wfIsdbPortCurrentCfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgParity.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgParity.setDescription('Type of parity configured on this Async Port')
wfIsdbPortCurrentCfgStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s1bit", 1), ("s15bit", 2), ("s2bit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgStopBits.setDescription('Number of stop bits configured on this Async Port')
wfIsdbPortCurrentCfgCts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysOn", 1), ("alwaysOff", 2), ("followFlowControl", 3), ("followRTS", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgCts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgCts.setDescription('DCE (output) configuration of the CTS signal')
wfIsdbPortCurrentCfgDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysOn", 1), ("alwaysOff", 2), ("followDTR", 3), ("toggleOnDisconnect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDsr.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDsr.setDescription('DCE (output) configuration of the DSR signal')
wfIsdbPortCurrentCfgDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("alwaysOn", 1), ("alwaysOff", 2), ("followDTR", 3), ("followVC", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDcd.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDcd.setDescription('DCE (output) configuration of the DCD signal')
wfIsdbPortCurrentCfgPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgPrompt.setDescription('Character string to be used for Async Port prompt')
wfIsdbPortCurrentCfgCommandParser = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("menu", 1), ("test", 2), ("x25pad", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgCommandParser.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgCommandParser.setDescription('Current command parser for Async Port')
wfIsdbPortCurrentCfgInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgInactivityTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgInactivityTimeout.setDescription('Async port is reset after inactivity period')
wfIsdbPortCurrentCfgRxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgRxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgRxQueueSize.setDescription("Size of the async port's receive queue")
wfIsdbPortCurrentCfgTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgTxQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgTxQueueSize.setDescription("Size of the async port's transmit queue")
wfIsdbPortCurrentCfgRxXoff = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgRxXoff.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgRxXoff.setDescription("Flow Control Xon/Xoff for Isdb's async port")
wfIsdbPortCurrentCfgTxXoff = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgTxXoff.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgTxXoff.setDescription('Flow Control Xon/Xoff for remote terminal')
wfIsdbPortCurrentCfgDtrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDtrAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgDtrAction.setDescription('Determines whether or not an action is taken when the DTR signal changes')
wfIsdbPortCurrentCfgRxXoffAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgRxXoffAction.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortCurrentCfgRxXoffAction.setDescription('Determine whether or not we notify the application when an Xon or Xoff change occurs ')
wfIsdbPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5), )
if mibBuilder.loadTexts: wfIsdbPortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTable.setDescription('ASYNC line record')
wfIsdbPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1), ).setIndexNames((0, "Wellfleet-ISDB-MIB", "wfIsdbPortStatSlot"), (0, "Wellfleet-ISDB-MIB", "wfIsdbPortStatConnector"), (0, "Wellfleet-ISDB-MIB", "wfIsdbPortStatNumber"))
if mibBuilder.loadTexts: wfIsdbPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatEntry.setDescription('An entry in the ASYNC table')
wfIsdbPortStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatState.setDescription('Current state of the Async port on the I-SDB')
wfIsdbPortStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatSlot.setDescription('Instance ID Slot, filled in by the ISDB mib gate')
wfIsdbPortStatConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfIsdbPortStatNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatNumber.setDescription('Instance ID Async Port, filled in by the ISDB mib gate')
wfIsdbPortStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRxOctets.setDescription('Number of octets received on Async Port')
wfIsdbPortStatRxLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRxLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRxLacks.setDescription('Number of lack of resources encountered while receiving on Async Port')
wfIsdbPortStatRxWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRxWaits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRxWaits.setDescription('Number of times we had to wait because the receive queue was full')
wfIsdbPortStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTxOctets.setDescription('Number of octets transmitted on Async Port')
wfIsdbPortStatTxLacks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatTxLacks.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTxLacks.setDescription('Number of lack of resources encountered when transmitting on Async Port')
wfIsdbPortStatTxWaits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatTxWaits.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTxWaits.setDescription('Number of times we had to wait because the transmit queue was full')
wfIsdbPortStatBreaksDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatBreaksDetected.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatBreaksDetected.setDescription('Number of Breaks detected on Async Port')
wfIsdbPortStatParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatParityErrors.setDescription('Number of Parity Errors detected on Async Port')
wfIsdbPortStatFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatFramingErrors.setDescription('Number of Framing Errors detected on Async Port')
wfIsdbPortStatOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatOverrunErrors.setDescription('Async port is reset after inactivity period')
wfIsdbPortStatCtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatCtsState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatCtsState.setDescription('Current CTS state')
wfIsdbPortStatCtsTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatCtsTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatCtsTransitions.setDescription('Number of times CTS has changed state')
wfIsdbPortStatRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRtsState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRtsState.setDescription('Current RTS state')
wfIsdbPortStatRtsTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRtsTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRtsTransitions.setDescription('Number of times that RTS has changed state')
wfIsdbPortStatDsrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatDsrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatDsrState.setDescription('Current DSR state')
wfIsdbPortStatDsrTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatDsrTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatDsrTransitions.setDescription('Number of times DSR has changed state')
wfIsdbPortStatDcdState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatDcdState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatDcdState.setDescription('Current DCD state')
wfIsdbPortStatDcdTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatDcdTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatDcdTransitions.setDescription('Number of times DCD has changed state')
wfIsdbPortStatDtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatDtrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatDtrState.setDescription('Current DTR state')
wfIsdbPortStatDtrTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatDtrTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatDtrTransitions.setDescription('Number of times DTR has changed state')
wfIsdbPortStatRxInts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRxInts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRxInts.setDescription('Number of receive interrupts on this port')
wfIsdbPortStatTxInts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatTxInts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTxInts.setDescription('Number of transmit interrupts on this port')
wfIsdbPortStatModemInts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatModemInts.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatModemInts.setDescription('Number of modem interrupts on this port')
wfIsdbPortStatSpecialCharCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatSpecialCharCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatSpecialCharCount.setDescription('Count of the number of times XON/XOFF changes are detected')
wfIsdbPortStatRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRxState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRxState.setDescription('Hardware chip enabled/disabled for receiving')
wfIsdbPortStatRxFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatRxFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatRxFlowState.setDescription('Isdb board suspends/resumes output to the remote terminal ')
wfIsdbPortStatTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatTxState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTxState.setDescription('Hardware chip enabled/disabled for transmitting')
wfIsdbPortStatTxFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 33, 5, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIsdbPortStatTxFlowState.setStatus('mandatory')
if mibBuilder.loadTexts: wfIsdbPortStatTxFlowState.setDescription('Remote terminal suspends/resumes output to the isdb board ')
mibBuilder.exportSymbols("Wellfleet-ISDB-MIB", wfIsdbPortStatDtrState=wfIsdbPortStatDtrState, wfIsdbStatEntry=wfIsdbStatEntry, wfIsdbStatMsgQueueLacks=wfIsdbStatMsgQueueLacks, wfIsdbPortCurrentCfgSlot=wfIsdbPortCurrentCfgSlot, wfIsdbPortStatTxOctets=wfIsdbPortStatTxOctets, wfIsdbStatTxUnknownFrames=wfIsdbStatTxUnknownFrames, wfIsdbStatRxManagementFrames=wfIsdbStatRxManagementFrames, wfIsdbPortStatRxFlowState=wfIsdbPortStatRxFlowState, wfIsdbStatTotalConnCount=wfIsdbStatTotalConnCount, wfIsdbPortStatFramingErrors=wfIsdbPortStatFramingErrors, wfIsdbStatTxMsgs=wfIsdbStatTxMsgs, wfIsdbPortDefaultCfgState=wfIsdbPortDefaultCfgState, wfIsdbStatRxDataLinkFrames=wfIsdbStatRxDataLinkFrames, wfIsdbCfgEntry=wfIsdbCfgEntry, wfIsdbPortDefaultCfgCommandParser=wfIsdbPortDefaultCfgCommandParser, wfIsdbPortCurrentCfgNumber=wfIsdbPortCurrentCfgNumber, wfIsdbPortStatTxWaits=wfIsdbPortStatTxWaits, wfIsdbStatRxOctets=wfIsdbStatRxOctets, wfIsdbStatTxFrames=wfIsdbStatTxFrames, wfIsdbPortStatRxLacks=wfIsdbPortStatRxLacks, wfIsdbPortStatTxState=wfIsdbPortStatTxState, wfIsdbPortCurrentCfgConnector=wfIsdbPortCurrentCfgConnector, wfIsdbStatState=wfIsdbStatState, wfIsdbPortCurrentCfgRxXoff=wfIsdbPortCurrentCfgRxXoff, wfIsdbPortCurrentCfgBaudRate=wfIsdbPortCurrentCfgBaudRate, wfIsdbStatScc3Ints=wfIsdbStatScc3Ints, wfIsdbPortStatEntry=wfIsdbPortStatEntry, wfIsdbStatTimer4Ints=wfIsdbStatTimer4Ints, wfIsdbDiagVersion=wfIsdbDiagVersion, wfIsdbPortDefaultCfgTxQueueSize=wfIsdbPortDefaultCfgTxQueueSize, wfIsdbCfgAutoUld=wfIsdbCfgAutoUld, wfIsdbCfgSlot=wfIsdbCfgSlot, wfIsdbPortCurrentCfgTable=wfIsdbPortCurrentCfgTable, wfIsdbStatRxUnknownFrames=wfIsdbStatRxUnknownFrames, wfIsdbPortDefaultCfgTxXoff=wfIsdbPortDefaultCfgTxXoff, wfIsdbPortCurrentCfgParity=wfIsdbPortCurrentCfgParity, wfIsdbStatMemoryFree=wfIsdbStatMemoryFree, wfIsdbPortCurrentCfgInactivityTimeout=wfIsdbPortCurrentCfgInactivityTimeout, wfIsdbPortDefaultCfgBaudRate=wfIsdbPortDefaultCfgBaudRate, wfIsdbPortStatRxOctets=wfIsdbPortStatRxOctets, wfIsdbCfgState=wfIsdbCfgState, wfIsdbPortStatState=wfIsdbPortStatState, wfIsdbStatSlot=wfIsdbStatSlot, wfIsdbPortDefaultCfgRxXoffAction=wfIsdbPortDefaultCfgRxXoffAction, wfIsdbCfgTable=wfIsdbCfgTable, wfIsdbStatRxBadFrames=wfIsdbStatRxBadFrames, wfIsdbPortStatRtsState=wfIsdbPortStatRtsState, wfIsdbPortCurrentCfgStopBits=wfIsdbPortCurrentCfgStopBits, wfIsdbPortDefaultCfgDelete=wfIsdbPortDefaultCfgDelete, wfIsdbCfgCircuit=wfIsdbCfgCircuit, wfIsdbStatVersion=wfIsdbStatVersion, wfIsdbPortDefaultCfgDtrAction=wfIsdbPortDefaultCfgDtrAction, wfIsdbPortStatRxWaits=wfIsdbPortStatRxWaits, wfIsdbStatTxLargeMsgs=wfIsdbStatTxLargeMsgs, wfIsdbPortCurrentCfgDataBits=wfIsdbPortCurrentCfgDataBits, wfIsdbPortStatSlot=wfIsdbPortStatSlot, wfIsdbPortStatDsrTransitions=wfIsdbPortStatDsrTransitions, wfIsdbStatAv6Ints=wfIsdbStatAv6Ints, wfIsdbPortStatRtsTransitions=wfIsdbPortStatRtsTransitions, wfIsdbStatCurrentConnCount=wfIsdbStatCurrentConnCount, wfIsdbPortDefaultCfgSlot=wfIsdbPortDefaultCfgSlot, wfIsdbPortStatConnector=wfIsdbPortStatConnector, wfIsdbStatTxInts=wfIsdbStatTxInts, wfIsdbCfgPollInterval=wfIsdbCfgPollInterval, wfIsdbStatTxOctets=wfIsdbStatTxOctets, wfIsdbPortDefaultCfgEntry=wfIsdbPortDefaultCfgEntry, wfIsdbStatTimer2Ints=wfIsdbStatTimer2Ints, wfIsdbStatAv5Ints=wfIsdbStatAv5Ints, wfIsdbPortCurrentCfgEntry=wfIsdbPortCurrentCfgEntry, wfIsdbStatCpuIdleTotal=wfIsdbStatCpuIdleTotal, wfIsdbPortCurrentCfgCommandParser=wfIsdbPortCurrentCfgCommandParser, wfIsdbStatTaskCount=wfIsdbStatTaskCount, wfIsdbStatTxManagementFrames=wfIsdbStatTxManagementFrames, wfIsdbStatTxLacks=wfIsdbStatTxLacks, wfIsdbPortDefaultCfgDataBits=wfIsdbPortDefaultCfgDataBits, wfIsdbPortStatBreaksDetected=wfIsdbPortStatBreaksDetected, wfIsdbPortStatDcdTransitions=wfIsdbPortStatDcdTransitions, wfIsdbStatAuthorUnknown=wfIsdbStatAuthorUnknown, wfIsdbPortDefaultCfgNumber=wfIsdbPortDefaultCfgNumber, wfIsdbPortStatDtrTransitions=wfIsdbPortStatDtrTransitions, wfIsdbPortStatSpecialCharCount=wfIsdbPortStatSpecialCharCount, wfIsdbStatTxUnderFlows=wfIsdbStatTxUnderFlows, wfIsdbStatRxLargeFrames=wfIsdbStatRxLargeFrames, wfIsdbStatTxDataLinkFrames=wfIsdbStatTxDataLinkFrames, wfIsdbCfgDelete=wfIsdbCfgDelete, wfIsdbPortStatTable=wfIsdbPortStatTable, wfIsdbPortStatDcdState=wfIsdbPortStatDcdState, wfIsdbPortDefaultCfgParity=wfIsdbPortDefaultCfgParity, wfIsdbPortDefaultCfgTable=wfIsdbPortDefaultCfgTable, wfIsdbStatRxManagementMsgLacks=wfIsdbStatRxManagementMsgLacks, wfIsdbPortStatNumber=wfIsdbPortStatNumber, wfIsdbPortStatDsrState=wfIsdbPortStatDsrState, wfIsdbDiagDate=wfIsdbDiagDate, wfIsdbPortStatCtsState=wfIsdbPortStatCtsState, wfIsdbPortDefaultCfgDsr=wfIsdbPortDefaultCfgDsr, wfIsdbPortStatTxLacks=wfIsdbPortStatTxLacks, wfIsdbStatStartCount=wfIsdbStatStartCount, wfIsdbPortStatRxInts=wfIsdbPortStatRxInts, wfIsdbStatRxLacks=wfIsdbStatRxLacks, wfIsdbPortStatOverrunErrors=wfIsdbPortStatOverrunErrors, wfIsdbStatRxIncompleteFrames=wfIsdbStatRxIncompleteFrames, wfIsdbCfgAutoRestart=wfIsdbCfgAutoRestart, wfIsdbStatHardwareTimeouts=wfIsdbStatHardwareTimeouts, wfIsdbPortStatRxState=wfIsdbPortStatRxState, wfIsdbStatRxOverFlows=wfIsdbStatRxOverFlows, wfIsdbStatTxSmallMsgs=wfIsdbStatTxSmallMsgs, wfIsdbImageDate=wfIsdbImageDate, wfIsdbCfgLogFilter=wfIsdbCfgLogFilter, wfIsdbPortDefaultCfgRxQueueSize=wfIsdbPortDefaultCfgRxQueueSize, wfIsdbStatAv7Ints=wfIsdbStatAv7Ints, wfIsdbCfgConnector=wfIsdbCfgConnector, wfIsdbPortCurrentCfgState=wfIsdbPortCurrentCfgState, wfIsdbPortStatParityErrors=wfIsdbPortStatParityErrors, wfIsdbStatErrorInts=wfIsdbStatErrorInts, wfIsdbStatRxInts=wfIsdbStatRxInts, wfIsdbStatRxDataLinkMsgLacks=wfIsdbStatRxDataLinkMsgLacks, wfIsdbPortStatTxInts=wfIsdbPortStatTxInts, wfIsdbPortDefaultCfgDcd=wfIsdbPortDefaultCfgDcd, wfIsdbStatRxFrames=wfIsdbStatRxFrames, wfIsdbStatMemoryLargestBlock=wfIsdbStatMemoryLargestBlock, wfIsdbPortDefaultCfgRxXoff=wfIsdbPortDefaultCfgRxXoff, wfIsdbStatConnector=wfIsdbStatConnector, wfIsdbPortDefaultCfgPrompt=wfIsdbPortDefaultCfgPrompt, wfIsdbPortDefaultCfgConnector=wfIsdbPortDefaultCfgConnector, wfIsdbPortCurrentCfgPrompt=wfIsdbPortCurrentCfgPrompt, wfIsdbStatAv3Ints=wfIsdbStatAv3Ints, wfIsdbStatAv1Ints=wfIsdbStatAv1Ints, wfIsdbStatCpuIdleCurrent=wfIsdbStatCpuIdleCurrent, wfIsdbPortStatModemInts=wfIsdbPortStatModemInts, wfIsdbPortDefaultCfgCts=wfIsdbPortDefaultCfgCts, wfIsdbPortCurrentCfgDsr=wfIsdbPortCurrentCfgDsr, wfIsdbStatTxAbortedFrames=wfIsdbStatTxAbortedFrames, wfIsdbPortDefaultCfgInactivityTimeOut=wfIsdbPortDefaultCfgInactivityTimeOut, wfIsdbStatAv2Ints=wfIsdbStatAv2Ints, wfIsdbPortCurrentCfgTxXoff=wfIsdbPortCurrentCfgTxXoff, wfIsdbImageVersion=wfIsdbImageVersion, wfIsdbStatRxDataLinkDiscards=wfIsdbStatRxDataLinkDiscards, wfIsdbPortStatTxFlowState=wfIsdbPortStatTxFlowState, wfIsdbPortCurrentCfgRxXoffAction=wfIsdbPortCurrentCfgRxXoffAction, wfIsdbStatRxRunts=wfIsdbStatRxRunts, wfIsdbStatAv4Ints=wfIsdbStatAv4Ints, wfIsdbPortDefaultCfgStopBits=wfIsdbPortDefaultCfgStopBits, wfIsdbPortDefaultCfgDisable=wfIsdbPortDefaultCfgDisable, wfIsdbPortCurrentCfgCts=wfIsdbPortCurrentCfgCts, wfIsdbPortStatCtsTransitions=wfIsdbPortStatCtsTransitions, wfIsdbStatRxSmallFrames=wfIsdbStatRxSmallFrames, wfIsdbStatTable=wfIsdbStatTable, wfIsdbStatTimer1Ints=wfIsdbStatTimer1Ints, wfIsdbPortCurrentCfgRxQueueSize=wfIsdbPortCurrentCfgRxQueueSize, wfIsdbPortCurrentCfgDtrAction=wfIsdbPortCurrentCfgDtrAction, wfIsdbStatAlarmCount=wfIsdbStatAlarmCount, wfIsdbCfgDisable=wfIsdbCfgDisable, wfIsdbStatBusErrors=wfIsdbStatBusErrors, wfIsdbStatTimer3Ints=wfIsdbStatTimer3Ints, wfIsdbCfgUldVolume=wfIsdbCfgUldVolume, wfIsdbPortCurrentCfgTxQueueSize=wfIsdbPortCurrentCfgTxQueueSize, wfIsdbPortCurrentCfgDcd=wfIsdbPortCurrentCfgDcd)
