#
# PySNMP MIB module MICOM-FRDCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-FRDCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
mcmSysAsciiTimeOfDay, mcmSysIfExtModule, mcmSysIfExtPPA = mibBuilder.importSymbols("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay", "mcmSysIfExtModule", "mcmSysIfExtPPA")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Bits, NotificationType, ObjectIdentity, MibIdentifier, Unsigned32, Integer32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Bits", "NotificationType", "ObjectIdentity", "MibIdentifier", "Unsigned32", "Integer32", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
micom_frdce = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 9)).setLabel("micom-frdce")
frdce_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1)).setLabel("frdce-configuration")
mcmFrConnectTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1), )
if mibBuilder.loadTexts: mcmFrConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectTable.setDescription('NAME = ; DESC = The Frame Relay End-to-End SPVC Connections \\ table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "mcmFrConnectIfIndexLocal"), (0, "MICOM-FRDCE-MIB", "mcmFrConnectDLCILocal"))
if mibBuilder.loadTexts: mcmFrConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay End-to-End SPVC \\ Connections table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectIfIndexLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectIfIndexLocal.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectIfIndexLocal.setDescription('NAME = ; DESC = When switch type is FRDCE, the \\ ifIndex of the local DCE interface. \\ (Analogous to the ifIndex pointer in \\ MIB II Interfaces Group, but specific \\ to the FR End-to-End Connections \\ table.) When switch type is HTDS, the \\ ifIndex of the local WAN interface. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectDLCILocal = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectDLCILocal.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectDLCILocal.setDescription('NAME = ; DESC = The DLCI value on the local DCE \\ interface. Always 16 if HTDS. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectConnectId.setDescription('NAME = ; DESC = The Connect ID of this SPVC mapping. \\ Used to associate SVCs and Connect \\ mappings. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectIfIndexRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectIfIndexRemote.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnectIfIndexRemote.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS OBSOLETE******* This information is no longer useful since \\ the remote ifindex is configured in with the \\ ConncectDNA when required.\\ The ifIndex of the remote DCE interface. \\ (To be carried in the user-to-user signaling \\ of the SVC call setup to the remote access device.) \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectDLCIRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectDLCIRemote.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectDLCIRemote.setDescription('NAME = ; DESC = The DLCI value on the remote DCE \\ interface. (To be carried in the user-to-user \\ signaling of the SVC call setup to the remote \\ access device.) (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectIfIndexSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectIfIndexSVC.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectIfIndexSVC.setDescription('NAME = ; DESC = Beginning with release 3.0, the value of this \\ object indicates the ifIndex value corresponding \\ to the tunneling PVC in which the SVC is established. \\ Prior to release 3.0, this object indicates the \\ ifIndex of the local DTE interface on \\ which this SVC is to be established with the \\ remote access device. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectDNARemote = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectDNARemote.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectDNARemote.setDescription('NAME = ; DESC = The DNA of the remote node with which the \\ the SVC will be established. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectSVCDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectSVCDLCI.setDescription('NAME = ; DESC = The DLCI value of the SVC once the SVC \\ has been established. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectDCEPVCLMIState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectDCEPVCLMIState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectDCEPVCLMIState.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the local DCE considers the local \\ PVC associated with this mapping active (1) \\ or inactive (2). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectSVCState = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectSVCState.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectSVCState.setDescription('NAME = ; DESC = The value of this object indicates \\ whether the local DCE considers the \\ SVC associated with this mapping active (1) \\ or inactive (2). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectConnType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectConnType.setDescription('NAME = ; DESC = The value of this object indicates \\ whether this end of the SPVC segment \\ initiated the SVC call, master (1); \\ or not, slave (1). (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectLastChange.setDescription("NAME = ; DESC = The value of MIB II's sysUpTime at \\ the time this PVC mapping entered its \\ current operations state in the high to \\ low direction. (Operational); HELP = ; CAPABILITIES = ;")
mcmFrConnectDisconnectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("no-reason", 1), ("local-PVC-physical-link-is-down", 2), ("local-PVC-LMI-is-down", 3), ("remote-PVC-physical-link-is-down", 4), ("remote-PVC-LMI-is-down", 5), ("remote-signaled", 6), ("local-SVC-LMI-is-down", 7), ("local-SVC-is-down", 8), ("local-FR-CORE-error", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectDisconnectReason.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectDisconnectReason.setDescription('NAME = ; DESC = The value of this object indicates \\ the reason why the SPVC is not active \\ in the case of a connection failure. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnectSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("frdce", 1), ("htds", 2), ("cbr", 3), ("x25", 4), ("sna-sdlc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnectSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrConnectSwitchType.setDescription('NAME = ; DESC = The value of this object indicates the type \\ of SPVC connection (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2), )
if mibBuilder.loadTexts: mcmFrConnSVCTable.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCTable.setDescription('NAME = ; DESC = The Frame Relay SVC Connect (Switched) \\ Segment Configuration table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrConnSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "mcmFrConnSVCIfIndex"), (0, "MICOM-FRDCE-MIB", "mcmFrConnSVCConnectId"))
if mibBuilder.loadTexts: mcmFrConnSVCEntry.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay SVC Connect \\ (Switched) Segment Configuration table. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local frame relay physical \\ line interface. (Operational); HELP = Analogous to the ifIndex pointer \\ in the MIB II Interfaces Group, but specific to \\ the FR SVC Connect (Switched) Segment \\ Configuration table.); CAPABILITIES = ;')
mcmFrConnSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCConnectId.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCConnectId.setDescription('NAME = ; DESC = The Connect ID of the Connection group \\ entry to which this SVC belongs. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCDNA.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCDNA.setDescription('NAME = ; DESC = The DNA for the destination of the VC. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCDLCI.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCDLCI.setDescription('NAME = ; DESC = The local DLCI for this SVC. Valid only \\ when the SVC is established. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMaxTxSize.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMaxTxSize.setDescription('NAME = ; DESC = The maximum transmission frame size. This \\ ..should be equal to (or greater than) the Rx \\ size for the corresponding PVC. Expressed \\ in bytes. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMaxRxSize.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMaxRxSize.setDescription('NAME = ; DESC = The maximum receive frame size. This \\ should be equal to (or less than) the Tx \\ size for the corresponding PVC. Expressed \\ in bytes. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMinTxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMinTxThroughput.setDescription('NAME = ; DESC = The minimum transmission throughput. \\ This should be equal to (or greater than) the \\ Rx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMinRxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMinRxThroughput.setDescription('NAME = ; DESC = The minimum receive throughput. \\ This should be equal to (or less than) the \\ Tx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMaxTxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMaxTxThroughput.setDescription('NAME = ; DESC = The maximum transmission throughput. \\ (Always set to value of \\ mcmFrConnSVCMinTxThroughput.) (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMaxRxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMaxRxThroughput.setDescription('NAME = ; DESC = The maximum receive throughput. \\ (Always set to value of \\ mcmFrConnSVCMinRxThroughput.) (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMaxTxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMaxTxBurstSize.setDescription('NAME = ; DESC = The maximum transmission burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCMaxRxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCMaxRxBurstSize.setDescription('NAME = ; DESC = The maximum receive burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCExcessTxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCExcessTxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to accept. \\ This should be equal to (or greater than) the \\ Rx Be configured for the corresponding PVC \\ Expressed in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCExcessRxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCExcessRxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to deliver. \\ This should be equal to (or less than) the \\ Tx Be configured for the corresponding PVC \\ Expressed in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCTransferPriority.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrConnSVCReasonForDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 18, 21, 30, 34, 44, 47, 81, 96, 97, 100, 101, 102))).clone(namedValues=NamedValues(("the-PVC-does-not-exist-ie-unassigned", 1), ("remote-PVC-already-connected-ie-busy", 17), ("no-user-present-in-call", 18), ("remote-PVC-down-ie-unavailable", 21), ("response-to-status-inquiry", 30), ("no-DLCI-available", 34), ("specified-DLCI-unavailable", 44), ("resource-unavailable", 47), ("invalid-call-reference", 81), ("missing-element", 96), ("message-type-unknown", 97), ("invalid-element", 100), ("invalid-message-for-state", 101), ("timer-recovery", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrConnSVCReasonForDisconnect.setStatus('obsolete')
if mibBuilder.loadTexts: mcmFrConnSVCReasonForDisconnect.setDescription('NAME = ; DESC = The reason for the SVC Disconnect. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7), )
if mibBuilder.loadTexts: mcmMPANLConnSVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCTable.setDescription('NAME = ; DESC = The MPANL SVC Connect (Switched) \\ Segment Configuration table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmMPANLConnSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "mcmMPANLConnSVCConnectId"))
if mibBuilder.loadTexts: mcmMPANLConnSVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay SVC Connect \\ (Switched) Segment Configuration table. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCConnectId.setDescription('NAME = ; DESC = The Connect ID of the Connection group \\ entry to which this SVC belongs. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCDNA.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCDNA.setDescription('NAME = ; DESC = The DNA for the destination of the VC. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCDLCI.setDescription('NAME = ; DESC = The local DLCI for this SVC. Valid only \\ when the SVC is established. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxTxSize.setDescription('NAME = ; DESC = The maximum transmission frame size. This \\ ..should be equal to (or greater than) the Rx \\ size for the corresponding PVC. Expressed \\ in bytes. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxRxSize.setDescription('NAME = ; DESC = The maximum receive frame size. This \\ should be equal to (or less than) the Tx \\ size for the corresponding PVC. Expressed \\ in bytes. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMinTxThroughput.setDescription('NAME = ; DESC = The minimum transmission throughput. \\ This should be equal to (or greater than) the \\ Rx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMinRxThroughput.setDescription('NAME = ; DESC = The minimum receive throughput. \\ This should be equal to (or less than) the \\ Tx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxTxThroughput.setDescription('NAME = ; DESC = The maximum transmission throughput. \\ (Always set to value of \\ mcmMPANLConnSVCMinTxThroughput.) (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxRxThroughput.setDescription('NAME = ; DESC = The maximum receive throughput. \\ (Always set to value of \\ mcmMPANLConnSVCMinRxThroughput.) (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxTxBurstSize.setDescription('NAME = ; DESC = The maximum transmission burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCMaxRxBurstSize.setDescription('NAME = ; DESC = The maximum receive burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCExcessTxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to accept. \\ This should be equal to (or greater than) the \\ Rx Be configured for the corresponding PVC \\ Expressed in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCExcessRxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to deliver. \\ This should be equal to (or less than) the \\ Tx Be configured for the corresponding PVC \\ Expressed in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCReasonForDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 16, 17, 18, 21, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 57, 58, 63, 65, 66, 70, 79, 81, 82, 87, 88, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 111, 127, 128))).clone(namedValues=NamedValues(("the-PVC-does-not-exist-ie-unassigned", 1), ("no-route-to-specified-transit-network", 2), ("no-route-to-destination", 3), ("channel-unacceptable", 6), ("call-awarded-and-being-delivered-in-an-est-channel", 7), ("normal-call-clearing", 16), ("remote-PVC-already-connected-ie-busy", 17), ("no-user-present-in-call", 18), ("remote-PVC-down-ie-unavailable", 21), ("destination-out-of-order", 27), ("invalid-number-format", 28), ("facility-rejected", 29), ("response-to-status-inquiry", 30), ("normal-unspecified", 31), ("no-DLCI-available", 34), ("network-out-of-order", 38), ("permanent-frame-mode-connection-out-of-service", 39), ("permanent-frame-mode-connection-operational", 40), ("temporary-failure", 41), ("switching-equipment-congestion", 42), ("access-information-discarded", 43), ("specified-DLCI-unavailable", 44), ("resource-unavailable", 47), ("quality-of-service-not-available", 49), ("requested-facility-not-subscribed", 50), ("bearer-capability-not-authorized", 57), ("bearer-capability-not-presently-available", 58), ("service-or-option-not-available-unspecified", 63), ("bearer-capability-not-implemented", 65), ("channel-type-not-implemented", 66), ("only-restricted-digital-capability-is-available", 70), ("service-or-option-not-implemented-unspecified", 79), ("invalid-call-reference", 81), ("identified-channel-does-not-exist", 82), ("user-not-member-of-CUG", 87), ("incompatible-destination", 88), ("non-existent-CUG", 90), ("invalid-transit-network-selection", 91), ("invalid-message-unspecified", 95), ("missing-element", 96), ("message-type-unknown", 97), ("message-not-compatible", 98), ("element-non-existent-or-not-implemented", 99), ("invalid-element", 100), ("invalid-message-for-state", 101), ("timer-recovery", 102), ("protocol-error-unspecified", 111), ("interworking-unspecified", 127), ("normal-condition", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCReasonForDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCReasonForDisconnect.setDescription('NAME = ; DESC = The reason for the SVC Disconnect. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCDiscardPriority.setDescription('NAME = ; DESC = The discard priority for the MPANL \\ SVC connection. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCIfindex.setDescription('NAME = ; DESC = Beginning with release 3.0, the value of this \\ object indicates the ifIndex value of the MPANL \\ DTE/DCE interface corresponding to the tunneling \\ PVC in which the SVC is established. \\ Prior to release 3.0, this object indicates the \\ ifIndex of the local frame relay physical \\ line interface. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCSetupPriority.setDescription('NAME = ; DESC = This indicates the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 \\ signifies the highest priority, and 5 signifies \\ the lowest. (Operational); HELP = ; CAPABILITIES = ;')
mcmMPANLConnSVCHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMPANLConnSVCHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mcmMPANLConnSVCHoldingPriority.setDescription('NAME = ; DESC = This indicates the priority a path maintains \\ once the path has been established, and also determines \\ the likelihood of being bumped by a new path, thus \\ losing the bandwidth. A value of 1 signifies the highest \\ priority, and 5 signifies the lowest. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3), )
if mibBuilder.loadTexts: mcmFrServiceParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamTable.setDescription('NAME = ; DESC = The Proprietary Frame Relay Service Logical Port \\ table. (Operational); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
mcmFrServiceParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "mcmFrServiceParamIfIndex"))
if mibBuilder.loadTexts: mcmFrServiceParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamEntry.setDescription('NAME = ; DESC = An entry in the Proprietary Frame Relay Service \\ Logical Port table. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local physical interface. \\ (Operational); HELP = Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the Prop FR Logical Port table.; CAPABILITIES = ;')
mcmFrServiceParamFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamFlowControl.setDescription('NAME = ; DESC = The Flow Control for out-bound data \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamDelta.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamDelta.setDescription('NAME = ; DESC = The delta time interval to increase or decrease \\ the transmission rate depending on the number of \\ frames received with the FECN bit cleared or set; \\ respectively. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamConsecutiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamConsecutiveFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamConsecutiveFrames.setDescription('NAME = ; DESC = The number of consecutive frames received with \\ the BECN bit set before reducing the transmit rate. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamRateEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamRateEnf.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamRateEnf.setDescription('NAME = ; DESC = The rate enforcement enabled/disabled parameter \\ for FR congestion management processing. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamTxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamTxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamTxMTU.setDescription('NAME = ; DESC = The maximum transmission FR packet size \\ expressed in bytes. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamRxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamRxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamRxMTU.setDescription('NAME = ; DESC = The maximum receive FR packet size \\ expressed in bytes. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamTxBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamTxBc.setDescription('NAME = ; DESC = The transmission committed burst size \\ expressed in bits/sec. (Always set to Tx Be.) \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamRxBc.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamRxBc.setDescription('NAME = ; DESC = The receive committed burst size \\ expressed in bits/sec. (Always set to Rx Be.) \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamTxBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamTxBe.setDescription('NAME = ; DESC = The transmission excess burst size \\ expressed in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamRxBe.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamRxBe.setDescription('NAME = ; DESC = The receive excess burst size \\ expressed in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamTxThroughput.setDescription('NAME = ; DESC = The transmission CIR expressed \\ in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamRxThroughput.setDescription('NAME = ; DESC = The receive CIR expressed \\ in bits/sec. (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamPVCLMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamPVCLMIStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamPVCLMIStatus.setDescription('NAME = ; DESC = The status of the PVC LMI. \\ (Operational); HELP = ; CAPABILITIES = ;')
mcmFrServiceParamSVCLMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFrServiceParamSVCLMIStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mcmFrServiceParamSVCLMIStatus.setDescription('NAME = ; DESC = The status of the SVC LMI. \\ (Not supported in the access device 1.1 release.) \\ (Operational); HELP = ; CAPABILITIES = ;')
nvmFrConnectTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4), )
if mibBuilder.loadTexts: nvmFrConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectTable.setDescription('NAME = ; DESC = The Frame Relay End-to-End SPVC Connections \\ table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmFrConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "nvmFrConnectIfIndexLocal"), (0, "MICOM-FRDCE-MIB", "nvmFrConnectDLCILocal"))
if mibBuilder.loadTexts: nvmFrConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay End-to-End SPVC \\ Connections table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectIfIndexLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnectIfIndexLocal.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectIfIndexLocal.setDescription('NAME = ; DESC = The ifIndex of the local DCE interface. \\ (Configuration); HELP = Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the FR End-to-End Connections table.; CAPABILITIES = ;')
nvmFrConnectDLCILocal = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnectDLCILocal.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectDLCILocal.setDescription('NAME = ; DESC = The DLCI value on the local DCE \\ interface. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnectConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectConnectId.setDescription('NAME = ; DESC = The Connect ID of this SPVCmapping. \\ (Configuration); HELP = Used to associate SVCs and Connect \\ mappings. (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.); CAPABILITIES = ;')
nvmFrConnectIfIndexRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectIfIndexRemote.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnectIfIndexRemote.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS OBSOLETE******* \\ This information is no longer useful since \\ the remote ifindex is configured in with the \\ ConncectDNA when required.\\ The ifIndex of the remote DCE interface. \\ (To be carried in the user-to-user signaling \\ of the SVC call setup to the remote access device.) \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectDLCIRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectDLCIRemote.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectDLCIRemote.setDescription('NAME = ; DESC = The DLCI value on the remote DCE \\ interface. (To be carried in the user-to-user \\ signaling of the SVC call setup to the remote \\ access device.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectIfIndexSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectIfIndexSVC.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnectIfIndexSVC.setDescription('NAME = ; DESC = *******NOTE: THIS OBJECT IS OBSOLETE******* \\ This information is no longer useful since \\ all that is needed to make a SVC connection is \\ a DNA. The underlying MPANL will determine on \\ which link the connection is to be made.\\ The ifIndex of the local DTE interface on \\ which this SVC is to be established with the \\ remote access device. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectDNARemote = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectDNARemote.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectDNARemote.setDescription('NAME = ; DESC = The DNA of the remote node with which the \\ the SVC will be established. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2))).clone('slave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectConnType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectConnType.setDescription('NAME = ; DESC = The value of this object indicates \\ whether this end of the SPVC segment \\ initiated the SVC call, master (1); \\ or not, slave (1). (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectRowStatus.setDescription('NAME = ; DESC = This object is used to add new rows \\ in the connection table, modify existing \\ rows,and to delete existing rows (Configuration); HELP = To add a new row, createAndGo (4) is used. \\ To modify an existing row, active (1) is \\ used. To delete an existing row, \\ destroy (6) is used. ; CAPABILITIES = ;')
nvmFrConnectSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("frdce", 1), ("htds", 2), ("cbr", 3), ("x25", 4), ("sna-sdlc", 5))).clone('frdce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnectSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrConnectSwitchType.setDescription('NAME = ; DESC = The value of this object indicates the type \\ of SPVC connection (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5), )
if mibBuilder.loadTexts: nvmFrConnSVCTable.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCTable.setDescription('NAME = ; DESC = The Frame Relay SVC Connect (Switched) \\ Segment Configuration table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmFrConnSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "nvmFrConnSVCIfIndex"), (0, "MICOM-FRDCE-MIB", "nvmFrConnSVCConnectId"))
if mibBuilder.loadTexts: nvmFrConnSVCEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay SVC Connect \\ (Switched) Segment Configuration table. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnSVCIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local frame relay physical \\ line interface. (Configuration); HELP = Analogous to the ifIndex pointer \\ in the MIB II Interfaces Group, but specific to \\ the FR SVC Connect (Switched) Segment \\ Configuration table.; CAPABILITIES = ;')
nvmFrConnSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnSVCConnectId.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCConnectId.setDescription('NAME = ; DESC = The Connect ID of the Connection group \\ entry to which this SVC belongs. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCDNA.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCDNA.setDescription('NAME = ; DESC = The DNA for the destination of the VC. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCMaxTxSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMaxTxSize.setDescription('NAME = ; DESC = The maximum transmission frame size. This \\ ..should be equal to (or greater than) the Rx \\ size for the corresponding PVC. Expressed \\ in bytes. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCMaxRxSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMaxRxSize.setDescription('NAME = ; DESC = The maximum receive frame size. This \\ should be equal to (or less than) the Tx \\ size for the corresponding PVC. Expressed \\ in bytes. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCMinTxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMinTxThroughput.setDescription('NAME = ; DESC = The minimum transmission throughput. \\ This should be equal to (or greater than) the \\ Rx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCMinRxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMinRxThroughput.setDescription('NAME = ; DESC = The minimum receive throughput. \\ This should be equal to (or less than) the \\ Tx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnSVCMaxTxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMaxTxThroughput.setDescription('NAME = ; DESC = The maximum transmission throughput. \\ (Always set to value of \\ nvmFrConnSVCMinTxThroughput.) \\ (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrConnSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnSVCMaxRxThroughput.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMaxRxThroughput.setDescription('NAME = ; DESC = The maximum receive throughput. \\ (Always set to value of \\ nvmFrConnSVCMinRxThroughput.) (Configuration); HELP = (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.); CAPABILITIES = ;')
nvmFrConnSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnSVCMaxTxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMaxTxBurstSize.setDescription('NAME = ; DESC = The maximum transmission burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Configuration); HELP = (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.); CAPABILITIES = ;')
nvmFrConnSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrConnSVCMaxRxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCMaxRxBurstSize.setDescription('NAME = ; DESC = The maximum receive burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Configuration); HELP = (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.); CAPABILITIES = ;')
nvmFrConnSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCExcessTxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCExcessTxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to accept. \\ (Configuration); HELP = This should be equal to (or greater than) the \\ Rx Be configured for the corresponding PVC \\ Expressed in bits/sec.; CAPABILITIES = ;')
nvmFrConnSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCExcessRxBurstSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCExcessRxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to deliver. \\ (Configuration); HELP = This should be equal to (or less than) the \\ Tx Be configured for the corresponding PVC \\ Expressed in bits/sec.; CAPABILITIES = ;')
nvmFrConnSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrConnSVCTransferPriority.setStatus('obsolete')
if mibBuilder.loadTexts: nvmFrConnSVCTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8), )
if mibBuilder.loadTexts: nvmMPANLConnSVCTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCTable.setDescription('NAME = ; DESC = The MPANL SVC Connect (Switched) \\ Segment Configuration table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmMPANLConnSVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "nvmMPANLConnSVCConnectId"))
if mibBuilder.loadTexts: nvmMPANLConnSVCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCEntry.setDescription('NAME = ; DESC = An entry in the Frame Relay SVC Connect \\ (Switched) Segment Configuration table. \\ (Operational); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmMPANLConnSVCConnectId.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCConnectId.setDescription('NAME = ; DESC = The Connect ID of the Connection group \\ entry to which this SVC belongs. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCDNA = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCDNA.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCDNA.setDescription('NAME = ; DESC = The DNA for the destination of the VC. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMaxTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxTxSize.setDescription('NAME = ; DESC = The maximum transmission frame size. This \\ ..should be equal to (or greater than) the Rx \\ size for the corresponding PVC. Expressed \\ in bytes. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMaxRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxRxSize.setDescription('NAME = ; DESC = The maximum receive frame size. This \\ should be equal to (or less than) the Tx \\ size for the corresponding PVC. Expressed \\ in bytes. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMinTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMinTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMinTxThroughput.setDescription('NAME = ; DESC = The minimum transmission throughput. \\ This should be equal to (or greater than) the \\ Rx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMinRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMinRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMinRxThroughput.setDescription('NAME = ; DESC = The minimum receive throughput. \\ This should be equal to (or less than) the \\ Tx CIR for the corresponding PVC. Expressed \\ in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMaxTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxTxThroughput.setDescription('NAME = ; DESC = The maximum transmission throughput. \\ (Always set to value of \\ nvmMPANLConnSVCMinTxThroughput.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMaxRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxRxThroughput.setDescription('NAME = ; DESC = The maximum receive throughput. \\ (Always set to value of \\ nvmMPANLConnSVCMinRxThroughput.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMaxTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxTxBurstSize.setDescription('NAME = ; DESC = The maximum transmission burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCMaxRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCMaxRxBurstSize.setDescription('NAME = ; DESC = The maximum receive burst size. \\ Computation based on throughput and \\ Excess Burst. Expressed in bits/sec. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCExcessTxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCExcessTxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCExcessTxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to accept. \\ This should be equal to (or greater than) the \\ Rx Be configured for the corresponding PVC \\ Expressed in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCExcessRxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCExcessRxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCExcessRxBurstSize.setDescription('NAME = ; DESC = The maximum number of uncommitted \\ bits that the network will attempt to deliver. \\ This should be equal to (or less than) the \\ Tx Be configured for the corresponding PVC \\ Expressed in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCTransferPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCTransferPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCTransferPriority.setDescription('NAME = ; DESC = The transfer priority for the corresponding \\ pass-through connection. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low-discard-level", 1), ("medium-discard-level", 2), ("high-discard-level", 3))).clone('medium-discard-level')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCDiscardPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCDiscardPriority.setDescription('NAME = ; DESC = The discard priority for the MPANL \\ SVC connection. (configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCSetupPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCSetupPriority.setDescription('NAME = ; DESC = This indicates the priority of a path at \\ call-establishment time, and also determines \\ the potential for bumping established paths \\ to acquire their bandwidth. A value of 1 \\ signifies the highest priority, and 5 signifies \\ the lowest. (Configuration); HELP = ; CAPABILITIES = ;')
nvmMPANLConnSVCHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmMPANLConnSVCHoldingPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nvmMPANLConnSVCHoldingPriority.setDescription('NAME = ; DESC = This indicates the priority a path maintains \\ once the path has been established, and also determines \\ the likelihood of being bumped by a new path, thus \\ losing the bandwidth. A value of 1 signifies the highest \\ priority, and 5 signifies the lowest. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6), )
if mibBuilder.loadTexts: nvmFrServiceParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamTable.setDescription('NAME = ; DESC = The Proprietary Frame Relay Service Logical Port \\ table. (Configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmFrServiceParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1), ).setIndexNames((0, "MICOM-FRDCE-MIB", "nvmFrServiceParamIfIndex"))
if mibBuilder.loadTexts: nvmFrServiceParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamEntry.setDescription('NAME = ; DESC = An entry in the Proprietary Frame Relay Service Logical \\ Port table. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrServiceParamIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamIfIndex.setDescription('NAME = ; DESC = The ifIndex of the local physical interface. \\ (Configuration); HELP = Analogous to the ifIndex pointer in the \\ MIB II Interfaces Group, but specific to \\ the Prop FR Logical Port table.; CAPABILITIES = ;')
nvmFrServiceParamFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamFlowControl.setDescription('NAME = ; DESC = The Flow Control for out-bound data \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamDelta.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamDelta.setDescription('NAME = ; DESC = The delta time interval to increase or decrease \\ the transmission rate depending on the number of \\ frames received with the FECN bit cleared or set; \\ respectively. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamConsecutiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamConsecutiveFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamConsecutiveFrames.setDescription('NAME = ; DESC = The number of consecutive frames received with \\ the BECN bit set before reducing the transmit rate. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamRateEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamRateEnf.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamRateEnf.setDescription('NAME = ; DESC = The rate enforcement enabled/disabled parameter \\ for FR congestion management processing. \\ (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamTxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamTxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamTxMTU.setDescription('NAME = ; DESC = The maximum transmission FR packet size \\ expressed in bytes. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamRxMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(1604)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamRxMTU.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamRxMTU.setDescription('NAME = ; DESC = The maximum receive FR packet size \\ expressed in bytes. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrServiceParamTxBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamTxBc.setDescription('NAME = ; DESC = The transmission committed burst size \\ expressed in bits/sec. (Always set to Tx Be.) \\ (Configuration); HELP = (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.); CAPABILITIES = ;')
nvmFrServiceParamRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmFrServiceParamRxBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamRxBc.setDescription('NAME = ; DESC = The receive committed burst size \\ expressed in bits/sec. (Always set to Rx Be.) \\ (This object has temporarily \\ been assigned read-only access. Read-write \\ access may be assigned in future access device \\ releases.) (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamTxBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamTxBe.setDescription('NAME = ; DESC = The transmission excess burst size \\ expressed in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamRxBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamRxBe.setDescription('NAME = ; DESC = The receive excess burst size \\ expressed in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamTxThroughput.setDescription('NAME = ; DESC = The transmission CIR expressed \\ in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
nvmFrServiceParamRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 9, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2560000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmFrServiceParamRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: nvmFrServiceParamRxThroughput.setDescription('NAME = ; DESC = The receive CIR expressed \\ in bits/sec. (Configuration); HELP = ; CAPABILITIES = ;')
mcmFrPvcLmiLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 9) + (0,1)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-SYS-MIB", "mcmSysIfExtModule"), ("MICOM-SYS-MIB", "mcmSysIfExtPPA"))
if mibBuilder.loadTexts: mcmFrPvcLmiLinkUp.setDescription('NAME = ; DESC = FR DCE TRAP message: indication of PVC LMI link \\ up.\\ Severity Level: INFORMATIVE.; HELP = PVC LMI Link Up. Normal Status Indicator.;')
mcmFrPvcLmiLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 335, 1, 4, 9) + (0,2)).setObjects(("MICOM-SYS-MIB", "mcmSysAsciiTimeOfDay"), ("MICOM-SYS-MIB", "mcmSysIfExtModule"), ("MICOM-SYS-MIB", "mcmSysIfExtPPA"))
if mibBuilder.loadTexts: mcmFrPvcLmiLinkDown.setDescription('NAME = ; DESC = FR DCE TRAP message: indication of PVC LMI link \\ down.\\ Severity Level: CRITICAL.; HELP = PVC LMI link is down. Check cabling, and Mpanl \\ link status, including Passport MPANL status \\ for that particular Link. If further help is needed, \\ please contact Field Personnel, or System Admin.;')
mibBuilder.exportSymbols("MICOM-FRDCE-MIB", mcmFrConnectDCEPVCLMIState=mcmFrConnectDCEPVCLMIState, mcmMPANLConnSVCDNA=mcmMPANLConnSVCDNA, mcmFrServiceParamTable=mcmFrServiceParamTable, nvmFrConnectDLCILocal=nvmFrConnectDLCILocal, mcmFrConnectDNARemote=mcmFrConnectDNARemote, nvmFrServiceParamIfIndex=nvmFrServiceParamIfIndex, mcmFrServiceParamSVCLMIStatus=mcmFrServiceParamSVCLMIStatus, mcmFrConnectConnType=mcmFrConnectConnType, mcmFrConnSVCMaxRxSize=mcmFrConnSVCMaxRxSize, mcmMPANLConnSVCExcessTxBurstSize=mcmMPANLConnSVCExcessTxBurstSize, mcmMPANLConnSVCEntry=mcmMPANLConnSVCEntry, nvmFrConnectRowStatus=nvmFrConnectRowStatus, mcmFrConnSVCExcessTxBurstSize=mcmFrConnSVCExcessTxBurstSize, nvmFrServiceParamConsecutiveFrames=nvmFrServiceParamConsecutiveFrames, nvmMPANLConnSVCExcessRxBurstSize=nvmMPANLConnSVCExcessRxBurstSize, mcmMPANLConnSVCDiscardPriority=mcmMPANLConnSVCDiscardPriority, nvmMPANLConnSVCConnectId=nvmMPANLConnSVCConnectId, nvmMPANLConnSVCEntry=nvmMPANLConnSVCEntry, nvmFrConnectConnectId=nvmFrConnectConnectId, nvmMPANLConnSVCDiscardPriority=nvmMPANLConnSVCDiscardPriority, mcmFrConnectSwitchType=mcmFrConnectSwitchType, nvmFrServiceParamRxBc=nvmFrServiceParamRxBc, nvmMPANLConnSVCMinRxThroughput=nvmMPANLConnSVCMinRxThroughput, nvmFrConnectDNARemote=nvmFrConnectDNARemote, nvmFrConnSVCDNA=nvmFrConnSVCDNA, mcmMPANLConnSVCMaxRxThroughput=mcmMPANLConnSVCMaxRxThroughput, mcmFrServiceParamTxBc=mcmFrServiceParamTxBc, mcmFrConnectConnectId=mcmFrConnectConnectId, mcmFrConnSVCMaxTxSize=mcmFrConnSVCMaxTxSize, mcmFrConnectDLCIRemote=mcmFrConnectDLCIRemote, nvmMPANLConnSVCMaxTxSize=nvmMPANLConnSVCMaxTxSize, mcmFrConnectIfIndexLocal=mcmFrConnectIfIndexLocal, mcmFrServiceParamTxBe=mcmFrServiceParamTxBe, nvmFrConnSVCExcessTxBurstSize=nvmFrConnSVCExcessTxBurstSize, nvmFrServiceParamEntry=nvmFrServiceParamEntry, mcmFrConnectEntry=mcmFrConnectEntry, nvmFrServiceParamTxMTU=nvmFrServiceParamTxMTU, mcmFrServiceParamTxMTU=mcmFrServiceParamTxMTU, nvmMPANLConnSVCTable=nvmMPANLConnSVCTable, nvmFrConnSVCMaxRxBurstSize=nvmFrConnSVCMaxRxBurstSize, nvmMPANLConnSVCSetupPriority=nvmMPANLConnSVCSetupPriority, mcmFrServiceParamRxMTU=mcmFrServiceParamRxMTU, mcmFrConnSVCMaxTxThroughput=mcmFrConnSVCMaxTxThroughput, mcmFrServiceParamEntry=mcmFrServiceParamEntry, mcmMPANLConnSVCDLCI=mcmMPANLConnSVCDLCI, nvmFrConnSVCTable=nvmFrConnSVCTable, nvmFrConnSVCExcessRxBurstSize=nvmFrConnSVCExcessRxBurstSize, mcmMPANLConnSVCMaxTxThroughput=mcmMPANLConnSVCMaxTxThroughput, nvmFrConnSVCIfIndex=nvmFrConnSVCIfIndex, nvmFrServiceParamDelta=nvmFrServiceParamDelta, mcmFrPvcLmiLinkUp=mcmFrPvcLmiLinkUp, nvmMPANLConnSVCMaxRxSize=nvmMPANLConnSVCMaxRxSize, nvmFrConnSVCEntry=nvmFrConnSVCEntry, mcmFrServiceParamIfIndex=mcmFrServiceParamIfIndex, nvmMPANLConnSVCMaxRxBurstSize=nvmMPANLConnSVCMaxRxBurstSize, mcmMPANLConnSVCTable=mcmMPANLConnSVCTable, mcmFrConnSVCDLCI=mcmFrConnSVCDLCI, mcmFrServiceParamTxThroughput=mcmFrServiceParamTxThroughput, mcmFrConnSVCMaxRxBurstSize=mcmFrConnSVCMaxRxBurstSize, mcmFrConnectDisconnectReason=mcmFrConnectDisconnectReason, mcmFrConnSVCExcessRxBurstSize=mcmFrConnSVCExcessRxBurstSize, nvmFrConnSVCMaxTxBurstSize=nvmFrConnSVCMaxTxBurstSize, nvmFrConnSVCMaxTxThroughput=nvmFrConnSVCMaxTxThroughput, mcmFrConnSVCReasonForDisconnect=mcmFrConnSVCReasonForDisconnect, mcmMPANLConnSVCMaxRxBurstSize=mcmMPANLConnSVCMaxRxBurstSize, mcmFrConnSVCIfIndex=mcmFrConnSVCIfIndex, mcmFrConnSVCMaxTxBurstSize=mcmFrConnSVCMaxTxBurstSize, mcmFrServiceParamFlowControl=mcmFrServiceParamFlowControl, nvmFrServiceParamFlowControl=nvmFrServiceParamFlowControl, mcmFrConnSVCEntry=mcmFrConnSVCEntry, mcmFrServiceParamDelta=mcmFrServiceParamDelta, nvmFrConnSVCConnectId=nvmFrConnSVCConnectId, mcmMPANLConnSVCHoldingPriority=mcmMPANLConnSVCHoldingPriority, mcmFrConnectTable=mcmFrConnectTable, mcmMPANLConnSVCSetupPriority=mcmMPANLConnSVCSetupPriority, nvmMPANLConnSVCTransferPriority=nvmMPANLConnSVCTransferPriority, nvmFrConnectConnType=nvmFrConnectConnType, nvmFrServiceParamTxThroughput=nvmFrServiceParamTxThroughput, nvmMPANLConnSVCMaxRxThroughput=nvmMPANLConnSVCMaxRxThroughput, nvmFrServiceParamRxThroughput=nvmFrServiceParamRxThroughput, mcmFrConnectIfIndexSVC=mcmFrConnectIfIndexSVC, nvmMPANLConnSVCMaxTxThroughput=nvmMPANLConnSVCMaxTxThroughput, micom_frdce=micom_frdce, nvmFrConnectIfIndexLocal=nvmFrConnectIfIndexLocal, mcmMPANLConnSVCMaxTxSize=mcmMPANLConnSVCMaxTxSize, nvmFrConnSVCMaxRxThroughput=nvmFrConnSVCMaxRxThroughput, mcmFrConnectSVCState=mcmFrConnectSVCState, nvmFrConnectIfIndexSVC=nvmFrConnectIfIndexSVC, nvmFrConnSVCMinTxThroughput=nvmFrConnSVCMinTxThroughput, nvmFrServiceParamRxBe=nvmFrServiceParamRxBe, mcmFrServiceParamRxThroughput=mcmFrServiceParamRxThroughput, nvmMPANLConnSVCDNA=nvmMPANLConnSVCDNA, mcmFrServiceParamConsecutiveFrames=mcmFrServiceParamConsecutiveFrames, nvmFrConnSVCMinRxThroughput=nvmFrConnSVCMinRxThroughput, nvmFrConnSVCMaxRxSize=nvmFrConnSVCMaxRxSize, nvmFrServiceParamRateEnf=nvmFrServiceParamRateEnf, mcmFrServiceParamRxBc=mcmFrServiceParamRxBc, nvmFrConnectTable=nvmFrConnectTable, nvmFrConnectDLCIRemote=nvmFrConnectDLCIRemote, mcmMPANLConnSVCTransferPriority=mcmMPANLConnSVCTransferPriority, mcmFrServiceParamRxBe=mcmFrServiceParamRxBe, mcmFrConnSVCTransferPriority=mcmFrConnSVCTransferPriority, nvmFrConnectSwitchType=nvmFrConnectSwitchType, mcmFrConnSVCMinRxThroughput=mcmFrConnSVCMinRxThroughput, mcmFrPvcLmiLinkDown=mcmFrPvcLmiLinkDown, mcmFrConnSVCTable=mcmFrConnSVCTable, nvmFrConnectIfIndexRemote=nvmFrConnectIfIndexRemote, nvmFrServiceParamTable=nvmFrServiceParamTable, nvmFrServiceParamTxBc=nvmFrServiceParamTxBc, frdce_configuration=frdce_configuration, mcmFrConnectDLCILocal=mcmFrConnectDLCILocal, mcmMPANLConnSVCMaxTxBurstSize=mcmMPANLConnSVCMaxTxBurstSize, mcmFrConnectLastChange=mcmFrConnectLastChange, mcmFrConnSVCConnectId=mcmFrConnSVCConnectId, nvmFrConnSVCMaxTxSize=nvmFrConnSVCMaxTxSize, mcmMPANLConnSVCConnectId=mcmMPANLConnSVCConnectId, mcmMPANLConnSVCReasonForDisconnect=mcmMPANLConnSVCReasonForDisconnect, nvmFrConnectEntry=nvmFrConnectEntry, nvmMPANLConnSVCExcessTxBurstSize=nvmMPANLConnSVCExcessTxBurstSize, nvmFrConnSVCTransferPriority=nvmFrConnSVCTransferPriority, mcmMPANLConnSVCMinRxThroughput=mcmMPANLConnSVCMinRxThroughput, mcmFrServiceParamRateEnf=mcmFrServiceParamRateEnf, mcmMPANLConnSVCExcessRxBurstSize=mcmMPANLConnSVCExcessRxBurstSize, nvmMPANLConnSVCMinTxThroughput=nvmMPANLConnSVCMinTxThroughput, mcmFrConnectSVCDLCI=mcmFrConnectSVCDLCI, mcmFrServiceParamPVCLMIStatus=mcmFrServiceParamPVCLMIStatus, mcmFrConnSVCMinTxThroughput=mcmFrConnSVCMinTxThroughput, mcmMPANLConnSVCIfindex=mcmMPANLConnSVCIfindex, nvmFrServiceParamRxMTU=nvmFrServiceParamRxMTU, mcmMPANLConnSVCMinTxThroughput=mcmMPANLConnSVCMinTxThroughput, nvmFrServiceParamTxBe=nvmFrServiceParamTxBe, mcmFrConnectIfIndexRemote=mcmFrConnectIfIndexRemote, mcmFrConnSVCMaxRxThroughput=mcmFrConnSVCMaxRxThroughput, mcmMPANLConnSVCMaxRxSize=mcmMPANLConnSVCMaxRxSize, nvmMPANLConnSVCMaxTxBurstSize=nvmMPANLConnSVCMaxTxBurstSize, nvmMPANLConnSVCHoldingPriority=nvmMPANLConnSVCHoldingPriority, mcmFrConnSVCDNA=mcmFrConnSVCDNA)
