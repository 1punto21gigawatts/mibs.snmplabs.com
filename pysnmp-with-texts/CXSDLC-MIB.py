#
# PySNMP MIB module CXSDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXSDLC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
Alias, cxSDLC, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxSDLC", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Unsigned32, ModuleIdentity, TimeTicks, MibIdentifier, NotificationType, ObjectIdentity, Counter64, Integer32, Bits, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Unsigned32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "ObjectIdentity", "Counter64", "Integer32", "Bits", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class CuAddress(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 254)

sdlcSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1), )
if mibBuilder.loadTexts: sdlcSapTable.setReference('Memotec Communications Inc.')
if mibBuilder.loadTexts: sdlcSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapTable.setDescription('This table contains configuration information that is used to manage the SDLC interface. Each row in the table defines either an upper or lower SAP (service access point). SAPs permit SDLC to communicate with layers above (always SNALC) and below it in the protocol stack. The maximum number of rows in the table is limited by sdlcSapNumber, which is an integer in the range 1 to 8. Since SDLC upper and lower SAPs have a one-to-one relationship, this makes 4 upper and 4 lower SAPs available. Each pair control one physical SLDC link (via the BOP). The SLDC interface has two modes of operation: TIU (terminal interface unit) and HIU (host interface unit). - TIU mode is used when the SDLC SAP is connected to one or more SNA control units (secondary link stations) and their supported terminals. It emulates a primary link station. - HIU mode is used when the SLDC SAP is connected to a host. It communicates across a WAN link with the TIU, and locally with the host via SDLC. In communications with the host it emulates the control units (secondary link stations) connected to the TIU. The SDLC interface supports connections with a maximum of 64 link stations. These can be distributed in any combination across the supported physical links.')
sdlcSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1), ).setIndexNames((0, "CXSDLC-MIB", "sdlcSapNumber"))
if mibBuilder.loadTexts: sdlcSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapEntry.setDescription('Defines a row in the sdlcSapTable. Each row contains the objects which are used to define a service access point.')
sdlcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapNumber.setDescription('Identifies a SAP (service access point) in the sdlcSapTable. The table supports 8 SAPs. Numbers 1 to 4 are lower SAPs, and numbers 4 to 8 are upper SAPs. ')
sdlcSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Configuration Changed: administrative and operative')
sdlcSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapType.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapType.setDescription("Determines the SAP (service access point) type: - 'lower' identifies a SAP leading to a physical SDLC port. This SAP must be bound to an upper BOP SAP. - 'upper' identifies a SAP acting as an internal inter-layer logical port. This SAP must be bound to a lower SNA Link Conversion SAP. Configuration Changed: administrative")
sdlcSapCuType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminalInterfaceUnit", 1), ("hostInterfaceUnit", 2))).clone('terminalInterfaceUnit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapCuType.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapCuType.setDescription('Determines the SAP type: HIU or TIU. Options: terminalInterfaceUnit (1): The SAP type is a TIU, which means it is connected to one or more control units (secondary link stations). The TIU emulates a primary link station, which polls the attached control units. The SDLC interface can support a total of 64 control units across all TIU SAPs. hostInterfaceUnit (2): The SAP type is an HIU, which means it is connected to an SNA host (primary link station). The HIU emulates the control units connected to a TIU. It responds to polls issued by the host. Default Value: terminalInterfaceUnit (1) Configuration Changed: administrative')
sdlcSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapAlias.setDescription('The textual name that identifies this SAP (service access point). Names must be unique for all SDLC SAPs. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
sdlcSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 6), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapCompanionAlias.setDescription('The textual name of the BOP SAP that binds with this SDLC SAP. Names must be unique for each service access point. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
sdlcSapSnalcRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapSnalcRef.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapSnalcRef.setDescription('This object applies only to lower SAPs (service access points). It indicates the sdlcSapNumber of the upper SDLC SAP that is associated with this lower SAP. Range of Values: 1 - 8 Default Value: none Configuration Changed: administrative')
sdlcSapDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullduplex", 1), ("halfduplex", 2))).clone('fullduplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapDuplex.setDescription('This object applies only to lower SAPs (service access points). It determines if the SAP operates in full-duplex or half-duplex mode. Range of Values: fullduplex (1): The SAP operates in full duplex mode, allowing data to be transmitted is both directions at the same time (two-way simultaneous transmission). On the link, RTS is raised when DTR is raised. halfduplex (2): The SAP operates in half duplex mode, allowing data to be transmitted in both directions, but not at the same time (two-way alternate transmission). On the link, RTS is raised during transmission and dropped during reception. Default Value: fullduplex (1) Configuration Changed: administrative and operative')
sdlcSapRaiseDtrOnConnectReq = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapRaiseDtrOnConnectReq.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapRaiseDtrOnConnectReq.setDescription('Determines when the DTR signal is raised on the port connected to the SAP. Options: no (1): DTR is raised whether or not a connection request is received from the SNA link conversion layer. yes (2): When a connection request is received from the SNA link conversion layer, DTR is raised on the physical port the SAP is connected to. Default Value: no (1) Configuration Changed: administrative and operative')
sdlcPollIntAfterAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPollIntAfterAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPollIntAfterAckTimer.setDescription('This object applies only to a service access point functioning as a TIU. Determines the length of time allowed to elapse between the reception of an acknowledgment to a poll and the transmission of the next poll. Certain control units require a delay in order to successfully respond to polls. Since multiple SDLC logical links may share the same SAP (i.e., multiple control units communicating on the same physical link), this timer applies globally to all logical links using this SAP. Range of Values: 1 - 250 (in tenths of a second), a value of 0 disables the timer Default Value: 0 Related Object: sdlcSapCuType Configuration Changed: administrative and operative')
sdlcSapLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standard", 1), ("negotiable", 2), ("switched", 3), ("switched-negotiable", 4))).clone('negotiable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcSapLineType.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapLineType.setDescription('Determines the type of SDLC line supported by this SAP (service access point). When using an HIU and TIU in tandem, the settings for this object on both must match. Options: standard (1): Allows multiple CUs to be defined for this SAP. All frames received from attached devices must include the appropriate CU address. The general address (0xFF) is not supported. A standard line is also non negotiable. negotiable (2): Allows the CX900 to receive an XID without sending a poll to the attached device. The initial address of the XID coming from the device cannot be the general poll (0xFF). A negotiable line can support more than one device. switched (3): Allows the CX900 to receive an XID using the general poll address (0xFF). A switched line is not negotiable and can only support one attached device. switched-negotiable (4): Allows the CX900 to receive an XID using the general poll address (0xFF). The line is also negotiable and can only support one attached device per port. Default Value: negotiable (2) Configuration Changed: administrative and operative')
sdlcSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sdlcSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapControl.setDescription('Clears all statistics for this service access point. Options: clearStats (1): Clear statistics. Default Value: none Configuration Changed: administrative and operative')
sdlcSapOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapOperationalMode.setDescription('Indicates the state of this SAP (service access point). Options: offLine (1): Indicates that this SAP is not operational. onLine (2): Indicates that this SAP is operational.')
sdlcSapLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapLinkStatus.setDescription('Indicates the physical state of this SAP (service access point) with respect to its associated BOP SAP (sdlcSapCompanionAlias). Options: down (1): Indicates that this SAP is not operational. up (2): Indicates that this SAP is operational.')
sdlcSapLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapLinkChange.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapLinkChange.setDescription('Indicates the number of times that the physical link has been brought up.')
sdlcSapTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapTxDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapTxDataFrames.setDescription('Indicates the number of information frames sent by this SAP (service access point).')
sdlcSapRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapRxDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapRxDataFrames.setDescription('Indicates the number of information frames received by this SAP (service access point).')
sdlcSapConnectRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapConnectRequest.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapConnectRequest.setDescription('Indicates the number of connection requests generated by the SNA Link Conversion layer.')
sdlcSapDisconnectRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapDisconnectRequest.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapDisconnectRequest.setDescription('Indicates the number of connection clears generated by the SNA Link Conversion layer.')
sdlcSapDisconnectIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcSapDisconnectIndication.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcSapDisconnectIndication.setDescription('Indicates the number of connection clears sent to the SNA Link Conversion layer.')
sdlcCuTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2), )
if mibBuilder.loadTexts: sdlcCuTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuTable.setDescription('This table contains configuration for the control units associated with SDLC SAPs. Each row identifies one control unit.')
sdlcCuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1), ).setIndexNames((0, "CXSDLC-MIB", "sdlcCuSap"), (0, "CXSDLC-MIB", "sdlcCuId"))
if mibBuilder.loadTexts: sdlcCuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuEntry.setDescription('Defines a row in the sdlcCuTable. Each row contains the objects which define one control unit (link station). Up to 64 link stations are supported across all SAPs. If the row is associated with a TIU SAP, then it defines the parameters used to communicate with an actual control unit (secondary link station). If the row is associated with an HIU SAP, then it defines the parameters for an emulated control unit. This must match a companion definition on a TIU SAP. ')
sdlcCuSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuSap.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuSap.setDescription('Determines the sdlcSapNumber of the SAP (service access point) this row (control unit) is associated with. More than one secondary link station can be associated with a particular sdlcSapNumber. Default Value: none Configuration Changed: administrative ')
sdlcCuId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 2), CuAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuId.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuId.setDescription('Determines the address of the control unit associated with this SAP. If this SAP is a TIU, it defines the address of the physical control unit attached to the SAP. If this SAP is an HIU, it defines the address of an emulated control unit. Note that the value of this object is decimal, but control units may specify this value in hexadecimal. Range of Values: 1 - 254 Default Value: none Configuration Changed: administrative')
sdlcCuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is flagged, after next reset the values will be disabled and the row will be deleted from the table. valid (2): Values are enabled. Configuration Changed: administrative and operative')
sdlcCuMaxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(521)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuMaxFrameLength.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuMaxFrameLength.setDescription('Determines the largest frame that can be sent and received by this control unit. The value of this object must match the setting on the host or control unit the SAP is communicating with. Known as MAXDATA, maximum I- Frame size, or maximum BTU length, depending on the SNA device. Range of Values: 1 - 4096 bytes Default Value: 521 bytes Configuration Changed: administrative and operative')
sdlcCuTransmitWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuTransmitWindow.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuTransmitWindow.setDescription('Determines the maximum number of information frames that can be outstanding at any given time. A frame is considered to be outstanding until the remote device (control unit or host) acknowledges its receipt. Range of Values: 1 - 7 Default Value: 7 Configuration Changed: administrative and operative')
sdlcCuPollRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuPollRetry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuPollRetry.setDescription('This object applies only if this entry is associated with a TIU service access point. Determines the number of times an unacknowledged poll is retransmitted. A poll is retransmitted if an acknowledgment has not been received from the control unit before the sdlcCuPollAckTimer expires. Range of Values: 1 - 50 Default Value: 3 Related Objects: sdlcCuPollAckTimer Configuration Changed: administrative and operative')
sdlcCuMaxRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuMaxRetry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuMaxRetry.setDescription('This object applies only if this entry is associated with a TIU service access point. Determines the number of times an unacknowledged DISC, SNRM, or XID is retransmitted during slow polling. A poll is retransmitted if an acknowledgment has not been received from the control unit before the sdlcCuSlowPollTimer expires. This timer is reset each time a DISC, SNRM, or XID is transmitted. When this counter is exceeded, the link with this control unit is abandoned and a connection cleared message is forwarded to the SNA link conversion layer. Range of Values: 1 - 50 Default Value: 3 Related Objects: sdlcCuPollAckTimer Configuration Changed: administrative and operative')
sdlcCuWaitForNextSnrmOrXid = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuWaitForNextSnrmOrXid.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuWaitForNextSnrmOrXid.setDescription('This object applies only if this entry is associated with an HIU service access point. Determines what the HIU does when it receives a UA or XID response from the control unit (on the TIU side of the link). Options: no (1): The HIU sends the UA or XID response to the host immediately. yes (2): The HIU holds the UA or XID response until the host repeats the original poll. This is used in cases where the delay on the link between the HIU and TIU can cause the host to time out. Default Value: no (1) Configuration Changed: administrative and operative')
sdlcCuSendDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuSendDisconnect.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuSendDisconnect.setDescription('Determines the command that is sent to disconnect the control unit. Options: no (1): A SNRM is sent to disconnect the control unit. yes (2): If entry is associated with a TIU SAP, it sends a DISC to the control unit (secondary link station). If entry is associated with an HIU SAP, it sends a DM to the host. Default Value: yes (2) Configuration Changed: administrative and operative')
sdlcCuPollAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 10), TimeTicks().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuPollAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuPollAckTimer.setDescription('This object applies only if this entry is associated with a TIU service access point. Defines the amount of time the TIU waits for the control unit (secondary link station) to acknowledge a poll. If no response is received before this timer expires, then the poll is retransmitted. The object sdlcCuPollRetry determines how many times the TIU retransmits a poll. If the poll was a SNRM, XID, or DISC, then the first time this timer expires, the sldcCuSlowPollTimer is started, and the TIU slow polls the control unit. Range of Values: 1 - 250 (in tenths of a second), a value of 0 disables the timer Default Value: 20 (2 seconds) Related Objects: sdlcCuPollRetry sldcCuSlowPollTimer Configuration Changed: administrative and operative')
sdlcCuSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 11), TimeTicks().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuSlowPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuSlowPollTimer.setDescription('This object applies only if this entry is associated with a TIU service access point. Determines the amount of time the TIU waits for the control unit (secondary link station) to respond to a SNRM poll during slow polling. Each time this timer expires another poll is sent. The object sdlcCuMaxRetry determines how many slow polls are transmitted. The TIU begins slow polling if the sdlcCuPollAckTimer timer expires before the control unit has responded to the initial SNRM, XID, or DISC poll. Range of Values: 1 - 250 tenths of a second (a value of 0 disables the timer) Default Value: 10 (1 second) Related Objects: sdlcCuPollAckTimer sdlcCuMaxRetry Configuration Changed: administrative and operative')
sdlcCuWaitForUaFromSnalcTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcCuWaitForUaFromSnalcTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuWaitForUaFromSnalcTimer.setDescription('If this entry is associated with an HIU SAP (service access point), it determines the maximum amount of time that the HIU waits for a response to a SNRM or DISC sent to the TIU. This is used to control link setup across the WAN between the HIU and TIU. When this timer expires, the link is dropped. Set the minimum value of this timer as follows: = p + sdlcCuPollAckTimer + (sdlcCuSlowPollTimer * n) Where: p: is the propagation delay on the WAN link n: is the number of slow polls you want to wait for. If this entry is associated with a TIU SAP, it determines the maximum amount of time that the TIU waits for a response to a DISC sent to the HIU. When this timer expires, the link is dropped. At a minimum this timer should be set greater than the propagation delay on the link. Range of Values: 1 - 250 tenths of a second (a value of 0 disables the timer) Default Value: 0 Configuration Changed: administrative and operative')
sdlcCuControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sdlcCuControl.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuControl.setDescription('Clears all statistics for this control unit. Default Value: none Options: clearStats (1): Clear statistics. Configuration Changed: administrative and operative')
sdlcCuState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("normalDiscMode", 1), ("waitForSnrm", 2), ("receivedSnrm", 3), ("normalResponseMode", 4), ("waitForDisc", 5), ("receivedDisc", 6), ("snrmSent", 7), ("discSent", 8), ("remoteDiscReceived", 9), ("xidExchange", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuState.setDescription('Indicates the current status of the control unit. Options: normalDiscMode (1): This control unit is in Normal Disconnected Mode waitForSnrm (2): This control unit (associated with an HIU SAP) is waiting for a SNRM from the host. receivedSnrm (3): This control unit (associated with an HIU SAP) has received a SNRM from the host. normalResponseMode (4): The control unit is in Normal Response Mode. waitForDisc (5): This control unit (associated with an HIU SAP) is waiting for a DISC from the host. receivedDisc (6): This control unit (associated with an HIU SAP) has received a DISC from the host. snrmSent (7): A SNRM has been sent to this control unit. discSent (8): A DISC has been sent to the companion control unit on the HIU. remoteDiscReceived (9): This control unit has received a (remote) DISC from its companion control unit on the TIU. xidExchange (10): The TIU received an XID poll from the HIU for this control unit.')
sdlcCuOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuOperationalMode.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuOperationalMode.setDescription('Indicates the state of this control unit. Options: offLine (1): Indicates that this control unit is not operational. onLine (2): Indicates that this control unit is operational.')
sdlcCuDiscReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuDiscReasonCode.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuDiscReasonCode.setDescription('Provides the reason code which indicates why this SLDC control unit was disconnected.')
sdlcCuSnalcDiscReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuSnalcDiscReasonCode.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuSnalcDiscReasonCode.setDescription('Provides the reason code which indicates why the SNA Link Conversion layer disconnected this SLDC control unit.')
sdlcCuConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuConnectionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuConnectionStatus.setDescription('Indicates the state of the SNA link convergence connection for this control unit. Options: up (1): Indicates that the SNA link convergence connection is operational. down (2): Indicates that SNA link convergence link layer connection is not operational.')
sdlcCuFramesInTransmitQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuFramesInTransmitQueue.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuFramesInTransmitQueue.setDescription('Indicates the number of frames currently in the transmit queue for this control unit. The number of frames should be less than sdlcCuTransmitWindow. If not, there may be a problem with the link.')
sdlcCuTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuTxFrames.setDescription('If associated with a TIU service access point, this object indicates the number of information frames transmitted to this control unit. If associated with an HIU service access point, this object indicates the number of information frames transmitted to the host by this emulated control unit. ')
sdlcCuRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuRxFrames.setDescription('If associated with a TIU service access point, this object indicates the number of information frames received from this control unit. If associated with an HIU service access point, this object indicates the number of information frames received from the host by this emulated control unit. ')
sdlcCuTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuTimeOuts.setDescription('This object applies only if this entry is associated with a TIU service access point. Indicates the number of times the sdlcCuPollAckTimer and the sdlcCuSlowPollTimer have expired.')
sdlcCuSnrmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuSnrmCount.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuSnrmCount.setDescription('If associated with a TIU service access point, this object indicates the number of SNRM frames transmitted to this control unit. If associated with an HIU service access point, this object indicates the number of SNRM frames received from the host by this emulated control unit. ')
sdlcCuXidCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuXidCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuXidCommand.setDescription('If associated with a TIU service access point, this object indicates the number of XID frames transmitted to this control unit. If associated with an HIU service access point, this object indicates the number of XID frames received from the host by this emulated control unit.')
sdlcCuXidResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuXidResponse.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuXidResponse.setDescription('If associated with a TIU service access point, this object indicates the number of SNRM frames transmitted to this control unit. If associated with an HIU service access point, this object indicates the number of SNRM frames received from the host by this emulated control unit. ')
sdlcCuUnnumberedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuUnnumberedAcks.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuUnnumberedAcks.setDescription('If associated with a TIU service access point, this object indicates the number of UA responses received from this control unit. If associated with an HIU service access point, this object indicates the number of UA responses transmitted to the host by this emulated control unit. ')
sdlcCuRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuRetransmission.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuRetransmission.setDescription('If associated with a TIU service access point, this object indicates the number of information frames retransmitted to this control unit. If associated with an HIU service access point, this object indicates the number of information frames retransmitted to the host by this emulated control unit. ')
sdlcCuDisconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuDisconnectCount.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuDisconnectCount.setDescription('If associated with a TIU service access point, this object indicates the number of DISC commands transmitted to this control unit. If associated with an HIU service access point, this object indicates the number of DISC commands received from the host by this emulated control unit. ')
sdlcCuDisconnectModeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuDisconnectModeCount.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuDisconnectModeCount.setDescription('This object applies only if this entry is associated with a TIU service access point. Indicates the total number of DM (disconnect mode) response frames received from this control unit.')
sdlcCuTransmittedRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuTransmittedRNR.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuTransmittedRNR.setDescription('If associated with a TIU service access point, this object indicates the number of RNR frames transmitted to this control unit. If associated with an HIU service access point, this object indicates the number of RNR frames transmitted to the host by this emulated control unit. ')
sdlcCuReceivedRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuReceivedRNR.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuReceivedRNR.setDescription('If associated with a TIU service access point, this object indicates the number of RNR frames received from this control unit. If associated with an HIU service access point, this object indicates the number of RNR frames received from the host by this emulated control unit. ')
sdlcCuFrameRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuFrameRejects.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuFrameRejects.setDescription('If associated with a TIU service access point, this object indicates the number of FRMR response commands received from this control unit. If associated with an HIU service access point, this object indicates the number of FRMR response commands transmitted to the host by this emulated control unit. ')
sdlcCuRemoteDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuRemoteDisc.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuRemoteDisc.setDescription('This object applies only if this entry is associated with an TIU service access point. Indicates the number of DISC frames transmitted by this control unit.')
sdlcCuConnectionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuConnectionRequest.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuConnectionRequest.setDescription('Indicates the number of connections requested by the SNA link conversion layer for this control unit.')
sdlcCuDisconnectionRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuDisconnectionRequest.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuDisconnectionRequest.setDescription('Indicates the number of connection clear requests sent by the SNA link conversion layer for this control unit.')
sdlcCuDisconnectionIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 37, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcCuDisconnectionIndication.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcCuDisconnectionIndication.setDescription('Indicates the number of connection cleared messages sent to the SNA link conversion layer for this control unit.')
mibBuilder.exportSymbols("CXSDLC-MIB", sdlcCuTxFrames=sdlcCuTxFrames, sdlcCuReceivedRNR=sdlcCuReceivedRNR, sdlcCuWaitForNextSnrmOrXid=sdlcCuWaitForNextSnrmOrXid, sdlcCuWaitForUaFromSnalcTimer=sdlcCuWaitForUaFromSnalcTimer, CuAddress=CuAddress, sdlcSapCuType=sdlcSapCuType, sdlcSapAlias=sdlcSapAlias, sdlcSapLinkStatus=sdlcSapLinkStatus, sdlcCuConnectionRequest=sdlcCuConnectionRequest, sdlcCuDisconnectionIndication=sdlcCuDisconnectionIndication, sdlcSapRaiseDtrOnConnectReq=sdlcSapRaiseDtrOnConnectReq, sdlcSapDuplex=sdlcSapDuplex, sdlcSapOperationalMode=sdlcSapOperationalMode, sdlcSapTable=sdlcSapTable, sdlcSapRowStatus=sdlcSapRowStatus, sdlcSapEntry=sdlcSapEntry, sdlcCuTransmittedRNR=sdlcCuTransmittedRNR, sdlcCuRemoteDisc=sdlcCuRemoteDisc, sdlcCuUnnumberedAcks=sdlcCuUnnumberedAcks, sdlcCuFrameRejects=sdlcCuFrameRejects, sdlcSapConnectRequest=sdlcSapConnectRequest, sdlcCuId=sdlcCuId, sdlcSapCompanionAlias=sdlcSapCompanionAlias, sdlcCuOperationalMode=sdlcCuOperationalMode, sdlcCuTable=sdlcCuTable, sdlcSapNumber=sdlcSapNumber, sdlcSapLineType=sdlcSapLineType, sdlcCuControl=sdlcCuControl, sdlcCuSendDisconnect=sdlcCuSendDisconnect, sdlcCuFramesInTransmitQueue=sdlcCuFramesInTransmitQueue, sdlcSapDisconnectIndication=sdlcSapDisconnectIndication, sdlcCuState=sdlcCuState, sdlcCuConnectionStatus=sdlcCuConnectionStatus, sdlcSapTxDataFrames=sdlcSapTxDataFrames, sdlcCuPollRetry=sdlcCuPollRetry, sdlcCuSnalcDiscReasonCode=sdlcCuSnalcDiscReasonCode, sdlcSapLinkChange=sdlcSapLinkChange, sdlcCuDiscReasonCode=sdlcCuDiscReasonCode, sdlcCuDisconnectCount=sdlcCuDisconnectCount, sdlcSapSnalcRef=sdlcSapSnalcRef, sdlcCuRowStatus=sdlcCuRowStatus, sdlcPollIntAfterAckTimer=sdlcPollIntAfterAckTimer, sdlcCuPollAckTimer=sdlcCuPollAckTimer, sdlcSapControl=sdlcSapControl, sdlcSapType=sdlcSapType, sdlcCuSap=sdlcCuSap, sdlcCuDisconnectionRequest=sdlcCuDisconnectionRequest, sdlcCuRetransmission=sdlcCuRetransmission, sdlcCuMaxRetry=sdlcCuMaxRetry, sdlcCuDisconnectModeCount=sdlcCuDisconnectModeCount, sdlcCuTransmitWindow=sdlcCuTransmitWindow, sdlcCuSnrmCount=sdlcCuSnrmCount, sdlcCuMaxFrameLength=sdlcCuMaxFrameLength, sdlcSapDisconnectRequest=sdlcSapDisconnectRequest, sdlcCuRxFrames=sdlcCuRxFrames, sdlcCuXidCommand=sdlcCuXidCommand, sdlcSapRxDataFrames=sdlcSapRxDataFrames, sdlcCuTimeOuts=sdlcCuTimeOuts, sdlcCuXidResponse=sdlcCuXidResponse, sdlcCuEntry=sdlcCuEntry, sdlcCuSlowPollTimer=sdlcCuSlowPollTimer)
