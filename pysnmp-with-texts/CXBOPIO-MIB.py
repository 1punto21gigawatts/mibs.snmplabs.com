#
# PySNMP MIB module CXBOPIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXBOPIO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cxBOPIO, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxBOPIO", "Alias")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, Bits, iso, NotificationType, TimeTicks, MibIdentifier, ModuleIdentity, Counter32, NotificationType, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Bits", "iso", "NotificationType", "TimeTicks", "MibIdentifier", "ModuleIdentity", "Counter32", "NotificationType", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bopSapOprTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1), )
if mibBuilder.loadTexts: bopSapOprTable.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprTable.setDescription('A table containing the current configuration information about each BOP/COP port.')
bopSapOprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1), ).setIndexNames((0, "CXBOPIO-MIB", "bopSapOprNumber"))
if mibBuilder.loadTexts: bopSapOprEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprEntry.setDescription('The configuration information for a specific BOP/COP port.')
bopSapOprNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprNumber.setDescription('Defines the SAP ID using 2,3 or 4 digits. The first digit (A) is the slot #, the second digit (B) is the port #, and the remaining digits (CD) are the channel #. If a 2 digit number is entered, digits CD are assumed to be 0 and are inserted automatically when reading object. If a 3 digit number is entered, digit C is assumed to be 0 and is inserted automatically when reading object. Ranges of Values for A: 1-7 for CX900, 1-4 for CX1000 Ranges of Values for B: 1-5 for CX900, 1-4 for CX1000 Ranges of Values for CD: 00-30 Default Value: not applicable')
bopSapOprAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 2), Alias()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprAlias.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprAlias.setDescription('Determines the active textual name uniquely identifying this port SAP. Range of Values: 0 - 16 alphanumeric characters beginning with a non-numeric character Default Value: undefined')
bopSapOprProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hdlc", 1), ("bsc3270", 2), ("borroughs", 3), ("sperry", 4), ("bsc3780", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprProtocol.setDescription('Determines if the port is HDLC or Bisync. Only HDLC is supported by ISDN and T1/E1 ports. Indicates in the operative configuration the type of bisync protocol used by the controllers of the port associated with this SAP. Options: hdlc bsc3270 = Bisync 3270 controllers borroughs = Borroughs controllers sperry = Sperry controllers bsc3780 = Bisync 2780/3780 controllers Default Value: hdlc')
bopSapOprPortClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("split", 3), ("slave", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortClockSource.setDescription('Determines the active data clock source for this port. Options: internal (1): Tx and Rx clocks are internally generated external (2): Tx and Rx clocks are externally supplied on separate pins split (3): Tx clock is internally generated and Rx clock is externally supplied slave (4): Tx and Rx clocks are externally supplied on the same pins Note: Split clocking is not supported in CX900 slots 5, 6 and 7. Default Value: external (locked to internal for ISDN)')
bopSapOprPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(375, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortSpeed.setDescription("Determines the input and output speed in bits per second for this port. Note: Meaningful only if 'bopSapOprPortClockSource' is 'internal' or 'split'. Ranges of Values: 375-2048000; limited to 1875-256000 for CX900 slots 5,6,7. Default Value: 64,000")
bopSapOprPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDuplex.setDescription('Determines whether this port is communicating simultaneously in both directions (full-duplex) or alternates between directions (half-duplex). Not applicable for ISDN and T1/E1 ports. Options: half (1): half-duplex full (2): full-duplex Default Value: full')
bopSapOprPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 9000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortMaxFrameSize.setDescription('Determines the active maximum frame size supported by this port. Ranges of Values: 32-9000 Default Value: 1,600 (512 for ISDN)')
bopSapOprPortDataEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi-mark", 2), ("nrzi-space", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortDataEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDataEncoding.setDescription("Determines the active data formatting and encoding used by this port. Options: n/a (0): object is not applicable nrz (1): NRZ (locked for ISDN 'D' channel; ISDN 'B' channel can use only this value or NRZI-Space value) nrzi-mark (2): NRZI-Mark nrzi-space (3): NRZI-Space (ISDN 'B' channel can use only this value or NRZ value) Note: CX900 Slot/port/channel 51x-71x can use only NRZ or NRZI-Space. Default Value: nrz")
bopSapOprPortIdleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flags", 1), ("marks", 2), ("as400", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortIdleCondition.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortIdleCondition.setDescription('Determines the active idle line condition supported by this port. Options: flags (1): flags marks (2): marks as400 (3): AS400 Default Value: flags')
bopSapOprPortPreAmbleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortPreAmbleLength.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortPreAmbleLength.setDescription("Determines the minimum number of flags or sync pairs that will be inserted between frames by the port's transmitter. For HDLC frames: A value of zero causes flag sharing between frames. A value of one means no flag sharing and zero flags inserted between frames. A value of two means no flag sharing and one flag inserted between frames. A value of three means no flag sharing and two flags inserted between frames. Etc. For Bisync frames: A value of zero or one causes one sync pair to be inserted between frames. A value of two causes two sync pairs to be inserted between frames. A value of three causes three sync pairs to be inserted between frames. Etc. Ranges of Values: 0 -16 Default Value: 1")
bopSapOprPortFlagSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortFlagSharing.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortFlagSharing.setDescription("Determines whether back-to-back Tx frames share opening and closing flag. This value is meaningful only if 'bopSapAdmPortPreAmbleLength' is set to zero. Options: disabled (1): back-to-back frames do not share flag enabled (2): back-to-back frames share flag Default Value: disabled")
bopSapOprPortFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortFilterMask.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortFilterMask.setDescription("Indicates which bits of the 8-bit HDLC address are being used for address filtering on this port (CX900 or USIO only). Note: When a bit is set to '1', the position of bits will be checked. When a bit is set to '0', it will not be checked. Ranges of Values: 0 - 255 Default Value: 0")
bopSapOprPortFilterAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortFilterAddress1.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortFilterAddress1.setDescription('Indicates one of four 8-bit addresses used for address filtering (CX900 or USIO only). Ranges of Values: 0 - 255 Default Value: 126')
bopSapOprPortFilterAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortFilterAddress2.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortFilterAddress2.setDescription('Indicates one of four 8-bit addresses used for address filtering (CX900 or USIO only). Ranges of Values: 0 - 255 Default Value: 126')
bopSapOprPortFilterAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortFilterAddress3.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortFilterAddress3.setDescription('Indicates one of four 8-bit addresses used for address filtering (CX900 or USIO only). Ranges of Values: 0 - 255 Default Value: 126')
bopSapOprPortFilterAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortFilterAddress4.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortFilterAddress4.setDescription('Indicates one of four 8-bit addresses used for address filtering (CX900 or USIO only). Ranges of Values: 0 - 255 Default Value: 126')
bopSapOprPortCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc-ccitt", 1), ("crc-32", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortCrc.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapOprPortCrc.setDescription("Determines which algorithm is being used for error detection. Options: crc-ccitt (1): CRC-ITU-T (uses X15+X12+X5+1 polynomial; ITU-T formerly CCITT) (locked for ISDN 'D' channel; can be selected for ISDN 'B' channel) crc-32 (2): CRC-32 (for Ethernet; uses X32+X26+X23+X22+X16+X12+X11+ X10+X8+X7+X5+X4+X2+X+1) (can be selected for ISDN 'B' channel) Default Value: crc-ccitt (1)")
bopSapOprPortDtrUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortDtrUpTimer.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDtrUpTimer.setDescription('Determines the time in seconds that the port must wait for DCD (DTR if DCE) after raising DTR (DCD if DCE) to determine if a connection can be established. This object has no meaning in ISDN connections. Note: This value will be set to zero if the port does not support an application requiring it. Ranges of Values: 0 - 65535 Default Value: 0')
bopSapOprPortTxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortTxWindow.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortTxWindow.setDescription('Determines the active maximum number of buffers that may be queued onto the port driver (for transmission) by the associated upper layer. For ISDN ports, the value is locked at 8. Ranges of Values: 1 - 255 Default Value: 255')
bopSapOprPortDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dial-in-only", 1), ("dial-out-only", 2), ("dial-in-out", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortDialMode.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDialMode.setDescription('Identifies the operation mode when setting up connections. Options: n/a (0): object is not applicable dial-in-only (1): Only accept incoming calls; Will not make any outgoing calls. dial-out-only (2): Only make outgoing calls; Will not accept any incoming calls. dial-in-out (3): Accept incoming calls and make outgoing calls. Ranges of Values: 1 - 3 Default Value: dial-in-out')
bopSapOprPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("both", 4), ("isdn-uif-uif", 5), ("isdn-uif-idl2", 6), ("isdn-uif-framer", 7), ("isdn-uif-external", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortLoopback.setDescription('Determines whether loopback is enabled and what kind of loopback is enabled. Options: n/a (0): object is not applicable none (1): Loopback is not enabled local (2): Local loopback is enabled (return outbound frames to the originating software layer without transmitting them) remote (3): Remote loopback is enabled (forces the port to return (transmit) any frame received on the line, and causes the port to deny communication with any upper layer that requests service) both (4):Both local and remote loopbacks are enabled. isdn-uif-uif (5): ISDN loopback is enabled at U-Interface (forces TB1Q signal from a remote transmitter to pass through the entire U-Interface Transceiver before being transmitted back to the remote receiver) isdn-uif-idl2 (6): ISDN loopback is enabled at IDL2 Controller (forces IDL2 Controller to take in B and D channel data on IDL RX pin and send it out on IDL2 TX pin) isdn-uif-framer (7): ISDN loopback is enabled at framer (forces B and D channel data in on D-in pin and M channel data in on SCP which together undergo framing and deframing functions before B and D channel data go out D-out pin and M channel data go out SCP) isdn-uif-external (8): ISDN loopback is enabled at external line (forces TB1Q signal coming in on D-in pin to pass through Tx Driver pins, the U-Interface circuit and Rx input pins before recovering it and sending it out the D-out pin) Default Value: none')
bopSapOprPortSignalSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortSignalSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortSignalSamplingPeriod.setDescription('Determines the active sampling period in 100 millisecond increments that this port uses to sample signals. This object has no meaning in ISDN connections. Ranges of Values: 3 - 100 Default Value: 5 Configuration Changed: operative ')
bopSapOprPortDcdDtrSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortDcdDtrSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDcdDtrSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating DCD (DTR if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1 - 30 Default Value: 3 Configuration Changed: operative ')
bopSapOprPortCtsRtsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortCtsRtsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortCtsRtsSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating CTS (RTS if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1-30 Default Value: 3 Configuration Changed: operative ')
bopSapOprPortDsrDrsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortDsrDrsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDsrDrsSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating DRS (DSR if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1 - 30 Default Value: 3 Configuration Changed: operative ')
bopSapOprPortTmLlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortTmLlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortTmLlSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating TM (LL if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1 - 30 Default Value: 3 Configuration Changed: operative ')
bopSapOprPortRiRlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortRiRlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortRiRlSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating RI (RL if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1 - 30 Default Value: 3 Configuration Changed: operative ')
bopSapOprPortStatisticsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortStatisticsTimer.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortStatisticsTimer.setDescription('Determines the active period in seconds during which BOP performance statistics are measured. Note: If set to zero, BOP performance statistics are not measured. Ranges of Values: 0 - 60 Default Value: 0')
bopSapOprPortCarrierAction = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortCarrierAction.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortCarrierAction.setDescription("Determines if the port driver informs it's associated upper layer that service is no longer available following loss of DCD if DTE, or DTR if DCE. Options: disabled (1): do not notify upper layer (locked for ISDN and T1/E1 ports) enabled (2): notify upper layer Default Value: enabled (2) Configuration Changed: operative ")
bopSapOprPortDataGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabled-verify", 3), ("retrigger", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortDataGenerator.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortDataGenerator.setDescription('Determines whether this port acts as an internal data generator. Options: n/a (0): object is not applicable disabled (1): port is not a data generator enabled (2): port is a data generator enabled-verify (3): port is a data generator and its incoming data is verified retrigger (4): port restarts data generation with defined parameters Default Value: disabled (1) Configuration Changed: operative ')
bopSapOprPortGenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortGenFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortGenFrames.setDescription('Determines the number of frames that the port configured as an internal data generator will generate at one time. Ranges of Values: 0 - 255 Note: When set to zero, frames are generated continuously Default Value: 1 Configuration Changed: operative ')
bopSapOprPortGenFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortGenFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortGenFrameSize.setDescription('Determines the size in bytes of internally generated frames (excluding flags). Ranges of Values: 2 - 65,535 Note: When set to zero, frames are sized randomly. Default Value: 128 Configuration Changed: operative ')
bopSapOprPortGenFrameHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapOprPortGenFrameHeader.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortGenFrameHeader.setDescription('Determines the 16-bit header that is inserted in the first two octets after the opening flag of each internally generated frame. Ranges of Values: 0 - 65,535 Default Value: 1 Configuration Changed: operative ')
bopSapOprPortThreshBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortThreshBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortThreshBandwidth.setDescription('Determines the value of the minimum critical bandwidth that determines whether Frame Relay should filter certain restricted types of packets or not. The value entered should be a multiple of 1 Kilo bits per second. Ranges of Values: 0 - 65,535 Default Value: 0 Configuration Changed: operative ')
bopSapOprPortActualSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(375, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprPortActualSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprPortActualSpeed.setDescription('Determines the actual calculated output speed in bits per second of the port. Ranges of Values: 375 - 2,048,000 Default Value: 0')
bopSapOprCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebcdic", 1), ("ascii", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprCodeSet.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprCodeSet.setDescription('Indicates the code used to communicate with the Bisync device. Options: (0) N/A: object is not applicable (1) EBCDIC code set (2) ASCII code set Default value: ebcdic')
bopSapOprParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("space", 4), ("mark", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapOprParity.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapOprParity.setDescription("Indicates the parity used to communicate with the Bisync device Options: (0) N/A: Object is not applicable (1) none: No parity (2) odd: Odd parity (3) even: Even parity (4) space: Low parity (always 0's) (5) mark: High parity (always 1's) Default value: none")
bopOprPortTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopOprPortTrap.setStatus('mandatory')
if mibBuilder.loadTexts: bopOprPortTrap.setDescription("Determines whether this port produces a 'bopPortStatusChange' trap which can be retrieved by SNMP network management. Options: disabled (1): do not produce port status trap enabled (2): produce port status trap Default Value: disabled (1) Configuration Changed: operative ")
bopOprTxClockTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopOprTxClockTrap.setStatus('mandatory')
if mibBuilder.loadTexts: bopOprTxClockTrap.setDescription("Determines whether this port produces a 'bopTxClockStatusChange' trap which can be retrieved by SNMP network management. Options: disabled (1): do not produce transmit clock status trap enabled (2): produce transmit clock status trap Default Value: disabled (1) Configuration Changed: operative ")
bopOprControlLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceDown", 1), ("forceUp", 2), ("forceReset", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bopOprControlLine.setStatus('mandatory')
if mibBuilder.loadTexts: bopOprControlLine.setDescription("Controls the state of the port. Options: forceDown (1): forces the port into a 'down' state forceUp (2): forces the port into an 'up' state forceReset (3): forces a reset of the port Default Value: none")
bopOprControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearSapStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: bopOprControlStats.setStatus('mandatory')
if mibBuilder.loadTexts: bopOprControlStats.setDescription('Specifies that port statistics are to be cleared. Options: clearSapStats (1): clears port statistics Default Value: none')
bopStatOprPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprPortType.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprPortType.setDescription('Indicates the type of hardware strapping for the port. Options: unknown (1): unknown strapping dte (2): DTE strapping dce (3): DCE strapping Default Value: none')
bopStatOprPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("rs232d", 2), ("v35", 3), ("x21", 4), ("v34", 5), ("dds", 6), ("uif", 7), ("v36", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprPortInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprPortInterfaceType.setDescription('Indicates the type of hardware interface of the port. Options: unknown (1) rs232d (2): V.24 v35 (3): V.35 x21(4): X.21 v34 (5): V.34 modem dds (6): 56K DSU/CSU uif (7): ISDN U-interface v36 (8): V.36 Default Value: none')
bopStatOprPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portUp", 1), ("portDown", 2), ("portShutDown", 3), ("portDownBadConfiguration", 4), ("portOutOfOrder", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprPortState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprPortState.setDescription('Indicates the state of availability of the port. Options: portUp (1): port is up portDown (2): port is down portShutDown (3): port has been shut down portDownBadConfiguration (4): port is down due to bad configuration portOutOfOrder (5): port is out of order Default Value: none')
bopStatOprTxClockState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txClockDown", 1), ("txClockUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxClockState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxClockState.setDescription('Indicates the state availability of the transmit clock. Options: txClockDown (1): transmit clock is down txClockUp (2): transmit clock is up Default Value: none')
bopStatOprDCDState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDCDState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDCDState.setDescription('Indicates the state of the DCD signal. Options: unknown (1): DCD signal is in unknown state because hardware is not present inactive(2): DCD signal is low active (3): DCD signal is high Default Value: none')
bopStatOprDTRState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDTRState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDTRState.setDescription('Indicates the state of the DTR signal. Options: unknown (1): DTR signal is in unknown state because hardware is not present inactive (2): DTR signal is low active (3): DTR signal is high Default Value: none')
bopStatOprRTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRTSState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRTSState.setDescription('Indicates the state of the RTS signal. Options: unknown (1): RTS signal is in unknown state because hardware is not present inactive (2): RTS signal is low active (3): RTS signal is high Default Value: none')
bopStatOprCTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprCTSState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprCTSState.setDescription('Indicates the state of the CTS signal. Options: unknown (1): CTS signal is in unknown state because hardware is not present inactive (2): CTS signal is low active (3): CTS signal is high Default Value: none')
bopStatOprDSRState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDSRState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDSRState.setDescription('Indicates the state of the DSR signal. Options: unknown (1): DSR signal is in unknown state because hardware is not present inactive (2): DSR signal is low active =(3): SR signal is high Default Value: none')
bopStatOprDRSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDRSState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDRSState.setDescription('Indicates the state of the DRS signal. Options: unknown (1): DRS signal is in unknown state because hardware is not present inactive (2): DRS signal is low active = DRS signal is high Default Value: none')
bopStatOprTMState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTMState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTMState.setDescription('Indicates the state of the TM signal. Options: unknown (1): TM signal is in unknown state because hardware is not present inactive (2): TM signal is low active (3): TM signal is high Default Value: none')
bopStatOprLLState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprLLState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprLLState.setDescription('Indicates the state of the LL signal. Options: unknown (1): LL signal is in unknown state because hardware is not present inactive (2): LL signal is low active (3): LL signal is high Default Value: none')
bopStatOprRIState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRIState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRIState.setDescription('Indicates the state of the RI signal. Options: unknown (1): RI signal is in unknown state because hardware is not present inactive (2): RI signal is low active (3): RI signal is high Default Value: none')
bopStatOprRLState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRLState.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRLState.setDescription('Indicates the state of the RL signal. Options: unknown (1): RL signal is in unknown state because hardware is not present inactive (2): RL signal is low active (3): RL signal is high Default Value: none')
bopStatOprTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxFrames.setDescription('Indicates the total number of Tx frames since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxFrames.setDescription('Indicates the total number of Rx frames since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprLocalLoopbackFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprLocalLoopbackFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprLocalLoopbackFrames.setDescription('Indicates the total number of frames locally looped back since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprTxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxBps.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxBps.setDescription("Indicates the number of transmitted bits divided by the number of seconds set in 'bopSapOprPortStatisticsTimer'. Ranges of Values: 0 - 4,294,967,295 Default Value: none")
bopStatOprRxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxBps.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxBps.setDescription("Indicates the number of received bits divided by the number of seconds set in 'bopSapOprPortStatisticsTimer'. Ranges of Values: 0 - 4,294,967,295 Default Value: none")
bopStatOprTxBpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxBpsMax.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxBpsMax.setDescription('Indicates the highest number of bits per second transmitted since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprRxBpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxBpsMax.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxBpsMax.setDescription('Indicates the highest number of bits per second received since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprTxFps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxFps.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxFps.setDescription("Indicates the number of transmitted frames divided by the number of seconds set in 'bopSapOprPortStatisticsTimer'. Ranges of Values: 0 - 4,294,967,295 Default Value: none")
bopStatOprRxFps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxFps.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxFps.setDescription("Indicates the number of received frames divided by the number of seconds set in 'bopSapOprPortStatisticsTimer'. Ranges of Values: 0 - 4,294,967,295 Default Value: none")
bopStatOprTxFpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxFpsMax.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxFpsMax.setDescription('Indicates the highest number of frames per second transmitted since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprRxFpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxFpsMax.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxFpsMax.setDescription('Indicates the highest number of frames per second received since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprTxUnderrunFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxUnderrunFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxUnderrunFrames.setDescription('Indicates the total number of underrun frames that have been unsuccessfully transmitted since statistics were last reset. Ranges of Values: 0 - 4,294,967,295 Default Value: none')
bopStatOprTxCtsLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxCtsLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxCtsLostFrames.setDescription('Indicates the total number of frames unsuccessfully transmitted in half-duplex because CTS was dropped during transmission. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprTxBadStateDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxBadStateDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxBadStateDiscards.setDescription("Indicates the total number of frames discarded since statistics were last reset, due to a request for frame transmission while the port was down ('bopStatOprPortState' = portDown, portShutDown, portDownBadConfiguration, or portOutOfOrder). Ranges of Values: 0 - 65,535 Default Value: none")
bopStatOprTxResetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxResetDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxResetDiscards.setDescription('Indicates the total number of frames discarded since statistics were last reset, due to a management request for a line reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprTxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxSysCongestionDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxSysCongestionDiscards.setDescription('Indicates the total number of frames discarded since statistics were last reset, due to system congestion. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprTxInvWinDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxInvWinDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxInvWinDiscards.setDescription('Indicates the total number of frames discarded since statistics were last reset, due to the transmit window being exceeded. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprTxInvRLpbkWinDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxInvRLpbkWinDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxInvRLpbkWinDiscards.setDescription('Indicates the total number of frames discarded since statistics were last reset, due to the transmit window being exceeded while in loopback mode. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRxBadCrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxBadCrcFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxBadCrcFrames.setDescription('Indicates the total number of bad CRC frames received since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRxAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxAbortedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxAbortedFrames.setDescription("Indicates the total number of aborted frames received since statistics were last reset. Note: A frame is aborted when the port's receiver detects seven consecutive ones in that frame. Ranges of Values: 0 - 65,535 Default Value: none")
bopStatOprRxNonIntegralBitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxNonIntegralBitFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxNonIntegralBitFrames.setDescription('Indicates the total number of frames received since statistics were last reset, that did not have eight bits per byte. Note: Non-integral bit frames cannot be divided evenly by eight (the number of bits per byte in a frame). Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRxLongFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxLongFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxLongFrames.setDescription("Indicates the total number of long frames received since statistics were last reset. Note: A long frame is counted each time a received frame exceeds the permitted frame length defined in 'bopSapOprPortMaxFrameSize'. Ranges of Values: 0 - 65,535 Default Value: none")
bopStatOprRxOverrunFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxOverrunFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxOverrunFrames.setDescription("Indicates the total number of overrun frames received since statistics were last reset. Note: An overrun indicates that a frame's contents have been corrupted due to slow response in data reception. Ranges of Values: 0 - 65,535 Default Value: none")
bopStatOprRxCdLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxCdLostFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxCdLostFrames.setDescription('Indicates the total number of frames received with DCD loss in half-duplex by the port. Ranges of Values: 0 - 65, 535 Default Value: none')
bopStatOprRxBadStateDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxBadStateDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxBadStateDiscards.setDescription('Indicates the total number of frames discarded since statistics were last reset, because BOP software layer was not bound to other layers. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRxBusyDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxBusyDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxBusyDiscards.setDescription('Indicates the total number of frames discarded since statistics were last reset, due to a lack of receive buffers. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprPortStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprPortStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprPortStateChanges.setDescription('Indicates the total number of times the port has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprTxClockStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTxClockStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTxClockStateChanges.setDescription("Indicates the total number of times that 'bopStatOprTxClockState' has moved from one state to another since were last reset. Ranges of Values: 0 - 65,535 Default Value: none")
bopStatOprDCDStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDCDStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDCDStateChanges.setDescription('Indicates the total number of times DCD has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprDTRStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDTRStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDTRStateChanges.setDescription('Indicates the total number of times DTR has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRTSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRTSStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRTSStateChanges.setDescription('Indicates the total number of times RTS has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprCTSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprCTSStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprCTSStateChanges.setDescription('Indicates the total number of times CTS has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprDSRStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 115), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDSRStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDSRStateChanges.setDescription('Indicates the total number of times DSR has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprDRSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 116), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprDRSStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprDRSStateChanges.setDescription('Indicates the total number of times DRS has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprTMStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 117), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprTMStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprTMStateChanges.setDescription('Indicates the total number of times TM has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprLLStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 118), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprLLStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprLLStateChanges.setDescription('Indicates the total number of times LL has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRIStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 119), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRIStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRIStateChanges.setDescription('Indicates the total number of times RI has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRLStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 120), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRLStateChanges.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRLStateChanges.setDescription('Indicates the total number of times RL has moved from one state to another since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprPortResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprPortResets.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprPortResets.setDescription('Indicates the total number of port resets that have occurred at the port since statistics were last reset. Ranges of Values: 0 - 65,535 Default Value: none')
bopStatOprRxGenError = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopStatOprRxGenError.setStatus('mandatory')
if mibBuilder.loadTexts: bopStatOprRxGenError.setDescription("Indicates the total number of frames received in error since statistics were last reset, while 'bopSapOprPortDataGenerator' was set to 'enabled-verify'. Ranges of Values: 0 - 65,535 Default Value: none")
bopSapAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2), )
if mibBuilder.loadTexts: bopSapAdmTable.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmTable.setDescription('A table containing the planned configuration information about each BOP/COP port.')
bopSapAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1), ).setIndexNames((0, "CXBOPIO-MIB", "bopSapAdmNumber"))
if mibBuilder.loadTexts: bopSapAdmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmEntry.setDescription('The planned configuration information for a specific BOP/COP port.')
bopSapAdmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopSapAdmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmNumber.setDescription('Defines the SAP ID using 2,3 or 4 digits. The first digit (A) is the slot #, the second digit (B) is the port #, and the remaining digits (CD) are the channel #. If a 2 digit number is entered, digits CD are assumed to be 0 and are inserted automatically when reading object. If a 3 digit number is entered, digit C is assumed to be 0 and is inserted automatically when reading object. Ranges of Values for A: 1-7 for CX900, 1-4 for CX1000 Ranges of Values for B: 1-5 for CX900, 1-4 for CX1000 Ranges of Values for CD: 00-30 Default Value: not applicable')
bopSapAdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmAlias.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmAlias.setDescription('Determines the textual name uniquely identifying this SAP in the BOP Driver software layer. Ranges of Values: 0-16 alphanumeric characters beginning with a non-numeric character Default Value: undefined Configuration Changed: administrative ')
bopSapAdmProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hdlc", 1), ("bsc3270", 2), ("borroughs", 3), ("sperry", 4), ("bsc3780", 5), ("aircat", 6))).clone('hdlc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmProtocol.setDescription('Determines if the port is HDLC or Bisync. Only HDLC is supported by ISDN and T1/E1 ports. Indicates in the operative configuration the type of bisync protocol used by the controllers of the port associated with this SAP. Options: hdlc bsc3270 = Bisync 3270 controllers borroughs = Borroughs controllers sperry = Sperry controllers bsc3780 = Bisync 2780/3780 controllers aircat = aircat500 air traffic radar controllers Default Value: hdlc')
bopSapAdmPortClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("split", 3), ("slave", 4))).clone('external')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortClockSource.setDescription('Determines the bit-rate clock source of the port. Options: internal (1): Tx and Rx clocks are internally generated external (2): Tx and Rx clocks are externally supplied on separate pins split (3): Tx clock is internally generated and Rx clock is externally supplied slave (4): Tx and Rx clocks are externally supplied on the same pins Note: Split clocking is not supported on ports in slots 5, 6 and 7 when the Data Expansion Module is installed. Default Value: external (locked to internal for ISDN) Configuration Changed: administrative ')
bopSapAdmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(375, 2048000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortSpeed.setDescription("Indicates the input and output speed in bits per second of the port. Note: This value is meaningful only if 'bopSapAdmPortClockSource' is set to 'internal' or to 'split'. Ranges of Values: 375 - 2,048,000 (locked at 16,000 for ISDN 'D' channel and at 64,000 for ISDN 'B' channels) for slot/port/channel 11x-41x; 300-256,000 for slot/port/channel 51x-71x. 1875 bps is the minimum speed supported on ports in slots 5, 6 and 7 when the Data Expansion Module is installed. Default Value: 64,000 Configuration Changed: administrative ")
bopSapAdmPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDuplex.setDescription('Determines whether the port communicates simultaneously in both directions (full-duplex) or alternates between directions (half-duplex). Options: half (1): half-duplex full (2): full-duplex (locked for ISDN) Default Value: full Configuration Changed: administrative ')
bopSapAdmPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 9000)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortMaxFrameSize.setDescription('Determines the maximum frame size supported by the port. Ranges of Values: 32-9000 Default Value: 1,600 (512 for ISDN) Configuration Changed: administrative ')
bopSapAdmPortDataEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi-mark", 2), ("nrzi-space", 3))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDataEncoding.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDataEncoding.setDescription("Determines the data formatting and encoding used by the port. Options: nrz (1): NRZ (locked for ISDN 'D' channel; ISDN 'B' channel can use only this value or NRZI-Space value) nrzi-mark (2): NRZI-Mark nrzi-space (3): NRZI-Space (ISDN 'B' channel can use only this value or NRZ value) Note: Slot/port/channel 51x-71x can use only NRZ or NRZI-Space. Default Value: nrz (1) Configuration Changed: administrative ")
bopSapAdmPortIdleCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flags", 1), ("marks", 2), ("as400", 3))).clone('flags')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortIdleCondition.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortIdleCondition.setDescription('Determines the idle line condition supported by the port. Options: flags (1): flags marks (2): marks as400 (3): AS400 Default Value: flags Configuration Changed: administrative ')
bopSapAdmPortPreAmbleLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortPreAmbleLength.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortPreAmbleLength.setDescription("Determines the minimum number of flags or sync pairs that will be inserted between frames by the port's transmitter. For HDLC frames: A value of zero causes flag sharing between frames. A value of one means no flag sharing and zero flags inserted between frames. A value of two means no flag sharing and one flag inserted between frames. A value of three means no flag sharing and two flags inserted between frames. Etc. For Bisync frames: A value of zero or one causes one sync pair to be inserted between frames. A value of two causes two sync pairs to be inserted between frames. A value of three causes three sync pairs to be inserted between frames. Etc. Ranges of Values: 0-16 Default Value: 1 Configuration Changed: administrative ")
bopSapAdmPortFlagSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortFlagSharing.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortFlagSharing.setDescription("Determines whether back-to-back transmit frames will have a flag in common This value is meaningful only if 'bopSapAdmPortPreAmbleLength' is set to zero. Options: disabled (1): back-to-back frames do not share flag enabled (2): back-to-back frames share flag Default Value: disabled Configuration Changed: administrative ")
bopSapAdmPortFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortFilterMask.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortFilterMask.setDescription("Determines which bits of the 8-bit HDLC address will be used for address filtering. Note: When a bit is set to '1', the position of bits will be checked. When a bit is set to '0', it will not be checked. Ranges of Values: 0-255 Default Value: 0 Configuration Changed: administrative ")
bopSapAdmPortFilterAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress1.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress1.setDescription('Determines one of four 8-bit addresses used for address filtering. Ranges of Values: 0-255 Default Value: 126 Configuration Changed: administrative ')
bopSapAdmPortFilterAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress2.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress2.setDescription('Determines one of four 8-bit addresses used for address filtering. Ranges of Values: 0-255 Default Value: 126 Configuration Changed: administrative ')
bopSapAdmPortFilterAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress3.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress3.setDescription('Determines one of four 8-bit addresses used for address filtering. Ranges of Values: 0-255 Default Value: 126 Configuration Changed: administrative ')
bopSapAdmPortFilterAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress4.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortFilterAddress4.setDescription('Determines one of four 8-bit addresses used for address filtering. Ranges of Values: 0-255 Default Value: 126 Configuration Changed: administrative ')
bopSapAdmPortCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc-ccitt", 1), ("crc-32", 2))).clone('crc-ccitt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortCrc.setStatus('obsolete')
if mibBuilder.loadTexts: bopSapAdmPortCrc.setDescription("Determines which algorithm is used for error detection. Options: crc-ccitt (1): CRC-ITU-T (uses X15+X12+X5+1 polynomial; ITU-T formerly CCITT) (locked for ISDN 'D' channel; can be selected for ISDN 'B' channel) crc-32 (2): CRC-32 (for Ethernet; uses X32+X26+X23+X22+X16+X12+X11+ X10+X8+X7+X5+X4+X2+X+1) (can be selected for ISDN 'B' channel) Default Value: crc-ccitt (1) Configuration Changed: administrative ")
bopSapAdmPortDtrUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDtrUpTimer.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDtrUpTimer.setDescription('Determines the time in seconds that the port must wait for DCD (DTR if DCE) after raising DTR (DCD if DCE) to determine if a connection can be established. Note: This value will be set to zero if the port does not support an application requiring it. Ranges of Values: 0-65,535 Default Value: 0 Configuration Changed: administrative ')
bopSapAdmPortTxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortTxWindow.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortTxWindow.setDescription("Determines the maximum number of buffers that may be queued onto the port driver (for transmission) by the associated upper layer. For ISDN ports, the value is locked at 8. Note: When set to '255', the system automatically determines the number of buffers devoted to different kinds of traffic. When this object is set to a lesser value, the system compares this value with its own and uses the smaller. This object thereby provides a way to safeguard delay-sensitive voice traffic against such disruptions as bursty LAN traffic. This value is locked to 255 for ISDN. Ranges of Values: 1-255 Default Value: 255 Configuration Changed: administrative ")
bopSapAdmPortThreshBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortThreshBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortThreshBandwidth.setDescription('Determines the value of the minimum critical bandwidth that will determine whether Frame Relay should filter certain restricted types of packets or not. The value entered should be a multiple of 1 Kilo bits per second. Ranges of Values: 0 - 65,535 Default Value: 0 Configuration Changed: operative ')
bopSapAdmPortDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dial-in-only", 1), ("dial-out-only", 2), ("dial-in-out", 3))).clone('dial-in-out')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDialMode.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDialMode.setDescription('Identifies the operation mode when setting up connections. Options: dial-in-only (1): Only accept incoming calls; Will not make any outgoing calls. dial-out-only (2): Only make outgoing calls; Will not accept any incoming calls. dial-in-out (3): Accept incoming calls and make outgoing calls. Configuration Changed: administrative ')
bopSapAdmPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("both", 4), ("isdn-uif-uif", 5), ("isdn-uif-idl2", 6), ("isdn-uif-framer", 7), ("isdn-uif-external", 8))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortLoopback.setDescription('Determines whether loopback is enabled and what kind of loopback is enabled. Options: none (1): Loopback is not enabled local (2): Local loopback is enabled (forces SAP associated with port to return outbound frames to the originating software layer without transmitting them) remote (3): Remote loopback is enabled (forces the port to transmit immediately any frame received on the line, and also forces the associated SAP to deny communication with any upper software layer that requests service) both (4): Both local and remote loopbacks are enabled. isdn-uif-uif (5): ISDN loopback is enabled at U-Interface (forces TB1Q signal from a remote transmitter to pass through the entire U-Interface Transceiver before being transmitted back to the remote receiver) isdn-uif-idl2 (6): ISDN loopback is enabled at IDL2 Controller (forces IDL2 Controller to take in B and D channel data on IDL RX pin and send it out on IDL2 TX pin) isdn-uif-framer (7): ISDN loopback is enabled at framer (forces B and D channel data in on D-in pin and M channel data in on SCP which together undergo framing and deframing functions before B and D channel data go out D-out pin and M channel data go out SCP) isdn-uif-external (8): ISDN loopback is enabled at external line (forces TB1Q signal coming in on D-in pin to pass through Tx Driver pins, the U-Interface circuit and Rx input pins before recovering it and sending it out the D-out pin) Default Value: none Configuration Changed: administrative ')
bopSapAdmPortSignalSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortSignalSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortSignalSamplingPeriod.setDescription('Determines the sampling period in 100 millisecond increments used to sample detectable signals. Ranges of Values: 3-100 (locked at 5 for ISDN) Default Value: 5 Configuration Changed: administrative ')
bopSapAdmPortDcdDtrSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDcdDtrSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDcdDtrSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating DCD (DTR if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1-30 Default Value: 3 Configuration Changed: administrative ')
bopSapAdmPortCtsRtsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortCtsRtsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortCtsRtsSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating CTS (RTS if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1-30 Default Value: 3 Configuration Changed: administrative ')
bopSapAdmPortDsrDrsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDsrDrsSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDsrDrsSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating DSR (DRS if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1-30 Default Value: 3 Configuration Changed: administrative ')
bopSapAdmPortTmLlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortTmLlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortTmLlSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating TM (LL if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1-30 Default Value: 3 Configuration Changed: administrative ')
bopSapAdmPortRiRlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortRiRlSignalSamples.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortRiRlSignalSamples.setDescription('Determines the active number of sampling periods that this port must wait before validating RI (RL if DCE). This object has no meaning in ISDN connections. Ranges of Values: 1-30 Default Value: 3 Configuration Changed: administrative ')
bopSapAdmPortStatisticsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortStatisticsTimer.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortStatisticsTimer.setDescription('Determines the period in seconds during which BOP performance statistics are measured. Note: If set to zero, BOP performance statistics are not measured. Ranges of Values: 0-60 Default Value: 0 Configuration Changed: administrative ')
bopSapAdmPortCarrierAction = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortCarrierAction.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortCarrierAction.setDescription("Determines if the port driver informs it's associated upper layer that service is no longer available following loss of DCD if DTE, or DTR if DCE. Options: disabled (1): do not notify upper layer of service loss (locked for ISDN) enabled (2): inform upper layer of service loss Default Value: enabled Configuration Changed: administrative ")
bopSapAdmPortDataGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabled-verify", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortDataGenerator.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortDataGenerator.setDescription('Determines whether the port will act as an internal data generator. Options: disabled (1): port is not a data generator enabled (2): port is a data generator enabled-verify (3): port is a data generator and its incoming data is verified Default Value: disabled Configuration Changed: administrative ')
bopSapAdmPortGenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortGenFrames.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortGenFrames.setDescription('Determines the number of frames that the port configured as an internal data generator will generate at one time. Ranges of Values: 0-255 Note: When set to zero, frames are generated continuously Default Value: 1 Configuration Changed: administrative ')
bopSapAdmPortGenFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortGenFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortGenFrameSize.setDescription('Determines the size in bytes of internally generated frames (excluding flags). Ranges of Values: 2-65535 Note: When set to zero, frames are sized randomly. Default Value: 128 Configuration Changed: administrative ')
bopSapAdmPortGenFrameHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmPortGenFrameHeader.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmPortGenFrameHeader.setDescription('Determines the 16-bit header that will be inserted in the first two octets after the opening flag of each internally generated frame. Ranges of Values: 0-65, 535 Default Value: 1 Configuration Changed: administrative ')
bopSapAdmCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ebcdic", 2), ("ascii", 3))).clone('ebcdic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmCodeSet.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmCodeSet.setDescription('Determines in the administrative configuration the code used by the port associated with this SAP to communicate to the Bisync device. Options: other ebcdic = EBCDIC ascii = ASCII Default value: ebcdic Configuration changed: administrative Further action: system reset to change')
bopSapAdmParity = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("space", 4), ("mark", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopSapAdmParity.setStatus('mandatory')
if mibBuilder.loadTexts: bopSapAdmParity.setDescription("Indicates the parity used to communicate with the Bisync device Options: (1) none: No parity (2) odd: Odd parity (3) even: Even parity (4) space: Low parity (always 0's) (5) mark: High parity (always 1's) Default value: none")
bopAdmPortTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopAdmPortTrap.setStatus('mandatory')
if mibBuilder.loadTexts: bopAdmPortTrap.setDescription("Determines whether this port produces a 'bopPortStatusChange' trap which can be retrieved by SNMP network management. Options: disabled (1): do not produce port status trap enabled (2): produce port status trap Default Value: disabled (1) Configuration Changed: administrative ")
bopAdmTxClockTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bopAdmTxClockTrap.setStatus('mandatory')
if mibBuilder.loadTexts: bopAdmTxClockTrap.setDescription("Determines whether this port produces a 'bopTxClockStatusChange' trap which can be retrieved by SNMP network management. Options: disabled (1): do not produce transmit clock status trap enabled (2): produce transmit clock status trap Default Value: disabled (1) Configuration Changed: administrative ")
bopMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bopMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: bopMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
bopPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36) + (0,1)).setObjects(("CXBOPIO-MIB", "bopSapOprNumber"), ("CXBOPIO-MIB", "bopStatOprPortState"))
if mibBuilder.loadTexts: bopPortStatusChange.setDescription('Indicates that the hardware port associated with the service access point has changed state. It has toggled between any of the states defined in object bopStatOprPortState.')
bopTxClockStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 36) + (0,2)).setObjects(("CXBOPIO-MIB", "bopSapOprNumber"), ("CXBOPIO-MIB", "bopStatOprTxClockState"))
if mibBuilder.loadTexts: bopTxClockStatusChange.setDescription('Indicates that the transmit clock at hardware port associated with the service access point has changed state. It has toggled between any of the states defined in object bopStatOprTxClockState.')
mibBuilder.exportSymbols("CXBOPIO-MIB", bopStatOprPortInterfaceType=bopStatOprPortInterfaceType, bopSapOprCodeSet=bopSapOprCodeSet, bopSapAdmPortTxWindow=bopSapAdmPortTxWindow, bopStatOprPortResets=bopStatOprPortResets, bopSapAdmNumber=bopSapAdmNumber, bopStatOprRxBusyDiscards=bopStatOprRxBusyDiscards, bopStatOprRLStateChanges=bopStatOprRLStateChanges, bopStatOprDTRStateChanges=bopStatOprDTRStateChanges, bopSapAdmPortDataGenerator=bopSapAdmPortDataGenerator, bopStatOprRxAbortedFrames=bopStatOprRxAbortedFrames, bopStatOprTxClockState=bopStatOprTxClockState, bopStatOprTxUnderrunFrames=bopStatOprTxUnderrunFrames, bopSapOprPortIdleCondition=bopSapOprPortIdleCondition, bopSapOprPortMaxFrameSize=bopSapOprPortMaxFrameSize, bopSapOprPortThreshBandwidth=bopSapOprPortThreshBandwidth, bopStatOprRxGenError=bopStatOprRxGenError, bopStatOprRxBadCrcFrames=bopStatOprRxBadCrcFrames, bopSapOprPortFilterAddress1=bopSapOprPortFilterAddress1, bopSapOprPortGenFrameHeader=bopSapOprPortGenFrameHeader, bopSapOprPortCtsRtsSignalSamples=bopSapOprPortCtsRtsSignalSamples, bopSapAdmPortFilterAddress3=bopSapAdmPortFilterAddress3, bopSapAdmPortCtsRtsSignalSamples=bopSapAdmPortCtsRtsSignalSamples, bopSapAdmEntry=bopSapAdmEntry, bopSapAdmPortDataEncoding=bopSapAdmPortDataEncoding, bopSapOprPortCarrierAction=bopSapOprPortCarrierAction, bopStatOprRTSState=bopStatOprRTSState, bopSapOprPortPreAmbleLength=bopSapOprPortPreAmbleLength, bopStatOprRxBadStateDiscards=bopStatOprRxBadStateDiscards, bopStatOprRxBps=bopStatOprRxBps, bopSapAdmPortFilterMask=bopSapAdmPortFilterMask, bopSapOprPortFilterAddress2=bopSapOprPortFilterAddress2, bopSapAdmParity=bopSapAdmParity, bopStatOprPortStateChanges=bopStatOprPortStateChanges, bopSapAdmPortTmLlSignalSamples=bopSapAdmPortTmLlSignalSamples, bopStatOprCTSState=bopStatOprCTSState, bopSapOprPortCrc=bopSapOprPortCrc, bopTxClockStatusChange=bopTxClockStatusChange, bopSapAdmPortPreAmbleLength=bopSapAdmPortPreAmbleLength, bopOprTxClockTrap=bopOprTxClockTrap, bopSapAdmPortSpeed=bopSapAdmPortSpeed, bopStatOprTxBadStateDiscards=bopStatOprTxBadStateDiscards, bopStatOprCTSStateChanges=bopStatOprCTSStateChanges, bopSapAdmPortSignalSamplingPeriod=bopSapAdmPortSignalSamplingPeriod, bopSapOprPortTxWindow=bopSapOprPortTxWindow, bopSapOprPortFilterMask=bopSapOprPortFilterMask, bopStatOprTxClockStateChanges=bopStatOprTxClockStateChanges, bopStatOprRTSStateChanges=bopStatOprRTSStateChanges, bopSapOprPortDataEncoding=bopSapOprPortDataEncoding, bopStatOprRIStateChanges=bopStatOprRIStateChanges, bopSapOprPortDuplex=bopSapOprPortDuplex, bopSapOprPortGenFrameSize=bopSapOprPortGenFrameSize, bopStatOprRxLongFrames=bopStatOprRxLongFrames, bopSapAdmPortIdleCondition=bopSapAdmPortIdleCondition, bopStatOprTxFps=bopStatOprTxFps, bopSapAdmPortLoopback=bopSapAdmPortLoopback, bopSapOprPortDtrUpTimer=bopSapOprPortDtrUpTimer, bopSapOprPortSignalSamplingPeriod=bopSapOprPortSignalSamplingPeriod, bopSapAdmPortThreshBandwidth=bopSapAdmPortThreshBandwidth, bopStatOprDSRStateChanges=bopStatOprDSRStateChanges, bopSapOprPortFlagSharing=bopSapOprPortFlagSharing, bopSapAdmPortCarrierAction=bopSapAdmPortCarrierAction, bopSapOprPortLoopback=bopSapOprPortLoopback, bopStatOprRLState=bopStatOprRLState, bopStatOprTxInvWinDiscards=bopStatOprTxInvWinDiscards, bopStatOprTxBpsMax=bopStatOprTxBpsMax, bopSapAdmPortFilterAddress1=bopSapAdmPortFilterAddress1, bopSapAdmPortFilterAddress4=bopSapAdmPortFilterAddress4, bopStatOprTxBps=bopStatOprTxBps, bopStatOprRxFrames=bopStatOprRxFrames, bopSapAdmPortDcdDtrSignalSamples=bopSapAdmPortDcdDtrSignalSamples, bopStatOprTxFpsMax=bopStatOprTxFpsMax, bopSapAdmPortGenFrameHeader=bopSapAdmPortGenFrameHeader, bopOprControlLine=bopOprControlLine, bopStatOprTxFrames=bopStatOprTxFrames, bopSapOprPortGenFrames=bopSapOprPortGenFrames, bopSapAdmPortGenFrameSize=bopSapAdmPortGenFrameSize, bopStatOprLocalLoopbackFrames=bopStatOprLocalLoopbackFrames, bopOprPortTrap=bopOprPortTrap, bopStatOprDTRState=bopStatOprDTRState, bopSapOprPortDcdDtrSignalSamples=bopSapOprPortDcdDtrSignalSamples, bopStatOprRxFpsMax=bopStatOprRxFpsMax, bopSapAdmPortMaxFrameSize=bopSapAdmPortMaxFrameSize, bopSapAdmPortClockSource=bopSapAdmPortClockSource, bopStatOprRxBpsMax=bopStatOprRxBpsMax, bopSapAdmAlias=bopSapAdmAlias, bopSapAdmCodeSet=bopSapAdmCodeSet, bopStatOprRxCdLostFrames=bopStatOprRxCdLostFrames, bopSapOprPortFilterAddress4=bopSapOprPortFilterAddress4, bopSapAdmPortStatisticsTimer=bopSapAdmPortStatisticsTimer, bopSapAdmPortDuplex=bopSapAdmPortDuplex, bopSapAdmPortFlagSharing=bopSapAdmPortFlagSharing, bopSapOprTable=bopSapOprTable, bopSapOprEntry=bopSapOprEntry, bopStatOprPortState=bopStatOprPortState, bopSapAdmPortGenFrames=bopSapAdmPortGenFrames, bopSapOprPortStatisticsTimer=bopSapOprPortStatisticsTimer, bopSapAdmPortCrc=bopSapAdmPortCrc, bopStatOprLLState=bopStatOprLLState, bopSapAdmPortRiRlSignalSamples=bopSapAdmPortRiRlSignalSamples, bopStatOprTxResetDiscards=bopStatOprTxResetDiscards, bopStatOprDSRState=bopStatOprDSRState, bopSapAdmTable=bopSapAdmTable, bopSapOprProtocol=bopSapOprProtocol, bopSapAdmProtocol=bopSapAdmProtocol, bopStatOprRxOverrunFrames=bopStatOprRxOverrunFrames, bopSapOprPortDialMode=bopSapOprPortDialMode, bopSapOprAlias=bopSapOprAlias, bopStatOprLLStateChanges=bopStatOprLLStateChanges, bopStatOprTxInvRLpbkWinDiscards=bopStatOprTxInvRLpbkWinDiscards, bopSapAdmPortDtrUpTimer=bopSapAdmPortDtrUpTimer, bopSapOprParity=bopSapOprParity, bopAdmPortTrap=bopAdmPortTrap, bopMibLevel=bopMibLevel, bopSapOprPortDataGenerator=bopSapOprPortDataGenerator, bopPortStatusChange=bopPortStatusChange, bopStatOprRIState=bopStatOprRIState, bopSapOprPortClockSource=bopSapOprPortClockSource, bopStatOprTxCtsLostFrames=bopStatOprTxCtsLostFrames, bopStatOprTMState=bopStatOprTMState, bopSapAdmPortDialMode=bopSapAdmPortDialMode, bopSapOprPortDsrDrsSignalSamples=bopSapOprPortDsrDrsSignalSamples, bopStatOprTxSysCongestionDiscards=bopStatOprTxSysCongestionDiscards, bopSapOprPortTmLlSignalSamples=bopSapOprPortTmLlSignalSamples, bopStatOprDRSState=bopStatOprDRSState, bopSapOprPortActualSpeed=bopSapOprPortActualSpeed, bopStatOprDRSStateChanges=bopStatOprDRSStateChanges, bopStatOprDCDStateChanges=bopStatOprDCDStateChanges, bopAdmTxClockTrap=bopAdmTxClockTrap, bopSapAdmPortFilterAddress2=bopSapAdmPortFilterAddress2, bopStatOprTMStateChanges=bopStatOprTMStateChanges, bopSapOprPortRiRlSignalSamples=bopSapOprPortRiRlSignalSamples, bopStatOprDCDState=bopStatOprDCDState, bopSapOprPortFilterAddress3=bopSapOprPortFilterAddress3, bopStatOprRxNonIntegralBitFrames=bopStatOprRxNonIntegralBitFrames, bopSapAdmPortDsrDrsSignalSamples=bopSapAdmPortDsrDrsSignalSamples, bopOprControlStats=bopOprControlStats, bopSapOprPortSpeed=bopSapOprPortSpeed, bopStatOprRxFps=bopStatOprRxFps, bopStatOprPortType=bopStatOprPortType, bopSapOprNumber=bopSapOprNumber)
