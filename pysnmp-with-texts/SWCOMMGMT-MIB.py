#
# PySNMP MIB module SWCOMMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWCOMMGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, Bits, Counter32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, ObjectIdentity, Counter64, Integer32, ModuleIdentity, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Bits", "Counter32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "ObjectIdentity", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Unsigned32")
PhysAddress, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "MacAddress", "DisplayString")
privateMgmt, = mibBuilder.importSymbols("SWPRIMGMT-MIB", "privateMgmt")
swComMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1))
if mibBuilder.loadTexts: swComMgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swComMgmtMIB.setOrganization('enterprise, Inc.')
if mibBuilder.loadTexts: swComMgmtMIB.setContactInfo(' Customer Service Postal: Tel: E-mail: ')
if mibBuilder.loadTexts: swComMgmtMIB.setDescription('The Structure of Common Management Information for the proprietary enterprise.')
class ErrorReturnCode(TextualConvention, Integer32):
    description = 'This variable is used primarily as an enumeration to list the proprietary return codes that this device can send to a management station in response to a failed SNMP operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(201, 202, 203, 204, 205, 206, 207, 208, 209))
    namedValues = NamedValues(("cannotModifyMltMemberPort", 201), ("onlyOnePortInMlt", 202), ("moreThan4PortsInMlt", 203), ("mltWithDifferentVlan", 204), ("cannotModifyVlanPortWithMltMemberPort", 205), ("arpClassIdSpecified", 206), ("arpClassIdOnlyForIpSubnetVlan", 207), ("ipSubnetVlanArpClassIdCannotBeZero", 208), ("arpClassIdWithExistVid", 209))

agentConfigInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1))
agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1))
agentRuntimeSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRuntimeSwVersion.setStatus('current')
if mibBuilder.loadTexts: agentRuntimeSwVersion.setDescription("This is a textual description of the runtime software version and revision. If the version number is one and revision number is zero agentRuntimeSwVersion would be 'Ver. 1.0'")
agentPromFwVersion = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPromFwVersion.setStatus('current')
if mibBuilder.loadTexts: agentPromFwVersion.setDescription("This is a textual description of the agent PROM firmware version and revision. If the version number is one and revision number is zero agentPromFwVersion would be 'Ver. 1.0'")
agentHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentHwRevision.setStatus('current')
if mibBuilder.loadTexts: agentHwRevision.setDescription("This is a textual description of the hardware version and revision. If the version number is one and revision number is zero agentHwRevision would be 'Ver. 1.0'")
agentDeviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDeviceSerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentDeviceSerialNumber.setDescription('The serial number of the device.')
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('current')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 7), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 7, 1), ).setIndexNames((0, "SWCOMMGMT-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of agentMibCapabilityDescr entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('current')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of the MIB specified in this entry.')
agentStatusConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusConsoleInUse.setStatus('current')
if mibBuilder.loadTexts: agentStatusConsoleInUse.setDescription('This indicates whether console is currently in-use.')
agentSerialPortDataBits = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialPortDataBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialPortDataBits.setDescription('The number of data bits, per byte of data, this port should send/receive.')
agentSerialPortParityBits = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialPortParityBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialPortParityBits.setDescription('The Parity for console mode, If the agentRs232PortConfig change to console mode then the device will use this group to make a setup for console value.')
agentSerialPortStopBits = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialPortStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialPortStopBits.setDescription('The Stop Bits for console mode.')
agentPrimaryPowerState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("not-ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPrimaryPowerState.setStatus('current')
if mibBuilder.loadTexts: agentPrimaryPowerState.setDescription('The primary power status.')
agentRedundantPowerState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("not-ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRedundantPowerState.setStatus('current')
if mibBuilder.loadTexts: agentRedundantPowerState.setDescription('The redundant power status.')
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2))
agentFirmwareFile = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFirmwareFile.setStatus('current')
if mibBuilder.loadTexts: agentFirmwareFile.setDescription('The name of the firmware file to be downloaded.')
agentFirmwareSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFirmwareSourceAddr.setStatus('current')
if mibBuilder.loadTexts: agentFirmwareSourceAddr.setDescription('The ip address where new firmware file is located on.')
agentFirmwareUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("activate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFirmwareUpdateCtrl.setStatus('current')
if mibBuilder.loadTexts: agentFirmwareUpdateCtrl.setDescription("while this object is set to 'activate', FTP download is working immediately, and agentFirmwareUpdateState is changed to 'in-process'. The agent always returns 'other' while it is read.")
agentFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("in-process", 2), ("invalid-file", 3), ("violation", 4), ("file-not-found", 5), ("disk-full", 6), ("complete", 7), ("time-out", 8), ("tftp-establish-fail", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFirmwareUpdateState.setStatus('current')
if mibBuilder.loadTexts: agentFirmwareUpdateState.setDescription("status of firmware download control. If the value is 'other', means never firmware updated since device started up.")
agentSystemRestart = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("no-restart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemRestart.setStatus('current')
if mibBuilder.loadTexts: agentSystemRestart.setDescription('This object indicates the agent system restart state. Setting this object to no-restart(3) has no effect. Setting this object to cold-start(2) will restart the agent. The agent always returns no-restart(3) when this object is read.')
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('current')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('This object indicates the RS-232 mode while device restart.')
agentBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-57200", 6), ("baudRate-115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBaudRateConfig.setStatus('current')
if mibBuilder.loadTexts: agentBaudRateConfig.setDescription('This object indicates the baud rate while device restart.')
agentAutoLogoutConfig = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("never", 2), ("autoLogout-2mins", 3), ("autoLogout-5mins", 4), ("autoLogout-10mins", 5), ("autoLogout-15mins", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoLogoutConfig.setStatus('current')
if mibBuilder.loadTexts: agentAutoLogoutConfig.setDescription('This object indicates the time which the console will log out the current user if there is no user input.')
agentTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetState.setStatus('current')
if mibBuilder.loadTexts: agentTelnetState.setDescription('This object decide the TELNET enabled or disabled.')
agentWebState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentWebState.setStatus('current')
if mibBuilder.loadTexts: agentWebState.setDescription('This object decide the WEB enabled or disabled.')
agentFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("config", 3), ("system", 4), ("no-reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFactoryReset.setStatus('current')
if mibBuilder.loadTexts: agentFactoryReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(5) has no effect. Setting this object to reset(2) will reset the agent to default settings except IP address, user account and history log. Setting this object to config(3) will reset the agent to default settings. Setting this object to system(4) will reset the agent to default settings. Then the switch will do factory reset, save and reboot. The agent always returns no-reset(5) when this object is read.')
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3))
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('current')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: agentIpIfTable.setStatus('current')
if mibBuilder.loadTexts: agentIpIfTable.setDescription('A list of IP interface entries supported by the agent.')
agentIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "SWCOMMGMT-MIB", "agentIpIfIndex"))
if mibBuilder.loadTexts: agentIpIfEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpIfEntry.setDescription('An agentIPIfEntry contains information about a particular IP interface.')
agentIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpIfIndex.setDescription('This object uniquely identifies the IP interface number in the agentIpIfTable. This value should never greater than agentIpNumOfIf.')
agentIpIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfAddress.setStatus('current')
if mibBuilder.loadTexts: agentIpIfAddress.setDescription('The IP address of the interface.')
agentIpIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfNetMask.setStatus('current')
if mibBuilder.loadTexts: agentIpIfNetMask.setDescription('The IP net mask for this interface.')
agentIpIfDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: agentIpIfDefaultRouter.setDescription('The default gateway for this IP interface.')
agentIpIfMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpIfMacAddr.setDescription('The MAC address of this IP interface. For interfaces which do not have such an address. (e.g., a serial line), this object should contain an octet string of zero length.')
agentIpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 28))).clone(namedValues=NamedValues(("other", 1), ("ethernet-csmacd", 6), ("slip", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpIfType.setStatus('current')
if mibBuilder.loadTexts: agentIpIfType.setDescription('The physical layer interface of the IP interface.')
agentIpBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpBootServerAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpBootServerAddr.setDescription('The IP Address of Boot Server.')
agentIpGetIpFromBootpServer = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("frombootp", 3), ("fromdhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFromBootpServer.setStatus('current')
if mibBuilder.loadTexts: agentIpGetIpFromBootpServer.setDescription('This object indicates whether the agent get its system IP address from Bootp/DHCP server at start up.')
agentIpSystemIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpSystemIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentIpSystemIpAddr.setDescription('The system IP address.')
agentIpSystemSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpSystemSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentIpSystemSubnetMask.setDescription('The system subnet mask.')
agentIpDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentIpDefaultGateway.setDescription('The system default gateway.')
agentCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 4), )
if mibBuilder.loadTexts: agentCommunityTable.setStatus('current')
if mibBuilder.loadTexts: agentCommunityTable.setDescription('A list of SNMP community string.')
agentCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 4, 1), ).setIndexNames((0, "SWCOMMGMT-MIB", "agentCommunityString"))
if mibBuilder.loadTexts: agentCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: agentCommunityEntry.setDescription('An agentCommunityEntry contains information about SNMP community string and access level.')
agentCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCommunityString.setStatus('current')
if mibBuilder.loadTexts: agentCommunityString.setDescription("When an SNMP message is received by this entity, the community string in the message is compared with this string first. If it doesn't match, the user can't access this entity by manage tool.")
agentCommunityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("read-only", 2), ("read-write", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCommunityLevel.setStatus('current')
if mibBuilder.loadTexts: agentCommunityLevel.setDescription("The access level of SNMP. The value read-only(2) indicates the user only can view the information about this device, but can't modify it. The value read-write(3) is granted to all items in the MIB.")
agentCommunitystate = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCommunitystate.setStatus('current')
if mibBuilder.loadTexts: agentCommunitystate.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
agentTrustHostTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 5), )
if mibBuilder.loadTexts: agentTrustHostTable.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostTable.setDescription('A list of managemnet station IP addresses.')
agentTrustHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 5, 1), ).setIndexNames((0, "SWCOMMGMT-MIB", "agentTrustHostId"))
if mibBuilder.loadTexts: agentTrustHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostEntry.setDescription('An agentTrustHostEntry contains information about managemnet station IP addresses and port.')
agentTrustHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrustHostId.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostId.setDescription('This object uniquely identifies the management station in the agentTrustHostTable.')
agentTrustHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrustHostIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIPAddr.setDescription('The IP address of the managemet station.')
agentTrustHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrustHostState.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
agentTrustHostIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTrustHostIPMask.setStatus('current')
if mibBuilder.loadTexts: agentTrustHostIPMask.setDescription('The IP subnet mask of the managemet station.')
agentLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 6))
agentLogUploadLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogUploadLogFileName.setStatus('current')
if mibBuilder.loadTexts: agentLogUploadLogFileName.setDescription('The name of the log file to be uploaded from the device to TFTP server when enabling log upload function (by writing agentLogUploadLog).')
agentLogUploadLogSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogUploadLogSourceAddr.setStatus('current')
if mibBuilder.loadTexts: agentLogUploadLogSourceAddr.setDescription('The ip address where been uploaded log file.')
agentLogUploadLog = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogUploadLog.setStatus('current')
if mibBuilder.loadTexts: agentLogUploadLog.setDescription('As the object is set to active, it will immediately invoke log upload function. If set to normal, do nothing.')
agentLogUploadLogState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("in-process", 2), ("invalid-file", 3), ("violation", 4), ("file-not-found", 5), ("disk-full", 6), ("complete", 7), ("time-out", 8), ("tftp-establish-fail", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLogUploadLogState.setStatus('current')
if mibBuilder.loadTexts: agentLogUploadLogState.setDescription("status of upload log control. If the value is 'other', means never log updated since device started up.")
agentLogClearLog = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLogClearLog.setStatus('current')
if mibBuilder.loadTexts: agentLogClearLog.setDescription('As the object is set to active, the log table will be clear. If set to normal, do nothing.')
agentTblSize = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 7))
agentArpNumber = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentArpNumber.setStatus('current')
if mibBuilder.loadTexts: agentArpNumber.setDescription('The number of current ipNetToMediaTable entries that are not invalid.')
agentIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumber.setStatus('current')
if mibBuilder.loadTexts: agentIpNumber.setDescription('The number of current IP interface on this device.')
agentStaticVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStaticVlanNumber.setStatus('current')
if mibBuilder.loadTexts: agentStaticVlanNumber.setDescription('The number of static VLAN on this device.')
agentRTC = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8))
agentRTCYear = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1980, 3999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRTCYear.setStatus('current')
if mibBuilder.loadTexts: agentRTCYear.setDescription('The number of the year.')
agentRTCMonth = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRTCMonth.setStatus('current')
if mibBuilder.loadTexts: agentRTCMonth.setDescription('The number of the month.')
agentRTCDate = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRTCDate.setStatus('current')
if mibBuilder.loadTexts: agentRTCDate.setDescription('The number of the date.')
agentRTCHour = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRTCHour.setStatus('current')
if mibBuilder.loadTexts: agentRTCHour.setDescription('The number of the hour.')
agentRTCMinute = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRTCMinute.setStatus('current')
if mibBuilder.loadTexts: agentRTCMinute.setDescription('The number of the hour.')
agentRTCSecond = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRTCSecond.setStatus('current')
if mibBuilder.loadTexts: agentRTCSecond.setDescription('The number of the second.')
agentRTCWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("date-Sunday", 1), ("date-Monday", 2), ("date-Tuesday", 3), ("date-Wednesday", 4), ("date-Thursday", 5), ("date-Friday", 6), ("date-Saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRTCWeekDay.setStatus('current')
if mibBuilder.loadTexts: agentRTCWeekDay.setDescription('The current week day.')
agentMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 9))
primaryPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1) + (0,1))
if mibBuilder.loadTexts: primaryPowerOn.setDescription('The trap is sent whenever the primary power is turn on.')
primaryPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1) + (0,2))
if mibBuilder.loadTexts: primaryPowerOff.setDescription('The trap is sent whenever the primary power is turn off.')
redundantPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1) + (0,3))
if mibBuilder.loadTexts: redundantPowerOn.setDescription('The trap is sent whenever the redundant power is turn on.')
redundantPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1) + (0,4))
if mibBuilder.loadTexts: redundantPowerOff.setDescription('The trap is sent whenever the redundant power is turn off.')
agentSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10))
agentSyslogState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogState.setStatus('current')
if mibBuilder.loadTexts: agentSyslogState.setDescription('This object decide the Syslog sending message enabled or disabled.')
agentSyslogMaxHostSupport = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogMaxHostSupport.setStatus('current')
if mibBuilder.loadTexts: agentSyslogMaxHostSupport.setDescription('The maximum number of syslog servers supported.')
agentSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3), )
if mibBuilder.loadTexts: agentSyslogHostTable.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostTable.setDescription('This table specifys syslog server configurations.')
agentSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1), ).setIndexNames((0, "SWCOMMGMT-MIB", "agentSyslogHostId"))
if mibBuilder.loadTexts: agentSyslogHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostEntry.setDescription('A list of information specifies syslog server configurations.')
agentSyslogHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSyslogHostId.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostId.setDescription('The index of syslog host.')
agentSyslogHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogHostIp.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostIp.setDescription('The IP address of the host.')
agentSyslogHostSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1, 3), Bits().clone(namedValues=NamedValues(("informational", 0), ("warning", 1), ("error", 2), ("fatal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogHostSeverity.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostSeverity.setDescription('The object indicates the severity level indicator.The device support four severity levels in SYSLOG protocol. The fatal(3) mapping to emergency and critical level.')
agentSyslogHostFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8))).clone('local7')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogHostFacility.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostFacility.setDescription('Some of the operating system daemons and processes have been assigned Facility values. Processes and daemons that have not been explicitly assigned a Facility may use any of the local use facilities or they may use the user-level Facility.')
agentSyslogHostUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(514, 530)).clone(514)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogHostUDPPort.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostUDPPort.setDescription('The object indicates UDP port number.')
agentSyslogHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("invalid", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSyslogHostState.setStatus('current')
if mibBuilder.loadTexts: agentSyslogHostState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - the syslog host disabled. enabled(3) - the syslog host enabled. invalid(4) - writing this value to the object, and then the corresponding entry will be removed from the table.')
agentRemoteUserLogState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 201, 1, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRemoteUserLogState.setStatus('current')
if mibBuilder.loadTexts: agentRemoteUserLogState.setDescription('This object decide the remote user log message will be shown on screen or not.')
mibBuilder.exportSymbols("SWCOMMGMT-MIB", agentMibCapabilityDescr=agentMibCapabilityDescr, agentTrustHostTable=agentTrustHostTable, agentMibCapabilityTable=agentMibCapabilityTable, agentTrustHostIPMask=agentTrustHostIPMask, agentRTCSecond=agentRTCSecond, agentSyslogHostState=agentSyslogHostState, agentWebState=agentWebState, agentSyslogState=agentSyslogState, agentMIBTraps=agentMIBTraps, agentIpNumOfIf=agentIpNumOfIf, primaryPowerOn=primaryPowerOn, agentCommunityLevel=agentCommunityLevel, agentSyslogHostUDPPort=agentSyslogHostUDPPort, agentFirmwareUpdateCtrl=agentFirmwareUpdateCtrl, agentRemoteUserLogState=agentRemoteUserLogState, agentCommunityTable=agentCommunityTable, agentStaticVlanNumber=agentStaticVlanNumber, agentSystemRestart=agentSystemRestart, agentFirmwareSourceAddr=agentFirmwareSourceAddr, agentIpSystemSubnetMask=agentIpSystemSubnetMask, PYSNMP_MODULE_ID=swComMgmtMIB, agentRuntimeSwVersion=agentRuntimeSwVersion, primaryPowerOff=primaryPowerOff, agentMibCapabilityType=agentMibCapabilityType, redundantPowerOn=redundantPowerOn, agentLogClearLog=agentLogClearLog, agentAutoLogoutConfig=agentAutoLogoutConfig, agentLogUploadLogSourceAddr=agentLogUploadLogSourceAddr, agentRs232PortConfig=agentRs232PortConfig, agentMibCapabilityIndex=agentMibCapabilityIndex, agentSyslogHostId=agentSyslogHostId, agentIpProtoConfig=agentIpProtoConfig, agentIpIfMacAddr=agentIpIfMacAddr, agentPrimaryPowerState=agentPrimaryPowerState, agentRTCYear=agentRTCYear, agentTrustHostId=agentTrustHostId, agentBasicInfo=agentBasicInfo, agentSyslogHostTable=agentSyslogHostTable, ErrorReturnCode=ErrorReturnCode, agentRTCDate=agentRTCDate, agentTrustHostEntry=agentTrustHostEntry, agentRTCWeekDay=agentRTCWeekDay, agentSyslogHostSeverity=agentSyslogHostSeverity, agentRedundantPowerState=agentRedundantPowerState, agentLogUploadLogState=agentLogUploadLogState, agentSerialPortParityBits=agentSerialPortParityBits, agentBasicConfig=agentBasicConfig, agentSerialPortDataBits=agentSerialPortDataBits, agentIpIfTable=agentIpIfTable, agentStatusConsoleInUse=agentStatusConsoleInUse, agentArpNumber=agentArpNumber, agentIpIfAddress=agentIpIfAddress, agentRTCMinute=agentRTCMinute, agentIpIfNetMask=agentIpIfNetMask, agentTrustHostState=agentTrustHostState, agentHwRevision=agentHwRevision, agentDeviceSerialNumber=agentDeviceSerialNumber, agentSyslogHostEntry=agentSyslogHostEntry, agentIpIfIndex=agentIpIfIndex, agentLogUploadLogFileName=agentLogUploadLogFileName, agentIpGetIpFromBootpServer=agentIpGetIpFromBootpServer, agentIpSystemIpAddr=agentIpSystemIpAddr, agentRTC=agentRTC, agentFirmwareFile=agentFirmwareFile, agentCommunitystate=agentCommunitystate, agentFactoryReset=agentFactoryReset, agentConfigInfo=agentConfigInfo, agentIpIfDefaultRouter=agentIpIfDefaultRouter, agentLogConfig=agentLogConfig, agentRTCMonth=agentRTCMonth, agentMgmtProtocolCapability=agentMgmtProtocolCapability, agentPromFwVersion=agentPromFwVersion, agentMibCapabilityEntry=agentMibCapabilityEntry, agentMibCapabilityVersion=agentMibCapabilityVersion, agentBaudRateConfig=agentBaudRateConfig, agentIpNumber=agentIpNumber, redundantPowerOff=redundantPowerOff, agentSyslog=agentSyslog, agentIpBootServerAddr=agentIpBootServerAddr, agentCommunityEntry=agentCommunityEntry, agentSyslogMaxHostSupport=agentSyslogMaxHostSupport, agentRTCHour=agentRTCHour, agentFirmwareUpdateState=agentFirmwareUpdateState, agentIpIfEntry=agentIpIfEntry, agentSyslogHostIp=agentSyslogHostIp, swComMgmtMIB=swComMgmtMIB, agentSyslogHostFacility=agentSyslogHostFacility, agentIpIfType=agentIpIfType, agentTelnetState=agentTelnetState, agentSerialPortStopBits=agentSerialPortStopBits, agentIpDefaultGateway=agentIpDefaultGateway, agentLogUploadLog=agentLogUploadLog, agentTblSize=agentTblSize, agentTrustHostIPAddr=agentTrustHostIPAddr, agentCommunityString=agentCommunityString)
