#
# PySNMP MIB module IDT1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IDT1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, enterprises, iso, Counter64, ObjectIdentity, experimental, Integer32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Unsigned32, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "enterprises", "iso", "Counter64", "ObjectIdentity", "experimental", "Integer32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Unsigned32", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
idt1 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 15))
idt1Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 15, 1))
idt1CfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1), )
if mibBuilder.loadTexts: idt1CfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgTable.setDescription('This table contains an entry for each of the manageable T1-PRI ISDN Cards in the chassis. It contains objects that reflect the current configuration of parameters that affect the operation of all the entities that reside on the given card.')
idt1CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1), ).setIndexNames((0, "IDT1-MIB", "idt1CfgIndex"))
if mibBuilder.loadTexts: idt1CfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgEntry.setDescription('There is one Configuration table entry per T1-PRI ISDN Card in the chassis.')
idt1CfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1CfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgIndex.setDescription('A unique value for each card in the chassis. The value of idt1CfgIndex matches the value of the index for the corresponding card entity in the entity table of the chassis MIB.')
idt1CfgAssgndISDNGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgAssgndISDNGateway.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgAssgndISDNGateway.setDescription('Identifies the NAS chassis slot of the Gateway Card assigned to this T1-PRI ISDN card. Range 0-16. Default=0(none).')
idt1CfgMdmCallsAllowedEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgMdmCallsAllowedEna.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgMdmCallsAllowedEna.setDescription('Indicates if modem calls are disabled/enabled for this T1-PRI ISDN Card. Default = enable(1).')
idt1CfgMdmRoutingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("roundRobin", 2), ("firstAvailable", 3), ("fixedAssignment", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgMdmRoutingMethod.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgMdmRoutingMethod.setDescription('Defines the mechanism used for modem call routing for this T1-PRI ISDN Card. Default = roundRobin(2).')
idt1CfgProjectSelectionR2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 255))).clone(namedValues=NamedValues(("q421", 1), ("r2", 2), ("r2Korea", 3), ("p7", 4), ("r2Malaysia", 5), ("r2Brazil", 6), ("r2Mexico", 7), ("r2China", 8), ("r2LME", 9), ("r2Venezuela", 10), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgProjectSelectionR2.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgProjectSelectionR2.setDescription('This object lets user select E1 CAS project options. Default = mfcBkR2(3).')
idt1CfgInfoMsgTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgInfoMsgTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgInfoMsgTimeOut.setDescription('This object sets the time out delay in seconds between INFO messages. This parameter is effective if overlap rx mode is enabled. Default = 12 ')
idt1CfgInbDNISLength = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgInbDNISLength.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgInbDNISLength.setDescription('This objects sets the total number of digits expected in the inbound phone number. In the E1-PRI this only is effective when overlap rx mode is enabled. Default = 15')
idt1CfgSelectCompanding = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alaw", 1), ("ulaw", 2), ("useCountryCode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgSelectCompanding.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgSelectCompanding.setDescription('Select companding (alaw or ulaw) for use with PCM encoded data. Default = alaw(1).')
idt1CfgAniNumberEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgAniNumberEnable.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgAniNumberEnable.setDescription('Allow the collection of A calling party phone number. This takes additional time, and is not allowed for all switches. Default = disable(2).')
idt1CfgNoBptyMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("analog", 1), ("digital", 2), ("unAllocatedNum", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgNoBptyMethod.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgNoBptyMethod.setDescription('This object sets the method for handling an incoming call when the B-party (Called Number) is not found within the <inPhoneNum> table.')
idt1CfgMaxISDNGwyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CfgMaxISDNGwyCalls.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CfgMaxISDNGwyCalls.setDescription('This object sets the maximum number of ISDN calls that can be terminated by the Gateway card. Default = 0.')
idt1Cr = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 15, 2))
idt1CrTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 15, 2, 1), )
if mibBuilder.loadTexts: idt1CrTable.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CrTable.setDescription('This table contains an entry for each of the manageable T1-PRI ISDN Cards in the chassis. It contains objects that reflect the current call routing configuration of the card.')
idt1CrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 15, 2, 1, 1), ).setIndexNames((0, "IDT1-MIB", "idt1CrIndex"), (0, "IDT1-MIB", "idt1CrPhNumIndex"))
if mibBuilder.loadTexts: idt1CrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CrEntry.setDescription('There is one Call Routing Table entry per T1-PRI ISDN Card in the chassis.')
idt1CrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1CrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CrIndex.setDescription("A unique value for each card in the chassis. The value of idt1CrIndex matches the value of the index for the corresponding card's entry in the entity table of the chassis MIB.")
idt1CrPhNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1CrPhNumIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CrPhNumIndex.setDescription('This object is the index for one of the 48 inbound call routing objects for this card.')
idt1CrInboundPhNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CrInboundPhNum.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CrInboundPhNum.setDescription('This is one of the 48 inbound call routing phone numbers.')
idt1CrInboundCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("analog", 1), ("digital", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1CrInboundCallType.setStatus('mandatory')
if mibBuilder.loadTexts: idt1CrInboundCallType.setDescription('This is one of the 48 inbound call routing call types. Default = analog(1).')
idt1Pl = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 15, 3))
idt1PlTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 15, 3, 1), )
if mibBuilder.loadTexts: idt1PlTable.setStatus('mandatory')
if mibBuilder.loadTexts: idt1PlTable.setDescription('This table contains an entry for each of the manageable T1-PRI ISDN Cards in the chassis. It contains objects that reflect the current reserved resource pool to DNIS mapping.')
idt1PlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 15, 3, 1, 1), ).setIndexNames((0, "IDT1-MIB", "idt1PlIndex"), (0, "IDT1-MIB", "idt1PlIDIndex"))
if mibBuilder.loadTexts: idt1PlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: idt1PlEntry.setDescription('There is one Reserved Resuorce Pool ID to DNIS Mapping Table entry per T1-PRI ISDN Card in the chassis.')
idt1PlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1PlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1PlIndex.setDescription("A unique value for each card in the chassis. The value of idt1PlIndex matches the value of the index for the corresponding card's entry in the entity table of the chassis MIB.")
idt1PlIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1PlIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1PlIDIndex.setDescription('This object is the index for one of the 12 pool IDs for this card.')
idt1PlDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1PlDNIS.setStatus('mandatory')
if mibBuilder.loadTexts: idt1PlDNIS.setDescription('This is the DNIS number associated with the POOL ID.')
idt1PlType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("analog", 2), ("digital", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1PlType.setStatus('mandatory')
if mibBuilder.loadTexts: idt1PlType.setDescription('This object is the pool type associated with the pool ID.')
idt1MdmRPA = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 15, 4))
idt1MdmRPATable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1), )
if mibBuilder.loadTexts: idt1MdmRPATable.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPATable.setDescription('This table contains an entry for each of the manageable T1-PRI ISDN Cards in the chassis. It contains objects that reflect the current Pool Assignment of the Pool Id to the modem device.')
idt1MdmRPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1, 1), ).setIndexNames((0, "IDT1-MIB", "idt1MdmRPAIndex"), (0, "IDT1-MIB", "idt1MdmRPAIDIndex"))
if mibBuilder.loadTexts: idt1MdmRPAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPAEntry.setDescription('There is one Reserved Pool Assignment to modem device Table entry per T1-PRI ISDN Card in the chassis.')
idt1MdmRPAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1MdmRPAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPAIndex.setDescription("A unique value for each card in the chassis. The value of idt1MdmRPA Index matches the value of the index for the corresponding card's entry in the entity table of the chassis MIB.")
idt1MdmRPAIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1MdmRPAIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPAIDIndex.setDescription('This object is the index for one of the 64 channel IDs for this card.')
idt1MdmRPASlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1MdmRPASlot.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPASlot.setDescription('The channel associated with the Id of Modem device Reserved resource Pool Assignment table.')
idt1MdmRPAChan = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1MdmRPAChan.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPAChan.setDescription('The slot associated with the Id of Modem device Reserved resource Pool Assignment table.')
idt1MdmRPAPoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1MdmRPAPoolID.setStatus('mandatory')
if mibBuilder.loadTexts: idt1MdmRPAPoolID.setDescription('The Pool Id assigned in the Modem device Reserved resource Pool Assignment table (1/2/3/4 <-> none/A/B/C/D).')
idt1GwyRPA = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 15, 5))
idt1GwyRPATable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 15, 5, 1), )
if mibBuilder.loadTexts: idt1GwyRPATable.setStatus('mandatory')
if mibBuilder.loadTexts: idt1GwyRPATable.setDescription('This table contains an entry for each of the manageable T1-PRI ISDN Cards in the chassis. It contains objects that reflect the current Pool Assignment of the Pool Id to the ISDN-Gateway(s).')
idt1GwyRPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 15, 5, 1, 1), ).setIndexNames((0, "IDT1-MIB", "idt1GwyRPAIndex"), (0, "IDT1-MIB", "idt1GwyRPASlotIndex"))
if mibBuilder.loadTexts: idt1GwyRPAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: idt1GwyRPAEntry.setDescription('There is one Reserved Pool Assignment to slot device Table entry per T1-PRI ISDN Card in the chassis.')
idt1GwyRPAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1GwyRPAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1GwyRPAIndex.setDescription("A unique value for each card in the chassis. The value of idt1GwyRPA Index matches the value of the index for the corresponding card's entry in the entity table of the chassis MIB.")
idt1GwyRPASlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idt1GwyRPASlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: idt1GwyRPASlotIndex.setDescription('This object is the index for one of the 16 Slots in the chassis.')
idt1GwyRPAPoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 15, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idt1GwyRPAPoolID.setStatus('mandatory')
if mibBuilder.loadTexts: idt1GwyRPAPoolID.setDescription('The Pool Id assigned in the ISDN-Gateway device Reserved resource Pool Assignment table (1/2/3/4 <-> none/A/B/C/D).')
mibBuilder.exportSymbols("IDT1-MIB", nas=nas, idt1GwyRPASlotIndex=idt1GwyRPASlotIndex, idt1CrInboundCallType=idt1CrInboundCallType, idt1CrEntry=idt1CrEntry, idt1CfgSelectCompanding=idt1CfgSelectCompanding, idt1MdmRPA=idt1MdmRPA, idt1PlEntry=idt1PlEntry, idt1Cfg=idt1Cfg, idt1PlTable=idt1PlTable, idt1CfgMdmRoutingMethod=idt1CfgMdmRoutingMethod, idt1MdmRPAPoolID=idt1MdmRPAPoolID, idt1PlIndex=idt1PlIndex, idt1GwyRPAEntry=idt1GwyRPAEntry, idt1GwyRPATable=idt1GwyRPATable, idt1CfgTable=idt1CfgTable, usr=usr, idt1PlDNIS=idt1PlDNIS, idt1CfgMaxISDNGwyCalls=idt1CfgMaxISDNGwyCalls, idt1CrInboundPhNum=idt1CrInboundPhNum, idt1=idt1, idt1Cr=idt1Cr, idt1GwyRPAPoolID=idt1GwyRPAPoolID, idt1CfgMdmCallsAllowedEna=idt1CfgMdmCallsAllowedEna, idt1GwyRPA=idt1GwyRPA, idt1MdmRPAIndex=idt1MdmRPAIndex, idt1CfgAssgndISDNGateway=idt1CfgAssgndISDNGateway, idt1MdmRPAEntry=idt1MdmRPAEntry, idt1CfgIndex=idt1CfgIndex, idt1MdmRPASlot=idt1MdmRPASlot, idt1MdmRPATable=idt1MdmRPATable, idt1PlType=idt1PlType, idt1CfgEntry=idt1CfgEntry, idt1CrTable=idt1CrTable, idt1GwyRPAIndex=idt1GwyRPAIndex, idt1CfgAniNumberEnable=idt1CfgAniNumberEnable, idt1CrIndex=idt1CrIndex, idt1PlIDIndex=idt1PlIDIndex, idt1CfgProjectSelectionR2=idt1CfgProjectSelectionR2, idt1CrPhNumIndex=idt1CrPhNumIndex, idt1MdmRPAChan=idt1MdmRPAChan, idt1CfgInfoMsgTimeOut=idt1CfgInfoMsgTimeOut, idt1CfgInbDNISLength=idt1CfgInbDNISLength, idt1MdmRPAIDIndex=idt1MdmRPAIDIndex, idt1CfgNoBptyMethod=idt1CfgNoBptyMethod, idt1Pl=idt1Pl)
