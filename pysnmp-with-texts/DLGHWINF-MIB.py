#
# PySNMP MIB module DLGHWINF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLGHWINF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
dlgHardwareInfo, dialogic = mibBuilder.importSymbols("DLGC-GLOBAL-REG", "dlgHardwareInfo", "dialogic")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, NotificationType, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Counter32, Unsigned32, IpAddress, ModuleIdentity, Bits, ObjectIdentity, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Counter32", "Unsigned32", "IpAddress", "ModuleIdentity", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dlgHiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 1, 1))
dlgHiComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2))
dlgHiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1))
dlgHiIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2))
dlgHiOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1))
dlgHiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiMibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
dlgHiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiMibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support. no changes to any pre-existing information has occurred.')
dlgHiMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiMibCondition.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiMibCondition.setDescription('The overall condition. This object represents the overall status of the Dialogic Hardware Information system represented by this MIB. Other - The status of the MIB is Unknown OK - The status of the MIB is OK Degraded - Some statuses in the MIB are not OK Failed - Most statuses in the MIB are not OK')
dlgHiOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiOsCommonPollFreq.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonPollFreq.setDescription("The Agent's polling frequency in seconds. The frequency, in seconds, at which the Agent updates the operational status of the individual devices within the device table. A value of zero indicates that the Agent will not check the status of the indivdual devices. The default value is 60 (60 seconds). In this case the Agent checks each individual device every 60 seconds to make sure it is still operational. Should a device fail, it's status will set to failed and a trap is sent to the management application. Setting the poll frequency to a value too low can impact system performance.")
dlgHiOsCommonNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiOsCommonNumberOfModules.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonNumberOfModules.setDescription('The number of modules in the OS Common Module table.')
dlgHiOsLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiOsLogEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsLogEnable.setDescription("The Agent's log enable bit 0 - disabled Setting this variable to this value will disable the trap logging 1 - enabled Setting this variable to this value will enable the trap logging ")
dlgHiOsTestTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiOsTestTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsTestTrapEnable.setDescription(' Every time this bit is set, test trap is sent from the agent ')
dlgHiIdentSystemServicesNameForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesNameForTrap.setStatus('mandatory')
dlgHiIdentSystemServicesStatusForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stop-pending", 3), ("stopped", 4), ("start-pending", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesStatusForTrap.setStatus('mandatory')
dlgHiIdentIndexForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentIndexForTrap.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentIndexForTrap.setDescription('An index that uniquely specifies each device. This value is not necessarily contiguous')
dlgHiIdentModelForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentModelForTrap.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentModelForTrap.setDescription("Dialogic board Model. This is the Dialogic board's model name and can be used for identification purposes.")
dlgHiIdentOperStatusForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentOperStatusForTrap.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentOperStatusForTrap.setDescription('Dialogic board Operational Status. This is the overall condition of the Dialogic board. The following values are defined other(1) The board does not support board condition monitoring. ok(2) The board is operating normally. No user action is required. degraded(3) The board is partially failed. The board may need to be reset. failed(4) The board has failed. The board should be reset NOTE: In the implmentation of this version of the MIB (Major 1, Minor 2), SpanCards do not support the degraded state. ')
dlgHiIdentAdminStatusForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stopped", 3), ("disabled", 4), ("diagnose", 5), ("start-pending", 6), ("stop-pending", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentAdminStatusForTrap.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentAdminStatusForTrap.setDescription("Dialogic board Admin Status. This is the Administrative Status of the Dialogic board. The following values are defined other(1) The board's admin status in unavailable. started(2) The board has been started. stopped(3) The board is stopped. disabled(4) The board is disabled. diagnose(5) The board is being diagnosed. start-pending(6) The board is in the process of starting. stop-pending(7) The board is in the process of stopping. ")
dlgHiIdentSerNumForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSerNumForTrap.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSerNumForTrap.setDescription('Dialogic board Serial Number. This is the Dialogic board serial number and can be used for identification purposes. On many boards the serial number appears on the back of the board.')
dlgHiIdentErrorMessageForTrap = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentErrorMessageForTrap.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentErrorMessageForTrap.setDescription('Dialogic board Error Message. This value represents the error message associated with a failing Dialogic board.')
dlgHiOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3), )
if mibBuilder.loadTexts: dlgHiOsCommonModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModuleTable.setDescription('A table of software modules that provide an interface to the devicethis MIB describes.')
dlgHiOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3, 1), ).setIndexNames((0, "DLGHWINF-MIB", "dlgHiOsCommonModuleIndex"))
if mibBuilder.loadTexts: dlgHiOsCommonModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModuleEntry.setDescription('A description of a software module that provides an interface to the device this MIB describes.')
dlgHiOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiOsCommonModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModuleIndex.setDescription('A unique index for this module description.')
dlgHiOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiOsCommonModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModuleName.setDescription('The module name.')
dlgHiOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiOsCommonModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModuleVersion.setDescription('Version of the module.')
dlgHiOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiOsCommonModuleDate.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModuleDate.setDescription('The module date. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant.')
dlgHiOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiOsCommonModulePurpose.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiOsCommonModulePurpose.setDescription('The purpose of the module described in this entry.')
dlgHiIdentNumberOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentNumberOfDevices.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentNumberOfDevices.setDescription('Number of Dialogic device in the system. A device may be a physical board, a channel on a board or an embedded component on a board')
dlgHiIdentServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stop-pending", 3), ("stopped", 4), ("start-pending", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiIdentServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentServiceStatus.setDescription('Dialogic Service Status This is the overall status of the Dialogic system service. The following values are defined: other(1) The service status is unknown. started(2) The service status is running - boards are started. Setting the variable to this value will fail. stop-pending(3) The service is in the act of stopping. Setting the variable to this value when the current condition is started(2) will cause the service to begin stopping, otherwise it will fail. stopped(4) The service status is stopped - boards are stopped. Setting the variable to this value will fail. start-pending(5) The service is in the act of starting. Setting the variable to this value when the current condition is stopped(4) will cause the service to begin starting, othewise it will fail.')
dlgHiIdentServiceChangeDate = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentServiceChangeDate.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentServiceChangeDate.setDescription('The date and time the service was last started or stopped. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant.')
dlgHiIdentTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiIdentTrapMask.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentTrapMask.setDescription("Trap Enable mask. This variable is a bit mask which can be used to enable or disable certain enterprise specific traps. A '1' is used to enable the trap, a '0' disables it. Bit 0 - (1) enables Traps upon Dialogic Service Status transitions to the Stopped or Started State. Bit 1 - (1) enables Traps when a specific board Condition transitions to the Failed State. Bit 2 - (1) enables the dlgDsx1Alarm trap from the DS1 MIB. This trap indicates the beginning and end of a new alarm condition. Bit 3 - (1) enables the dlgDsx1SwEvtMskTrap trap from the DS1 MIB. This trap indicates that the DS1 Event Mask has been changed. Bit 4 - (1) enables the dlgIsdnDChanged trap from the ISDN MIB. This trap indicates the current operational status of LAPD of a particular D channel has changed Bit 5 - (1) enables the dlgIsdnBChanged trap from the DS1 MIB. This trap indicates the current operational status of LAPD of a particular B channel has changed ")
dlgHiIdentSystemServicesTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: dlgHiIdentSystemServicesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesTable.setDescription('Dialogic-Related system services table.')
dlgHiIdentSystemServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "DLGHWINF-MIB", "dlgHiIdentSystemServicesIndex"))
if mibBuilder.loadTexts: dlgHiIdentSystemServicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesEntry.setDescription('Dialogic-Related system services table entry.')
dlgHiIdentSystemServicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesIndex.setDescription('An index that uniquely specifies each system service. This value is not necessarily contiguous')
dlgHiIdentSystemServicesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesName.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesName.setDescription('System Service Name. This is the name of the system service used for Identification Purposes.')
dlgHiIdentSystemServicesScmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesScmName.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesScmName.setDescription('SCM System Service Name. This is the name of the system service that is given to SCM (Service Control Manager) and is used by SCM to identify the service.')
dlgHiIdentSystemServicesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stop-pending", 3), ("stopped", 4), ("start-pending", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesStatus.setDescription('Service Status This is the overall status of the Dialogic system service. The following values are defined: other(1) The service status is unknown. started(2) The service status is running - boards are started. Setting the variable to this value will fail. stop-pending(3) The service is in the act of stopping. Setting the variable to this value when the current condition is started(2) will cause the service to begin stopping, otherwise it will fail. stopped(4) The service status is stopped - boards are stopped. Setting the variable to this value will fail. start-pending(5) The service is in the act of starting. Setting the variable to this value when the current condition is stopped(4) will cause the service to begin starting, othewise it will fail.')
dlgHiIdentSystemServicesChangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSystemServicesChangeDate.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSystemServicesChangeDate.setDescription('The date and time the service was last started or stopped. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant.')
dlgHiIdentTable = MibTable((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: dlgHiIdentTable.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentTable.setDescription('Dialogic board Identification Table.')
dlgHiIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "DLGHWINF-MIB", "dlgHiIdentIndex"))
if mibBuilder.loadTexts: dlgHiIdentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentEntry.setDescription('Dialogic board Identification Table Entry.')
dlgHiIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentIndex.setDescription('An index that uniquely specifies each device. This value is not necessarily contiguous')
dlgHiIdentModel = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentModel.setDescription("Dialogic board Model. This is the Dialogic board's model name and can be used for identification purposes.")
dlgHiIdentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("release4span", 2), ("dm3", 3), ("gammaCP", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentType.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentType.setDescription('Dialogic board type. This indicates which family of boards this device belongs to. other(1) -- none of the following release4span(2) -- Proline/2V up to D/600SC-2E1 boards dm3(3) -- DM3 based board gammaCP(4) -- Gamma CP/x series antares(5) -- Antares based board')
dlgHiIdentFuncDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentFuncDescr.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentFuncDescr.setDescription('Dialogic board Function Description. This provides a description of the functionality provided by the Dialogic board. If the functional description of the board is unavailable, then this string will be of length zero (0).')
dlgHiIdentSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSerNum.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSerNum.setDescription('Dialogic board Serial Number. This is the Dialogic board serial number and can be used for identification purposes. On many boards the serial number appears on the back of the board.')
dlgHiIdentFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentFWName.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentFWName.setDescription("Dialogic Firmware Name. This is the name of the firmware downloaded to this Dialogic board. If multiple different firmwares are loaded the filenames will be separated by a '\\'. If the firmware name is unavailable, then this strng will be of length zero (0).")
dlgHiIdentFWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentFWVers.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentFWVers.setDescription("Dialogic Firmware Version. This is the version of the firmware downloaded to this Dialogic board. If multiple different firmwares are loaded then each firmware version will be separated by a '\\'. If the Dialogic firmware version is unavailable, then this string will be of length zero (0).")
dlgHiIdentMemBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentMemBaseAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentMemBaseAddr.setDescription('Dialogic board Base Memory Address. This is the Memory address where the Dialogic board has been installed on the system. If the Dialogic board does not use system memory then a value of zero (0) is returned')
dlgHiIdentIOBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentIOBaseAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentIOBaseAddr.setDescription('Dialogic board Base I/O Port Address. This is the I/O Port address where the Dialogic board has been installed on the system. If the Dialogic board does not use a system I/O Port then a value of zero (0) is returned')
dlgHiIdentIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentIrq.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentIrq.setDescription('Dialogic board IRQ (Interrupt) Level. This is the Interrupt Level used by the Dialogic board installed on the system. If the Dialogic board does not use an Interrupt then a value of zero (0) is returned')
dlgHiIdentBoardID = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentBoardID.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentBoardID.setDescription('Dialogic board Board Locator ID. This is the Unique Board Locator ID set by the thumbwheel on certain Dialogic boards. This may be used for identification purposes. If the Dialogic board does not have a Unique Board Locator ID setting then a value of negative one (-1) is returned')
dlgHiIdentPCISlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentPCISlotID.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentPCISlotID.setDescription('Dialogic board PCI Slot ID. This is a PCI slot identifier where the Dialogic board is installed. This may be used for identification purposes. If the Dialogic board is not a PCI board or if this info is not available then a value of zero (0) is returned')
dlgHiIdentOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentOperStatus.setDescription('Dialogic board Operational Status. This is the overall condition of the Dialogic board. The following values are defined other(1) The board does not support board condition monitoring. ok(2) The board is operating normally. No user action is required. degraded(3) The board is partially failed. The board may need to be reset. failed(4) The board has failed. The board should be reset NOTE: In the implmentation of this version of the MIB (Major 1, Minor 2), SpanCards do not support the degraded state. ')
dlgHiIdentAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stopped", 3), ("disabled", 4), ("diagnose", 5), ("start-pending", 6), ("stop-pending", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgHiIdentAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentAdminStatus.setDescription("Dialogic board Admin Status. This is the Administrative Status of the Dialogic board. The following values are defined other(1) The board's admin status in unavailable. started(2) The board has been started. stopped(3) The board is stopped. disabled(4) The board is disabled. diagnose(5) The board is being diagnosed. start-pending(6) The board is in the process of starting. stop-pending(7) The board is in the process of stopping. ")
dlgHiIdentErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentErrorMessage.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentErrorMessage.setDescription('Dialogic board Error Message. This value represents the error message associated with a failing Dialogic board.')
dlgHiIdentDeviceChangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentDeviceChangeDate.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentDeviceChangeDate.setDescription('The date and time the boards operational status last changed. field octets contents range ===== ====== ======= ===== 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minute 0..59 6 7 second 0..60 (use 60 for leap-second) This field will be set to year = 0 if the agent cannot provide the module date. The hour, minute, and second field will be set to zero (0) if they are not relevant.')
dlgHiIdentSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 17), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentSpecific.setDescription('A reference to MIB definitions specific to the particular board type specified in the row of the table If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.')
dlgHiIdentPCIBusID = MibTableColumn((1, 3, 6, 1, 4, 1, 3028, 1, 1, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgHiIdentPCIBusID.setStatus('mandatory')
if mibBuilder.loadTexts: dlgHiIdentPCIBusID.setDescription('Dialogic board PCI Bus ID. This is a PCI Bus identifier where the Dialogic board is installed. This may be used for identification purposes. If the Dialogic board is not a PCI board or if this info is not available then a value of zero (0) is returned')
dlgHiServiceChanged = NotificationType((1, 3, 6, 1, 4, 1, 3028) + (0,1001)).setObjects(("SNMPv2-MIB", "sysName"), ("DLGHWINF-MIB", "dlgHiIdentServiceStatus"))
if mibBuilder.loadTexts: dlgHiServiceChanged.setDescription('The Dialogic service condition has been changed Description: The dlgHiIdentServiceChanged trap indicates that the Dialogic service has transitioned to either the started or stopped state. This may occur by performing a set on the dlgHiIdentServiceStatus variable or by controlling the service directly on the machine which generated the trap. Action: This trap is informational. A management console may want to update any current device table views since attributes of the device may change when the Dialogic service is started or stopped')
dlgHiboardStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 3028) + (0,1002)).setObjects(("SNMPv2-MIB", "sysName"), ("DLGHWINF-MIB", "dlgHiIdentIndexForTrap"), ("DLGHWINF-MIB", "dlgHiIdentOperStatusForTrap"), ("DLGHWINF-MIB", "dlgHiIdentAdminStatusForTrap"), ("DLGHWINF-MIB", "dlgHiIdentModelForTrap"), ("DLGHWINF-MIB", "dlgHiIdentSerNumForTrap"), ("DLGHWINF-MIB", "dlgHiIdentErrorMessageForTrap"))
if mibBuilder.loadTexts: dlgHiboardStatusChanged.setDescription('The condition of a Dialogic board has changed to failed or ok Description: The dlgHiIdentboardStatusChanged trap indicates that a device in the device table has transitioned from the ok state to the failed state or vice versa. In general this indicates that on-board firmware has crashed and is no longer responding or that the board has gone bad. Should the board recover from the failed state, the state will be transitioned back to the ok state and a trap will be generated to indicate the board is okay again. Action: If the state has transitioned to the failed then shutdown any active applications and reset the Dialogic service. This will cause the on-board firmware to be re-downloaded. If the problem persists you should run the device diagnostics on the board to make sure it is okay.')
dlgHiNonDlgcServiceChanged = NotificationType((1, 3, 6, 1, 4, 1, 3028) + (0,1003)).setObjects(("SNMPv2-MIB", "sysName"), ("DLGHWINF-MIB", "dlgHiIdentSystemServicesNameForTrap"), ("DLGHWINF-MIB", "dlgHiIdentSystemServicesStatusForTrap"))
if mibBuilder.loadTexts: dlgHiNonDlgcServiceChanged.setDescription('A Dialogic-Related service condition has been changed Description: The dlgHiNonDlgcServiceChanged trap indicates that a Dialogic-Related service (any UNIX Service other than the Dialogic System Service that has dependencies on Dialogic products) has transitioned to either the started or stopped state. This may occur by performing a set on the dlgHiIdentSystemServicesStatus variable or by controlling the service directly on the machine which generated the trap. Action: This trap is informational. A management console may want to update any current device table views since attributes of the device may change when the Dialogic-Related service is started or stopped')
dlgHiTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 3028) + (0,1004)).setObjects(("SNMPv2-MIB", "sysName"))
if mibBuilder.loadTexts: dlgHiTestTrap.setDescription('This trap is to test if the trap sending mechanism is acting properly Description: A managed node will request from the hardware agent to send this trap with the name of the node the agent resides on to the manager. Action: This trap is informational to indicate that the hardware agent is capable of sending traps to the manager.')
mibBuilder.exportSymbols("DLGHWINF-MIB", dlgHiOsLogEnable=dlgHiOsLogEnable, dlgHiIdentServiceChangeDate=dlgHiIdentServiceChangeDate, dlgHiIdentSpecific=dlgHiIdentSpecific, dlgHiIdentType=dlgHiIdentType, dlgHiOsCommonModuleName=dlgHiOsCommonModuleName, dlgHiOsCommonModuleDate=dlgHiOsCommonModuleDate, dlgHiIdentModel=dlgHiIdentModel, dlgHiOsCommon=dlgHiOsCommon, dlgHiIdentFuncDescr=dlgHiIdentFuncDescr, dlgHiIdentPCISlotID=dlgHiIdentPCISlotID, dlgHiIdentFWVers=dlgHiIdentFWVers, dlgHiIdentMemBaseAddr=dlgHiIdentMemBaseAddr, dlgHiNonDlgcServiceChanged=dlgHiNonDlgcServiceChanged, dlgHiOsTestTrapEnable=dlgHiOsTestTrapEnable, dlgHiIdentSystemServicesTable=dlgHiIdentSystemServicesTable, dlgHiIdentFWName=dlgHiIdentFWName, dlgHiMibRevMajor=dlgHiMibRevMajor, dlgHiMibRevMinor=dlgHiMibRevMinor, dlgHiOsCommonModuleIndex=dlgHiOsCommonModuleIndex, dlgHiIdentBoardID=dlgHiIdentBoardID, dlgHiIdentErrorMessageForTrap=dlgHiIdentErrorMessageForTrap, dlgHiOsCommonModuleEntry=dlgHiOsCommonModuleEntry, dlgHiIdentOperStatusForTrap=dlgHiIdentOperStatusForTrap, dlgHiInterface=dlgHiInterface, dlgHiOsCommonNumberOfModules=dlgHiOsCommonNumberOfModules, dlgHiIdentSystemServicesScmName=dlgHiIdentSystemServicesScmName, dlgHiComponent=dlgHiComponent, dlgHiIdentTable=dlgHiIdentTable, dlgHiIdentSystemServicesStatus=dlgHiIdentSystemServicesStatus, dlgHiIdentSystemServicesStatusForTrap=dlgHiIdentSystemServicesStatusForTrap, dlgHiIdentIndex=dlgHiIdentIndex, dlgHiIdentSystemServicesChangeDate=dlgHiIdentSystemServicesChangeDate, dlgHiIdentSystemServicesEntry=dlgHiIdentSystemServicesEntry, dlgHiTestTrap=dlgHiTestTrap, dlgHiIdentSystemServicesNameForTrap=dlgHiIdentSystemServicesNameForTrap, dlgHiIdentErrorMessage=dlgHiIdentErrorMessage, dlgHiIdentNumberOfDevices=dlgHiIdentNumberOfDevices, dlgHiIdentIrq=dlgHiIdentIrq, dlgHiIdentEntry=dlgHiIdentEntry, dlgHiOsCommonModuleTable=dlgHiOsCommonModuleTable, dlgHiIdentIOBaseAddr=dlgHiIdentIOBaseAddr, dlgHiIdentOperStatus=dlgHiIdentOperStatus, dlgHiServiceChanged=dlgHiServiceChanged, dlgHiMibCondition=dlgHiMibCondition, dlgHiIdentAdminStatusForTrap=dlgHiIdentAdminStatusForTrap, dlgHiIdentSerNum=dlgHiIdentSerNum, dlgHiIdentSystemServicesIndex=dlgHiIdentSystemServicesIndex, dlgHiOsCommonModuleVersion=dlgHiOsCommonModuleVersion, dlgHiOsCommonModulePurpose=dlgHiOsCommonModulePurpose, dlgHiboardStatusChanged=dlgHiboardStatusChanged, dlgHiIdentTrapMask=dlgHiIdentTrapMask, dlgHiIdentModelForTrap=dlgHiIdentModelForTrap, dlgHiIdentSerNumForTrap=dlgHiIdentSerNumForTrap, dlgHiIdentPCIBusID=dlgHiIdentPCIBusID, dlgHiIdentSystemServicesName=dlgHiIdentSystemServicesName, dlgHiIdentServiceStatus=dlgHiIdentServiceStatus, dlgHiMibRev=dlgHiMibRev, dlgHiIdentIndexForTrap=dlgHiIdentIndexForTrap, dlgHiIdent=dlgHiIdent, dlgHiOsCommonPollFreq=dlgHiOsCommonPollFreq, dlgHiIdentAdminStatus=dlgHiIdentAdminStatus, dlgHiIdentDeviceChangeDate=dlgHiIdentDeviceChangeDate)
