#
# PySNMP MIB module WHISP-PLV-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WHISP-PLV-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, ModuleIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Counter32, TimeTicks, Gauge32, IpAddress, ObjectIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Counter32", "TimeTicks", "Gauge32", "IpAddress", "ObjectIdentity", "Unsigned32", "NotificationType")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
whispPlvModem, = mibBuilder.importSymbols("WHISP-GLOBAL-REG-MIB", "whispPlvModem")
whispPlvModemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1))
whispPlvModemMIB.setRevisions(('2006-04-04 10:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: whispPlvModemMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: whispPlvModemMIB.setLastUpdated('200604041030Z')
if mibBuilder.loadTexts: whispPlvModemMIB.setOrganization('Motorola')
if mibBuilder.loadTexts: whispPlvModemMIB.setContactInfo('Canopy Technical Support email: technical-support@canopywireless.com')
if mibBuilder.loadTexts: whispPlvModemMIB.setDescription('Initial Version.')
whispPlvModemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1))
whispPlvModemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1))
modemInfoModel = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoModel.setStatus('current')
if mibBuilder.loadTexts: modemInfoModel.setDescription('This object indicates the Modem Model Number.')
modemInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: modemInfoSerialNumber.setDescription('This object indicates the Modem Serial Number.')
modemInfoDeviceMac = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoDeviceMac.setStatus('current')
if mibBuilder.loadTexts: modemInfoDeviceMac.setDescription('This object indicates the Modem Device MAC Address.')
modemInfoPlcMac = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoPlcMac.setStatus('current')
if mibBuilder.loadTexts: modemInfoPlcMac.setDescription('This object indicates the Modem PLC MAC Address')
modemInfoHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoHardwareVer.setStatus('current')
if mibBuilder.loadTexts: modemInfoHardwareVer.setDescription('This object indicates the Modem Hardware Version.')
modemInfoDeviceFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoDeviceFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: modemInfoDeviceFirmwareVer.setDescription('This object indicates the Modem Firmware Version.')
modemInfoBootLoaderVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoBootLoaderVer.setStatus('current')
if mibBuilder.loadTexts: modemInfoBootLoaderVer.setDescription('This object indicates the Modem Boot Loader Version.')
modemInfoSimFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoSimFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: modemInfoSimFirmwareVer.setDescription('This object indicates the Intellon Simple Module Firmware Version.')
modemInfoDeviceUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notStarted", 1), ("inProgress", 2), ("failed", 3), ("successful", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoDeviceUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: modemInfoDeviceUpgradeStatus.setDescription('This object indicates the Modems last Software Upgrade Status. 1 - Upgrade not started 2 - Upgrade in progress 3 - Last Upgrade failed 4 - Last Upgrade was successful.')
modemInfoSimUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notStarted", 1), ("inProgress", 2), ("failed", 3), ("successful", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoSimUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: modemInfoSimUpgradeStatus.setDescription('This object indicates the Intellon Simple Module Firmware Upgrade Status. 1 - Upgrade not started 2 - Upgrade in progress 3 - Last Upgrade failed 4 - Last Upgrade was successful.')
modemInfoCurrentMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("nat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoCurrentMode.setStatus('current')
if mibBuilder.loadTexts: modemInfoCurrentMode.setDescription('This object indicates the current operating mode of the Modem. 1 - Bridge Mode 2 - NAT Mode.')
modemInfoActiveBandwidthConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configured", 1), ("provisioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoActiveBandwidthConfig.setStatus('current')
if mibBuilder.loadTexts: modemInfoActiveBandwidthConfig.setDescription('This object indicates if the Active Bandwidth settings are either Configured OR Provisioned. ')
modemInfoActiveUpLinkBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fullSpeed", 1), ("u64Kbps", 2), ("u128Kbps", 3), ("u256Kbps", 4), ("u512Kbps", 5), ("u1Mbps", 6), ("u4Mbps", 7), ("u10Mbps", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoActiveUpLinkBandwidth.setStatus('current')
if mibBuilder.loadTexts: modemInfoActiveUpLinkBandwidth.setDescription('This object indicates if the Active Bandwidth settings are either Configured OR Provisioned. ')
modemInfoActiveDownLinkBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fullSpeed", 1), ("d64Kbps", 2), ("d128Kbps", 3), ("d256Kbps", 4), ("d512Kbps", 5), ("d1Mbps", 6), ("d4Mbps", 7), ("d10Mbps", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemInfoActiveDownLinkBandwidth.setStatus('current')
if mibBuilder.loadTexts: modemInfoActiveDownLinkBandwidth.setDescription('This object indicates if the Active Bandwidth settings are either Configured OR Provisioned. ')
whispPlvModemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2))
modemConfPacketPriorityConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixedQoS", 1), ("tos", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfPacketPriorityConfig.setStatus('current')
if mibBuilder.loadTexts: modemConfPacketPriorityConfig.setDescription('This object is used to configure 802.1p Packet Priority type. 1 - Fixed QoS 2 - QoS Based on ToS.')
modemConfFixedQoSConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("default", 1), ("background", 2), ("bestEffort", 3), ("excellentEffort", 4), ("controlLoad", 5), ("videoOrAudio", 6), ("voice", 7), ("networkControl", 8))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfFixedQoSConfig.setStatus('current')
if mibBuilder.loadTexts: modemConfFixedQoSConfig.setDescription('This object is used to configure Fixed QoS type.')
modemConfUpLinkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fullSpeed", 1), ("u64Kbps", 2), ("u128Kbps", 3), ("u256Kbps", 4), ("u512Kbps", 5), ("u1Mbps", 6), ("u4Mbps", 7), ("u10Mbps", 8))).clone('fullSpeed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfUpLinkDataRate.setStatus('current')
if mibBuilder.loadTexts: modemConfUpLinkDataRate.setDescription('This object is used to configure Uplink Data Rate.')
modemConfDownLinkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("fullSpeed", 1), ("d64Kbps", 2), ("d128Kbps", 3), ("d256Kbps", 4), ("d512Kbps", 5), ("d1Mbps", 6), ("d4Mbps", 7), ("d10Mbps", 8))).clone('fullSpeed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfDownLinkDataRate.setStatus('current')
if mibBuilder.loadTexts: modemConfDownLinkDataRate.setDescription('This object is used to configure Downlink Data Rate.')
modemConfPSD = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(84, 84)).setFixedLength(84)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfPSD.setStatus('current')
if mibBuilder.loadTexts: modemConfPSD.setDescription('This object indicates the Power Spectral Density of the signal, at all the 84 carriers, that the device transmits. Starting at the left most octet, which represents the spectral value at channel number 0, each octet represents the spectral value at the corresponding channel number. The channel numbers 4, 5, 13, 14, 29, 49, 50, 51, 69 and 70 are masked and their spectral values cannot be changed.')
modemConfUpLinkMir = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 6), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfUpLinkMir.setStatus('current')
if mibBuilder.loadTexts: modemConfUpLinkMir.setDescription("This object is used to configure Uplink Maximum Information Rate. This object is for configuring the Data Rate in Kbps, instead of enumerations, as in 'modemConfUpLinkDataRate'. If this object is configured to a Data Rate, which is not supported by the Modem, it will be internally converted to the nearest higher value supported by the Modem. Modem supports only the following Data Rates: 64Kbps, 128Kbps, 256Kbps, 512Kbps, 1Mbps, 4Mbps, 10Mbps and 85Mbps(Full Speed).")
modemConfDownLinkMir = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 2, 7), Integer32()).setUnits('Kilobits/sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfDownLinkMir.setStatus('current')
if mibBuilder.loadTexts: modemConfDownLinkMir.setDescription("This object is used to configure Downlink Maximum Information Rate. This object is for configuring the Data Rate in Kbps, instead of enumerations, as in 'modemConfDownLinkDataRate'. If this object is configured to a Data Rate, which is not supported by the Modem, it will be internally converted to the nearest higher value supported by the Modem. Modem supports only the following Data Rates: 64Kbps, 128Kbps, 256Kbps, 512Kbps, 1Mbps, 4Mbps, 10Mbps and 85Mbps(Full Speed)")
whispPlvModemTrapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3))
modemConfTrapIp1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp1.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp1.setDescription('This object is used to configure IP Address of SNMP Trap Client #1.')
modemConfTrapCommStr1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr1.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr1.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #1.')
modemConfTrapIp2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp2.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp2.setDescription('This object is used to configure IP Address of SNMP Trap Client #2.')
modemConfTrapCommStr2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr2.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr2.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #2.')
modemConfTrapIp3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp3.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp3.setDescription('This object is used to configure IP Address of SNMP Trap Client #3.')
modemConfTrapCommStr3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr3.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr3.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #3.')
modemConfTrapIp4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp4.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp4.setDescription('This object is used to configure IP Address of SNMP Trap Client #4.')
modemConfTrapCommStr4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr4.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr4.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #4.')
modemConfTrapIp5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp5.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp5.setDescription('This object is used to configure IP Address of SNMP Trap Client #5.')
modemConfTrapCommStr5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr5.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr5.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #5.')
modemConfTrapIp6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp6.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp6.setDescription('This object is used to configure IP Address of SNMP Trap Client #6.')
modemConfTrapCommStr6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr6.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr6.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #6.')
modemConfTrapIp7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp7.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp7.setDescription('This object is used to configure IP Address of SNMP Trap Client #7.')
modemConfTrapCommStr7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr7.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr7.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #7.')
modemConfTrapIp8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp8.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp8.setDescription('This object is used to configure IP Address of SNMP Trap Client #8.')
modemConfTrapCommStr8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr8.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr8.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #8.')
modemConfTrapIp9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp9.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp9.setDescription('This object is used to configure IP Address of SNMP Trap Client #9.')
modemConfTrapCommStr9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr9.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr9.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #9.')
modemConfTrapIp10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapIp10.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapIp10.setDescription('This object is used to configure IP Address of SNMP Trap Client #10.')
modemConfTrapCommStr10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemConfTrapCommStr10.setStatus('current')
if mibBuilder.loadTexts: modemConfTrapCommStr10.setDescription('This object is used to configure SNMP CommStrunity string for Trap Client #10.')
whispPlvModemAdmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4))
modemAdmConfIpConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfIpConfig.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfIpConfig.setDescription('This object is used to enable or disable the DHCP client, to configure LAN IP Address of the Modem. If the NAT functionality is enabled in the Modem, user will not be able to enable DHCP client to configure the IP address and this object should behave as a read-only object.')
modemAdmConfIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfIp.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfIp.setDescription('This object is used to configure IP Address of the Modem. If the NAT functionality is enabled in the Modem, then this object represents the LAN IP Address.')
modemAdmConfIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfIpSubnetMask.setDescription('This object is used to configure IP Subnet Mask of the Modem. If the NAT functionality is enabled in the Modem, then this object represents the LAN IP Subnet Mask.')
modemAdmConfNEK = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfNEK.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfNEK.setDescription('This object is used to configure Network Encryption Key of the Modem.')
modemAdmConfSnmpGetCommStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfSnmpGetCommStr.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfSnmpGetCommStr.setDescription("This object is used to configure SNMP 'Read' community string of the Modem.")
modemAdmConfSnmpSetCommStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfSnmpSetCommStr.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfSnmpSetCommStr.setDescription("This object is used to configure SNMP 'Read-Write' community string of the Modem.")
modemAdmConfSnmpAdminCommStr = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfSnmpAdminCommStr.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfSnmpAdminCommStr.setDescription("This object is used to configure SNMP 'Admin' community string of the Modem.")
modemAdmConfLoginUsername = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfLoginUsername.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfLoginUsername.setDescription("This object is used to configure Modem's System Management Login Username.")
modemAdmConfLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfLoginPassword.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfLoginPassword.setDescription("This object is used to configure Modem's System Management Login Password.")
modemAdmConfFtpServerIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfFtpServerIp.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfFtpServerIp.setDescription('This object is used to configure IP Address of FTP server hosting auto-upgrade files.')
modemAdmConfFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfFtpUsername.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfFtpUsername.setDescription('This object is used to configure Username to login to a FTP server, for use with FTP-based auto-upgrade.')
modemAdmConfFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfFtpPassword.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfFtpPassword.setDescription('This object is used to configure Password to login to a FTP server, for use with FTP-based auto-upgrade.')
modemAdmConfFtpFile = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfFtpFile.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfFtpFile.setDescription('This object is used to configure Path and/or Filename of the firmware file, for use with FTP-based auto-upgrade.')
modemAdmConfDeviceUpgradeStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgrade", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfDeviceUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfDeviceUpgradeStart.setDescription("This object is used to start Firmware Upgrade process in the Modem. To start the upgrade process, this object should be set to '1'.")
modemAdmConfSimUpgradeStart = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgrade", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfSimUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfSimUpgradeStart.setDescription("This object is used to start Intellon Simple Module Firmware Upgrade process. To start the upgrade process, this object should be set to '1'.")
modemAdmConfSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reboot", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfSystemReboot.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfSystemReboot.setDescription("This object is used to Reboot the Modem. To reboot the modem, this object should be set to '1'.")
modemAdmConfReset = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmConfReset.setStatus('current')
if mibBuilder.loadTexts: modemAdmConfReset.setDescription("This object is used to reset the Modem configuration to Factory Defaults. To reset the modem configuration to factory defaults, this object should be set to '1'.")
whispPlvModemAdmWConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5))
modemAdmWConfNatConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfNatConfig.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfNatConfig.setDescription('This object is used to Enable or Disable the NAT Functionality in the Modem.')
modemAdmWConfWanConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfWanConfig.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfWanConfig.setDescription('This object is used to Enable or Disable DHCP client, to configure the WAN IP Address. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfWanIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfWanIp.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfWanIp.setDescription('This object is used to configure WAN IP Address of the Modem. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfSubnetMask.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfSubnetMask.setDescription('This object is used to configure WAN IP Subnet Mask of the Modem. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfGateway = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfGateway.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfGateway.setDescription('This object is used to configure Default Gateway IP of the Modem. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDNS1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDNS1.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDNS1.setDescription('This object is used to configure DNS Server #1. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDNS2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDNS2.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDNS2.setDescription('This object is used to configure DNS Server #2. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDhcpConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDhcpConfig.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDhcpConfig.setDescription('This object is used to Enable or Disable DHCP Server. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDhcpStartIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDhcpStartIp.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDhcpStartIp.setDescription('This object is used to configure Starting Address of the IP address block, that the DHCP Server can assign to its clients. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDhcpEndIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDhcpEndIp.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDhcpEndIp.setDescription('This object is used to configure Last Address of the IP address block, that the DHCP Server can assign to its clients. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("thirtyMins", 1), ("oneHour", 2), ("twoHours", 3), ("twelveHours", 4), ("oneDay", 5), ("twoDays", 6), ("oneWeek", 7), ("twoWeeks", 8))).clone('oneDay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDhcpLeaseTime.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDhcpLeaseTime.setDescription('This object is used to configure time period for which the IP address assigned to a client is valid. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDmzConfig = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDmzConfig.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDmzConfig.setDescription('This object is used to Enable or Disable the DMZ in the MOdem. This object is accessible only when NAT functionality is enabled in the Modem.')
modemAdmWConfDmzIp = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 5, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmWConfDmzIp.setStatus('current')
if mibBuilder.loadTexts: modemAdmWConfDmzIp.setDescription('This object is used to configure DMZ IP Address of the Modem. This object is accessible only when NAT functionality is enabled in the Modem.')
whispPlvModemAdmSnmpAcessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6))
modemAdmSnmpAccessIpNetwork1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork1.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork1.setDescription('This object is used to configure SNMP Access Network Address #1.')
modemAdmSnmpAccessIpNetworkMask1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask1.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask1.setDescription('This object is used to configure SNMP Access Network Address Mask #1.')
modemAdmSnmpAccessIpNetwork2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork2.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork2.setDescription('This object is used to configure SNMP Access Network Address #2.')
modemAdmSnmpAccessIpNetworkMask2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask2.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask2.setDescription('This object is used to configure SNMP Access Network Address Mask #2.')
modemAdmSnmpAccessIpNetwork3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork3.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork3.setDescription('This object is used to configure SNMP Access Network Address #3.')
modemAdmSnmpAccessIpNetworkMask3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask3.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask3.setDescription('This object is used to configure SNMP Access Network Address Mask #3.')
modemAdmSnmpAccessIpNetwork4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork4.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork4.setDescription('This object is used to configure SNMP Access Network Address #4.')
modemAdmSnmpAccessIpNetworkMask4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask4.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask4.setDescription('This object is used to configure SNMP Access Network Address Mask #4.')
modemAdmSnmpAccessIpNetwork5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork5.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork5.setDescription('This object is used to configure SNMP Access Network Address #5.')
modemAdmSnmpAccessIpNetworkMask5 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask5.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask5.setDescription('This object is used to configure SNMP Access Network Address Mask #5.')
modemAdmSnmpAccessIpNetwork6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork6.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork6.setDescription('This object is used to configure SNMP Access Network Address #6.')
modemAdmSnmpAccessIpNetworkMask6 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask6.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask6.setDescription('This object is used to configure SNMP Access Network Address Mask #6.')
modemAdmSnmpAccessIpNetwork7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork7.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork7.setDescription('This object is used to configure SNMP Access Network Address #7.')
modemAdmSnmpAccessIpNetworkMask7 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask7.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask7.setDescription('This object is used to configure SNMP Access Network Address Mask #7.')
modemAdmSnmpAccessIpNetwork8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork8.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork8.setDescription('This object is used to configure SNMP Access Network Address #8.')
modemAdmSnmpAccessIpNetworkMask8 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask8.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask8.setDescription('This object is used to configure SNMP Access Network Address Mask #8.')
modemAdmSnmpAccessIpNetwork9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork9.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork9.setDescription('This object is used to configure SNMP Access Network Address #9.')
modemAdmSnmpAccessIpNetworkMask9 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask9.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask9.setDescription('This object is used to configure SNMP Access Network Address Mask #9.')
modemAdmSnmpAccessIpNetwork10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork10.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetwork10.setDescription('This object is used to configure SNMP Access Network Address #10.')
modemAdmSnmpAccessIpNetworkMask10 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 6, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask10.setStatus('current')
if mibBuilder.loadTexts: modemAdmSnmpAccessIpNetworkMask10.setDescription('This object is used to configure SNMP Access Network Address Mask #10.')
whispPlvModemAdmRepeaterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 7))
modemAdmRepeaterConfOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("repeater", 2), ("useWithRepeater", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmRepeaterConfOperatingMode.setStatus('current')
if mibBuilder.loadTexts: modemAdmRepeaterConfOperatingMode.setDescription('This object is used to configure the Modem operating mode. Modem should be rebooted for the change in the configuration to take effect.')
modemAdmRepeaterConfModemMAC1 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 7, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC1.setStatus('current')
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC1.setDescription('This object represents the MAC Address of Modem 1, that uses the Repeater.')
modemAdmRepeaterConfModemMAC2 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 7, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC2.setStatus('current')
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC2.setDescription('This object represents the MAC Address of Modem 2, that uses the Repeater.')
modemAdmRepeaterConfModemMAC3 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 7, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC3.setStatus('current')
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC3.setDescription('This object represents the MAC Address of Modem 3, that uses the Repeater.')
modemAdmRepeaterConfModemMAC4 = MibScalar((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 7, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC4.setStatus('current')
if mibBuilder.loadTexts: modemAdmRepeaterConfModemMAC4.setDescription('This object represents the MAC Address of Modem 4, that uses the Repeater.')
whispPlvModemAdmVLANTable = MibTable((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 8), )
if mibBuilder.loadTexts: whispPlvModemAdmVLANTable.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmVLANTable.setDescription('This table contains one row per device connected behind the Modem, either directly OR using a switch')
whispPlvModemAdmVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 8, 1), ).setIndexNames((0, "WHISP-PLV-MODEM-MIB", "modemAdmVLANIndex"))
if mibBuilder.loadTexts: whispPlvModemAdmVLANEntry.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmVLANEntry.setDescription('VLAN information of the device connected behind the Modem.')
modemAdmVLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: modemAdmVLANIndex.setStatus('current')
if mibBuilder.loadTexts: modemAdmVLANIndex.setDescription('The value of this object identifies the index to this entry.')
modemAdmVLANPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 8, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemAdmVLANPhysAddress.setStatus('current')
if mibBuilder.loadTexts: modemAdmVLANPhysAddress.setDescription('This object indicates the MAC Address of the device connected behind the Modem.')
modemAdmVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAdmVLANId.setStatus('current')
if mibBuilder.loadTexts: modemAdmVLANId.setDescription('This object indicates the VLAN ID of the device connected behind the Modem.')
whispPlvModemEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 2))
modemTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 2, 0))
modemTrapDeviceUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 2, 0, 1)).setObjects(("WHISP-PLV-MODEM-MIB", "modemInfoDeviceUpgradeStatus"), ("WHISP-PLV-MODEM-MIB", "modemInfoDeviceFirmwareVer"))
if mibBuilder.loadTexts: modemTrapDeviceUpgradeStarted.setStatus('current')
if mibBuilder.loadTexts: modemTrapDeviceUpgradeStarted.setDescription('This Notification is generated if the Modem has started the firmware Upgrade process.')
modemTrapDeviceUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 2, 0, 2)).setObjects(("WHISP-PLV-MODEM-MIB", "modemInfoDeviceUpgradeStatus"), ("WHISP-PLV-MODEM-MIB", "modemInfoDeviceFirmwareVer"))
if mibBuilder.loadTexts: modemTrapDeviceUpgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: modemTrapDeviceUpgradeCompleted.setDescription('This Notification is generated once the Upgrade process is completed.')
modemTrapSimUpgradeStarted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 2, 0, 3)).setObjects(("WHISP-PLV-MODEM-MIB", "modemInfoSimUpgradeStatus"), ("WHISP-PLV-MODEM-MIB", "modemInfoSimFirmwareVer"))
if mibBuilder.loadTexts: modemTrapSimUpgradeStarted.setStatus('current')
if mibBuilder.loadTexts: modemTrapSimUpgradeStarted.setDescription('This Notification is generated if the Intellon Simple Module Upgrade process is started.')
modemTrapSimUpgradeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 2, 0, 4)).setObjects(("WHISP-PLV-MODEM-MIB", "modemInfoSimUpgradeStatus"), ("WHISP-PLV-MODEM-MIB", "modemInfoSimFirmwareVer"))
if mibBuilder.loadTexts: modemTrapSimUpgradeCompleted.setStatus('current')
if mibBuilder.loadTexts: modemTrapSimUpgradeCompleted.setDescription('This Notification is generated once the Simple Module Upgrade process is completed.')
whispPlvModemConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3))
whispPlvModemGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1))
whispPlvModemCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 2))
whispPlvModemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 1)).setObjects(("WHISP-PLV-MODEM-MIB", "modemInfoModel"), ("WHISP-PLV-MODEM-MIB", "modemInfoSerialNumber"), ("WHISP-PLV-MODEM-MIB", "modemInfoDeviceMac"), ("WHISP-PLV-MODEM-MIB", "modemInfoPlcMac"), ("WHISP-PLV-MODEM-MIB", "modemInfoHardwareVer"), ("WHISP-PLV-MODEM-MIB", "modemInfoDeviceFirmwareVer"), ("WHISP-PLV-MODEM-MIB", "modemInfoBootLoaderVer"), ("WHISP-PLV-MODEM-MIB", "modemInfoSimFirmwareVer"), ("WHISP-PLV-MODEM-MIB", "modemInfoDeviceUpgradeStatus"), ("WHISP-PLV-MODEM-MIB", "modemInfoSimUpgradeStatus"), ("WHISP-PLV-MODEM-MIB", "modemInfoCurrentMode"), ("WHISP-PLV-MODEM-MIB", "modemInfoActiveBandwidthConfig"), ("WHISP-PLV-MODEM-MIB", "modemInfoActiveUpLinkBandwidth"), ("WHISP-PLV-MODEM-MIB", "modemInfoActiveDownLinkBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemInfoGroup = whispPlvModemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemInfoGroup.setDescription('The collection of objects that gives Modem device information.')
whispPlvModemConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 2)).setObjects(("WHISP-PLV-MODEM-MIB", "modemConfPacketPriorityConfig"), ("WHISP-PLV-MODEM-MIB", "modemConfFixedQoSConfig"), ("WHISP-PLV-MODEM-MIB", "modemConfUpLinkDataRate"), ("WHISP-PLV-MODEM-MIB", "modemConfDownLinkDataRate"), ("WHISP-PLV-MODEM-MIB", "modemConfPSD"), ("WHISP-PLV-MODEM-MIB", "modemConfUpLinkMir"), ("WHISP-PLV-MODEM-MIB", "modemConfDownLinkMir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemConfigGroup = whispPlvModemConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemConfigGroup.setDescription('The collection of objects used to configure the Modem. These objects are accessible to everyone.')
whispPlvModemTrapConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 3)).setObjects(("WHISP-PLV-MODEM-MIB", "modemConfTrapIp1"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr1"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp2"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr2"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp3"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr3"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp4"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr4"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp5"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr5"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp6"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr6"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp7"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr7"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp8"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr8"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp9"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr9"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapIp10"), ("WHISP-PLV-MODEM-MIB", "modemConfTrapCommStr10"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemTrapConfigGroup = whispPlvModemTrapConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemTrapConfigGroup.setDescription('The collection of Modems SNMP Trap Configuration objects. These objects are accessible to everyone.')
whispPlvModemAdmConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 4)).setObjects(("WHISP-PLV-MODEM-MIB", "modemAdmConfIpConfig"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfIp"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfIpSubnetMask"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfNEK"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfSnmpGetCommStr"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfSnmpSetCommStr"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfSnmpAdminCommStr"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfLoginUsername"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfLoginPassword"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfFtpServerIp"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfFtpUsername"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfFtpPassword"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfFtpFile"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfDeviceUpgradeStart"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfSimUpgradeStart"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfSystemReboot"), ("WHISP-PLV-MODEM-MIB", "modemAdmConfReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemAdmConfigGroup = whispPlvModemAdmConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmConfigGroup.setDescription("The collection of objects that are used to configure the Modem. These objects are accessible only thru 'admin' community string.")
whispPlvModemAdmWConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 5)).setObjects(("WHISP-PLV-MODEM-MIB", "modemAdmWConfNatConfig"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfWanConfig"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfWanIp"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfSubnetMask"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfGateway"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDNS1"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDNS2"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDhcpConfig"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDhcpStartIp"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDhcpEndIp"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDhcpLeaseTime"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDmzConfig"), ("WHISP-PLV-MODEM-MIB", "modemAdmWConfDmzIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemAdmWConfigGroup = whispPlvModemAdmWConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmWConfigGroup.setDescription("The collection of Modems WAN Configuration objects. These objects are accessible only thru 'admin' community string.")
whispPlvModemAdmSnmpAcessConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 6)).setObjects(("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork1"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask1"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork2"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask2"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork3"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask3"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork4"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask4"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork5"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask5"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork6"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask6"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork7"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask7"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork8"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask8"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork9"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask9"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetwork10"), ("WHISP-PLV-MODEM-MIB", "modemAdmSnmpAccessIpNetworkMask10"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemAdmSnmpAcessConfigGroup = whispPlvModemAdmSnmpAcessConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmSnmpAcessConfigGroup.setDescription("The collection of Modems SNMP Access Network objects. These objects are accessible only thru 'admin' community string.")
whispPlvModemNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 7)).setObjects(("WHISP-PLV-MODEM-MIB", "modemTrapDeviceUpgradeStarted"), ("WHISP-PLV-MODEM-MIB", "modemTrapDeviceUpgradeCompleted"), ("WHISP-PLV-MODEM-MIB", "modemTrapSimUpgradeStarted"), ("WHISP-PLV-MODEM-MIB", "modemTrapSimUpgradeCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemNotificationsGroup = whispPlvModemNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemNotificationsGroup.setDescription('The collection of Notifications generated by the Modem.')
whispPlvModemAdmRepeaterConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 8)).setObjects(("WHISP-PLV-MODEM-MIB", "modemAdmRepeaterConfOperatingMode"), ("WHISP-PLV-MODEM-MIB", "modemAdmRepeaterConfModemMAC1"), ("WHISP-PLV-MODEM-MIB", "modemAdmRepeaterConfModemMAC2"), ("WHISP-PLV-MODEM-MIB", "modemAdmRepeaterConfModemMAC3"), ("WHISP-PLV-MODEM-MIB", "modemAdmRepeaterConfModemMAC4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemAdmRepeaterConfigGroup = whispPlvModemAdmRepeaterConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmRepeaterConfigGroup.setDescription("The collection of Repeater Configuration Objects. These objects are accessible only thru 'admin' community string.")
whispPlvModemAdmVLANConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 1, 9)).setObjects(("WHISP-PLV-MODEM-MIB", "modemAdmVLANPhysAddress"), ("WHISP-PLV-MODEM-MIB", "modemAdmVLANId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemAdmVLANConfigGroup = whispPlvModemAdmVLANConfigGroup.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemAdmVLANConfigGroup.setDescription("The collection of VLAN Configuration Objects. These objects are accessible only thru 'admin' community string.")
whispPlvModemCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 161, 19, 3, 7, 1, 3, 2, 1)).setObjects(("WHISP-PLV-MODEM-MIB", "whispPlvModemInfoGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemConfigGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemTrapConfigGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemAdmConfigGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemAdmWConfigGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemAdmSnmpAcessConfigGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemNotificationsGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemAdmRepeaterConfigGroup"), ("WHISP-PLV-MODEM-MIB", "whispPlvModemAdmVLANConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    whispPlvModemCompliance = whispPlvModemCompliance.setStatus('current')
if mibBuilder.loadTexts: whispPlvModemCompliance.setDescription('The compliance statement of SNMP entities which implement the WHISP-PLV-MODEM-MIB.')
mibBuilder.exportSymbols("WHISP-PLV-MODEM-MIB", modemAdmWConfWanIp=modemAdmWConfWanIp, whispPlvModemNotificationsGroup=whispPlvModemNotificationsGroup, modemAdmVLANPhysAddress=modemAdmVLANPhysAddress, modemConfPacketPriorityConfig=modemConfPacketPriorityConfig, modemAdmSnmpAccessIpNetworkMask5=modemAdmSnmpAccessIpNetworkMask5, whispPlvModemObjects=whispPlvModemObjects, modemAdmConfReset=modemAdmConfReset, modemAdmWConfDhcpLeaseTime=modemAdmWConfDhcpLeaseTime, modemInfoActiveDownLinkBandwidth=modemInfoActiveDownLinkBandwidth, modemInfoPlcMac=modemInfoPlcMac, modemAdmSnmpAccessIpNetworkMask3=modemAdmSnmpAccessIpNetworkMask3, modemAdmWConfDNS1=modemAdmWConfDNS1, modemAdmSnmpAccessIpNetwork9=modemAdmSnmpAccessIpNetwork9, modemAdmWConfDmzConfig=modemAdmWConfDmzConfig, modemAdmVLANId=modemAdmVLANId, modemConfTrapCommStr5=modemConfTrapCommStr5, modemAdmSnmpAccessIpNetworkMask6=modemAdmSnmpAccessIpNetworkMask6, modemInfoModel=modemInfoModel, modemAdmSnmpAccessIpNetwork4=modemAdmSnmpAccessIpNetwork4, modemAdmWConfDhcpStartIp=modemAdmWConfDhcpStartIp, modemAdmWConfGateway=modemAdmWConfGateway, whispPlvModemAdmVLANEntry=whispPlvModemAdmVLANEntry, modemInfoSimFirmwareVer=modemInfoSimFirmwareVer, modemAdmConfSystemReboot=modemAdmConfSystemReboot, modemConfTrapCommStr1=modemConfTrapCommStr1, modemAdmConfFtpUsername=modemAdmConfFtpUsername, modemAdmSnmpAccessIpNetwork3=modemAdmSnmpAccessIpNetwork3, whispPlvModemEvents=whispPlvModemEvents, modemAdmSnmpAccessIpNetwork10=modemAdmSnmpAccessIpNetwork10, modemAdmConfDeviceUpgradeStart=modemAdmConfDeviceUpgradeStart, modemInfoSimUpgradeStatus=modemInfoSimUpgradeStatus, modemConfTrapIp1=modemConfTrapIp1, modemConfTrapCommStr10=modemConfTrapCommStr10, modemAdmConfLoginPassword=modemAdmConfLoginPassword, modemAdmSnmpAccessIpNetwork6=modemAdmSnmpAccessIpNetwork6, modemConfDownLinkMir=modemConfDownLinkMir, modemAdmSnmpAccessIpNetwork1=modemAdmSnmpAccessIpNetwork1, modemAdmSnmpAccessIpNetwork8=modemAdmSnmpAccessIpNetwork8, PYSNMP_MODULE_ID=whispPlvModemMIB, modemAdmConfSnmpSetCommStr=modemAdmConfSnmpSetCommStr, modemAdmConfSnmpAdminCommStr=modemAdmConfSnmpAdminCommStr, modemAdmConfIpSubnetMask=modemAdmConfIpSubnetMask, modemConfTrapIp10=modemConfTrapIp10, modemAdmRepeaterConfModemMAC2=modemAdmRepeaterConfModemMAC2, whispPlvModemAdmConfig=whispPlvModemAdmConfig, modemAdmConfFtpFile=modemAdmConfFtpFile, modemAdmWConfDhcpEndIp=modemAdmWConfDhcpEndIp, whispPlvModemMIB=whispPlvModemMIB, modemTrapSimUpgradeStarted=modemTrapSimUpgradeStarted, modemInfoCurrentMode=modemInfoCurrentMode, modemConfUpLinkDataRate=modemConfUpLinkDataRate, whispPlvModemInfo=whispPlvModemInfo, modemAdmSnmpAccessIpNetworkMask2=modemAdmSnmpAccessIpNetworkMask2, modemAdmConfFtpServerIp=modemAdmConfFtpServerIp, whispPlvModemConfigGroup=whispPlvModemConfigGroup, modemAdmWConfDNS2=modemAdmWConfDNS2, modemAdmRepeaterConfModemMAC1=modemAdmRepeaterConfModemMAC1, modemInfoBootLoaderVer=modemInfoBootLoaderVer, modemAdmSnmpAccessIpNetwork2=modemAdmSnmpAccessIpNetwork2, modemAdmConfIp=modemAdmConfIp, modemConfTrapIp6=modemConfTrapIp6, modemTrapDeviceUpgradeStarted=modemTrapDeviceUpgradeStarted, modemAdmSnmpAccessIpNetworkMask8=modemAdmSnmpAccessIpNetworkMask8, modemAdmWConfSubnetMask=modemAdmWConfSubnetMask, modemAdmConfSimUpgradeStart=modemAdmConfSimUpgradeStart, whispPlvModemAdmWConfig=whispPlvModemAdmWConfig, modemAdmSnmpAccessIpNetwork5=modemAdmSnmpAccessIpNetwork5, modemConfTrapCommStr3=modemConfTrapCommStr3, modemAdmSnmpAccessIpNetwork7=modemAdmSnmpAccessIpNetwork7, modemAdmConfIpConfig=modemAdmConfIpConfig, whispPlvModemAdmSnmpAcessConfigGroup=whispPlvModemAdmSnmpAcessConfigGroup, modemAdmConfSnmpGetCommStr=modemAdmConfSnmpGetCommStr, whispPlvModemAdmRepeaterConfigGroup=whispPlvModemAdmRepeaterConfigGroup, modemConfTrapIp4=modemConfTrapIp4, modemInfoDeviceUpgradeStatus=modemInfoDeviceUpgradeStatus, whispPlvModemAdmVLANTable=whispPlvModemAdmVLANTable, modemAdmSnmpAccessIpNetworkMask9=modemAdmSnmpAccessIpNetworkMask9, whispPlvModemCompliance=whispPlvModemCompliance, modemConfTrapCommStr8=modemConfTrapCommStr8, whispPlvModemGroups=whispPlvModemGroups, modemTrapPrefix=modemTrapPrefix, whispPlvModemAdmConfigGroup=whispPlvModemAdmConfigGroup, modemInfoActiveBandwidthConfig=modemInfoActiveBandwidthConfig, modemAdmConfFtpPassword=modemAdmConfFtpPassword, modemAdmRepeaterConfModemMAC3=modemAdmRepeaterConfModemMAC3, modemConfTrapCommStr9=modemConfTrapCommStr9, modemAdmVLANIndex=modemAdmVLANIndex, modemInfoDeviceMac=modemInfoDeviceMac, whispPlvModemConfig=whispPlvModemConfig, modemInfoActiveUpLinkBandwidth=modemInfoActiveUpLinkBandwidth, modemConfTrapIp8=modemConfTrapIp8, whispPlvModemCompliances=whispPlvModemCompliances, modemAdmConfLoginUsername=modemAdmConfLoginUsername, whispPlvModemAdmRepeaterConfig=whispPlvModemAdmRepeaterConfig, modemInfoHardwareVer=modemInfoHardwareVer, modemAdmSnmpAccessIpNetworkMask10=modemAdmSnmpAccessIpNetworkMask10, modemAdmSnmpAccessIpNetworkMask1=modemAdmSnmpAccessIpNetworkMask1, modemAdmWConfDmzIp=modemAdmWConfDmzIp, modemConfDownLinkDataRate=modemConfDownLinkDataRate, modemAdmWConfNatConfig=modemAdmWConfNatConfig, whispPlvModemAdmWConfigGroup=whispPlvModemAdmWConfigGroup, whispPlvModemAdmVLANConfigGroup=whispPlvModemAdmVLANConfigGroup, modemConfTrapCommStr6=modemConfTrapCommStr6, modemInfoSerialNumber=modemInfoSerialNumber, modemConfTrapIp9=modemConfTrapIp9, modemInfoDeviceFirmwareVer=modemInfoDeviceFirmwareVer, modemAdmSnmpAccessIpNetworkMask4=modemAdmSnmpAccessIpNetworkMask4, whispPlvModemInfoGroup=whispPlvModemInfoGroup, modemAdmWConfWanConfig=modemAdmWConfWanConfig, modemConfTrapIp7=modemConfTrapIp7, modemConfTrapIp3=modemConfTrapIp3, modemTrapDeviceUpgradeCompleted=modemTrapDeviceUpgradeCompleted, modemAdmSnmpAccessIpNetworkMask7=modemAdmSnmpAccessIpNetworkMask7, modemConfTrapCommStr4=modemConfTrapCommStr4, modemConfTrapIp5=modemConfTrapIp5, modemAdmWConfDhcpConfig=modemAdmWConfDhcpConfig, modemTrapSimUpgradeCompleted=modemTrapSimUpgradeCompleted, modemAdmRepeaterConfModemMAC4=modemAdmRepeaterConfModemMAC4, modemConfTrapCommStr2=modemConfTrapCommStr2, modemConfPSD=modemConfPSD, modemConfUpLinkMir=modemConfUpLinkMir, whispPlvModemTrapConfig=whispPlvModemTrapConfig, modemAdmConfNEK=modemAdmConfNEK, modemConfTrapCommStr7=modemConfTrapCommStr7, whispPlvModemAdmSnmpAcessConfig=whispPlvModemAdmSnmpAcessConfig, modemConfFixedQoSConfig=modemConfFixedQoSConfig, modemConfTrapIp2=modemConfTrapIp2, modemAdmRepeaterConfOperatingMode=modemAdmRepeaterConfOperatingMode, whispPlvModemConformance=whispPlvModemConformance, whispPlvModemTrapConfigGroup=whispPlvModemTrapConfigGroup)
