#
# PySNMP MIB module CISCO-NETFLOW-LITE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NETFLOW-LITE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoVrfName, Layer2Cos = mibBuilder.importSymbols("CISCO-TC", "CiscoVrfName", "Layer2Cos")
Dscp, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "Dscp")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, MibIdentifier, TimeTicks, Unsigned32, Bits, NotificationType, Gauge32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "MibIdentifier", "TimeTicks", "Unsigned32", "Bits", "NotificationType", "Gauge32", "iso", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "StorageType")
ciscoNetflowLiteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 776))
ciscoNetflowLiteMIB.setRevisions(('2011-09-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoNetflowLiteMIB.setRevisionsDescriptions(('Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoNetflowLiteMIB.setLastUpdated('201109140000Z')
if mibBuilder.loadTexts: ciscoNetflowLiteMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoNetflowLiteMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoNetflowLiteMIB.setDescription('This MIB provides a method to configure Netflow-lite feature and get information in these areas: 1. Exporter config information and statistics. 2. Sampler config information. 3. Monitor config information and statistics. The following terms are used throughout this MIB: Flow A flow is defined as a unidirectional sequence of packets between a given source and destination endpoints. Network flows are highly granular; flow endpoints are identified both by IP address as well as by transport layer application port numbers. Netflow also utilizes the IP Protocol type, Type of Service (ToS) and the input interface identifier to uniquely identify flows. Netflow Netflow is a network protocol developed by Cisco to run on Cisco equipment for collecting IP traffic flow. With the Netflow feature enabled, Netflow records are generated, then exported in User Datagram Protocol(UDP) or Stream Control Transmission Protocol(SCTP) packets and collected using a Netflow collector. Netflow-lite A basic packet sampling Netflow based implementation. Exporter A device (for example, a router or a switch) with Netflow services enabled. The exporter monitors packets entering an observation point and creates flows out of these packets. The information from these flows are exported in the form of Flow Records to the collector. Template Netflow Version 9 Export format is template based. Version 9 record format consists of a packet header followed by at least one or more template or data FlowSets. A template FlowSet (collection of one or more template) provides a description of the fields that will be present in future data FlowSets. Templates provide an extensible design to the record format, a feature that should allow future enhancements to Netflow services without requiring concurrent changes to the basic flow-record format.')
ciscoNetflowLiteMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 0))
ciscoNetflowLiteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 1))
ciscoNetflowLiteMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 2))
cnlExporter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1))
cnlSampler = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2))
cnlMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3))
cnlMaxExporterAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlMaxExporterAllowed.setStatus('current')
if mibBuilder.loadTexts: cnlMaxExporterAllowed.setDescription('Indicates the maximum number of entries that can be configured in cnlExporterTable. A value of zero indicates no limit on the numbers of entries in the cnlExporterTable.')
cnlExporterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2), )
if mibBuilder.loadTexts: cnlExporterTable.setStatus('current')
if mibBuilder.loadTexts: cnlExporterTable.setDescription("Contains Netflow-lite exporter entries. A row is created for each Netflow-lite exporter configured in a device. A row cannot be removed when it's being used in cnlIfMonitorEntry.")
cnlExporterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1), ).setIndexNames((1, "CISCO-NETFLOW-LITE-MIB", "cnlExporterName"))
if mibBuilder.loadTexts: cnlExporterEntry.setStatus('current')
if mibBuilder.loadTexts: cnlExporterEntry.setDescription('An entry containing the management information of Netflow-lite exporter.')
cnlExporterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnlExporterName.setStatus('current')
if mibBuilder.loadTexts: cnlExporterName.setDescription('Exporter name identifying a particular Netflow-lite exporter configuration.')
cnlExportAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportAddrType.setStatus('current')
if mibBuilder.loadTexts: cnlExportAddrType.setDescription('Specifies the type of IP address used by cnlExportDestinationAddr and cnlExportSourceAddr.')
cnlExportDestinationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportDestinationAddr.setStatus('current')
if mibBuilder.loadTexts: cnlExportDestinationAddr.setDescription("Specifies the Netflow-lite collector's IP address, used to construct the L3 header of export packet. The type of this address is determined by the cnlExportAddrType object.")
cnlExportDestinationUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportDestinationUdpPort.setStatus('current')
if mibBuilder.loadTexts: cnlExportDestinationUdpPort.setDescription("Specifies the collector's UDP port, on which the remote collector can listen for export packets.")
cnlExportDestinationUdpLoadShare = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportDestinationUdpLoadShare.setStatus('current')
if mibBuilder.loadTexts: cnlExportDestinationUdpLoadShare.setDescription('Specifies the number of destination UDP ports used for load sharing. The export datagrams will use a UDP destination port number that round robins between a set of consecutive destination UDP port numbers starting with based UDP port specified by cnlExportDestinationUdpPort.')
cnlExportSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cnlExportSourceAddr.setDescription('Specifies the source IP address used in export packet L3 header. The type of this address is determined by the cnlExportAddrType object.')
cnlExportSourceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportSourceUdpPort.setStatus('current')
if mibBuilder.loadTexts: cnlExportSourceUdpPort.setDescription('Specifies the source UDP port used in export packets.')
cnlExportVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 8), CiscoVrfName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportVrf.setStatus('current')
if mibBuilder.loadTexts: cnlExportVrf.setDescription('Specifies the Virtual Routing and Forwarding (VRF) domain of the collector. A zero length string indicates that there is no VRF domain configured and the default VRF domain is used.')
cnlExportTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(254)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportTtl.setStatus('current')
if mibBuilder.loadTexts: cnlExportTtl.setDescription('Specifies the Time To Live (TTL) value to be used in the export packet header.')
cnlExportCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 10), Layer2Cos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportCos.setStatus('current')
if mibBuilder.loadTexts: cnlExportCos.setDescription('Specifies the Class of Service (CoS) value of the export packet header.')
cnlExportDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 11), Dscp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportDscp.setStatus('current')
if mibBuilder.loadTexts: cnlExportDscp.setDescription('Specifies the Differentiated Services Code-Point (DSCP) value of the export packet header.')
cnlExportTemplateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 12), Unsigned32().clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportTemplateTimeout.setStatus('current')
if mibBuilder.loadTexts: cnlExportTemplateTimeout.setDescription("The maximum time the template data can exist in queue before it's exported out.")
cnlExportSamplerTableTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 13), Unsigned32().clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportSamplerTableTimeout.setStatus('current')
if mibBuilder.loadTexts: cnlExportSamplerTableTimeout.setDescription("The maximum time the sampler table data can exist in queue before it's exported out.")
cnlExportInterfaceTableTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 14), Unsigned32().clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportInterfaceTableTimeout.setStatus('current')
if mibBuilder.loadTexts: cnlExportInterfaceTableTimeout.setDescription("The maximum time the interface table data can exist in queue table before it's exported out.")
cnlExportProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipFix", 1), ("netflowV9", 2))).clone('netflowV9')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExportProtocol.setStatus('current')
if mibBuilder.loadTexts: cnlExportProtocol.setDescription('Specifies the Netflow data export protocol. ipFix: The IP Flow Information Export protocol. netflowV9: Netflow services export protocol version 9.')
cnlPacketExported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlPacketExported.setStatus('current')
if mibBuilder.loadTexts: cnlPacketExported.setDescription('The total number of packets which have been exported.')
cnlExporterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 17), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExporterStorageType.setStatus('current')
if mibBuilder.loadTexts: cnlExporterStorageType.setDescription('Specifies the storage type for this conceptual row.')
cnlExporterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 1, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlExporterRowStatus.setStatus('current')
if mibBuilder.loadTexts: cnlExporterRowStatus.setDescription("The status of this conceptual row. The new entry can be created by setting this object value to 'createAndGo'. The entry may not be deleted via by setting its value to 'destroy' if the value of cnlExporterName is used in cnlIfExporterName. When rows in 'active', all writable objects can be modified.")
cnlMaxSamplerAllowed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlMaxSamplerAllowed.setStatus('current')
if mibBuilder.loadTexts: cnlMaxSamplerAllowed.setDescription('Indicates the maximum number of entries that can be configured in cnlSamplerTable. A value of zero indicates no limit on the numbers of entries in the cnlSamplerTable.')
cnlSamplerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2), )
if mibBuilder.loadTexts: cnlSamplerTable.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerTable.setDescription("Contains Netflow-lite sampler entries. A row is created for each Netflow-lite sampler configured in a device. A row cannot be removed when it's being used in cnlIfMonitorEntry.")
cnlSamplerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1), ).setIndexNames((1, "CISCO-NETFLOW-LITE-MIB", "cnlSamplerName"))
if mibBuilder.loadTexts: cnlSamplerEntry.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerEntry.setDescription('An entry containing the management information of Netflow-lite sampler.')
cnlSamplerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnlSamplerName.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerName.setDescription('Sampler name identifying a particular Netflow-lite sampler configuration.')
cnlSamplerPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1, 2), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlSamplerPacketRate.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerPacketRate.setDescription('Specifies packet being sampled at 1-in-N packets rate in powers of 2, for example, 1-in-64.')
cnlSamplerPacketSectionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1, 3), Unsigned32().clone(64)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlSamplerPacketSectionSize.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerPacketSectionSize.setDescription('Specifies length of packet section that was extracted for export.')
cnlSamplerPacketOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlSamplerPacketOffset.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerPacketOffset.setDescription('Specifies the starting offset of packet section that was extracted for export.')
cnlSamplerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlSamplerStorageType.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerStorageType.setDescription('Specifies the storage type for this conceptual row.')
cnlSamplerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlSamplerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerRowStatus.setDescription("The status of this conceptual row. The new entry can be created by setting this object value to 'createAndGo'. The entry may not be deleted via by setting its value to 'destroy' if this sampler is used in cnlIfSamplerName. When rows in 'active', all writable objects can be modified.")
cnlIfMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1), )
if mibBuilder.loadTexts: cnlIfMonitorTable.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorTable.setDescription('Contains Netflow-lite monitor entries. A row is created to activate traffic sampling on the interface.')
cnlIfMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (1, "CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorSessionName"))
if mibBuilder.loadTexts: cnlIfMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorEntry.setDescription('An entry containing the management information of Netflow-lite monitor.')
cnlIfMonitorSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cnlIfMonitorSessionName.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorSessionName.setDescription('Monitor session name identifying a particular Netflow-lite monitor configuration.')
cnlIfMonitorActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlIfMonitorActiveStatus.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorActiveStatus.setDescription('Indicates current monitor is in active status or not. active(1) : means monitor parameters meet mandatory requirement, it is in active mode. inactive(2): means monitor is not in active mode.')
cnlIfSamplerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlIfSamplerName.setStatus('current')
if mibBuilder.loadTexts: cnlIfSamplerName.setDescription('Specifies one existing Sampler entry by name, the sampler object value will be used to configure interface sampling parameters.')
cnlIfExporterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlIfExporterName.setStatus('current')
if mibBuilder.loadTexts: cnlIfExporterName.setDescription('Specifies one existing Exporter entry by name, the exporter object value will be used to construct export packet header')
cnlIfAveragePacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlIfAveragePacketSize.setStatus('current')
if mibBuilder.loadTexts: cnlIfAveragePacketSize.setDescription('Specifies average packet size expected at the observation point. Used in tuning the time based sampling interval. Default value 0, indicates system automatically calculate the average packet size at the interface.')
cnlIfAveragePacketSizeObserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlIfAveragePacketSizeObserved.setStatus('current')
if mibBuilder.loadTexts: cnlIfAveragePacketSizeObserved.setDescription('The average packet size calculated at the interface. Used in tuning the time based sampling interval.')
cnlIfAveragePacketSizeUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlIfAveragePacketSizeUsed.setStatus('current')
if mibBuilder.loadTexts: cnlIfAveragePacketSizeUsed.setDescription('The average packet size used in tuning the time based in tuning sampling performance.')
cnlIfMonitorPktsObserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlIfMonitorPktsObserved.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorPktsObserved.setDescription('The total number of packets is observed at the interface.')
cnlIfMonitorPktsExported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlIfMonitorPktsExported.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorPktsExported.setDescription('The total number of exported packets for this monitor session.')
cnlIfMonitorPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnlIfMonitorPktsDropped.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorPktsDropped.setDescription('The total number of dropped packets for this monitor session.')
cnlIfMonitorStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 11), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlIfMonitorStorageType.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorStorageType.setDescription('Specifies the storage type for this conceptual row.')
cnlIfMonitorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 776, 1, 3, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnlIfMonitorRowStatus.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorRowStatus.setDescription("The status of this conceptual row. The new entry can be created by setting this object value to 'createAndGo'. The entry can be deleted via by setting its value to 'destroy'. When rows in 'active', all writable objects can be modified.")
ciscoNetflowLiteMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 2, 1))
ciscoNetflowLiteMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 776, 2, 2))
ciscoNetflowLiteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 776, 2, 1, 1)).setObjects(("CISCO-NETFLOW-LITE-MIB", "cnlExporterInfoGroup"), ("CISCO-NETFLOW-LITE-MIB", "cnlSamplerInfoGroup"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoNetflowLiteMIBCompliance = ciscoNetflowLiteMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoNetflowLiteMIBCompliance.setDescription('This is a default module-compliance containing default object groups.')
cnlExporterInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 776, 2, 2, 1)).setObjects(("CISCO-NETFLOW-LITE-MIB", "cnlMaxExporterAllowed"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportAddrType"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportDestinationAddr"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportDestinationUdpPort"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportDestinationUdpLoadShare"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportSourceAddr"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportSourceUdpPort"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportVrf"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportTtl"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportCos"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportDscp"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportTemplateTimeout"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportSamplerTableTimeout"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportInterfaceTableTimeout"), ("CISCO-NETFLOW-LITE-MIB", "cnlExportProtocol"), ("CISCO-NETFLOW-LITE-MIB", "cnlPacketExported"), ("CISCO-NETFLOW-LITE-MIB", "cnlExporterStorageType"), ("CISCO-NETFLOW-LITE-MIB", "cnlExporterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnlExporterInfoGroup = cnlExporterInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cnlExporterInfoGroup.setDescription('A collection of objects providing information and configuration of the Netflow-lite Exporter.')
cnlSamplerInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 776, 2, 2, 2)).setObjects(("CISCO-NETFLOW-LITE-MIB", "cnlMaxSamplerAllowed"), ("CISCO-NETFLOW-LITE-MIB", "cnlSamplerPacketRate"), ("CISCO-NETFLOW-LITE-MIB", "cnlSamplerPacketSectionSize"), ("CISCO-NETFLOW-LITE-MIB", "cnlSamplerPacketOffset"), ("CISCO-NETFLOW-LITE-MIB", "cnlSamplerStorageType"), ("CISCO-NETFLOW-LITE-MIB", "cnlSamplerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnlSamplerInfoGroup = cnlSamplerInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cnlSamplerInfoGroup.setDescription('A collection of objects providing information and configuration of the Netflow-lite Sampler.')
cnlIfMonitorInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 776, 2, 2, 3)).setObjects(("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorActiveStatus"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfSamplerName"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfExporterName"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfAveragePacketSize"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfAveragePacketSizeObserved"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfAveragePacketSizeUsed"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorPktsObserved"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorPktsExported"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorPktsDropped"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorStorageType"), ("CISCO-NETFLOW-LITE-MIB", "cnlIfMonitorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnlIfMonitorInfoGroup = cnlIfMonitorInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cnlIfMonitorInfoGroup.setDescription('A collection of objects providing information and configuration of the Netflow-lite Monitor.')
mibBuilder.exportSymbols("CISCO-NETFLOW-LITE-MIB", ciscoNetflowLiteMIBCompliances=ciscoNetflowLiteMIBCompliances, cnlExportDscp=cnlExportDscp, cnlMaxSamplerAllowed=cnlMaxSamplerAllowed, cnlSamplerInfoGroup=cnlSamplerInfoGroup, cnlIfExporterName=cnlIfExporterName, cnlExportInterfaceTableTimeout=cnlExportInterfaceTableTimeout, cnlExporterTable=cnlExporterTable, cnlExportAddrType=cnlExportAddrType, cnlSamplerStorageType=cnlSamplerStorageType, cnlPacketExported=cnlPacketExported, cnlExportDestinationAddr=cnlExportDestinationAddr, cnlExportSamplerTableTimeout=cnlExportSamplerTableTimeout, cnlExporterInfoGroup=cnlExporterInfoGroup, ciscoNetflowLiteMIBObjects=ciscoNetflowLiteMIBObjects, cnlSamplerPacketOffset=cnlSamplerPacketOffset, cnlIfAveragePacketSize=cnlIfAveragePacketSize, cnlIfMonitorInfoGroup=cnlIfMonitorInfoGroup, cnlExportCos=cnlExportCos, cnlIfAveragePacketSizeObserved=cnlIfAveragePacketSizeObserved, cnlSamplerEntry=cnlSamplerEntry, cnlSamplerRowStatus=cnlSamplerRowStatus, cnlExportDestinationUdpLoadShare=cnlExportDestinationUdpLoadShare, cnlIfMonitorTable=cnlIfMonitorTable, ciscoNetflowLiteMIBCompliance=ciscoNetflowLiteMIBCompliance, cnlIfMonitorPktsObserved=cnlIfMonitorPktsObserved, cnlExporterStorageType=cnlExporterStorageType, cnlIfMonitorActiveStatus=cnlIfMonitorActiveStatus, cnlExportSourceAddr=cnlExportSourceAddr, cnlIfMonitorEntry=cnlIfMonitorEntry, cnlIfMonitorSessionName=cnlIfMonitorSessionName, cnlIfMonitorRowStatus=cnlIfMonitorRowStatus, cnlMaxExporterAllowed=cnlMaxExporterAllowed, cnlExportDestinationUdpPort=cnlExportDestinationUdpPort, cnlExportVrf=cnlExportVrf, ciscoNetflowLiteMIBConform=ciscoNetflowLiteMIBConform, cnlExporter=cnlExporter, PYSNMP_MODULE_ID=ciscoNetflowLiteMIB, cnlIfSamplerName=cnlIfSamplerName, cnlIfMonitorPktsDropped=cnlIfMonitorPktsDropped, cnlExportSourceUdpPort=cnlExportSourceUdpPort, cnlSamplerPacketRate=cnlSamplerPacketRate, cnlSamplerPacketSectionSize=cnlSamplerPacketSectionSize, cnlSamplerName=cnlSamplerName, ciscoNetflowLiteMIBGroups=ciscoNetflowLiteMIBGroups, ciscoNetflowLiteMIB=ciscoNetflowLiteMIB, cnlExporterRowStatus=cnlExporterRowStatus, cnlExportProtocol=cnlExportProtocol, cnlExporterEntry=cnlExporterEntry, ciscoNetflowLiteMIBNotifs=ciscoNetflowLiteMIBNotifs, cnlMonitor=cnlMonitor, cnlExporterName=cnlExporterName, cnlIfMonitorStorageType=cnlIfMonitorStorageType, cnlIfMonitorPktsExported=cnlIfMonitorPktsExported, cnlExportTemplateTimeout=cnlExportTemplateTimeout, cnlExportTtl=cnlExportTtl, cnlIfAveragePacketSizeUsed=cnlIfAveragePacketSizeUsed, cnlSamplerTable=cnlSamplerTable, cnlSampler=cnlSampler)
