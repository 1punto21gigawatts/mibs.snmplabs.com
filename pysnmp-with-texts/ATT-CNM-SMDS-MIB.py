#
# PySNMP MIB module ATT-CNM-SMDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATT-CNM-SMDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Bits, Counter32, Gauge32, NotificationType, Unsigned32, Integer32, ObjectIdentity, IpAddress, ModuleIdentity, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Bits", "Counter32", "Gauge32", "NotificationType", "Unsigned32", "Integer32", "ObjectIdentity", "IpAddress", "ModuleIdentity", "enterprises", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
att_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 74)).setLabel("att-2")
att_products = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1)).setLabel("att-products")
att_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2)).setLabel("att-mgmt")
att_cnmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1, 9)).setLabel("att-cnmAgent")
att_cnm = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 15)).setLabel("att-cnm")
att_cnm_smds = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 15, 6)).setLabel("att-cnm-smds")
class SMDSAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

attCNMsmdsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1), )
if mibBuilder.loadTexts: attCNMsmdsConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsConfigTable.setDescription('A list of entries containing SMDS subscription parameters, and configuration values, for all the subscriber-network interfaces (SNIs) managed by this system.')
attCNMsmdsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsConfigIndex"))
if mibBuilder.loadTexts: attCNMsmdsConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsConfigEntry.setDescription('An entry containing SMDS subscription parameters, and configuration values for a specific subscriber network interface (SNI).')
attCNMsmdsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsConfigIndex.setDescription('A unique value for each subscriber-network interface (SNI). The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMsmdsAccessClass = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noClass", 1), ("accessClass1", 2), ("accessClass2", 3), ("accessClass3", 4), ("accessClass4", 5), ("accessClass5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsAccessClass.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAccessClass.setDescription('The currently subscribed-to access class for this SNI. For a DS3-based access path, the value for this information indicates access class and the Sustained Information Rate. For a DS1-based access path, there is no access class enforcement and hence no information.')
attCNMsmdsMCDUsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcdusIn1", 1), ("mcdusIn16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsMCDUsIn.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMCDUsIn.setDescription('The maximum number of SMDS data units that may be transferred concurrently over the SNI from the CPE to the SMDS network. Values can be 1 or 16.')
attCNMsmdsMCDUsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mcdusOut1", 1), ("mcdusOut16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsMCDUsOut.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMCDUsOut.setDescription('The maximum number of SMDS data units that may be transferred concurrently over the SNI from the SMDS network to the CPE. Values can be 1 or 16.')
attCNMsmdsIndivScreenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("disallowed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsIndivScreenMode.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndivScreenMode.setDescription("The allowed/disallowed flag for the individual address screening table for this SNI. This indicates whether the individual address screening table includes 'allowed' addresses or 'disallowed' addresses (i.e. whether the screen is applied as an inclusionary or an exclusionary restriction).")
attCNMsmdsGroupScreenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("disallowed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsGroupScreenMode.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGroupScreenMode.setDescription("The allowed/disallowed flag for the group address screening table for this SNI. This indicates whether the group address screening table includes 'allowed' addresses or 'disallowed' addresses (i.e. whether the screen is applied as an inclusionary or an exclusionary restriction).")
attCNMsmdsAddrIndexDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsAddrIndexDescr.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddrIndexDescr.setDescription('This variable specifies how SMDS address tables should be indexed. A SMDS address is divided into three fields: Country Code, National Destination Code, and Subscriber Number. The National Destination Code is also referred to as the Area Code in the US. These three fields are used as indices into the tables that need to be indexed by a SMDS address. This object will contain the following information, describing how this agent expects OIDs to be formed: Country Code = 1 Area Code = next 3 digits (eg. 908) Subscriber Number = remaining 7 digits (eg. 5804357) Therefore, for example, an OID associated with a SMDS address 0xC19085804357FFFF is derived to be 1.908.5804537 This information helps in specifying how this agent supports tables indexed by one or more SMDS addresses.')
attCNMsmdsDisagreeMaxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeMaxIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeMaxIntervals.setDescription('This variable identifies the maximum number of measurement intervals supported for the disagreement counts maintained by this SNI in the attCNMsmdsDisagreeTable.')
attCNMsmdsDisagreeIntervalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeIntervalLen.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeIntervalLen.setDescription('This variable identifies the number of seconds that make up one complete measurement interval for the disagreement counts maintained by this SNI in the attCNMsmdsDisagreeTable.')
attCNMsmdsAddrTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2), )
if mibBuilder.loadTexts: attCNMsmdsAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddrTable.setDescription('A table containing SMDS addresses assigned to each subscriber-network interface (SNI) that is managed by this system.')
attCNMsmdsAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsAddrCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsAddrAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsAddrSubscriberIndex"))
if mibBuilder.loadTexts: attCNMsmdsAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddrEntry.setDescription('An entry containing an SNI identifier, and one of the SMDS addresses assigned to that SNI.')
attCNMsmdsAddrCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: attCNMsmdsAddrCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddrCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsAddressOnSNI object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsAddrAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: attCNMsmdsAddrAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddrAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsAddressOnSNI object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsAddrSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: attCNMsmdsAddrSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddrSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsAddressOnSNI object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsAddressOnSNI = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2, 1, 4), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsAddressOnSNI.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAddressOnSNI.setDescription('A SMDS address assigned to a particular subscriber- network interface (SNI).')
attCNMsmdsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsInterfaceIndex.setDescription('The index that identifies the SNI that has been assigned a particular SMDS address.')
attCNMsmdsIndScrTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3), )
if mibBuilder.loadTexts: attCNMsmdsIndScrTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndScrTable.setDescription('A list of entries containing SMDS addresses and SNI identifiers that form the individual address screening table for the SNIs.')
attCNMsmdsIndScrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsIndScrIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsIndScrCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsIndScrAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsIndScrSubscriberIndex"))
if mibBuilder.loadTexts: attCNMsmdsIndScrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndScrEntry.setDescription('An entry containing a SMDS address that belongs to the individual address screening table for a particular subscriber-network interface (SNI).')
attCNMsmdsIndScrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsIndScrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndScrIndex.setDescription('A unique value for each SNI. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMsmdsIndScrCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: attCNMsmdsIndScrCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndScrCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsIndivScreenAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsIndScrAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: attCNMsmdsIndScrAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndScrAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsIndivScreenAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsIndScrSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3, 1, 4), Integer32())
if mibBuilder.loadTexts: attCNMsmdsIndScrSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndScrSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsIndivScreenAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsIndivScreenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 3, 1, 5), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsIndivScreenAddress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsIndivScreenAddress.setDescription('A SMDS address that belongs to the individual address screening table for a particular SNI.')
attCNMsmdsGrpScrTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4), )
if mibBuilder.loadTexts: attCNMsmdsGrpScrTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpScrTable.setDescription('A list of entries containing SMDS addresses and SNI identifiers that form the group address screening table for the SNIs.')
attCNMsmdsGrpScrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpScrIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpScrCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpScrAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpScrSubscriberIndex"))
if mibBuilder.loadTexts: attCNMsmdsGrpScrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpScrEntry.setDescription('An entry containing a SMDS address that belongs to the group address screening table for a particular subscriber-network interface (SNI).')
attCNMsmdsGrpScrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsGrpScrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpScrIndex.setDescription('A unique value for each SNI. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMsmdsGrpScrCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpScrCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpScrCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsGroupScreenAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpScrAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpScrAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpScrAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsGroupScreenAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpScrSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4, 1, 4), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpScrSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpScrSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsGroupScreenAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGroupScreenAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 4, 1, 5), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsGroupScreenAddress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGroupScreenAddress.setDescription('A SMDS address that belongs to the group address screening table for a particular SNI.')
attCNMsmdsMemGrpTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5), )
if mibBuilder.loadTexts: attCNMsmdsMemGrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpTable.setDescription('A list of entries that identify the group addresses that have a particular individual adddress as a member.')
attCNMsmdsMemGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsMemGrpMemberCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsMemGrpMemberAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsMemGrpMemberSubscriberIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsMemGrpGroupCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsMemGrpGroupAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsMemGrpGroupSubscriberIndex"))
if mibBuilder.loadTexts: attCNMsmdsMemGrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpEntry.setDescription('An entry identifying a group address that has a particular member individual address as its member.')
attCNMsmdsMemGrpMemberCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: attCNMsmdsMemGrpMemberCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpMemberCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsMemberAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsMemGrpMemberAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: attCNMsmdsMemGrpMemberAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpMemberAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsMemberAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsMemGrpMemberSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 3), Integer32())
if mibBuilder.loadTexts: attCNMsmdsMemGrpMemberSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpMemberSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsMemberAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsMemGrpGroupCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 4), Integer32())
if mibBuilder.loadTexts: attCNMsmdsMemGrpGroupCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpGroupCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsAssociatedGroup object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsMemGrpGroupAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 5), Integer32())
if mibBuilder.loadTexts: attCNMsmdsMemGrpGroupAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpGroupAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsAssociatedGroup object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsMemGrpGroupSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 6), Integer32())
if mibBuilder.loadTexts: attCNMsmdsMemGrpGroupSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemGrpGroupSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsAssociatedGroup object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 7), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsMemberAddress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMemberAddress.setDescription('A SMDS individual address that is a member of a particular group.')
attCNMsmdsAssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 5, 1, 8), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsAssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAssociatedGroup.setDescription('The SMDS group address that identifies a group.')
attCNMsmdsGrpMemTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6), )
if mibBuilder.loadTexts: attCNMsmdsGrpMemTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemTable.setDescription('A list of entries that describe the group address table for this SMDS network.')
attCNMsmdsGrpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpMemGroupCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpMemGroupAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpMemGroupSubscriberIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpMemMemberCountryIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpMemMemberAreaIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsGrpMemMemberSubscriberIndex"))
if mibBuilder.loadTexts: attCNMsmdsGrpMemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemEntry.setDescription('An entry that identifies a member individual address that belongs to a particular group, identified by a group address.')
attCNMsmdsGrpMemGroupCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpMemGroupCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemGroupCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsMemberAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpMemGroupAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpMemGroupAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemGroupAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsMemberAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpMemGroupSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpMemGroupSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemGroupSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsMemberAddress object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpMemMemberCountryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 4), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpMemMemberCountryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemMemberCountryIndex.setDescription('The Country Code portion of the SMDS Address given by the attCNMsmdsGroupMember object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpMemMemberAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 5), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpMemMemberAreaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemMemberAreaIndex.setDescription('The Area Code (also known as the National Destination Code) portion of the SMDS Address given by the attCNMsmdsGroupMember object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGrpMemMemberSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 6), Integer32())
if mibBuilder.loadTexts: attCNMsmdsGrpMemMemberSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGrpMemMemberSubscriberIndex.setDescription('The Subscriber Number portion of the SMDS Address given by the attCNMsmdsGroupMember object. This object is not accessible as it is used for indexing purposes only. The attCNMsmdsAddrIndexDescr object provides more information on the proper usage and behaviour of such objects.')
attCNMsmdsGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 7), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGroupAddress.setDescription('A SMDS group address.')
attCNMsmdsGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 6, 1, 8), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsGroupMember.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsGroupMember.setDescription('A SMDS individual address that is a member of a particular group, identified by a group address.')
attCNMsmdsDisagreeTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7), )
if mibBuilder.loadTexts: attCNMsmdsDisagreeTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeTable.setDescription('A list of entries containg the SMDS disagreement counts, maintained during the specified measurement interval, for all SNIs managed by this system.')
attCNMsmdsDisagreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsDisagreeIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsDisagreeInterval"))
if mibBuilder.loadTexts: attCNMsmdsDisagreeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeEntry.setDescription('An entry containing the SMDS disagreement counts, maintained during the specified measurement interval, for a particular SNI.')
attCNMsmdsDisagreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeIndex.setDescription('A unique value for each SNI. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMsmdsDisagreeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeInterval.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeInterval.setDescription('This variable identifies the measurement interval number for which measurement is provided. It is a number between 1 and XX, where 1 identifies the most recently completed measurement interval and XX is the least recently completed measurement interval. The value of XX is specified by the attCNMsmdsDisagreeMaxIntervals object given in the attCNMsmdsConfigTable. The maximum length of each measurement interval is specified by the attCNMsmdsDisagreeIntervalLen object given in the attCNMds1ConfigTable.')
attCNMsmdsDisagreeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeTimeStamp.setDescription('The time stamp corresponding to the end of the specified measurement interval, as measured in seconds from 00:00:00 UTC (Coordinated Universal Time) January 1, 1970. Any fraction is rounded up.')
attCNMsmdsDisagreeLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLocalTime.setDescription('The time stamp corresponding to the end of the specified measurement interval. Any fraction is rounded up. It is given as a printable ASCII string showing the local time at the end of the interval.')
attCNMsmdsAccessClassExceededCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsAccessClassExceededCounts.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsAccessClassExceededCounts.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because the access class for this SNI has been exceeded.')
attCNMsmdsMCDUsExceededAtIngressCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsMCDUsExceededAtIngressCounts.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMCDUsExceededAtIngressCounts.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because the MCDU was exceeded in the CPE to SMDS network direction.')
attCNMsmdsMCDUsExceededAtEgressCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsMCDUsExceededAtEgressCounts.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsMCDUsExceededAtEgressCounts.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because the MCDU was exceeded in the SMDS network to CPE direction.')
attCNMsmdsSAScreenViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsSAScreenViolations.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsSAScreenViolations.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because it violated the address screen based on source address screening for this SNI.')
attCNMsmdsDAScreenViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDAScreenViolations.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDAScreenViolations.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because it violated the address screen based on destination address screening for this SNI.')
attCNMsmdsUnassignedSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsUnassignedSAs.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsUnassignedSAs.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because the source address was not assigned to this SNI.')
attCNMsmdsDestinationSNIUnavailableCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDestinationSNIUnavailableCounts.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDestinationSNIUnavailableCounts.setDescription('The counter associated with the number of L3 PDUs that were discarded, during the specified measurement interval, because the destination SNI was not available.')
attCNMsmdsDisagreeLogTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8), )
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogTable.setDescription('A list of entries identifying the latest occurrence of SMDS disagreements encountered by all SNIs managed by this system.')
attCNMsmdsDisagreeLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1), ).setIndexNames((0, "ATT-CNM-SMDS-MIB", "attCNMsmdsDisagreeLogIndex"), (0, "ATT-CNM-SMDS-MIB", "attCNMsmdsDisagreeLogType"))
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogEntry.setDescription('An entry identifying the latest occurrence of a specific SMDS disagreement encountered by a particular SNI.')
attCNMsmdsDisagreeLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogIndex.setDescription('A unique value for each SNI. The interface identified by a particular value of this index is the same interface as identified by the same value of an attCNMifConfigIndex object instance.')
attCNMsmdsDisagreeLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sourceAddressScreenViolation", 1), ("destinationAddressScreenViolation", 2), ("invalidSourceAddressForSNI", 3), ("destSNInotAvailable", 4), ("accessClassExceeded", 5), ("mcduExceededAtIngress", 6), ("mcduExceededAtEgress", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogType.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogType.setDescription('The type of SMDS disagreement. It could be one of: - Source Address Screening Violation, - Destination Address Screening Violation, - Source Address Not Assigned to a SNI, - Destination SNI Not Available, - Access Class Exceeded, - MCDUs Exceeded at Ingress, - MCDUs Exceeded at Egress The SMDS Disagreements Measurement Table in this MIB describes these disagreement types.')
attCNMsmdsDisagreeLogSA = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1, 3), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogSA.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogSA.setDescription('The SMDS source address in the rejected L3 PDU.')
attCNMsmdsDisagreeLogDA = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1, 4), SMDSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogDA.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogDA.setDescription('The SMDS destination address in the rejected L3 PDU.')
attCNMsmdsDisagreeLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogTimeStamp.setDescription('The time stamp for the latest occurrence of the specified disagreement, as measured in seconds from 00:00:00 UTC (Coordinated Universal Time) January 1, 1970. Any fraction is rounded up.')
attCNMsmdsDisagreeLogLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 15, 6, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogLocalTime.setStatus('mandatory')
if mibBuilder.loadTexts: attCNMsmdsDisagreeLogLocalTime.setDescription('The time stamp for the latest occurrence of the specified disagreement. It is given as a printable ASCII string showing the local time at the latest occurrence of this type of disagreement.')
mibBuilder.exportSymbols("ATT-CNM-SMDS-MIB", attCNMsmdsMemberAddress=attCNMsmdsMemberAddress, attCNMsmdsMemGrpEntry=attCNMsmdsMemGrpEntry, attCNMsmdsMemGrpGroupAreaIndex=attCNMsmdsMemGrpGroupAreaIndex, attCNMsmdsIndScrEntry=attCNMsmdsIndScrEntry, attCNMsmdsDisagreeLogEntry=attCNMsmdsDisagreeLogEntry, attCNMsmdsAddrIndexDescr=attCNMsmdsAddrIndexDescr, attCNMsmdsIndivScreenMode=attCNMsmdsIndivScreenMode, attCNMsmdsAddressOnSNI=attCNMsmdsAddressOnSNI, attCNMsmdsSAScreenViolations=attCNMsmdsSAScreenViolations, attCNMsmdsDisagreeLocalTime=attCNMsmdsDisagreeLocalTime, attCNMsmdsDisagreeLogType=attCNMsmdsDisagreeLogType, attCNMsmdsGrpMemGroupSubscriberIndex=attCNMsmdsGrpMemGroupSubscriberIndex, attCNMsmdsDestinationSNIUnavailableCounts=attCNMsmdsDestinationSNIUnavailableCounts, attCNMsmdsGrpScrIndex=attCNMsmdsGrpScrIndex, attCNMsmdsGroupScreenAddress=attCNMsmdsGroupScreenAddress, attCNMsmdsMCDUsIn=attCNMsmdsMCDUsIn, att_cnm_smds=att_cnm_smds, attCNMsmdsAccessClass=attCNMsmdsAccessClass, attCNMsmdsMCDUsExceededAtEgressCounts=attCNMsmdsMCDUsExceededAtEgressCounts, attCNMsmdsGrpScrSubscriberIndex=attCNMsmdsGrpScrSubscriberIndex, attCNMsmdsDisagreeTimeStamp=attCNMsmdsDisagreeTimeStamp, attCNMsmdsIndScrIndex=attCNMsmdsIndScrIndex, att_products=att_products, attCNMsmdsConfigIndex=attCNMsmdsConfigIndex, attCNMsmdsMemGrpGroupSubscriberIndex=attCNMsmdsMemGrpGroupSubscriberIndex, attCNMsmdsAddrEntry=attCNMsmdsAddrEntry, attCNMsmdsGrpMemEntry=attCNMsmdsGrpMemEntry, attCNMsmdsDisagreeMaxIntervals=attCNMsmdsDisagreeMaxIntervals, attCNMsmdsMemGrpMemberSubscriberIndex=attCNMsmdsMemGrpMemberSubscriberIndex, attCNMsmdsGrpMemTable=attCNMsmdsGrpMemTable, attCNMsmdsDisagreeLogSA=attCNMsmdsDisagreeLogSA, attCNMsmdsGrpMemMemberSubscriberIndex=attCNMsmdsGrpMemMemberSubscriberIndex, attCNMsmdsGroupMember=attCNMsmdsGroupMember, attCNMsmdsConfigEntry=attCNMsmdsConfigEntry, attCNMsmdsDisagreeLogTimeStamp=attCNMsmdsDisagreeLogTimeStamp, attCNMsmdsDisagreeLogIndex=attCNMsmdsDisagreeLogIndex, attCNMsmdsGroupScreenMode=attCNMsmdsGroupScreenMode, att_2=att_2, attCNMsmdsDisagreeInterval=attCNMsmdsDisagreeInterval, attCNMsmdsAddrCountryIndex=attCNMsmdsAddrCountryIndex, attCNMsmdsIndScrAreaIndex=attCNMsmdsIndScrAreaIndex, attCNMsmdsDisagreeTable=attCNMsmdsDisagreeTable, attCNMsmdsIndivScreenAddress=attCNMsmdsIndivScreenAddress, attCNMsmdsGrpMemGroupAreaIndex=attCNMsmdsGrpMemGroupAreaIndex, attCNMsmdsUnassignedSAs=attCNMsmdsUnassignedSAs, attCNMsmdsGrpMemMemberCountryIndex=attCNMsmdsGrpMemMemberCountryIndex, attCNMsmdsMemGrpMemberAreaIndex=attCNMsmdsMemGrpMemberAreaIndex, attCNMsmdsConfigTable=attCNMsmdsConfigTable, attCNMsmdsDisagreeEntry=attCNMsmdsDisagreeEntry, attCNMsmdsAddrAreaIndex=attCNMsmdsAddrAreaIndex, attCNMsmdsAddrTable=attCNMsmdsAddrTable, attCNMsmdsMCDUsExceededAtIngressCounts=attCNMsmdsMCDUsExceededAtIngressCounts, att_mgmt=att_mgmt, attCNMsmdsGrpMemGroupCountryIndex=attCNMsmdsGrpMemGroupCountryIndex, attCNMsmdsIndScrTable=attCNMsmdsIndScrTable, attCNMsmdsInterfaceIndex=attCNMsmdsInterfaceIndex, attCNMsmdsGrpScrEntry=attCNMsmdsGrpScrEntry, attCNMsmdsIndScrSubscriberIndex=attCNMsmdsIndScrSubscriberIndex, attCNMsmdsGrpScrTable=attCNMsmdsGrpScrTable, attCNMsmdsDisagreeLogLocalTime=attCNMsmdsDisagreeLogLocalTime, attCNMsmdsMCDUsOut=attCNMsmdsMCDUsOut, attCNMsmdsMemGrpTable=attCNMsmdsMemGrpTable, attCNMsmdsDisagreeIndex=attCNMsmdsDisagreeIndex, att_cnmAgent=att_cnmAgent, attCNMsmdsDAScreenViolations=attCNMsmdsDAScreenViolations, attCNMsmdsGrpScrAreaIndex=attCNMsmdsGrpScrAreaIndex, attCNMsmdsIndScrCountryIndex=attCNMsmdsIndScrCountryIndex, attCNMsmdsMemGrpMemberCountryIndex=attCNMsmdsMemGrpMemberCountryIndex, attCNMsmdsAccessClassExceededCounts=attCNMsmdsAccessClassExceededCounts, attCNMsmdsMemGrpGroupCountryIndex=attCNMsmdsMemGrpGroupCountryIndex, attCNMsmdsGrpScrCountryIndex=attCNMsmdsGrpScrCountryIndex, att_cnm=att_cnm, attCNMsmdsDisagreeLogTable=attCNMsmdsDisagreeLogTable, attCNMsmdsAssociatedGroup=attCNMsmdsAssociatedGroup, attCNMsmdsGrpMemMemberAreaIndex=attCNMsmdsGrpMemMemberAreaIndex, attCNMsmdsDisagreeIntervalLen=attCNMsmdsDisagreeIntervalLen, attCNMsmdsAddrSubscriberIndex=attCNMsmdsAddrSubscriberIndex, attCNMsmdsGroupAddress=attCNMsmdsGroupAddress, attCNMsmdsDisagreeLogDA=attCNMsmdsDisagreeLogDA, SMDSAddress=SMDSAddress)
