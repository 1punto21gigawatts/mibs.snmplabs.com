#
# PySNMP MIB module HPN-ICF-IPRAN-DCN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-IPRAN-DCN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:39:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, NotificationType, Counter64, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Bits, Counter32, MibIdentifier, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "NotificationType", "Counter64", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Bits", "Counter32", "MibIdentifier", "iso", "Unsigned32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
hpnicfIpRanDcn = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152))
hpnicfIpRanDcn.setRevisions(('2013-07-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfIpRanDcn.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfIpRanDcn.setLastUpdated('201307240000Z')
if mibBuilder.loadTexts: hpnicfIpRanDcn.setOrganization('')
if mibBuilder.loadTexts: hpnicfIpRanDcn.setContactInfo('')
if mibBuilder.loadTexts: hpnicfIpRanDcn.setDescription('This MIB provides mechanisms to monitor all network elements(NE) in Ipran Data Communication Network.')
class HpnicfIpRanNeId(TextualConvention, OctetString):
    description = 'Uniquely identify the network entity ID. The first 8 bit is 0 and the total valid length is 24 bit. The high 8 bit is subnet number and the low 16 bit is base id. The IpRanNeId will be showed as 0.x.x.x.'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

hpnicfIpRanDcnMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1))
hpnicfIpRanDcnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1))
hpnicfIpRanDcnInfoObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 1))
hpnicfIpRanDcnNeId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 1, 1), HpnicfIpRanNeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeId.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeId.setDescription('This object indicates the ID of the local network element.')
hpnicfIpRanDcnNeIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeIpType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeIpType.setDescription('This is the ip address type of the local network element.')
hpnicfIpRanDcnNeIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeIp.setDescription('This is the ip address of the local network element.')
hpnicfIpRanDcnMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnMask.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnMask.setDescription('This is the ip address mask of the local network element.')
hpnicfIpRanDcnNeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoTable.setDescription('This table provides the information of all network elements online.')
hpnicfIpRanDcnNeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeId"))
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoEntry.setDescription('A single network element information entry.')
hpnicfIpRanDcnNeInfoNeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2, 1, 1), HpnicfIpRanNeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoNeId.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoNeId.setDescription('This is the network element ID uniquely identifying one network element in the routing domain.')
hpnicfIpRanDcnNeInfoNeIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoNeIpType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoNeIpType.setDescription('This is the ip address type of the network element.')
hpnicfIpRanDcnNeInfoNeIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoNeIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoNeIp.setDescription('This is the ip address of the network element.')
hpnicfIpRanDcnNeInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoMetric.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoMetric.setDescription('The metric from the local network element to the remote network element.')
hpnicfIpRanDcnNeInfoDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoDeviceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeInfoDeviceType.setDescription('This is the device type of the network element.')
hpnicfIpRanDcnTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 2))
hpnicfIpRanDcnNeNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeNumber.setDescription('The overall number of network elements online.')
hpnicfIpRanDcnNeChangeMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnNeChangeMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeChangeMode.setDescription('The change mode of the last trap.')
hpnicfIpRanDcnCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnCompanyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnCompanyName.setDescription('The name of company.')
hpnicfIpRanDcnDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnDeviceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnDeviceType.setDescription('The type of device.')
hpnicfIpRanDcnDeviceMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 2, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIpRanDcnDeviceMac.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnDeviceMac.setDescription('The bridge MAC address of the network element.')
hpnicfIpRanDcnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 3))
hpnicfIpRanDcnTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 3, 0))
hpnicfIpRanDcnNeOnline = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 3, 0, 1)).setObjects(("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeId"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeIpType"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeIp"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnCompanyName"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnDeviceType"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnDeviceMac"))
if mibBuilder.loadTexts: hpnicfIpRanDcnNeOnline.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeOnline.setDescription('The trap is generated when a new network element is online.')
hpnicfIpRanDcnNeOffline = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 152, 1, 3, 0, 2)).setObjects(("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeId"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeIpType"), ("HPN-ICF-IPRAN-DCN-MIB", "hpnicfIpRanDcnNeInfoNeIp"))
if mibBuilder.loadTexts: hpnicfIpRanDcnNeOffline.setStatus('current')
if mibBuilder.loadTexts: hpnicfIpRanDcnNeOffline.setDescription('The trap is generated when a network element is offline.')
mibBuilder.exportSymbols("HPN-ICF-IPRAN-DCN-MIB", hpnicfIpRanDcnNeOnline=hpnicfIpRanDcnNeOnline, hpnicfIpRanDcnNeIpType=hpnicfIpRanDcnNeIpType, hpnicfIpRanDcnMask=hpnicfIpRanDcnMask, hpnicfIpRanDcnNeId=hpnicfIpRanDcnNeId, hpnicfIpRanDcn=hpnicfIpRanDcn, hpnicfIpRanDcnNeNumber=hpnicfIpRanDcnNeNumber, hpnicfIpRanDcnNeInfoEntry=hpnicfIpRanDcnNeInfoEntry, hpnicfIpRanDcnCompanyName=hpnicfIpRanDcnCompanyName, hpnicfIpRanDcnNeInfoMetric=hpnicfIpRanDcnNeInfoMetric, hpnicfIpRanDcnNeChangeMode=hpnicfIpRanDcnNeChangeMode, hpnicfIpRanDcnTrapObjects=hpnicfIpRanDcnTrapObjects, hpnicfIpRanDcnNeInfoTable=hpnicfIpRanDcnNeInfoTable, hpnicfIpRanDcnInfoObject=hpnicfIpRanDcnInfoObject, hpnicfIpRanDcnTrapsPrefix=hpnicfIpRanDcnTrapsPrefix, hpnicfIpRanDcnNeOffline=hpnicfIpRanDcnNeOffline, HpnicfIpRanNeId=HpnicfIpRanNeId, hpnicfIpRanDcnNeIp=hpnicfIpRanDcnNeIp, hpnicfIpRanDcnObjects=hpnicfIpRanDcnObjects, hpnicfIpRanDcnDeviceMac=hpnicfIpRanDcnDeviceMac, hpnicfIpRanDcnNeInfoNeId=hpnicfIpRanDcnNeInfoNeId, hpnicfIpRanDcnMIB=hpnicfIpRanDcnMIB, hpnicfIpRanDcnNeInfoDeviceType=hpnicfIpRanDcnNeInfoDeviceType, hpnicfIpRanDcnNeInfoNeIpType=hpnicfIpRanDcnNeInfoNeIpType, hpnicfIpRanDcnNeInfoNeIp=hpnicfIpRanDcnNeInfoNeIp, hpnicfIpRanDcnTraps=hpnicfIpRanDcnTraps, hpnicfIpRanDcnDeviceType=hpnicfIpRanDcnDeviceType, PYSNMP_MODULE_ID=hpnicfIpRanDcn)
