#
# PySNMP MIB module NTWS-AP-STATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTWS-AP-STATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NtwsRadioRate, NtwsRadioRateEx, NtwsRadioMimoState, NtwsRadioConfigState, NtwsApPortOrDapNum, NtwsApFingerprint, NtwsApState, NtwsApAttachType, NtwsApSerialNum, NtwsApNum, NtwsRadioChannelWidth, NtwsPowerLevel, NtwsChannelNum, NtwsRadioMode, NtwsRadioType, NtwsRadioEnable, NtwsRadioNum = mibBuilder.importSymbols("NTWS-AP-TC", "NtwsRadioRate", "NtwsRadioRateEx", "NtwsRadioMimoState", "NtwsRadioConfigState", "NtwsApPortOrDapNum", "NtwsApFingerprint", "NtwsApState", "NtwsApAttachType", "NtwsApSerialNum", "NtwsApNum", "NtwsRadioChannelWidth", "NtwsPowerLevel", "NtwsChannelNum", "NtwsRadioMode", "NtwsRadioType", "NtwsRadioEnable", "NtwsRadioNum")
NtwsPhysPortNumberOrZero, = mibBuilder.importSymbols("NTWS-BASIC-TC", "NtwsPhysPortNumberOrZero")
ntwsMibs, = mibBuilder.importSymbols("NTWS-ROOT-MIB", "ntwsMibs")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, ModuleIdentity, IpAddress, Counter32, Counter64, Gauge32, NotificationType, Integer32, iso, ObjectIdentity, TimeTicks, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "IpAddress", "Counter32", "Counter64", "Gauge32", "NotificationType", "Integer32", "iso", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
ntwsApStatusMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5))
ntwsApStatusMib.setRevisions(('2009-09-10 01:50', '2009-02-13 01:41', '2008-12-01 01:15', '2008-11-04 01:11', '2008-05-22 01:07', '2008-05-09 01:04', '2008-02-14 01:03', '2007-12-07 01:00', '2007-09-25 00:52', '2007-07-06 00:51', '2007-07-05 00:50', '2006-09-27 00:43', '2006-07-28 00:35', '2006-07-28 00:34', '2006-06-26 00:20', '2006-06-21 00:18', '2006-05-10 00:17', '2006-03-30 00:16',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntwsApStatusMib.setRevisionsDescriptions(('v3.8.0: Clarified description.', 'v3.7.1: Added: ntwsApStatApStatusIpNetmask, ntwsApStatApStatusMacIpNetmask, ntwsApStatApStatusWiredIfNumber, ntwsApStatApStatusMacWiredIfNumber, ntwsApStatRadioStatusMinPowerLevel, ntwsApStatRadioStatusMacMinPowerLevel, ntwsApStatRadioOpStatsClientAssociations, ntwsApStatRadioOpStatsMacClientAssociations, ntwsApStatRadioOpStatsClientFailedAssociations, ntwsApStatRadioOpStatsMacClientFailedAssociations, ntwsApStatRadioOpStatsClientReAssociations, ntwsApStatRadioOpStatsMacClientReAssociations; ntwsApStatRadioOpStatsSignalingPkt, ntwsApStatRadioOpStatsMacSignalingPkt, ntwsApStatRadioOpStatsReTransmitOctet, ntwsApStatRadioOpStatsMacReTransmitOctet, ntwsApStatRadioOpStatsRefusedConnectionCount, ntwsApStatRadioOpStatsMacRefusedConnectionCount.', 'v3.4.5: Added physical port number for directly attached AP: ntwsApStatApStatusPhysPortNum, ntwsApStatApStatusMacPhysPortNum.', 'v3.4.1: Added two tables for Operational Statistics detailed per Extended Data Transmission Rate (covering 802.11n MCS rates): ntwsApStatRadioRateExOpStatisticsTable, ntwsApStatRadioRateExOpStatisticsMacTable.', 'v3.3.1: Updated conformance section to reflect the history of changes to this MIB: added many compliance statements and groups.', 'v3.2.4: Updated description for AP Name objects: ntwsApStatApStatusApName, ntwsApStatApStatusMacApName.', 'v3.2.3: In order to support 802.11n, introduced ntwsApStatRadioStatusRadioChannelWidth, ntwsApStatRadioStatusMacRadioChannelWidth, ntwsApStatRadioStatusRadioMimoState, ntwsApStatRadioStatusMacRadioMimoState.', 'v3.2.0: Obsoleted four objects: ntwsApStatRadioStatusEnable, ntwsApStatRadioStatusMacEnable, ntwsApStatApStatusPortOrDapNum, ntwsApStatApStatusMacPortOrDapNum (previously deprecated).', 'v3.1.2, MRT v4.2: Made changes in order to make MIB comply with corporate MIB conventions.', "v3.1.1: Introduced ntwsApStatRadioStatusRadioMode, ntwsApStatRadioStatusMacRadioMode in order to replace ntwsApStatRadioStatusEnable, ntwsApStatRadioStatusMacEnable. (In 6.2, a new administrative mode 'sentry' was added.)", 'v3.1.0: Introduced ntwsApStatApStatusApNum, ntwsApStatApStatusMacApNum in order to replace ntwsApStatApStatusPortOrDapNum, ntwsApStatApStatusMacPortOrDapNum. (In 6.0, direct- and network-attached APs were unified.)', 'v3.0.3: Added 6 tables: 2 for Operational Rate Set per Radio Service, 2 for Operational Statistics per Radio, 2 for the statistics detailed per Data Transmission Rate. Names are: ntwsApStatRadioServiceOpRateSet, ntwsApStatRadioServiceOpRateSetMac, ntwsApStatRadioOpStatistics, ntwsApStatRadioOpStatisticsMac, ntwsApStatRadioRateOpStatistics, ntwsApStatRadioRateOpStatisticsMac.', 'v2.2.2: Removed unused imports', 'v2.2.1: Fixed imports and compliance group', 'v2.1.1: Adding Software Version and Boot Version per AP', 'v2.1.0: Adding Max Power and Phy Type per radio', 'v2.0: Adding number of client sessions per AP, radio', 'v1.0: Initial version',))
if mibBuilder.loadTexts: ntwsApStatusMib.setLastUpdated('200909100150Z')
if mibBuilder.loadTexts: ntwsApStatusMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: ntwsApStatusMib.setContactInfo('www.nortelnetworks.com')
if mibBuilder.loadTexts: ntwsApStatusMib.setDescription("AP Status objects for Nortel Networks wireless switches. AP = Access Point; AC = Access Controller (wireless switch), the device that runs a SNMP Agent implementing this MIB. Copyright 2009 Nortel Networks. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. This Specification is supplied 'AS IS' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
class NtwsRadioOpRateSetSingleValue(TextualConvention, OctetString):
    description = 'A data rate value at which the radio may transmit data. The octet contains a value representing a rate. The rate shall be within the range from 2 to 127, corresponding to data transmission rates in increments of 500 kbit/s from 1 Mbit/s to 63.5 Mbit/s.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 1)
    fixedLength = 1

class NtwsRadioOpRateSetMandatory(TextualConvention, OctetString):
    description = 'A set of data rates at which the radio may transmit data. Each octet contains a value representing a rate. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kbit/s from 1 Mbit/s to 63.5 Mbit/s. The set must have at least one member at all times.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 126)

class NtwsRadioOpRateSetDisabled(TextualConvention, OctetString):
    description = 'A set of data rates the radio must NOT use to transmit data. Each octet contains a value representing a rate. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kbit/s from 1 Mbit/s to 63.5 Mbit/s. If no such constraint is present in the system configuration, the zero-length OCTET STRING will be reported.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 126)

ntwsApStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1))
ntwsApStatDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1))
ntwsApStatNumAps = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatNumAps.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatNumAps.setDescription("Number of APs present and seen by AC (AP in ''ALIVE'' state).")
ntwsApStatApStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2), )
if mibBuilder.loadTexts: ntwsApStatApStatusTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusTable.setDescription("A table describing all the APs currently present and managed by this AC (APs in ''ALIVE'' state). Same data is available indexed by MAC in 'ntwsApStatApStatusMacTable'.")
ntwsApStatApStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatApStatusSerialNum"))
if mibBuilder.loadTexts: ntwsApStatApStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusEntry.setDescription('Information about a particular AP attached to the AC.')
ntwsApStatApStatusSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatApStatusSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusSerialNum.setDescription('The Serial Number of this AP.')
ntwsApStatApStatusBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusBaseMac.setDescription('The Base MAC address of this AP.')
ntwsApStatApStatusAttachType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 3), NtwsApAttachType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusAttachType.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusAttachType.setDescription('How this AP is attached to the AC (directly or via L2/L3 network).')
ntwsApStatApStatusPortOrDapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 4), NtwsApPortOrDapNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusPortOrDapNum.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatApStatusPortOrDapNum.setDescription('The Port Number if this AP is directly attached, or the CLI-assigned DAP Number if attached via L2/L3 network. Obsoleted by ntwsApStatApStatusApNum.')
ntwsApStatApStatusApState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 5), NtwsApState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusApState.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusApState.setDescription('The State of this AP.')
ntwsApStatApStatusModel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusModel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusModel.setDescription('The Model name of this AP.')
ntwsApStatApStatusFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 7), NtwsApFingerprint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusFingerprint.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusFingerprint.setDescription('The RSA key fingerprint configured on this AP (binary value: it is the MD5 hash of the public key of the RSA key pair). For directly attached APs the fingerprint is a zero length string.')
ntwsApStatApStatusApName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusApName.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusApName.setDescription("The name of this AP, as assigned in AC's CLI; defaults to AP<Number> (examples: 'AP01', 'AP22', 'AP333', 'AP4444'); could have been changed from CLI to a meaningful name, for example the location of the AP (example: 'MeetingRoom73').")
ntwsApStatApStatusVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusVlan.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusVlan.setDescription('The name of the VLAN associated with this DAP. Only valid for network attached APs, otherwise zero length string.')
ntwsApStatApStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusIpAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusIpAddress.setDescription('The IP Address of this DAP. Only valid for network attached APs, otherwise 0.0.0.0.')
ntwsApStatApStatusUptimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusUptimeSecs.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusUptimeSecs.setDescription("Time in seconds since this AP's last boot.")
ntwsApStatApStatusCpuInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusCpuInfo.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusCpuInfo.setDescription("Information about this AP's CPU.")
ntwsApStatApStatusManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusManufacturerId.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusManufacturerId.setDescription("Information about this AP's manufacturer.")
ntwsApStatApStatusRamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusRamBytes.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusRamBytes.setDescription('The memory capacity of this AP (in bytes).')
ntwsApStatApStatusHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusHardwareRev.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusHardwareRev.setDescription("The hardware revision of this AP (e.g. 'A3').")
ntwsApStatApStatusClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusClientSessions.setDescription('The number of client sessions on this AP.')
ntwsApStatApStatusSoftwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusSoftwareVer.setDescription('The software version for this AP.')
ntwsApStatApStatusBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusBootVer.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusBootVer.setDescription('The boot loader version for this AP.')
ntwsApStatApStatusApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 19), NtwsApNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusApNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusApNum.setDescription('The administratively assigned AP Number. Obsoletes ntwsApStatApStatusPortOrDapNum.')
ntwsApStatApStatusPhysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 20), NtwsPhysPortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusPhysPortNum.setDescription('Identifies the physical port used to attach this AP. Only valid for directly attached APs, otherwise will be zero.')
ntwsApStatApStatusIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusIpNetmask.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusIpNetmask.setDescription('The IP Netmask of this AP. Only valid for network attached APs, otherwise 0.0.0.0.')
ntwsApStatApStatusWiredIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusWiredIfNumber.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusWiredIfNumber.setDescription('The number of wired network interfaces (regardless of their current state) present on this AP.')
ntwsApStatApStatusMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3), )
if mibBuilder.loadTexts: ntwsApStatApStatusMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacTable.setDescription("A table describing all the APs currently present and managed by this AC (APs in ''ALIVE'' state). Same data is available indexed by Serial Number in 'ntwsApStatApStatusTable'.")
ntwsApStatApStatusMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacBaseMac"))
if mibBuilder.loadTexts: ntwsApStatApStatusMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacEntry.setDescription('Information about a particular AP attached to the AC.')
ntwsApStatApStatusMacBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatApStatusMacBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacBaseMac.setDescription('The Base MAC address of this AP.')
ntwsApStatApStatusMacSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 2), NtwsApSerialNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacSerialNum.setDescription('The Serial Number of this AP.')
ntwsApStatApStatusMacAttachType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 3), NtwsApAttachType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacAttachType.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacAttachType.setDescription('How this AP is attached to the AC (directly or via L2/L3 network).')
ntwsApStatApStatusMacPortOrDapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 4), NtwsApPortOrDapNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacPortOrDapNum.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatApStatusMacPortOrDapNum.setDescription('The Port Number if this AP is directly attached, or the CLI-assigned DAP Number if attached via L2/L3 network. Obsoleted by ntwsApStatApStatusMacApNum.')
ntwsApStatApStatusMacApState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 5), NtwsApState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacApState.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacApState.setDescription('The State of this AP.')
ntwsApStatApStatusMacModel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacModel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacModel.setDescription('The Model name of this AP.')
ntwsApStatApStatusMacFingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 7), NtwsApFingerprint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacFingerprint.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacFingerprint.setDescription('The RSA key fingerprint configured on this AP (binary value: it is the MD5 hash of the public key of the RSA key pair). For directly attached APs the fingerprint is a zero length string.')
ntwsApStatApStatusMacApName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacApName.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacApName.setDescription("The name of this AP, as assigned in AC's CLI; defaults to AP<Number> (examples: 'AP01', 'AP22', 'AP333', 'AP4444'); could have been changed from CLI to a meaningful name, for example the location of the AP (example: 'MeetingRoom73').")
ntwsApStatApStatusMacVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacVlan.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacVlan.setDescription('The name of the VLAN associated with this DAP. Only valid for network attached APs, otherwise zero length string.')
ntwsApStatApStatusMacIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacIpAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacIpAddress.setDescription('The IP Address of this DAP. Only valid for network attached APs, otherwise 0.0.0.0.')
ntwsApStatApStatusMacUptimeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacUptimeSecs.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacUptimeSecs.setDescription("Time in seconds since this AP's last boot.")
ntwsApStatApStatusMacCpuInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacCpuInfo.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacCpuInfo.setDescription("Information about this AP's CPU.")
ntwsApStatApStatusMacManufacturerId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacManufacturerId.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacManufacturerId.setDescription("Information about this AP's manufacturer.")
ntwsApStatApStatusMacRamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacRamBytes.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacRamBytes.setDescription('The memory capacity of this AP (in bytes).')
ntwsApStatApStatusMacHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacHardwareRev.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacHardwareRev.setDescription("The hardware revision of this AP (e.g. 'A3').")
ntwsApStatApStatusMacClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacClientSessions.setDescription('The number of client sessions on this AP.')
ntwsApStatApStatusMacSoftwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacSoftwareVer.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacSoftwareVer.setDescription('The software version for this AP.')
ntwsApStatApStatusMacBootVer = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacBootVer.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacBootVer.setDescription('The boot loader version for this AP.')
ntwsApStatApStatusMacApNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 19), NtwsApNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacApNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacApNum.setDescription('The administratively assigned AP Number. Obsoletes ntwsApStatApStatusMacPortOrDapNum.')
ntwsApStatApStatusMacPhysPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 20), NtwsPhysPortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacPhysPortNum.setDescription('Identifies the physical port used to attach this AP. Only valid for directly attached APs, otherwise will be zero.')
ntwsApStatApStatusMacIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacIpNetmask.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacIpNetmask.setDescription('The IP Netmask of this AP. Only valid for network attached APs, otherwise 0.0.0.0.')
ntwsApStatApStatusMacWiredIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatApStatusMacWiredIfNumber.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatApStatusMacWiredIfNumber.setDescription('The number of wired network interfaces (regardless of their current state) present on this AP.')
ntwsApStatRadioStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4), )
if mibBuilder.loadTexts: ntwsApStatRadioStatusTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusTable.setDescription("A table describing the radios on all the APs currently present and managed by this AC (APs in ''ALIVE'' state). Same data is available indexed by Radio Base MAC in 'ntwsApStatRadioStatusMacTable'.")
ntwsApStatRadioStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusApSerialNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioNum"))
if mibBuilder.loadTexts: ntwsApStatRadioStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusEntry.setDescription('Information about a particular radio on an AP attached to the AC.')
ntwsApStatRadioStatusApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatRadioStatusApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusApSerialNum.setDescription('The Serial Number of the AP containing this radio.')
ntwsApStatRadioStatusRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 2), NtwsRadioNum())
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioNum.setDescription('The Number of this Radio on the AP.')
ntwsApStatRadioStatusBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusBaseMac.setDescription('The Base MAC address of this radio.')
ntwsApStatRadioStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 4), NtwsRadioEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusEnable.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatRadioStatusEnable.setDescription('The configured mode (enabled/disabled) of this radio. Obsoleted by ntwsApStatRadioStatusRadioMode.')
ntwsApStatRadioStatusRadioConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 5), NtwsRadioConfigState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioConfigState.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioConfigState.setDescription('The configuration state of this radio (INIT, FAIL, OK).')
ntwsApStatRadioStatusCurrentPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 6), NtwsPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusCurrentPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusCurrentPowerLevel.setDescription('The Current Power Level of this radio.')
ntwsApStatRadioStatusCurrentChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 7), NtwsChannelNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusCurrentChannelNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusCurrentChannelNum.setDescription('The Current Channel Number of this radio.')
ntwsApStatRadioStatusClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusClientSessions.setDescription('The number of client sessions on this radio.')
ntwsApStatRadioStatusMaxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 9), NtwsPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMaxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMaxPowerLevel.setDescription('The Maximum Power Level for this radio, with the current antenna, on the current channel (ntwsApStatRadioStatusCurrentChannelNum), as constrained by the current regulatory domain.')
ntwsApStatRadioStatusRadioPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 10), NtwsRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioPhyType.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioPhyType.setDescription('The current Physical Type of this radio (typeUnknown, typeA, typeB, typeG).')
ntwsApStatRadioStatusRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 11), NtwsRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioMode.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioMode.setDescription('The configured mode of this radio (enabled/disabled/sentry). Obsoletes ntwsApStatRadioStatusEnable.')
ntwsApStatRadioStatusRadioChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 12), NtwsRadioChannelWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioChannelWidth.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioChannelWidth.setDescription('The configured Channel Width for this radio (20MHz/40MHz).')
ntwsApStatRadioStatusRadioMimoState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 13), NtwsRadioMimoState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioMimoState.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusRadioMimoState.setDescription('MIMO state of this radio (1x1/2x3/3x3).')
ntwsApStatRadioStatusMinPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 4, 1, 14), NtwsPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMinPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMinPowerLevel.setDescription('The Minimum Power Level for this radio, with the current antenna.')
ntwsApStatRadioStatusMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5), )
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacTable.setDescription("A table describing the radios on all the APs currently present and managed by this AC (APs in ''ALIVE'' state). Same data is available indexed by AP Serial Number and Radio Number in 'ntwsApStatRadioStatusTable'.")
ntwsApStatRadioStatusMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacBaseMac"))
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacEntry.setDescription('Information about a particular radio on an AP attached to the AC.')
ntwsApStatRadioStatusMacBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacBaseMac.setDescription('The Base MAC address of this radio.')
ntwsApStatRadioStatusMacApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 2), NtwsApSerialNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacApSerialNum.setDescription('The Serial Number of the AP containing this radio.')
ntwsApStatRadioStatusMacRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 3), NtwsRadioNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioNum.setDescription('The Number of this Radio on the AP.')
ntwsApStatRadioStatusMacEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 4), NtwsRadioEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacEnable.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacEnable.setDescription('The configured mode (enabled/disabled) of this radio. Obsoleted by ntwsApStatRadioStatusMacRadioMode.')
ntwsApStatRadioStatusMacRadioConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 5), NtwsRadioConfigState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioConfigState.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioConfigState.setDescription('The configuration state of this radio (INIT, FAIL, OK).')
ntwsApStatRadioStatusMacCurrentPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 6), NtwsPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacCurrentPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacCurrentPowerLevel.setDescription('The Current Power Level of this radio.')
ntwsApStatRadioStatusMacCurrentChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 7), NtwsChannelNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacCurrentChannelNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacCurrentChannelNum.setDescription('The Current Channel Number of this radio.')
ntwsApStatRadioStatusMacClientSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacClientSessions.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacClientSessions.setDescription('The number of client sessions on this radio.')
ntwsApStatRadioStatusMacMaxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 9), NtwsPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacMaxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacMaxPowerLevel.setDescription('The Maximum Power Level for this radio, with the current antenna, on the current channel (ntwsApStatRadioStatusMacCurrentChannelNum), as constrained by the current regulatory domain.')
ntwsApStatRadioStatusMacRadioPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 10), NtwsRadioType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioPhyType.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioPhyType.setDescription('The current Physical Type of this radio (typeUnknown, typeA, typeB, typeG).')
ntwsApStatRadioStatusMacRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 11), NtwsRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioMode.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioMode.setDescription('The configured mode of this radio (enabled/disabled/sentry). Obsoletes ntwsApStatRadioStatusMacEnable.')
ntwsApStatRadioStatusMacRadioChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 12), NtwsRadioChannelWidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioChannelWidth.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioChannelWidth.setDescription('The configured Channel Width for this radio (20MHz/40MHz).')
ntwsApStatRadioStatusMacRadioMimoState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 13), NtwsRadioMimoState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioMimoState.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacRadioMimoState.setDescription('MIMO state of this radio (1x1/2x3/3x3).')
ntwsApStatRadioStatusMacMinPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 5, 1, 14), NtwsPowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacMinPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioStatusMacMinPowerLevel.setDescription('The Minimum Power Level for this radio, with the current antenna.')
ntwsApStatRadioServiceTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6), )
if mibBuilder.loadTexts: ntwsApStatRadioServiceTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceTable.setDescription("A table describing the radio services associated with the APs currently present and managed by this AC. Same data is available indexed by BSSID in 'ntwsApStatRadioServiceMacTable'.")
ntwsApStatRadioServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioServApSerialNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioServRadioNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioServSsid"))
if mibBuilder.loadTexts: ntwsApStatRadioServiceEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceEntry.setDescription('Information about a particular service (SSID) on a radio.')
ntwsApStatRadioServApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatRadioServApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServApSerialNum.setDescription('The Serial Number of the AP containing this radio.')
ntwsApStatRadioServRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6, 1, 2), NtwsRadioNum())
if mibBuilder.loadTexts: ntwsApStatRadioServRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServRadioNum.setDescription('The Number of this Radio on the AP.')
ntwsApStatRadioServSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: ntwsApStatRadioServSsid.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServSsid.setDescription('The service/SSID name in use on this radio.')
ntwsApStatRadioServBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioServBssid.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServBssid.setDescription('The MAC address (a.k.a. BSSID) of this service/SSID on this radio.')
ntwsApStatRadioServServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioServServiceProfileName.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServServiceProfileName.setDescription('The Name of the Service Profile having this SSID and associated to the (only) radio profile of this radio.')
ntwsApStatRadioServiceMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7), )
if mibBuilder.loadTexts: ntwsApStatRadioServiceMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceMacTable.setDescription("A table describing the radio services associated with the APs currently present and managed by this AC. Same data is available indexed by AP Serial Number, Radio Number and SSID in 'ntwsApStatRadioServiceTable'.")
ntwsApStatRadioServiceMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacBssid"))
if mibBuilder.loadTexts: ntwsApStatRadioServiceMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceMacEntry.setDescription('Information about a particular service (SSID) on a radio.')
ntwsApStatRadioServMacBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatRadioServMacBssid.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServMacBssid.setDescription('The MAC address (a.k.a. BSSID) of this service/SSID on this radio.')
ntwsApStatRadioServMacApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7, 1, 2), NtwsApSerialNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioServMacApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServMacApSerialNum.setDescription('The Serial Number of the AP containing this radio.')
ntwsApStatRadioServMacRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7, 1, 3), NtwsRadioNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioServMacRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServMacRadioNum.setDescription('The Number of this Radio on the AP.')
ntwsApStatRadioServMacSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioServMacSsid.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServMacSsid.setDescription('The service/SSID name in use on this radio.')
ntwsApStatRadioServMacServiceProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioServMacServiceProfileName.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServMacServiceProfileName.setDescription('The Name of the Service Profile that configures this BSSID.')
ntwsApStatRadioServiceOpRateSetTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8), )
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetTable.setDescription("A table describing the radio services associated with the APs currently present and managed by this AC. Same data is available indexed by BSSID in 'ntwsApStatRadioServiceOpRateSetMacTable'.")
ntwsApStatRadioServiceOpRateSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetApSerialNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetRadioNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetSsid"))
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetEntry.setDescription('Information about a particular service (SSID) on a radio.')
ntwsApStatRadioSORSetApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatRadioSORSetApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetApSerialNum.setDescription('The Serial Number of the AP containing this radio.')
ntwsApStatRadioSORSetRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 2), NtwsRadioNum())
if mibBuilder.loadTexts: ntwsApStatRadioSORSetRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetRadioNum.setDescription('The Number of this Radio on the AP.')
ntwsApStatRadioSORSetSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: ntwsApStatRadioSORSetSsid.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetSsid.setDescription('The service/SSID name in use on this radio.')
ntwsApStatRadioSORSetMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 4), NtwsRadioOpRateSetMandatory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMandatory.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMandatory.setDescription('The Mandatory Rate Set configured for this radio service.')
ntwsApStatRadioSORSetDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 5), NtwsRadioOpRateSetDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetDisabled.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetDisabled.setDescription('The Disabled Rate Set configured for this radio service.')
ntwsApStatRadioSORSetBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 6), NtwsRadioOpRateSetSingleValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetBeacon.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetBeacon.setDescription('The configured Beacon Rate for this radio service.')
ntwsApStatRadioSORSetMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 8, 1, 7), NtwsRadioOpRateSetSingleValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMulticast.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMulticast.setDescription('The configured Multicast Rate for this radio service.')
ntwsApStatRadioServiceOpRateSetMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9), )
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetMacTable.setDescription("A table describing the radio services associated with the APs currently present and managed by this AC. Same data is available indexed by AP Serial Number, Radio Number and SSID in 'ntwsApStatRadioServiceOpRateSetTable'.")
ntwsApStatRadioServiceOpRateSetMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMacBssid"))
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioServiceOpRateSetMacEntry.setDescription('Information about a particular service (SSID) on a radio.')
ntwsApStatRadioSORSetMacBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacBssid.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacBssid.setDescription('The MAC address (a.k.a. BSSID) of this service/SSID on this radio.')
ntwsApStatRadioSORSetMacMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9, 1, 2), NtwsRadioOpRateSetMandatory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacMandatory.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacMandatory.setDescription('The Mandatory Rate Set configured for this radio service.')
ntwsApStatRadioSORSetMacDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9, 1, 3), NtwsRadioOpRateSetDisabled()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacDisabled.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacDisabled.setDescription('The Disabled Rate Set configured for this radio service.')
ntwsApStatRadioSORSetMacBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9, 1, 4), NtwsRadioOpRateSetSingleValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacBeacon.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacBeacon.setDescription('The configured Beacon Rate for this radio service.')
ntwsApStatRadioSORSetMacMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 9, 1, 5), NtwsRadioOpRateSetSingleValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacMulticast.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioSORSetMacMulticast.setDescription('The configured Multicast Rate for this radio service.')
ntwsApStatRadioOpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10), )
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsTable.setDescription("A table providing the Radio Operational Statistics for all radios on all APs attached to this switch. Same data is available indexed by Radio Base MAC in 'ntwsApStatRadioOpStatisticsMacTable'.")
ntwsApStatRadioOpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsApSerialNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsRadioNum"))
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsEntry.setDescription('Operational statistics (counters) for a particular radio.')
ntwsApStatRadioOpStatsApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsApSerialNum.setDescription('The Serial Number of the AP containing this radio.')
ntwsApStatRadioOpStatsRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 2), NtwsRadioNum())
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRadioNum.setDescription('The Number of this Radio on the AP.')
ntwsApStatRadioOpStatsTxUniPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxUniPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxUniPkt.setDescription('Number of unicast packets transmitted.')
ntwsApStatRadioOpStatsTxUniOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxUniOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxUniOctet.setDescription('Total number of octets transmitted in unicast packets.')
ntwsApStatRadioOpStatsTxMultiPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxMultiPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxMultiPkt.setDescription('Number of multicast packets transmitted.')
ntwsApStatRadioOpStatsTxMultiOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxMultiOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxMultiOctet.setDescription('Total number of octets transmitted in multicast packets.')
ntwsApStatRadioOpStatsRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRxPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRxPkt.setDescription('Number of packets received.')
ntwsApStatRadioOpStatsRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRxOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRxOctet.setDescription('Total number of octets received.')
ntwsApStatRadioOpStatsUndcrptPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsUndcrptPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsUndcrptPkt.setDescription('Number of undecrypted packets.')
ntwsApStatRadioOpStatsUndcrptOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsUndcrptOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsUndcrptOctet.setDescription('Total number of octets in undecrypted packets.')
ntwsApStatRadioOpStatsPhyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsPhyErr.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsPhyErr.setDescription('Number of Physical Errors occurred.')
ntwsApStatRadioOpStatsResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsResetCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsResetCount.setDescription('Number of reset operations for this radio.')
ntwsApStatRadioOpStatsAutoTuneChannelChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsAutoTuneChannelChangeCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsAutoTuneChannelChangeCount.setDescription('Number of Channel Changes, in Auto-Tuning mode only, since the AP containing this radio became operational. Note that manual channel changes are not counted.')
ntwsApStatRadioOpStatsTxRetriesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxRetriesCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsTxRetriesCount.setDescription('Number of Transmission Retries.')
ntwsApStatRadioOpStatsUserSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsUserSessions.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsUserSessions.setDescription('Number of client sessions using this radio at the current moment.')
ntwsApStatRadioOpStatsNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsNoiseFloor.setDescription('Noise Floor in dBm.')
ntwsApStatRadioOpStatsClientAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsClientAssociations.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsClientAssociations.setDescription('The total number of client association attempts on this radio (including re-association attempts).')
ntwsApStatRadioOpStatsClientFailedAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsClientFailedAssociations.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsClientFailedAssociations.setDescription('The total number of failed client association attempts on this radio (including re-association attempts).')
ntwsApStatRadioOpStatsClientReAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsClientReAssociations.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsClientReAssociations.setDescription('The total number of client re-association attempts.')
ntwsApStatRadioOpStatsSignalingPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsSignalingPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsSignalingPkt.setDescription('The total number of 802.11 management frames and 802.11 control frames transmitted and received by this radio.')
ntwsApStatRadioOpStatsReTransmitOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsReTransmitOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsReTransmitOctet.setDescription('The total number of re-transmit octets.')
ntwsApStatRadioOpStatsRefusedConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRefusedConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsRefusedConnectionCount.setDescription('Number of refused connections due to not enough resources.')
ntwsApStatRadioOpStatisticsMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11), )
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsMacTable.setDescription("A table providing the Radio Operational Statistics for all radios on all APs attached to this switch. Same data is available indexed by AP Serial Number and Radio Number in 'ntwsApStatRadioOpStatisticsTable'.")
ntwsApStatRadioOpStatisticsMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacBaseMac"))
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatisticsMacEntry.setDescription('Operational statistics (counters) for a particular radio.')
ntwsApStatRadioOpStatsMacBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacBaseMac.setDescription('The Base MAC address of this radio.')
ntwsApStatRadioOpStatsMacTxUniPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxUniPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxUniPkt.setDescription('Number of unicast packets transmitted.')
ntwsApStatRadioOpStatsMacTxUniOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxUniOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxUniOctet.setDescription('Total number of octets transmitted in unicast packets.')
ntwsApStatRadioOpStatsMacTxMultiPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxMultiPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxMultiPkt.setDescription('Number of multicast packets transmitted.')
ntwsApStatRadioOpStatsMacTxMultiOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxMultiOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxMultiOctet.setDescription('Total number of octets transmitted in multicast packets.')
ntwsApStatRadioOpStatsMacRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacRxPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacRxPkt.setDescription('Number of packets received.')
ntwsApStatRadioOpStatsMacRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacRxOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacRxOctet.setDescription('Total number of octets received.')
ntwsApStatRadioOpStatsMacUndcrptPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacUndcrptPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacUndcrptPkt.setDescription('Number of undecrypted packets.')
ntwsApStatRadioOpStatsMacUndcrptOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacUndcrptOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacUndcrptOctet.setDescription('Total number of octets in undecrypted packets.')
ntwsApStatRadioOpStatsMacPhyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacPhyErr.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacPhyErr.setDescription('Number of Physical Errors occurred.')
ntwsApStatRadioOpStatsMacResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacResetCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacResetCount.setDescription('Number of reset operations for this radio.')
ntwsApStatRadioOpStatsMacAutoTuneChannelChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacAutoTuneChannelChangeCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacAutoTuneChannelChangeCount.setDescription('Number of Channel Changes, in Auto-Tuning mode only, since the AP containing this radio became operational. Note that manual channel changes are not counted.')
ntwsApStatRadioOpStatsMacTxRetriesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxRetriesCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacTxRetriesCount.setDescription('Number of Transmission Retries.')
ntwsApStatRadioOpStatsMacUserSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacUserSessions.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacUserSessions.setDescription('Number of client sessions using this radio at the current moment.')
ntwsApStatRadioOpStatsMacNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacNoiseFloor.setDescription('Noise Floor in dBm.')
ntwsApStatRadioOpStatsMacClientAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacClientAssociations.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacClientAssociations.setDescription('The total number of client association attempts on this radio (including re-association attempts).')
ntwsApStatRadioOpStatsMacClientFailedAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacClientFailedAssociations.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacClientFailedAssociations.setDescription('The total number of failed client association attempts on this radio (including re-association attempts).')
ntwsApStatRadioOpStatsMacClientReAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacClientReAssociations.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacClientReAssociations.setDescription('The total number of client re-association attempts.')
ntwsApStatRadioOpStatsMacSignalingPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacSignalingPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacSignalingPkt.setDescription('The total number of 802.11 management frames and 802.11 control frames transmitted and received by this radio.')
ntwsApStatRadioOpStatsMacReTransmitOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacReTransmitOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacReTransmitOctet.setDescription('The total number of re-transmit octets.')
ntwsApStatRadioOpStatsMacRefusedConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacRefusedConnectionCount.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioOpStatsMacRefusedConnectionCount.setDescription('Number of refused connections due to not enough resources.')
ntwsApStatRadioRateOpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12), )
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsTable.setDescription("A table providing the Radio Operational Statistics per transmission Rate for all radios on all APs attached to this switch. Same data is available indexed by Radio Base MAC and Data Transmission Rate in 'ntwsApStatRadioRateOpStatisticsMacTable'.")
ntwsApStatRadioRateOpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsApSerialNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsRadioNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsRate"))
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsEntry.setDescription('Operational statistics (counters) for a particular data transmission rate on a particular radio.')
ntwsApStatRadioRateOpStatsApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsApSerialNum.setDescription('Table index.')
ntwsApStatRadioRateOpStatsRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 2), NtwsRadioNum())
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRadioNum.setDescription('Table index.')
ntwsApStatRadioRateOpStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 3), NtwsRadioRate())
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRate.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRate.setDescription('Table index.')
ntwsApStatRadioRateOpStatsTxUniPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxUniPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxUniPkt.setDescription('Number of unicast packets transmitted.')
ntwsApStatRadioRateOpStatsTxUniOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxUniOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxUniOctet.setDescription('Total number of octets transmitted in unicast packets.')
ntwsApStatRadioRateOpStatsTxMultiPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxMultiPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxMultiPkt.setDescription('Number of multicast packets transmitted.')
ntwsApStatRadioRateOpStatsTxMultiOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxMultiOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsTxMultiOctet.setDescription('Total number of octets transmitted in multicast packets.')
ntwsApStatRadioRateOpStatsRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRxPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRxPkt.setDescription('Number of packets received.')
ntwsApStatRadioRateOpStatsRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRxOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsRxOctet.setDescription('Total number of octets received.')
ntwsApStatRadioRateOpStatsUndcrptPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsUndcrptPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsUndcrptPkt.setDescription('Number of undecrypted packets.')
ntwsApStatRadioRateOpStatsUndcrptOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsUndcrptOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsUndcrptOctet.setDescription('Total number of octets in undecrypted packets.')
ntwsApStatRadioRateOpStatsPhyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 12, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsPhyErr.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsPhyErr.setDescription('Number of Physical Errors occurred.')
ntwsApStatRadioRateOpStatisticsMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13), )
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsMacTable.setDescription("A table providing the Radio Operational Statistics per transmission Rate for all radios on all APs attached to this switch. Same data is available indexed by AP Serial Number, Radio Number and Data Transmission Rate in 'ntwsApStatRadioRateOpStatisticsTable'.")
ntwsApStatRadioRateOpStatisticsMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacBaseMac"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacRate"))
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatisticsMacEntry.setDescription('Operational statistics (counters) for a particular data transmission rate on a particular radio.')
ntwsApStatRadioRateOpStatsMacBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacBaseMac.setDescription('Table index.')
ntwsApStatRadioRateOpStatsMacRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 2), NtwsRadioRate())
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacRate.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacRate.setDescription('Table index.')
ntwsApStatRadioRateOpStatsMacTxUniPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxUniPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxUniPkt.setDescription('Number of unicast packets transmitted.')
ntwsApStatRadioRateOpStatsMacTxUniOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxUniOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxUniOctet.setDescription('Total number of octets transmitted in unicast packets.')
ntwsApStatRadioRateOpStatsMacTxMultiPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxMultiPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxMultiPkt.setDescription('Number of multicast packets transmitted.')
ntwsApStatRadioRateOpStatsMacTxMultiOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxMultiOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacTxMultiOctet.setDescription('Total number of octets transmitted in multicast packets.')
ntwsApStatRadioRateOpStatsMacRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacRxPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacRxPkt.setDescription('Number of packets received.')
ntwsApStatRadioRateOpStatsMacRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacRxOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacRxOctet.setDescription('Total number of octets received.')
ntwsApStatRadioRateOpStatsMacUndcrptPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacUndcrptPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacUndcrptPkt.setDescription('Number of undecrypted packets.')
ntwsApStatRadioRateOpStatsMacUndcrptOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacUndcrptOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacUndcrptOctet.setDescription('Total number of octets in undecrypted packets.')
ntwsApStatRadioRateOpStatsMacPhyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 13, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacPhyErr.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateOpStatsMacPhyErr.setDescription('Number of Physical Errors occurred.')
ntwsApStatRadioRateExOpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14), )
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsTable.setDescription("A table providing the Radio Operational Statistics per Extended Rate for all radios on all APs attached to this switch. Same data is available indexed by Radio Base MAC and Extended Rate in 'ntwsApStatRadioRateExOpStatisticsMacTable'.")
ntwsApStatRadioRateExOpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsApSerialNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsRadioNum"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsRateEx"))
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsEntry.setDescription('Operational statistics (counters) for a particular data transmission rate on a particular radio.')
ntwsApStatRadioRateExOpStatsApSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 1), NtwsApSerialNum())
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsApSerialNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsApSerialNum.setDescription('Table index.')
ntwsApStatRadioRateExOpStatsRadioNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 2), NtwsRadioNum())
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRadioNum.setDescription('Table index.')
ntwsApStatRadioRateExOpStatsRateEx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 3), NtwsRadioRateEx())
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRateEx.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRateEx.setDescription('Table index.')
ntwsApStatRadioRateExOpStatsTxUniPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxUniPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxUniPkt.setDescription('Number of unicast packets transmitted.')
ntwsApStatRadioRateExOpStatsTxUniOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxUniOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxUniOctet.setDescription('Total number of octets transmitted in unicast packets.')
ntwsApStatRadioRateExOpStatsTxMultiPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxMultiPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxMultiPkt.setDescription('Number of multicast packets transmitted.')
ntwsApStatRadioRateExOpStatsTxMultiOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxMultiOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsTxMultiOctet.setDescription('Total number of octets transmitted in multicast packets.')
ntwsApStatRadioRateExOpStatsRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRxPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRxPkt.setDescription('Number of packets received.')
ntwsApStatRadioRateExOpStatsRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRxOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsRxOctet.setDescription('Total number of octets received.')
ntwsApStatRadioRateExOpStatsUndcrptPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsUndcrptPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsUndcrptPkt.setDescription('Number of undecrypted packets.')
ntwsApStatRadioRateExOpStatsUndcrptOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsUndcrptOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsUndcrptOctet.setDescription('Total number of octets in undecrypted packets.')
ntwsApStatRadioRateExOpStatsPhyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 14, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsPhyErr.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsPhyErr.setDescription('Number of Physical Errors occurred.')
ntwsApStatRadioRateExOpStatisticsMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15), )
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsMacTable.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsMacTable.setDescription("A table providing the Radio Operational Statistics per Extended Rate for all radios on all APs attached to this switch. Same data is available indexed by AP Serial Number, Radio Number and Extended Rate in 'ntwsApStatRadioRateExOpStatisticsTable'.")
ntwsApStatRadioRateExOpStatisticsMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1), ).setIndexNames((0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacBaseMac"), (0, "NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacRateEx"))
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsMacEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatisticsMacEntry.setDescription('Operational statistics (counters) for a particular data transmission rate on a particular radio.')
ntwsApStatRadioRateExOpStatsMacBaseMac = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacBaseMac.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacBaseMac.setDescription('Table index.')
ntwsApStatRadioRateExOpStatsMacRateEx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 2), NtwsRadioRateEx())
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacRateEx.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacRateEx.setDescription('Table index.')
ntwsApStatRadioRateExOpStatsMacTxUniPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxUniPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxUniPkt.setDescription('Number of unicast packets transmitted.')
ntwsApStatRadioRateExOpStatsMacTxUniOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxUniOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxUniOctet.setDescription('Total number of octets transmitted in unicast packets.')
ntwsApStatRadioRateExOpStatsMacTxMultiPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxMultiPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxMultiPkt.setDescription('Number of multicast packets transmitted.')
ntwsApStatRadioRateExOpStatsMacTxMultiOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxMultiOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacTxMultiOctet.setDescription('Total number of octets transmitted in multicast packets.')
ntwsApStatRadioRateExOpStatsMacRxPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacRxPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacRxPkt.setDescription('Number of packets received.')
ntwsApStatRadioRateExOpStatsMacRxOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacRxOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacRxOctet.setDescription('Total number of octets received.')
ntwsApStatRadioRateExOpStatsMacUndcrptPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacUndcrptPkt.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacUndcrptPkt.setDescription('Number of undecrypted packets.')
ntwsApStatRadioRateExOpStatsMacUndcrptOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacUndcrptOctet.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacUndcrptOctet.setDescription('Total number of octets in undecrypted packets.')
ntwsApStatRadioRateExOpStatsMacPhyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 1, 15, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacPhyErr.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatRadioRateExOpStatsMacPhyErr.setDescription('Number of Physical Errors occurred.')
ntwsApStatusConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2))
ntwsApStatusCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 1))
ntwsApStatusGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2))
ntwsApStatusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 1, 1)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatusCommonGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusCompliance = ntwsApStatusCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusCompliance.setDescription('The compliance statement for devices that implement AP Status MIB. This compliance statement was for releases 4.1 and 4.2 of AC (wireless switch) software. This compliance statement is replaced by ntwsApStatusComplianceRev2.')
ntwsApStatusComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 1, 2)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatusScalarsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceTablesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusComplianceRev2 = ntwsApStatusComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusComplianceRev2.setDescription('The compliance statement for devices that implement AP Status MIB. This compliance statement was for release 5.0 of AC (wireless switch) software. This compliance statement is replaced by ntwsApStatusComplianceRev3.')
ntwsApStatusComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 1, 3)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatusScalarsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusVersionsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusMaxPowerPhyTypeGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceOpRateSetTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsPerRateTablesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusComplianceRev3 = ntwsApStatusComplianceRev3.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusComplianceRev3.setDescription('The compliance statement for devices that implement AP Status MIB. This compliance statement was for release 6.0 of AC (wireless switch) software. This compliance statement is replaced by ntwsApStatusComplianceRev4.')
ntwsApStatusComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 1, 4)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatusScalarsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusTablesGroupRev2"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusVersionsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusTablesGroupRev2"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusMaxPowerPhyTypeGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceOpRateSetTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsPerRateTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusWideMimoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusComplianceRev4 = ntwsApStatusComplianceRev4.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusComplianceRev4.setDescription('The compliance statement for devices that implement AP Status MIB. This compliance statement is for releases 6.2 and greater of AC (wireless switch) software.')
ntwsApStatusComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 1, 5)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatusScalarsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusTablesGroupRev2"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusVersionsGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusPhysPortNumGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusApStatusConnectivityGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusTablesGroupRev2"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusMaxPowerPhyTypeGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusWideMimoGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioStatusAntennaGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioServiceOpRateSetTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsTablesGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsClientAssocGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsSignErrGroup"), ("NTWS-AP-STATUS-MIB", "ntwsApStatusRadioOpStatisticsPerRateExTablesGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusComplianceRev5 = ntwsApStatusComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusComplianceRev5.setDescription('The compliance statement for devices that implement AP Status MIB. This compliance statement is for releases 7.1 and greater of AC (wireless switch) software.')
ntwsApStatusCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 1)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatNumAps"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusBaseMac"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusAttachType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusPortOrDapNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusModel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusFingerprint"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusVlan"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusIpAddress"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusUptimeSecs"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusCpuInfo"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusManufacturerId"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusRamBytes"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusHardwareRev"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacAttachType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacPortOrDapNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacModel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacFingerprint"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacVlan"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacIpAddress"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacUptimeSecs"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacCpuInfo"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacManufacturerId"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacRamBytes"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacHardwareRev"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusBaseMac"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusEnable"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioConfigState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusCurrentPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusCurrentChannelNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacApSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacEnable"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioConfigState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacCurrentPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacCurrentChannelNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServBssid"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServServiceProfileName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacApSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacRadioNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacSsid"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacServiceProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusCommonGroup = ntwsApStatusCommonGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusCommonGroup.setDescription('Mandatory group of objects implemented to provide AP Status info in releases 4.1 and 4.2 of AC (wireless switch) software. Replaced by ntwsApStatusScalarsGroup, ntwsApStatusApStatusTablesGroup, ntwsApStatusRadioStatusTablesGroup, ntwsApStatusRadioServiceTablesGroup, ntwsApStatusRadioServiceOpRateSetTablesGroup, ntwsApStatusRadioOpStatisticsTablesGroup, ntwsApStatusRadioOpStatisticsPerRateTablesGroup.')
ntwsApStatusScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 2)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatNumAps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusScalarsGroup = ntwsApStatusScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusScalarsGroup.setDescription('Group of scalar objects implemented to provide general AP info.')
ntwsApStatusApStatusTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 3)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusBaseMac"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusAttachType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusPortOrDapNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusModel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusFingerprint"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusVlan"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusIpAddress"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusUptimeSecs"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusCpuInfo"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusManufacturerId"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusRamBytes"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusHardwareRev"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusClientSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacAttachType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacPortOrDapNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacModel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacFingerprint"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacVlan"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacIpAddress"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacUptimeSecs"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacCpuInfo"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacManufacturerId"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacRamBytes"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacHardwareRev"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacClientSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusApStatusTablesGroup = ntwsApStatusApStatusTablesGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusApStatusTablesGroup.setDescription('Group of columnar objects implemented to provide AP Status info in releases 5.0 and 6.0. Replaced by ntwsApStatusApStatusTablesGroupRev2.')
ntwsApStatusRadioStatusTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 4)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusBaseMac"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusEnable"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioConfigState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusCurrentPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusCurrentChannelNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacApSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacEnable"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioConfigState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacCurrentPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacCurrentChannelNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioStatusTablesGroup = ntwsApStatusRadioStatusTablesGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApStatusRadioStatusTablesGroup.setDescription('Group of columnar objects implemented to provide Radio Status info in releases 5.0 and 6.0. Replaced by ntwsApStatusRadioStatusTablesGroupRev2.')
ntwsApStatusRadioServiceTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 5)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServBssid"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServServiceProfileName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacApSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacRadioNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacSsid"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioServMacServiceProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioServiceTablesGroup = ntwsApStatusRadioServiceTablesGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioServiceTablesGroup.setDescription('Group of columnar objects implemented to provide Radio Service info.')
ntwsApStatusRadioServiceOpRateSetTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 6)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMandatory"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetDisabled"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetBeacon"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMulticast"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMacMandatory"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMacDisabled"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMacBeacon"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioSORSetMacMulticast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioServiceOpRateSetTablesGroup = ntwsApStatusRadioServiceOpRateSetTablesGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioServiceOpRateSetTablesGroup.setDescription('Group of columnar objects implemented to provide the Operational Rate Set per Radio Service.')
ntwsApStatusRadioOpStatisticsTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 7)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsTxUniPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsTxUniOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsTxMultiPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsTxMultiOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsRxPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsRxOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsUndcrptPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsUndcrptOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsPhyErr"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsResetCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsAutoTuneChannelChangeCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsTxRetriesCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsUserSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsNoiseFloor"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacTxUniPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacTxUniOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacTxMultiPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacTxMultiOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacRxPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacRxOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacUndcrptPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacUndcrptOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacPhyErr"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacResetCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacAutoTuneChannelChangeCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacTxRetriesCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacUserSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacNoiseFloor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioOpStatisticsTablesGroup = ntwsApStatusRadioOpStatisticsTablesGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioOpStatisticsTablesGroup.setDescription('Group of columnar objects implemented to provide Radio Operational Statistics.')
ntwsApStatusRadioOpStatisticsPerRateTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 8)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsTxUniPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsTxUniOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsTxMultiPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsTxMultiOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsRxPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsRxOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsUndcrptPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsUndcrptOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsPhyErr"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacTxUniPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacTxUniOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacTxMultiPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacTxMultiOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacRxPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacRxOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacUndcrptPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacUndcrptOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateOpStatsMacPhyErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioOpStatisticsPerRateTablesGroup = ntwsApStatusRadioOpStatisticsPerRateTablesGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioOpStatisticsPerRateTablesGroup.setDescription('Group of columnar objects implemented to provide Radio Operational Statistics per data transmission Rate.')
ntwsApStatusApStatusVersionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 9)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusSoftwareVer"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusBootVer"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacSoftwareVer"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacBootVer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusApStatusVersionsGroup = ntwsApStatusApStatusVersionsGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusApStatusVersionsGroup.setDescription('Group of objects implemented to provide AP version info.')
ntwsApStatusApStatusTablesGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 10)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusBaseMac"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusAttachType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusModel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusFingerprint"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusVlan"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusIpAddress"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusUptimeSecs"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusCpuInfo"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusManufacturerId"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusRamBytes"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusHardwareRev"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusClientSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusApNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacAttachType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacModel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacFingerprint"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApName"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacVlan"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacIpAddress"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacUptimeSecs"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacCpuInfo"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacManufacturerId"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacRamBytes"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacHardwareRev"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacClientSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacApNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusApStatusTablesGroupRev2 = ntwsApStatusApStatusTablesGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusApStatusTablesGroupRev2.setDescription('Group of columnar objects implemented to provide AP Status info in releases 6.2 and greater.')
ntwsApStatusRadioStatusMaxPowerPhyTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 11)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMaxPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioPhyType"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacMaxPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioPhyType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioStatusMaxPowerPhyTypeGroup = ntwsApStatusRadioStatusMaxPowerPhyTypeGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioStatusMaxPowerPhyTypeGroup.setDescription('Group of columnar objects implemented to provide more Radio Status info in releases 6.0 and greater.')
ntwsApStatusRadioStatusTablesGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 12)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusBaseMac"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioConfigState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusCurrentPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusCurrentChannelNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusClientSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioMode"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacApSerialNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioConfigState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacCurrentPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacCurrentChannelNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacClientSessions"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioStatusTablesGroupRev2 = ntwsApStatusRadioStatusTablesGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioStatusTablesGroupRev2.setDescription('Group of columnar objects implemented to provide Radio Status info in releases 6.2 and greater.')
ntwsApStatusRadioStatusWideMimoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 13)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioChannelWidth"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusRadioMimoState"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioChannelWidth"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacRadioMimoState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioStatusWideMimoGroup = ntwsApStatusRadioStatusWideMimoGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioStatusWideMimoGroup.setDescription('Group of columnar objects implemented to provide more Radio Status info in releases 7.0 and greater.')
ntwsApStatusRadioOpStatisticsPerRateExTablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 14)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsTxUniPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsTxUniOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsTxMultiPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsTxMultiOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsRxPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsRxOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsUndcrptPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsUndcrptOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsPhyErr"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacTxUniPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacTxUniOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacTxMultiPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacTxMultiOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacRxPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacRxOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacUndcrptPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacUndcrptOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioRateExOpStatsMacPhyErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioOpStatisticsPerRateExTablesGroup = ntwsApStatusRadioOpStatisticsPerRateExTablesGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioOpStatisticsPerRateExTablesGroup.setDescription('Group of columnar objects implemented to provide Radio Operational Statistics detailed per Extended data transmission Rate (covering 802.11n MCS rates) in releases 7.1 and greater.')
ntwsApStatusApStatusPhysPortNumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 15)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusPhysPortNum"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacPhysPortNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusApStatusPhysPortNumGroup = ntwsApStatusApStatusPhysPortNumGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusApStatusPhysPortNumGroup.setDescription('Group of columnar objects implemented to provide the Physical Port Number for a directly attached AP.')
ntwsApStatusApStatusConnectivityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 16)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusIpNetmask"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusWiredIfNumber"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacIpNetmask"), ("NTWS-AP-STATUS-MIB", "ntwsApStatApStatusMacWiredIfNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusApStatusConnectivityGroup = ntwsApStatusApStatusConnectivityGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusApStatusConnectivityGroup.setDescription('Group of columnar objects implemented to provide AP connectivity info in releases 7.1 and greater.')
ntwsApStatusRadioStatusAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 17)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMinPowerLevel"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioStatusMacMinPowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioStatusAntennaGroup = ntwsApStatusRadioStatusAntennaGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioStatusAntennaGroup.setDescription('Group of columnar objects implemented to provide Radio Status info depending on AP model and antenna being used in releases 7.1 and greater.')
ntwsApStatusRadioOpStatisticsClientAssocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 18)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsClientAssociations"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsClientFailedAssociations"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsClientReAssociations"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacClientAssociations"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacClientFailedAssociations"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacClientReAssociations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioOpStatisticsClientAssocGroup = ntwsApStatusRadioOpStatisticsClientAssocGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioOpStatisticsClientAssocGroup.setDescription('Group of columnar objects implemented to provide per-radio client association info in releases 7.1 and greater.')
ntwsApStatusRadioOpStatisticsSignErrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 5, 1, 2, 2, 19)).setObjects(("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsSignalingPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsReTransmitOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsRefusedConnectionCount"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacSignalingPkt"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacReTransmitOctet"), ("NTWS-AP-STATUS-MIB", "ntwsApStatRadioOpStatsMacRefusedConnectionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsApStatusRadioOpStatisticsSignErrGroup = ntwsApStatusRadioOpStatisticsSignErrGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsApStatusRadioOpStatisticsSignErrGroup.setDescription('Group of columnar objects implemented to provide more Radio Operational Statistics info in releases 7.1 and greater.')
mibBuilder.exportSymbols("NTWS-AP-STATUS-MIB", ntwsApStatRadioOpStatisticsEntry=ntwsApStatRadioOpStatisticsEntry, ntwsApStatRadioRateExOpStatsMacTxUniPkt=ntwsApStatRadioRateExOpStatsMacTxUniPkt, ntwsApStatRadioRateOpStatsTxMultiOctet=ntwsApStatRadioRateOpStatsTxMultiOctet, ntwsApStatRadioOpStatsMacResetCount=ntwsApStatRadioOpStatsMacResetCount, ntwsApStatusRadioStatusTablesGroupRev2=ntwsApStatusRadioStatusTablesGroupRev2, ntwsApStatApStatusIpAddress=ntwsApStatApStatusIpAddress, ntwsApStatApStatusMacApNum=ntwsApStatApStatusMacApNum, ntwsApStatRadioOpStatsClientReAssociations=ntwsApStatRadioOpStatsClientReAssociations, ntwsApStatRadioRateExOpStatsMacTxMultiPkt=ntwsApStatRadioRateExOpStatsMacTxMultiPkt, NtwsRadioOpRateSetDisabled=NtwsRadioOpRateSetDisabled, ntwsApStatRadioServApSerialNum=ntwsApStatRadioServApSerialNum, ntwsApStatRadioRateOpStatsTxMultiPkt=ntwsApStatRadioRateOpStatsTxMultiPkt, ntwsApStatusRadioStatusWideMimoGroup=ntwsApStatusRadioStatusWideMimoGroup, ntwsApStatRadioStatusRadioMimoState=ntwsApStatRadioStatusRadioMimoState, ntwsApStatusComplianceRev2=ntwsApStatusComplianceRev2, ntwsApStatusRadioStatusAntennaGroup=ntwsApStatusRadioStatusAntennaGroup, ntwsApStatRadioStatusMacRadioMimoState=ntwsApStatRadioStatusMacRadioMimoState, ntwsApStatRadioServiceOpRateSetTable=ntwsApStatRadioServiceOpRateSetTable, ntwsApStatRadioRateExOpStatsMacRxPkt=ntwsApStatRadioRateExOpStatsMacRxPkt, ntwsApStatRadioSORSetMacDisabled=ntwsApStatRadioSORSetMacDisabled, ntwsApStatRadioOpStatsMacUndcrptOctet=ntwsApStatRadioOpStatsMacUndcrptOctet, ntwsApStatRadioServiceEntry=ntwsApStatRadioServiceEntry, ntwsApStatRadioOpStatsMacUserSessions=ntwsApStatRadioOpStatsMacUserSessions, ntwsApStatApStatusIpNetmask=ntwsApStatApStatusIpNetmask, ntwsApStatRadioOpStatsApSerialNum=ntwsApStatRadioOpStatsApSerialNum, ntwsApStatApStatusMacSoftwareVer=ntwsApStatApStatusMacSoftwareVer, ntwsApStatRadioOpStatsUserSessions=ntwsApStatRadioOpStatsUserSessions, ntwsApStatRadioStatusMacRadioPhyType=ntwsApStatRadioStatusMacRadioPhyType, ntwsApStatRadioStatusMinPowerLevel=ntwsApStatRadioStatusMinPowerLevel, ntwsApStatRadioRateOpStatsMacRxOctet=ntwsApStatRadioRateOpStatsMacRxOctet, ntwsApStatRadioOpStatsUndcrptPkt=ntwsApStatRadioOpStatsUndcrptPkt, ntwsApStatApStatusVlan=ntwsApStatApStatusVlan, ntwsApStatRadioOpStatisticsTable=ntwsApStatRadioOpStatisticsTable, ntwsApStatusGroups=ntwsApStatusGroups, ntwsApStatApStatusSoftwareVer=ntwsApStatApStatusSoftwareVer, ntwsApStatRadioStatusApSerialNum=ntwsApStatRadioStatusApSerialNum, ntwsApStatRadioOpStatsRxOctet=ntwsApStatRadioOpStatsRxOctet, ntwsApStatRadioOpStatisticsMacTable=ntwsApStatRadioOpStatisticsMacTable, ntwsApStatRadioOpStatsMacUndcrptPkt=ntwsApStatRadioOpStatsMacUndcrptPkt, ntwsApStatRadioRateExOpStatisticsEntry=ntwsApStatRadioRateExOpStatisticsEntry, ntwsApStatRadioRateExOpStatisticsTable=ntwsApStatRadioRateExOpStatisticsTable, ntwsApStatRadioRateExOpStatsTxUniPkt=ntwsApStatRadioRateExOpStatsTxUniPkt, ntwsApStatRadioStatusMacRadioMode=ntwsApStatRadioStatusMacRadioMode, ntwsApStatusApStatusConnectivityGroup=ntwsApStatusApStatusConnectivityGroup, ntwsApStatApStatusMacModel=ntwsApStatApStatusMacModel, ntwsApStatRadioStatusClientSessions=ntwsApStatRadioStatusClientSessions, ntwsApStatRadioServMacBssid=ntwsApStatRadioServMacBssid, ntwsApStatRadioRateExOpStatsUndcrptPkt=ntwsApStatRadioRateExOpStatsUndcrptPkt, ntwsApStatApStatusCpuInfo=ntwsApStatApStatusCpuInfo, ntwsApStatRadioOpStatsClientAssociations=ntwsApStatRadioOpStatsClientAssociations, ntwsApStatApStatusMacSerialNum=ntwsApStatApStatusMacSerialNum, ntwsApStatRadioSORSetApSerialNum=ntwsApStatRadioSORSetApSerialNum, ntwsApStatApStatusBootVer=ntwsApStatApStatusBootVer, ntwsApStatRadioStatusRadioConfigState=ntwsApStatRadioStatusRadioConfigState, ntwsApStatusRadioServiceTablesGroup=ntwsApStatusRadioServiceTablesGroup, ntwsApStatRadioRateExOpStatsTxUniOctet=ntwsApStatRadioRateExOpStatsTxUniOctet, ntwsApStatusCompliances=ntwsApStatusCompliances, ntwsApStatRadioStatusMacCurrentChannelNum=ntwsApStatRadioStatusMacCurrentChannelNum, ntwsApStatNumAps=ntwsApStatNumAps, ntwsApStatRadioServMacSsid=ntwsApStatRadioServMacSsid, ntwsApStatApStatusApState=ntwsApStatApStatusApState, ntwsApStatRadioOpStatsMacNoiseFloor=ntwsApStatRadioOpStatsMacNoiseFloor, ntwsApStatRadioRateOpStatsMacTxMultiPkt=ntwsApStatRadioRateOpStatsMacTxMultiPkt, ntwsApStatusRadioOpStatisticsTablesGroup=ntwsApStatusRadioOpStatisticsTablesGroup, ntwsApStatRadioSORSetSsid=ntwsApStatRadioSORSetSsid, ntwsApStatApStatusMacManufacturerId=ntwsApStatApStatusMacManufacturerId, ntwsApStatApStatusClientSessions=ntwsApStatApStatusClientSessions, ntwsApStatRadioOpStatsPhyErr=ntwsApStatRadioOpStatsPhyErr, ntwsApStatusApStatusVersionsGroup=ntwsApStatusApStatusVersionsGroup, ntwsApStatRadioRateExOpStatsPhyErr=ntwsApStatRadioRateExOpStatsPhyErr, ntwsApStatRadioOpStatsResetCount=ntwsApStatRadioOpStatsResetCount, ntwsApStatApStatusMacUptimeSecs=ntwsApStatApStatusMacUptimeSecs, ntwsApStatRadioStatusMaxPowerLevel=ntwsApStatRadioStatusMaxPowerLevel, ntwsApStatusRadioOpStatisticsPerRateTablesGroup=ntwsApStatusRadioOpStatisticsPerRateTablesGroup, ntwsApStatRadioRateOpStatsMacTxUniPkt=ntwsApStatRadioRateOpStatsMacTxUniPkt, ntwsApStatRadioOpStatsMacTxUniOctet=ntwsApStatRadioOpStatsMacTxUniOctet, ntwsApStatApStatusMacBaseMac=ntwsApStatApStatusMacBaseMac, ntwsApStatRadioStatusMacCurrentPowerLevel=ntwsApStatRadioStatusMacCurrentPowerLevel, ntwsApStatRadioOpStatsMacClientAssociations=ntwsApStatRadioOpStatsMacClientAssociations, ntwsApStatusRadioStatusMaxPowerPhyTypeGroup=ntwsApStatusRadioStatusMaxPowerPhyTypeGroup, ntwsApStatRadioOpStatsTxRetriesCount=ntwsApStatRadioOpStatsTxRetriesCount, ntwsApStatRadioSORSetRadioNum=ntwsApStatRadioSORSetRadioNum, ntwsApStatRadioStatusCurrentPowerLevel=ntwsApStatRadioStatusCurrentPowerLevel, ntwsApStatRadioRateOpStatsMacPhyErr=ntwsApStatRadioRateOpStatsMacPhyErr, ntwsApStatusComplianceRev3=ntwsApStatusComplianceRev3, ntwsApStatApStatusHardwareRev=ntwsApStatApStatusHardwareRev, ntwsApStatRadioServSsid=ntwsApStatRadioServSsid, ntwsApStatRadioOpStatsTxMultiOctet=ntwsApStatRadioOpStatsTxMultiOctet, ntwsApStatusRadioServiceOpRateSetTablesGroup=ntwsApStatusRadioServiceOpRateSetTablesGroup, ntwsApStatRadioRateOpStatsRadioNum=ntwsApStatRadioRateOpStatsRadioNum, ntwsApStatRadioSORSetBeacon=ntwsApStatRadioSORSetBeacon, ntwsApStatApStatusEntry=ntwsApStatApStatusEntry, ntwsApStatRadioSORSetMacMulticast=ntwsApStatRadioSORSetMacMulticast, ntwsApStatRadioRateExOpStatsTxMultiPkt=ntwsApStatRadioRateExOpStatsTxMultiPkt, ntwsApStatRadioRateOpStatsMacTxMultiOctet=ntwsApStatRadioRateOpStatsMacTxMultiOctet, ntwsApStatApStatusMacApState=ntwsApStatApStatusMacApState, ntwsApStatRadioOpStatsRadioNum=ntwsApStatRadioOpStatsRadioNum, ntwsApStatRadioSORSetMacBssid=ntwsApStatRadioSORSetMacBssid, ntwsApStatRadioRateOpStatsUndcrptPkt=ntwsApStatRadioRateOpStatsUndcrptPkt, ntwsApStatApStatusWiredIfNumber=ntwsApStatApStatusWiredIfNumber, ntwsApStatApStatusMacEntry=ntwsApStatApStatusMacEntry, ntwsApStatApStatusMacFingerprint=ntwsApStatApStatusMacFingerprint, ntwsApStatRadioSORSetMulticast=ntwsApStatRadioSORSetMulticast, ntwsApStatRadioOpStatisticsMacEntry=ntwsApStatRadioOpStatisticsMacEntry, ntwsApStatRadioRateExOpStatsApSerialNum=ntwsApStatRadioRateExOpStatsApSerialNum, ntwsApStatRadioRateExOpStatsMacRateEx=ntwsApStatRadioRateExOpStatsMacRateEx, ntwsApStatRadioRateExOpStatsMacUndcrptPkt=ntwsApStatRadioRateExOpStatsMacUndcrptPkt, ntwsApStatRadioRateOpStatsRxOctet=ntwsApStatRadioRateOpStatsRxOctet, ntwsApStatApStatusBaseMac=ntwsApStatApStatusBaseMac, ntwsApStatApStatusPhysPortNum=ntwsApStatApStatusPhysPortNum, ntwsApStatRadioRateExOpStatsRxPkt=ntwsApStatRadioRateExOpStatsRxPkt, ntwsApStatRadioStatusBaseMac=ntwsApStatRadioStatusBaseMac, ntwsApStatusApStatusPhysPortNumGroup=ntwsApStatusApStatusPhysPortNumGroup, ntwsApStatRadioOpStatsMacTxMultiPkt=ntwsApStatRadioOpStatsMacTxMultiPkt, ntwsApStatusApStatusTablesGroup=ntwsApStatusApStatusTablesGroup, ntwsApStatRadioOpStatsClientFailedAssociations=ntwsApStatRadioOpStatsClientFailedAssociations, ntwsApStatRadioRateOpStatsRate=ntwsApStatRadioRateOpStatsRate, ntwsApStatRadioServiceOpRateSetMacEntry=ntwsApStatRadioServiceOpRateSetMacEntry, ntwsApStatApStatusMacClientSessions=ntwsApStatApStatusMacClientSessions, ntwsApStatApStatusMacVlan=ntwsApStatApStatusMacVlan, ntwsApStatRadioSORSetMacMandatory=ntwsApStatRadioSORSetMacMandatory, ntwsApStatRadioStatusMacBaseMac=ntwsApStatRadioStatusMacBaseMac, ntwsApStatRadioOpStatsMacTxRetriesCount=ntwsApStatRadioOpStatsMacTxRetriesCount, ntwsApStatRadioRateExOpStatsMacRxOctet=ntwsApStatRadioRateExOpStatsMacRxOctet, ntwsApStatusCommonGroup=ntwsApStatusCommonGroup, ntwsApStatRadioOpStatsMacRefusedConnectionCount=ntwsApStatRadioOpStatsMacRefusedConnectionCount, ntwsApStatRadioOpStatsNoiseFloor=ntwsApStatRadioOpStatsNoiseFloor, ntwsApStatRadioSORSetDisabled=ntwsApStatRadioSORSetDisabled, ntwsApStatusComplianceRev4=ntwsApStatusComplianceRev4, ntwsApStatApStatusTable=ntwsApStatApStatusTable, ntwsApStatRadioStatusTable=ntwsApStatRadioStatusTable, ntwsApStatRadioOpStatsRxPkt=ntwsApStatRadioOpStatsRxPkt, ntwsApStatRadioStatusMacClientSessions=ntwsApStatRadioStatusMacClientSessions, ntwsApStatRadioRateOpStatsMacUndcrptPkt=ntwsApStatRadioRateOpStatsMacUndcrptPkt, ntwsApStatusRadioOpStatisticsClientAssocGroup=ntwsApStatusRadioOpStatisticsClientAssocGroup, ntwsApStatRadioServiceMacEntry=ntwsApStatRadioServiceMacEntry, ntwsApStatDataObjects=ntwsApStatDataObjects, ntwsApStatApStatusMacWiredIfNumber=ntwsApStatApStatusMacWiredIfNumber, PYSNMP_MODULE_ID=ntwsApStatusMib, ntwsApStatApStatusFingerprint=ntwsApStatApStatusFingerprint, ntwsApStatRadioStatusMacMinPowerLevel=ntwsApStatRadioStatusMacMinPowerLevel, ntwsApStatRadioRateOpStatsTxUniOctet=ntwsApStatRadioRateOpStatsTxUniOctet, ntwsApStatRadioRateExOpStatsMacTxUniOctet=ntwsApStatRadioRateExOpStatsMacTxUniOctet, ntwsApStatApStatusAttachType=ntwsApStatApStatusAttachType, ntwsApStatusComplianceRev5=ntwsApStatusComplianceRev5, ntwsApStatusRadioOpStatisticsPerRateExTablesGroup=ntwsApStatusRadioOpStatisticsPerRateExTablesGroup, ntwsApStatRadioRateOpStatsTxUniPkt=ntwsApStatRadioRateOpStatsTxUniPkt, ntwsApStatRadioStatusMacEntry=ntwsApStatRadioStatusMacEntry, ntwsApStatRadioServiceMacTable=ntwsApStatRadioServiceMacTable, ntwsApStatRadioStatusRadioNum=ntwsApStatRadioStatusRadioNum, ntwsApStatRadioRateExOpStatsMacPhyErr=ntwsApStatRadioRateExOpStatsMacPhyErr, ntwsApStatRadioStatusMacRadioChannelWidth=ntwsApStatRadioStatusMacRadioChannelWidth, NtwsRadioOpRateSetSingleValue=NtwsRadioOpRateSetSingleValue, ntwsApStatusRadioStatusTablesGroup=ntwsApStatusRadioStatusTablesGroup, ntwsApStatRadioRateOpStatisticsEntry=ntwsApStatRadioRateOpStatisticsEntry, ntwsApStatApStatusMacIpAddress=ntwsApStatApStatusMacIpAddress, ntwsApStatApStatusMacCpuInfo=ntwsApStatApStatusMacCpuInfo, ntwsApStatApStatusModel=ntwsApStatApStatusModel, ntwsApStatRadioRateExOpStatsMacTxMultiOctet=ntwsApStatRadioRateExOpStatsMacTxMultiOctet, ntwsApStatusObjects=ntwsApStatusObjects, ntwsApStatRadioStatusCurrentChannelNum=ntwsApStatRadioStatusCurrentChannelNum, ntwsApStatRadioRateExOpStatsRxOctet=ntwsApStatRadioRateExOpStatsRxOctet, ntwsApStatRadioOpStatsReTransmitOctet=ntwsApStatRadioOpStatsReTransmitOctet, ntwsApStatRadioRateExOpStatsUndcrptOctet=ntwsApStatRadioRateExOpStatsUndcrptOctet, ntwsApStatApStatusPortOrDapNum=ntwsApStatApStatusPortOrDapNum, ntwsApStatApStatusMacHardwareRev=ntwsApStatApStatusMacHardwareRev, ntwsApStatRadioOpStatsMacClientFailedAssociations=ntwsApStatRadioOpStatsMacClientFailedAssociations, ntwsApStatRadioRateOpStatsMacRxPkt=ntwsApStatRadioRateOpStatsMacRxPkt, ntwsApStatRadioServServiceProfileName=ntwsApStatRadioServServiceProfileName, ntwsApStatApStatusApNum=ntwsApStatApStatusApNum, ntwsApStatApStatusMacAttachType=ntwsApStatApStatusMacAttachType, ntwsApStatApStatusMacBootVer=ntwsApStatApStatusMacBootVer, ntwsApStatRadioStatusMacMaxPowerLevel=ntwsApStatRadioStatusMacMaxPowerLevel, ntwsApStatRadioOpStatsMacAutoTuneChannelChangeCount=ntwsApStatRadioOpStatsMacAutoTuneChannelChangeCount, ntwsApStatApStatusMacPhysPortNum=ntwsApStatApStatusMacPhysPortNum, ntwsApStatRadioRateExOpStatsRateEx=ntwsApStatRadioRateExOpStatsRateEx, ntwsApStatApStatusRamBytes=ntwsApStatApStatusRamBytes, ntwsApStatRadioStatusMacEnable=ntwsApStatRadioStatusMacEnable, ntwsApStatApStatusMacTable=ntwsApStatApStatusMacTable, ntwsApStatRadioStatusRadioPhyType=ntwsApStatRadioStatusRadioPhyType, ntwsApStatApStatusApName=ntwsApStatApStatusApName, ntwsApStatRadioOpStatsMacSignalingPkt=ntwsApStatRadioOpStatsMacSignalingPkt, ntwsApStatRadioOpStatsTxUniOctet=ntwsApStatRadioOpStatsTxUniOctet, ntwsApStatRadioRateOpStatsApSerialNum=ntwsApStatRadioRateOpStatsApSerialNum, ntwsApStatRadioServMacApSerialNum=ntwsApStatRadioServMacApSerialNum, ntwsApStatApStatusMacApName=ntwsApStatApStatusMacApName, ntwsApStatRadioRateOpStatsPhyErr=ntwsApStatRadioRateOpStatsPhyErr, ntwsApStatRadioServMacRadioNum=ntwsApStatRadioServMacRadioNum, ntwsApStatRadioRateOpStatsRxPkt=ntwsApStatRadioRateOpStatsRxPkt, ntwsApStatApStatusMacPortOrDapNum=ntwsApStatApStatusMacPortOrDapNum, ntwsApStatRadioRateExOpStatsRadioNum=ntwsApStatRadioRateExOpStatsRadioNum, ntwsApStatusCompliance=ntwsApStatusCompliance, NtwsRadioOpRateSetMandatory=NtwsRadioOpRateSetMandatory, ntwsApStatRadioStatusMacApSerialNum=ntwsApStatRadioStatusMacApSerialNum, ntwsApStatApStatusSerialNum=ntwsApStatApStatusSerialNum, ntwsApStatApStatusManufacturerId=ntwsApStatApStatusManufacturerId, ntwsApStatRadioStatusEnable=ntwsApStatRadioStatusEnable, ntwsApStatRadioRateExOpStatisticsMacEntry=ntwsApStatRadioRateExOpStatisticsMacEntry, ntwsApStatRadioRateOpStatisticsMacEntry=ntwsApStatRadioRateOpStatisticsMacEntry, ntwsApStatRadioOpStatsSignalingPkt=ntwsApStatRadioOpStatsSignalingPkt, ntwsApStatRadioRateOpStatsMacRate=ntwsApStatRadioRateOpStatsMacRate, ntwsApStatusApStatusTablesGroupRev2=ntwsApStatusApStatusTablesGroupRev2, ntwsApStatRadioOpStatsAutoTuneChannelChangeCount=ntwsApStatRadioOpStatsAutoTuneChannelChangeCount, ntwsApStatusScalarsGroup=ntwsApStatusScalarsGroup, ntwsApStatApStatusMacIpNetmask=ntwsApStatApStatusMacIpNetmask, ntwsApStatRadioOpStatsMacTxMultiOctet=ntwsApStatRadioOpStatsMacTxMultiOctet, ntwsApStatRadioRateOpStatsMacTxUniOctet=ntwsApStatRadioRateOpStatsMacTxUniOctet, ntwsApStatRadioOpStatsMacBaseMac=ntwsApStatRadioOpStatsMacBaseMac, ntwsApStatRadioRateExOpStatsMacBaseMac=ntwsApStatRadioRateExOpStatsMacBaseMac, ntwsApStatRadioRateOpStatisticsTable=ntwsApStatRadioRateOpStatisticsTable, ntwsApStatRadioOpStatsTxMultiPkt=ntwsApStatRadioOpStatsTxMultiPkt, ntwsApStatusRadioOpStatisticsSignErrGroup=ntwsApStatusRadioOpStatisticsSignErrGroup, ntwsApStatApStatusUptimeSecs=ntwsApStatApStatusUptimeSecs, ntwsApStatRadioSORSetMandatory=ntwsApStatRadioSORSetMandatory, ntwsApStatRadioServMacServiceProfileName=ntwsApStatRadioServMacServiceProfileName, ntwsApStatRadioOpStatsMacPhyErr=ntwsApStatRadioOpStatsMacPhyErr, ntwsApStatRadioOpStatsUndcrptOctet=ntwsApStatRadioOpStatsUndcrptOctet, ntwsApStatRadioOpStatsTxUniPkt=ntwsApStatRadioOpStatsTxUniPkt, ntwsApStatRadioOpStatsMacRxOctet=ntwsApStatRadioOpStatsMacRxOctet, ntwsApStatRadioStatusMacRadioConfigState=ntwsApStatRadioStatusMacRadioConfigState, ntwsApStatRadioRateOpStatisticsMacTable=ntwsApStatRadioRateOpStatisticsMacTable, ntwsApStatusMib=ntwsApStatusMib, ntwsApStatRadioRateOpStatsMacBaseMac=ntwsApStatRadioRateOpStatsMacBaseMac, ntwsApStatRadioRateOpStatsMacUndcrptOctet=ntwsApStatRadioRateOpStatsMacUndcrptOctet, ntwsApStatRadioStatusRadioMode=ntwsApStatRadioStatusRadioMode, ntwsApStatRadioStatusRadioChannelWidth=ntwsApStatRadioStatusRadioChannelWidth, ntwsApStatRadioRateOpStatsUndcrptOctet=ntwsApStatRadioRateOpStatsUndcrptOctet, ntwsApStatRadioServRadioNum=ntwsApStatRadioServRadioNum, ntwsApStatApStatusMacRamBytes=ntwsApStatApStatusMacRamBytes, ntwsApStatRadioServiceOpRateSetEntry=ntwsApStatRadioServiceOpRateSetEntry, ntwsApStatRadioOpStatsMacClientReAssociations=ntwsApStatRadioOpStatsMacClientReAssociations, ntwsApStatRadioRateExOpStatsTxMultiOctet=ntwsApStatRadioRateExOpStatsTxMultiOctet, ntwsApStatRadioStatusMacRadioNum=ntwsApStatRadioStatusMacRadioNum, ntwsApStatRadioServBssid=ntwsApStatRadioServBssid, ntwsApStatRadioStatusMacTable=ntwsApStatRadioStatusMacTable, ntwsApStatusConformance=ntwsApStatusConformance, ntwsApStatRadioServiceTable=ntwsApStatRadioServiceTable, ntwsApStatRadioRateExOpStatsMacUndcrptOctet=ntwsApStatRadioRateExOpStatsMacUndcrptOctet, ntwsApStatRadioServiceOpRateSetMacTable=ntwsApStatRadioServiceOpRateSetMacTable, ntwsApStatRadioRateExOpStatisticsMacTable=ntwsApStatRadioRateExOpStatisticsMacTable, ntwsApStatRadioStatusEntry=ntwsApStatRadioStatusEntry, ntwsApStatRadioOpStatsMacReTransmitOctet=ntwsApStatRadioOpStatsMacReTransmitOctet, ntwsApStatRadioSORSetMacBeacon=ntwsApStatRadioSORSetMacBeacon, ntwsApStatRadioOpStatsMacRxPkt=ntwsApStatRadioOpStatsMacRxPkt, ntwsApStatRadioOpStatsRefusedConnectionCount=ntwsApStatRadioOpStatsRefusedConnectionCount, ntwsApStatRadioOpStatsMacTxUniPkt=ntwsApStatRadioOpStatsMacTxUniPkt)
