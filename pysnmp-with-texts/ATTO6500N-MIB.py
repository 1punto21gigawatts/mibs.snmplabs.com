#
# PySNMP MIB module ATTO6500N-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATTO6500N-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, iso, Bits, Counter64, ObjectIdentity, ModuleIdentity, Integer32, IpAddress, TimeTicks, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "iso", "Bits", "Counter64", "ObjectIdentity", "ModuleIdentity", "Integer32", "IpAddress", "TimeTicks", "Unsigned32", "Gauge32")
TextualConvention, TimeInterval, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "DisplayString", "DateAndTime")
bridge = ModuleIdentity((1, 3, 6, 1, 4, 1, 4547, 2, 3))
bridge.setRevisions(('2013-04-19 00:00', '2013-04-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bridge.setRevisionsDescriptions(('Corrected table entries, names, types and max-access fields.', 'Modified Trap Definitions',))
if mibBuilder.loadTexts: bridge.setLastUpdated('201304190000Z')
if mibBuilder.loadTexts: bridge.setOrganization('ATTO Technology, Inc.')
if mibBuilder.loadTexts: bridge.setContactInfo('ATTO')
if mibBuilder.loadTexts: bridge.setDescription('ATTO 6500N Custom MIB')
attotech = MibIdentifier((1, 3, 6, 1, 4, 1, 4547))
attoProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 1))
attoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2))
attoModules = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 3))
attoAgentCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 4))
bridgeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0))
bridgeIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1))
bridgeChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2))
bridgePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3))
bridgeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 4))
bridgeTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5))
bridgeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6))
bridgeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 1))
bridgeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2))
class DisplayWWN(TextualConvention, OctetString):
    description = ' A Fibre Channel/SAS World Wide Name.'
    status = 'current'
    displayHint = '1x '
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class QSFPTech(TextualConvention, Integer32):
    description = 'Defines the various QSFP Technologies.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))
    namedValues = NamedValues(("unknown", -1), ("optical", 1), ("activecopper", 2), ("passivecopper", 3))

class PHYStatus(TextualConvention, Integer32):
    description = 'Operational state of a SAS phy'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("unknown", -1), ("online", 1), ("offline", 2))

bridgeBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 1, 1)).setObjects(("ATTO6500N-MIB", "bridgeIdentityBasicGroup"), ("ATTO6500N-MIB", "bridgeChassisBasicGroup"), ("ATTO6500N-MIB", "bridgFcPortInfoBasicGroup"), ("ATTO6500N-MIB", "bridgeFcPortStatisicsBasicGroup"), ("ATTO6500N-MIB", "bridgeSasPortInfoBasicGroup"), ("ATTO6500N-MIB", "bridgeSasPortStatisicsBasicGroup"), ("ATTO6500N-MIB", "bridgeConfigBasicGroup"), ("ATTO6500N-MIB", "bridgeTrapInfoBasicGroup"), ("ATTO6500N-MIB", "bridgeTrapsBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeBasicCompliance = bridgeBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: bridgeBasicCompliance.setDescription('The requirements for a bridge implementation.')
bridgeIdentityBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 1)).setObjects(("ATTO6500N-MIB", "bridgeUniqueId"), ("ATTO6500N-MIB", "vendorID"), ("ATTO6500N-MIB", "modelName"), ("ATTO6500N-MIB", "primaryFirmwareRevision"), ("ATTO6500N-MIB", "primaryFirmwareBuildDate"), ("ATTO6500N-MIB", "hardwareVersion"), ("ATTO6500N-MIB", "secondaryFirmwareRevision"), ("ATTO6500N-MIB", "secondaryFirmwareBuildDate"), ("ATTO6500N-MIB", "serialNumber"), ("ATTO6500N-MIB", "bridgeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeIdentityBasicGroup = bridgeIdentityBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeIdentityBasicGroup.setDescription('The bridge identity information group.')
bridgeChassisBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 2)).setObjects(("ATTO6500N-MIB", "lastReboot"), ("ATTO6500N-MIB", "uptime"), ("ATTO6500N-MIB", "lastRebootReason"), ("ATTO6500N-MIB", "minimumOperatingTemp"), ("ATTO6500N-MIB", "maximumOperatingTemp"), ("ATTO6500N-MIB", "temperatureHighAlertSetting"), ("ATTO6500N-MIB", "temperatureLowAlertSetting"), ("ATTO6500N-MIB", "chassisTemperature"), ("ATTO6500N-MIB", "chassisTemperatureStatus"), ("ATTO6500N-MIB", "dramSingleBitErrorCount"), ("ATTO6500N-MIB", "chassisThroughputStatus"), ("ATTO6500N-MIB", "fcSFPVendor"), ("ATTO6500N-MIB", "fcSFPSerialNum"), ("ATTO6500N-MIB", "fcSFPPartNum"), ("ATTO6500N-MIB", "fcSFPDataRateCapability"), ("ATTO6500N-MIB", "sasQSFPVendor"), ("ATTO6500N-MIB", "sasQSFPSerialNum"), ("ATTO6500N-MIB", "sasQSFPType"), ("ATTO6500N-MIB", "sasQSFPPartNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeChassisBasicGroup = bridgeChassisBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeChassisBasicGroup.setDescription('The bridge chassis information group.')
bridgFcPortInfoBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 3)).setObjects(("ATTO6500N-MIB", "fcPortPortNumber"), ("ATTO6500N-MIB", "fcPortOperationalState"), ("ATTO6500N-MIB", "fcPortAdminState"), ("ATTO6500N-MIB", "fcPortDataRateNegotiated"), ("ATTO6500N-MIB", "fcPortConnModeNegotiated"), ("ATTO6500N-MIB", "fcPortDataRateConfigured"), ("ATTO6500N-MIB", "fcPortConnModeConfigured"), ("ATTO6500N-MIB", "fcPortDataRateCapability"), ("ATTO6500N-MIB", "fcPortNodeName"), ("ATTO6500N-MIB", "fcPortPortName"), ("ATTO6500N-MIB", "fcPortPeerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgFcPortInfoBasicGroup = bridgFcPortInfoBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgFcPortInfoBasicGroup.setDescription('The bridge ports information group.')
bridgeFcPortStatisicsBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 4)).setObjects(("ATTO6500N-MIB", "fcStatsTxWords"), ("ATTO6500N-MIB", "fcStatsRxWords"), ("ATTO6500N-MIB", "fcStatsTimeSinceReset"), ("ATTO6500N-MIB", "fcStatsErrLinkFailure"), ("ATTO6500N-MIB", "fcStatsErrLossOfSync"), ("ATTO6500N-MIB", "fcStatsErrInvalidCRC"), ("ATTO6500N-MIB", "fcStatsErrInvalidTxWords"), ("ATTO6500N-MIB", "fcStatsErrLipCount"), ("ATTO6500N-MIB", "fcStatsErrNOSCount"), ("ATTO6500N-MIB", "fcStatsErrSignalLoss"), ("ATTO6500N-MIB", "fcStatsErrPrimitive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeFcPortStatisicsBasicGroup = bridgeFcPortStatisicsBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeFcPortStatisicsBasicGroup.setDescription('The bridge ports information group.')
bridgeSasPortInfoBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 5)).setObjects(("ATTO6500N-MIB", "sasPortPortNumber"), ("ATTO6500N-MIB", "sasPortOperationalState"), ("ATTO6500N-MIB", "sasPortPhy1State"), ("ATTO6500N-MIB", "sasPortPhy2State"), ("ATTO6500N-MIB", "sasPortPhy3State"), ("ATTO6500N-MIB", "sasPortPhy4State"), ("ATTO6500N-MIB", "sasPortAdminState"), ("ATTO6500N-MIB", "sasPortDataRateCapability"), ("ATTO6500N-MIB", "sasPortDataRateNegotiated"), ("ATTO6500N-MIB", "sasPortAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeSasPortInfoBasicGroup = bridgeSasPortInfoBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeSasPortInfoBasicGroup.setDescription('The bridge ports information group.')
bridgeSasPortStatisicsBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 6)).setObjects(("ATTO6500N-MIB", "sasPhyStatsTimeSinceReset"), ("ATTO6500N-MIB", "sasPhyStatsErrLinkChanged"), ("ATTO6500N-MIB", "sasPhyStatsErrInvalidCRC"), ("ATTO6500N-MIB", "sasPhyStatsErrPhyReset"), ("ATTO6500N-MIB", "sasPhyStatsErrLossOfSync"), ("ATTO6500N-MIB", "sasPhyStatsErrDisparityCount"), ("ATTO6500N-MIB", "sasPhyStatsErrInvalidDwords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeSasPortStatisicsBasicGroup = bridgeSasPortStatisicsBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeSasPortStatisicsBasicGroup.setDescription('The bridge ports information group.')
bridgeConfigBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 7)).setObjects(("ATTO6500N-MIB", "trapsEnabled"), ("ATTO6500N-MIB", "snmpUpdatesEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeConfigBasicGroup = bridgeConfigBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeConfigBasicGroup.setDescription('The bridge configuration information group.')
bridgeTrapInfoBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 8)).setObjects(("ATTO6500N-MIB", "trapMaxClients"), ("ATTO6500N-MIB", "trapClientIpAddress"), ("ATTO6500N-MIB", "trapClientPort"), ("ATTO6500N-MIB", "trapClientFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeTrapInfoBasicGroup = bridgeTrapInfoBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeTrapInfoBasicGroup.setDescription('The bridge trap information group.')
bridgeTrapsBasicGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 9)).setObjects(("ATTO6500N-MIB", "bridgeTemperatureWarning"), ("ATTO6500N-MIB", "fcPortTransition"), ("ATTO6500N-MIB", "sasPortTransition"), ("ATTO6500N-MIB", "bridgeThroughputWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeTrapsBasicGroup = bridgeTrapsBasicGroup.setStatus('current')
if mibBuilder.loadTexts: bridgeTrapsBasicGroup.setDescription('The bridge traps group.')
bridgeUniqueId = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 1), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeUniqueId.setStatus('current')
if mibBuilder.loadTexts: bridgeUniqueId.setDescription('8-octets uniquely identifying this HW element.')
vendorID = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorID.setStatus('current')
if mibBuilder.loadTexts: vendorID.setDescription('Vendor ID for this HW element.')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('Product/Model name of this HW element.')
primaryFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: primaryFirmwareRevision.setDescription('Build Number, Version Number and Base Version for the firmware on the primary partition (active firmware image).')
primaryFirmwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 5), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryFirmwareBuildDate.setStatus('current')
if mibBuilder.loadTexts: primaryFirmwareBuildDate.setDescription('Active firmware image build date and time (no time zone offset).')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hardwareVersion.setDescription('Current version of 6500N hardware.')
secondaryFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: secondaryFirmwareRevision.setDescription('Version Number and Build Number for the firmware on the secondary partition (backup firmware image).')
secondaryFirmwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 8), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryFirmwareBuildDate.setStatus('current')
if mibBuilder.loadTexts: secondaryFirmwareBuildDate.setDescription('Backup Firmware image build date and time (no time zone offset).')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Serial Number of this HW element.')
bridgeName = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeName.setStatus('current')
if mibBuilder.loadTexts: bridgeName.setDescription('User defined symbolic name assigned to this HW element.')
lastReboot = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 1), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastReboot.setStatus('current')
if mibBuilder.loadTexts: lastReboot.setDescription('Date and time of last reboot.')
uptime = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
if mibBuilder.loadTexts: uptime.setDescription('Time since last reboot, in units of 0.01 seconds')
lastRebootReason = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastRebootReason.setStatus('current')
if mibBuilder.loadTexts: lastRebootReason.setDescription('Plain text reason for last reboot.')
minimumOperatingTemp = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minimumOperatingTemp.setStatus('current')
if mibBuilder.loadTexts: minimumOperatingTemp.setDescription('Minimum Safe Operating Temperature, in degrees C')
maximumOperatingTemp = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumOperatingTemp.setStatus('current')
if mibBuilder.loadTexts: maximumOperatingTemp.setDescription('Maximum Safe Operating Temperature, in degrees C')
temperatureHighAlertSetting = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureHighAlertSetting.setStatus('current')
if mibBuilder.loadTexts: temperatureHighAlertSetting.setDescription('High temperature warning threshold, in degrees C')
temperatureLowAlertSetting = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureLowAlertSetting.setStatus('current')
if mibBuilder.loadTexts: temperatureLowAlertSetting.setDescription('Low temperature warning threshold, in degrees C')
chassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperature.setStatus('current')
if mibBuilder.loadTexts: chassisTemperature.setDescription('Current Chassis Temperature, in degrees C')
chassisTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: chassisTemperatureStatus.setDescription('The current sensor status (normal, warning or critical). Normal indicates the temperature for this HW element is within the safe range. Warning indicates that the temperature for this HW element has passed the warning threshold but is still within the safe range. Critical indicates that the temperature for this HW element is not within the safe operating temperature range.')
dramSingleBitErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dramSingleBitErrorCount.setStatus('current')
if mibBuilder.loadTexts: dramSingleBitErrorCount.setDescription('Number of Single-bit ECC errors since last reboot')
chassisThroughputStatus = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisThroughputStatus.setStatus('current')
if mibBuilder.loadTexts: chassisThroughputStatus.setDescription('Overall bridge throughput status (normal, warning). Normal indicates that there is no data bottleneck. Warning indicates that the aggregate fibre channel throughput has exceeded 50,000 IOPS.')
fcSFPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12), )
if mibBuilder.loadTexts: fcSFPInfoTable.setStatus('current')
if mibBuilder.loadTexts: fcSFPInfoTable.setDescription('Stores configuration information relating to installed FibreChannel SFPs.')
sasQSFPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13), )
if mibBuilder.loadTexts: sasQSFPInfoTable.setStatus('current')
if mibBuilder.loadTexts: sasQSFPInfoTable.setDescription('Stores configuration information relating to installed SAS QSFPs.')
fcSFPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1), ).setIndexNames((0, "ATTO6500N-MIB", "fcSFPIndex"))
if mibBuilder.loadTexts: fcSFPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fcSFPInfoEntry.setDescription('Stores information about installed fibre channel SFPs.')
fcSFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: fcSFPIndex.setStatus('current')
if mibBuilder.loadTexts: fcSFPIndex.setDescription('Used to index the SFP in the SFP Info table.')
fcSFPVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPVendor.setStatus('current')
if mibBuilder.loadTexts: fcSFPVendor.setDescription('SFP vendor name')
fcSFPSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPSerialNum.setStatus('current')
if mibBuilder.loadTexts: fcSFPSerialNum.setDescription('SFP serial number')
fcSFPPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPPartNum.setStatus('current')
if mibBuilder.loadTexts: fcSFPPartNum.setDescription('SFP vendor-supplied part number')
fcSFPDataRateCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 16))).clone(namedValues=NamedValues(("gb2", 2), ("gb4", 4), ("gb8", 8), ("gb16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPDataRateCapability.setStatus('current')
if mibBuilder.loadTexts: fcSFPDataRateCapability.setDescription('Maximum data rate capability of the fibre channel SFP.')
sasQSFPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1), ).setIndexNames((0, "ATTO6500N-MIB", "sasQSFPIndex"))
if mibBuilder.loadTexts: sasQSFPInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sasQSFPInfoEntry.setDescription('Stores information about installed SAS QSFPs.')
sasQSFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sasQSFPIndex.setStatus('current')
if mibBuilder.loadTexts: sasQSFPIndex.setDescription('Used to index the QSFP in the QSFP Info table.')
sasQSFPVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPVendor.setStatus('current')
if mibBuilder.loadTexts: sasQSFPVendor.setDescription('QSFP vendor name')
sasQSFPSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPSerialNum.setStatus('current')
if mibBuilder.loadTexts: sasQSFPSerialNum.setDescription('QSFP serial number')
sasQSFPType = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 4), QSFPTech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPType.setStatus('current')
if mibBuilder.loadTexts: sasQSFPType.setDescription('QSFP type')
sasQSFPPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPPartNum.setStatus('current')
if mibBuilder.loadTexts: sasQSFPPartNum.setDescription('QSFP vendor-supplied part number')
fcPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1), )
if mibBuilder.loadTexts: fcPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: fcPortInfoTable.setDescription('Stores fibre channel specific information for each fibre channel port.')
fcPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2), )
if mibBuilder.loadTexts: fcPortStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: fcPortStatisticsTable.setDescription('Stores fibre channel specific I/O and error statistics for each fibre channel port.')
sasPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3), )
if mibBuilder.loadTexts: sasPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: sasPortInfoTable.setDescription('Stores SAS specific information for each SAS port.')
sasPhyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4), )
if mibBuilder.loadTexts: sasPhyStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatisticsTable.setDescription('Stores SAS specific I/O and error statistics for each SAS PHY.')
fcPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1), ).setIndexNames((0, "ATTO6500N-MIB", "fcPortIndex"))
if mibBuilder.loadTexts: fcPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fcPortInfoEntry.setDescription('Stores state and capability information about the fibre channel ports.')
fcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: fcPortIndex.setStatus('current')
if mibBuilder.loadTexts: fcPortIndex.setDescription('Used to index the fibre channel port in the FC Port Entry table.')
fcPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortPortNumber.setStatus('current')
if mibBuilder.loadTexts: fcPortPortNumber.setDescription('The fibre channel port number.')
fcPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: fcPortOperationalState.setDescription('Operational state of the fibre channel port.')
fcPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortAdminState.setStatus('current')
if mibBuilder.loadTexts: fcPortAdminState.setDescription('Administrative state of the fibre channel port. Indicates whether the port is enabled or disabled.')
fcPortDataRateNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 2, 4, 8))).clone(namedValues=NamedValues(("unknown", -1), ("gb2", 2), ("gb4", 4), ("gb8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortDataRateNegotiated.setStatus('current')
if mibBuilder.loadTexts: fcPortDataRateNegotiated.setDescription('Current negotiated data rate of fibre channel port.')
fcPortConnModeNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("loop", 1), ("ptp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortConnModeNegotiated.setStatus('current')
if mibBuilder.loadTexts: fcPortConnModeNegotiated.setDescription('Current negotiated mode of the fibre channel port.')
fcPortDataRateConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", -1), ("gb2", 2), ("gb4", 4), ("gb8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortDataRateConfigured.setStatus('current')
if mibBuilder.loadTexts: fcPortDataRateConfigured.setDescription('Configured data rate of fibre channel port.')
fcPortConnModeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loop", 1), ("ptp", 2), ("looppreferred", 3), ("ptppreferred", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortConnModeConfigured.setStatus('current')
if mibBuilder.loadTexts: fcPortConnModeConfigured.setDescription('Configured mode of the fibre channel port.')
fcPortDataRateCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8))).clone(namedValues=NamedValues(("gb2", 2), ("gb4", 4), ("gb8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortDataRateCapability.setStatus('current')
if mibBuilder.loadTexts: fcPortDataRateCapability.setDescription('Maximum data rate capability of the fibre channel port. ')
fcPortNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 10), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortNodeName.setStatus('current')
if mibBuilder.loadTexts: fcPortNodeName.setDescription('Fibre channel node name.')
fcPortPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 11), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortPortName.setStatus('current')
if mibBuilder.loadTexts: fcPortPortName.setDescription('Fibre channel port name.')
fcPortPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 12), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortPeerName.setStatus('current')
if mibBuilder.loadTexts: fcPortPeerName.setDescription('The port name of the fabric-attached fibre channel peer. Only valid for a switched fabric. Direct-connected fibre channel ports will respond with all zeros.')
fcPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1), ).setIndexNames((0, "ATTO6500N-MIB", "fcStatsIndex"))
if mibBuilder.loadTexts: fcPortStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: fcPortStatisticsEntry.setDescription('Stores statistics about fibre channel ports.')
fcStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: fcStatsIndex.setStatus('current')
if mibBuilder.loadTexts: fcStatsIndex.setDescription('Used to index the fibre channel port in the Fibre Channel Port Statistics table.')
fcStatsTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsTxWords.setStatus('current')
if mibBuilder.loadTexts: fcStatsTxWords.setDescription('Number of words transmitted on this fibre channel port.')
fcStatsRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsRxWords.setStatus('current')
if mibBuilder.loadTexts: fcStatsRxWords.setDescription('Number of words received on this fibre channel port.')
fcStatsTimeSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsTimeSinceReset.setStatus('current')
if mibBuilder.loadTexts: fcStatsTimeSinceReset.setDescription('Amount of time since the fibre channel port statistics were reset.')
fcStatsErrLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrLinkFailure.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrLinkFailure.setDescription('Number of link failure events on this fibre channel port.')
fcStatsErrLossOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrLossOfSync.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrLossOfSync.setDescription(' Number of loss of sync events on this fibre channel port.')
fcStatsErrInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrInvalidCRC.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrInvalidCRC.setDescription(' Number of frames with invalid CRCs on this fibre channel port.')
fcStatsErrInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrInvalidTxWords.setDescription(' Number of invalid TX word events on this fibre channel port.')
fcStatsErrLipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrLipCount.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrLipCount.setDescription(' Number of LIP events on this fibre channel port.')
fcStatsErrNOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrNOSCount.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrNOSCount.setDescription(' Number of NOS events on this fibre channel port.')
fcStatsErrSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrSignalLoss.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrSignalLoss.setDescription(' Number of loss of signal events on this fibre channel port.')
fcStatsErrPrimitive = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrPrimitive.setStatus('current')
if mibBuilder.loadTexts: fcStatsErrPrimitive.setDescription(' Number of primitive sequential protocol errors on this fibre channel port.')
sasPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1), ).setIndexNames((0, "ATTO6500N-MIB", "sasPortIndex"))
if mibBuilder.loadTexts: sasPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sasPortInfoEntry.setDescription('Stores information about the SAS ports.')
sasPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sasPortIndex.setStatus('current')
if mibBuilder.loadTexts: sasPortIndex.setDescription('Used to index the SAS port in the SAS Port Entry table.')
sasPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPortNumber.setStatus('current')
if mibBuilder.loadTexts: sasPortPortNumber.setDescription('The SAS port number.')
sasPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("online", 1), ("offline", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: sasPortOperationalState.setDescription('Operational state of this entire SAS port. Degraded state is entered when fewer than all four PHYs are online. Offline state is entered when all four PHYs are offline.')
sasPortPhy1State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 4), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy1State.setStatus('current')
if mibBuilder.loadTexts: sasPortPhy1State.setDescription('Operational state of SAS PHY 1 of this SAS port.')
sasPortPhy2State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 5), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy2State.setStatus('current')
if mibBuilder.loadTexts: sasPortPhy2State.setDescription('Operational state of SAS PHY 2 of this SAS port.')
sasPortPhy3State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 6), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy3State.setStatus('current')
if mibBuilder.loadTexts: sasPortPhy3State.setDescription('Operational state of SAS PHY 3 of this SAS port.')
sasPortPhy4State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 7), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy4State.setStatus('current')
if mibBuilder.loadTexts: sasPortPhy4State.setDescription('Operational state of SAS PHY 4 of this SAS port.')
sasPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortAdminState.setStatus('current')
if mibBuilder.loadTexts: sasPortAdminState.setDescription('Administrative state of this SAS port. Indicates whether the port is enabled or disabled.')
sasPortDataRateCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6))).clone(namedValues=NamedValues(("gb1point5", 1), ("gb3", 3), ("gb6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortDataRateCapability.setStatus('current')
if mibBuilder.loadTexts: sasPortDataRateCapability.setDescription('Maximum data rate capability of the SAS port.')
sasPortDataRateNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6))).clone(namedValues=NamedValues(("gb1point5", 1), ("gb3", 3), ("gb6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortDataRateNegotiated.setStatus('current')
if mibBuilder.loadTexts: sasPortDataRateNegotiated.setDescription(' Current negotiated data rate of this SAS port.')
sasPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 11), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortAddress.setStatus('current')
if mibBuilder.loadTexts: sasPortAddress.setDescription('SAS Port Address.')
sasPhyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1), ).setIndexNames((0, "ATTO6500N-MIB", "sasPhyStatsIndex"))
if mibBuilder.loadTexts: sasPhyStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatisticsEntry.setDescription('Stores statistics about SAS Phys.')
sasPhyStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sasPhyStatsIndex.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsIndex.setDescription('Used to index the SAS PHY in the SAS PHY Statistics table.')
sasPhyStatsTimeSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPhyStatsTimeSinceReset.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsTimeSinceReset.setDescription('Amount of time since the SAS PHY statistics were reset on this SAS PHY.')
sasPhyStatsErrLinkChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrLinkChanged.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsErrLinkChanged.setDescription(' Number of link changed events on this SAS PHY.')
sasPhyStatsErrInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrInvalidCRC.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsErrInvalidCRC.setDescription(' Number of Invalid CRC events on this SAS PHY.')
sasPhyStatsErrPhyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrPhyReset.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsErrPhyReset.setDescription(' Number of Phy Reset events on this SAS PHY.')
sasPhyStatsErrLossOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrLossOfSync.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsErrLossOfSync.setDescription(' Number of loss of sync events on this SAS PHY.')
sasPhyStatsErrDisparityCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrDisparityCount.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsErrDisparityCount.setDescription(' Number of disparity error events on this SAS PHY.')
sasPhyStatsErrInvalidDwords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrInvalidDwords.setStatus('current')
if mibBuilder.loadTexts: sasPhyStatsErrInvalidDwords.setDescription(' Number of invalid DWORD events on this SAS PHY.')
trapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsEnabled.setStatus('current')
if mibBuilder.loadTexts: trapsEnabled.setDescription('Indicates whether traps are enabled or disabled.')
snmpUpdatesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUpdatesEnabled.setStatus('current')
if mibBuilder.loadTexts: snmpUpdatesEnabled.setDescription('Indicates whether SNMP updates are enabled or disabled.')
trapMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMaxClients.setStatus('current')
if mibBuilder.loadTexts: trapMaxClients.setDescription('The maximum number of SNMP trap recipients supported by this HW element.')
trapClientTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2), )
if mibBuilder.loadTexts: trapClientTable.setStatus('current')
if mibBuilder.loadTexts: trapClientTable.setDescription('Stores a row for each IP address/port number configured to receive traps.')
trapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1), ).setIndexNames((0, "ATTO6500N-MIB", "trapClientIndex"))
if mibBuilder.loadTexts: trapClientEntry.setStatus('current')
if mibBuilder.loadTexts: trapClientEntry.setDescription('Ip/Port pair for a specific client.')
trapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: trapClientIndex.setStatus('current')
if mibBuilder.loadTexts: trapClientIndex.setDescription('Used to index a trap client in the trapClientTable.')
trapClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: trapClientIpAddress.setDescription('The IP address of a client registered for traps in dotted notation.')
trapClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientPort.setStatus('current')
if mibBuilder.loadTexts: trapClientPort.setDescription('The UDP port to send traps for this trap client. Normally this would be the standard trap port (162). This object is an index and must be specified to create a row in this table.')
trapClientFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("critical", 2), ("warning", 3), ("informational", 4), ("all", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientFilter.setStatus('current')
if mibBuilder.loadTexts: trapClientFilter.setDescription("This value defines the trap severity filter for this trap host. The unit will send traps to this trap client that have a severity level less than or equal to this value. The default value of this object is 'warning'.")
bridgeTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 1)).setObjects(("ATTO6500N-MIB", "chassisTemperatureStatus"), ("ATTO6500N-MIB", "chassisTemperature"))
if mibBuilder.loadTexts: bridgeTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: bridgeTemperatureWarning.setDescription('Supports notification of over/under temperature warnings. The following information is returned: tempStatus - the current temperature status (normal, warning, critical) Where normal indicates the temperature is within the safe range. Warning indicates the warning threshold has been reached. Critical indicates that the temperature is outside the safe range. temperature - current temperature of the sensor Recommended severity level (for filtering): warning')
fcPortTransition = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 2)).setObjects(("ATTO6500N-MIB", "fcPortPortNumber"), ("ATTO6500N-MIB", "fcPortOperationalState"))
if mibBuilder.loadTexts: fcPortTransition.setStatus('current')
if mibBuilder.loadTexts: fcPortTransition.setDescription('Supports notification of fibre channel port connectivity changes. The following information is returned: fcPortPortNumber - the description of the port fcPortOperationalState - the current port state Recommended severity level (for filtering): informational')
sasPortTransition = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 3)).setObjects(("ATTO6500N-MIB", "sasPortPortNumber"), ("ATTO6500N-MIB", "sasPortOperationalState"))
if mibBuilder.loadTexts: sasPortTransition.setStatus('current')
if mibBuilder.loadTexts: sasPortTransition.setDescription('Supports notification of SAS port connectivity changes. The following information is returned: sasPortPortNumber - the description of the port sasPortOperationalState - the current port state Recommended severity level (for filtering): informational')
bridgeThroughputWarning = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 4)).setObjects(("ATTO6500N-MIB", "chassisThroughputStatus"))
if mibBuilder.loadTexts: bridgeThroughputWarning.setStatus('current')
if mibBuilder.loadTexts: bridgeThroughputWarning.setDescription("Supports notification of max-throughput warning indicating a potential data bottleneck. Data throughput is measured as aggregate completed I/O's per second on the Fibre Channel interfaces. The following information is returned: ChassisthroughputStatus - the current throughput status normal : no data bottleneck. warning: aggregate fibre channel throughput has exceeded 50,000 IOPS. Recommended severity level (for filtering): informational")
mibBuilder.exportSymbols("ATTO6500N-MIB", sasPortDataRateNegotiated=sasPortDataRateNegotiated, fcPortDataRateCapability=fcPortDataRateCapability, fcStatsErrLinkFailure=fcStatsErrLinkFailure, sasPhyStatsIndex=sasPhyStatsIndex, fcPortStatisticsTable=fcPortStatisticsTable, fcSFPSerialNum=fcSFPSerialNum, minimumOperatingTemp=minimumOperatingTemp, maximumOperatingTemp=maximumOperatingTemp, trapsEnabled=trapsEnabled, fcStatsErrInvalidTxWords=fcStatsErrInvalidTxWords, fcSFPInfoEntry=fcSFPInfoEntry, sasPhyStatsErrPhyReset=sasPhyStatsErrPhyReset, attoProducts=attoProducts, sasPortPhy4State=sasPortPhy4State, sasPortTransition=sasPortTransition, bridgeConfigBasicGroup=bridgeConfigBasicGroup, bridgeSasPortStatisicsBasicGroup=bridgeSasPortStatisicsBasicGroup, bridgeTrapInfo=bridgeTrapInfo, sasPortPhy2State=sasPortPhy2State, secondaryFirmwareRevision=secondaryFirmwareRevision, fcPortIndex=fcPortIndex, sasPortPortNumber=sasPortPortNumber, bridgeTemperatureWarning=bridgeTemperatureWarning, sasPhyStatisticsTable=sasPhyStatisticsTable, fcPortPortNumber=fcPortPortNumber, snmpUpdatesEnabled=snmpUpdatesEnabled, attoAgentCapability=attoAgentCapability, fcPortOperationalState=fcPortOperationalState, dramSingleBitErrorCount=dramSingleBitErrorCount, fcStatsTxWords=fcStatsTxWords, fcStatsErrInvalidCRC=fcStatsErrInvalidCRC, fcStatsErrPrimitive=fcStatsErrPrimitive, QSFPTech=QSFPTech, trapMaxClients=trapMaxClients, bridge=bridge, sasQSFPIndex=sasQSFPIndex, hardwareVersion=hardwareVersion, sasPortInfoEntry=sasPortInfoEntry, fcPortDataRateNegotiated=fcPortDataRateNegotiated, sasPhyStatsErrLossOfSync=sasPhyStatsErrLossOfSync, bridgeConfig=bridgeConfig, fcSFPInfoTable=fcSFPInfoTable, lastRebootReason=lastRebootReason, sasQSFPInfoTable=sasQSFPInfoTable, sasQSFPType=sasQSFPType, attoModules=attoModules, bridgFcPortInfoBasicGroup=bridgFcPortInfoBasicGroup, fcSFPVendor=fcSFPVendor, sasPortIndex=sasPortIndex, modelName=modelName, sasPhyStatsErrInvalidCRC=sasPhyStatsErrInvalidCRC, fcStatsErrLipCount=fcStatsErrLipCount, fcStatsTimeSinceReset=fcStatsTimeSinceReset, fcPortConnModeNegotiated=fcPortConnModeNegotiated, trapClientPort=trapClientPort, sasPortAdminState=sasPortAdminState, fcSFPIndex=fcSFPIndex, sasPortAddress=sasPortAddress, PYSNMP_MODULE_ID=bridge, fcStatsErrNOSCount=fcStatsErrNOSCount, DisplayWWN=DisplayWWN, sasQSFPVendor=sasQSFPVendor, vendorID=vendorID, fcPortPeerName=fcPortPeerName, bridgeMIBGroups=bridgeMIBGroups, chassisThroughputStatus=chassisThroughputStatus, bridgeMIBConformance=bridgeMIBConformance, temperatureHighAlertSetting=temperatureHighAlertSetting, sasPhyStatsErrDisparityCount=sasPhyStatsErrDisparityCount, bridgePorts=bridgePorts, trapClientIpAddress=trapClientIpAddress, sasQSFPSerialNum=sasQSFPSerialNum, sasPhyStatisticsEntry=sasPhyStatisticsEntry, fcPortTransition=fcPortTransition, attotech=attotech, fcPortPortName=fcPortPortName, sasPortDataRateCapability=sasPortDataRateCapability, PHYStatus=PHYStatus, chassisTemperatureStatus=chassisTemperatureStatus, bridgeChassis=bridgeChassis, sasQSFPPartNum=sasQSFPPartNum, sasPhyStatsTimeSinceReset=sasPhyStatsTimeSinceReset, trapClientTable=trapClientTable, bridgeIdentityBasicGroup=bridgeIdentityBasicGroup, bridgeBasicCompliance=bridgeBasicCompliance, primaryFirmwareBuildDate=primaryFirmwareBuildDate, fcPortStatisticsEntry=fcPortStatisticsEntry, chassisTemperature=chassisTemperature, sasQSFPInfoEntry=sasQSFPInfoEntry, bridgeName=bridgeName, fcSFPPartNum=fcSFPPartNum, sasPortPhy1State=sasPortPhy1State, bridgeTraps=bridgeTraps, fcSFPDataRateCapability=fcSFPDataRateCapability, fcStatsRxWords=fcStatsRxWords, trapClientEntry=trapClientEntry, lastReboot=lastReboot, trapClientFilter=trapClientFilter, trapClientIndex=trapClientIndex, fcPortAdminState=fcPortAdminState, primaryFirmwareRevision=primaryFirmwareRevision, fcPortConnModeConfigured=fcPortConnModeConfigured, uptime=uptime, sasPhyStatsErrInvalidDwords=sasPhyStatsErrInvalidDwords, bridgeTrapInfoBasicGroup=bridgeTrapInfoBasicGroup, bridgeThroughputWarning=bridgeThroughputWarning, fcPortInfoTable=fcPortInfoTable, secondaryFirmwareBuildDate=secondaryFirmwareBuildDate, fcStatsErrSignalLoss=fcStatsErrSignalLoss, attoMgmt=attoMgmt, fcStatsErrLossOfSync=fcStatsErrLossOfSync, sasPortOperationalState=sasPortOperationalState, sasPhyStatsErrLinkChanged=sasPhyStatsErrLinkChanged, fcPortDataRateConfigured=fcPortDataRateConfigured, serialNumber=serialNumber, bridgeIdentity=bridgeIdentity, temperatureLowAlertSetting=temperatureLowAlertSetting, bridgeSasPortInfoBasicGroup=bridgeSasPortInfoBasicGroup, bridgeTrapsBasicGroup=bridgeTrapsBasicGroup, sasPortInfoTable=sasPortInfoTable, sasPortPhy3State=sasPortPhy3State, bridgeChassisBasicGroup=bridgeChassisBasicGroup, fcStatsIndex=fcStatsIndex, fcPortInfoEntry=fcPortInfoEntry, bridgeMIBCompliances=bridgeMIBCompliances, bridgeFcPortStatisicsBasicGroup=bridgeFcPortStatisicsBasicGroup, fcPortNodeName=fcPortNodeName, bridgeUniqueId=bridgeUniqueId)
