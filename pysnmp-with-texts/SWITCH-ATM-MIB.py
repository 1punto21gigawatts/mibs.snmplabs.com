#
# PySNMP MIB module SWITCH-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCH-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, Bits, NotificationType, IpAddress, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Gauge32, iso, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Bits", "NotificationType", "IpAddress", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Gauge32", "iso", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
atmModule, = mibBuilder.importSymbols("TELESYN-ATI-TC", "atmModule")
switchAtmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1))
switchAtmMib.setRevisions(('1997-06-20 19:00', '1996-10-29 19:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: switchAtmMib.setRevisionsDescriptions(('Changed the status of atmxCipVci to obsolete. Added atmxCipRipMode to atmxCipEntry. Added a new table, atmxCipVciTable. Each ATM CIP may be supported by multiple VCIs. The atmxCipVciEntry links each atmxCipEntry to one or more conceptual rows in the atmxCipVciTable. Revised the descripiton of atmxCipRowStatus to include the dependancy of atmxCipVciRowStatus. See also the description of atmCipVciRowStatus for details of the relationship. Added atmxCipArpSource and atmxCipArpRowStatus to the atmxCipArpTable and atmxLecArpSource and atmxLecArpRowStatus to the atmxLecArpTable to allow managment to create and delete entries in these tables. Added the tables atmxPtToPtTable, atmxTrunkTable, atmxTrunkVlanTable. Added the object atmxLecVlanNumber to the atmxLecTable. Changed the status of atmxLecUnicastMacAddress to obsolete. Added the object atmxPortSignalingMode to the atmxPortTable. ', 'Initial version.',))
if mibBuilder.loadTexts: switchAtmMib.setLastUpdated('9706201900Z')
if mibBuilder.loadTexts: switchAtmMib.setOrganization('')
if mibBuilder.loadTexts: switchAtmMib.setContactInfo('')
if mibBuilder.loadTexts: switchAtmMib.setDescription('The MIB module for ATM support. This module is designed with the assumption that only one virtual path identifier (VPI) may be assigned and is usually determined by the underlying software implementation. The VPI is never used as an index in any table in this module.')
class IfIndexOrZero(TextualConvention, Integer32):
    description = 'An extension of InterfacesIndex to include the value 0. The value 0 may be used to indicate instances where 0, unknown, or all interfaces may apply.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class AtmAddress(TextualConvention, OctetString):
    description = 'ATM Address.'
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), )
class AtmPortIndex(TextualConvention, Integer32):
    description = 'ATM Port Index.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10)

class AtmVpi(TextualConvention, Integer32):
    description = 'ATM VPI. This is a constant with a value of 0.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 0)

class AtmVci(TextualConvention, Integer32):
    description = 'ATM VCI.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

class AtmClientVci(TextualConvention, Integer32):
    description = 'This type restricts VCI values to those not reserved by the ATM Forum.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(32, 1023)

class AtmLecIndex(TextualConvention, Integer32):
    description = 'ATM Lan Emulation Client Index.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 32)

class AtmCipIndex(TextualConvention, Integer32):
    description = 'ATM Classic IP Index.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class AtmAdminStatus(TextualConvention, Integer32):
    description = 'Admininstrative status codes'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class AtmOperStatus(TextualConvention, Integer32):
    description = 'ATM Operation Status.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("inactive", 2), ("active", 3), ("loopBack", 4))

class AtmConnectionOperStatusCodes(TextualConvention, Integer32):
    description = 'Virtual Connection operational status.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("up", 2), ("down", 3))

class AtmTransmissionTypes(TextualConvention, Integer32):
    description = 'ATM Transmission types.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unknown", 1), ("sonetSTS3c", 2))

class AtmMediaTypes(TextualConvention, Integer32):
    description = 'ATM Media Types.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("coaxCable", 2), ("singleModeFiber", 3), ("multiModeFiber", 4), ("utp", 5))

class AtmQosClass(TextualConvention, Integer32):
    description = 'Quality of Service.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unspecified", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5))

class AtmClearStats(TextualConvention, Integer32):
    description = "Flag to clear the counters to 0. A SNMP Get operation will always return 'noOp'"
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noOp", 1), ("clearStats", 2))

class AtmxArpEntryType(TextualConvention, Integer32):
    description = 'Indicates how the ArpEntry was learned or created and whether it is subject to aging other(1) - The entry does not fall into any other category. learnedViaArp(2) - learned from ARP. learnedViaData(3) - learned from observing incoming traffic. staticVolatile(4) - created by management and will not age. It may not survive a system restart. staticNonVolatile(5) - created by management and will not age. It will survive a system restart. '
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("learnedViaArp", 2), ("learnedViaData", 3), ("staticVolatile", 4), ("staticNonVolatile", 5))

class AtmxVlanRange(TextualConvention, Integer32):
    description = 'The range of valid vlan numbers.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

atmxPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1))
atmxLecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2))
atmxCipGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3))
atmxLayerStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4))
atmxVccStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5))
atmxLecStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6))
atmxCipStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7))
atmxSscopStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8))
atmxIlmiStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9))
atmxVccGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10))
atmxAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 11))
atmxCipArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12))
atmxLecArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13))
atmxPtToPtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14))
atmxTrunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15))
atmxPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: atmxPortTable.setStatus('current')
if mibBuilder.loadTexts: atmxPortTable.setDescription("A table of port layer status and parameter information for the UNI's physical interface.")
atmxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxPortEntry.setStatus('current')
if mibBuilder.loadTexts: atmxPortEntry.setDescription('An entry in the table, containing information about the physical layer of a UNI interface.')
atmxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 1), AtmPortIndex())
if mibBuilder.loadTexts: atmxPortIndex.setStatus('current')
if mibBuilder.loadTexts: atmxPortIndex.setDescription('A unique value which identifies this atm submodule port.')
atmxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortDescription.setStatus('current')
if mibBuilder.loadTexts: atmxPortDescription.setDescription('A description for this atm port.')
atmxPortTransmissionType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 3), AtmTransmissionTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortTransmissionType.setStatus('current')
if mibBuilder.loadTexts: atmxPortTransmissionType.setDescription("The transmission type of this port. For example, for a port using the Sonet STS-3c physical layer at 155.52 Mbs, this object would have the value 'sonetSTS3c'.")
atmxPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 4), AtmMediaTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMediaType.setStatus('current')
if mibBuilder.loadTexts: atmxPortMediaType.setDescription("The type of media being used on this port. For example for a port using coaxial cable, the object would have the value 'coaxCable'.")
atmxPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 5), AtmOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmxPortOperStatus.setDescription("The operational state (i.e., actual) of this port. The ILMI should not alarm on a physical interface when the value of this object is 'outOfService'. This capability is useful if the equipment is to be disconnected or for troubleshooting purposes. A value of 'loopBack' indicates that loopback is in place.")
atmxPortMaxVCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMaxVCCs.setStatus('current')
if mibBuilder.loadTexts: atmxPortMaxVCCs.setDescription('The maximum number of VCCs supported on this UNI.')
atmxPortMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMaxVciBits.setStatus('current')
if mibBuilder.loadTexts: atmxPortMaxVciBits.setDescription('The number of active VCI bits on this interface.')
atmxPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 8), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortAddress.setStatus('current')
if mibBuilder.loadTexts: atmxPortAddress.setDescription("The ATM address assigned to this port. The value of this attribute is normally set via the ILMI. If the ILMI Address registration mib, ATM-FORUM-ADDR-REG, is supported and the the value of atmxPortIlmiStatus is 'up' than atmxPortAddress should have a MAX-ACCESS of read-only.")
atmxPortSignalingVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ver30", 1), ("ver31", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortSignalingVersion.setStatus('current')
if mibBuilder.loadTexts: atmxPortSignalingVersion.setDescription('Version of the ATM forum UNI Signaling.')
atmxPortSignalingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortSignalingVci.setStatus('current')
if mibBuilder.loadTexts: atmxPortSignalingVci.setDescription('Signaling Vci. ATM Forum has defined VPI/VCI as VPI 0, VCI 5 for signaling.')
atmxPortILMIVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortILMIVci.setStatus('current')
if mibBuilder.loadTexts: atmxPortILMIVci.setDescription('ILMI Vci. ATM Forum has defined the VPI 0, VCI 16 for ILMI.')
atmxPortEnableIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnableIlmi.setStatus('current')
if mibBuilder.loadTexts: atmxPortEnableIlmi.setDescription('ILMI Enable.')
atmxPortEnableIlmiPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnableIlmiPoll.setStatus('current')
if mibBuilder.loadTexts: atmxPortEnableIlmiPoll.setDescription('ILMI Poll Enable.')
atmxPortEnablePlScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortEnablePlScramble.setStatus('current')
if mibBuilder.loadTexts: atmxPortEnablePlScramble.setDescription('Payload Scrambling Enable.')
atmxPortClock = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("loopTimed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortClock.setStatus('current')
if mibBuilder.loadTexts: atmxPortClock.setDescription('ATM Port clock mode.')
atmxPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: atmxPortMacAddress.setDescription('ATM Port MAC Address.')
atmxPortAdaptorRamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortAdaptorRamSize.setStatus('current')
if mibBuilder.loadTexts: atmxPortAdaptorRamSize.setDescription('Segmentation and reassembly memory size in bytes.')
atmxPortIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 18), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortIlmiStatus.setStatus('current')
if mibBuilder.loadTexts: atmxPortIlmiStatus.setDescription('ILMI status.')
atmxPortSignalingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 19), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPortSignalingStatus.setStatus('current')
if mibBuilder.loadTexts: atmxPortSignalingStatus.setDescription('Signaling Status.')
atmxPortSignalingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxPortSignalingMode.setStatus('current')
if mibBuilder.loadTexts: atmxPortSignalingMode.setDescription("If this has the value 'pvc' then signaling, ILMI and ILMI polling will be automatically disabled.")
atmxLecTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: atmxLecTable.setStatus('current')
if mibBuilder.loadTexts: atmxLecTable.setDescription('A table of LEC status and parameter information.')
atmxLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxLecIndex"))
if mibBuilder.loadTexts: atmxLecEntry.setStatus('current')
if mibBuilder.loadTexts: atmxLecEntry.setDescription('An entry in the table, containing information about the indicated LEC.')
atmxLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 1), AtmLecIndex())
if mibBuilder.loadTexts: atmxLecIndex.setStatus('current')
if mibBuilder.loadTexts: atmxLecIndex.setDescription('A unique value which identifies this LEC entry.')
atmxLecDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecDescription.setStatus('current')
if mibBuilder.loadTexts: atmxLecDescription.setDescription('A description for this LEC.')
atmxElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxElanName.setStatus('current')
if mibBuilder.loadTexts: atmxElanName.setDescription('A Name for the ELAN.')
atmxLecConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecConfigMode.setStatus('current')
if mibBuilder.loadTexts: atmxLecConfigMode.setDescription('Configuration Mode for this LEC.')
atmxLecServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 5), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecServerAddress.setStatus('current')
if mibBuilder.loadTexts: atmxLecServerAddress.setDescription('ATM Address of the LE Configuration Server if the configuration mode is auto; else, the LE Server ATM Address.')
atmxLecUnicastMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecUnicastMacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: atmxLecUnicastMacAddress.setDescription('The Local Unicast MAC address for this LEC. This is now obsolete because the information can be obtained from the vport entry identified by atmxLecVPortNumber.')
atmxLecMaxUnknownFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecMaxUnknownFrameCount.setStatus('current')
if mibBuilder.loadTexts: atmxLecMaxUnknownFrameCount.setDescription('Maximum number of frames to the BUS for a given unicast LAN destination within the Maximum unknown Frame time.')
atmxLecMaxArpRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecMaxArpRetryCount.setStatus('current')
if mibBuilder.loadTexts: atmxLecMaxArpRetryCount.setDescription("Maximum number of times LE_ARP_REQUEST will be retried for a given frame's LAN destination.")
atmxLecArpRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpRespTime.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpRespTime.setDescription('Maximum time in seconds that the LEC expects an LE_ARP_REQUEST/LE_ARP_RESPONSE cycle to take.')
atmxLecMaxUnknownFrameTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecMaxUnknownFrameTime.setStatus('current')
if mibBuilder.loadTexts: atmxLecMaxUnknownFrameTime.setDescription('Time period in seconds for the maximum number of frames that can be sent to the BUS for a given LAN destination.')
atmxLecControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecControlTimeout.setStatus('current')
if mibBuilder.loadTexts: atmxLecControlTimeout.setDescription('Time out period in seconds for timing out most request response control frame interations.')
atmxLecVccTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecVccTimeout.setStatus('current')
if mibBuilder.loadTexts: atmxLecVccTimeout.setDescription('Maximum in-active time period in seconds a data direct VCC will be active before being released. A value of 0 indicates that it will never be release.')
atmxLecAgeingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecAgeingTime.setStatus('current')
if mibBuilder.loadTexts: atmxLecAgeingTime.setDescription('Maximum time in seconds that an LE client will maintain an entry in its LE-ARP cache in the absence of verification.')
atmxLecFlushTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecFlushTimeout.setStatus('current')
if mibBuilder.loadTexts: atmxLecFlushTimeout.setDescription('Time limit in seconds to wait to receive an LE_FLUSH_RESPONSE after the LE_FLUSH_REQUEST has been sent before taking recovery action.')
atmxLecVPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecVPortNumber.setStatus('deprecated')
if mibBuilder.loadTexts: atmxLecVPortNumber.setDescription('The Virtual port number with which this LEC is associated. If the value of this object is 0, then no virtual port has been assigned and the LEC is not active.')
atmxLecProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("inActive", 0), ("ctrlDirConReq", 1), ("ctrlDistConRsp", 2), ("mcastSndConReq", 3), ("mcastSndFwdConRsp", 4), ("mcastSndFwdConCfm", 5), ("mcastSndConCfm", 6), ("mcastFwdConRsp", 7), ("busArpReq", 8), ("cfgReq", 9), ("joinReq", 10), ("active", 11), ("cfgDirConReq", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecProtocolState.setStatus('current')
if mibBuilder.loadTexts: atmxLecProtocolState.setDescription('This object contains the LAN emulation protocol state.')
atmxLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxLecRowStatus.setDescription("This object is used to create and delete entries. Only the values 'active', 'createAndGo', and 'delete are supported.")
atmxLecIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 18), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmxLecIfIndex.setDescription('This object contains the ifIndex of the corresponding entry in the ifTable. If no such entry exists or unknown then value of this object is 0.')
atmxLecId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecId.setStatus('current')
if mibBuilder.loadTexts: atmxLecId.setDescription('A value assigned by the LAN Emulation Service (LES) for the LEC identified by atmLecIndex. The value 0 indicates the LES has not assigned a value.')
atmxLecControlDirectVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 20), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecControlDirectVcc.setStatus('current')
if mibBuilder.loadTexts: atmxLecControlDirectVcc.setDescription('The VCC assigned for the Control Direct connection. The value 0 indicates the VCC is not set.')
atmxLecControlDistributeVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 21), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecControlDistributeVcc.setStatus('current')
if mibBuilder.loadTexts: atmxLecControlDistributeVcc.setDescription('The VCC assigned for the Control Distribute connection. The value 0 indicates the VCC is not set.')
atmxLecMulticastSendVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 22), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecMulticastSendVcc.setStatus('current')
if mibBuilder.loadTexts: atmxLecMulticastSendVcc.setDescription('The VCC assigned for Multicast send. The value 0 indicates the VCC is not set.')
atmxLecMulticastForwardVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 23), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecMulticastForwardVcc.setStatus('current')
if mibBuilder.loadTexts: atmxLecMulticastForwardVcc.setDescription('The VCC assigned for multicast forwarding. The value 0 indicates the VCC is not set.')
atmxLecVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 2, 1, 1, 24), AtmxVlanRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecVlanNumber.setReference('SWITCH-VLAN-MIB')
if mibBuilder.loadTexts: atmxLecVlanNumber.setStatus('current')
if mibBuilder.loadTexts: atmxLecVlanNumber.setDescription("The virtual LAN number to which this LEC is attached. This object is required for row creation and the value of this object must correspond to an existing vLanNumber object in the 'SWITCH-VLAN-MIB.vLanTable'. After a successful row creation, this value may change as a result of moving the virtual port, atmxLecIfIndex, to a different Vlan.")
atmxCipTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: atmxCipTable.setStatus('current')
if mibBuilder.loadTexts: atmxCipTable.setDescription('A table of CIP status and parameter information.')
atmxCipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"))
if mibBuilder.loadTexts: atmxCipEntry.setStatus('current')
if mibBuilder.loadTexts: atmxCipEntry.setDescription('An entry in the table, containing information about the indicated CIP.')
atmxCipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 1), AtmCipIndex())
if mibBuilder.loadTexts: atmxCipIndex.setStatus('current')
if mibBuilder.loadTexts: atmxCipIndex.setDescription('A unique value which identifies this CIP entry.')
atmxCipDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipDescription.setStatus('current')
if mibBuilder.loadTexts: atmxCipDescription.setDescription('A description for this CIP.')
atmxCipIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipIPAddress.setStatus('current')
if mibBuilder.loadTexts: atmxCipIPAddress.setDescription('The IP address associated with this CIP entity.')
atmxCipIPSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipIPSubnetMask.setStatus('current')
if mibBuilder.loadTexts: atmxCipIPSubnetMask.setDescription('The IP subnet mask associated with this CIP entity.')
atmxCipConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipConnectionType.setStatus('current')
if mibBuilder.loadTexts: atmxCipConnectionType.setDescription("The connection type of this CIP. If during row creation the value of this object is 'pvc', then at least one entry in the atmxCipVciTable is required before atmxCipRowStatus can be set to 'active'. If during row creation the value is 'svc' then atmxCipServerAtmAddress must be set before atmxCipRowStatus can be set to 'active'.")
atmxCipVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 6), AtmVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipVci.setStatus('obsolete')
if mibBuilder.loadTexts: atmxCipVci.setDescription('The virtual channel identifier associated with this CIP, if PVC.')
atmxCipServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 7), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipServerAtmAddress.setStatus('current')
if mibBuilder.loadTexts: atmxCipServerAtmAddress.setDescription("ATM Address of the ARP server for the logical IP subnet, to which this CIP belongs. This object is required if atmxCipConnectionType is 'svc'.")
atmxCipMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9180)).clone(9160)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipMtuSize.setStatus('current')
if mibBuilder.loadTexts: atmxCipMtuSize.setDescription('The maximum size of the transmit or receive SDU size of all connections associated with this CIP entity.')
atmxCipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 9), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmxCipIfIndex.setDescription('This value of this object identifies the corresponding entry in the ifTable. If this object has the value of 0 then there is no corresponding entry in the ifTable.')
atmxCipProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("inactive", 0), ("arpConReq", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipProtocolState.setStatus('current')
if mibBuilder.loadTexts: atmxCipProtocolState.setDescription('The state of the CIP Protocol.')
atmxCipAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 11), AtmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipAdmStatus.setStatus('current')
if mibBuilder.loadTexts: atmxCipAdmStatus.setDescription('The administrative status of this CIP instance.')
atmxCipOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 12), AtmOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmxCipOperStatus.setDescription('The operational status of this CIP instance.')
atmxCipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxCipRowStatus.setDescription("This object is used to create and delete atmxCipEntry. To create of a logical row, set this object to 'createAndWait'. Before this object can be set to 'active', the objects atmxCipIPAddress, atmxCipIPSubnetMask, atmxCipConnectionType must be set to the appropriate values and at least one entry must be created in the atmxCipVciTable with the same atmxCipIndex value as used with this object instance. When this object is set to 'active', the logical rows in atmxCipVciTable with the same atmxCipIndex value will also be set to 'active'. If this object is set to 'delete', the logical rows in atmxCipVciTable with the same atmxCipIndex value will also be deleted.")
atmxCipRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("active", 2), ("deaf", 3), ("inactive", 4))).clone('silent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipRipMode.setStatus('current')
if mibBuilder.loadTexts: atmxCipRipMode.setDescription("If the value of this object is 'silent', RIP daemon processes received routing packets and does NOT send routing packets over the interface identified by atmxCipIfIndex. With a value of 'active', RIP sends and receives routing packets. With a value of 'deaf' RIP sends routing packets and does not process recieved packets. With a value of 'inactive' RIP deamon does not send nor receive routing packets.")
atmxCipVciTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: atmxCipVciTable.setStatus('current')
if mibBuilder.loadTexts: atmxCipVciTable.setDescription('A table which contains VCIs associated with each CIP.')
atmxCipVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"), (0, "SWITCH-ATM-MIB", "atmxCipVciId"))
if mibBuilder.loadTexts: atmxCipVciEntry.setStatus('current')
if mibBuilder.loadTexts: atmxCipVciEntry.setDescription('An entry in the table, identifying each VCI for a CIP.')
atmxCipVciId = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2, 1, 1), AtmClientVci())
if mibBuilder.loadTexts: atmxCipVciId.setStatus('current')
if mibBuilder.loadTexts: atmxCipVciId.setDescription('The virtual channel identifier associated with this CIP.')
atmxCipVciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipVciRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxCipVciRowStatus.setDescription("This object is used to create and delete entries in the atmxCipVciTable. An object instance of this object corresponds to an object instance of atmxCipRowStatus if both objects have the same for atmxCipIndex index value. There may be multiple instances of this object which correspond to the same instance of atmxCipRowStatus. To create a conceptual row in this table and the corresponding object instance atmxCipRowStatus does not exist or has the value 'notReady', the value for atmxCipVciRowStatus in an SNMP Set operation can be only 'createAndWait'. Under these conditions, atmxCipVciRowStatus cannot be set to 'active' but transitions to 'active' as a side effect of an SNMP set operation changing atmxCipRowStatus to 'active'. At least one corresponding instance of atmxCipVciRowStatus must exist before atmxCipRowStatus can transition to 'active'. To create a conceptual row in this table and the corresponding object instance atmxCipRowStatus exists with the value 'active' then the value for atmxCipVciRowStatus may be 'createAndWait' or 'createAndGo'. An SNMP Set operation may not set the value of this object to 'active' unless the the corresponde atmxCipRowStatus has the value 'active'.")
atmxLayerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: atmxLayerStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsTable.setDescription('A table of ATM layer statistics information.')
atmxLayerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxLayerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsEntry.setDescription('An entry in the table, containing information about the ATM layer statistics.')
atmxLayerStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCells.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsTxCells.setDescription('The total number of successfully transmitted cells.')
atmxLayerStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCells.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsRxCells.setDescription('The total number of successfully received cells.')
atmxLayerStatsTxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsTxCellDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsTxCellDiscards.setDescription('The total number of transmit cells that are discarded.')
atmxLayerStatsRxCellDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsRxCellDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsRxCellDiscards.setDescription('The total number of receive cells that are discarded.')
atmxLayerStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 6), AtmClearStats()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxLayerStatsClear.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsClear.setDescription("When this attribute is set to 'clearStats', the counters for this logical row are reset to 0 and atmxLayerStatsClearTime is reset to 0.")
atmxLayerStatsClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLayerStatsClearTime.setStatus('current')
if mibBuilder.loadTexts: atmxLayerStatsClearTime.setDescription('Amount of time in seconds that has elapsed since the counters have been cleared.')
aal5LayerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2), )
if mibBuilder.loadTexts: aal5LayerStatsTable.setStatus('current')
if mibBuilder.loadTexts: aal5LayerStatsTable.setDescription('A table of AAL5 layer statistics information.')
aal5LayerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: aal5LayerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: aal5LayerStatsEntry.setDescription('An entry in the table, containing information about the AAL5 layer statistics.')
aal5LayerTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxOctets.setStatus('current')
if mibBuilder.loadTexts: aal5LayerTxOctets.setDescription('The total number of successfully transmitted octets for all AAL5 connections.')
aal5LayerTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxCells.setStatus('current')
if mibBuilder.loadTexts: aal5LayerTxCells.setDescription('The total number of successfully transmitted cells for all AAL5 connections.')
aal5LayerTxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxSDUs.setStatus('current')
if mibBuilder.loadTexts: aal5LayerTxSDUs.setDescription('The total number of successfully transmitted service data units for all AAL5 connections.')
aal5LayerTxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxSDUDiscards.setStatus('current')
if mibBuilder.loadTexts: aal5LayerTxSDUDiscards.setDescription('The total number of transmit SDUs discarded.')
aal5LayerTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerTxErrors.setStatus('current')
if mibBuilder.loadTexts: aal5LayerTxErrors.setDescription('The total number of transmit SDUs that could not be transmitted due to errors.')
aal5LayerRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxOctets.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxOctets.setDescription('The total number of successfully received octets for all AAL5 connections.')
aal5LayerRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxCells.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxCells.setDescription('The total number of successfully received cells for all AAL5 connections.')
aal5LayerRxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSDUs.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxSDUs.setDescription('The total number of successfully received service data units for all AAL5 connections.')
aal5LayerRxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSDUDiscards.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxSDUDiscards.setDescription('The total number of received SDUs discarded.')
aal5LayerRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxErrors.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxErrors.setDescription('The total number of errored SDUs that received.')
aal5LayerRxSarTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSarTimeouts.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxSarTimeouts.setDescription('The total number of partially re-assembled SDUs that were discarded.')
aal5LayerRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxCrcErrors.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxCrcErrors.setDescription('The total number of SDUs that were received with CRC errors.')
aal5LayerRxSDUInvalidSz = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerRxSDUInvalidSz.setStatus('current')
if mibBuilder.loadTexts: aal5LayerRxSDUInvalidSz.setDescription('The total number of SDUs discarded because their size exceeded the max SDU size.')
aal5LayerClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 15), AtmClearStats()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aal5LayerClearStats.setStatus('current')
if mibBuilder.loadTexts: aal5LayerClearStats.setDescription("When this attribute is set to 'clearStats', the counters for this logical row are reset to 0 and aal5LayerStatsClearTime is reset to 0.")
aal5LayerStatsClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aal5LayerStatsClearTime.setStatus('current')
if mibBuilder.loadTexts: aal5LayerStatsClearTime.setDescription('Amount of time in seconds that has elapsed since the counters have been reset.')
atmxVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1), )
if mibBuilder.loadTexts: atmxVccStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsTable.setDescription('A table of ATM virtual channel connection statistics information.')
atmxVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"), (0, "SWITCH-ATM-MIB", "atmxVccVci"))
if mibBuilder.loadTexts: atmxVccStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsEntry.setDescription('An entry in the table, containing information about the ATM virtual channel connection statistics.')
atmxVccStatsTxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUs.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsTxSDUs.setDescription("The total number of transmitted SDU's on this virtual channel.")
atmxVccStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxCells.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsTxCells.setDescription('The total number of transmitted cells on this virtual channel.')
atmxVccStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxOctets.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsTxOctets.setDescription('The total number of transmitted octets on this virtual channel.')
atmxVccStatsRxSDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUs.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxSDUs.setDescription("The total number of received SDU's on this virtual channel.")
atmxVccStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCells.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxCells.setDescription('The total number of received cells on this virtual channel.')
atmxVccStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxOctets.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxOctets.setDescription('The total number of received octets on this virtual channel.')
atmxVccStatsTxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxSDUDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsTxSDUDiscards.setDescription('The total number of transmit SDUs discarded on this virtual channel.')
atmxVccStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsTxErrors.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsTxErrors.setDescription('The total number of transmit SDU errors on this virtual channel.')
atmxVccStatsRxSDUDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSDUDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxSDUDiscards.setDescription("The total number of receive SDU's discarded on this virtual channel.")
atmxVccStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxErrors.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxErrors.setDescription("The total number of receive SDU's with errors on this virtual channel.")
atmxVccStatsRxSarTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxSarTimeouts.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxSarTimeouts.setDescription('The total number of partially re-assembled SDUs that were discarded.')
atmxVccStatsRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxCrcErrors.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxCrcErrors.setDescription("The total number of receive SDU's crc errors on this virtual channel.")
atmxVccStatsRxOversizedSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsRxOversizedSdus.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsRxOversizedSdus.setDescription("The total number of receive SDU's that are oversized.")
atmxVccStatsConnCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnCreateTime.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsConnCreateTime.setDescription('Time elapsed in seconds since the connection has been created.')
atmxVccStatsConnInIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnInIdleTime.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsConnInIdleTime.setDescription('Time that has elapsed in seconds since any traffic has been received on this connection.')
atmxVccStatsConnOutIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnOutIdleTime.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsConnOutIdleTime.setDescription('Time that has elapsed in seconds since any traffic has been sent out on this connection.')
atmxVccStatsConnModifiedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccStatsConnModifiedTime.setStatus('current')
if mibBuilder.loadTexts: atmxVccStatsConnModifiedTime.setDescription('Time that has elapsed in seconds since any connection parameters have been modified.')
atmxLecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1), )
if mibBuilder.loadTexts: atmxLecStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTable.setDescription('A table of ATM LEC statistics information.')
atmxLecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxLecIndex"))
if mibBuilder.loadTexts: atmxLecStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsEntry.setDescription('An entry in the table, containing information about the LEC statistics.')
atmxLecStatsTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxArpReq.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxArpReq.setDescription('Total number of ARP requests transmitted from this LEC.')
atmxLecStatsTxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxArpRsp.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxArpRsp.setDescription('Total number of ARP responses transmitted from this LEC.')
atmxLecStatsTxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxControlPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxControlPkts.setDescription('Total number of control packets transmitted from this LEC.')
atmxLecStatsTxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxUnicastPkts.setDescription('Total number of unicast packets transmitted from this LEC.')
atmxLecStatsTxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxMulticastPkts.setDescription('Total number of multicast packets transmitted from this LEC.')
atmxLecStatsTxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxBroadcastPkts.setDescription('Total number of broadcast packets transmitted from this LEC.')
atmxLecStatsTxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsTxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsTxDiscardPkts.setDescription('Total number of transmission packets discarded from this LEC.')
atmxLecStatsRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxArpReq.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxArpReq.setDescription('Total number of ARP requests received for this LEC.')
atmxLecStatsRxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxArpRsp.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxArpRsp.setDescription('Total number of ARP responses received for this LEC.')
atmxLecStatsRxControlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxControlPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxControlPkts.setDescription('Total number of control packets received for this LEC.')
atmxLecStatsRxUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxUnicastPkts.setDescription('Total number of unicast packets received for this LEC.')
atmxLecStatsRxMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxMulticastPkts.setDescription('Total number of multicast packets received for this LEC.')
atmxLecStatsRxBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxBroadcastPkts.setDescription('Total number of broadcast packets received for this LEC.')
atmxLecStatsRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecStatsRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: atmxLecStatsRxDiscardPkts.setDescription('Total number of discarded packets received for this LEC.')
atmxCipStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1), )
if mibBuilder.loadTexts: atmxCipStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsTable.setDescription('A table of ATM CIP statistics information.')
atmxCipStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"))
if mibBuilder.loadTexts: atmxCipStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsEntry.setDescription('An entry in the table, containing information about the CIP statistics.')
atmxCipStatsPktsFromOtherLIS = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsPktsFromOtherLIS.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsPktsFromOtherLIS.setDescription('Total number of packets received that does not belong to this logical IP subnet.')
atmxCipStatsTxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxArpReq.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsTxArpReq.setDescription('Total number of ARP requests transmitted from this CIP.')
atmxCipStatsTxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxArpRsp.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsTxArpRsp.setDescription('Total number of ARP responses transmitted from this CIP.')
atmxCipStatsTxInArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxInArpReq.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsTxInArpReq.setDescription('Total number of InARP requests transmitted from this CIP.')
atmxCipStatsTxInArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxInArpRsp.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsTxInArpRsp.setDescription('Total number of InARP responses transmitted from this CIP.')
atmxCipStatsTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsTxDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsTxDiscards.setDescription('Total number of packets discarded on transmit from this CIP.')
atmxCipStatsRxArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxArpReq.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsRxArpReq.setDescription('Total number of ARP requests received for this CIP.')
atmxCipStatsRxArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxArpRsp.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsRxArpRsp.setDescription('Total number of ARP responses received for this CIP.')
atmxCipStatsRxInArpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxInArpReq.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsRxInArpReq.setDescription('Total number of InARP requests received for this CIP.')
atmxCipStatsRxInArpRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxInArpRsp.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsRxInArpRsp.setDescription('Total number of InARP responsese received for this CIP.')
atmxCipStatsRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipStatsRxDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxCipStatsRxDiscards.setDescription('Total number of packets discarded on receive for this CIP.')
atmxSscopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1), )
if mibBuilder.loadTexts: atmxSscopStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTable.setDescription('A table of ATM Service Specific Connection Oriented Protocol (SSCOP) statistics information.')
atmxSscopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxSscopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsEntry.setDescription('An entry in the table, containing information about the ATM SSCOP statistics.')
atmxSscopStatsTxTotalPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxTotalPdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTxTotalPdus.setDescription("Total number of transmit PDU's sent without error by SSCOP.")
atmxSscopStatsTxDiscardSdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxDiscardSdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTxDiscardSdus.setDescription('Total number of transmit SDUs discarded by SSCOP.')
atmxSscopStatsTxDiscardPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxDiscardPdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTxDiscardPdus.setDescription('Total number of transmit PDUs discarded by SSCOP.')
atmxSscopStatsTxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxErrorPdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTxErrorPdus.setDescription('Total number of transmit PDUs with transmission errors.')
atmxSscopStatsTxBufferInUseCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxBufferInUseCtr.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTxBufferInUseCtr.setDescription('Transmit buffer in-use counter.')
atmxSscopStatsTxBufferInUseGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsTxBufferInUseGauge.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsTxBufferInUseGauge.setDescription('Transmit buffer in-use gauge.')
atmxSscopStatsRxTotalPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxTotalPdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsRxTotalPdus.setDescription("Total number of PDU's received without error by SSCOP.")
atmxSscopStatsRxDiscardPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxDiscardPdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsRxDiscardPdus.setDescription('Total number of PDUs discarded on receipt by SSCOP.')
atmxSscopStatsRxErrorPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxErrorPdus.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsRxErrorPdus.setDescription('Total number of received PDUs with reception errors.')
atmxSscopStatsRxBufferInUseCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxBufferInUseCtr.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsRxBufferInUseCtr.setDescription('Receive buffer in-use counter.')
atmxSscopStatsRxBufferInUseGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 8, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSscopStatsRxBufferInUseGauge.setStatus('current')
if mibBuilder.loadTexts: atmxSscopStatsRxBufferInUseGauge.setDescription('Receive buffer in-use gauge.')
atmxIlmiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1), )
if mibBuilder.loadTexts: atmxIlmiStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxIlmiStatsTable.setDescription('A table of ATM ILMI statistics information.')
atmxIlmiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"))
if mibBuilder.loadTexts: atmxIlmiStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxIlmiStatsEntry.setDescription('An entry in the table, containing information about the ATM ILMI statistics.')
atmxIlmiTxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxIlmiTxPDUs.setStatus('current')
if mibBuilder.loadTexts: atmxIlmiTxPDUs.setDescription('Total number of transmitted PDUs over the ILMI connection.')
atmxIlmiRxPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxIlmiRxPDUs.setStatus('current')
if mibBuilder.loadTexts: atmxIlmiRxPDUs.setDescription('Total number of received PDUs over the ILMI connection.')
atmxIlmiRxDiscardPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxIlmiRxDiscardPDUs.setStatus('current')
if mibBuilder.loadTexts: atmxIlmiRxDiscardPDUs.setDescription('Total number of received PDUs that are received over the ILMI connection and discarded.')
atmxVccTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: atmxVccTable.setStatus('current')
if mibBuilder.loadTexts: atmxVccTable.setDescription('A table of ATM virtual channel connections status and parameter information.')
atmxVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPortIndex"), (0, "SWITCH-ATM-MIB", "atmxVccVci"))
if mibBuilder.loadTexts: atmxVccEntry.setStatus('current')
if mibBuilder.loadTexts: atmxVccEntry.setDescription('An entry in the table, containing information about the ATM virtual channel connections.')
atmxVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 2), AtmVpi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccVpi.setStatus('current')
if mibBuilder.loadTexts: atmxVccVpi.setDescription('The virtual path identifier associated with this virtual connection.')
atmxVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 3), AtmVci())
if mibBuilder.loadTexts: atmxVccVci.setStatus('current')
if mibBuilder.loadTexts: atmxVccVci.setDescription('The virtual channel identifier associated with the virtual connection.')
atmxVccCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccCircuitType.setStatus('current')
if mibBuilder.loadTexts: atmxVccCircuitType.setDescription('The virtual connection circuit type.')
atmxVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 5), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmxVccOperStatus.setDescription('The actual operational status of the VCC.')
atmxVccUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxVccUpTime.setStatus('current')
if mibBuilder.loadTexts: atmxVccUpTime.setDescription("The virtual channel connection up time in seconds since atmxVccOperStatus transitioned to the value 'up'.")
atmxVccTxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 7), AtmQosClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccTxQosClass.setStatus('current')
if mibBuilder.loadTexts: atmxVccTxQosClass.setDescription('Transmit Quality of Service for this virtual channel connection.')
atmxVccTxBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccTxBestEffort.setStatus('current')
if mibBuilder.loadTexts: atmxVccTxBestEffort.setDescription('Transmit Best Effort Indicator for this virtual channel connection.')
atmxVccTxPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(192, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccTxPeakCellRate.setStatus('current')
if mibBuilder.loadTexts: atmxVccTxPeakCellRate.setDescription('Peak Cell Rate for CLP 0+1 in the transmit direction for this virtual channel connection.')
atmxVccRxQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 10), AtmQosClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRxQosClass.setStatus('current')
if mibBuilder.loadTexts: atmxVccRxQosClass.setDescription('Receive Quality of Service for this virtual channel connection.')
atmxVccRxBestEffort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRxBestEffort.setStatus('current')
if mibBuilder.loadTexts: atmxVccRxBestEffort.setDescription('Receive Best Effort Indicator for this virtual channel connection.')
atmxVccRxPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(192, 20000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRxPeakCellRate.setStatus('current')
if mibBuilder.loadTexts: atmxVccRxPeakCellRate.setDescription('Peak Cell Rate for CLP 0+1 in the receive direction for this virtual channel connection.')
atmxVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxVccRowStatus.setDescription("Only the values 'active', 'createAndGo', and 'delete' are supported.")
atmxVccServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sscop", 1), ("ilmi", 2), ("lec", 3), ("cip", 4), ("oam", 5), ("pt-pt", 6), ("trunk", 7), ("csr", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxVccServiceType.setStatus('current')
if mibBuilder.loadTexts: atmxVccServiceType.setDescription('The virtual connection Service type.')
atmxLecArpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1), )
if mibBuilder.loadTexts: atmxLecArpTable.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpTable.setDescription('A table of ATM address to MAC address information.')
atmxLecArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxLecIndex"), (0, "SWITCH-ATM-MIB", "atmxLecArpMacAddress"))
if mibBuilder.loadTexts: atmxLecArpEntry.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpEntry.setDescription('An entry in the table, containing information about the ATM address.')
atmxLecArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: atmxLecArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpMacAddress.setDescription('The MAC address for identifying this Arp entry.')
atmxLecArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 3), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpAtmAddress.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpAtmAddress.setDescription('The ATM address for the corresponding MAC addess.')
atmxLecArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 4), AtmVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpVci.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpVci.setDescription('The virtual channel identifier associated with Arp entry.')
atmxLecArpTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecArpTimeToLive.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpTimeToLive.setDescription('The address time to live in seconds. The value 0 indicates an infinite time to live.')
atmxLecArpSource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 6), AtmxArpEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxLecArpSource.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpSource.setDescription('The source of this Arp entry.')
atmxLecArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 13, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxLecArpRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxLecArpRowStatus.setDescription("Only the values 'active', 'createAndGo', and 'delete' are supported.")
atmxCipArpTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1), )
if mibBuilder.loadTexts: atmxCipArpTable.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpTable.setDescription('A table of ATM address to IP address information.')
atmxCipArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxCipIndex"), (0, "SWITCH-ATM-MIB", "atmxCipArpIPAddress"))
if mibBuilder.loadTexts: atmxCipArpEntry.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpEntry.setDescription('An entry in the table, containing information about the ATM address.')
atmxCipArpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: atmxCipArpIPAddress.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpIPAddress.setDescription('The IP address for this Arp entry.')
atmxCipArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 3), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpAtmAddress.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpAtmAddress.setDescription('The ATM address for the Arp address.')
atmxCipArpVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 4), AtmClientVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpVci.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpVci.setDescription('The virtual channel identifier associated with Arp entry.')
atmxCipArpTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCipArpTimeToLive.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpTimeToLive.setDescription('The Arp Entry time to live in seconds. The value 0 indicates an infinite time to live')
atmxCipArpSource = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 6), AtmxArpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpSource.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpSource.setDescription('The source of this Arp entry.')
atmxCipArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 12, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxCipArpRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxCipArpRowStatus.setDescription("Only the values 'active', 'createAndGo', and 'delete' are supported.")
atmxPtToPtTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1), )
if mibBuilder.loadTexts: atmxPtToPtTable.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtTable.setDescription('A table of point to point over ATM.')
atmxPtToPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPtToPtIndex"))
if mibBuilder.loadTexts: atmxPtToPtEntry.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtEntry.setDescription('An entry in the table containg information about the point to point connection.')
atmxPtToPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: atmxPtToPtIndex.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtIndex.setDescription('The index which identifies each entry instance.')
atmxPtToPtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtDescription.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtDescription.setDescription('A description of the point to point link.')
atmxPtToPtEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfc1483", 1), ("private", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtEncap.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtEncap.setDescription("The data encapsulation format. 'rfc1483' identifies the format defined in RFC 1483.")
atmxPtToPtConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtConnType.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtConnType.setDescription('The connection type of the point to point link.')
atmxPtToPtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 5), AtmClientVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtVci.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtVci.setDescription("The VCI used if atmxPtToPtConnType has the value 'pvc'.")
atmxPtToPtDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 6), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtDestAddr.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtDestAddr.setDescription('The ATM address of the other end point of the connection.')
atmxPtToPtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtRowStatus.setDescription("This object is used to create or delete an entry in the atmxPtToPtTable. Only the values 'active', 'createAndGo', and 'delete' are supported. The objects atmxPtToPtVlanNumber, atmxPtToPtConnType, and atmxPtToPtVci if atmxPtToPtConnType is 'pvc' or atmxPtToPtDestAddr if atmxPtToPtConnType is 'svc' are required for a successful 'createAndGo'. ")
atmxPtToPtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 8), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtIfIndex.setDescription('This is the value of ifIndex or 0 if ifIndex is not known.')
atmxPtToPtVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 9), AtmxVlanRange()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtVlanNumber.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtVlanNumber.setDescription('The VLAN which is supported by this point to point link.')
atmxPtToPtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 10), AtmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxPtToPtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtAdminStatus.setDescription('The administrative status of this point to point instance.')
atmxPtToPtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 1, 1, 11), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtOperStatus.setDescription('The operational status of this point to point instance.')
atmxPtToPtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2), )
if mibBuilder.loadTexts: atmxPtToPtStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtStatsTable.setDescription('A table of point to point Statistics.')
atmxPtToPtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxPtToPtIndex"))
if mibBuilder.loadTexts: atmxPtToPtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtStatsEntry.setDescription('An entry in the table containg information about the point to point connection statistics.')
atmxPtToPtStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalTxPkts.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtStatsTotalTxPkts.setDescription('Total Transmission Packets through this Connection.')
atmxPtToPtStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalRxPkts.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtStatsTotalRxPkts.setDescription('Total Packets Received through this Connection.')
atmxPtToPtStatsTotalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalTxDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtStatsTotalTxDiscards.setDescription('Total Transmission packets discarded by this connection.')
atmxPtToPtStatsTotalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxPtToPtStatsTotalRxDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxPtToPtStatsTotalRxDiscards.setDescription('Total Received packets discarded by this connection.')
atmxTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1), )
if mibBuilder.loadTexts: atmxTrunkTable.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkTable.setDescription('A table of trunk over ATM.')
atmxTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxTrunkIndex"))
if mibBuilder.loadTexts: atmxTrunkEntry.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkEntry.setDescription('An entry in the table containg information about the trunk connection.')
atmxTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: atmxTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkIndex.setDescription('The index which identifies each entry instance.')
atmxTrunkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkDescription.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkDescription.setDescription('A description of the trunk link.')
atmxTrunkConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkConnType.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkConnType.setDescription('The connection type of the trunk link.')
atmxTrunkVci = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 4), AtmClientVci()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkVci.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkVci.setDescription("The VCI used if atmxTrunkConnType has the value 'pvc'.")
atmxTrunkDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 5), AtmAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkDestAddr.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkDestAddr.setDescription("The ATM address of the other end point of the connection if atmxTrunkConnType is 'svc'.")
atmxTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkRowStatus.setDescription("This attribute is used to create or delete an entry in the atmxTrunkTable. Only the values 'active', 'createAndGo', and 'delete' are supported. The following objects must exist for a successful create, atmxTrunkConnType and atmxTrunkVci if atmxTrunkConnType has the value 'pvc' or atmxTrunkDestAddr if atmxTrunkConnType has the value 'svc'.")
atmxTrunkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 7), AtmAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkAdminStatus.setDescription('The administrative status of this trunk instance.')
atmxTrunkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 1, 1, 8), AtmConnectionOperStatusCodes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkOperStatus.setDescription('The operational status of this trunk instance.')
atmxTrunkVlanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2), )
if mibBuilder.loadTexts: atmxTrunkVlanTable.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkVlanTable.setDescription('A table containing the list of 1 or more VLan which are trunked over ATM. Creating an entry in this table creates entries in ifTable and SWITCH-VLAN_MIB.vPortTable. ')
atmxTrunkVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxTrunkIndex"), (0, "SWITCH-ATM-MIB", "atmxTrunkVlanNumber"))
if mibBuilder.loadTexts: atmxTrunkVlanEntry.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkVlanEntry.setDescription('An entry in the table identifies each VLAN and the trunk connection.')
atmxTrunkVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1, 1), AtmxVlanRange())
if mibBuilder.loadTexts: atmxTrunkVlanNumber.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkVlanNumber.setDescription('This identifies the VLAN whose traffic is carried over the trunk. The value of this object corresponds to vLanNumber defined in the SWITCH-VLAN-MIB module.')
atmxTrunkVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1, 2), IfIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkVlanIfIndex.setDescription('This is the value of ifIndex of the Vlan interface.')
atmxTrunkVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmxTrunkVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkVlanRowStatus.setDescription("This attribute is used to create or delete an entry in the atmxTrunkTable. Only the values 'active', 'createAndGo', and 'delete' are supported. The corresponding atmTrunkRowStatus must have the value 'active' before this object may be created.")
atmxTrunkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3), )
if mibBuilder.loadTexts: atmxTrunkStatsTable.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkStatsTable.setDescription('A table of trunk statistics.')
atmxTrunkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1), ).setIndexNames((0, "SWITCH-ATM-MIB", "atmxTrunkIndex"))
if mibBuilder.loadTexts: atmxTrunkStatsEntry.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkStatsEntry.setDescription('An entry in the table containg information about the trunk connection statistics.')
atmxTrunkStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalTxPkts.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkStatsTotalTxPkts.setDescription('Total Transmission Packets through this Connection.')
atmxTrunkStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalRxPkts.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkStatsTotalRxPkts.setDescription('Total Packets Received through this Connection.')
atmxTrunkStatsTotalTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalTxDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkStatsTotalTxDiscards.setDescription('Total Transmission packets discarded by this connection.')
atmxTrunkStatsTotalRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 1, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxTrunkStatsTotalRxDiscards.setStatus('current')
if mibBuilder.loadTexts: atmxTrunkStatsTotalRxDiscards.setDescription('Total Received packets discarded by this connection.')
mibBuilder.exportSymbols("SWITCH-ATM-MIB", atmxPortMaxVciBits=atmxPortMaxVciBits, atmxPtToPtIfIndex=atmxPtToPtIfIndex, atmxVccStatsConnInIdleTime=atmxVccStatsConnInIdleTime, atmxLecStatsTable=atmxLecStatsTable, atmxPtToPtStatsEntry=atmxPtToPtStatsEntry, atmxVccStatsConnModifiedTime=atmxVccStatsConnModifiedTime, atmxCipStatsRxInArpReq=atmxCipStatsRxInArpReq, atmxLayerStatsTable=atmxLayerStatsTable, atmxPortMediaType=atmxPortMediaType, atmxLecControlDirectVcc=atmxLecControlDirectVcc, AtmOperStatus=AtmOperStatus, aal5LayerRxSDUs=aal5LayerRxSDUs, atmxElanName=atmxElanName, atmxLecStatsTxArpRsp=atmxLecStatsTxArpRsp, atmxPortOperStatus=atmxPortOperStatus, atmxCipStatsPktsFromOtherLIS=atmxCipStatsPktsFromOtherLIS, atmxCipGroup=atmxCipGroup, atmxPtToPtConnType=atmxPtToPtConnType, AtmVci=AtmVci, atmxPtToPtOperStatus=atmxPtToPtOperStatus, atmxTrunkStatsTotalRxPkts=atmxTrunkStatsTotalRxPkts, aal5LayerStatsTable=aal5LayerStatsTable, aal5LayerRxErrors=aal5LayerRxErrors, atmxTrunkStatsTotalTxDiscards=atmxTrunkStatsTotalTxDiscards, switchAtmMib=switchAtmMib, atmxPortTable=atmxPortTable, atmxPortTransmissionType=atmxPortTransmissionType, atmxVccStatsRxSDUs=atmxVccStatsRxSDUs, atmxCipArpAtmAddress=atmxCipArpAtmAddress, atmxTrunkIndex=atmxTrunkIndex, atmxPortMaxVCCs=atmxPortMaxVCCs, atmxCipStatsTxArpReq=atmxCipStatsTxArpReq, atmxSscopStatsTxBufferInUseGauge=atmxSscopStatsTxBufferInUseGauge, atmxPtToPtStatsTotalRxPkts=atmxPtToPtStatsTotalRxPkts, atmxVccServiceType=atmxVccServiceType, atmxLayerStatsGroup=atmxLayerStatsGroup, aal5LayerTxSDUs=aal5LayerTxSDUs, atmxLecMaxArpRetryCount=atmxLecMaxArpRetryCount, aal5LayerTxSDUDiscards=aal5LayerTxSDUDiscards, atmxLecVccTimeout=atmxLecVccTimeout, atmxCipStatsTxDiscards=atmxCipStatsTxDiscards, atmxCipStatsRxDiscards=atmxCipStatsRxDiscards, atmxTrunkStatsTable=atmxTrunkStatsTable, atmxCipVci=atmxCipVci, PYSNMP_MODULE_ID=switchAtmMib, atmxLecControlDistributeVcc=atmxLecControlDistributeVcc, atmxCipRowStatus=atmxCipRowStatus, atmxLayerStatsClearTime=atmxLayerStatsClearTime, atmxVccStatsTxOctets=atmxVccStatsTxOctets, atmxLecArpTimeToLive=atmxLecArpTimeToLive, atmxPortEnableIlmiPoll=atmxPortEnableIlmiPoll, IfIndexOrZero=IfIndexOrZero, atmxVccRowStatus=atmxVccRowStatus, AtmAdminStatus=AtmAdminStatus, atmxTrunkAdminStatus=atmxTrunkAdminStatus, atmxLecArpRespTime=atmxLecArpRespTime, atmxLecStatsTxUnicastPkts=atmxLecStatsTxUnicastPkts, atmxCipStatsEntry=atmxCipStatsEntry, atmxPortAddress=atmxPortAddress, atmxTrunkTable=atmxTrunkTable, atmxLecRowStatus=atmxLecRowStatus, atmxLecVPortNumber=atmxLecVPortNumber, atmxLecStatsRxMulticastPkts=atmxLecStatsRxMulticastPkts, atmxPtToPtAdminStatus=atmxPtToPtAdminStatus, atmxVccVpi=atmxVccVpi, atmxLecArpMacAddress=atmxLecArpMacAddress, atmxLecFlushTimeout=atmxLecFlushTimeout, atmxSscopStatsRxBufferInUseCtr=atmxSscopStatsRxBufferInUseCtr, atmxCipStatsGroup=atmxCipStatsGroup, atmxCipStatsTxInArpRsp=atmxCipStatsTxInArpRsp, AtmClientVci=AtmClientVci, atmxLecStatsRxArpReq=atmxLecStatsRxArpReq, atmxCipStatsRxArpRsp=atmxCipStatsRxArpRsp, atmxPtToPtDescription=atmxPtToPtDescription, atmxLecStatsTxControlPkts=atmxLecStatsTxControlPkts, atmxLecStatsRxUnicastPkts=atmxLecStatsRxUnicastPkts, atmxCipVciTable=atmxCipVciTable, atmxPtToPtDestAddr=atmxPtToPtDestAddr, atmxCipAdmStatus=atmxCipAdmStatus, atmxCipArpGroup=atmxCipArpGroup, atmxPortGroup=atmxPortGroup, atmxCipVciId=atmxCipVciId, atmxVccTxBestEffort=atmxVccTxBestEffort, atmxPortIndex=atmxPortIndex, atmxPortSignalingVci=atmxPortSignalingVci, atmxLayerStatsTxCells=atmxLayerStatsTxCells, atmxVccStatsEntry=atmxVccStatsEntry, atmxCipStatsRxInArpRsp=atmxCipStatsRxInArpRsp, atmxTrunkStatsTotalRxDiscards=atmxTrunkStatsTotalRxDiscards, atmxIlmiTxPDUs=atmxIlmiTxPDUs, atmxLecArpAtmAddress=atmxLecArpAtmAddress, atmxIlmiStatsTable=atmxIlmiStatsTable, AtmClearStats=AtmClearStats, atmxSscopStatsTxDiscardPdus=atmxSscopStatsTxDiscardPdus, atmxPtToPtStatsTotalRxDiscards=atmxPtToPtStatsTotalRxDiscards, aal5LayerStatsEntry=aal5LayerStatsEntry, atmxVccStatsTxErrors=atmxVccStatsTxErrors, atmxVccStatsRxCrcErrors=atmxVccStatsRxCrcErrors, atmxCipIndex=atmxCipIndex, atmxTrunkDescription=atmxTrunkDescription, atmxCipStatsRxArpReq=atmxCipStatsRxArpReq, atmxCipConnectionType=atmxCipConnectionType, atmxPortMacAddress=atmxPortMacAddress, atmxVccUpTime=atmxVccUpTime, atmxTrunkOperStatus=atmxTrunkOperStatus, atmxPortEnablePlScramble=atmxPortEnablePlScramble, atmxLecArpEntry=atmxLecArpEntry, atmxLecIfIndex=atmxLecIfIndex, atmxIlmiRxPDUs=atmxIlmiRxPDUs, atmxLecConfigMode=atmxLecConfigMode, atmxPtToPtVlanNumber=atmxPtToPtVlanNumber, atmxVccStatsRxCells=atmxVccStatsRxCells, atmxLayerStatsClear=atmxLayerStatsClear, atmxCipDescription=atmxCipDescription, atmxPtToPtStatsTable=atmxPtToPtStatsTable, atmxCipOperStatus=atmxCipOperStatus, aal5LayerTxOctets=aal5LayerTxOctets, atmxVccEntry=atmxVccEntry, atmxPtToPtTable=atmxPtToPtTable, atmxVccStatsGroup=atmxVccStatsGroup, atmxLecIndex=atmxLecIndex, atmxTrunkVlanTable=atmxTrunkVlanTable, atmxCipIfIndex=atmxCipIfIndex, atmxLayerStatsEntry=atmxLayerStatsEntry, AtmPortIndex=AtmPortIndex, atmxLecStatsRxControlPkts=atmxLecStatsRxControlPkts, atmxTrunkRowStatus=atmxTrunkRowStatus, atmxTrunkGroup=atmxTrunkGroup, atmxTrunkStatsTotalTxPkts=atmxTrunkStatsTotalTxPkts, atmxVccTxPeakCellRate=atmxVccTxPeakCellRate, atmxCipArpSource=atmxCipArpSource, atmxSscopStatsTxErrorPdus=atmxSscopStatsTxErrorPdus, atmxLecArpVci=atmxLecArpVci, AtmConnectionOperStatusCodes=AtmConnectionOperStatusCodes, atmxLecStatsRxArpRsp=atmxLecStatsRxArpRsp, atmxVccRxQosClass=atmxVccRxQosClass, atmxPortILMIVci=atmxPortILMIVci, AtmAddress=AtmAddress, atmxSscopStatsTable=atmxSscopStatsTable, atmxLecArpGroup=atmxLecArpGroup, atmxLecStatsRxBroadcastPkts=atmxLecStatsRxBroadcastPkts, atmxSscopStatsRxBufferInUseGauge=atmxSscopStatsRxBufferInUseGauge, atmxPortSignalingMode=atmxPortSignalingMode, atmxSscopStatsRxDiscardPdus=atmxSscopStatsRxDiscardPdus, atmxIlmiStatsEntry=atmxIlmiStatsEntry, atmxTrunkVci=atmxTrunkVci, atmxLecVlanNumber=atmxLecVlanNumber, AtmLecIndex=AtmLecIndex, atmxCipArpTimeToLive=atmxCipArpTimeToLive, atmxCipStatsTable=atmxCipStatsTable, atmxCipRipMode=atmxCipRipMode, atmxCipVciEntry=atmxCipVciEntry, atmxLecUnicastMacAddress=atmxLecUnicastMacAddress, atmxPtToPtGroup=atmxPtToPtGroup, atmxSscopStatsTxBufferInUseCtr=atmxSscopStatsTxBufferInUseCtr, atmxVccStatsRxOversizedSdus=atmxVccStatsRxOversizedSdus, atmxTrunkVlanIfIndex=atmxTrunkVlanIfIndex, atmxLecStatsEntry=atmxLecStatsEntry, aal5LayerStatsClearTime=aal5LayerStatsClearTime, atmxVccStatsRxSarTimeouts=atmxVccStatsRxSarTimeouts, atmxSscopStatsRxTotalPdus=atmxSscopStatsRxTotalPdus, AtmCipIndex=AtmCipIndex, AtmTransmissionTypes=AtmTransmissionTypes, atmxCipVciRowStatus=atmxCipVciRowStatus, atmxLayerStatsRxCells=atmxLayerStatsRxCells, atmxLecServerAddress=atmxLecServerAddress, atmxPtToPtEntry=atmxPtToPtEntry, atmxPortSignalingVersion=atmxPortSignalingVersion, atmxVccStatsTxSDUDiscards=atmxVccStatsTxSDUDiscards, atmxPtToPtStatsTotalTxPkts=atmxPtToPtStatsTotalTxPkts, atmxPtToPtIndex=atmxPtToPtIndex, atmxLecTable=atmxLecTable, atmxLecArpTable=atmxLecArpTable, atmxLecGroup=atmxLecGroup, atmxLecId=atmxLecId, aal5LayerClearStats=aal5LayerClearStats, atmxLecStatsRxDiscardPkts=atmxLecStatsRxDiscardPkts, atmxCipEntry=atmxCipEntry, aal5LayerRxOctets=aal5LayerRxOctets, atmxVccStatsConnOutIdleTime=atmxVccStatsConnOutIdleTime, atmxVccOperStatus=atmxVccOperStatus, atmxLecControlTimeout=atmxLecControlTimeout, atmxPortClock=atmxPortClock, AtmxArpEntryType=AtmxArpEntryType, atmxCipIPAddress=atmxCipIPAddress, atmxVccStatsTable=atmxVccStatsTable, atmxCipStatsTxInArpReq=atmxCipStatsTxInArpReq, atmxIlmiRxDiscardPDUs=atmxIlmiRxDiscardPDUs, atmxVccTable=atmxVccTable, aal5LayerRxSDUDiscards=aal5LayerRxSDUDiscards, AtmVpi=AtmVpi, atmxTrunkStatsEntry=atmxTrunkStatsEntry, aal5LayerTxErrors=aal5LayerTxErrors, atmxCipStatsTxArpRsp=atmxCipStatsTxArpRsp, atmxTrunkVlanRowStatus=atmxTrunkVlanRowStatus, atmxLecStatsTxDiscardPkts=atmxLecStatsTxDiscardPkts, AtmQosClass=AtmQosClass, atmxCipMtuSize=atmxCipMtuSize, atmxCipProtocolState=atmxCipProtocolState, atmxLecStatsTxArpReq=atmxLecStatsTxArpReq, atmxAddressGroup=atmxAddressGroup, atmxVccCircuitType=atmxVccCircuitType, atmxCipArpIPAddress=atmxCipArpIPAddress, atmxTrunkVlanNumber=atmxTrunkVlanNumber, atmxLecDescription=atmxLecDescription, atmxPtToPtRowStatus=atmxPtToPtRowStatus, atmxVccTxQosClass=atmxVccTxQosClass, atmxLecStatsTxBroadcastPkts=atmxLecStatsTxBroadcastPkts, atmxLecArpRowStatus=atmxLecArpRowStatus, atmxSscopStatsRxErrorPdus=atmxSscopStatsRxErrorPdus, atmxTrunkConnType=atmxTrunkConnType, aal5LayerRxSarTimeouts=aal5LayerRxSarTimeouts, AtmxVlanRange=AtmxVlanRange, atmxLecMulticastForwardVcc=atmxLecMulticastForwardVcc, atmxLecMaxUnknownFrameCount=atmxLecMaxUnknownFrameCount, atmxVccStatsTxSDUs=atmxVccStatsTxSDUs, atmxPortDescription=atmxPortDescription, atmxVccStatsRxErrors=atmxVccStatsRxErrors, atmxVccGroup=atmxVccGroup, atmxCipServerAtmAddress=atmxCipServerAtmAddress, aal5LayerRxCrcErrors=aal5LayerRxCrcErrors, atmxLecProtocolState=atmxLecProtocolState, atmxCipArpRowStatus=atmxCipArpRowStatus, atmxVccRxBestEffort=atmxVccRxBestEffort, aal5LayerRxCells=aal5LayerRxCells, atmxPortEnableIlmi=atmxPortEnableIlmi, atmxSscopStatsTxTotalPdus=atmxSscopStatsTxTotalPdus, atmxPtToPtStatsTotalTxDiscards=atmxPtToPtStatsTotalTxDiscards, atmxCipTable=atmxCipTable, atmxVccRxPeakCellRate=atmxVccRxPeakCellRate, atmxTrunkDestAddr=atmxTrunkDestAddr, atmxLecMulticastSendVcc=atmxLecMulticastSendVcc, atmxCipArpVci=atmxCipArpVci, atmxPtToPtEncap=atmxPtToPtEncap, atmxTrunkVlanEntry=atmxTrunkVlanEntry, atmxPortIlmiStatus=atmxPortIlmiStatus, atmxLecAgeingTime=atmxLecAgeingTime, atmxPortEntry=atmxPortEntry, atmxCipArpTable=atmxCipArpTable, atmxPortAdaptorRamSize=atmxPortAdaptorRamSize, atmxSscopStatsEntry=atmxSscopStatsEntry, atmxIlmiStatsGroup=atmxIlmiStatsGroup, atmxLayerStatsRxCellDiscards=atmxLayerStatsRxCellDiscards, aal5LayerTxCells=aal5LayerTxCells, atmxPortSignalingStatus=atmxPortSignalingStatus, atmxLecEntry=atmxLecEntry, atmxLecMaxUnknownFrameTime=atmxLecMaxUnknownFrameTime, atmxLecArpSource=atmxLecArpSource, atmxPtToPtVci=atmxPtToPtVci, atmxTrunkEntry=atmxTrunkEntry, AtmMediaTypes=AtmMediaTypes, atmxLayerStatsTxCellDiscards=atmxLayerStatsTxCellDiscards, atmxLecStatsGroup=atmxLecStatsGroup, atmxVccStatsRxSDUDiscards=atmxVccStatsRxSDUDiscards)
mibBuilder.exportSymbols("SWITCH-ATM-MIB", atmxVccStatsConnCreateTime=atmxVccStatsConnCreateTime, atmxCipArpEntry=atmxCipArpEntry, atmxSscopStatsGroup=atmxSscopStatsGroup, atmxVccStatsTxCells=atmxVccStatsTxCells, atmxLecStatsTxMulticastPkts=atmxLecStatsTxMulticastPkts, atmxSscopStatsTxDiscardSdus=atmxSscopStatsTxDiscardSdus, atmxCipIPSubnetMask=atmxCipIPSubnetMask, atmxVccStatsRxOctets=atmxVccStatsRxOctets, atmxVccVci=atmxVccVci, aal5LayerRxSDUInvalidSz=aal5LayerRxSDUInvalidSz)
