#
# PySNMP MIB module EXTREME-PBQOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, PortList, L4Port = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "PortList", "L4Port")
ifEntry, = mibBuilder.importSymbols("IF-MIB", "ifEntry")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
extremeQosPolicy = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 7))
if mibBuilder.loadTexts: extremeQosPolicy.setLastUpdated('9903030000Z')
if mibBuilder.loadTexts: extremeQosPolicy.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeQosPolicy.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeQosPolicy.setDescription('Extreme QoS Policy configuration objects')
extremeNextAvailableQosRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNextAvailableQosRuleIndex.setStatus('current')
if mibBuilder.loadTexts: extremeNextAvailableQosRuleIndex.setDescription("The value of the next available QoS Rule index. This object is used by an NMS to select an index value for row-creation in the extremeQosRuleTable. The current value of this object is changed to a new value when the current value is written to an agent's table. Row creation using the current value of this object allocates a extremeQosRuleIndex. Note the following: 1. A newly created row does not have to be active(1) for the agent to allocate the extremeQosRuleIndex. 2. Race conditions between multiple NMS's end when a row is created. Rows are deemed created when a setRequest is successfully committed (i.e. the errorStats is noError(0)). 3. An agent that exhausts its supply of extremeQosRuleIndex values returns zero as the value of this object. This can be used by an NMS as an indication to deleted unused rows and reboot the device.")
extremeQosClearIPFdb = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 7, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeQosClearIPFdb.setStatus('current')
if mibBuilder.loadTexts: extremeQosClearIPFdb.setDescription('Setting this to true will clear the hardware IP flow table.')
extremeQosClearFdb = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 7, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeQosClearFdb.setStatus('current')
if mibBuilder.loadTexts: extremeQosClearFdb.setDescription('Setting this to true will clear the hardware MAC flow table.')
extremeQosRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2), )
if mibBuilder.loadTexts: extremeQosRuleTable.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleTable.setDescription('Table of QoS policy rules. Entries that duplicate the exact same set of policy conditions are not allowed.')
extremeQosRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1), ).setIndexNames((0, "EXTREME-PBQOS-MIB", "extremeQosRuleIndex"))
if mibBuilder.loadTexts: extremeQosRuleEntry.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleEntry.setDescription('Entry in table of QoS policy rules')
extremeQosRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleIndex.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleIndex.setDescription('An index into the table of QoS policy pattern rules. The index for a manager to use for creating new rows is determined by reading the value of extremeNextAvailableQosRuleIndex.')
extremeQosRuleScope = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("signaled", 2), ("inband", 3))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleScope.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleScope.setDescription("The scope of conditions in which this rule applies. The value 'signaled' means that the policy rule is applied only to QoS signaling messages e.g. RSVP. The value 'inband' means that the policy rule is applied only to data traffic passing through this node. the value 'any' means that the policy is applied to any of the above conditions. Only the value 'any' is supported in ExtremeWare 6.0.")
extremeQosRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("forward", 2), ("backward", 3))).clone('forward')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleDirection.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleDirection.setDescription("The direction in which this rule applies. The value 'forward' means that the rule is applied to data streams in the direction specified by the classification pattern. The value 'backward' means that the rule is applied in the reverse direction. The value 'any' means that the rule is applied for traffic in either direction of data flow. Note that the direction is applied to where the data flow itself will go, not to the direction of any signaling messages e.g. RSVP. Only the value 'forward' is supported in ExtremeWare 6.0.")
extremeQosRuleInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleInPort.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleInPort.setDescription('The ifIndex value of the physical switch input port for which this rule applies. Rules that indicate an individual value for this object have a lower precedence in ExtremeWare than rules that specify IP patterns. Conversely, rules that use IP patterns must apply to all physical ports and specify a value of 0 for this object. Any attempt to write a rule that indicates an individual value for this object together with non-default values for any of { extremeQosRuleDestAddrStart, extremeQosRuleDestAddrEnd, extremeQosRuleSrcAddrStart, extremeQosRuleSrcAddrEnd, extremeQosRuleProtocol, extremeQosRuleDestL4PortStart, extremeQosRuleDestL4PortEnd, extremeQosRuleSourceL4PortStart, extremeQosRuleSourceL4PortEnd and extremeQosRuleInPortMask } will be rejected by the agent.')
extremeQosRuleInPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleInPortMask.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleInPortMask.setDescription("The list of physical switch input ports which further qualifies an IP flow. This object is an octet string with the MSB of octet 0 indicating port 0 and LSB indicating port 7. Similarly, the MSB of octet 1 indicates port 8 and it's LSB indicates port 15 and so on. The port numbers are 0-based. This object has no meaning for rules defined on physical ports that are not associated with an IP flow. Port based rules can be defined by assigning a non zero value to extremeQosRuleInPort. Any attempt to set this value without specifying the source/destination address range and/or source/destination l4 port range will be rejected by the agent. For IP flows that apply to all physical ports in the switch, this will be a zero length octet string.")
extremeQosRuleDestAddrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleDestAddrStart.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleDestAddrStart.setDescription('The start of the destination IP address range for which this rule applies.If this object has any value other than the default then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent.')
extremeQosRuleDestAddrEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 7), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleDestAddrEnd.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleDestAddrEnd.setDescription('The end of the destination IP address range for which this rule applies. If this object has any value other than the default then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent.')
extremeQosRuleSrcAddrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleSrcAddrStart.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleSrcAddrStart.setDescription('The start of the source IP address range for which this rule applies. If this object has any value other than the default then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent.')
extremeQosRuleSrcAddrEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 9), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleSrcAddrEnd.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleSrcAddrEnd.setDescription('The end of the source IP address range for which this rule applies. If this object has any value other than the default then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent.')
extremeQosRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("udp", 2), ("tcp", 3), ("other", 4), ("tcpPermitEstablished", 5), ("icmp", 6))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleProtocol.setDescription("The IP protocol number for which this rule applies. If this object has any value other than 'any' then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent.")
extremeQosRuleDestL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 11), L4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleDestL4PortStart.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleDestL4PortStart.setDescription('The destination starting layer 4 port number that would be used to match an IP flow. The value of 0 means that all layer 4 information would be ignored when matching an IP flow. If this object has any value other than 0 then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent. Any attempt to write an ICMP rule specifying an IP pattern with a non-default value for this object will be rejected by the agent.')
extremeQosRuleSourceL4PortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 12), L4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleSourceL4PortStart.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleSourceL4PortStart.setDescription('The source starting layer 4 port number that would be used to match an IP flow. The value of 0 means that all layer 4 information would be ignored when matching an IP flow. If this object has any value other than 0 then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent. NOTE: For an ICMP rule that specifies an IP pattern, this object has a different meaning in that it specifies the ICMP Type and Code values, in the following manner: The value of the Type must be shifted to the left by 8 bits and logical ORed with the value of the Code. The result will be stored in this object. In this case, this object can only contain values between 0 and 65535 inclusive since the ICMP Type and Code values are limited between 0 and 255 each.')
extremeQosRuleTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleTosMask.setStatus('deprecated')
if mibBuilder.loadTexts: extremeQosRuleTosMask.setDescription('A mask for the incoming IP Type-of-Service field to be applied when matching. The value of 0 means that any incoming IP ToS field is ignored. Only the default value is supported in ExtremeWare 6.0.')
extremeQosRuleTosMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleTosMatch.setStatus('deprecated')
if mibBuilder.loadTexts: extremeQosRuleTosMatch.setDescription('If the value of the incoming IP Type-of-Service field, after applying a mask of extremeQosRuleTosMask, is this value then this rule is applied. Only the default value is supported in ExtremeWare 6.0.')
extremeQosRuleQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 15), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleQosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleQosProfileIndex.setDescription('A pointer into the extremeQosProfileTable indicating the QoS treatment and actions to be applied to traffic matching this rule. A value of 0 means that this traffic will be dropped/discarded. The default value is that this traffic gets the default QoS treatment and actions.')
extremeQosRuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 16), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleOwner.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleOwner.setDescription('Indicates the identity of the manager that configured this entry.')
extremeQosRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleRowStatus.setDescription('The row status for this QoS rule. This OBJECT can be set to: active(1) createAndGo(4) createAndWait(5) destroy(6) The following values may be read: active(1) notReady(3). ')
extremeQosRuleDestL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 18), L4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleDestL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleDestL4PortEnd.setDescription('The destination last layer 4 port number that would determine the l4 port range to match an IP flow. The value of 0 means that all layer 4 information would be ignored when matching an IP flow. If this object has any value other than 0 then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent. Any attempt to write an ICMP rule specifying an IP pattern with a non-default value for this object will be rejected by the agent.')
extremeQosRuleSourceL4PortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 19), L4Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleSourceL4PortEnd.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleSourceL4PortEnd.setDescription('The source last layer 4 port number that would determine the l4 port range to match an IP flow. The value of 0 means that all layer 4 information would be ignored when matching an IP flow. If this object has any value other than 0 then this rule takes precedence over any rule that specifies an individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent. Any attempt to write an ICMP rule specifying an IP pattern with a non-default value for this object will be rejected by the agent.')
extremeQosRulePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRulePrecedence.setStatus('current')
if mibBuilder.loadTexts: extremeQosRulePrecedence.setDescription('The precedence used to select one rule over potentially multiple rules that might match an L3/L4 flow. The rule with highest precedence takes precedence over any rule that specifies a matching flow, individual physical input port, a VLAN or any incoming implicit 802.1p traffic class rule. Any attempt to write a rule that indicates a non-default value for this object together with an individual port value for extremeQosRuleInPort will be rejected by the agent.')
extremeQosRuleCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeQosRuleCounter.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleCounter.setDescription(' ')
extremeQosRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosRuleName.setStatus('current')
if mibBuilder.loadTexts: extremeQosRuleName.setDescription('A unique Qos rule name. If this is not specified then the system generates one automatically.')
extremeQosCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 7, 3), )
if mibBuilder.loadTexts: extremeQosCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: extremeQosCapabilitiesTable.setDescription('Table of per-port QoS policy capabilities. An entry only exists in this table for ifTable entries representing physical ports. On a modular system with mixed capability silicon it is necessary to indicate the QoS capabilities to a manager.')
extremeQosCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 7, 3, 1), )
ifEntry.registerAugmentions(("EXTREME-PBQOS-MIB", "extremeQosCapabilitiesEntry"))
extremeQosCapabilitiesEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: extremeQosCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: extremeQosCapabilitiesEntry.setDescription('Entry in table of QoS policy capabilities for a given switch port.')
extremeQosCapMarkIpTosCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeQosCapMarkIpTosCapable.setStatus('current')
if mibBuilder.loadTexts: extremeQosCapMarkIpTosCapable.setDescription('This port is capable of supporting policies that involve the changing of IP TOS octet values.')
extremeQosCapMatchIpTosCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeQosCapMatchIpTosCapable.setStatus('current')
if mibBuilder.loadTexts: extremeQosCapMatchIpTosCapable.setDescription('This port is capable of supporting policies that involve packet classification based on matching of IP TOS octet values.')
mibBuilder.exportSymbols("EXTREME-PBQOS-MIB", extremeQosRuleDestL4PortEnd=extremeQosRuleDestL4PortEnd, PYSNMP_MODULE_ID=extremeQosPolicy, extremeQosRuleSourceL4PortEnd=extremeQosRuleSourceL4PortEnd, extremeQosRuleTosMask=extremeQosRuleTosMask, extremeQosRuleScope=extremeQosRuleScope, extremeQosRuleDestL4PortStart=extremeQosRuleDestL4PortStart, extremeQosClearFdb=extremeQosClearFdb, extremeQosRuleQosProfileIndex=extremeQosRuleQosProfileIndex, extremeQosRuleCounter=extremeQosRuleCounter, extremeQosRuleRowStatus=extremeQosRuleRowStatus, extremeQosRuleDestAddrEnd=extremeQosRuleDestAddrEnd, extremeNextAvailableQosRuleIndex=extremeNextAvailableQosRuleIndex, extremeQosRuleName=extremeQosRuleName, extremeQosRuleTable=extremeQosRuleTable, extremeQosRuleSourceL4PortStart=extremeQosRuleSourceL4PortStart, extremeQosRuleDirection=extremeQosRuleDirection, extremeQosRuleIndex=extremeQosRuleIndex, extremeQosRuleSrcAddrStart=extremeQosRuleSrcAddrStart, extremeQosCapMarkIpTosCapable=extremeQosCapMarkIpTosCapable, extremeQosCapMatchIpTosCapable=extremeQosCapMatchIpTosCapable, extremeQosPolicy=extremeQosPolicy, extremeQosRuleEntry=extremeQosRuleEntry, extremeQosRulePrecedence=extremeQosRulePrecedence, extremeQosRuleInPortMask=extremeQosRuleInPortMask, extremeQosRuleSrcAddrEnd=extremeQosRuleSrcAddrEnd, extremeQosRuleInPort=extremeQosRuleInPort, extremeQosRuleProtocol=extremeQosRuleProtocol, extremeQosClearIPFdb=extremeQosClearIPFdb, extremeQosRuleTosMatch=extremeQosRuleTosMatch, extremeQosCapabilitiesEntry=extremeQosCapabilitiesEntry, extremeQosRuleOwner=extremeQosRuleOwner, extremeQosRuleDestAddrStart=extremeQosRuleDestAddrStart, extremeQosCapabilitiesTable=extremeQosCapabilitiesTable)
