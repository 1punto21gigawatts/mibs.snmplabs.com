#
# PySNMP MIB module CISCO-FC-PM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-PM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Unsigned32, IpAddress, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Counter32, MibIdentifier, NotificationType, ModuleIdentity, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "IpAddress", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Counter32", "MibIdentifier", "NotificationType", "ModuleIdentity", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoFcPmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 99997))
ciscoFcPmMIB.setRevisions(('2005-02-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcPmMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFcPmMIB.setLastUpdated('200502060000Z')
if mibBuilder.loadTexts: ciscoFcPmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoFcPmMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-15500@cisco.com')
if mibBuilder.loadTexts: ciscoFcPmMIB.setDescription('This MIB module defines 24 hour error statistics for Fibre Channel (FC) and FICON interfaces collected every 15 minutes. Based on errors described in Fibre Channel - Framing and Signaling (FC-FS) Draft Standard Web: ftp://ftp.t11.org/t11/pub/fc/fs/03-173v1.pdf .')
ciscoFcPmMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 0))
ciscoFcPmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1))
ciscoFcPmMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2))
cfcpmPortPerfStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 1))
cfcpmPortErrorStatusBlock = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2))
cfcpmPortPerfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 1, 1), )
if mibBuilder.loadTexts: cfcpmPortPerfStatusTable.setStatus('current')
if mibBuilder.loadTexts: cfcpmPortPerfStatusTable.setDescription('The FC Port Status table.')
cfcpmPortPerfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfcpmPortPerfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cfcpmPortPerfStatusEntry.setDescription('An entry in the FC Port Status table.')
cfcpmTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: cfcpmTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
cfcpmValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cfcpmValidIntervals.setDescription('The number of previous 15-minute intervals for which data was collected. The value will be 96 unless the measurement was (re-)started within the last 24 hours, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
cfcpmInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: cfcpmInvalidIntervals.setDescription('The number of intervals in the range from 0 to cfcpmValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
cfcpmTotalPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1), )
if mibBuilder.loadTexts: cfcpmTotalPortErrorTable.setStatus('current')
if mibBuilder.loadTexts: cfcpmTotalPortErrorTable.setDescription('The FC Total Port Errors table. This table contains various error statistics being collected for the past 24 hours.')
cfcpmTotalPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfcpmTotalPortErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cfcpmTotalPortErrorEntry.setDescription('An entry in the FC Port Errors Total table for FC and FICON interfaces.')
cfcpmtPortRxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortRxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortRxLinkResets.setDescription('The counter associated with the number of Link resets ( LR primitives ) received aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortTxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortTxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortTxLinkResets.setDescription('The counter associated with the number of Link resets ( LR primitive ) transmitted aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortLinkResets.setDescription('The counter associated with the number of times the reset link protocol was initiated on this port. This includes the number of Loop Initialization Primitive ( LIP ) events on an arbitrated loop port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortRxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortRxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortRxOfflineSequences.setDescription('The counter associated with the number of Offline Primitive OLS received at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortTxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortTxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortTxOfflineSequences.setDescription('The counter associated with the number of Offline Primitive OLS transmitted by this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortLinkFailures.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortLinkFailures.setDescription('The counter associated with the number of link failures aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortSynchLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortSynchLosses.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortSynchLosses.setDescription('The counter associated with the number of instances of synchronization loss detected at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortSignalLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortSignalLosses.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortSignalLosses.setDescription('The counter associated with the number of instances of signal loss detected at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortPrimSeqProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortPrimSeqProtocolErrors.setDescription('The counter associated with the number of primitive sequence protocol errors detected at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortInvalidTxWords.setDescription('The counter associated with the number of invalid transmission words received at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortInvalidCRCs.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortInvalidCRCs.setDescription('The counter associated with the number of frames received with invalid CRC aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 12), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortInvalidOrderedSets.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortInvalidOrderedSets.setDescription('The counter associated with the number of invalid ordered sets received at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 13), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortFramesTooLong.setDescription('The counter associated with the number of frames received at this port where the frame length was greater than what was agreed to in FLOGI/PLOGI aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortTruncatedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 14), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortTruncatedFrames.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortTruncatedFrames.setDescription('The counter associated with the number of frames received at this port where the frame length was less than the minimum indicated by the frame header aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortAddressErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 15), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortAddressErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortAddressErrors.setDescription('The counter associated with the number of frames received with unknown addressing aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 16), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortDelimiterErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortDelimiterErrors.setDescription('The counter associated with the number of invalid frame delimiters received at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortEncDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 17), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortEncDisparityErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortEncDisparityErrors.setDescription('The counter associated with the number of encoding disparity errors received at this port aggregating the previous valid 15-minute measurement intervals.')
cfcpmtPortOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 1, 1, 18), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmtPortOtherErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmtPortOtherErrors.setDescription('The counter associated with the number of times an undefined error has occurred aggregating the previous valid 15-minute measurement intervals.')
cfcpmCurrentPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2), )
if mibBuilder.loadTexts: cfcpmCurrentPortErrorTable.setStatus('current')
if mibBuilder.loadTexts: cfcpmCurrentPortErrorTable.setDescription('The FC Current Port Errors table. This table contains various error statistics being collected for the current 15 minute interval.')
cfcpmCurrentPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cfcpmCurrentPortErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cfcpmCurrentPortErrorEntry.setDescription('An entry in the FC Port Errors Current table for FC and FICON interfaces.')
cfcpmcPortRxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortRxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortRxLinkResets.setDescription('The counter associated with the number of Link resets ( LR primitives ) received in the current 15 minute interval.')
cfcpmcPortTxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortTxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortTxLinkResets.setDescription('The counter associated with the number of Link resets ( LR primitive ) transmitted in the current 15 minute interval.')
cfcpmcPortLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortLinkResets.setDescription('The counter associated with the number of times the reset link protocol was initiated on this port. This includes the number of Loop Initialization Primitive ( LIP ) events on an arbitrated loop port in the current 15 minute interval.')
cfcpmcPortRxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortRxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortRxOfflineSequences.setDescription('The counter associated with the number of Offline Primitive Sequence ( OLS ) received at this port in the current 15 minute interval.')
cfcpmcPortTxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortTxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortTxOfflineSequences.setDescription('The counter associated with the number of Offline Primitive OLS transmitted by this port in the current 15 minute interval.')
cfcpmcPortLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortLinkFailures.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortLinkFailures.setDescription('The counter associated with the number of link failures in the current 15 minute interval.')
cfcpmcPortSynchLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortSynchLosses.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortSynchLosses.setDescription('The counter associated with the number of instances of synchronization loss detected at this port in the current 15 minute interval.')
cfcpmcPortSignalLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortSignalLosses.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortSignalLosses.setDescription('The counter associated with the number of instances of signal loss detected at this port in the current 15 minute interval.')
cfcpmcPortPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortPrimSeqProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortPrimSeqProtocolErrors.setDescription('The counter associated with the number of primitive sequence protocol errors detected at this port in the current 15 minute interval.')
cfcpmcPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortInvalidTxWords.setDescription('The counter associated with the number of invalid transmission words received at this port in the current 15 minute interval.')
cfcpmcPortInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortInvalidCRCs.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortInvalidCRCs.setDescription('The counter associated with the number of frames received with invalid CRC in the current 15 minute interval.')
cfcpmcPortInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortInvalidOrderedSets.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortInvalidOrderedSets.setDescription('The counter associated with the number of invalid ordered sets received at this port in the current 15 minute interval.')
cfcpmcPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 13), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortFramesTooLong.setDescription('The counter associated with the number of frames received at this port where the frame length was greater than what was agreed to in Fabric Login ( FLOGI )/ Port Login ( PLOGI )in the current 15 minute interval.')
cfcpmcPortTruncatedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 14), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortTruncatedFrames.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortTruncatedFrames.setDescription('The counter associated with the number of frames received at this port where the frame length was less than the minimum indicated by the frame header in the current 15 minute interval.')
cfcpmcPortAddressErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 15), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortAddressErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortAddressErrors.setDescription('The counter associated with the number of frames received with unknown addressing in the current 15 minute interval.')
cfcpmcPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 16), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortDelimiterErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortDelimiterErrors.setDescription('The counter associated with the number of invalid frame delimiters received at this in the current 15 minute interval.')
cfcpmcPortEncDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 17), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortEncDisparityErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortEncDisparityErrors.setDescription('The counter associated with the number of encoding disparity errors received at this port in the current 15 minute interval.')
cfcpmcPortOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 2, 1, 18), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmcPortOtherErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmcPortOtherErrors.setDescription('The counter associated with the number of times an undefined error has occurred in the current 15 minute interval.')
cfcpmIntervalPortErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3), )
if mibBuilder.loadTexts: cfcpmIntervalPortErrorTable.setStatus('current')
if mibBuilder.loadTexts: cfcpmIntervalPortErrorTable.setDescription('The FC Interval Port Errors Table. An entry in this table contains various error statistics being collected for a particular 15 minute interval.')
cfcpmIntervalPortErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-FC-PM-MIB", "cfcpmiPortErrorIntervalNumber"))
if mibBuilder.loadTexts: cfcpmIntervalPortErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cfcpmIntervalPortErrorEntry.setDescription('An interval in the FC Port Errors Interval Table for FC and FICON interfaces.')
cfcpmiPortErrorIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cfcpmiPortErrorIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortErrorIntervalNumber.setDescription('A unique identifier of the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
cfcpmiPortRxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortRxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortRxLinkResets.setDescription('The counter associated with the number of Link resets ( LR primitives ) received in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortTxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortTxLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortTxLinkResets.setDescription('The counter associated with the number of Link resets ( LR primitive ) transmitted in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortLinkResets.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortLinkResets.setDescription('The counter associated with the number of times the reset link protocol was initiated on this port. This includes the number of Loop Initialization Primitive ( LIP ) events on an arbitrated loop port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortRxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortRxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortRxOfflineSequences.setDescription('The counter associated with the number of Offline Primitive OLS received at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortTxOfflineSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortTxOfflineSequences.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortTxOfflineSequences.setDescription('The counter associated with the number of Offline Primitive OLS transmitted by this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortLinkFailures.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortLinkFailures.setDescription('The counter associated with the number of link failures in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortSynchLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortSynchLosses.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortSynchLosses.setDescription('The counter associated with the number of instances of synchronization loss detected at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortSignalLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortSignalLosses.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortSignalLosses.setDescription('The counter associated with the number of instances of signal loss detected at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortPrimSeqProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortPrimSeqProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortPrimSeqProtocolErrors.setDescription('The counter associated with the number of primitive sequence protocol errors detected at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortInvalidTxWords.setDescription('The counter associated with the number of invalid transmission words received at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortInvalidCRCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortInvalidCRCs.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortInvalidCRCs.setDescription('The counter associated with the number of frames received with invalid CRC in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortInvalidOrderedSets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortInvalidOrderedSets.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortInvalidOrderedSets.setDescription('The counter associated with the number of invalid ordered sets received at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortFramesTooLong.setDescription('The counter associated with the number of frames received at this port where the frame length was greater than what was agreed to in FLOGI/PLOGI in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortTruncatedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortTruncatedFrames.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortTruncatedFrames.setDescription('The counter associated with the number of frames received at this port where the frame length was less than the minimum indicated by the frame header in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortAddressErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 16), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortAddressErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortAddressErrors.setDescription('The counter associated with the number of frames received with unknown addressing in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 17), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortDelimiterErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortDelimiterErrors.setDescription('The counter associated with the number of invalid frame delimiters received at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortEncDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 18), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortEncDisparityErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortEncDisparityErrors.setDescription('The counter associated with the number of encoding disparity errors received at this port in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 19), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortOtherErrors.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortOtherErrors.setDescription('The counter associated with the number of times an undefined error has occurred in a particular 15 minute interval in the past 24 hours.')
cfcpmiPortValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 99997, 1, 2, 3, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfcpmiPortValidData.setStatus('current')
if mibBuilder.loadTexts: cfcpmiPortValidData.setDescription('This variable indicates if the data for this interval is valid.')
cfcpmMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2, 1))
cfcpmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2, 2))
cfcpmMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2, 1, 1)).setObjects(("CISCO-FC-PM-MIB", "cfcpmPortStatusGroup"), ("CISCO-FC-PM-MIB", "cfcpmMandatoryGroup"), ("CISCO-FC-PM-MIB", "cfcpmOptionalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcpmMibCompliance = cfcpmMibCompliance.setStatus('current')
if mibBuilder.loadTexts: cfcpmMibCompliance.setDescription('The compliance statement for entities which implement the Cisco FC PM MIB.')
cfcpmPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2, 2, 1)).setObjects(("CISCO-FC-PM-MIB", "cfcpmTimeElapsed"), ("CISCO-FC-PM-MIB", "cfcpmValidIntervals"), ("CISCO-FC-PM-MIB", "cfcpmInvalidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcpmPortStatusGroup = cfcpmPortStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cfcpmPortStatusGroup.setDescription('The collection of FC PM Port Status Mandatory objects.')
cfcpmMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2, 2, 2)).setObjects(("CISCO-FC-PM-MIB", "cfcpmtPortPrimSeqProtocolErrors"), ("CISCO-FC-PM-MIB", "cfcpmcPortPrimSeqProtocolErrors"), ("CISCO-FC-PM-MIB", "cfcpmiPortPrimSeqProtocolErrors"), ("CISCO-FC-PM-MIB", "cfcpmiPortValidData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcpmMandatoryGroup = cfcpmMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: cfcpmMandatoryGroup.setDescription('The collection of FC PM Total Mandatory objects.')
cfcpmOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 99997, 2, 2, 3)).setObjects(("CISCO-FC-PM-MIB", "cfcpmtPortRxLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmtPortTxLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmtPortLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmtPortRxOfflineSequences"), ("CISCO-FC-PM-MIB", "cfcpmtPortTxOfflineSequences"), ("CISCO-FC-PM-MIB", "cfcpmtPortLinkFailures"), ("CISCO-FC-PM-MIB", "cfcpmtPortSynchLosses"), ("CISCO-FC-PM-MIB", "cfcpmtPortSignalLosses"), ("CISCO-FC-PM-MIB", "cfcpmtPortInvalidTxWords"), ("CISCO-FC-PM-MIB", "cfcpmtPortInvalidCRCs"), ("CISCO-FC-PM-MIB", "cfcpmtPortInvalidOrderedSets"), ("CISCO-FC-PM-MIB", "cfcpmtPortFramesTooLong"), ("CISCO-FC-PM-MIB", "cfcpmtPortTruncatedFrames"), ("CISCO-FC-PM-MIB", "cfcpmtPortAddressErrors"), ("CISCO-FC-PM-MIB", "cfcpmtPortDelimiterErrors"), ("CISCO-FC-PM-MIB", "cfcpmtPortEncDisparityErrors"), ("CISCO-FC-PM-MIB", "cfcpmtPortOtherErrors"), ("CISCO-FC-PM-MIB", "cfcpmcPortRxLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmcPortTxLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmcPortLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmcPortRxOfflineSequences"), ("CISCO-FC-PM-MIB", "cfcpmcPortTxOfflineSequences"), ("CISCO-FC-PM-MIB", "cfcpmcPortLinkFailures"), ("CISCO-FC-PM-MIB", "cfcpmcPortSynchLosses"), ("CISCO-FC-PM-MIB", "cfcpmcPortSignalLosses"), ("CISCO-FC-PM-MIB", "cfcpmcPortInvalidTxWords"), ("CISCO-FC-PM-MIB", "cfcpmcPortInvalidCRCs"), ("CISCO-FC-PM-MIB", "cfcpmcPortInvalidOrderedSets"), ("CISCO-FC-PM-MIB", "cfcpmcPortFramesTooLong"), ("CISCO-FC-PM-MIB", "cfcpmcPortTruncatedFrames"), ("CISCO-FC-PM-MIB", "cfcpmcPortAddressErrors"), ("CISCO-FC-PM-MIB", "cfcpmcPortDelimiterErrors"), ("CISCO-FC-PM-MIB", "cfcpmcPortEncDisparityErrors"), ("CISCO-FC-PM-MIB", "cfcpmcPortOtherErrors"), ("CISCO-FC-PM-MIB", "cfcpmiPortRxLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmiPortTxLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmiPortLinkResets"), ("CISCO-FC-PM-MIB", "cfcpmiPortRxOfflineSequences"), ("CISCO-FC-PM-MIB", "cfcpmiPortTxOfflineSequences"), ("CISCO-FC-PM-MIB", "cfcpmiPortLinkFailures"), ("CISCO-FC-PM-MIB", "cfcpmiPortSynchLosses"), ("CISCO-FC-PM-MIB", "cfcpmiPortSignalLosses"), ("CISCO-FC-PM-MIB", "cfcpmiPortInvalidTxWords"), ("CISCO-FC-PM-MIB", "cfcpmiPortInvalidCRCs"), ("CISCO-FC-PM-MIB", "cfcpmiPortInvalidOrderedSets"), ("CISCO-FC-PM-MIB", "cfcpmiPortFramesTooLong"), ("CISCO-FC-PM-MIB", "cfcpmiPortTruncatedFrames"), ("CISCO-FC-PM-MIB", "cfcpmiPortAddressErrors"), ("CISCO-FC-PM-MIB", "cfcpmiPortDelimiterErrors"), ("CISCO-FC-PM-MIB", "cfcpmiPortEncDisparityErrors"), ("CISCO-FC-PM-MIB", "cfcpmiPortOtherErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cfcpmOptionalGroup = cfcpmOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: cfcpmOptionalGroup.setDescription('The collection of FC PM Optional objects.')
mibBuilder.exportSymbols("CISCO-FC-PM-MIB", cfcpmPortPerfStatusEntry=cfcpmPortPerfStatusEntry, cfcpmcPortPrimSeqProtocolErrors=cfcpmcPortPrimSeqProtocolErrors, cfcpmPortPerfStatusTable=cfcpmPortPerfStatusTable, cfcpmcPortOtherErrors=cfcpmcPortOtherErrors, cfcpmiPortPrimSeqProtocolErrors=cfcpmiPortPrimSeqProtocolErrors, cfcpmcPortDelimiterErrors=cfcpmcPortDelimiterErrors, cfcpmtPortSignalLosses=cfcpmtPortSignalLosses, cfcpmCurrentPortErrorTable=cfcpmCurrentPortErrorTable, cfcpmtPortFramesTooLong=cfcpmtPortFramesTooLong, cfcpmiPortInvalidOrderedSets=cfcpmiPortInvalidOrderedSets, cfcpmtPortInvalidCRCs=cfcpmtPortInvalidCRCs, cfcpmIntervalPortErrorTable=cfcpmIntervalPortErrorTable, cfcpmiPortErrorIntervalNumber=cfcpmiPortErrorIntervalNumber, cfcpmcPortRxOfflineSequences=cfcpmcPortRxOfflineSequences, cfcpmtPortOtherErrors=cfcpmtPortOtherErrors, cfcpmCurrentPortErrorEntry=cfcpmCurrentPortErrorEntry, cfcpmcPortInvalidCRCs=cfcpmcPortInvalidCRCs, cfcpmiPortAddressErrors=cfcpmiPortAddressErrors, cfcpmcPortInvalidTxWords=cfcpmcPortInvalidTxWords, ciscoFcPmMIBNotifs=ciscoFcPmMIBNotifs, cfcpmcPortAddressErrors=cfcpmcPortAddressErrors, cfcpmPortStatusGroup=cfcpmPortStatusGroup, cfcpmiPortSignalLosses=cfcpmiPortSignalLosses, cfcpmValidIntervals=cfcpmValidIntervals, PYSNMP_MODULE_ID=ciscoFcPmMIB, cfcpmiPortInvalidCRCs=cfcpmiPortInvalidCRCs, cfcpmPortErrorStatusBlock=cfcpmPortErrorStatusBlock, ciscoFcPmMIBConform=ciscoFcPmMIBConform, cfcpmiPortFramesTooLong=cfcpmiPortFramesTooLong, cfcpmcPortLinkFailures=cfcpmcPortLinkFailures, cfcpmInvalidIntervals=cfcpmInvalidIntervals, cfcpmTotalPortErrorTable=cfcpmTotalPortErrorTable, cfcpmtPortLinkResets=cfcpmtPortLinkResets, cfcpmtPortInvalidTxWords=cfcpmtPortInvalidTxWords, cfcpmtPortAddressErrors=cfcpmtPortAddressErrors, cfcpmcPortRxLinkResets=cfcpmcPortRxLinkResets, cfcpmiPortValidData=cfcpmiPortValidData, cfcpmiPortInvalidTxWords=cfcpmiPortInvalidTxWords, cfcpmMibGroups=cfcpmMibGroups, cfcpmtPortTxOfflineSequences=cfcpmtPortTxOfflineSequences, cfcpmMandatoryGroup=cfcpmMandatoryGroup, cfcpmcPortFramesTooLong=cfcpmcPortFramesTooLong, cfcpmiPortTruncatedFrames=cfcpmiPortTruncatedFrames, cfcpmiPortOtherErrors=cfcpmiPortOtherErrors, cfcpmtPortInvalidOrderedSets=cfcpmtPortInvalidOrderedSets, cfcpmtPortEncDisparityErrors=cfcpmtPortEncDisparityErrors, cfcpmcPortTruncatedFrames=cfcpmcPortTruncatedFrames, cfcpmcPortInvalidOrderedSets=cfcpmcPortInvalidOrderedSets, ciscoFcPmMIBObjects=ciscoFcPmMIBObjects, cfcpmTotalPortErrorEntry=cfcpmTotalPortErrorEntry, cfcpmcPortEncDisparityErrors=cfcpmcPortEncDisparityErrors, cfcpmPortPerfStatus=cfcpmPortPerfStatus, cfcpmcPortSignalLosses=cfcpmcPortSignalLosses, cfcpmTimeElapsed=cfcpmTimeElapsed, ciscoFcPmMIB=ciscoFcPmMIB, cfcpmMibCompliances=cfcpmMibCompliances, cfcpmiPortLinkFailures=cfcpmiPortLinkFailures, cfcpmcPortLinkResets=cfcpmcPortLinkResets, cfcpmtPortTruncatedFrames=cfcpmtPortTruncatedFrames, cfcpmtPortSynchLosses=cfcpmtPortSynchLosses, cfcpmOptionalGroup=cfcpmOptionalGroup, cfcpmcPortTxLinkResets=cfcpmcPortTxLinkResets, cfcpmMibCompliance=cfcpmMibCompliance, cfcpmiPortTxOfflineSequences=cfcpmiPortTxOfflineSequences, cfcpmtPortRxOfflineSequences=cfcpmtPortRxOfflineSequences, cfcpmiPortSynchLosses=cfcpmiPortSynchLosses, cfcpmiPortRxLinkResets=cfcpmiPortRxLinkResets, cfcpmcPortTxOfflineSequences=cfcpmcPortTxOfflineSequences, cfcpmcPortSynchLosses=cfcpmcPortSynchLosses, cfcpmiPortRxOfflineSequences=cfcpmiPortRxOfflineSequences, cfcpmiPortTxLinkResets=cfcpmiPortTxLinkResets, cfcpmiPortDelimiterErrors=cfcpmiPortDelimiterErrors, cfcpmtPortDelimiterErrors=cfcpmtPortDelimiterErrors, cfcpmtPortRxLinkResets=cfcpmtPortRxLinkResets, cfcpmtPortPrimSeqProtocolErrors=cfcpmtPortPrimSeqProtocolErrors, cfcpmtPortTxLinkResets=cfcpmtPortTxLinkResets, cfcpmtPortLinkFailures=cfcpmtPortLinkFailures, cfcpmiPortEncDisparityErrors=cfcpmiPortEncDisparityErrors, cfcpmIntervalPortErrorEntry=cfcpmIntervalPortErrorEntry, cfcpmiPortLinkResets=cfcpmiPortLinkResets)
