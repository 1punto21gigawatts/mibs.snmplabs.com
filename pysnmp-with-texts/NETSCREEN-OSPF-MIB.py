#
# PySNMP MIB module NETSCREEN-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
netscreenVR, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, mib_2, TimeTicks, ObjectIdentity, MibIdentifier, Unsigned32, iso, Integer32, Bits, Counter64, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "mib-2", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Unsigned32", "iso", "Integer32", "Bits", "Counter64", "NotificationType", "Gauge32")
DisplayString, TruthValue, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "TextualConvention")
nsOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 2))
if mibBuilder.loadTexts: nsOspf.setLastUpdated('200506032022Z')
if mibBuilder.loadTexts: nsOspf.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: nsOspf.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: nsOspf.setDescription('The MIB module to describe the NS-OSPF Version 2 Protocol')
class AreaID(TextualConvention, IpAddress):
    description = 'An OSPF Area Identifier.'
    status = 'deprecated'

class RouterID(TextualConvention, IpAddress):
    description = 'A OSPF Router Identifier.'
    status = 'deprecated'

class Metric(TextualConvention, Integer32):
    description = 'The OSPF Internal Metric.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class BigMetric(TextualConvention, Integer32):
    description = 'The OSPF External Metric.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class Status(TextualConvention, Integer32):
    description = "The status of an interface: 'enabled' indicates that it is willing to communicate with other OSPF Routers, while 'disabled' indicates that it is not."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class PositiveInteger(TextualConvention, Integer32):
    description = 'A positive integer. Values in excess are precluded as unnecessary and prone to interoperability issues.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class HelloRange(TextualConvention, Integer32):
    description = 'The range of intervals on which hello messages are exchanged.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class UpToMaxAge(TextualConvention, Integer32):
    description = 'The values that one might find or configure for variables bounded by the maximum age of an LSA.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 3600)

class InterfaceIndex(TextualConvention, Integer32):
    description = 'The range of ifIndex.'
    status = 'deprecated'

class DesignatedRouterPriority(TextualConvention, Integer32):
    description = 'The values defined for the priority of a system for becoming the designated router.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TOSType(TextualConvention, Integer32):
    description = 'Type of Service is defined as a mapping to the IP Type of Service Flags as defined in the IP Forwarding Table MIB +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30 The remaining values are left for future definition.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 30)

nsOspfGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1), )
if mibBuilder.loadTexts: nsOspfGeneralTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfGeneralTable.setDescription('Ospf general information table per VR')
nsOspfGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfGeneralVRID"))
if mibBuilder.loadTexts: nsOspfGeneralEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfGeneralEntry.setDescription('Ospf general information table per VR')
nsOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 1), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfRouterId.setReference('OSPF Version 2, C.1 Global parameters')
if mibBuilder.loadTexts: nsOspfRouterId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfRouterId.setDescription("A 32-bit integer uniquely identifying the router in the Autonomous System. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses.")
nsOspfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 2), Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAdminStat.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAdminStat.setDescription("The administrative status of OSPF in the router. The value 'enabled' denotes that the OSPF Process is active on at least one inter- face; 'disabled' disables it on all inter- faces.")
nsOspfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVersionNumber.setReference('OSPF Version 2, Title')
if mibBuilder.loadTexts: nsOspfVersionNumber.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVersionNumber.setDescription('The deprecated version number of the OSPF proto- col is 2.')
nsOspfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaBdrRtrStatus.setReference('OSPF Version 2, Section 3 Splitting the AS into Areas')
if mibBuilder.loadTexts: nsOspfAreaBdrRtrStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaBdrRtrStatus.setDescription('A flag to note whether this router is an area border router.')
nsOspfASBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfASBdrRtrStatus.setReference('OSPF Version 2, Section 3.3 Classification of routers')
if mibBuilder.loadTexts: nsOspfASBdrRtrStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfASBdrRtrStatus.setDescription('A flag to note whether this router is config- ured as an Autonomous System border router.')
nsOspfExternLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExternLsaCount.setReference('OSPF Version 2, Appendix A.4.5 AS external link advertisements')
if mibBuilder.loadTexts: nsOspfExternLsaCount.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExternLsaCount.setDescription('The number of external (LS type 5) link-state advertisements in the link-state database.')
nsOspfExternLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExternLsaCksumSum.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExternLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of the external link-state advertisements con- tained in the link-state database. This sum can be used to determine if there has been a change in a router's link state database, and to compare the link-state database of two routers.")
nsOspfTOSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfTOSSupport.setReference('OSPF Version 2, Appendix F.1.2 Optional TOS support')
if mibBuilder.loadTexts: nsOspfTOSSupport.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfTOSSupport.setDescription("The router's support for type-of-service rout- ing.")
nsOspfOriginateNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfOriginateNewLsas.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfOriginateNewLsas.setDescription('The number of new link-state advertisements that have been originated. This number is in- cremented each time the router originates a new LSA.')
nsOspfRxNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfRxNewLsas.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfRxNewLsas.setDescription('The number of link-state advertisements re- ceived determined to be new instantiations. This number does not include newer instantia- tions of self-originated link-state advertise- ments.')
nsOspfExtLsdbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbLimit.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbLimit.setDescription("The maximum number of non-default AS- external-LSAs entries that can be stored in the link-state database. If the value is -1, then there is no limit. When the number of non-default AS-external-LSAs in a router's link-state database reaches nsOspfExtLsdbLimit, the router enters Overflow- State. The router never holds more than nsOspfExtLsdbLimit non-default AS-external-LSAs in its database. OspfExtLsdbLimit MUST be set identically in all routers attached to the OSPF backbone and/or any regular OSPF area. (i.e., OSPF stub areas and NSSAs are excluded).")
nsOspfMulticastExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfMulticastExtensions.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfMulticastExtensions.setDescription("A Bit Mask indicating whether the router is forwarding IP multicast (Class D) datagrams based on the algorithms defined in the Multi- cast Extensions to OSPF. Bit 0, if set, indicates that the router can forward IP multicast datagrams in the router's directly attached areas (called intra-area mul- ticast routing). Bit 1, if set, indicates that the router can forward IP multicast datagrams between OSPF areas (called inter-area multicast routing). Bit 2, if set, indicates that the router can forward IP multicast datagrams between Auto- nomous Systems (called inter-AS multicast rout- ing). Only certain combinations of bit settings are allowed, namely: 0 (no multicast forwarding is enabled), 1 (intra-area multicasting only), 3 (intra-area and inter-area multicasting), 5 (intra-area and inter-AS multicasting) and 7 (multicasting everywhere). By default, no mul- ticast forwarding is enabled.")
nsOspfExitOverflowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 13), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExitOverflowInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExitOverflowInterval.setDescription('The number of seconds that, after entering OverflowState, a router will attempt to leave OverflowState. This allows the router to again originate non-default AS-external-LSAs. When set to 0, the router will not leave Overflow- State until restarted.')
nsOspfDemandExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfDemandExtensions.setReference('OSPF Version 2, Appendix on Demand Routing')
if mibBuilder.loadTexts: nsOspfDemandExtensions.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfDemandExtensions.setDescription("The router's support for demand routing.")
nsOspfGeneralVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfGeneralVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfGeneralVRID.setDescription('Virtual Router ID')
nsOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2), )
if mibBuilder.loadTexts: nsOspfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data Struc- ture')
if mibBuilder.loadTexts: nsOspfAreaTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaTable.setDescription("Information describing the configured parame- ters and cumulative statistics of the router's attached areas.")
nsOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaVRID"))
if mibBuilder.loadTexts: nsOspfAreaEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaEntry.setDescription("Information describing the configured parame- ters and cumulative statistics of one of the router's attached areas.")
nsOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfAreaId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
nsOspfImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfImportAsExtern.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfImportAsExtern.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfImportAsExtern.setDescription("The area's support for importing AS external link- state advertisements.")
nsOspfSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfSpfRuns.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfSpfRuns.setDescription("The number of times that the intra-area route table has been calculated using this area's link-state database. This is typically done using Dijkstra's algorithm.")
nsOspfAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaBdrRtrCount.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaBdrRtrCount.setDescription('The total number of area border routers reach- able within this area. This is initially zero, and is calculated in each SPF Pass.')
nsOspfAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAsBdrRtrCount.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAsBdrRtrCount.setDescription('The total number of Autonomous System border routers reachable within this area. This is initially zero, and is calculated in each SPF Pass.')
nsOspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaLsaCount.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaLsaCount.setDescription("The total number of link-state advertisements in this area's link-state database, excluding AS External LSA's.")
nsOspfAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaLsaCksumSum.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaLsaCksumSum.setDescription("The 32-bit unsigned sum of the link-state ad- vertisements' LS checksums contained in this area's link-state database. This sum excludes external (LS type 5) link-state advertisements. The sum can be used to determine if there has been a change in a router's link state data- base, and to compare the link-state database of two routers.")
nsOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2))).clone('noAreaSummary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaSummary.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaSummary.setDescription('The variable nsOspfAreaSummary controls the im- port of summary LSAs into stub areas. It has no effect on other areas. If it is noAreaSummary, the router will neither originate nor propagate summary LSAs into the stub area. It will rely entirely on its de- fault route. If it is sendAreaSummary, the router will both summarize and propagate summary LSAs.')
nsOspfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfAreaVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaVRID.setDescription('Virtual Router ID')
nsOspfStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3), )
if mibBuilder.loadTexts: nsOspfStubAreaTable.setReference('OSPF Version 2, Appendix C.2, Area Parameters')
if mibBuilder.loadTexts: nsOspfStubAreaTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubAreaTable.setDescription('The set of metrics that will be advertised by a default Area Border Router into a stub area.')
nsOspfStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfStubAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfStubTOS"), (0, "NETSCREEN-OSPF-MIB", "nsOspfStubVRID"))
if mibBuilder.loadTexts: nsOspfStubAreaEntry.setReference('OSPF Version 2, Appendix C.2, Area Parameters')
if mibBuilder.loadTexts: nsOspfStubAreaEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubAreaEntry.setDescription('The metric for a given Type of Service that will be advertised by a default Area Border Router into a stub area.')
nsOspfStubAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfStubAreaId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubAreaId.setDescription('The 32 bit identifier for the Stub Area. On creation, this can be derived from the in- stance.')
nsOspfStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfStubTOS.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubTOS.setDescription('The Type of Service associated with the metric. On creation, this can be derived from the instance.')
nsOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 3), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfStubMetric.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubMetric.setDescription('The metric value applied at the indicated type of service. By default, this equals the least metric at the type of service among the inter- faces to other areas.')
nsOspfStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfStubStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nsOspfMetric", 1), ("comparableCost", 2), ("nonComparable", 3))).clone('nsOspfMetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfStubMetricType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubMetricType.setDescription('This variable displays the type of metric ad- vertised as a default route.')
nsOspfStubVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfStubVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfStubVRID.setDescription('Virtual Router ID')
nsOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4), )
if mibBuilder.loadTexts: nsOspfLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: nsOspfLsdbTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbTable.setDescription("The OSPF Process's Link State Database.")
nsOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbType"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbLsid"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbRouterId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfLsdbVRID"))
if mibBuilder.loadTexts: nsOspfLsdbEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbEntry.setDescription('A single Link State Advertisement.')
nsOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfLsdbAreaId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
nsOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: nsOspfLsdbType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
nsOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: nsOspfLsdbLsid.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
nsOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: nsOspfLsdbRouterId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
nsOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: nsOspfLsdbSequence.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
nsOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: nsOspfLsdbAge.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
nsOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: nsOspfLsdbChecksum.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
nsOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: nsOspfLsdbAdvertisement.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
nsOspfLsdbVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfLsdbVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfLsdbVRID.setDescription('Virtual Router ID')
nsOspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6), )
if mibBuilder.loadTexts: nsOspfHostTable.setReference('OSPF Version 2, Appendix C.6 Host route param- eters')
if mibBuilder.loadTexts: nsOspfHostTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostTable.setDescription('The list of Hosts, and their metrics, that the router will advertise as host routes.')
nsOspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfHostIpAddress"), (0, "NETSCREEN-OSPF-MIB", "nsOspfHostTOS"), (0, "NETSCREEN-OSPF-MIB", "nsOspfHostVRID"))
if mibBuilder.loadTexts: nsOspfHostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostEntry.setDescription('A metric to be advertised, for a given type of service, when a given host is reachable.')
nsOspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostIpAddress.setReference('OSPF Version 2, Appendix C.6 Host route parame- ters')
if mibBuilder.loadTexts: nsOspfHostIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostIpAddress.setDescription('The IP Address of the Host.')
nsOspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 2), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostTOS.setReference('OSPF Version 2, Appendix C.6 Host route parame- ters')
if mibBuilder.loadTexts: nsOspfHostTOS.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostTOS.setDescription('The Type of Service of the route being config- ured.')
nsOspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfHostMetric.setReference('OSPF Version 2, Appendix C.6 Host route parame- ters')
if mibBuilder.loadTexts: nsOspfHostMetric.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostMetric.setDescription('The Metric to be advertised.')
nsOspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfHostStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 5), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostAreaID.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfHostAreaID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostAreaID.setDescription('The Area the Host Entry is to be found within. By default, the area that a subsuming OSPF in- terface is in, or 0.0.0.0')
nsOspfHostVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfHostVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfHostVRID.setDescription('Virtual Router ID')
nsOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7), )
if mibBuilder.loadTexts: nsOspfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: nsOspfIfTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF.')
nsOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfIfIpAddress"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAddressLessIf"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfVRID"))
if mibBuilder.loadTexts: nsOspfIfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF.')
nsOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
nsOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAddressLessIf.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
nsOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAreaId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.')
nsOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfType.setDescription("The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broad- cast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast', X.25 and similar technologies take the value 'nbma', and links that are definitively point to point take the value 'pointToPoint'.")
nsOspfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAdminStat.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfAdminStat.setDescription("The OSPF interface's administrative status. The value formed on the interface, and the in- terface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.")
nsOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfRtrPriority.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligi- ble to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
nsOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfTransitDelay.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface.')
nsOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfRetransInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets.')
nsOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 9), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfHelloInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for all routers attached to a common network.')
nsOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfRtrDeadInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
nsOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfPollInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an inactive non- broadcast multi- access neighbor.')
nsOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfState.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfState.setDescription('The OSPF Interface State.')
nsOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfDesignatedRouter.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfDesignatedRouter.setDescription('The IP Address of the Designated Router.')
nsOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfBackupDesignatedRouter.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfBackupDesignatedRouter.setDescription('The IP Address of the Backup Designated Router.')
nsOspfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfEvents.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfEvents.setDescription('The number of times this OSPF interface has changed its state, or an error has occurred.')
nsOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: nsOspfIfAuthKey.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfAuthKey.setDescription("The Authentication Key. If the Area's Author- ization Type is simplePassword, and the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment. When read, nsOspfIfAuthKey always returns an Oc- tet String of length zero.")
nsOspfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfMulticastForwarding.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMulticastForwarding.setDescription('The way multicasts should forwarded on this interface; not forwarded, forwarded as data link multicasts, or forwarded as data link uni- casts. Data link multicasting is not meaning- ful on point to point and NBMA interfaces, and setting nsOspfMulticastForwarding to 0 effective- ly disables all multicast forwarding.')
nsOspfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfDemand.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfDemand.setDescription('Indicates whether Demand OSPF procedures (hel- lo supression to FULL neighbors and setting the DoNotAge flag on proogated LSAs) should be per- formed on this interface.')
nsOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: nsOspfIfAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfAuthType.setDescription('The authentication type specified for an in- terface. Additional authentication types may be assigned locally.')
nsOspfIfVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfVRID.setDescription('Virtual Router ID')
nsOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8), )
if mibBuilder.loadTexts: nsOspfIfMetricTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: nsOspfIfMetricTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricTable.setDescription('The TOS metrics for a non-virtual interface identified by the interface index.')
nsOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricIpAddress"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricAddressLessIf"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricTOS"), (0, "NETSCREEN-OSPF-MIB", "nsOspfIfMetricVRID"))
if mibBuilder.loadTexts: nsOspfIfMetricEntry.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: nsOspfIfMetricEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricEntry.setDescription('A particular TOS metric for a non-virtual in- terface identified by the interface index.')
nsOspfIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricIpAddress.setDescription('The IP address of this OSPF interface. On row creation, this can be derived from the in- stance.')
nsOspfIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricAddressLessIf.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the value of ifIndex for in- terfaces having no IP Address. On row crea- tion, this can be derived from the instance.')
nsOspfIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 3), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricTOS.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricTOS.setDescription('The type of service metric being referenced. On row creation, this can be derived from the instance.')
nsOspfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 4), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfMetricValue.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricValue.setDescription('The metric of using this type of service on this interface. The default value of the TOS 0 Metric is 10^8 / ifSpeed.')
nsOspfIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfIfMetricStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfIfMetricVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfIfMetricVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfIfMetricVRID.setDescription('Virtual Router ID')
nsOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9), )
if mibBuilder.loadTexts: nsOspfVirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: nsOspfVirtIfTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfTable.setDescription("Information about this router's virtual inter- faces.")
nsOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfVirtIfAreaId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtIfNeighbor"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtIfVRID"))
if mibBuilder.loadTexts: nsOspfVirtIfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfEntry.setDescription('Information about a single Virtual Interface.')
nsOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfAreaId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
nsOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfNeighbor.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
nsOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfTransitDelay.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link- state update packet over this interface.')
nsOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfRetransInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets. This value should be well over the expected round- trip time.')
nsOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfHelloInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for the virtual neighbor.')
nsOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 6), PositiveInteger().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfRtrDeadInterval.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neigh- bor.")
nsOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfState.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfState.setDescription('OSPF virtual interface states.')
nsOspfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfEvents.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfEvents.setDescription('The number of state changes or error events on this Virtual Link')
nsOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: nsOspfVirtIfAuthKey.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfAuthKey.setDescription('If Authentication Type is simplePassword, the device will left adjust and zero fill to 8 oc- tets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment. When read, nsOspfVifAuthKey always returns a string of length zero.')
nsOspfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfVirtIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: nsOspfVirtIfAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfAuthType.setDescription('The authentication type specified for a virtu- al interface. Additional authentication types may be assigned locally.')
nsOspfVirtIfVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtIfVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtIfVRID.setDescription('Virtual Router ID')
nsOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10), )
if mibBuilder.loadTexts: nsOspfNbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: nsOspfNbrTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrTable.setDescription('A table of non-virtual neighbor information.')
nsOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfNbrIpAddr"), (0, "NETSCREEN-OSPF-MIB", "nsOspfNbrAddressLessIndex"), (0, "NETSCREEN-OSPF-MIB", "nsOspfNbrVRID"))
if mibBuilder.loadTexts: nsOspfNbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: nsOspfNbrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrEntry.setDescription('The information regarding a single neighbor.')
nsOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrIpAddr.setDescription("The IP address this neighbor is using in its IP Source Address. Note that, on addressless links, this will not be 0.0.0.0, but the ad- dress of another of the neighbor's interfaces.")
nsOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrAddressLessIndex.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrAddressLessIndex.setDescription('On an interface having an IP Address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.')
nsOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 3), RouterID().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrRtrId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrRtrId.setDescription('A 32-bit integer (represented as a type IpAd- dress) uniquely identifying the neighboring router in the Autonomous System.')
nsOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrOptions.setReference('OSPF Version 2, Section 12.1.2 Options')
if mibBuilder.loadTexts: nsOspfNbrOptions.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op- tions field. Bit 0, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 1, if set, indicates that the associated area accepts and operates on external informa- tion; if zero, it is a stub area. Bit 2, if set, indicates that the system is ca- pable of routing IP Multicast datagrams; i.e., that it implements the Multicast Extensions to OSPF. Bit 3, if set, indicates that the associated area is an NSSA. These areas are capable of carrying type 7 external advertisements, which are translated into type 5 external advertise- ments at NSSA borders.")
nsOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 5), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfNbrPriority.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrPriority.setDescription('The priority of this neighbor in the designat- ed router election algorithm. The value 0 sig- nifies that the neighbor is not eligible to be- come the designated router on this particular network.')
nsOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrState.setReference('OSPF Version 2, Section 10.1 Neighbor States')
if mibBuilder.loadTexts: nsOspfNbrState.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrState.setDescription('The State of the relationship with this Neigh- bor.')
nsOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrEvents.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrEvents.setDescription('The number of times this neighbor relationship has changed state, or an error has occurred.')
nsOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrLsRetransQLen.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrLsRetransQLen.setDescription('The deprecated length of the retransmission queue.')
nsOspfNbmaNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfNbmaNbrStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbmaNbrStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2))).clone('permanent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbmaNbrPermanence.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbmaNbrPermanence.setDescription("This variable displays the status of the en- try. 'dynamic' and 'permanent' refer to how the neighbor became known.")
nsOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrHelloSuppressed.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor')
nsOspfNbrVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfNbrVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfNbrVRID.setDescription('Virtual Router ID')
nsOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11), )
if mibBuilder.loadTexts: nsOspfVirtNbrTable.setReference('OSPF Version 2, Section 15 Virtual Links')
if mibBuilder.loadTexts: nsOspfVirtNbrTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrTable.setDescription('A table of virtual neighbor information.')
nsOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfVirtNbrArea"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtNbrRtrId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfVirtNbrVRID"))
if mibBuilder.loadTexts: nsOspfVirtNbrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrEntry.setDescription('Virtual neighbor information.')
nsOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrArea.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrArea.setDescription('The Transit Area Identifier.')
nsOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrRtrId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrRtrId.setDescription('A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.')
nsOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrIpAddr.setDescription('The IP address this Virtual Neighbor is us- ing.')
nsOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrOptions.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op- tions field. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 2, if set, indicates that the system is Network Multicast capable; ie, that it imple- ments OSPF Multicast Routing.")
nsOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrState.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrState.setDescription('The state of the Virtual Neighbor Relation- ship.')
nsOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrEvents.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrEvents.setDescription('The number of times this virtual link has changed its state, or an error has occurred.')
nsOspfVirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrLsRetransQLen.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrLsRetransQLen.setDescription('The deprecated length of the retransmission queue.')
nsOspfVirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrHelloSuppressed.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor')
nsOspfVirtNbrVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfVirtNbrVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfVirtNbrVRID.setDescription('Virtual Router ID')
nsOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12), )
if mibBuilder.loadTexts: nsOspfExtLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: nsOspfExtLsdbTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbTable.setDescription("The OSPF Process's Links State Database.")
nsOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbType"), (0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbLsid"), (0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbRouterId"), (0, "NETSCREEN-OSPF-MIB", "nsOspfExtLsdbVRID"))
if mibBuilder.loadTexts: nsOspfExtLsdbEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbEntry.setDescription('A single Link State Advertisement.')
nsOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: nsOspfExtLsdbType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
nsOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: nsOspfExtLsdbLsid.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
nsOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: nsOspfExtLsdbRouterId.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
nsOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: nsOspfExtLsdbSequence.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
nsOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: nsOspfExtLsdbAge.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
nsOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: nsOspfExtLsdbChecksum.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
nsOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: nsOspfExtLsdbAdvertisement.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
nsOspfExtLsdbVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfExtLsdbVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfExtLsdbVRID.setDescription('Virtual Router ID')
nsOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14), )
if mibBuilder.loadTexts: nsOspfAreaAggregateTable.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfAreaAggregateTable.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateTable.setDescription('A range of IP addresses specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255. Note that if ranges are configured such that one range sub- sumes another range (e.g., 10.0.0.0 mask 255.0.0.0 and 10.1.0.0 mask 255.255.0.0), the most specific match is the preferred one.')
nsOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1), ).setIndexNames((0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateAreaID"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateLsdbType"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateNet"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateMask"), (0, "NETSCREEN-OSPF-MIB", "nsOspfAreaAggregateVRID"))
if mibBuilder.loadTexts: nsOspfAreaAggregateEntry.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfAreaAggregateEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateEntry.setDescription('A range of IP addresses specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255. Note that if ranges are range configured such that one range subsumes another range (e.g., 10.0.0.0 mask 255.0.0.0 and 10.1.0.0 mask 255.255.0.0), the most specific match is the preferred one.')
nsOspfAreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateAreaID.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfAreaAggregateAreaID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateAreaID.setDescription('The Area the Address Aggregate is to be found within.')
nsOspfAreaAggregateLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7))).clone(namedValues=NamedValues(("summaryLink", 3), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: nsOspfAreaAggregateLsdbType.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateLsdbType.setDescription('The type of the Address Aggregate. This field specifies the Lsdb type that this Address Ag- gregate applies to.')
nsOspfAreaAggregateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateNet.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfAreaAggregateNet.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateNet.setDescription('The IP Address of the Net or Subnet indicated by the range.')
nsOspfAreaAggregateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateMask.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: nsOspfAreaAggregateMask.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateMask.setDescription('The Subnet Mask that pertains to the Net or Subnet.')
nsOspfAreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaAggregateStatus.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
nsOspfAreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsOspfAreaAggregateEffect.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateEffect.setDescription("Subnets subsumed by ranges either trigger the advertisement of the indicated aggregate (ad- vertiseMatching), or result in the subnet's not being advertised at all outside the area.")
nsOspfAreaAggregateVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsOspfAreaAggregateVRID.setStatus('deprecated')
if mibBuilder.loadTexts: nsOspfAreaAggregateVRID.setDescription('Virtual Router ID')
mibBuilder.exportSymbols("NETSCREEN-OSPF-MIB", nsOspfAreaBdrRtrStatus=nsOspfAreaBdrRtrStatus, nsOspfIfAuthKey=nsOspfIfAuthKey, Metric=Metric, nsOspfIfStatus=nsOspfIfStatus, nsOspfVirtIfRetransInterval=nsOspfVirtIfRetransInterval, nsOspfIfAreaId=nsOspfIfAreaId, nsOspfOriginateNewLsas=nsOspfOriginateNewLsas, nsOspfLsdbChecksum=nsOspfLsdbChecksum, nsOspfIfDemand=nsOspfIfDemand, nsOspfVirtIfTransitDelay=nsOspfVirtIfTransitDelay, nsOspfIfRtrPriority=nsOspfIfRtrPriority, nsOspfVirtNbrState=nsOspfVirtNbrState, PositiveInteger=PositiveInteger, nsOspfLsdbAreaId=nsOspfLsdbAreaId, nsOspfAreaAggregateVRID=nsOspfAreaAggregateVRID, nsOspfLsdbSequence=nsOspfLsdbSequence, nsOspfHostStatus=nsOspfHostStatus, nsOspfIfIpAddress=nsOspfIfIpAddress, nsOspfAddressLessIf=nsOspfAddressLessIf, nsOspfIfMetricStatus=nsOspfIfMetricStatus, nsOspfNbrRtrId=nsOspfNbrRtrId, nsOspfExtLsdbChecksum=nsOspfExtLsdbChecksum, DesignatedRouterPriority=DesignatedRouterPriority, nsOspfLsdbVRID=nsOspfLsdbVRID, nsOspfExtLsdbEntry=nsOspfExtLsdbEntry, nsOspfIfVRID=nsOspfIfVRID, nsOspfIfMetricVRID=nsOspfIfMetricVRID, nsOspfNbrLsRetransQLen=nsOspfNbrLsRetransQLen, nsOspfVirtIfVRID=nsOspfVirtIfVRID, nsOspfNbrTable=nsOspfNbrTable, nsOspfHostTOS=nsOspfHostTOS, nsOspfNbrHelloSuppressed=nsOspfNbrHelloSuppressed, nsOspfExtLsdbRouterId=nsOspfExtLsdbRouterId, nsOspfVirtNbrEntry=nsOspfVirtNbrEntry, nsOspfAreaAggregateTable=nsOspfAreaAggregateTable, nsOspfIfTransitDelay=nsOspfIfTransitDelay, nsOspfIfMetricTOS=nsOspfIfMetricTOS, nsOspfAreaAggregateAreaID=nsOspfAreaAggregateAreaID, nsOspfIfMulticastForwarding=nsOspfIfMulticastForwarding, nsOspfNbrEntry=nsOspfNbrEntry, nsOspfSpfRuns=nsOspfSpfRuns, nsOspfNbrAddressLessIndex=nsOspfNbrAddressLessIndex, nsOspfAreaEntry=nsOspfAreaEntry, nsOspfASBdrRtrStatus=nsOspfASBdrRtrStatus, nsOspfGeneralVRID=nsOspfGeneralVRID, nsOspfVirtIfRtrDeadInterval=nsOspfVirtIfRtrDeadInterval, nsOspfVirtNbrVRID=nsOspfVirtNbrVRID, nsOspfVirtNbrLsRetransQLen=nsOspfVirtNbrLsRetransQLen, nsOspfNbrPriority=nsOspfNbrPriority, nsOspfLsdbAdvertisement=nsOspfLsdbAdvertisement, nsOspfDemandExtensions=nsOspfDemandExtensions, nsOspfHostAreaID=nsOspfHostAreaID, nsOspfRxNewLsas=nsOspfRxNewLsas, nsOspfAreaLsaCksumSum=nsOspfAreaLsaCksumSum, nsOspfStubTOS=nsOspfStubTOS, nsOspfAreaLsaCount=nsOspfAreaLsaCount, nsOspfExitOverflowInterval=nsOspfExitOverflowInterval, nsOspfExtLsdbAge=nsOspfExtLsdbAge, nsOspfHostIpAddress=nsOspfHostIpAddress, nsOspfStubStatus=nsOspfStubStatus, nsOspfVersionNumber=nsOspfVersionNumber, nsOspfVirtIfAuthKey=nsOspfVirtIfAuthKey, nsOspfExtLsdbSequence=nsOspfExtLsdbSequence, nsOspfIfRtrDeadInterval=nsOspfIfRtrDeadInterval, nsOspfExtLsdbType=nsOspfExtLsdbType, PYSNMP_MODULE_ID=nsOspf, nsOspfLsdbType=nsOspfLsdbType, nsOspfHostTable=nsOspfHostTable, nsOspfIfType=nsOspfIfType, nsOspfNbmaNbrStatus=nsOspfNbmaNbrStatus, nsOspfVirtNbrRtrId=nsOspfVirtNbrRtrId, nsOspfNbrOptions=nsOspfNbrOptions, nsOspfStubAreaTable=nsOspfStubAreaTable, nsOspfIfRetransInterval=nsOspfIfRetransInterval, nsOspfNbrVRID=nsOspfNbrVRID, nsOspfHostVRID=nsOspfHostVRID, nsOspfExtLsdbLimit=nsOspfExtLsdbLimit, nsOspfIfDesignatedRouter=nsOspfIfDesignatedRouter, nsOspfHostEntry=nsOspfHostEntry, RouterID=RouterID, nsOspfIfBackupDesignatedRouter=nsOspfIfBackupDesignatedRouter, UpToMaxAge=UpToMaxAge, InterfaceIndex=InterfaceIndex, nsOspfVirtIfAuthType=nsOspfVirtIfAuthType, nsOspfMulticastExtensions=nsOspfMulticastExtensions, nsOspfLsdbRouterId=nsOspfLsdbRouterId, TOSType=TOSType, nsOspfNbrIpAddr=nsOspfNbrIpAddr, nsOspfIfMetricTable=nsOspfIfMetricTable, nsOspfVirtIfState=nsOspfVirtIfState, nsOspfStubVRID=nsOspfStubVRID, nsOspfExtLsdbTable=nsOspfExtLsdbTable, nsOspfAreaTable=nsOspfAreaTable, nsOspfAreaAggregateLsdbType=nsOspfAreaAggregateLsdbType, Status=Status, AreaID=AreaID, nsOspfLsdbAge=nsOspfLsdbAge, nsOspfIfTable=nsOspfIfTable, nsOspfStubMetricType=nsOspfStubMetricType, nsOspfNbrEvents=nsOspfNbrEvents, nsOspfExtLsdbVRID=nsOspfExtLsdbVRID, nsOspfVirtNbrOptions=nsOspfVirtNbrOptions, nsOspfIfPollInterval=nsOspfIfPollInterval, nsOspfAreaBdrRtrCount=nsOspfAreaBdrRtrCount, nsOspfAreaStatus=nsOspfAreaStatus, nsOspfHostMetric=nsOspfHostMetric, HelloRange=HelloRange, nsOspfLsdbEntry=nsOspfLsdbEntry, nsOspfIfMetricEntry=nsOspfIfMetricEntry, nsOspfVirtIfTable=nsOspfVirtIfTable, nsOspfGeneralEntry=nsOspfGeneralEntry, BigMetric=BigMetric, nsOspfAdminStat=nsOspfAdminStat, nsOspfVirtIfHelloInterval=nsOspfVirtIfHelloInterval, nsOspfNbmaNbrPermanence=nsOspfNbmaNbrPermanence, nsOspfIfEntry=nsOspfIfEntry, nsOspfExternLsaCount=nsOspfExternLsaCount, nsOspfVirtNbrIpAddr=nsOspfVirtNbrIpAddr, nsOspfStubAreaEntry=nsOspfStubAreaEntry, nsOspf=nsOspf, nsOspfIfState=nsOspfIfState, nsOspfIfHelloInterval=nsOspfIfHelloInterval, nsOspfVirtNbrEvents=nsOspfVirtNbrEvents, nsOspfAreaId=nsOspfAreaId, nsOspfStubAreaId=nsOspfStubAreaId, nsOspfAreaVRID=nsOspfAreaVRID, nsOspfImportAsExtern=nsOspfImportAsExtern, nsOspfIfEvents=nsOspfIfEvents, nsOspfIfAuthType=nsOspfIfAuthType, nsOspfVirtIfStatus=nsOspfVirtIfStatus, nsOspfVirtNbrTable=nsOspfVirtNbrTable, nsOspfIfAdminStat=nsOspfIfAdminStat, nsOspfIfMetricAddressLessIf=nsOspfIfMetricAddressLessIf, nsOspfExternLsaCksumSum=nsOspfExternLsaCksumSum, nsOspfLsdbLsid=nsOspfLsdbLsid, nsOspfAsBdrRtrCount=nsOspfAsBdrRtrCount, nsOspfAreaAggregateStatus=nsOspfAreaAggregateStatus, nsOspfGeneralTable=nsOspfGeneralTable, nsOspfExtLsdbLsid=nsOspfExtLsdbLsid, nsOspfAreaSummary=nsOspfAreaSummary, nsOspfVirtIfEntry=nsOspfVirtIfEntry, nsOspfNbrState=nsOspfNbrState, nsOspfVirtIfAreaId=nsOspfVirtIfAreaId, nsOspfAreaAggregateMask=nsOspfAreaAggregateMask, nsOspfAreaAggregateEffect=nsOspfAreaAggregateEffect, nsOspfAreaAggregateEntry=nsOspfAreaAggregateEntry, nsOspfTOSSupport=nsOspfTOSSupport, nsOspfVirtIfNeighbor=nsOspfVirtIfNeighbor, nsOspfIfMetricIpAddress=nsOspfIfMetricIpAddress, nsOspfStubMetric=nsOspfStubMetric, nsOspfVirtIfEvents=nsOspfVirtIfEvents, nsOspfVirtNbrArea=nsOspfVirtNbrArea, nsOspfExtLsdbAdvertisement=nsOspfExtLsdbAdvertisement, nsOspfRouterId=nsOspfRouterId, nsOspfAreaAggregateNet=nsOspfAreaAggregateNet, nsOspfIfMetricValue=nsOspfIfMetricValue, nsOspfLsdbTable=nsOspfLsdbTable, nsOspfVirtNbrHelloSuppressed=nsOspfVirtNbrHelloSuppressed)
